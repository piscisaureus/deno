#include <cstddef>

struct None {};
template <class... Ts>
struct Pack {};
struct Type {
  static constexpr const bool IsConst = false;
};
template <class T>
struct UnqualifiedType : Type {
  using InnerType = T;
};
template <class T>
struct ConstQualifiedType : Type {
  static constexpr const bool IsConst = true;
  using InnerType = T;
};
struct VoidType : Type {};
struct BoolType : Type {};
struct NumericType : Type {};
struct IntegerType : NumericType {};
struct UnsignedIntegerType : IntegerType {};
struct SignedIntegerType : IntegerType {};
struct FloatingPointType : NumericType {};
template <class T, size_t s>
struct ABIIndependentSizeType : T {
  static constexpr const size_t size = s;
};
template <class T>
struct PointerSizeType : T {};
template <class T>
struct PointerType : Type {
  using PointeeType = T;
};
template <class CT, class MT>
struct MemberPointerType : Type {
  using ClassType = CT;
  using MemberType = MT;
};
template <class T>
struct ReferenceType : Type {
  using PointeeType = T;
};
template <class RT>
struct LValueReferenceType : RT {};
template <class RT>
struct RValueReferenceType : RT {};
template <class RT, class PTs, template <class> class MQ>
struct FunctionProtoType : Type {
  using ReturnType = RT;
  using ParamTypes = PTs;
  template <typename T>
  using AddMethodQualifiers = MQ<T>;
};
template <typename D>
struct TagType : Type {
  using Decl = D;
};
template <typename D, typename IT>
struct EnumType : TagType<D> {
  using IntegerType = IT;
};
template <typename D>
struct RecordType : TagType<D> {};
template <typename RT>
struct UnionRecordType : RT {};
template <typename RT>
struct StructOrClassRecordType : RT {};
template <class D>
struct TypedefType : Type {
  using Decl = D;
};
template <class S>
struct NamedDecl {
  constexpr static const char* DeclName = S::value;
};
template <class S>
struct NamedDeclName : NamedDecl<S> {};
template <class S>
struct NamedDeclAnon : NamedDecl<S> {};
template <class ND, class T>
struct TypeDecl : ND {
  using Type = T;
};
template <class TD>
struct TypedefNameDecl : TD {};
template <class TD, class Ps>
struct FunctionDecl : TD {
  using Params = Ps;
};
template <class FD>
struct MethodDecl : FD {};
template <class MD, class TT>
struct InstanceMethodDecl : MD {
  using ThisType = TT;
};
template <class MD>
struct VirtualMethodDecl : MD {};
template <class MD>
struct ConstructorDecl : MD {};
template <class MD>
struct DestructorDecl : MD {};
template <class MD>
struct ConversionDecl : MD {};
template <typename T>
struct ParmVarDecl {
  using Type = T;
};

struct _str1 {
  constexpr static const char* value = "v8";
};
struct _str2 {
  constexpr static const char* value = "Context";
};
struct _str3 {
  constexpr static const char* value = "Data";
};
struct _str4 {
  constexpr static const char* value = "Isolate";
};
struct _str5 {
  constexpr static const char* value = "AccessorSignature";
};
struct _str6 {
  constexpr static const char* value = "Array";
};
struct _str7 {
  constexpr static const char* value = "ArrayBuffer";
};
struct _str8 {
  constexpr static const char* value = "BigInt";
};
struct _str9 {
  constexpr static const char* value = "BigIntObject";
};
struct _str10 {
  constexpr static const char* value = "Boolean";
};
struct _str11 {
  constexpr static const char* value = "BooleanObject";
};
struct _str12 {
  constexpr static const char* value = "Date";
};
struct _str13 {
  constexpr static const char* value = "External";
};
struct _str14 {
  constexpr static const char* value = "Function";
};
struct _str15 {
  constexpr static const char* value = "FunctionTemplate";
};
struct _str16 {
  constexpr static const char* value = "HeapProfiler";
};
struct _str17 {
  constexpr static const char* value = "ImplementationUtilities";
};
struct _str18 {
  constexpr static const char* value = "Int32";
};
struct _str19 {
  constexpr static const char* value = "Integer";
};
struct _str20 {
  constexpr static const char* value = "Maybe";
};
struct _str21 {
  constexpr static const char* value = "MicrotaskQueue";
};
struct _str22 {
  constexpr static const char* value = "Name";
};
struct _str23 {
  constexpr static const char* value = "Number";
};
struct _str24 {
  constexpr static const char* value = "NumberObject";
};
struct _str25 {
  constexpr static const char* value = "Object";
};
struct _str26 {
  constexpr static const char* value = "ObjectOperationDescriptor";
};
struct _str27 {
  constexpr static const char* value = "ObjectTemplate";
};
struct _str28 {
  constexpr static const char* value = "Platform";
};
struct _str29 {
  constexpr static const char* value = "Primitive";
};
struct _str30 {
  constexpr static const char* value = "Promise";
};
struct _str31 {
  constexpr static const char* value = "PropertyDescriptor";
};
struct _str32 {
  constexpr static const char* value = "Proxy";
};
struct _str33 {
  constexpr static const char* value = "RawOperationDescriptor";
};
struct _str34 {
  constexpr static const char* value = "Script";
};
struct _str35 {
  constexpr static const char* value = "SharedArrayBuffer";
};
struct _str36 {
  constexpr static const char* value = "Signature";
};
struct _str37 {
  constexpr static const char* value = "StartupData";
};
struct _str38 {
  constexpr static const char* value = "StackFrame";
};
struct _str39 {
  constexpr static const char* value = "StackTrace";
};
struct _str40 {
  constexpr static const char* value = "String";
};
struct _str41 {
  constexpr static const char* value = "StringObject";
};
struct _str42 {
  constexpr static const char* value = "Symbol";
};
struct _str43 {
  constexpr static const char* value = "SymbolObject";
};
struct _str44 {
  constexpr static const char* value = "PrimitiveArray";
};
struct _str45 {
  constexpr static const char* value = "Private";
};
struct _str46 {
  constexpr static const char* value = "Uint32";
};
struct _str47 {
  constexpr static const char* value = "Utils";
};
struct _str48 {
  constexpr static const char* value = "Value";
};
struct _str49 {
  constexpr static const char* value = "WasmModuleObject";
};
struct _str50 {
  constexpr static const char* value = "Local";
};
struct _str51 {
  constexpr static const char* value = "that";
};
struct _str52 {
  constexpr static const char* value = "IsEmpty";
};
struct _str53 {
  constexpr static const char* value = "Clear";
};
struct _str54 {
  constexpr static const char* value = "operator->";
};
struct _str55 {
  constexpr static const char* value = "operator*";
};
struct _str56 {
  constexpr static const char* value = "operator==";
};
struct _str57 {
  constexpr static const char* value = "operator!=";
};
struct _str58 {
  constexpr static const char* value = "Cast";
};
struct _str59 {
  constexpr static const char* value = "As";
};
struct _str60 {
  constexpr static const char* value = "isolate";
};
struct _str61 {
  constexpr static const char* value = "New";
};
struct _str62 {
  constexpr static const char* value = "";
};
struct _str63 {
  constexpr static const char* value = "~Local";
};
struct _str64 {
  constexpr static const char* value = "operator=";
};
struct _str65 {
  constexpr static const char* value = "MaybeLocal";
};
struct _str66 {
  constexpr static const char* value = "out";
};
struct _str67 {
  constexpr static const char* value = "ToLocal";
};
struct _str68 {
  constexpr static const char* value = "ToLocalChecked";
};
struct _str69 {
  constexpr static const char* value = "default_value";
};
struct _str70 {
  constexpr static const char* value = "FromMaybe";
};
struct _str71 {
  constexpr static const char* value = "~MaybeLocal";
};
struct _str72 {
  constexpr static const char* value = "Eternal";
};
struct _str73 {
  constexpr static const char* value = "NonCopyablePersistentTraits";
};
struct _str74 {
  constexpr static const char* value = "PersistentBase";
};
struct _str75 {
  constexpr static const char* value = "Reset";
};
struct _str76 {
  constexpr static const char* value = "other";
};
struct _str77 {
  constexpr static const char* value = "Empty";
};
struct _str78 {
  constexpr static const char* value = "Get";
};
struct _str79 {
  constexpr static const char* value = "parameter";
};
struct _str80 {
  constexpr static const char* value = "callback";
};
struct _str81 {
  constexpr static const char* value = "type";
};
struct _str82 {
  constexpr static const char* value = "SetWeak";
};
struct _str83 {
  constexpr static const char* value = "ClearWeak";
};
struct _str84 {
  constexpr static const char* value = "label";
};
struct _str85 {
  constexpr static const char* value = "AnnotateStrongRetainer";
};
struct _str86 {
  constexpr static const char* value = "IsWeak";
};
struct _str87 {
  constexpr static const char* value = "class_id";
};
struct _str88 {
  constexpr static const char* value = "SetWrapperClassId";
};
struct _str89 {
  constexpr static const char* value = "WrapperClassId";
};
struct _str90 {
  constexpr static const char* value = "Persistent";
};
struct _str91 {
  constexpr static const char* value = "~Persistent";
};
struct _str92 {
  constexpr static const char* value = "Global";
};
struct _str93 {
  constexpr static const char* value = "TracedGlobal";
};
struct _str94 {
  constexpr static const char* value = "~TracedGlobal";
};
struct _str95 {
  constexpr static const char* value = "rhs";
};
struct _str96 {
  constexpr static const char* value = "SetFinalizationCallback";
};
struct _str97 {
  constexpr static const char* value = "PersistentValueMap";
};
struct _str98 {
  constexpr static const char* value = "PersistentValueMapBase";
};
struct _str99 {
  constexpr static const char* value = "GlobalValueMap";
};
struct _str100 {
  constexpr static const char* value = "PersistentValueVector";
};
struct _str101 {
  constexpr static const char* value = "WeakCallbackObject";
};
struct _str102 {
  constexpr static const char* value = "FunctionCallbackInfo";
};
struct _str103 {
  constexpr static const char* value = "PropertyCallbackInfo";
};
struct _str104 {
  constexpr static const char* value = "CallHandlerHelper";
};
struct _str105 {
  constexpr static const char* value = "EscapableHandleScope";
};
struct _str106 {
  constexpr static const char* value = "ReturnValue";
};
struct _str107 {
  constexpr static const char* value = "debug";
};
struct _str108 {
  constexpr static const char* value = "ConsoleCallArguments";
};
struct _str109 {
  constexpr static const char* value = "Local<T>";
};
struct _str110 {
  constexpr static const char* value = "Handle";
};
struct _str111 {
  constexpr static const char* value = "MaybeLocal<T>";
};
struct _str112 {
  constexpr static const char* value = "Eternal<T>";
};
struct _str113 {
  constexpr static const char* value = "handle";
};
struct _str114 {
  constexpr static const char* value = "Set";
};
struct _str115 {
  constexpr static const char* value = "kInternalFieldsInWeakCallback";
};
struct _str116 {
  constexpr static const char* value = "kEmbedderFieldsInWeakCallback";
};
struct _str117 {
  constexpr static const char* value = "WeakCallbackInfo";
};
struct _str118 {
  constexpr static const char* value = "isolate_";
};
struct _str119 {
  constexpr static const char* value = "parameter_";
};
struct _str120 {
  constexpr static const char* value = "Callback";
};
struct _str121 {
  constexpr static const char* value = "callback_";
};
struct _str122 {
  constexpr static const char* value = "embedder_fields_";
};
struct _str123 {
  constexpr static const char* value = "embedder_fields";
};
struct _str124 {
  constexpr static const char* value = "WeakCallbackInfo<T>";
};
struct _str125 {
  constexpr static const char* value = "GetIsolate";
};
struct _str126 {
  constexpr static const char* value = "GetParameter";
};
struct _str127 {
  constexpr static const char* value = "index";
};
struct _str128 {
  constexpr static const char* value = "GetInternalField";
};
struct _str129 {
  constexpr static const char* value = "SetSecondPassCallback";
};
struct _str130 {
  constexpr static const char* value = "data";
};
struct _str131 {
  constexpr static const char* value = "PersistentBase<T>";
};
struct _str132 {
  constexpr static const char* value = "NonCopyablePersistent";
};
struct _str133 {
  constexpr static const char* value = "kResetInDestructor";
};
struct _str134 {
  constexpr static const char* value = "source";
};
struct _str135 {
  constexpr static const char* value = "dest";
};
struct _str136 {
  constexpr static const char* value = "Copy";
};
struct _str137 {
  constexpr static const char* value = "Uncompilable";
};
struct _str138 {
  constexpr static const char* value = "CopyablePersistentTraits";
};
struct _str139 {
  constexpr static const char* value = "CopyablePersistent";
};
struct _str140 {
  constexpr static const char* value = "Persistent<T, M>";
};
struct _str141 {
  constexpr static const char* value = "~Persistent<T, M>";
};
struct _str142 {
  constexpr static const char* value = "Global<T>";
};
struct _str143 {
  constexpr static const char* value = "~Global<T>";
};
struct _str144 {
  constexpr static const char* value = "Pass";
};
struct _str145 {
  constexpr static const char* value = "MoveOnlyTypeForCPP03";
};
struct _str146 {
  constexpr static const char* value = "UniquePersistent";
};
struct _str147 {
  constexpr static const char* value = "TracedGlobal<T>";
};
struct _str148 {
  constexpr static const char* value = "~TracedGlobal<T>";
};
struct _str149 {
  constexpr static const char* value = "HandleScope";
};
struct _str150 {
  constexpr static const char* value = "~HandleScope";
};
struct _str151 {
  constexpr static const char* value = "NumberOfHandles";
};
struct _str152 {
  constexpr static const char* value = "Initialize";
};
struct _str153 {
  constexpr static const char* value = "value";
};
struct _str154 {
  constexpr static const char* value = "CreateHandle";
};
struct _str155 {
  constexpr static const char* value = "~EscapableHandleScope";
};
struct _str156 {
  constexpr static const char* value = "Escape";
};
struct _str157 {
  constexpr static const char* value = "EscapeMaybe";
};
struct _str158 {
  constexpr static const char* value = "SealHandleScope";
};
struct _str159 {
  constexpr static const char* value = "prev_limit_";
};
struct _str160 {
  constexpr static const char* value = "prev_sealed_level_";
};
struct _str161 {
  constexpr static const char* value = "~SealHandleScope";
};
struct _str162 {
  constexpr static const char* value = "ScriptOrModule";
};
struct _str163 {
  constexpr static const char* value = "GetResourceName";
};
struct _str164 {
  constexpr static const char* value = "GetHostDefinedOptions";
};
struct _str165 {
  constexpr static const char* value = "length";
};
struct _str166 {
  constexpr static const char* value = "Length";
};
struct _str167 {
  constexpr static const char* value = "item";
};
struct _str168 {
  constexpr static const char* value = "ScriptOriginOptions";
};
struct _str169 {
  constexpr static const char* value = "flags_";
};
struct _str170 {
  constexpr static const char* value = "is_shared_cross_origin";
};
struct _str171 {
  constexpr static const char* value = "is_opaque";
};
struct _str172 {
  constexpr static const char* value = "is_wasm";
};
struct _str173 {
  constexpr static const char* value = "is_module";
};
struct _str174 {
  constexpr static const char* value = "flags";
};
struct _str175 {
  constexpr static const char* value = "IsSharedCrossOrigin";
};
struct _str176 {
  constexpr static const char* value = "IsOpaque";
};
struct _str177 {
  constexpr static const char* value = "IsWasm";
};
struct _str178 {
  constexpr static const char* value = "IsModule";
};
struct _str179 {
  constexpr static const char* value = "Flags";
};
struct _str180 {
  constexpr static const char* value = "~ScriptOriginOptions";
};
struct _str181 {
  constexpr static const char* value = "ScriptOrigin";
};
struct _str182 {
  constexpr static const char* value = "resource_name_";
};
struct _str183 {
  constexpr static const char* value = "resource_line_offset_";
};
struct _str184 {
  constexpr static const char* value = "resource_column_offset_";
};
struct _str185 {
  constexpr static const char* value = "options_";
};
struct _str186 {
  constexpr static const char* value = "script_id_";
};
struct _str187 {
  constexpr static const char* value = "source_map_url_";
};
struct _str188 {
  constexpr static const char* value = "host_defined_options_";
};
struct _str189 {
  constexpr static const char* value = "resource_name";
};
struct _str190 {
  constexpr static const char* value = "resource_line_offset";
};
struct _str191 {
  constexpr static const char* value = "resource_column_offset";
};
struct _str192 {
  constexpr static const char* value = "resource_is_shared_cross_origin";
};
struct _str193 {
  constexpr static const char* value = "script_id";
};
struct _str194 {
  constexpr static const char* value = "source_map_url";
};
struct _str195 {
  constexpr static const char* value = "resource_is_opaque";
};
struct _str196 {
  constexpr static const char* value = "host_defined_options";
};
struct _str197 {
  constexpr static const char* value = "ResourceName";
};
struct _str198 {
  constexpr static const char* value = "ResourceLineOffset";
};
struct _str199 {
  constexpr static const char* value = "ResourceColumnOffset";
};
struct _str200 {
  constexpr static const char* value = "ScriptID";
};
struct _str201 {
  constexpr static const char* value = "SourceMapUrl";
};
struct _str202 {
  constexpr static const char* value = "HostDefinedOptions";
};
struct _str203 {
  constexpr static const char* value = "Options";
};
struct _str204 {
  constexpr static const char* value = "UnboundScript";
};
struct _str205 {
  constexpr static const char* value = "BindToCurrentContext";
};
struct _str206 {
  constexpr static const char* value = "GetId";
};
struct _str207 {
  constexpr static const char* value = "GetScriptName";
};
struct _str208 {
  constexpr static const char* value = "GetSourceURL";
};
struct _str209 {
  constexpr static const char* value = "GetSourceMappingURL";
};
struct _str210 {
  constexpr static const char* value = "code_pos";
};
struct _str211 {
  constexpr static const char* value = "GetLineNumber";
};
struct _str212 {
  constexpr static const char* value = "kNoScriptId";
};
struct _str213 {
  constexpr static const char* value = "UnboundModuleScript";
};
struct _str214 {
  constexpr static const char* value = "Location";
};
struct _str215 {
  constexpr static const char* value = "line_number_";
};
struct _str216 {
  constexpr static const char* value = "column_number_";
};
struct _str217 {
  constexpr static const char* value = "GetColumnNumber";
};
struct _str218 {
  constexpr static const char* value = "line_number";
};
struct _str219 {
  constexpr static const char* value = "column_number";
};
struct _str220 {
  constexpr static const char* value = "Module";
};
struct _str221 {
  constexpr static const char* value = "GetStatus";
};
struct _str222 {
  constexpr static const char* value = "GetException";
};
struct _str223 {
  constexpr static const char* value = "GetModuleRequestsLength";
};
struct _str224 {
  constexpr static const char* value = "i";
};
struct _str225 {
  constexpr static const char* value = "GetModuleRequest";
};
struct _str226 {
  constexpr static const char* value = "GetModuleRequestLocation";
};
struct _str227 {
  constexpr static const char* value = "GetIdentityHash";
};
struct _str228 {
  constexpr static const char* value = "ResolveCallback";
};
struct _str229 {
  constexpr static const char* value = "context";
};
struct _str230 {
  constexpr static const char* value = "InstantiateModule";
};
struct _str231 {
  constexpr static const char* value = "Evaluate";
};
struct _str232 {
  constexpr static const char* value = "GetModuleNamespace";
};
struct _str233 {
  constexpr static const char* value = "GetUnboundModuleScript";
};
struct _str234 {
  constexpr static const char* value = "origin";
};
struct _str235 {
  constexpr static const char* value = "Compile";
};
struct _str236 {
  constexpr static const char* value = "Run";
};
struct _str237 {
  constexpr static const char* value = "GetUnboundScript";
};
struct _str238 {
  constexpr static const char* value = "ScriptCompiler";
};
struct _str239 {
  constexpr static const char* value = "CachedData";
};
struct _str240 {
  constexpr static const char* value = "rejected";
};
struct _str241 {
  constexpr static const char* value = "buffer_policy";
};
struct _str242 {
  constexpr static const char* value = "~CachedData";
};
struct _str243 {
  constexpr static const char* value = "Source";
};
struct _str244 {
  constexpr static const char* value = "source_string";
};
struct _str245 {
  constexpr static const char* value = "resource_options";
};
struct _str246 {
  constexpr static const char* value = "cached_data";
};
struct _str247 {
  constexpr static const char* value = "~Source";
};
struct _str248 {
  constexpr static const char* value = "GetCachedData";
};
struct _str249 {
  constexpr static const char* value = "GetResourceOptions";
};
struct _str250 {
  constexpr static const char* value = "ExternalSourceStream";
};
struct _str251 {
  constexpr static const char* value = "~ExternalSourceStream";
};
struct _str252 {
  constexpr static const char* value = "src";
};
struct _str253 {
  constexpr static const char* value = "GetMoreData";
};
struct _str254 {
  constexpr static const char* value = "SetBookmark";
};
struct _str255 {
  constexpr static const char* value = "ResetToBookmark";
};
struct _str256 {
  constexpr static const char* value = "StreamedSource";
};
struct _str257 {
  constexpr static const char* value = "impl_";
};
struct _str258 {
  constexpr static const char* value = "source_stream";
};
struct _str259 {
  constexpr static const char* value = "encoding";
};
struct _str260 {
  constexpr static const char* value = "~StreamedSource";
};
struct _str261 {
  constexpr static const char* value = "impl";
};
struct _str262 {
  constexpr static const char* value = "ScriptStreamingTask";
};
struct _str263 {
  constexpr static const char* value = "data_";
};
struct _str264 {
  constexpr static const char* value = "options";
};
struct _str265 {
  constexpr static const char* value = "no_cache_reason";
};
struct _str266 {
  constexpr static const char* value = "CompileUnboundScript";
};
struct _str267 {
  constexpr static const char* value = "StartStreamingScript";
};
struct _str268 {
  constexpr static const char* value = "full_source_string";
};
struct _str269 {
  constexpr static const char* value = "CachedDataVersionTag";
};
struct _str270 {
  constexpr static const char* value = "CompileModule";
};
struct _str271 {
  constexpr static const char* value = "arguments_count";
};
struct _str272 {
  constexpr static const char* value = "arguments";
};
struct _str273 {
  constexpr static const char* value = "context_extension_count";
};
struct _str274 {
  constexpr static const char* value = "context_extensions";
};
struct _str275 {
  constexpr static const char* value = "CompileFunctionInContext";
};
struct _str276 {
  constexpr static const char* value = "unbound_script";
};
struct _str277 {
  constexpr static const char* value = "CreateCodeCache";
};
struct _str278 {
  constexpr static const char* value = "unbound_module_script";
};
struct _str279 {
  constexpr static const char* value = "function";
};
struct _str280 {
  constexpr static const char* value = "CreateCodeCacheForFunction";
};
struct _str281 {
  constexpr static const char* value = "Message";
};
struct _str282 {
  constexpr static const char* value = "GetSourceLine";
};
struct _str283 {
  constexpr static const char* value = "GetScriptOrigin";
};
struct _str284 {
  constexpr static const char* value = "GetScriptResourceName";
};
struct _str285 {
  constexpr static const char* value = "GetStackTrace";
};
struct _str286 {
  constexpr static const char* value = "GetStartPosition";
};
struct _str287 {
  constexpr static const char* value = "GetEndPosition";
};
struct _str288 {
  constexpr static const char* value = "ErrorLevel";
};
struct _str289 {
  constexpr static const char* value = "GetStartColumn";
};
struct _str290 {
  constexpr static const char* value = "GetEndColumn";
};
struct _str291 {
  constexpr static const char* value = "FILE";
};
struct _str292 {
  constexpr static const char* value = "PrintCurrentStackTrace";
};
struct _str293 {
  constexpr static const char* value = "kNoLineNumberInfo";
};
struct _str294 {
  constexpr static const char* value = "kNoColumnInfo";
};
struct _str295 {
  constexpr static const char* value = "kNoScriptIdInfo";
};
struct _str296 {
  constexpr static const char* value = "GetFrame";
};
struct _str297 {
  constexpr static const char* value = "GetFrameCount";
};
struct _str298 {
  constexpr static const char* value = "frame_limit";
};
struct _str299 {
  constexpr static const char* value = "CurrentStackTrace";
};
struct _str300 {
  constexpr static const char* value = "GetColumn";
};
struct _str301 {
  constexpr static const char* value = "GetScriptId";
};
struct _str302 {
  constexpr static const char* value = "GetScriptNameOrSourceURL";
};
struct _str303 {
  constexpr static const char* value = "GetFunctionName";
};
struct _str304 {
  constexpr static const char* value = "IsEval";
};
struct _str305 {
  constexpr static const char* value = "IsConstructor";
};
struct _str306 {
  constexpr static const char* value = "IsUserJavaScript";
};
struct _str307 {
  constexpr static const char* value = "RegisterState";
};
struct _str308 {
  constexpr static const char* value = "pc";
};
struct _str309 {
  constexpr static const char* value = "sp";
};
struct _str310 {
  constexpr static const char* value = "fp";
};
struct _str311 {
  constexpr static const char* value = "lr";
};
struct _str312 {
  constexpr static const char* value = "SampleInfo";
};
struct _str313 {
  constexpr static const char* value = "frames_count";
};
struct _str314 {
  constexpr static const char* value = "vm_state";
};
struct _str315 {
  constexpr static const char* value = "external_callback_entry";
};
struct _str316 {
  constexpr static const char* value = "MemoryRange";
};
struct _str317 {
  constexpr static const char* value = "start";
};
struct _str318 {
  constexpr static const char* value = "length_in_bytes";
};
struct _str319 {
  constexpr static const char* value = "JSEntryStub";
};
struct _str320 {
  constexpr static const char* value = "code";
};
struct _str321 {
  constexpr static const char* value = "UnwindState";
};
struct _str322 {
  constexpr static const char* value = "code_range";
};
struct _str323 {
  constexpr static const char* value = "embedded_code_range";
};
struct _str324 {
  constexpr static const char* value = "js_entry_stub";
};
struct _str325 {
  constexpr static const char* value = "JSON";
};
struct _str326 {
  constexpr static const char* value = "json_string";
};
struct _str327 {
  constexpr static const char* value = "Parse";
};
struct _str328 {
  constexpr static const char* value = "json_object";
};
struct _str329 {
  constexpr static const char* value = "gap";
};
struct _str330 {
  constexpr static const char* value = "Stringify";
};
struct _str331 {
  constexpr static const char* value = "ValueSerializer";
};
struct _str332 {
  constexpr static const char* value = "PrivateData";
};
struct _str333 {
  constexpr static const char* value = "private_";
};
struct _str334 {
  constexpr static const char* value = "Delegate";
};
struct _str335 {
  constexpr static const char* value = "~Delegate";
};
struct _str336 {
  constexpr static const char* value = "message";
};
struct _str337 {
  constexpr static const char* value = "ThrowDataCloneError";
};
struct _str338 {
  constexpr static const char* value = "object";
};
struct _str339 {
  constexpr static const char* value = "WriteHostObject";
};
struct _str340 {
  constexpr static const char* value = "shared_array_buffer";
};
struct _str341 {
  constexpr static const char* value = "GetSharedArrayBufferId";
};
struct _str342 {
  constexpr static const char* value = "module";
};
struct _str343 {
  constexpr static const char* value = "GetWasmModuleTransferId";
};
struct _str344 {
  constexpr static const char* value = "old_buffer";
};
struct _str345 {
  constexpr static const char* value = "size";
};
struct _str346 {
  constexpr static const char* value = "actual_size";
};
struct _str347 {
  constexpr static const char* value = "ReallocateBufferMemory";
};
struct _str348 {
  constexpr static const char* value = "buffer";
};
struct _str349 {
  constexpr static const char* value = "FreeBufferMemory";
};
struct _str350 {
  constexpr static const char* value = "delegate";
};
struct _str351 {
  constexpr static const char* value = "~ValueSerializer";
};
struct _str352 {
  constexpr static const char* value = "WriteHeader";
};
struct _str353 {
  constexpr static const char* value = "WriteValue";
};
struct _str354 {
  constexpr static const char* value = "Release";
};
struct _str355 {
  constexpr static const char* value = "transfer_id";
};
struct _str356 {
  constexpr static const char* value = "array_buffer";
};
struct _str357 {
  constexpr static const char* value = "TransferArrayBuffer";
};
struct _str358 {
  constexpr static const char* value = "mode";
};
struct _str359 {
  constexpr static const char* value = "SetTreatArrayBufferViewsAsHostObjects";
};
struct _str360 {
  constexpr static const char* value = "WriteUint32";
};
struct _str361 {
  constexpr static const char* value = "WriteUint64";
};
struct _str362 {
  constexpr static const char* value = "WriteDouble";
};
struct _str363 {
  constexpr static const char* value = "WriteRawBytes";
};
struct _str364 {
  constexpr static const char* value = "ValueDeserializer";
};
struct _str365 {
  constexpr static const char* value = "ReadHostObject";
};
struct _str366 {
  constexpr static const char* value = "GetWasmModuleFromId";
};
struct _str367 {
  constexpr static const char* value = "clone_id";
};
struct _str368 {
  constexpr static const char* value = "GetSharedArrayBufferFromId";
};
struct _str369 {
  constexpr static const char* value = "~ValueDeserializer";
};
struct _str370 {
  constexpr static const char* value = "ReadHeader";
};
struct _str371 {
  constexpr static const char* value = "ReadValue";
};
struct _str372 {
  constexpr static const char* value = "id";
};
struct _str373 {
  constexpr static const char* value = "TransferSharedArrayBuffer";
};
struct _str374 {
  constexpr static const char* value = "supports_legacy_wire_format";
};
struct _str375 {
  constexpr static const char* value = "SetSupportsLegacyWireFormat";
};
struct _str376 {
  constexpr static const char* value = "allow_inline_wasm";
};
struct _str377 {
  constexpr static const char* value = "SetExpectInlineWasm";
};
struct _str378 {
  constexpr static const char* value = "GetWireFormatVersion";
};
struct _str379 {
  constexpr static const char* value = "ReadUint32";
};
struct _str380 {
  constexpr static const char* value = "ReadUint64";
};
struct _str381 {
  constexpr static const char* value = "ReadDouble";
};
struct _str382 {
  constexpr static const char* value = "ReadRawBytes";
};
struct _str383 {
  constexpr static const char* value = "IsUndefined";
};
struct _str384 {
  constexpr static const char* value = "IsNull";
};
struct _str385 {
  constexpr static const char* value = "IsNullOrUndefined";
};
struct _str386 {
  constexpr static const char* value = "IsTrue";
};
struct _str387 {
  constexpr static const char* value = "IsFalse";
};
struct _str388 {
  constexpr static const char* value = "IsName";
};
struct _str389 {
  constexpr static const char* value = "IsString";
};
struct _str390 {
  constexpr static const char* value = "IsSymbol";
};
struct _str391 {
  constexpr static const char* value = "IsFunction";
};
struct _str392 {
  constexpr static const char* value = "IsArray";
};
struct _str393 {
  constexpr static const char* value = "IsObject";
};
struct _str394 {
  constexpr static const char* value = "IsBigInt";
};
struct _str395 {
  constexpr static const char* value = "IsBoolean";
};
struct _str396 {
  constexpr static const char* value = "IsNumber";
};
struct _str397 {
  constexpr static const char* value = "IsExternal";
};
struct _str398 {
  constexpr static const char* value = "IsInt32";
};
struct _str399 {
  constexpr static const char* value = "IsUint32";
};
struct _str400 {
  constexpr static const char* value = "IsDate";
};
struct _str401 {
  constexpr static const char* value = "IsArgumentsObject";
};
struct _str402 {
  constexpr static const char* value = "IsBigIntObject";
};
struct _str403 {
  constexpr static const char* value = "IsBooleanObject";
};
struct _str404 {
  constexpr static const char* value = "IsNumberObject";
};
struct _str405 {
  constexpr static const char* value = "IsStringObject";
};
struct _str406 {
  constexpr static const char* value = "IsSymbolObject";
};
struct _str407 {
  constexpr static const char* value = "IsNativeError";
};
struct _str408 {
  constexpr static const char* value = "IsRegExp";
};
struct _str409 {
  constexpr static const char* value = "IsAsyncFunction";
};
struct _str410 {
  constexpr static const char* value = "IsGeneratorFunction";
};
struct _str411 {
  constexpr static const char* value = "IsGeneratorObject";
};
struct _str412 {
  constexpr static const char* value = "IsPromise";
};
struct _str413 {
  constexpr static const char* value = "IsMap";
};
struct _str414 {
  constexpr static const char* value = "IsSet";
};
struct _str415 {
  constexpr static const char* value = "IsMapIterator";
};
struct _str416 {
  constexpr static const char* value = "IsSetIterator";
};
struct _str417 {
  constexpr static const char* value = "IsWeakMap";
};
struct _str418 {
  constexpr static const char* value = "IsWeakSet";
};
struct _str419 {
  constexpr static const char* value = "IsArrayBuffer";
};
struct _str420 {
  constexpr static const char* value = "IsArrayBufferView";
};
struct _str421 {
  constexpr static const char* value = "IsTypedArray";
};
struct _str422 {
  constexpr static const char* value = "IsUint8Array";
};
struct _str423 {
  constexpr static const char* value = "IsUint8ClampedArray";
};
struct _str424 {
  constexpr static const char* value = "IsInt8Array";
};
struct _str425 {
  constexpr static const char* value = "IsUint16Array";
};
struct _str426 {
  constexpr static const char* value = "IsInt16Array";
};
struct _str427 {
  constexpr static const char* value = "IsUint32Array";
};
struct _str428 {
  constexpr static const char* value = "IsInt32Array";
};
struct _str429 {
  constexpr static const char* value = "IsFloat32Array";
};
struct _str430 {
  constexpr static const char* value = "IsFloat64Array";
};
struct _str431 {
  constexpr static const char* value = "IsBigInt64Array";
};
struct _str432 {
  constexpr static const char* value = "IsBigUint64Array";
};
struct _str433 {
  constexpr static const char* value = "IsDataView";
};
struct _str434 {
  constexpr static const char* value = "IsSharedArrayBuffer";
};
struct _str435 {
  constexpr static const char* value = "IsProxy";
};
struct _str436 {
  constexpr static const char* value = "IsWebAssemblyCompiledModule";
};
struct _str437 {
  constexpr static const char* value = "IsModuleNamespaceObject";
};
struct _str438 {
  constexpr static const char* value = "ToBigInt";
};
struct _str439 {
  constexpr static const char* value = "ToNumber";
};
struct _str440 {
  constexpr static const char* value = "ToString";
};
struct _str441 {
  constexpr static const char* value = "ToDetailString";
};
struct _str442 {
  constexpr static const char* value = "ToObject";
};
struct _str443 {
  constexpr static const char* value = "ToInteger";
};
struct _str444 {
  constexpr static const char* value = "ToUint32";
};
struct _str445 {
  constexpr static const char* value = "ToInt32";
};
struct _str446 {
  constexpr static const char* value = "ToBoolean";
};
struct _str447 {
  constexpr static const char* value = "ToArrayIndex";
};
struct _str448 {
  constexpr static const char* value = "BooleanValue";
};
struct _str449 {
  constexpr static const char* value = "NumberValue";
};
struct _str450 {
  constexpr static const char* value = "IntegerValue";
};
struct _str451 {
  constexpr static const char* value = "Uint32Value";
};
struct _str452 {
  constexpr static const char* value = "Int32Value";
};
struct _str453 {
  constexpr static const char* value = "Equals";
};
struct _str454 {
  constexpr static const char* value = "StrictEquals";
};
struct _str455 {
  constexpr static const char* value = "SameValue";
};
struct _str456 {
  constexpr static const char* value = "TypeOf";
};
struct _str457 {
  constexpr static const char* value = "InstanceOf";
};
struct _str458 {
  constexpr static const char* value = "obj";
};
struct _str459 {
  constexpr static const char* value = "kMaxLength";
};
struct _str460 {
  constexpr static const char* value = "Utf8Length";
};
struct _str461 {
  constexpr static const char* value = "IsOneByte";
};
struct _str462 {
  constexpr static const char* value = "ContainsOnlyOneByte";
};
struct _str463 {
  constexpr static const char* value = "Write";
};
struct _str464 {
  constexpr static const char* value = "WriteOneByte";
};
struct _str465 {
  constexpr static const char* value = "nchars_ref";
};
struct _str466 {
  constexpr static const char* value = "WriteUtf8";
};
struct _str467 {
  constexpr static const char* value = "IsExternalOneByte";
};
struct _str468 {
  constexpr static const char* value = "ExternalStringResourceBase";
};
struct _str469 {
  constexpr static const char* value = "~ExternalStringResourceBase";
};
struct _str470 {
  constexpr static const char* value = "IsCacheable";
};
struct _str471 {
  constexpr static const char* value = "Dispose";
};
struct _str472 {
  constexpr static const char* value = "Lock";
};
struct _str473 {
  constexpr static const char* value = "Unlock";
};
struct _str474 {
  constexpr static const char* value = "ExternalStringResource";
};
struct _str475 {
  constexpr static const char* value = "~ExternalStringResource";
};
struct _str476 {
  constexpr static const char* value = "ExternalOneByteStringResource";
};
struct _str477 {
  constexpr static const char* value = "~ExternalOneByteStringResource";
};
struct _str478 {
  constexpr static const char* value = "encoding_out";
};
struct _str479 {
  constexpr static const char* value = "GetExternalStringResourceBase";
};
struct _str480 {
  constexpr static const char* value = "GetExternalStringResource";
};
struct _str481 {
  constexpr static const char* value = "GetExternalOneByteStringResource";
};
struct _str482 {
  constexpr static const char* value = "NewFromUtf8";
};
struct _str483 {
  constexpr static const char* value = "NewFromOneByte";
};
struct _str484 {
  constexpr static const char* value = "NewFromTwoByte";
};
struct _str485 {
  constexpr static const char* value = "left";
};
struct _str486 {
  constexpr static const char* value = "right";
};
struct _str487 {
  constexpr static const char* value = "Concat";
};
struct _str488 {
  constexpr static const char* value = "resource";
};
struct _str489 {
  constexpr static const char* value = "NewExternalTwoByte";
};
struct _str490 {
  constexpr static const char* value = "MakeExternal";
};
struct _str491 {
  constexpr static const char* value = "NewExternalOneByte";
};
struct _str492 {
  constexpr static const char* value = "CanMakeExternal";
};
struct _str493 {
  constexpr static const char* value = "str";
};
struct _str494 {
  constexpr static const char* value = "StringEquals";
};
struct _str495 {
  constexpr static const char* value = "Utf8Value";
};
struct _str496 {
  constexpr static const char* value = "str_";
};
struct _str497 {
  constexpr static const char* value = "length_";
};
struct _str498 {
  constexpr static const char* value = "~Utf8Value";
};
struct _str499 {
  constexpr static const char* value = "~Value";
};
struct _str500 {
  constexpr static const char* value = "name";
};
struct _str501 {
  constexpr static const char* value = "For";
};
struct _str502 {
  constexpr static const char* value = "ForApi";
};
struct _str503 {
  constexpr static const char* value = "GetAsyncIterator";
};
struct _str504 {
  constexpr static const char* value = "GetHasInstance";
};
struct _str505 {
  constexpr static const char* value = "GetIsConcatSpreadable";
};
struct _str506 {
  constexpr static const char* value = "GetIterator";
};
struct _str507 {
  constexpr static const char* value = "GetMatch";
};
struct _str508 {
  constexpr static const char* value = "GetReplace";
};
struct _str509 {
  constexpr static const char* value = "GetSearch";
};
struct _str510 {
  constexpr static const char* value = "GetSplit";
};
struct _str511 {
  constexpr static const char* value = "GetToPrimitive";
};
struct _str512 {
  constexpr static const char* value = "GetToStringTag";
};
struct _str513 {
  constexpr static const char* value = "GetUnscopables";
};
struct _str514 {
  constexpr static const char* value = "NewFromUnsigned";
};
struct _str515 {
  constexpr static const char* value = "sign_bit";
};
struct _str516 {
  constexpr static const char* value = "word_count";
};
struct _str517 {
  constexpr static const char* value = "words";
};
struct _str518 {
  constexpr static const char* value = "NewFromWords";
};
struct _str519 {
  constexpr static const char* value = "lossless";
};
struct _str520 {
  constexpr static const char* value = "Uint64Value";
};
struct _str521 {
  constexpr static const char* value = "Int64Value";
};
struct _str522 {
  constexpr static const char* value = "WordCount";
};
struct _str523 {
  constexpr static const char* value = "ToWordsArray";
};
struct _str524 {
  constexpr static const char* value = "AccessorGetterCallback";
};
struct _str525 {
  constexpr static const char* value = "AccessorNameGetterCallback";
};
struct _str526 {
  constexpr static const char* value = "AccessorSetterCallback";
};
struct _str527 {
  constexpr static const char* value = "AccessorNameSetterCallback";
};
struct _str528 {
  constexpr static const char* value = "key";
};
struct _str529 {
  constexpr static const char* value = "CreateDataProperty";
};
struct _str530 {
  constexpr static const char* value = "attributes";
};
struct _str531 {
  constexpr static const char* value = "DefineOwnProperty";
};
struct _str532 {
  constexpr static const char* value = "descriptor";
};
struct _str533 {
  constexpr static const char* value = "DefineProperty";
};
struct _str534 {
  constexpr static const char* value = "GetPropertyAttributes";
};
struct _str535 {
  constexpr static const char* value = "GetOwnPropertyDescriptor";
};
struct _str536 {
  constexpr static const char* value = "Has";
};
struct _str537 {
  constexpr static const char* value = "Delete";
};
struct _str538 {
  constexpr static const char* value = "getter";
};
struct _str539 {
  constexpr static const char* value = "setter";
};
struct _str540 {
  constexpr static const char* value = "settings";
};
struct _str541 {
  constexpr static const char* value = "attribute";
};
struct _str542 {
  constexpr static const char* value = "getter_side_effect_type";
};
struct _str543 {
  constexpr static const char* value = "setter_side_effect_type";
};
struct _str544 {
  constexpr static const char* value = "SetAccessor";
};
struct _str545 {
  constexpr static const char* value = "SetAccessorProperty";
};
struct _str546 {
  constexpr static const char* value = "SetNativeDataProperty";
};
struct _str547 {
  constexpr static const char* value = "SetLazyDataProperty";
};
struct _str548 {
  constexpr static const char* value = "HasPrivate";
};
struct _str549 {
  constexpr static const char* value = "SetPrivate";
};
struct _str550 {
  constexpr static const char* value = "DeletePrivate";
};
struct _str551 {
  constexpr static const char* value = "GetPrivate";
};
struct _str552 {
  constexpr static const char* value = "GetPropertyNames";
};
struct _str553 {
  constexpr static const char* value = "property_filter";
};
struct _str554 {
  constexpr static const char* value = "index_filter";
};
struct _str555 {
  constexpr static const char* value = "key_conversion";
};
struct _str556 {
  constexpr static const char* value = "GetOwnPropertyNames";
};
struct _str557 {
  constexpr static const char* value = "filter";
};
struct _str558 {
  constexpr static const char* value = "GetPrototype";
};
struct _str559 {
  constexpr static const char* value = "prototype";
};
struct _str560 {
  constexpr static const char* value = "SetPrototype";
};
struct _str561 {
  constexpr static const char* value = "tmpl";
};
struct _str562 {
  constexpr static const char* value = "FindInstanceInPrototypeChain";
};
struct _str563 {
  constexpr static const char* value = "ObjectProtoToString";
};
struct _str564 {
  constexpr static const char* value = "GetConstructorName";
};
struct _str565 {
  constexpr static const char* value = "level";
};
struct _str566 {
  constexpr static const char* value = "SetIntegrityLevel";
};
struct _str567 {
  constexpr static const char* value = "InternalFieldCount";
};
struct _str568 {
  constexpr static const char* value = "SetInternalField";
};
struct _str569 {
  constexpr static const char* value = "GetAlignedPointerFromInternalField";
};
struct _str570 {
  constexpr static const char* value = "SetAlignedPointerInInternalField";
};
struct _str571 {
  constexpr static const char* value = "argc";
};
struct _str572 {
  constexpr static const char* value = "indices";
};
struct _str573 {
  constexpr static const char* value = "values";
};
struct _str574 {
  constexpr static const char* value = "SetAlignedPointerInInternalFields";
};
struct _str575 {
  constexpr static const char* value = "HasOwnProperty";
};
struct _str576 {
  constexpr static const char* value = "HasRealNamedProperty";
};
struct _str577 {
  constexpr static const char* value = "HasRealIndexedProperty";
};
struct _str578 {
  constexpr static const char* value = "HasRealNamedCallbackProperty";
};
struct _str579 {
  constexpr static const char* value = "GetRealNamedPropertyInPrototypeChain";
};
struct _str580 {
  constexpr static const char* value =
      "GetRealNamedPropertyAttributesInPrototypeChain";
};
struct _str581 {
  constexpr static const char* value = "GetRealNamedProperty";
};
struct _str582 {
  constexpr static const char* value = "GetRealNamedPropertyAttributes";
};
struct _str583 {
  constexpr static const char* value = "HasNamedLookupInterceptor";
};
struct _str584 {
  constexpr static const char* value = "HasIndexedLookupInterceptor";
};
struct _str585 {
  constexpr static const char* value = "Clone";
};
struct _str586 {
  constexpr static const char* value = "CreationContext";
};
struct _str587 {
  constexpr static const char* value = "IsCallable";
};
struct _str588 {
  constexpr static const char* value = "recv";
};
struct _str589 {
  constexpr static const char* value = "argv";
};
struct _str590 {
  constexpr static const char* value = "CallAsFunction";
};
struct _str591 {
  constexpr static const char* value = "CallAsConstructor";
};
struct _str592 {
  constexpr static const char* value = "is_key_value";
};
struct _str593 {
  constexpr static const char* value = "PreviewEntries";
};
struct _str594 {
  constexpr static const char* value = "prototype_or_null";
};
struct _str595 {
  constexpr static const char* value = "names";
};
struct _str596 {
  constexpr static const char* value = "elements";
};
struct _str597 {
  constexpr static const char* value = "Map";
};
struct _str598 {
  constexpr static const char* value = "Size";
};
struct _str599 {
  constexpr static const char* value = "AsArray";
};
struct _str600 {
  constexpr static const char* value = "Add";
};
struct _str601 {
  constexpr static const char* value = "ReturnValue<T>";
};
struct _str602 {
  constexpr static const char* value = "SetNull";
};
struct _str603 {
  constexpr static const char* value = "SetUndefined";
};
struct _str604 {
  constexpr static const char* value = "SetEmptyString";
};
struct _str605 {
  constexpr static const char* value = "whatever";
};
struct _str606 {
  constexpr static const char* value = "operator[]";
};
struct _str607 {
  constexpr static const char* value = "This";
};
struct _str608 {
  constexpr static const char* value = "Holder";
};
struct _str609 {
  constexpr static const char* value = "NewTarget";
};
struct _str610 {
  constexpr static const char* value = "IsConstructCall";
};
struct _str611 {
  constexpr static const char* value = "GetReturnValue";
};
struct _str612 {
  constexpr static const char* value = "kArgsLength";
};
struct _str613 {
  constexpr static const char* value = "kHolderIndex";
};
struct _str614 {
  constexpr static const char* value = "kIsolateIndex";
};
struct _str615 {
  constexpr static const char* value = "kReturnValueDefaultValueIndex";
};
struct _str616 {
  constexpr static const char* value = "kReturnValueIndex";
};
struct _str617 {
  constexpr static const char* value = "kDataIndex";
};
struct _str618 {
  constexpr static const char* value = "kNewTargetIndex";
};
struct _str619 {
  constexpr static const char* value = "implicit_args";
};
struct _str620 {
  constexpr static const char* value = "FunctionCallbackInfo<T>";
};
struct _str621 {
  constexpr static const char* value = "implicit_args_";
};
struct _str622 {
  constexpr static const char* value = "values_";
};
struct _str623 {
  constexpr static const char* value = "ShouldThrowOnError";
};
struct _str624 {
  constexpr static const char* value = "kShouldThrowOnErrorIndex";
};
struct _str625 {
  constexpr static const char* value = "kThisIndex";
};
struct _str626 {
  constexpr static const char* value = "args";
};
struct _str627 {
  constexpr static const char* value = "PropertyCallbackInfo<T>";
};
struct _str628 {
  constexpr static const char* value = "args_";
};
struct _str629 {
  constexpr static const char* value = "FunctionCallback";
};
struct _str630 {
  constexpr static const char* value = "behavior";
};
struct _str631 {
  constexpr static const char* value = "side_effect_type";
};
struct _str632 {
  constexpr static const char* value = "NewInstance";
};
struct _str633 {
  constexpr static const char* value = "NewInstanceWithSideEffectType";
};
struct _str634 {
  constexpr static const char* value = "Call";
};
struct _str635 {
  constexpr static const char* value = "SetName";
};
struct _str636 {
  constexpr static const char* value = "GetName";
};
struct _str637 {
  constexpr static const char* value = "GetInferredName";
};
struct _str638 {
  constexpr static const char* value = "GetDebugName";
};
struct _str639 {
  constexpr static const char* value = "GetDisplayName";
};
struct _str640 {
  constexpr static const char* value = "GetScriptLineNumber";
};
struct _str641 {
  constexpr static const char* value = "GetScriptColumnNumber";
};
struct _str642 {
  constexpr static const char* value = "ScriptId";
};
struct _str643 {
  constexpr static const char* value = "GetBoundFunction";
};
struct _str644 {
  constexpr static const char* value = "kLineOffsetNotFound";
};
struct _str645 {
  constexpr static const char* value = "Resolver";
};
struct _str646 {
  constexpr static const char* value = "GetPromise";
};
struct _str647 {
  constexpr static const char* value = "Resolve";
};
struct _str648 {
  constexpr static const char* value = "Reject";
};
struct _str649 {
  constexpr static const char* value = "handler";
};
struct _str650 {
  constexpr static const char* value = "Catch";
};
struct _str651 {
  constexpr static const char* value = "Then";
};
struct _str652 {
  constexpr static const char* value = "on_fulfilled";
};
struct _str653 {
  constexpr static const char* value = "on_rejected";
};
struct _str654 {
  constexpr static const char* value = "HasHandler";
};
struct _str655 {
  constexpr static const char* value = "Result";
};
struct _str656 {
  constexpr static const char* value = "State";
};
struct _str657 {
  constexpr static const char* value = "MarkAsHandled";
};
struct _str658 {
  constexpr static const char* value = "kEmbedderFieldCount";
};
struct _str659 {
  constexpr static const char* value = "writable";
};
struct _str660 {
  constexpr static const char* value = "get";
};
struct _str661 {
  constexpr static const char* value = "set";
};
struct _str662 {
  constexpr static const char* value = "~PropertyDescriptor";
};
struct _str663 {
  constexpr static const char* value = "has_value";
};
struct _str664 {
  constexpr static const char* value = "has_get";
};
struct _str665 {
  constexpr static const char* value = "has_set";
};
struct _str666 {
  constexpr static const char* value = "enumerable";
};
struct _str667 {
  constexpr static const char* value = "set_enumerable";
};
struct _str668 {
  constexpr static const char* value = "has_enumerable";
};
struct _str669 {
  constexpr static const char* value = "configurable";
};
struct _str670 {
  constexpr static const char* value = "set_configurable";
};
struct _str671 {
  constexpr static const char* value = "has_configurable";
};
struct _str672 {
  constexpr static const char* value = "has_writable";
};
struct _str673 {
  constexpr static const char* value = "get_private";
};
struct _str674 {
  constexpr static const char* value = "GetTarget";
};
struct _str675 {
  constexpr static const char* value = "GetHandler";
};
struct _str676 {
  constexpr static const char* value = "IsRevoked";
};
struct _str677 {
  constexpr static const char* value = "Revoke";
};
struct _str678 {
  constexpr static const char* value = "local_target";
};
struct _str679 {
  constexpr static const char* value = "local_handler";
};
struct _str680 {
  constexpr static const char* value = "MemorySpan";
};
struct _str681 {
  constexpr static const char* value = "size_";
};
struct _str682 {
  constexpr static const char* value = "MemorySpan<T>";
};
struct _str683 {
  constexpr static const char* value = "OwnedBuffer";
};
struct _str684 {
  constexpr static const char* value = "~OwnedBuffer";
};
struct _str685 {
  constexpr static const char* value = "CompiledWasmModule";
};
struct _str686 {
  constexpr static const char* value = "native_module_";
};
struct _str687 {
  constexpr static const char* value = "Serialize";
};
struct _str688 {
  constexpr static const char* value = "GetWireBytesRef";
};
struct _str689 {
  constexpr static const char* value = "~CompiledWasmModule";
};
struct _str690 {
  constexpr static const char* value = "TransferrableModule";
};
struct _str691 {
  constexpr static const char* value = "SharedModule";
};
struct _str692 {
  constexpr static const char* value = "shared_module_";
};
struct _str693 {
  constexpr static const char* value = "serialized_";
};
struct _str694 {
  constexpr static const char* value = "wire_bytes_";
};
struct _str695 {
  constexpr static const char* value = "~TransferrableModule";
};
struct _str696 {
  constexpr static const char* value = "GetTransferrableModule";
};
struct _str697 {
  constexpr static const char* value = "FromTransferrableModule";
};
struct _str698 {
  constexpr static const char* value = "GetCompiledModule";
};
struct _str699 {
  constexpr static const char* value = "serialized_module";
};
struct _str700 {
  constexpr static const char* value = "wire_bytes";
};
struct _str701 {
  constexpr static const char* value = "DeserializeOrCompile";
};
struct _str702 {
  constexpr static const char* value = "WasmStreaming";
};
struct _str703 {
  constexpr static const char* value = "WasmStreamingImpl";
};
struct _str704 {
  constexpr static const char* value = "Client";
};
struct _str705 {
  constexpr static const char* value = "~Client";
};
struct _str706 {
  constexpr static const char* value = "compiled_module";
};
struct _str707 {
  constexpr static const char* value = "OnModuleCompiled";
};
struct _str708 {
  constexpr static const char* value = "~WasmStreaming";
};
struct _str709 {
  constexpr static const char* value = "bytes";
};
struct _str710 {
  constexpr static const char* value = "OnBytesReceived";
};
struct _str711 {
  constexpr static const char* value = "Finish";
};
struct _str712 {
  constexpr static const char* value = "exception";
};
struct _str713 {
  constexpr static const char* value = "Abort";
};
struct _str714 {
  constexpr static const char* value = "SetCompiledModuleBytes";
};
struct _str715 {
  constexpr static const char* value = "client";
};
struct _str716 {
  constexpr static const char* value = "SetClient";
};
struct _str717 {
  constexpr static const char* value = "Unpack";
};
struct _str718 {
  constexpr static const char* value = "WasmModuleObjectBuilderStreaming";
};
struct _str719 {
  constexpr static const char* value = "promise_";
};
struct _str720 {
  constexpr static const char* value = "streaming_decoder_";
};
struct _str721 {
  constexpr static const char* value = "~WasmModuleObjectBuilderStreaming";
};
struct _str722 {
  constexpr static const char* value = "Allocator";
};
struct _str723 {
  constexpr static const char* value = "~Allocator";
};
struct _str724 {
  constexpr static const char* value = "Allocate";
};
struct _str725 {
  constexpr static const char* value = "AllocateUninitialized";
};
struct _str726 {
  constexpr static const char* value = "Free";
};
struct _str727 {
  constexpr static const char* value = "NewDefaultAllocator";
};
struct _str728 {
  constexpr static const char* value = "Contents";
};
struct _str729 {
  constexpr static const char* value = "byte_length_";
};
struct _str730 {
  constexpr static const char* value = "allocation_base_";
};
struct _str731 {
  constexpr static const char* value = "allocation_length_";
};
struct _str732 {
  constexpr static const char* value = "allocation_mode_";
};
struct _str733 {
  constexpr static const char* value = "DeleterCallback";
};
struct _str734 {
  constexpr static const char* value = "deleter_";
};
struct _str735 {
  constexpr static const char* value = "deleter_data_";
};
struct _str736 {
  constexpr static const char* value = "AllocationBase";
};
struct _str737 {
  constexpr static const char* value = "AllocationLength";
};
struct _str738 {
  constexpr static const char* value = "AllocationMode";
};
struct _str739 {
  constexpr static const char* value = "ByteLength";
};
struct _str740 {
  constexpr static const char* value = "Deleter";
};
struct _str741 {
  constexpr static const char* value = "DeleterData";
};
struct _str742 {
  constexpr static const char* value = "byte_length";
};
struct _str743 {
  constexpr static const char* value = "IsDetachable";
};
struct _str744 {
  constexpr static const char* value = "IsNeuterable";
};
struct _str745 {
  constexpr static const char* value = "Detach";
};
struct _str746 {
  constexpr static const char* value = "Neuter";
};
struct _str747 {
  constexpr static const char* value = "Externalize";
};
struct _str748 {
  constexpr static const char* value = "GetContents";
};
struct _str749 {
  constexpr static const char* value = "kInternalFieldCount";
};
struct _str750 {
  constexpr static const char* value = "ArrayBufferView";
};
struct _str751 {
  constexpr static const char* value = "Buffer";
};
struct _str752 {
  constexpr static const char* value = "ByteOffset";
};
struct _str753 {
  constexpr static const char* value = "CopyContents";
};
struct _str754 {
  constexpr static const char* value = "HasBuffer";
};
struct _str755 {
  constexpr static const char* value = "TypedArray";
};
struct _str756 {
  constexpr static const char* value = "Uint8Array";
};
struct _str757 {
  constexpr static const char* value = "byte_offset";
};
struct _str758 {
  constexpr static const char* value = "Uint8ClampedArray";
};
struct _str759 {
  constexpr static const char* value = "Int8Array";
};
struct _str760 {
  constexpr static const char* value = "Uint16Array";
};
struct _str761 {
  constexpr static const char* value = "Int16Array";
};
struct _str762 {
  constexpr static const char* value = "Uint32Array";
};
struct _str763 {
  constexpr static const char* value = "Int32Array";
};
struct _str764 {
  constexpr static const char* value = "Float32Array";
};
struct _str765 {
  constexpr static const char* value = "Float64Array";
};
struct _str766 {
  constexpr static const char* value = "BigInt64Array";
};
struct _str767 {
  constexpr static const char* value = "BigUint64Array";
};
struct _str768 {
  constexpr static const char* value = "DataView";
};
struct _str769 {
  constexpr static const char* value = "time";
};
struct _str770 {
  constexpr static const char* value = "ValueOf";
};
struct _str771 {
  constexpr static const char* value = "RegExp";
};
struct _str772 {
  constexpr static const char* value = "pattern";
};
struct _str773 {
  constexpr static const char* value = "GetSource";
};
struct _str774 {
  constexpr static const char* value = "GetFlags";
};
struct _str775 {
  constexpr static const char* value = "Template";
};
struct _str776 {
  constexpr static const char* value = "signature";
};
struct _str777 {
  constexpr static const char* value = "intrinsic";
};
struct _str778 {
  constexpr static const char* value = "SetIntrinsicDataProperty";
};
struct _str779 {
  constexpr static const char* value = "GenericNamedPropertyGetterCallback";
};
struct _str780 {
  constexpr static const char* value = "GenericNamedPropertySetterCallback";
};
struct _str781 {
  constexpr static const char* value = "GenericNamedPropertyQueryCallback";
};
struct _str782 {
  constexpr static const char* value = "GenericNamedPropertyDeleterCallback";
};
struct _str783 {
  constexpr static const char* value = "GenericNamedPropertyEnumeratorCallback";
};
struct _str784 {
  constexpr static const char* value = "GenericNamedPropertyDefinerCallback";
};
struct _str785 {
  constexpr static const char* value = "GenericNamedPropertyDescriptorCallback";
};
struct _str786 {
  constexpr static const char* value = "IndexedPropertyGetterCallback";
};
struct _str787 {
  constexpr static const char* value = "IndexedPropertySetterCallback";
};
struct _str788 {
  constexpr static const char* value = "IndexedPropertyQueryCallback";
};
struct _str789 {
  constexpr static const char* value = "IndexedPropertyDeleterCallback";
};
struct _str790 {
  constexpr static const char* value = "IndexedPropertyEnumeratorCallback";
};
struct _str791 {
  constexpr static const char* value = "IndexedPropertyDefinerCallback";
};
struct _str792 {
  constexpr static const char* value = "IndexedPropertyDescriptorCallback";
};
struct _str793 {
  constexpr static const char* value = "AccessCheckCallback";
};
struct _str794 {
  constexpr static const char* value = "FromSnapshot";
};
struct _str795 {
  constexpr static const char* value = "cache_property";
};
struct _str796 {
  constexpr static const char* value = "NewWithCache";
};
struct _str797 {
  constexpr static const char* value = "GetFunction";
};
struct _str798 {
  constexpr static const char* value = "NewRemoteInstance";
};
struct _str799 {
  constexpr static const char* value = "SetCallHandler";
};
struct _str800 {
  constexpr static const char* value = "SetLength";
};
struct _str801 {
  constexpr static const char* value = "InstanceTemplate";
};
struct _str802 {
  constexpr static const char* value = "parent";
};
struct _str803 {
  constexpr static const char* value = "Inherit";
};
struct _str804 {
  constexpr static const char* value = "PrototypeTemplate";
};
struct _str805 {
  constexpr static const char* value = "prototype_provider";
};
struct _str806 {
  constexpr static const char* value = "SetPrototypeProviderTemplate";
};
struct _str807 {
  constexpr static const char* value = "SetClassName";
};
struct _str808 {
  constexpr static const char* value = "SetAcceptAnyReceiver";
};
struct _str809 {
  constexpr static const char* value = "ReadOnlyPrototype";
};
struct _str810 {
  constexpr static const char* value = "RemovePrototype";
};
struct _str811 {
  constexpr static const char* value = "HasInstance";
};
struct _str812 {
  constexpr static const char* value = "NamedPropertyHandlerConfiguration";
};
struct _str813 {
  constexpr static const char* value = "query";
};
struct _str814 {
  constexpr static const char* value = "deleter";
};
struct _str815 {
  constexpr static const char* value = "enumerator";
};
struct _str816 {
  constexpr static const char* value = "definer";
};
struct _str817 {
  constexpr static const char* value = "IndexedPropertyHandlerConfiguration";
};
struct _str818 {
  constexpr static const char* value = "~IndexedPropertyHandlerConfiguration";
};
struct _str819 {
  constexpr static const char* value = "constructor";
};
struct _str820 {
  constexpr static const char* value = "configuration";
};
struct _str821 {
  constexpr static const char* value = "SetHandler";
};
struct _str822 {
  constexpr static const char* value = "SetIndexedPropertyHandler";
};
struct _str823 {
  constexpr static const char* value = "SetCallAsFunctionHandler";
};
struct _str824 {
  constexpr static const char* value = "MarkAsUndetectable";
};
struct _str825 {
  constexpr static const char* value = "SetAccessCheckCallback";
};
struct _str826 {
  constexpr static const char* value = "named_handler";
};
struct _str827 {
  constexpr static const char* value = "indexed_handler";
};
struct _str828 {
  constexpr static const char* value = "SetAccessCheckCallbackAndHandler";
};
struct _str829 {
  constexpr static const char* value = "SetInternalFieldCount";
};
struct _str830 {
  constexpr static const char* value = "IsImmutableProto";
};
struct _str831 {
  constexpr static const char* value = "SetImmutableProto";
};
struct _str832 {
  constexpr static const char* value = "receiver";
};
struct _str833 {
  constexpr static const char* value = "Extension";
};
struct _str834 {
  constexpr static const char* value = "name_";
};
struct _str835 {
  constexpr static const char* value = "source_length_";
};
struct _str836 {
  constexpr static const char* value = "source_";
};
struct _str837 {
  constexpr static const char* value = "dep_count_";
};
struct _str838 {
  constexpr static const char* value = "deps_";
};
struct _str839 {
  constexpr static const char* value = "auto_enable_";
};
struct _str840 {
  constexpr static const char* value = "dep_count";
};
struct _str841 {
  constexpr static const char* value = "deps";
};
struct _str842 {
  constexpr static const char* value = "source_length";
};
struct _str843 {
  constexpr static const char* value = "~Extension";
};
struct _str844 {
  constexpr static const char* value = "GetNativeFunctionTemplate";
};
struct _str845 {
  constexpr static const char* value = "dependency_count";
};
struct _str846 {
  constexpr static const char* value = "dependencies";
};
struct _str847 {
  constexpr static const char* value = "set_auto_enable";
};
struct _str848 {
  constexpr static const char* value = "auto_enable";
};
struct _str849 {
  constexpr static const char* value = "RegisterExtension";
};
struct _str850 {
  constexpr static const char* value = "Undefined";
};
struct _str851 {
  constexpr static const char* value = "Null";
};
struct _str852 {
  constexpr static const char* value = "True";
};
struct _str853 {
  constexpr static const char* value = "False";
};
struct _str854 {
  constexpr static const char* value = "ResourceConstraints";
};
struct _str855 {
  constexpr static const char* value = "code_range_size_";
};
struct _str856 {
  constexpr static const char* value = "max_old_generation_size_";
};
struct _str857 {
  constexpr static const char* value = "max_young_generation_size_";
};
struct _str858 {
  constexpr static const char* value = "max_zone_pool_size_";
};
struct _str859 {
  constexpr static const char* value = "initial_old_generation_size_";
};
struct _str860 {
  constexpr static const char* value = "initial_young_generation_size_";
};
struct _str861 {
  constexpr static const char* value = "stack_limit_";
};
struct _str862 {
  constexpr static const char* value = "initial_heap_size_in_bytes";
};
struct _str863 {
  constexpr static const char* value = "maximum_heap_size_in_bytes";
};
struct _str864 {
  constexpr static const char* value = "ConfigureDefaultsFromHeapSize";
};
struct _str865 {
  constexpr static const char* value = "physical_memory";
};
struct _str866 {
  constexpr static const char* value = "virtual_memory_limit";
};
struct _str867 {
  constexpr static const char* value = "ConfigureDefaults";
};
struct _str868 {
  constexpr static const char* value = "stack_limit";
};
struct _str869 {
  constexpr static const char* value = "set_stack_limit";
};
struct _str870 {
  constexpr static const char* value = "code_range_size_in_bytes";
};
struct _str871 {
  constexpr static const char* value = "limit";
};
struct _str872 {
  constexpr static const char* value = "set_code_range_size_in_bytes";
};
struct _str873 {
  constexpr static const char* value = "max_old_generation_size_in_bytes";
};
struct _str874 {
  constexpr static const char* value = "set_max_old_generation_size_in_bytes";
};
struct _str875 {
  constexpr static const char* value = "max_young_generation_size_in_bytes";
};
struct _str876 {
  constexpr static const char* value = "set_max_young_generation_size_in_bytes";
};
struct _str877 {
  constexpr static const char* value = "initial_old_generation_size_in_bytes";
};
struct _str878 {
  constexpr static const char* value = "initial_size";
};
struct _str879 {
  constexpr static const char* value =
      "set_initial_old_generation_size_in_bytes";
};
struct _str880 {
  constexpr static const char* value = "initial_young_generation_size_in_bytes";
};
struct _str881 {
  constexpr static const char* value =
      "set_initial_young_generation_size_in_bytes";
};
struct _str882 {
  constexpr static const char* value = "code_range_size";
};
struct _str883 {
  constexpr static const char* value = "limit_in_mb";
};
struct _str884 {
  constexpr static const char* value = "set_code_range_size";
};
struct _str885 {
  constexpr static const char* value = "max_semi_space_size_in_kb";
};
struct _str886 {
  constexpr static const char* value = "limit_in_kb";
};
struct _str887 {
  constexpr static const char* value = "set_max_semi_space_size_in_kb";
};
struct _str888 {
  constexpr static const char* value = "max_old_space_size";
};
struct _str889 {
  constexpr static const char* value = "set_max_old_space_size";
};
struct _str890 {
  constexpr static const char* value = "max_zone_pool_size";
};
struct _str891 {
  constexpr static const char* value = "set_max_zone_pool_size";
};
struct _str892 {
  constexpr static const char* value = "FatalErrorCallback";
};
struct _str893 {
  constexpr static const char* value = "OOMErrorCallback";
};
struct _str894 {
  constexpr static const char* value = "DcheckErrorCallback";
};
struct _str895 {
  constexpr static const char* value = "MessageCallback";
};
struct _str896 {
  constexpr static const char* value = "LogEventCallback";
};
struct _str897 {
  constexpr static const char* value = "Exception";
};
struct _str898 {
  constexpr static const char* value = "RangeError";
};
struct _str899 {
  constexpr static const char* value = "ReferenceError";
};
struct _str900 {
  constexpr static const char* value = "SyntaxError";
};
struct _str901 {
  constexpr static const char* value = "TypeError";
};
struct _str902 {
  constexpr static const char* value = "Error";
};
struct _str903 {
  constexpr static const char* value = "CreateMessage";
};
struct _str904 {
  constexpr static const char* value = "CounterLookupCallback";
};
struct _str905 {
  constexpr static const char* value = "CreateHistogramCallback";
};
struct _str906 {
  constexpr static const char* value = "AddHistogramSampleCallback";
};
struct _str907 {
  constexpr static const char* value = "BeforeCallEnteredCallback";
};
struct _str908 {
  constexpr static const char* value = "CallCompletedCallback";
};
struct _str909 {
  constexpr static const char* value = "HostImportModuleDynamicallyCallback";
};
struct _str910 {
  constexpr static const char* value = "HostInitializeImportMetaObjectCallback";
};
struct _str911 {
  constexpr static const char* value = "PrepareStackTraceCallback";
};
struct _str912 {
  constexpr static const char* value = "PromiseHook";
};
struct _str913 {
  constexpr static const char* value = "PromiseRejectMessage";
};
struct _str914 {
  constexpr static const char* value = "event_";
};
struct _str915 {
  constexpr static const char* value = "value_";
};
struct _str916 {
  constexpr static const char* value = "promise";
};
struct _str917 {
  constexpr static const char* value = "event";
};
struct _str918 {
  constexpr static const char* value = "GetEvent";
};
struct _str919 {
  constexpr static const char* value = "GetValue";
};
struct _str920 {
  constexpr static const char* value = "PromiseRejectCallback";
};
struct _str921 {
  constexpr static const char* value = "MicrotasksCompletedCallback";
};
struct _str922 {
  constexpr static const char* value = "MicrotasksCompletedCallbackWithData";
};
struct _str923 {
  constexpr static const char* value = "MicrotaskCallback";
};
struct _str924 {
  constexpr static const char* value = "policy";
};
struct _str925 {
  constexpr static const char* value = "~MicrotaskQueue";
};
struct _str926 {
  constexpr static const char* value = "microtask";
};
struct _str927 {
  constexpr static const char* value = "EnqueueMicrotask";
};
struct _str928 {
  constexpr static const char* value = "AddMicrotasksCompletedCallback";
};
struct _str929 {
  constexpr static const char* value = "RemoveMicrotasksCompletedCallback";
};
struct _str930 {
  constexpr static const char* value = "PerformCheckpoint";
};
struct _str931 {
  constexpr static const char* value = "IsRunningMicrotasks";
};
struct _str932 {
  constexpr static const char* value = "GetMicrotasksScopeDepth";
};
struct _str933 {
  constexpr static const char* value = "MicrotasksScope";
};
struct _str934 {
  constexpr static const char* value = "microtask_queue_";
};
struct _str935 {
  constexpr static const char* value = "run_";
};
struct _str936 {
  constexpr static const char* value = "microtask_queue";
};
struct _str937 {
  constexpr static const char* value = "~MicrotasksScope";
};
struct _str938 {
  constexpr static const char* value = "GetCurrentDepth";
};
struct _str939 {
  constexpr static const char* value = "FailedAccessCheckCallback";
};
struct _str940 {
  constexpr static const char* value = "AllowCodeGenerationFromStringsCallback";
};
struct _str941 {
  constexpr static const char* value = "ExtensionCallback";
};
struct _str942 {
  constexpr static const char* value = "AllowWasmCodeGenerationCallback";
};
struct _str943 {
  constexpr static const char* value = "ApiImplementationCallback";
};
struct _str944 {
  constexpr static const char* value = "WasmStreamingCallback";
};
struct _str945 {
  constexpr static const char* value = "WasmThreadsEnabledCallback";
};
struct _str946 {
  constexpr static const char* value = "GCCallback";
};
struct _str947 {
  constexpr static const char* value = "InterruptCallback";
};
struct _str948 {
  constexpr static const char* value = "NearHeapLimitCallback";
};
struct _str949 {
  constexpr static const char* value = "HeapStatistics";
};
struct _str950 {
  constexpr static const char* value = "total_heap_size_";
};
struct _str951 {
  constexpr static const char* value = "total_heap_size_executable_";
};
struct _str952 {
  constexpr static const char* value = "total_physical_size_";
};
struct _str953 {
  constexpr static const char* value = "total_available_size_";
};
struct _str954 {
  constexpr static const char* value = "used_heap_size_";
};
struct _str955 {
  constexpr static const char* value = "heap_size_limit_";
};
struct _str956 {
  constexpr static const char* value = "malloced_memory_";
};
struct _str957 {
  constexpr static const char* value = "external_memory_";
};
struct _str958 {
  constexpr static const char* value = "peak_malloced_memory_";
};
struct _str959 {
  constexpr static const char* value = "does_zap_garbage_";
};
struct _str960 {
  constexpr static const char* value = "number_of_native_contexts_";
};
struct _str961 {
  constexpr static const char* value = "number_of_detached_contexts_";
};
struct _str962 {
  constexpr static const char* value = "total_heap_size";
};
struct _str963 {
  constexpr static const char* value = "total_heap_size_executable";
};
struct _str964 {
  constexpr static const char* value = "total_physical_size";
};
struct _str965 {
  constexpr static const char* value = "total_available_size";
};
struct _str966 {
  constexpr static const char* value = "used_heap_size";
};
struct _str967 {
  constexpr static const char* value = "heap_size_limit";
};
struct _str968 {
  constexpr static const char* value = "malloced_memory";
};
struct _str969 {
  constexpr static const char* value = "external_memory";
};
struct _str970 {
  constexpr static const char* value = "peak_malloced_memory";
};
struct _str971 {
  constexpr static const char* value = "number_of_native_contexts";
};
struct _str972 {
  constexpr static const char* value = "number_of_detached_contexts";
};
struct _str973 {
  constexpr static const char* value = "does_zap_garbage";
};
struct _str974 {
  constexpr static const char* value = "HeapSpaceStatistics";
};
struct _str975 {
  constexpr static const char* value = "space_name_";
};
struct _str976 {
  constexpr static const char* value = "space_size_";
};
struct _str977 {
  constexpr static const char* value = "space_used_size_";
};
struct _str978 {
  constexpr static const char* value = "space_available_size_";
};
struct _str979 {
  constexpr static const char* value = "physical_space_size_";
};
struct _str980 {
  constexpr static const char* value = "space_name";
};
struct _str981 {
  constexpr static const char* value = "space_size";
};
struct _str982 {
  constexpr static const char* value = "space_used_size";
};
struct _str983 {
  constexpr static const char* value = "space_available_size";
};
struct _str984 {
  constexpr static const char* value = "physical_space_size";
};
struct _str985 {
  constexpr static const char* value = "HeapObjectStatistics";
};
struct _str986 {
  constexpr static const char* value = "object_type_";
};
struct _str987 {
  constexpr static const char* value = "object_sub_type_";
};
struct _str988 {
  constexpr static const char* value = "object_count_";
};
struct _str989 {
  constexpr static const char* value = "object_size_";
};
struct _str990 {
  constexpr static const char* value = "object_type";
};
struct _str991 {
  constexpr static const char* value = "object_sub_type";
};
struct _str992 {
  constexpr static const char* value = "object_count";
};
struct _str993 {
  constexpr static const char* value = "object_size";
};
struct _str994 {
  constexpr static const char* value = "HeapCodeStatistics";
};
struct _str995 {
  constexpr static const char* value = "code_and_metadata_size_";
};
struct _str996 {
  constexpr static const char* value = "bytecode_and_metadata_size_";
};
struct _str997 {
  constexpr static const char* value = "external_script_source_size_";
};
struct _str998 {
  constexpr static const char* value = "code_and_metadata_size";
};
struct _str999 {
  constexpr static const char* value = "bytecode_and_metadata_size";
};
struct _str1000 {
  constexpr static const char* value = "external_script_source_size";
};
struct _str1001 {
  constexpr static const char* value = "JitCodeEvent";
};
struct _str1002 {
  constexpr static const char* value = "code_type";
};
struct _str1003 {
  constexpr static const char* value = "code_start";
};
struct _str1004 {
  constexpr static const char* value = "code_len";
};
struct _str1005 {
  constexpr static const char* value = "script";
};
struct _str1006 {
  constexpr static const char* value = "user_data";
};
struct _str1007 {
  constexpr static const char* value = "line_info";
};
struct _str1008 {
  constexpr static const char* value = "new_code_start";
};
struct _str1009 {
  constexpr static const char* value = "name_t";
};
struct _str1010 {
  constexpr static const char* value = "len";
};
struct _str1011 {
  constexpr static const char* value = "line_info_t";
};
struct _str1012 {
  constexpr static const char* value = "offset";
};
struct _str1013 {
  constexpr static const char* value = "pos";
};
struct _str1014 {
  constexpr static const char* value = "position_type";
};
struct _str1015 {
  constexpr static const char* value = "JitCodeEventHandler";
};
struct _str1016 {
  constexpr static const char* value = "UnhandledExceptionCallback";
};
struct _str1017 {
  constexpr static const char* value = "ExternalResourceVisitor";
};
struct _str1018 {
  constexpr static const char* value = "~ExternalResourceVisitor";
};
struct _str1019 {
  constexpr static const char* value = "string";
};
struct _str1020 {
  constexpr static const char* value = "VisitExternalString";
};
struct _str1021 {
  constexpr static const char* value = "PersistentHandleVisitor";
};
struct _str1022 {
  constexpr static const char* value = "~PersistentHandleVisitor";
};
struct _str1023 {
  constexpr static const char* value = "VisitPersistentHandle";
};
struct _str1024 {
  constexpr static const char* value = "EmbedderHeapTracer";
};
struct _str1025 {
  constexpr static const char* value = "TracedGlobalHandleVisitor";
};
struct _str1026 {
  constexpr static const char* value = "~TracedGlobalHandleVisitor";
};
struct _str1027 {
  constexpr static const char* value = "VisitTracedGlobalHandle";
};
struct _str1028 {
  constexpr static const char* value = "TraceSummary";
};
struct _str1029 {
  constexpr static const char* value = "allocated_size";
};
struct _str1030 {
  constexpr static const char* value = "~EmbedderHeapTracer";
};
struct _str1031 {
  constexpr static const char* value = "visitor";
};
struct _str1032 {
  constexpr static const char* value = "IterateTracedGlobalHandles";
};
struct _str1033 {
  constexpr static const char* value = "RegisterV8References";
};
struct _str1034 {
  constexpr static const char* value = "ref";
};
struct _str1035 {
  constexpr static const char* value = "RegisterEmbedderReference";
};
struct _str1036 {
  constexpr static const char* value = "TracePrologue";
};
struct _str1037 {
  constexpr static const char* value = "deadline_in_ms";
};
struct _str1038 {
  constexpr static const char* value = "AdvanceTracing";
};
struct _str1039 {
  constexpr static const char* value = "IsTracingDone";
};
struct _str1040 {
  constexpr static const char* value = "TraceEpilogue";
};
struct _str1041 {
  constexpr static const char* value = "trace_summary";
};
struct _str1042 {
  constexpr static const char* value = "stack_state";
};
struct _str1043 {
  constexpr static const char* value = "EnterFinalPause";
};
struct _str1044 {
  constexpr static const char* value = "FinalizeTracing";
};
struct _str1045 {
  constexpr static const char* value = "IsRootForNonTracingGC";
};
struct _str1046 {
  constexpr static const char* value = "GarbageCollectionForTesting";
};
struct _str1047 {
  constexpr static const char* value = "IncreaseAllocatedSize";
};
struct _str1048 {
  constexpr static const char* value = "DecreaseAllocatedSize";
};
struct _str1049 {
  constexpr static const char* value = "SerializeInternalFieldsCallback";
};
struct _str1050 {
  constexpr static const char* value = "CallbackFunction";
};
struct _str1051 {
  constexpr static const char* value = "data_arg";
};
struct _str1052 {
  constexpr static const char* value = "~SerializeInternalFieldsCallback";
};
struct _str1053 {
  constexpr static const char* value = "SerializeEmbedderFieldsCallback";
};
struct _str1054 {
  constexpr static const char* value = "DeserializeInternalFieldsCallback";
};
struct _str1055 {
  constexpr static const char* value = "~DeserializeInternalFieldsCallback";
};
struct _str1056 {
  constexpr static const char* value = "DeserializeEmbedderFieldsCallback";
};
struct _str1057 {
  constexpr static const char* value = "CreateParams";
};
struct _str1058 {
  constexpr static const char* value = "code_event_handler";
};
struct _str1059 {
  constexpr static const char* value = "constraints";
};
struct _str1060 {
  constexpr static const char* value = "snapshot_blob";
};
struct _str1061 {
  constexpr static const char* value = "counter_lookup_callback";
};
struct _str1062 {
  constexpr static const char* value = "create_histogram_callback";
};
struct _str1063 {
  constexpr static const char* value = "add_histogram_sample_callback";
};
struct _str1064 {
  constexpr static const char* value = "array_buffer_allocator";
};
struct _str1065 {
  constexpr static const char* value = "external_references";
};
struct _str1066 {
  constexpr static const char* value = "allow_atomics_wait";
};
struct _str1067 {
  constexpr static const char* value = "only_terminate_in_safe_scope";
};
struct _str1068 {
  constexpr static const char* value = "Scope";
};
struct _str1069 {
  constexpr static const char* value = "~Scope";
};
struct _str1070 {
  constexpr static const char* value = "DisallowJavascriptExecutionScope";
};
struct _str1071 {
  constexpr static const char* value = "on_failure_";
};
struct _str1072 {
  constexpr static const char* value = "internal_";
};
struct _str1073 {
  constexpr static const char* value = "on_failure";
};
struct _str1074 {
  constexpr static const char* value = "~DisallowJavascriptExecutionScope";
};
struct _str1075 {
  constexpr static const char* value = "AllowJavascriptExecutionScope";
};
struct _str1076 {
  constexpr static const char* value = "internal_throws_";
};
struct _str1077 {
  constexpr static const char* value = "internal_assert_";
};
struct _str1078 {
  constexpr static const char* value = "internal_dump_";
};
struct _str1079 {
  constexpr static const char* value = "~AllowJavascriptExecutionScope";
};
struct _str1080 {
  constexpr static const char* value = "SuppressMicrotaskExecutionScope";
};
struct _str1081 {
  constexpr static const char* value = "~SuppressMicrotaskExecutionScope";
};
struct _str1082 {
  constexpr static const char* value = "SafeForTerminationScope";
};
struct _str1083 {
  constexpr static const char* value = "prev_value_";
};
struct _str1084 {
  constexpr static const char* value = "~SafeForTerminationScope";
};
struct _str1085 {
  constexpr static const char* value = "UseCounterCallback";
};
struct _str1086 {
  constexpr static const char* value = "params";
};
struct _str1087 {
  constexpr static const char* value = "GetCurrent";
};
struct _str1088 {
  constexpr static const char* value = "AbortOnUncaughtExceptionCallback";
};
struct _str1089 {
  constexpr static const char* value = "SetAbortOnUncaughtExceptionCallback";
};
struct _str1090 {
  constexpr static const char* value = "SetHostImportModuleDynamicallyCallback";
};
struct _str1091 {
  constexpr static const char* value =
      "SetHostInitializeImportMetaObjectCallback";
};
struct _str1092 {
  constexpr static const char* value = "SetPrepareStackTraceCallback";
};
struct _str1093 {
  constexpr static const char* value = "MemoryPressureNotification";
};
struct _str1094 {
  constexpr static const char* value = "Enter";
};
struct _str1095 {
  constexpr static const char* value = "Exit";
};
struct _str1096 {
  constexpr static const char* value = "DumpAndResetStats";
};
struct _str1097 {
  constexpr static const char* value = "DiscardThreadSpecificMetadata";
};
struct _str1098 {
  constexpr static const char* value = "slot";
};
struct _str1099 {
  constexpr static const char* value = "SetData";
};
struct _str1100 {
  constexpr static const char* value = "GetData";
};
struct _str1101 {
  constexpr static const char* value = "GetNumberOfDataSlots";
};
struct _str1102 {
  constexpr static const char* value = "GetDataFromSnapshotOnce";
};
struct _str1103 {
  constexpr static const char* value = "heap_statistics";
};
struct _str1104 {
  constexpr static const char* value = "GetHeapStatistics";
};
struct _str1105 {
  constexpr static const char* value = "NumberOfHeapSpaces";
};
struct _str1106 {
  constexpr static const char* value = "space_statistics";
};
struct _str1107 {
  constexpr static const char* value = "GetHeapSpaceStatistics";
};
struct _str1108 {
  constexpr static const char* value = "NumberOfTrackedHeapObjectTypes";
};
struct _str1109 {
  constexpr static const char* value = "object_statistics";
};
struct _str1110 {
  constexpr static const char* value = "type_index";
};
struct _str1111 {
  constexpr static const char* value = "GetHeapObjectStatisticsAtLastGC";
};
struct _str1112 {
  constexpr static const char* value = "GetHeapCodeAndMetadataStatistics";
};
struct _str1113 {
  constexpr static const char* value = "state";
};
struct _str1114 {
  constexpr static const char* value = "frames";
};
struct _str1115 {
  constexpr static const char* value = "frames_limit";
};
struct _str1116 {
  constexpr static const char* value = "sample_info";
};
struct _str1117 {
  constexpr static const char* value = "GetStackSample";
};
struct _str1118 {
  constexpr static const char* value = "change_in_bytes";
};
struct _str1119 {
  constexpr static const char* value = "AdjustAmountOfExternalAllocatedMemory";
};
struct _str1120 {
  constexpr static const char* value =
      "NumberOfPhantomHandleResetsSinceLastCall";
};
struct _str1121 {
  constexpr static const char* value = "GetHeapProfiler";
};
struct _str1122 {
  constexpr static const char* value = "is_idle";
};
struct _str1123 {
  constexpr static const char* value = "SetIdle";
};
struct _str1124 {
  constexpr static const char* value = "GetArrayBufferAllocator";
};
struct _str1125 {
  constexpr static const char* value = "InContext";
};
struct _str1126 {
  constexpr static const char* value = "GetCurrentContext";
};
struct _str1127 {
  constexpr static const char* value = "GetEnteredContext";
};
struct _str1128 {
  constexpr static const char* value = "GetEnteredOrMicrotaskContext";
};
struct _str1129 {
  constexpr static const char* value = "GetIncumbentContext";
};
struct _str1130 {
  constexpr static const char* value = "ThrowException";
};
struct _str1131 {
  constexpr static const char* value = "GCCallbackWithData";
};
struct _str1132 {
  constexpr static const char* value = "gc_type_filter";
};
struct _str1133 {
  constexpr static const char* value = "AddGCPrologueCallback";
};
struct _str1134 {
  constexpr static const char* value = "RemoveGCPrologueCallback";
};
struct _str1135 {
  constexpr static const char* value = "tracer";
};
struct _str1136 {
  constexpr static const char* value = "SetEmbedderHeapTracer";
};
struct _str1137 {
  constexpr static const char* value = "GetEmbedderHeapTracer";
};
struct _str1138 {
  constexpr static const char* value = "AtomicsWaitWakeHandle";
};
struct _str1139 {
  constexpr static const char* value = "Wake";
};
struct _str1140 {
  constexpr static const char* value = "AtomicsWaitCallback";
};
struct _str1141 {
  constexpr static const char* value = "SetAtomicsWaitCallback";
};
struct _str1142 {
  constexpr static const char* value = "AddGCEpilogueCallback";
};
struct _str1143 {
  constexpr static const char* value = "RemoveGCEpilogueCallback";
};
struct _str1144 {
  constexpr static const char* value =
      "GetExternallyAllocatedMemoryInBytesCallback";
};
struct _str1145 {
  constexpr static const char* value =
      "SetGetExternallyAllocatedMemoryInBytesCallback";
};
struct _str1146 {
  constexpr static const char* value = "TerminateExecution";
};
struct _str1147 {
  constexpr static const char* value = "IsExecutionTerminating";
};
struct _str1148 {
  constexpr static const char* value = "CancelTerminateExecution";
};
struct _str1149 {
  constexpr static const char* value = "RequestInterrupt";
};
struct _str1150 {
  constexpr static const char* value = "RequestGarbageCollectionForTesting";
};
struct _str1151 {
  constexpr static const char* value = "SetEventLogger";
};
struct _str1152 {
  constexpr static const char* value = "AddBeforeCallEnteredCallback";
};
struct _str1153 {
  constexpr static const char* value = "RemoveBeforeCallEnteredCallback";
};
struct _str1154 {
  constexpr static const char* value = "AddCallCompletedCallback";
};
struct _str1155 {
  constexpr static const char* value = "RemoveCallCompletedCallback";
};
struct _str1156 {
  constexpr static const char* value = "hook";
};
struct _str1157 {
  constexpr static const char* value = "SetPromiseHook";
};
struct _str1158 {
  constexpr static const char* value = "SetPromiseRejectCallback";
};
struct _str1159 {
  constexpr static const char* value = "RunMicrotasks";
};
struct _str1160 {
  constexpr static const char* value = "SetMicrotasksPolicy";
};
struct _str1161 {
  constexpr static const char* value = "GetMicrotasksPolicy";
};
struct _str1162 {
  constexpr static const char* value = "SetUseCounterCallback";
};
struct _str1163 {
  constexpr static const char* value = "SetCounterFunction";
};
struct _str1164 {
  constexpr static const char* value = "SetCreateHistogramFunction";
};
struct _str1165 {
  constexpr static const char* value = "SetAddHistogramSampleFunction";
};
struct _str1166 {
  constexpr static const char* value = "deadline_in_seconds";
};
struct _str1167 {
  constexpr static const char* value = "IdleNotificationDeadline";
};
struct _str1168 {
  constexpr static const char* value = "LowMemoryNotification";
};
struct _str1169 {
  constexpr static const char* value = "dependant_context";
};
struct _str1170 {
  constexpr static const char* value = "ContextDisposedNotification";
};
struct _str1171 {
  constexpr static const char* value = "IsolateInForegroundNotification";
};
struct _str1172 {
  constexpr static const char* value = "IsolateInBackgroundNotification";
};
struct _str1173 {
  constexpr static const char* value = "EnableMemorySavingsMode";
};
struct _str1174 {
  constexpr static const char* value = "DisableMemorySavingsMode";
};
struct _str1175 {
  constexpr static const char* value = "rail_mode";
};
struct _str1176 {
  constexpr static const char* value = "SetRAILMode";
};
struct _str1177 {
  constexpr static const char* value = "IncreaseHeapLimitForDebugging";
};
struct _str1178 {
  constexpr static const char* value = "RestoreOriginalHeapLimit";
};
struct _str1179 {
  constexpr static const char* value = "IsHeapLimitIncreasedForDebugging";
};
struct _str1180 {
  constexpr static const char* value = "event_handler";
};
struct _str1181 {
  constexpr static const char* value = "SetJitCodeEventHandler";
};
struct _str1182 {
  constexpr static const char* value = "SetStackLimit";
};
struct _str1183 {
  constexpr static const char* value = "GetCodeRange";
};
struct _str1184 {
  constexpr static const char* value = "GetUnwindState";
};
struct _str1185 {
  constexpr static const char* value = "SetFatalErrorHandler";
};
struct _str1186 {
  constexpr static const char* value = "SetOOMErrorHandler";
};
struct _str1187 {
  constexpr static const char* value = "AddNearHeapLimitCallback";
};
struct _str1188 {
  constexpr static const char* value = "heap_limit";
};
struct _str1189 {
  constexpr static const char* value = "RemoveNearHeapLimitCallback";
};
struct _str1190 {
  constexpr static const char* value = "threshold_percent";
};
struct _str1191 {
  constexpr static const char* value = "AutomaticallyRestoreInitialHeapLimit";
};
struct _str1192 {
  constexpr static const char* value =
      "SetAllowCodeGenerationFromStringsCallback";
};
struct _str1193 {
  constexpr static const char* value = "SetAllowWasmCodeGenerationCallback";
};
struct _str1194 {
  constexpr static const char* value = "SetWasmModuleCallback";
};
struct _str1195 {
  constexpr static const char* value = "SetWasmInstanceCallback";
};
struct _str1196 {
  constexpr static const char* value = "SetWasmStreamingCallback";
};
struct _str1197 {
  constexpr static const char* value = "SetWasmThreadsEnabledCallback";
};
struct _str1198 {
  constexpr static const char* value = "IsDead";
};
struct _str1199 {
  constexpr static const char* value = "AddMessageListener";
};
struct _str1200 {
  constexpr static const char* value = "message_levels";
};
struct _str1201 {
  constexpr static const char* value = "AddMessageListenerWithErrorLevel";
};
struct _str1202 {
  constexpr static const char* value = "RemoveMessageListeners";
};
struct _str1203 {
  constexpr static const char* value = "SetFailedAccessCheckCallbackFunction";
};
struct _str1204 {
  constexpr static const char* value = "capture";
};
struct _str1205 {
  constexpr static const char* value =
      "SetCaptureStackTraceForUncaughtExceptions";
};
struct _str1206 {
  constexpr static const char* value = "VisitExternalResources";
};
struct _str1207 {
  constexpr static const char* value = "VisitHandlesWithClassIds";
};
struct _str1208 {
  constexpr static const char* value = "VisitWeakHandles";
};
struct _str1209 {
  constexpr static const char* value = "IsInUse";
};
struct _str1210 {
  constexpr static const char* value = "allow";
};
struct _str1211 {
  constexpr static const char* value = "SetAllowAtomicsWait";
};
struct _str1212 {
  constexpr static const char* value = "time_zone_detection";
};
struct _str1213 {
  constexpr static const char* value =
      "DateTimeConfigurationChangeNotification";
};
struct _str1214 {
  constexpr static const char* value = "LocaleConfigurationChangeNotification";
};
struct _str1215 {
  constexpr static const char* value = "~Isolate";
};
struct _str1216 {
  constexpr static const char* value = "operator new";
};
struct _str1217 {
  constexpr static const char* value = "operator new[]";
};
struct _str1218 {
  constexpr static const char* value = "operator delete";
};
struct _str1219 {
  constexpr static const char* value = "operator delete[]";
};
struct _str1220 {
  constexpr static const char* value = "CanBeRehashed";
};
struct _str1221 {
  constexpr static const char* value = "raw_size";
};
struct _str1222 {
  constexpr static const char* value = "EntropySource";
};
struct _str1223 {
  constexpr static const char* value = "ReturnAddressLocationResolver";
};
struct _str1224 {
  constexpr static const char* value = "V8";
};
struct _str1225 {
  constexpr static const char* value = "startup_blob";
};
struct _str1226 {
  constexpr static const char* value = "SetNativesDataBlob";
};
struct _str1227 {
  constexpr static const char* value = "SetSnapshotDataBlob";
};
struct _str1228 {
  constexpr static const char* value = "SetDcheckErrorHandler";
};
struct _str1229 {
  constexpr static const char* value = "SetFlagsFromString";
};
struct _str1230 {
  constexpr static const char* value = "remove_flags";
};
struct _str1231 {
  constexpr static const char* value = "SetFlagsFromCommandLine";
};
struct _str1232 {
  constexpr static const char* value = "GetVersion";
};
struct _str1233 {
  constexpr static const char* value = "SetEntropySource";
};
struct _str1234 {
  constexpr static const char* value = "return_address_resolver";
};
struct _str1235 {
  constexpr static const char* value = "SetReturnAddressLocationResolver";
};
struct _str1236 {
  constexpr static const char* value = "icu_data_file";
};
struct _str1237 {
  constexpr static const char* value = "InitializeICU";
};
struct _str1238 {
  constexpr static const char* value = "exec_path";
};
struct _str1239 {
  constexpr static const char* value = "InitializeICUDefaultLocation";
};
struct _str1240 {
  constexpr static const char* value = "directory_path";
};
struct _str1241 {
  constexpr static const char* value = "InitializeExternalStartupData";
};
struct _str1242 {
  constexpr static const char* value = "natives_blob";
};
struct _str1243 {
  constexpr static const char* value = "platform";
};
struct _str1244 {
  constexpr static const char* value = "InitializePlatform";
};
struct _str1245 {
  constexpr static const char* value = "ShutdownPlatform";
};
struct _str1246 {
  constexpr static const char* value = "use_v8_signal_handler";
};
struct _str1247 {
  constexpr static const char* value = "EnableWebAssemblyTrapHandler";
};
struct _str1248 {
  constexpr static const char* value = "unhandled_exception_callback";
};
struct _str1249 {
  constexpr static const char* value = "SetUnhandledExceptionCallback";
};
struct _str1250 {
  constexpr static const char* value = "SnapshotCreator";
};
struct _str1251 {
  constexpr static const char* value = "existing_blob";
};
struct _str1252 {
  constexpr static const char* value = "~SnapshotCreator";
};
struct _str1253 {
  constexpr static const char* value = "SetDefaultContext";
};
struct _str1254 {
  constexpr static const char* value = "AddContext";
};
struct _str1255 {
  constexpr static const char* value = "template_obj";
};
struct _str1256 {
  constexpr static const char* value = "AddTemplate";
};
struct _str1257 {
  constexpr static const char* value = "AddData";
};
struct _str1258 {
  constexpr static const char* value = "function_code_handling";
};
struct _str1259 {
  constexpr static const char* value = "CreateBlob";
};
struct _str1260 {
  constexpr static const char* value = "IsNothing";
};
struct _str1261 {
  constexpr static const char* value = "IsJust";
};
struct _str1262 {
  constexpr static const char* value = "ToChecked";
};
struct _str1263 {
  constexpr static const char* value = "Check";
};
struct _str1264 {
  constexpr static const char* value = "To";
};
struct _str1265 {
  constexpr static const char* value = "FromJust";
};
struct _str1266 {
  constexpr static const char* value = "Nothing";
};
struct _str1267 {
  constexpr static const char* value = "t";
};
struct _str1268 {
  constexpr static const char* value = "Just";
};
struct _str1269 {
  constexpr static const char* value = "~Maybe";
};
struct _str1270 {
  constexpr static const char* value = "JustVoid";
};
struct _str1271 {
  constexpr static const char* value = "TryCatch";
};
struct _str1272 {
  constexpr static const char* value = "next_";
};
struct _str1273 {
  constexpr static const char* value = "exception_";
};
struct _str1274 {
  constexpr static const char* value = "message_obj_";
};
struct _str1275 {
  constexpr static const char* value = "js_stack_comparable_address_";
};
struct _str1276 {
  constexpr static const char* value = "is_verbose_";
};
struct _str1277 {
  constexpr static const char* value = "can_continue_";
};
struct _str1278 {
  constexpr static const char* value = "capture_message_";
};
struct _str1279 {
  constexpr static const char* value = "rethrow_";
};
struct _str1280 {
  constexpr static const char* value = "has_terminated_";
};
struct _str1281 {
  constexpr static const char* value = "~TryCatch";
};
struct _str1282 {
  constexpr static const char* value = "HasCaught";
};
struct _str1283 {
  constexpr static const char* value = "CanContinue";
};
struct _str1284 {
  constexpr static const char* value = "HasTerminated";
};
struct _str1285 {
  constexpr static const char* value = "ReThrow";
};
struct _str1286 {
  constexpr static const char* value = "SetVerbose";
};
struct _str1287 {
  constexpr static const char* value = "IsVerbose";
};
struct _str1288 {
  constexpr static const char* value = "SetCaptureMessage";
};
struct _str1289 {
  constexpr static const char* value = "JSStackComparableAddress";
};
struct _str1290 {
  constexpr static const char* value = "ExtensionConfiguration";
};
struct _str1291 {
  constexpr static const char* value = "name_count_";
};
struct _str1292 {
  constexpr static const char* value = "names_";
};
struct _str1293 {
  constexpr static const char* value = "name_count";
};
struct _str1294 {
  constexpr static const char* value = "begin";
};
struct _str1295 {
  constexpr static const char* value = "end";
};
struct _str1296 {
  constexpr static const char* value = "DetachGlobal";
};
struct _str1297 {
  constexpr static const char* value = "extensions";
};
struct _str1298 {
  constexpr static const char* value = "global_template";
};
struct _str1299 {
  constexpr static const char* value = "global_object";
};
struct _str1300 {
  constexpr static const char* value = "internal_fields_deserializer";
};
struct _str1301 {
  constexpr static const char* value = "context_snapshot_index";
};
struct _str1302 {
  constexpr static const char* value = "embedder_fields_deserializer";
};
struct _str1303 {
  constexpr static const char* value = "NewRemoteContext";
};
struct _str1304 {
  constexpr static const char* value = "token";
};
struct _str1305 {
  constexpr static const char* value = "SetSecurityToken";
};
struct _str1306 {
  constexpr static const char* value = "UseDefaultSecurityToken";
};
struct _str1307 {
  constexpr static const char* value = "GetSecurityToken";
};
struct _str1308 {
  constexpr static const char* value = "GetNumberOfEmbedderDataFields";
};
struct _str1309 {
  constexpr static const char* value = "GetEmbedderData";
};
struct _str1310 {
  constexpr static const char* value = "GetExtrasBindingObject";
};
struct _str1311 {
  constexpr static const char* value = "SetEmbedderData";
};
struct _str1312 {
  constexpr static const char* value = "GetAlignedPointerFromEmbedderData";
};
struct _str1313 {
  constexpr static const char* value = "SetAlignedPointerInEmbedderData";
};
struct _str1314 {
  constexpr static const char* value = "AllowCodeGenerationFromStrings";
};
struct _str1315 {
  constexpr static const char* value = "IsCodeGenerationFromStringsAllowed";
};
struct _str1316 {
  constexpr static const char* value =
      "SetErrorMessageForCodeGenerationFromStrings";
};
struct _str1317 {
  constexpr static const char* value = "AbortScriptExecutionCallback";
};
struct _str1318 {
  constexpr static const char* value = "SetAbortScriptExecution";
};
struct _str1319 {
  constexpr static const char* value = "context_";
};
struct _str1320 {
  constexpr static const char* value = "BackupIncumbentScope";
};
struct _str1321 {
  constexpr static const char* value = "backup_incumbent_context_";
};
struct _str1322 {
  constexpr static const char* value = "prev_";
};
struct _str1323 {
  constexpr static const char* value = "backup_incumbent_context";
};
struct _str1324 {
  constexpr static const char* value = "~BackupIncumbentScope";
};
struct _str1325 {
  constexpr static const char* value = "Unlocker";
};
struct _str1326 {
  constexpr static const char* value = "~Unlocker";
};
struct _str1327 {
  constexpr static const char* value = "Locker";
};
struct _str1328 {
  constexpr static const char* value = "has_lock_";
};
struct _str1329 {
  constexpr static const char* value = "top_level_";
};
struct _str1330 {
  constexpr static const char* value = "~Locker";
};
struct _str1331 {
  constexpr static const char* value = "IsLocked";
};
struct _str1332 {
  constexpr static const char* value = "IsActive";
};
struct _str1333 {
  constexpr static const char* value = "Unwinder";
};
struct _str1334 {
  constexpr static const char* value = "unwind_state";
};
struct _str1335 {
  constexpr static const char* value = "register_state";
};
struct _str1336 {
  constexpr static const char* value = "stack_base";
};
struct _str1337 {
  constexpr static const char* value = "TryUnwindV8Frames";
};
struct _str1338 {
  constexpr static const char* value = "PCIsInV8";
};

struct _ast1;   // NamespaceDecl v8
struct _ast2;   // TranslationUnitDecl
struct _ast3;   // CXXRecordDecl Context
struct _ast4;   // RecordType v8::Context
struct _ast5;   // CXXRecordDecl Data
struct _ast6;   // RecordType v8::Data
struct _ast7;   // CXXRecordDecl Isolate
struct _ast8;   // RecordType v8::Isolate
struct _ast9;   // CXXRecordDecl AccessorSignature
struct _ast10;  // RecordType v8::AccessorSignature
struct _ast11;  // CXXRecordDecl Array
struct _ast12;  // RecordType v8::Array
struct _ast13;  // CXXRecordDecl ArrayBuffer
struct _ast14;  // RecordType v8::ArrayBuffer
struct _ast15;  // CXXRecordDecl BigInt
struct _ast16;  // RecordType v8::BigInt
struct _ast17;  // CXXRecordDecl BigIntObject
struct _ast18;  // RecordType v8::BigIntObject
struct _ast19;  // CXXRecordDecl Boolean
struct _ast20;  // RecordType v8::Boolean
struct _ast21;  // CXXRecordDecl BooleanObject
struct _ast22;  // RecordType v8::BooleanObject
struct _ast23;  // CXXRecordDecl Date
struct _ast24;  // RecordType v8::Date
struct _ast25;  // CXXRecordDecl External
struct _ast26;  // RecordType v8::External
struct _ast27;  // CXXRecordDecl Function
struct _ast28;  // RecordType v8::Function
struct _ast29;  // CXXRecordDecl FunctionTemplate
struct _ast30;  // RecordType v8::FunctionTemplate
struct _ast31;  // CXXRecordDecl HeapProfiler
struct _ast32;  // RecordType v8::HeapProfiler
struct _ast33;  // CXXRecordDecl ImplementationUtilities
struct _ast34;  // RecordType v8::ImplementationUtilities
struct _ast35;  // CXXRecordDecl Int32
struct _ast36;  // RecordType v8::Int32
struct _ast37;  // CXXRecordDecl Integer
struct _ast38;  // RecordType v8::Integer
struct _ast39;  // ClassTemplateDecl Maybe
struct _ast40;  // TemplateTypeParmDecl T
struct _ast41;  // CXXRecordDecl Maybe
struct _ast42;  // InjectedClassNameType Maybe<T>
struct _ast43;  // ClassTemplateSpecializationDecl Maybe
struct _ast44;  // ClassTemplateSpecializationDecl Maybe
struct _ast45;  // ClassTemplateSpecializationDecl Maybe
struct _ast46;  // ClassTemplateSpecializationDecl Maybe
struct _ast47;  // ClassTemplateSpecializationDecl Maybe
struct _ast48;  // ClassTemplateSpecializationDecl Maybe
struct _ast49;  // CXXRecordDecl MicrotaskQueue
struct _ast50;  // RecordType v8::MicrotaskQueue
struct _ast51;  // CXXRecordDecl Name
struct _ast52;  // RecordType v8::Name
struct _ast53;  // CXXRecordDecl Number
struct _ast54;  // RecordType v8::Number
struct _ast55;  // CXXRecordDecl NumberObject
struct _ast56;  // RecordType v8::NumberObject
struct _ast57;  // CXXRecordDecl Object
struct _ast58;  // RecordType v8::Object
struct _ast59;  // CXXRecordDecl ObjectOperationDescriptor
struct _ast60;  // RecordType v8::ObjectOperationDescriptor
struct _ast61;  // CXXRecordDecl ObjectTemplate
struct _ast62;  // RecordType v8::ObjectTemplate
struct _ast63;  // CXXRecordDecl Platform
struct _ast64;  // RecordType v8::Platform
struct _ast65;  // CXXRecordDecl Primitive
struct _ast66;  // RecordType v8::Primitive
struct _ast67;  // CXXRecordDecl Promise
struct _ast68;  // RecordType v8::Promise
struct _ast69;  // CXXRecordDecl PropertyDescriptor
struct _ast70;  // RecordType v8::PropertyDescriptor
struct _ast71;  // CXXRecordDecl Proxy
struct _ast72;  // RecordType v8::Proxy
struct _ast73;  // CXXRecordDecl RawOperationDescriptor
struct _ast74;  // RecordType v8::RawOperationDescriptor
struct _ast75;  // CXXRecordDecl Script
struct _ast76;  // RecordType v8::Script
struct _ast77;  // CXXRecordDecl SharedArrayBuffer
struct _ast78;  // RecordType v8::SharedArrayBuffer
struct _ast79;  // CXXRecordDecl Signature
struct _ast80;  // RecordType v8::Signature
struct _ast81;  // CXXRecordDecl StartupData
struct _ast82;  // RecordType v8::StartupData
struct _ast83;  // CXXRecordDecl StackFrame
struct _ast84;  // RecordType v8::StackFrame
struct _ast85;  // CXXRecordDecl StackTrace
struct _ast86;  // RecordType v8::StackTrace
struct _ast87;  // CXXRecordDecl String
struct _ast88;  // RecordType v8::String
struct _ast89;  // CXXRecordDecl StringObject
struct _ast90;  // RecordType v8::StringObject
struct _ast91;  // CXXRecordDecl Symbol
struct _ast92;  // RecordType v8::Symbol
struct _ast93;  // CXXRecordDecl SymbolObject
struct _ast94;  // RecordType v8::SymbolObject
struct _ast95;  // CXXRecordDecl PrimitiveArray
struct _ast96;  // RecordType v8::PrimitiveArray
struct _ast97;  // CXXRecordDecl Private
struct _ast98;  // RecordType v8::Private
struct _ast99;  // CXXRecordDecl Uint32
struct _ast100; // RecordType v8::Uint32
struct _ast101; // CXXRecordDecl Utils
struct _ast102; // RecordType v8::Utils
struct _ast103; // CXXRecordDecl Value
struct _ast104; // RecordType v8::Value
struct _ast105; // CXXRecordDecl WasmModuleObject
struct _ast106; // RecordType v8::WasmModuleObject
struct _ast107; // ClassTemplateDecl Local
struct _ast108; // TemplateTypeParmDecl T
struct _ast109; // CXXRecordDecl Local
struct _ast110; // InjectedClassNameType Local<T>
struct _ast111; // ClassTemplateSpecializationDecl Local
struct _ast112; // CXXConstructorDecl Local
struct _ast113; // FunctionProtoType void ()
struct _ast114; // BuiltinType void
struct _ast115; // PointerType v8::Local<v8::Primitive> *
struct _ast116; // RecordType v8::Local<v8::Primitive>
struct _ast117; // FunctionTemplateDecl Local
struct _ast118; // TemplateTypeParmDecl S
struct _ast119; // CXXConstructorDecl Local
struct _ast120; // ParmVarDecl that
struct _ast121; // TemplateSpecializationType Local<S>
struct _ast122; // FunctionProtoType void (Local<S>)
struct _ast123; // CXXConstructorDecl Local
struct _ast124; // ParmVarDecl that
struct _ast125; // TemplateSpecializationType Local<v8::Primitive>
struct _ast126; // FunctionProtoType void (Local<v8::Primitive>)
struct _ast127; // CXXMethodDecl IsEmpty
struct _ast128; // FunctionProtoType bool () const
struct _ast129; // BuiltinType bool
struct _ast130; // PointerType const v8::Local<v8::Primitive> *
struct _ast131; // RecordType const v8::Local<v8::Primitive>
struct _ast132; // CXXMethodDecl Clear
struct _ast133; // CXXMethodDecl operator->
struct _ast134; // FunctionProtoType v8::Primitive *() const
struct _ast135; // PointerType v8::Primitive *
struct _ast136; // SubstTemplateTypeParmType v8::Primitive
struct _ast137; // CXXMethodDecl operator*
struct _ast138; // FunctionTemplateDecl operator==
struct _ast139; // TemplateTypeParmDecl S
struct _ast140; // CXXMethodDecl operator==
struct _ast141; // ParmVarDecl that
struct _ast142; // LValueReferenceType const Local<S> &
struct _ast143; // TemplateSpecializationType const Local<S>
struct _ast144; // TemplateSpecializationType Local<S>
struct _ast145; // FunctionProtoType bool (const Local<S> &) const
struct _ast146; // FunctionTemplateDecl operator==
struct _ast147; // TemplateTypeParmDecl S
struct _ast148; // CXXMethodDecl operator==
struct _ast149; // ParmVarDecl that
struct _ast150; // LValueReferenceType const PersistentBase<S> &
struct _ast151; // TemplateSpecializationType const PersistentBase<S>
struct _ast152; // TemplateSpecializationType PersistentBase<S>
struct _ast153; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast154; // FunctionTemplateDecl operator!=
struct _ast155; // TemplateTypeParmDecl S
struct _ast156; // CXXMethodDecl operator!=
struct _ast157; // ParmVarDecl that
struct _ast158; // LValueReferenceType const Local<S> &
struct _ast159; // TemplateSpecializationType const Local<S>
struct _ast160; // TemplateSpecializationType Local<S>
struct _ast161; // FunctionProtoType bool (const Local<S> &) const
struct _ast162; // FunctionTemplateDecl operator!=
struct _ast163; // TemplateTypeParmDecl S
struct _ast164; // CXXMethodDecl operator!=
struct _ast165; // ParmVarDecl that
struct _ast166; // LValueReferenceType const Persistent<S> &
struct _ast167; // TemplateSpecializationType const Persistent<S>
struct _ast168; // TemplateSpecializationType Persistent<S>
struct _ast169; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast170; // FunctionTemplateDecl Cast
struct _ast171; // TemplateTypeParmDecl S
struct _ast172; // CXXMethodDecl Cast
struct _ast173; // ParmVarDecl that
struct _ast174; // TemplateSpecializationType Local<S>
struct _ast175; // FunctionProtoType Local<v8::Primitive> (Local<S>)
struct _ast176; // TemplateSpecializationType Local<v8::Primitive>
struct _ast177; // FunctionTemplateDecl As
struct _ast178; // TemplateTypeParmDecl S
struct _ast179; // CXXMethodDecl As
struct _ast180; // FunctionProtoType Local<S> () const
struct _ast181; // TemplateSpecializationType Local<S>
struct _ast182; // CXXMethodDecl New
struct _ast183; // ParmVarDecl isolate
struct _ast184; // PointerType v8::Isolate *
struct _ast185; // ParmVarDecl that
struct _ast186; // TemplateSpecializationType Local<v8::Primitive>
struct _ast187; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *,
                // Local<v8::Primitive>)
struct _ast188; // TemplateSpecializationType Local<v8::Primitive>
struct _ast189; // CXXMethodDecl New
struct _ast190; // ParmVarDecl isolate
struct _ast191; // ParmVarDecl that
struct _ast192; // LValueReferenceType const PersistentBase<v8::Primitive> &
struct _ast193; // TemplateSpecializationType const
                // PersistentBase<v8::Primitive>
struct _ast194; // TemplateSpecializationType PersistentBase<v8::Primitive>
struct _ast195; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const
                // PersistentBase<v8::Primitive> &)
struct _ast196; // TemplateSpecializationType Local<v8::Primitive>
struct _ast197; // CXXMethodDecl New
struct _ast198; // ParmVarDecl isolate
struct _ast199; // ParmVarDecl that
struct _ast200; // LValueReferenceType const TracedGlobal<v8::Primitive> &
struct _ast201; // TemplateSpecializationType const TracedGlobal<v8::Primitive>
struct _ast202; // TemplateSpecializationType TracedGlobal<v8::Primitive>
struct _ast203; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const
                // TracedGlobal<v8::Primitive> &)
struct _ast204; // TemplateSpecializationType Local<v8::Primitive>
struct _ast205; // CXXConstructorDecl Local
struct _ast206; // ParmVarDecl
struct _ast207; // LValueReferenceType const v8::Local<v8::Primitive> &
struct _ast208; // FunctionProtoType void (const v8::Local<v8::Primitive> &)
struct _ast209; // CXXConstructorDecl Local
struct _ast210; // ParmVarDecl
struct _ast211; // RValueReferenceType v8::Local<v8::Primitive> &&
struct _ast212; // FunctionProtoType void (v8::Local<v8::Primitive> &&) noexcept
struct _ast213; // CXXDestructorDecl ~Local
struct _ast214; // FunctionProtoType void () noexcept
struct _ast215; // ClassTemplateSpecializationDecl Local
struct _ast216; // CXXConstructorDecl Local
struct _ast217; // PointerType v8::Local<v8::Boolean> *
struct _ast218; // RecordType v8::Local<v8::Boolean>
struct _ast219; // FunctionTemplateDecl Local
struct _ast220; // TemplateTypeParmDecl S
struct _ast221; // CXXConstructorDecl Local
struct _ast222; // ParmVarDecl that
struct _ast223; // TemplateSpecializationType Local<S>
struct _ast224; // FunctionProtoType void (Local<S>)
struct _ast225; // CXXConstructorDecl Local
struct _ast226; // ParmVarDecl that
struct _ast227; // TemplateSpecializationType Local<v8::Boolean>
struct _ast228; // FunctionProtoType void (Local<v8::Boolean>)
struct _ast229; // CXXMethodDecl IsEmpty
struct _ast230; // PointerType const v8::Local<v8::Boolean> *
struct _ast231; // RecordType const v8::Local<v8::Boolean>
struct _ast232; // CXXMethodDecl Clear
struct _ast233; // CXXMethodDecl operator->
struct _ast234; // FunctionProtoType v8::Boolean *() const
struct _ast235; // PointerType v8::Boolean *
struct _ast236; // SubstTemplateTypeParmType v8::Boolean
struct _ast237; // CXXMethodDecl operator*
struct _ast238; // FunctionTemplateDecl operator==
struct _ast239; // TemplateTypeParmDecl S
struct _ast240; // CXXMethodDecl operator==
struct _ast241; // ParmVarDecl that
struct _ast242; // LValueReferenceType const Local<S> &
struct _ast243; // TemplateSpecializationType const Local<S>
struct _ast244; // TemplateSpecializationType Local<S>
struct _ast245; // FunctionProtoType bool (const Local<S> &) const
struct _ast246; // FunctionTemplateDecl operator==
struct _ast247; // TemplateTypeParmDecl S
struct _ast248; // CXXMethodDecl operator==
struct _ast249; // ParmVarDecl that
struct _ast250; // LValueReferenceType const PersistentBase<S> &
struct _ast251; // TemplateSpecializationType const PersistentBase<S>
struct _ast252; // TemplateSpecializationType PersistentBase<S>
struct _ast253; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast254; // FunctionTemplateDecl operator!=
struct _ast255; // TemplateTypeParmDecl S
struct _ast256; // CXXMethodDecl operator!=
struct _ast257; // ParmVarDecl that
struct _ast258; // LValueReferenceType const Local<S> &
struct _ast259; // TemplateSpecializationType const Local<S>
struct _ast260; // TemplateSpecializationType Local<S>
struct _ast261; // FunctionProtoType bool (const Local<S> &) const
struct _ast262; // FunctionTemplateDecl operator!=
struct _ast263; // TemplateTypeParmDecl S
struct _ast264; // CXXMethodDecl operator!=
struct _ast265; // ParmVarDecl that
struct _ast266; // LValueReferenceType const Persistent<S> &
struct _ast267; // TemplateSpecializationType const Persistent<S>
struct _ast268; // TemplateSpecializationType Persistent<S>
struct _ast269; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast270; // FunctionTemplateDecl Cast
struct _ast271; // TemplateTypeParmDecl S
struct _ast272; // CXXMethodDecl Cast
struct _ast273; // ParmVarDecl that
struct _ast274; // TemplateSpecializationType Local<S>
struct _ast275; // FunctionProtoType Local<v8::Boolean> (Local<S>)
struct _ast276; // TemplateSpecializationType Local<v8::Boolean>
struct _ast277; // FunctionTemplateDecl As
struct _ast278; // TemplateTypeParmDecl S
struct _ast279; // CXXMethodDecl As
struct _ast280; // FunctionProtoType Local<S> () const
struct _ast281; // TemplateSpecializationType Local<S>
struct _ast282; // CXXMethodDecl New
struct _ast283; // ParmVarDecl isolate
struct _ast284; // ParmVarDecl that
struct _ast285; // TemplateSpecializationType Local<v8::Boolean>
struct _ast286; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *,
                // Local<v8::Boolean>)
struct _ast287; // TemplateSpecializationType Local<v8::Boolean>
struct _ast288; // CXXMethodDecl New
struct _ast289; // ParmVarDecl isolate
struct _ast290; // ParmVarDecl that
struct _ast291; // LValueReferenceType const PersistentBase<v8::Boolean> &
struct _ast292; // TemplateSpecializationType const PersistentBase<v8::Boolean>
struct _ast293; // TemplateSpecializationType PersistentBase<v8::Boolean>
struct _ast294; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const
                // PersistentBase<v8::Boolean> &)
struct _ast295; // TemplateSpecializationType Local<v8::Boolean>
struct _ast296; // CXXMethodDecl New
struct _ast297; // ParmVarDecl isolate
struct _ast298; // ParmVarDecl that
struct _ast299; // LValueReferenceType const TracedGlobal<v8::Boolean> &
struct _ast300; // TemplateSpecializationType const TracedGlobal<v8::Boolean>
struct _ast301; // TemplateSpecializationType TracedGlobal<v8::Boolean>
struct _ast302; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const
                // TracedGlobal<v8::Boolean> &)
struct _ast303; // TemplateSpecializationType Local<v8::Boolean>
struct _ast304; // CXXConstructorDecl Local
struct _ast305; // ParmVarDecl
struct _ast306; // LValueReferenceType const v8::Local<v8::Boolean> &
struct _ast307; // FunctionProtoType void (const v8::Local<v8::Boolean> &)
struct _ast308; // CXXConstructorDecl Local
struct _ast309; // ParmVarDecl
struct _ast310; // RValueReferenceType v8::Local<v8::Boolean> &&
struct _ast311; // FunctionProtoType void (v8::Local<v8::Boolean> &&) noexcept
struct _ast312; // CXXDestructorDecl ~Local
struct _ast313; // ClassTemplateSpecializationDecl Local
struct _ast314; // CXXConstructorDecl Local
struct _ast315; // PointerType v8::Local<v8::Value> *
struct _ast316; // RecordType v8::Local<v8::Value>
struct _ast317; // FunctionTemplateDecl Local
struct _ast318; // TemplateTypeParmDecl S
struct _ast319; // CXXConstructorDecl Local
struct _ast320; // ParmVarDecl that
struct _ast321; // TemplateSpecializationType Local<S>
struct _ast322; // FunctionProtoType void (Local<S>)
struct _ast323; // CXXConstructorDecl Local
struct _ast324; // ParmVarDecl that
struct _ast325; // TemplateSpecializationType Local<v8::Value>
struct _ast326; // FunctionProtoType void (Local<v8::Value>)
struct _ast327; // CXXMethodDecl IsEmpty
struct _ast328; // PointerType const v8::Local<v8::Value> *
struct _ast329; // RecordType const v8::Local<v8::Value>
struct _ast330; // CXXMethodDecl Clear
struct _ast331; // CXXMethodDecl operator->
struct _ast332; // FunctionProtoType v8::Value *() const
struct _ast333; // PointerType v8::Value *
struct _ast334; // SubstTemplateTypeParmType v8::Value
struct _ast335; // CXXMethodDecl operator*
struct _ast336; // FunctionTemplateDecl operator==
struct _ast337; // TemplateTypeParmDecl S
struct _ast338; // CXXMethodDecl operator==
struct _ast339; // ParmVarDecl that
struct _ast340; // LValueReferenceType const Local<S> &
struct _ast341; // TemplateSpecializationType const Local<S>
struct _ast342; // TemplateSpecializationType Local<S>
struct _ast343; // FunctionProtoType bool (const Local<S> &) const
struct _ast344; // FunctionTemplateDecl operator==
struct _ast345; // TemplateTypeParmDecl S
struct _ast346; // CXXMethodDecl operator==
struct _ast347; // ParmVarDecl that
struct _ast348; // LValueReferenceType const PersistentBase<S> &
struct _ast349; // TemplateSpecializationType const PersistentBase<S>
struct _ast350; // TemplateSpecializationType PersistentBase<S>
struct _ast351; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast352; // FunctionTemplateDecl operator!=
struct _ast353; // TemplateTypeParmDecl S
struct _ast354; // CXXMethodDecl operator!=
struct _ast355; // ParmVarDecl that
struct _ast356; // LValueReferenceType const Local<S> &
struct _ast357; // TemplateSpecializationType const Local<S>
struct _ast358; // TemplateSpecializationType Local<S>
struct _ast359; // FunctionProtoType bool (const Local<S> &) const
struct _ast360; // FunctionTemplateDecl operator!=
struct _ast361; // TemplateTypeParmDecl S
struct _ast362; // CXXMethodDecl operator!=
struct _ast363; // ParmVarDecl that
struct _ast364; // LValueReferenceType const Persistent<S> &
struct _ast365; // TemplateSpecializationType const Persistent<S>
struct _ast366; // TemplateSpecializationType Persistent<S>
struct _ast367; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast368; // FunctionTemplateDecl Cast
struct _ast369; // TemplateTypeParmDecl S
struct _ast370; // CXXMethodDecl Cast
struct _ast371; // ParmVarDecl that
struct _ast372; // TemplateSpecializationType Local<S>
struct _ast373; // FunctionProtoType Local<v8::Value> (Local<S>)
struct _ast374; // TemplateSpecializationType Local<v8::Value>
struct _ast375; // FunctionTemplateDecl As
struct _ast376; // TemplateTypeParmDecl S
struct _ast377; // CXXMethodDecl As
struct _ast378; // FunctionProtoType Local<S> () const
struct _ast379; // TemplateSpecializationType Local<S>
struct _ast380; // CXXMethodDecl New
struct _ast381; // ParmVarDecl isolate
struct _ast382; // ParmVarDecl that
struct _ast383; // TemplateSpecializationType Local<v8::Value>
struct _ast384; // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                // Local<v8::Value>)
struct _ast385; // TemplateSpecializationType Local<v8::Value>
struct _ast386; // CXXMethodDecl New
struct _ast387; // ParmVarDecl isolate
struct _ast388; // ParmVarDecl that
struct _ast389; // LValueReferenceType const PersistentBase<v8::Value> &
struct _ast390; // TemplateSpecializationType const PersistentBase<v8::Value>
struct _ast391; // TemplateSpecializationType PersistentBase<v8::Value>
struct _ast392; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const
                // PersistentBase<v8::Value> &)
struct _ast393; // TemplateSpecializationType Local<v8::Value>
struct _ast394; // CXXMethodDecl New
struct _ast395; // ParmVarDecl isolate
struct _ast396; // ParmVarDecl that
struct _ast397; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast398; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast399; // TemplateSpecializationType TracedGlobal<v8::Value>
struct _ast400; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const
                // TracedGlobal<v8::Value> &)
struct _ast401; // TemplateSpecializationType Local<v8::Value>
struct _ast402; // CXXConstructorDecl Local
struct _ast403; // ParmVarDecl
struct _ast404; // LValueReferenceType const v8::Local<v8::Value> &
struct _ast405; // FunctionProtoType void (const v8::Local<v8::Value> &)
                // noexcept
struct _ast406; // CXXConstructorDecl Local
struct _ast407; // ParmVarDecl
struct _ast408; // RValueReferenceType v8::Local<v8::Value> &&
struct _ast409; // FunctionProtoType void (v8::Local<v8::Value> &&) noexcept
struct _ast410; // CXXDestructorDecl ~Local
struct _ast411; // CXXMethodDecl operator=
struct _ast412; // ParmVarDecl
struct _ast413; // FunctionProtoType v8::Local<v8::Value> &(const
                // v8::Local<v8::Value> &)
struct _ast414; // LValueReferenceType v8::Local<v8::Value> &
struct _ast415; // CXXMethodDecl operator=
struct _ast416; // ParmVarDecl
struct _ast417; // FunctionProtoType v8::Local<v8::Value> &(v8::Local<v8::Value>
                // &&)
struct _ast418; // ClassTemplateSpecializationDecl Local
struct _ast419; // CXXConstructorDecl Local
struct _ast420; // PointerType v8::Local<v8::PrimitiveArray> *
struct _ast421; // RecordType v8::Local<v8::PrimitiveArray>
struct _ast422; // FunctionTemplateDecl Local
struct _ast423; // TemplateTypeParmDecl S
struct _ast424; // CXXConstructorDecl Local
struct _ast425; // ParmVarDecl that
struct _ast426; // TemplateSpecializationType Local<S>
struct _ast427; // FunctionProtoType void (Local<S>)
struct _ast428; // CXXConstructorDecl Local
struct _ast429; // ParmVarDecl that
struct _ast430; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast431; // FunctionProtoType void (Local<v8::PrimitiveArray>)
struct _ast432; // CXXMethodDecl IsEmpty
struct _ast433; // PointerType const v8::Local<v8::PrimitiveArray> *
struct _ast434; // RecordType const v8::Local<v8::PrimitiveArray>
struct _ast435; // CXXMethodDecl Clear
struct _ast436; // CXXMethodDecl operator->
struct _ast437; // FunctionProtoType v8::PrimitiveArray *() const
struct _ast438; // PointerType v8::PrimitiveArray *
struct _ast439; // SubstTemplateTypeParmType v8::PrimitiveArray
struct _ast440; // CXXMethodDecl operator*
struct _ast441; // FunctionTemplateDecl operator==
struct _ast442; // TemplateTypeParmDecl S
struct _ast443; // CXXMethodDecl operator==
struct _ast444; // ParmVarDecl that
struct _ast445; // LValueReferenceType const Local<S> &
struct _ast446; // TemplateSpecializationType const Local<S>
struct _ast447; // TemplateSpecializationType Local<S>
struct _ast448; // FunctionProtoType bool (const Local<S> &) const
struct _ast449; // FunctionTemplateDecl operator==
struct _ast450; // TemplateTypeParmDecl S
struct _ast451; // CXXMethodDecl operator==
struct _ast452; // ParmVarDecl that
struct _ast453; // LValueReferenceType const PersistentBase<S> &
struct _ast454; // TemplateSpecializationType const PersistentBase<S>
struct _ast455; // TemplateSpecializationType PersistentBase<S>
struct _ast456; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast457; // FunctionTemplateDecl operator!=
struct _ast458; // TemplateTypeParmDecl S
struct _ast459; // CXXMethodDecl operator!=
struct _ast460; // ParmVarDecl that
struct _ast461; // LValueReferenceType const Local<S> &
struct _ast462; // TemplateSpecializationType const Local<S>
struct _ast463; // TemplateSpecializationType Local<S>
struct _ast464; // FunctionProtoType bool (const Local<S> &) const
struct _ast465; // FunctionTemplateDecl operator!=
struct _ast466; // TemplateTypeParmDecl S
struct _ast467; // CXXMethodDecl operator!=
struct _ast468; // ParmVarDecl that
struct _ast469; // LValueReferenceType const Persistent<S> &
struct _ast470; // TemplateSpecializationType const Persistent<S>
struct _ast471; // TemplateSpecializationType Persistent<S>
struct _ast472; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast473; // FunctionTemplateDecl Cast
struct _ast474; // TemplateTypeParmDecl S
struct _ast475; // CXXMethodDecl Cast
struct _ast476; // ParmVarDecl that
struct _ast477; // TemplateSpecializationType Local<S>
struct _ast478; // FunctionProtoType Local<v8::PrimitiveArray> (Local<S>)
struct _ast479; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast480; // FunctionTemplateDecl As
struct _ast481; // TemplateTypeParmDecl S
struct _ast482; // CXXMethodDecl As
struct _ast483; // FunctionProtoType Local<S> () const
struct _ast484; // TemplateSpecializationType Local<S>
struct _ast485; // CXXMethodDecl New
struct _ast486; // ParmVarDecl isolate
struct _ast487; // ParmVarDecl that
struct _ast488; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast489; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *,
                // Local<v8::PrimitiveArray>)
struct _ast490; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast491; // CXXMethodDecl New
struct _ast492; // ParmVarDecl isolate
struct _ast493; // ParmVarDecl that
struct _ast494; // LValueReferenceType const PersistentBase<v8::PrimitiveArray>
                // &
struct _ast495; // TemplateSpecializationType const
                // PersistentBase<v8::PrimitiveArray>
struct _ast496; // TemplateSpecializationType PersistentBase<v8::PrimitiveArray>
struct _ast497; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *,
                // const PersistentBase<v8::PrimitiveArray> &)
struct _ast498; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast499; // CXXMethodDecl New
struct _ast500; // ParmVarDecl isolate
struct _ast501; // ParmVarDecl that
struct _ast502; // LValueReferenceType const TracedGlobal<v8::PrimitiveArray> &
struct _ast503; // TemplateSpecializationType const
                // TracedGlobal<v8::PrimitiveArray>
struct _ast504; // TemplateSpecializationType TracedGlobal<v8::PrimitiveArray>
struct _ast505; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *,
                // const TracedGlobal<v8::PrimitiveArray> &)
struct _ast506; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast507; // CXXConstructorDecl Local
struct _ast508; // ParmVarDecl
struct _ast509; // LValueReferenceType const v8::Local<v8::PrimitiveArray> &
struct _ast510; // FunctionProtoType void (const v8::Local<v8::PrimitiveArray>
                // &) noexcept
struct _ast511; // CXXConstructorDecl Local
struct _ast512; // ParmVarDecl
struct _ast513; // RValueReferenceType v8::Local<v8::PrimitiveArray> &&
struct _ast514; // FunctionProtoType void (v8::Local<v8::PrimitiveArray> &&)
                // noexcept
struct _ast515; // CXXDestructorDecl ~Local
struct _ast516; // CXXMethodDecl operator=
struct _ast517; // ParmVarDecl
struct _ast518; // FunctionProtoType v8::Local<v8::PrimitiveArray> &(const
                // v8::Local<v8::PrimitiveArray> &)
struct _ast519; // LValueReferenceType v8::Local<v8::PrimitiveArray> &
struct _ast520; // CXXMethodDecl operator=
struct _ast521; // ParmVarDecl
struct _ast522; // FunctionProtoType v8::Local<v8::PrimitiveArray>
                // &(v8::Local<v8::PrimitiveArray> &&)
struct _ast523; // ClassTemplateSpecializationDecl Local
struct _ast524; // CXXConstructorDecl Local
struct _ast525; // PointerType v8::Local<v8::Integer> *
struct _ast526; // RecordType v8::Local<v8::Integer>
struct _ast527; // FunctionTemplateDecl Local
struct _ast528; // TemplateTypeParmDecl S
struct _ast529; // CXXConstructorDecl Local
struct _ast530; // ParmVarDecl that
struct _ast531; // TemplateSpecializationType Local<S>
struct _ast532; // FunctionProtoType void (Local<S>)
struct _ast533; // CXXConstructorDecl Local
struct _ast534; // ParmVarDecl that
struct _ast535; // TemplateSpecializationType Local<v8::Integer>
struct _ast536; // FunctionProtoType void (Local<v8::Integer>)
struct _ast537; // CXXMethodDecl IsEmpty
struct _ast538; // PointerType const v8::Local<v8::Integer> *
struct _ast539; // RecordType const v8::Local<v8::Integer>
struct _ast540; // CXXMethodDecl Clear
struct _ast541; // CXXMethodDecl operator->
struct _ast542; // FunctionProtoType v8::Integer *() const
struct _ast543; // PointerType v8::Integer *
struct _ast544; // SubstTemplateTypeParmType v8::Integer
struct _ast545; // CXXMethodDecl operator*
struct _ast546; // FunctionTemplateDecl operator==
struct _ast547; // TemplateTypeParmDecl S
struct _ast548; // CXXMethodDecl operator==
struct _ast549; // ParmVarDecl that
struct _ast550; // LValueReferenceType const Local<S> &
struct _ast551; // TemplateSpecializationType const Local<S>
struct _ast552; // TemplateSpecializationType Local<S>
struct _ast553; // FunctionProtoType bool (const Local<S> &) const
struct _ast554; // FunctionTemplateDecl operator==
struct _ast555; // TemplateTypeParmDecl S
struct _ast556; // CXXMethodDecl operator==
struct _ast557; // ParmVarDecl that
struct _ast558; // LValueReferenceType const PersistentBase<S> &
struct _ast559; // TemplateSpecializationType const PersistentBase<S>
struct _ast560; // TemplateSpecializationType PersistentBase<S>
struct _ast561; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast562; // FunctionTemplateDecl operator!=
struct _ast563; // TemplateTypeParmDecl S
struct _ast564; // CXXMethodDecl operator!=
struct _ast565; // ParmVarDecl that
struct _ast566; // LValueReferenceType const Local<S> &
struct _ast567; // TemplateSpecializationType const Local<S>
struct _ast568; // TemplateSpecializationType Local<S>
struct _ast569; // FunctionProtoType bool (const Local<S> &) const
struct _ast570; // FunctionTemplateDecl operator!=
struct _ast571; // TemplateTypeParmDecl S
struct _ast572; // CXXMethodDecl operator!=
struct _ast573; // ParmVarDecl that
struct _ast574; // LValueReferenceType const Persistent<S> &
struct _ast575; // TemplateSpecializationType const Persistent<S>
struct _ast576; // TemplateSpecializationType Persistent<S>
struct _ast577; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast578; // FunctionTemplateDecl Cast
struct _ast579; // TemplateTypeParmDecl S
struct _ast580; // CXXMethodDecl Cast
struct _ast581; // ParmVarDecl that
struct _ast582; // TemplateSpecializationType Local<S>
struct _ast583; // FunctionProtoType Local<v8::Integer> (Local<S>)
struct _ast584; // TemplateSpecializationType Local<v8::Integer>
struct _ast585; // FunctionTemplateDecl As
struct _ast586; // TemplateTypeParmDecl S
struct _ast587; // CXXMethodDecl As
struct _ast588; // FunctionProtoType Local<S> () const
struct _ast589; // TemplateSpecializationType Local<S>
struct _ast590; // CXXMethodDecl New
struct _ast591; // ParmVarDecl isolate
struct _ast592; // ParmVarDecl that
struct _ast593; // TemplateSpecializationType Local<v8::Integer>
struct _ast594; // FunctionProtoType Local<v8::Integer> (v8::Isolate *,
                // Local<v8::Integer>)
struct _ast595; // TemplateSpecializationType Local<v8::Integer>
struct _ast596; // CXXMethodDecl New
struct _ast597; // ParmVarDecl isolate
struct _ast598; // ParmVarDecl that
struct _ast599; // LValueReferenceType const PersistentBase<v8::Integer> &
struct _ast600; // TemplateSpecializationType const PersistentBase<v8::Integer>
struct _ast601; // TemplateSpecializationType PersistentBase<v8::Integer>
struct _ast602; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const
                // PersistentBase<v8::Integer> &)
struct _ast603; // TemplateSpecializationType Local<v8::Integer>
struct _ast604; // CXXMethodDecl New
struct _ast605; // ParmVarDecl isolate
struct _ast606; // ParmVarDecl that
struct _ast607; // LValueReferenceType const TracedGlobal<v8::Integer> &
struct _ast608; // TemplateSpecializationType const TracedGlobal<v8::Integer>
struct _ast609; // TemplateSpecializationType TracedGlobal<v8::Integer>
struct _ast610; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const
                // TracedGlobal<v8::Integer> &)
struct _ast611; // TemplateSpecializationType Local<v8::Integer>
struct _ast612; // CXXConstructorDecl Local
struct _ast613; // ParmVarDecl
struct _ast614; // LValueReferenceType const v8::Local<v8::Integer> &
struct _ast615; // FunctionProtoType void (const v8::Local<v8::Integer> &)
                // noexcept
struct _ast616; // CXXConstructorDecl Local
struct _ast617; // ParmVarDecl
struct _ast618; // RValueReferenceType v8::Local<v8::Integer> &&
struct _ast619; // FunctionProtoType void (v8::Local<v8::Integer> &&) noexcept
struct _ast620; // CXXDestructorDecl ~Local
struct _ast621; // CXXMethodDecl operator=
struct _ast622; // ParmVarDecl
struct _ast623; // FunctionProtoType v8::Local<v8::Integer> &(const
                // v8::Local<v8::Integer> &)
struct _ast624; // LValueReferenceType v8::Local<v8::Integer> &
struct _ast625; // CXXMethodDecl operator=
struct _ast626; // ParmVarDecl
struct _ast627; // FunctionProtoType v8::Local<v8::Integer>
                // &(v8::Local<v8::Integer> &&)
struct _ast628; // ClassTemplateSpecializationDecl Local
struct _ast629; // ClassTemplateSpecializationDecl Local
struct _ast630; // CXXConstructorDecl Local
struct _ast631; // PointerType v8::Local<v8::String> *
struct _ast632; // RecordType v8::Local<v8::String>
struct _ast633; // FunctionTemplateDecl Local
struct _ast634; // TemplateTypeParmDecl S
struct _ast635; // CXXConstructorDecl Local
struct _ast636; // ParmVarDecl that
struct _ast637; // TemplateSpecializationType Local<S>
struct _ast638; // FunctionProtoType void (Local<S>)
struct _ast639; // CXXConstructorDecl Local
struct _ast640; // ParmVarDecl that
struct _ast641; // TemplateSpecializationType Local<v8::String>
struct _ast642; // FunctionProtoType void (Local<v8::String>)
struct _ast643; // CXXMethodDecl IsEmpty
struct _ast644; // PointerType const v8::Local<v8::String> *
struct _ast645; // RecordType const v8::Local<v8::String>
struct _ast646; // CXXMethodDecl Clear
struct _ast647; // CXXMethodDecl operator->
struct _ast648; // FunctionProtoType v8::String *() const
struct _ast649; // PointerType v8::String *
struct _ast650; // SubstTemplateTypeParmType v8::String
struct _ast651; // CXXMethodDecl operator*
struct _ast652; // FunctionTemplateDecl operator==
struct _ast653; // TemplateTypeParmDecl S
struct _ast654; // CXXMethodDecl operator==
struct _ast655; // ParmVarDecl that
struct _ast656; // LValueReferenceType const Local<S> &
struct _ast657; // TemplateSpecializationType const Local<S>
struct _ast658; // TemplateSpecializationType Local<S>
struct _ast659; // FunctionProtoType bool (const Local<S> &) const
struct _ast660; // FunctionTemplateDecl operator==
struct _ast661; // TemplateTypeParmDecl S
struct _ast662; // CXXMethodDecl operator==
struct _ast663; // ParmVarDecl that
struct _ast664; // LValueReferenceType const PersistentBase<S> &
struct _ast665; // TemplateSpecializationType const PersistentBase<S>
struct _ast666; // TemplateSpecializationType PersistentBase<S>
struct _ast667; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast668; // FunctionTemplateDecl operator!=
struct _ast669; // TemplateTypeParmDecl S
struct _ast670; // CXXMethodDecl operator!=
struct _ast671; // ParmVarDecl that
struct _ast672; // LValueReferenceType const Local<S> &
struct _ast673; // TemplateSpecializationType const Local<S>
struct _ast674; // TemplateSpecializationType Local<S>
struct _ast675; // FunctionProtoType bool (const Local<S> &) const
struct _ast676; // FunctionTemplateDecl operator!=
struct _ast677; // TemplateTypeParmDecl S
struct _ast678; // CXXMethodDecl operator!=
struct _ast679; // ParmVarDecl that
struct _ast680; // LValueReferenceType const Persistent<S> &
struct _ast681; // TemplateSpecializationType const Persistent<S>
struct _ast682; // TemplateSpecializationType Persistent<S>
struct _ast683; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast684; // FunctionTemplateDecl Cast
struct _ast685; // TemplateTypeParmDecl S
struct _ast686; // CXXMethodDecl Cast
struct _ast687; // ParmVarDecl that
struct _ast688; // TemplateSpecializationType Local<S>
struct _ast689; // FunctionProtoType Local<v8::String> (Local<S>)
struct _ast690; // TemplateSpecializationType Local<v8::String>
struct _ast691; // FunctionTemplateDecl As
struct _ast692; // TemplateTypeParmDecl S
struct _ast693; // CXXMethodDecl As
struct _ast694; // FunctionProtoType Local<S> () const
struct _ast695; // TemplateSpecializationType Local<S>
struct _ast696; // CXXMethodDecl New
struct _ast697; // ParmVarDecl isolate
struct _ast698; // ParmVarDecl that
struct _ast699; // TemplateSpecializationType Local<v8::String>
struct _ast700; // FunctionProtoType Local<v8::String> (v8::Isolate *,
                // Local<v8::String>)
struct _ast701; // TemplateSpecializationType Local<v8::String>
struct _ast702; // CXXMethodDecl New
struct _ast703; // ParmVarDecl isolate
struct _ast704; // ParmVarDecl that
struct _ast705; // LValueReferenceType const PersistentBase<v8::String> &
struct _ast706; // TemplateSpecializationType const PersistentBase<v8::String>
struct _ast707; // TemplateSpecializationType PersistentBase<v8::String>
struct _ast708; // FunctionProtoType Local<v8::String> (v8::Isolate *, const
                // PersistentBase<v8::String> &)
struct _ast709; // TemplateSpecializationType Local<v8::String>
struct _ast710; // CXXMethodDecl New
struct _ast711; // ParmVarDecl isolate
struct _ast712; // ParmVarDecl that
struct _ast713; // LValueReferenceType const TracedGlobal<v8::String> &
struct _ast714; // TemplateSpecializationType const TracedGlobal<v8::String>
struct _ast715; // TemplateSpecializationType TracedGlobal<v8::String>
struct _ast716; // FunctionProtoType Local<v8::String> (v8::Isolate *, const
                // TracedGlobal<v8::String> &)
struct _ast717; // TemplateSpecializationType Local<v8::String>
struct _ast718; // CXXConstructorDecl Local
struct _ast719; // ParmVarDecl
struct _ast720; // LValueReferenceType const v8::Local<v8::String> &
struct _ast721; // FunctionProtoType void (const v8::Local<v8::String> &)
                // noexcept
struct _ast722; // CXXConstructorDecl Local
struct _ast723; // ParmVarDecl
struct _ast724; // RValueReferenceType v8::Local<v8::String> &&
struct _ast725; // FunctionProtoType void (v8::Local<v8::String> &&) noexcept
struct _ast726; // CXXMethodDecl operator=
struct _ast727; // ParmVarDecl
struct _ast728; // FunctionProtoType v8::Local<v8::String> &(const
                // v8::Local<v8::String> &)
struct _ast729; // LValueReferenceType v8::Local<v8::String> &
struct _ast730; // CXXMethodDecl operator=
struct _ast731; // ParmVarDecl
struct _ast732; // FunctionProtoType v8::Local<v8::String>
                // &(v8::Local<v8::String> &&)
struct _ast733; // CXXDestructorDecl ~Local
struct _ast734; // ClassTemplateSpecializationDecl Local
struct _ast735; // CXXConstructorDecl Local
struct _ast736; // PointerType v8::Local<v8::Context> *
struct _ast737; // RecordType v8::Local<v8::Context>
struct _ast738; // FunctionTemplateDecl Local
struct _ast739; // TemplateTypeParmDecl S
struct _ast740; // CXXConstructorDecl Local
struct _ast741; // ParmVarDecl that
struct _ast742; // TemplateSpecializationType Local<S>
struct _ast743; // FunctionProtoType void (Local<S>)
struct _ast744; // CXXConstructorDecl Local
struct _ast745; // ParmVarDecl that
struct _ast746; // TemplateSpecializationType Local<v8::Context>
struct _ast747; // FunctionProtoType void (Local<v8::Context>)
struct _ast748; // CXXMethodDecl IsEmpty
struct _ast749; // PointerType const v8::Local<v8::Context> *
struct _ast750; // RecordType const v8::Local<v8::Context>
struct _ast751; // CXXMethodDecl Clear
struct _ast752; // CXXMethodDecl operator->
struct _ast753; // FunctionProtoType v8::Context *() const
struct _ast754; // PointerType v8::Context *
struct _ast755; // SubstTemplateTypeParmType v8::Context
struct _ast756; // CXXMethodDecl operator*
struct _ast757; // FunctionTemplateDecl operator==
struct _ast758; // TemplateTypeParmDecl S
struct _ast759; // CXXMethodDecl operator==
struct _ast760; // ParmVarDecl that
struct _ast761; // LValueReferenceType const Local<S> &
struct _ast762; // TemplateSpecializationType const Local<S>
struct _ast763; // TemplateSpecializationType Local<S>
struct _ast764; // FunctionProtoType bool (const Local<S> &) const
struct _ast765; // FunctionTemplateDecl operator==
struct _ast766; // TemplateTypeParmDecl S
struct _ast767; // CXXMethodDecl operator==
struct _ast768; // ParmVarDecl that
struct _ast769; // LValueReferenceType const PersistentBase<S> &
struct _ast770; // TemplateSpecializationType const PersistentBase<S>
struct _ast771; // TemplateSpecializationType PersistentBase<S>
struct _ast772; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast773; // FunctionTemplateDecl operator!=
struct _ast774; // TemplateTypeParmDecl S
struct _ast775; // CXXMethodDecl operator!=
struct _ast776; // ParmVarDecl that
struct _ast777; // LValueReferenceType const Local<S> &
struct _ast778; // TemplateSpecializationType const Local<S>
struct _ast779; // TemplateSpecializationType Local<S>
struct _ast780; // FunctionProtoType bool (const Local<S> &) const
struct _ast781; // FunctionTemplateDecl operator!=
struct _ast782; // TemplateTypeParmDecl S
struct _ast783; // CXXMethodDecl operator!=
struct _ast784; // ParmVarDecl that
struct _ast785; // LValueReferenceType const Persistent<S> &
struct _ast786; // TemplateSpecializationType const Persistent<S>
struct _ast787; // TemplateSpecializationType Persistent<S>
struct _ast788; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast789; // FunctionTemplateDecl Cast
struct _ast790; // TemplateTypeParmDecl S
struct _ast791; // CXXMethodDecl Cast
struct _ast792; // ParmVarDecl that
struct _ast793; // TemplateSpecializationType Local<S>
struct _ast794; // FunctionProtoType Local<v8::Context> (Local<S>)
struct _ast795; // TemplateSpecializationType Local<v8::Context>
struct _ast796; // FunctionTemplateDecl As
struct _ast797; // TemplateTypeParmDecl S
struct _ast798; // CXXMethodDecl As
struct _ast799; // FunctionProtoType Local<S> () const
struct _ast800; // TemplateSpecializationType Local<S>
struct _ast801; // CXXMethodDecl New
struct _ast802; // ParmVarDecl isolate
struct _ast803; // ParmVarDecl that
struct _ast804; // TemplateSpecializationType Local<v8::Context>
struct _ast805; // FunctionProtoType Local<v8::Context> (v8::Isolate *,
                // Local<v8::Context>)
struct _ast806; // TemplateSpecializationType Local<v8::Context>
struct _ast807; // CXXMethodDecl New
struct _ast808; // ParmVarDecl isolate
struct _ast809; // ParmVarDecl that
struct _ast810; // LValueReferenceType const PersistentBase<v8::Context> &
struct _ast811; // TemplateSpecializationType const PersistentBase<v8::Context>
struct _ast812; // TemplateSpecializationType PersistentBase<v8::Context>
struct _ast813; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const
                // PersistentBase<v8::Context> &)
struct _ast814; // TemplateSpecializationType Local<v8::Context>
struct _ast815; // CXXMethodDecl New
struct _ast816; // ParmVarDecl isolate
struct _ast817; // ParmVarDecl that
struct _ast818; // LValueReferenceType const TracedGlobal<v8::Context> &
struct _ast819; // TemplateSpecializationType const TracedGlobal<v8::Context>
struct _ast820; // TemplateSpecializationType TracedGlobal<v8::Context>
struct _ast821; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const
                // TracedGlobal<v8::Context> &)
struct _ast822; // TemplateSpecializationType Local<v8::Context>
struct _ast823; // CXXDestructorDecl ~Local
struct _ast824; // CXXConstructorDecl Local
struct _ast825; // ParmVarDecl
struct _ast826; // LValueReferenceType const v8::Local<v8::Context> &
struct _ast827; // FunctionProtoType void (const v8::Local<v8::Context> &)
                // noexcept
struct _ast828; // CXXConstructorDecl Local
struct _ast829; // ParmVarDecl
struct _ast830; // RValueReferenceType v8::Local<v8::Context> &&
struct _ast831; // FunctionProtoType void (v8::Local<v8::Context> &&) noexcept
struct _ast832; // ClassTemplateSpecializationDecl Local
struct _ast833; // ClassTemplateSpecializationDecl Local
struct _ast834; // ClassTemplateSpecializationDecl Local
struct _ast835; // CXXConstructorDecl Local
struct _ast836; // PointerType v8::Local<v8::UnboundScript> *
struct _ast837; // RecordType v8::Local<v8::UnboundScript>
struct _ast838; // FunctionTemplateDecl Local
struct _ast839; // TemplateTypeParmDecl S
struct _ast840; // CXXConstructorDecl Local
struct _ast841; // ParmVarDecl that
struct _ast842; // TemplateSpecializationType Local<S>
struct _ast843; // FunctionProtoType void (Local<S>)
struct _ast844; // CXXMethodDecl IsEmpty
struct _ast845; // PointerType const v8::Local<v8::UnboundScript> *
struct _ast846; // RecordType const v8::Local<v8::UnboundScript>
struct _ast847; // CXXMethodDecl Clear
struct _ast848; // CXXMethodDecl operator->
struct _ast849; // FunctionProtoType v8::UnboundScript *() const
struct _ast850; // PointerType v8::UnboundScript *
struct _ast851; // SubstTemplateTypeParmType v8::UnboundScript
struct _ast852; // CXXMethodDecl operator*
struct _ast853; // FunctionTemplateDecl operator==
struct _ast854; // TemplateTypeParmDecl S
struct _ast855; // CXXMethodDecl operator==
struct _ast856; // ParmVarDecl that
struct _ast857; // LValueReferenceType const Local<S> &
struct _ast858; // TemplateSpecializationType const Local<S>
struct _ast859; // TemplateSpecializationType Local<S>
struct _ast860; // FunctionProtoType bool (const Local<S> &) const
struct _ast861; // FunctionTemplateDecl operator==
struct _ast862; // TemplateTypeParmDecl S
struct _ast863; // CXXMethodDecl operator==
struct _ast864; // ParmVarDecl that
struct _ast865; // LValueReferenceType const PersistentBase<S> &
struct _ast866; // TemplateSpecializationType const PersistentBase<S>
struct _ast867; // TemplateSpecializationType PersistentBase<S>
struct _ast868; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast869; // FunctionTemplateDecl operator!=
struct _ast870; // TemplateTypeParmDecl S
struct _ast871; // CXXMethodDecl operator!=
struct _ast872; // ParmVarDecl that
struct _ast873; // LValueReferenceType const Local<S> &
struct _ast874; // TemplateSpecializationType const Local<S>
struct _ast875; // TemplateSpecializationType Local<S>
struct _ast876; // FunctionProtoType bool (const Local<S> &) const
struct _ast877; // FunctionTemplateDecl operator!=
struct _ast878; // TemplateTypeParmDecl S
struct _ast879; // CXXMethodDecl operator!=
struct _ast880; // ParmVarDecl that
struct _ast881; // LValueReferenceType const Persistent<S> &
struct _ast882; // TemplateSpecializationType const Persistent<S>
struct _ast883; // TemplateSpecializationType Persistent<S>
struct _ast884; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast885; // FunctionTemplateDecl Cast
struct _ast886; // TemplateTypeParmDecl S
struct _ast887; // CXXMethodDecl Cast
struct _ast888; // ParmVarDecl that
struct _ast889; // TemplateSpecializationType Local<S>
struct _ast890; // FunctionProtoType Local<v8::UnboundScript> (Local<S>)
struct _ast891; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast892; // FunctionTemplateDecl As
struct _ast893; // TemplateTypeParmDecl S
struct _ast894; // CXXMethodDecl As
struct _ast895; // FunctionProtoType Local<S> () const
struct _ast896; // TemplateSpecializationType Local<S>
struct _ast897; // CXXMethodDecl New
struct _ast898; // ParmVarDecl isolate
struct _ast899; // ParmVarDecl that
struct _ast900; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast901; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
                // Local<v8::UnboundScript>)
struct _ast902; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast903; // CXXMethodDecl New
struct _ast904; // ParmVarDecl isolate
struct _ast905; // ParmVarDecl that
struct _ast906; // LValueReferenceType const PersistentBase<v8::UnboundScript> &
struct _ast907; // TemplateSpecializationType const
                // PersistentBase<v8::UnboundScript>
struct _ast908; // TemplateSpecializationType PersistentBase<v8::UnboundScript>
struct _ast909; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
                // const PersistentBase<v8::UnboundScript> &)
struct _ast910; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast911; // CXXMethodDecl New
struct _ast912; // ParmVarDecl isolate
struct _ast913; // ParmVarDecl that
struct _ast914; // LValueReferenceType const TracedGlobal<v8::UnboundScript> &
struct _ast915; // TemplateSpecializationType const
                // TracedGlobal<v8::UnboundScript>
struct _ast916; // TemplateSpecializationType TracedGlobal<v8::UnboundScript>
struct _ast917; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
                // const TracedGlobal<v8::UnboundScript> &)
struct _ast918; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast919; // ClassTemplateSpecializationDecl Local
struct _ast920; // ClassTemplateSpecializationDecl Local
struct _ast921; // CXXConstructorDecl Local
struct _ast922; // PointerType v8::Local<v8::Function> *
struct _ast923; // RecordType v8::Local<v8::Function>
struct _ast924; // FunctionTemplateDecl Local
struct _ast925; // TemplateTypeParmDecl S
struct _ast926; // CXXConstructorDecl Local
struct _ast927; // ParmVarDecl that
struct _ast928; // TemplateSpecializationType Local<S>
struct _ast929; // FunctionProtoType void (Local<S>)
struct _ast930; // CXXConstructorDecl Local
struct _ast931; // ParmVarDecl that
struct _ast932; // TemplateSpecializationType Local<v8::Function>
struct _ast933; // FunctionProtoType void (Local<v8::Function>)
struct _ast934; // CXXMethodDecl IsEmpty
struct _ast935; // PointerType const v8::Local<v8::Function> *
struct _ast936; // RecordType const v8::Local<v8::Function>
struct _ast937; // CXXMethodDecl Clear
struct _ast938; // CXXMethodDecl operator->
struct _ast939; // FunctionProtoType v8::Function *() const
struct _ast940; // PointerType v8::Function *
struct _ast941; // SubstTemplateTypeParmType v8::Function
struct _ast942; // CXXMethodDecl operator*
struct _ast943; // FunctionTemplateDecl operator==
struct _ast944; // TemplateTypeParmDecl S
struct _ast945; // CXXMethodDecl operator==
struct _ast946; // ParmVarDecl that
struct _ast947; // LValueReferenceType const Local<S> &
struct _ast948; // TemplateSpecializationType const Local<S>
struct _ast949; // TemplateSpecializationType Local<S>
struct _ast950; // FunctionProtoType bool (const Local<S> &) const
struct _ast951; // FunctionTemplateDecl operator==
struct _ast952; // TemplateTypeParmDecl S
struct _ast953; // CXXMethodDecl operator==
struct _ast954; // ParmVarDecl that
struct _ast955; // LValueReferenceType const PersistentBase<S> &
struct _ast956; // TemplateSpecializationType const PersistentBase<S>
struct _ast957; // TemplateSpecializationType PersistentBase<S>
struct _ast958; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast959; // FunctionTemplateDecl operator!=
struct _ast960; // TemplateTypeParmDecl S
struct _ast961; // CXXMethodDecl operator!=
struct _ast962; // ParmVarDecl that
struct _ast963; // LValueReferenceType const Local<S> &
struct _ast964; // TemplateSpecializationType const Local<S>
struct _ast965; // TemplateSpecializationType Local<S>
struct _ast966; // FunctionProtoType bool (const Local<S> &) const
struct _ast967; // FunctionTemplateDecl operator!=
struct _ast968; // TemplateTypeParmDecl S
struct _ast969; // CXXMethodDecl operator!=
struct _ast970; // ParmVarDecl that
struct _ast971; // LValueReferenceType const Persistent<S> &
struct _ast972; // TemplateSpecializationType const Persistent<S>
struct _ast973; // TemplateSpecializationType Persistent<S>
struct _ast974; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast975; // FunctionTemplateDecl Cast
struct _ast976; // TemplateTypeParmDecl S
struct _ast977; // CXXMethodDecl Cast
struct _ast978; // ParmVarDecl that
struct _ast979; // TemplateSpecializationType Local<S>
struct _ast980; // FunctionProtoType Local<v8::Function> (Local<S>)
struct _ast981; // TemplateSpecializationType Local<v8::Function>
struct _ast982; // FunctionTemplateDecl As
struct _ast983; // TemplateTypeParmDecl S
struct _ast984; // CXXMethodDecl As
struct _ast985; // FunctionProtoType Local<S> () const
struct _ast986; // TemplateSpecializationType Local<S>
struct _ast987; // CXXMethodDecl New
struct _ast988; // ParmVarDecl isolate
struct _ast989; // ParmVarDecl that
struct _ast990; // TemplateSpecializationType Local<v8::Function>
struct _ast991; // FunctionProtoType Local<v8::Function> (v8::Isolate *,
                // Local<v8::Function>)
struct _ast992; // TemplateSpecializationType Local<v8::Function>
struct _ast993; // CXXMethodDecl New
struct _ast994; // ParmVarDecl isolate
struct _ast995; // ParmVarDecl that
struct _ast996; // LValueReferenceType const PersistentBase<v8::Function> &
struct _ast997; // TemplateSpecializationType const PersistentBase<v8::Function>
struct _ast998; // TemplateSpecializationType PersistentBase<v8::Function>
struct _ast999; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const
                // PersistentBase<v8::Function> &)
struct _ast1000; // TemplateSpecializationType Local<v8::Function>
struct _ast1001; // CXXMethodDecl New
struct _ast1002; // ParmVarDecl isolate
struct _ast1003; // ParmVarDecl that
struct _ast1004; // LValueReferenceType const TracedGlobal<v8::Function> &
struct _ast1005; // TemplateSpecializationType const TracedGlobal<v8::Function>
struct _ast1006; // TemplateSpecializationType TracedGlobal<v8::Function>
struct _ast1007; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const
                 // TracedGlobal<v8::Function> &)
struct _ast1008; // TemplateSpecializationType Local<v8::Function>
struct _ast1009; // CXXConstructorDecl Local
struct _ast1010; // ParmVarDecl
struct _ast1011; // LValueReferenceType const v8::Local<v8::Function> &
struct _ast1012; // FunctionProtoType void (const v8::Local<v8::Function> &)
struct _ast1013; // CXXConstructorDecl Local
struct _ast1014; // ParmVarDecl
struct _ast1015; // RValueReferenceType v8::Local<v8::Function> &&
struct _ast1016; // FunctionProtoType void (v8::Local<v8::Function> &&) noexcept
struct _ast1017; // CXXDestructorDecl ~Local
struct _ast1018; // ClassTemplateSpecializationDecl Local
struct _ast1019; // ClassTemplateSpecializationDecl Local
struct _ast1020; // ClassTemplateSpecializationDecl Local
struct _ast1021; // ClassTemplateSpecializationDecl Local
struct _ast1022; // ClassTemplateSpecializationDecl Local
struct _ast1023; // ClassTemplateSpecializationDecl Local
struct _ast1024; // ClassTemplateSpecializationDecl Local
struct _ast1025; // ClassTemplateSpecializationDecl Local
struct _ast1026; // ClassTemplateSpecializationDecl Local
struct _ast1027; // ClassTemplateSpecializationDecl Local
struct _ast1028; // CXXConstructorDecl Local
struct _ast1029; // PointerType v8::Local<v8::Name> *
struct _ast1030; // RecordType v8::Local<v8::Name>
struct _ast1031; // FunctionTemplateDecl Local
struct _ast1032; // TemplateTypeParmDecl S
struct _ast1033; // CXXConstructorDecl Local
struct _ast1034; // ParmVarDecl that
struct _ast1035; // TemplateSpecializationType Local<S>
struct _ast1036; // FunctionProtoType void (Local<S>)
struct _ast1037; // CXXConstructorDecl Local
struct _ast1038; // ParmVarDecl that
struct _ast1039; // TemplateSpecializationType Local<v8::String>
struct _ast1040; // FunctionProtoType void (Local<v8::String>)
struct _ast1041; // CXXConstructorDecl Local
struct _ast1042; // ParmVarDecl that
struct _ast1043; // TemplateSpecializationType Local<v8::Name>
struct _ast1044; // FunctionProtoType void (Local<v8::Name>)
struct _ast1045; // CXXMethodDecl IsEmpty
struct _ast1046; // PointerType const v8::Local<v8::Name> *
struct _ast1047; // RecordType const v8::Local<v8::Name>
struct _ast1048; // CXXMethodDecl Clear
struct _ast1049; // CXXMethodDecl operator->
struct _ast1050; // FunctionProtoType v8::Name *() const
struct _ast1051; // PointerType v8::Name *
struct _ast1052; // SubstTemplateTypeParmType v8::Name
struct _ast1053; // CXXMethodDecl operator*
struct _ast1054; // FunctionTemplateDecl operator==
struct _ast1055; // TemplateTypeParmDecl S
struct _ast1056; // CXXMethodDecl operator==
struct _ast1057; // ParmVarDecl that
struct _ast1058; // LValueReferenceType const Local<S> &
struct _ast1059; // TemplateSpecializationType const Local<S>
struct _ast1060; // TemplateSpecializationType Local<S>
struct _ast1061; // FunctionProtoType bool (const Local<S> &) const
struct _ast1062; // FunctionTemplateDecl operator==
struct _ast1063; // TemplateTypeParmDecl S
struct _ast1064; // CXXMethodDecl operator==
struct _ast1065; // ParmVarDecl that
struct _ast1066; // LValueReferenceType const PersistentBase<S> &
struct _ast1067; // TemplateSpecializationType const PersistentBase<S>
struct _ast1068; // TemplateSpecializationType PersistentBase<S>
struct _ast1069; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1070; // FunctionTemplateDecl operator!=
struct _ast1071; // TemplateTypeParmDecl S
struct _ast1072; // CXXMethodDecl operator!=
struct _ast1073; // ParmVarDecl that
struct _ast1074; // LValueReferenceType const Local<S> &
struct _ast1075; // TemplateSpecializationType const Local<S>
struct _ast1076; // TemplateSpecializationType Local<S>
struct _ast1077; // FunctionProtoType bool (const Local<S> &) const
struct _ast1078; // FunctionTemplateDecl operator!=
struct _ast1079; // TemplateTypeParmDecl S
struct _ast1080; // CXXMethodDecl operator!=
struct _ast1081; // ParmVarDecl that
struct _ast1082; // LValueReferenceType const Persistent<S> &
struct _ast1083; // TemplateSpecializationType const Persistent<S>
struct _ast1084; // TemplateSpecializationType Persistent<S>
struct _ast1085; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1086; // FunctionTemplateDecl Cast
struct _ast1087; // TemplateTypeParmDecl S
struct _ast1088; // CXXMethodDecl Cast
struct _ast1089; // ParmVarDecl that
struct _ast1090; // TemplateSpecializationType Local<S>
struct _ast1091; // FunctionProtoType Local<v8::Name> (Local<S>)
struct _ast1092; // TemplateSpecializationType Local<v8::Name>
struct _ast1093; // FunctionTemplateDecl As
struct _ast1094; // TemplateTypeParmDecl S
struct _ast1095; // CXXMethodDecl As
struct _ast1096; // FunctionProtoType Local<S> () const
struct _ast1097; // TemplateSpecializationType Local<S>
struct _ast1098; // CXXMethodDecl New
struct _ast1099; // ParmVarDecl isolate
struct _ast1100; // ParmVarDecl that
struct _ast1101; // TemplateSpecializationType Local<v8::Name>
struct _ast1102; // FunctionProtoType Local<v8::Name> (v8::Isolate *,
                 // Local<v8::Name>)
struct _ast1103; // TemplateSpecializationType Local<v8::Name>
struct _ast1104; // CXXMethodDecl New
struct _ast1105; // ParmVarDecl isolate
struct _ast1106; // ParmVarDecl that
struct _ast1107; // LValueReferenceType const PersistentBase<v8::Name> &
struct _ast1108; // TemplateSpecializationType const PersistentBase<v8::Name>
struct _ast1109; // TemplateSpecializationType PersistentBase<v8::Name>
struct _ast1110; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const
                 // PersistentBase<v8::Name> &)
struct _ast1111; // TemplateSpecializationType Local<v8::Name>
struct _ast1112; // CXXMethodDecl New
struct _ast1113; // ParmVarDecl isolate
struct _ast1114; // ParmVarDecl that
struct _ast1115; // LValueReferenceType const TracedGlobal<v8::Name> &
struct _ast1116; // TemplateSpecializationType const TracedGlobal<v8::Name>
struct _ast1117; // TemplateSpecializationType TracedGlobal<v8::Name>
struct _ast1118; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const
                 // TracedGlobal<v8::Name> &)
struct _ast1119; // TemplateSpecializationType Local<v8::Name>
struct _ast1120; // CXXConstructorDecl Local
struct _ast1121; // ParmVarDecl
struct _ast1122; // LValueReferenceType const v8::Local<v8::Name> &
struct _ast1123; // FunctionProtoType void (const v8::Local<v8::Name> &)
struct _ast1124; // CXXConstructorDecl Local
struct _ast1125; // ParmVarDecl
struct _ast1126; // RValueReferenceType v8::Local<v8::Name> &&
struct _ast1127; // FunctionProtoType void (v8::Local<v8::Name> &&) noexcept
struct _ast1128; // CXXDestructorDecl ~Local
struct _ast1129; // ClassTemplateSpecializationDecl Local
struct _ast1130; // CXXConstructorDecl Local
struct _ast1131; // PointerType v8::Local<v8::FunctionTemplate> *
struct _ast1132; // RecordType v8::Local<v8::FunctionTemplate>
struct _ast1133; // FunctionTemplateDecl Local
struct _ast1134; // TemplateTypeParmDecl S
struct _ast1135; // CXXConstructorDecl Local
struct _ast1136; // ParmVarDecl that
struct _ast1137; // TemplateSpecializationType Local<S>
struct _ast1138; // FunctionProtoType void (Local<S>)
struct _ast1139; // CXXConstructorDecl Local
struct _ast1140; // ParmVarDecl that
struct _ast1141; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1142; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast1143; // CXXMethodDecl IsEmpty
struct _ast1144; // PointerType const v8::Local<v8::FunctionTemplate> *
struct _ast1145; // RecordType const v8::Local<v8::FunctionTemplate>
struct _ast1146; // CXXMethodDecl Clear
struct _ast1147; // CXXMethodDecl operator->
struct _ast1148; // FunctionProtoType v8::FunctionTemplate *() const
struct _ast1149; // PointerType v8::FunctionTemplate *
struct _ast1150; // SubstTemplateTypeParmType v8::FunctionTemplate
struct _ast1151; // CXXMethodDecl operator*
struct _ast1152; // FunctionTemplateDecl operator==
struct _ast1153; // TemplateTypeParmDecl S
struct _ast1154; // CXXMethodDecl operator==
struct _ast1155; // ParmVarDecl that
struct _ast1156; // LValueReferenceType const Local<S> &
struct _ast1157; // TemplateSpecializationType const Local<S>
struct _ast1158; // TemplateSpecializationType Local<S>
struct _ast1159; // FunctionProtoType bool (const Local<S> &) const
struct _ast1160; // FunctionTemplateDecl operator==
struct _ast1161; // TemplateTypeParmDecl S
struct _ast1162; // CXXMethodDecl operator==
struct _ast1163; // ParmVarDecl that
struct _ast1164; // LValueReferenceType const PersistentBase<S> &
struct _ast1165; // TemplateSpecializationType const PersistentBase<S>
struct _ast1166; // TemplateSpecializationType PersistentBase<S>
struct _ast1167; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1168; // FunctionTemplateDecl operator!=
struct _ast1169; // TemplateTypeParmDecl S
struct _ast1170; // CXXMethodDecl operator!=
struct _ast1171; // ParmVarDecl that
struct _ast1172; // LValueReferenceType const Local<S> &
struct _ast1173; // TemplateSpecializationType const Local<S>
struct _ast1174; // TemplateSpecializationType Local<S>
struct _ast1175; // FunctionProtoType bool (const Local<S> &) const
struct _ast1176; // FunctionTemplateDecl operator!=
struct _ast1177; // TemplateTypeParmDecl S
struct _ast1178; // CXXMethodDecl operator!=
struct _ast1179; // ParmVarDecl that
struct _ast1180; // LValueReferenceType const Persistent<S> &
struct _ast1181; // TemplateSpecializationType const Persistent<S>
struct _ast1182; // TemplateSpecializationType Persistent<S>
struct _ast1183; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1184; // FunctionTemplateDecl Cast
struct _ast1185; // TemplateTypeParmDecl S
struct _ast1186; // CXXMethodDecl Cast
struct _ast1187; // ParmVarDecl that
struct _ast1188; // TemplateSpecializationType Local<S>
struct _ast1189; // FunctionProtoType Local<v8::FunctionTemplate> (Local<S>)
struct _ast1190; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1191; // FunctionTemplateDecl As
struct _ast1192; // TemplateTypeParmDecl S
struct _ast1193; // CXXMethodDecl As
struct _ast1194; // FunctionProtoType Local<S> () const
struct _ast1195; // TemplateSpecializationType Local<S>
struct _ast1196; // CXXMethodDecl New
struct _ast1197; // ParmVarDecl isolate
struct _ast1198; // ParmVarDecl that
struct _ast1199; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1200; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate
                 // *, Local<v8::FunctionTemplate>)
struct _ast1201; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1202; // CXXMethodDecl New
struct _ast1203; // ParmVarDecl isolate
struct _ast1204; // ParmVarDecl that
struct _ast1205; // LValueReferenceType const
                 // PersistentBase<v8::FunctionTemplate> &
struct _ast1206; // TemplateSpecializationType const
                 // PersistentBase<v8::FunctionTemplate>
struct _ast1207; // TemplateSpecializationType
                 // PersistentBase<v8::FunctionTemplate>
struct _ast1208; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate
                 // *, const PersistentBase<v8::FunctionTemplate> &)
struct _ast1209; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1210; // CXXMethodDecl New
struct _ast1211; // ParmVarDecl isolate
struct _ast1212; // ParmVarDecl that
struct _ast1213; // LValueReferenceType const TracedGlobal<v8::FunctionTemplate>
                 // &
struct _ast1214; // TemplateSpecializationType const
                 // TracedGlobal<v8::FunctionTemplate>
struct _ast1215; // TemplateSpecializationType
                 // TracedGlobal<v8::FunctionTemplate>
struct _ast1216; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate
                 // *, const TracedGlobal<v8::FunctionTemplate> &)
struct _ast1217; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1218; // CXXConstructorDecl Local
struct _ast1219; // ParmVarDecl
struct _ast1220; // LValueReferenceType const v8::Local<v8::FunctionTemplate> &
struct _ast1221; // FunctionProtoType void (const
                 // v8::Local<v8::FunctionTemplate> &)
struct _ast1222; // CXXConstructorDecl Local
struct _ast1223; // ParmVarDecl
struct _ast1224; // RValueReferenceType v8::Local<v8::FunctionTemplate> &&
struct _ast1225; // FunctionProtoType void (v8::Local<v8::FunctionTemplate> &&)
                 // noexcept
struct _ast1226; // CXXDestructorDecl ~Local
struct _ast1227; // ClassTemplateSpecializationDecl Local
struct _ast1228; // ClassTemplateSpecializationDecl Local
struct _ast1229; // ClassTemplateSpecializationDecl Local
struct _ast1230; // ClassTemplateSpecializationDecl Local
struct _ast1231; // CXXConstructorDecl Local
struct _ast1232; // PointerType v8::Local<v8::Promise> *
struct _ast1233; // RecordType v8::Local<v8::Promise>
struct _ast1234; // FunctionTemplateDecl Local
struct _ast1235; // TemplateTypeParmDecl S
struct _ast1236; // CXXConstructorDecl Local
struct _ast1237; // ParmVarDecl that
struct _ast1238; // TemplateSpecializationType Local<S>
struct _ast1239; // FunctionProtoType void (Local<S>)
struct _ast1240; // CXXConstructorDecl Local
struct _ast1241; // ParmVarDecl that
struct _ast1242; // TemplateSpecializationType Local<v8::Promise>
struct _ast1243; // FunctionProtoType void (Local<v8::Promise>)
struct _ast1244; // CXXMethodDecl IsEmpty
struct _ast1245; // PointerType const v8::Local<v8::Promise> *
struct _ast1246; // RecordType const v8::Local<v8::Promise>
struct _ast1247; // CXXMethodDecl Clear
struct _ast1248; // CXXMethodDecl operator->
struct _ast1249; // FunctionProtoType v8::Promise *() const
struct _ast1250; // PointerType v8::Promise *
struct _ast1251; // SubstTemplateTypeParmType v8::Promise
struct _ast1252; // CXXMethodDecl operator*
struct _ast1253; // FunctionTemplateDecl operator==
struct _ast1254; // TemplateTypeParmDecl S
struct _ast1255; // CXXMethodDecl operator==
struct _ast1256; // ParmVarDecl that
struct _ast1257; // LValueReferenceType const Local<S> &
struct _ast1258; // TemplateSpecializationType const Local<S>
struct _ast1259; // TemplateSpecializationType Local<S>
struct _ast1260; // FunctionProtoType bool (const Local<S> &) const
struct _ast1261; // FunctionTemplateDecl operator==
struct _ast1262; // TemplateTypeParmDecl S
struct _ast1263; // CXXMethodDecl operator==
struct _ast1264; // ParmVarDecl that
struct _ast1265; // LValueReferenceType const PersistentBase<S> &
struct _ast1266; // TemplateSpecializationType const PersistentBase<S>
struct _ast1267; // TemplateSpecializationType PersistentBase<S>
struct _ast1268; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1269; // FunctionTemplateDecl operator!=
struct _ast1270; // TemplateTypeParmDecl S
struct _ast1271; // CXXMethodDecl operator!=
struct _ast1272; // ParmVarDecl that
struct _ast1273; // LValueReferenceType const Local<S> &
struct _ast1274; // TemplateSpecializationType const Local<S>
struct _ast1275; // TemplateSpecializationType Local<S>
struct _ast1276; // FunctionProtoType bool (const Local<S> &) const
struct _ast1277; // FunctionTemplateDecl operator!=
struct _ast1278; // TemplateTypeParmDecl S
struct _ast1279; // CXXMethodDecl operator!=
struct _ast1280; // ParmVarDecl that
struct _ast1281; // LValueReferenceType const Persistent<S> &
struct _ast1282; // TemplateSpecializationType const Persistent<S>
struct _ast1283; // TemplateSpecializationType Persistent<S>
struct _ast1284; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1285; // FunctionTemplateDecl Cast
struct _ast1286; // TemplateTypeParmDecl S
struct _ast1287; // CXXMethodDecl Cast
struct _ast1288; // ParmVarDecl that
struct _ast1289; // TemplateSpecializationType Local<S>
struct _ast1290; // FunctionProtoType Local<v8::Promise> (Local<S>)
struct _ast1291; // TemplateSpecializationType Local<v8::Promise>
struct _ast1292; // FunctionTemplateDecl As
struct _ast1293; // TemplateTypeParmDecl S
struct _ast1294; // CXXMethodDecl As
struct _ast1295; // FunctionProtoType Local<S> () const
struct _ast1296; // TemplateSpecializationType Local<S>
struct _ast1297; // CXXMethodDecl New
struct _ast1298; // ParmVarDecl isolate
struct _ast1299; // ParmVarDecl that
struct _ast1300; // TemplateSpecializationType Local<v8::Promise>
struct _ast1301; // FunctionProtoType Local<v8::Promise> (v8::Isolate *,
                 // Local<v8::Promise>)
struct _ast1302; // TemplateSpecializationType Local<v8::Promise>
struct _ast1303; // CXXMethodDecl New
struct _ast1304; // ParmVarDecl isolate
struct _ast1305; // ParmVarDecl that
struct _ast1306; // LValueReferenceType const PersistentBase<v8::Promise> &
struct _ast1307; // TemplateSpecializationType const PersistentBase<v8::Promise>
struct _ast1308; // TemplateSpecializationType PersistentBase<v8::Promise>
struct _ast1309; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const
                 // PersistentBase<v8::Promise> &)
struct _ast1310; // TemplateSpecializationType Local<v8::Promise>
struct _ast1311; // CXXMethodDecl New
struct _ast1312; // ParmVarDecl isolate
struct _ast1313; // ParmVarDecl that
struct _ast1314; // LValueReferenceType const TracedGlobal<v8::Promise> &
struct _ast1315; // TemplateSpecializationType const TracedGlobal<v8::Promise>
struct _ast1316; // TemplateSpecializationType TracedGlobal<v8::Promise>
struct _ast1317; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const
                 // TracedGlobal<v8::Promise> &)
struct _ast1318; // TemplateSpecializationType Local<v8::Promise>
struct _ast1319; // CXXConstructorDecl Local
struct _ast1320; // ParmVarDecl
struct _ast1321; // LValueReferenceType const v8::Local<v8::Promise> &
struct _ast1322; // FunctionProtoType void (const v8::Local<v8::Promise> &)
                 // noexcept
struct _ast1323; // CXXConstructorDecl Local
struct _ast1324; // ParmVarDecl
struct _ast1325; // RValueReferenceType v8::Local<v8::Promise> &&
struct _ast1326; // FunctionProtoType void (v8::Local<v8::Promise> &&)
struct _ast1327; // ClassTemplateSpecializationDecl Local
struct _ast1328; // ClassTemplateSpecializationDecl Local
struct _ast1329; // ClassTemplateSpecializationDecl Local
struct _ast1330; // ClassTemplateSpecializationDecl Local
struct _ast1331; // ClassTemplateSpecializationDecl Local
struct _ast1332; // ClassTemplateSpecializationDecl Local
struct _ast1333; // ClassTemplateSpecializationDecl Local
struct _ast1334; // ClassTemplateSpecializationDecl Local
struct _ast1335; // ClassTemplateSpecializationDecl Local
struct _ast1336; // ClassTemplateSpecializationDecl Local
struct _ast1337; // ClassTemplateSpecializationDecl Local
struct _ast1338; // ClassTemplateSpecializationDecl Local
struct _ast1339; // ClassTemplateSpecializationDecl Local
struct _ast1340; // ClassTemplateSpecializationDecl Local
struct _ast1341; // CXXConstructorDecl Local
struct _ast1342; // PointerType v8::Local<v8::Data> *
struct _ast1343; // RecordType v8::Local<v8::Data>
struct _ast1344; // FunctionTemplateDecl Local
struct _ast1345; // TemplateTypeParmDecl S
struct _ast1346; // CXXConstructorDecl Local
struct _ast1347; // ParmVarDecl that
struct _ast1348; // TemplateSpecializationType Local<S>
struct _ast1349; // FunctionProtoType void (Local<S>)
struct _ast1350; // CXXConstructorDecl Local
struct _ast1351; // ParmVarDecl that
struct _ast1352; // TemplateSpecializationType Local<v8::Data>
struct _ast1353; // FunctionProtoType void (Local<v8::Data>)
struct _ast1354; // CXXMethodDecl IsEmpty
struct _ast1355; // PointerType const v8::Local<v8::Data> *
struct _ast1356; // RecordType const v8::Local<v8::Data>
struct _ast1357; // CXXMethodDecl Clear
struct _ast1358; // CXXMethodDecl operator->
struct _ast1359; // FunctionProtoType v8::Data *() const
struct _ast1360; // PointerType v8::Data *
struct _ast1361; // SubstTemplateTypeParmType v8::Data
struct _ast1362; // CXXMethodDecl operator*
struct _ast1363; // FunctionTemplateDecl operator==
struct _ast1364; // TemplateTypeParmDecl S
struct _ast1365; // CXXMethodDecl operator==
struct _ast1366; // ParmVarDecl that
struct _ast1367; // LValueReferenceType const Local<S> &
struct _ast1368; // TemplateSpecializationType const Local<S>
struct _ast1369; // TemplateSpecializationType Local<S>
struct _ast1370; // FunctionProtoType bool (const Local<S> &) const
struct _ast1371; // FunctionTemplateDecl operator==
struct _ast1372; // TemplateTypeParmDecl S
struct _ast1373; // CXXMethodDecl operator==
struct _ast1374; // ParmVarDecl that
struct _ast1375; // LValueReferenceType const PersistentBase<S> &
struct _ast1376; // TemplateSpecializationType const PersistentBase<S>
struct _ast1377; // TemplateSpecializationType PersistentBase<S>
struct _ast1378; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1379; // FunctionTemplateDecl operator!=
struct _ast1380; // TemplateTypeParmDecl S
struct _ast1381; // CXXMethodDecl operator!=
struct _ast1382; // ParmVarDecl that
struct _ast1383; // LValueReferenceType const Local<S> &
struct _ast1384; // TemplateSpecializationType const Local<S>
struct _ast1385; // TemplateSpecializationType Local<S>
struct _ast1386; // FunctionProtoType bool (const Local<S> &) const
struct _ast1387; // FunctionTemplateDecl operator!=
struct _ast1388; // TemplateTypeParmDecl S
struct _ast1389; // CXXMethodDecl operator!=
struct _ast1390; // ParmVarDecl that
struct _ast1391; // LValueReferenceType const Persistent<S> &
struct _ast1392; // TemplateSpecializationType const Persistent<S>
struct _ast1393; // TemplateSpecializationType Persistent<S>
struct _ast1394; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1395; // FunctionTemplateDecl Cast
struct _ast1396; // TemplateTypeParmDecl S
struct _ast1397; // CXXMethodDecl Cast
struct _ast1398; // ParmVarDecl that
struct _ast1399; // TemplateSpecializationType Local<S>
struct _ast1400; // FunctionProtoType Local<v8::Data> (Local<S>)
struct _ast1401; // TemplateSpecializationType Local<v8::Data>
struct _ast1402; // FunctionTemplateDecl As
struct _ast1403; // TemplateTypeParmDecl S
struct _ast1404; // CXXMethodDecl As
struct _ast1405; // FunctionProtoType Local<S> () const
struct _ast1406; // TemplateSpecializationType Local<S>
struct _ast1407; // CXXMethodDecl New
struct _ast1408; // ParmVarDecl isolate
struct _ast1409; // ParmVarDecl that
struct _ast1410; // TemplateSpecializationType Local<v8::Data>
struct _ast1411; // FunctionProtoType Local<v8::Data> (v8::Isolate *,
                 // Local<v8::Data>)
struct _ast1412; // TemplateSpecializationType Local<v8::Data>
struct _ast1413; // CXXMethodDecl New
struct _ast1414; // ParmVarDecl isolate
struct _ast1415; // ParmVarDecl that
struct _ast1416; // LValueReferenceType const PersistentBase<v8::Data> &
struct _ast1417; // TemplateSpecializationType const PersistentBase<v8::Data>
struct _ast1418; // TemplateSpecializationType PersistentBase<v8::Data>
struct _ast1419; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const
                 // PersistentBase<v8::Data> &)
struct _ast1420; // TemplateSpecializationType Local<v8::Data>
struct _ast1421; // CXXMethodDecl New
struct _ast1422; // ParmVarDecl isolate
struct _ast1423; // ParmVarDecl that
struct _ast1424; // LValueReferenceType const TracedGlobal<v8::Data> &
struct _ast1425; // TemplateSpecializationType const TracedGlobal<v8::Data>
struct _ast1426; // TemplateSpecializationType TracedGlobal<v8::Data>
struct _ast1427; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const
                 // TracedGlobal<v8::Data> &)
struct _ast1428; // TemplateSpecializationType Local<v8::Data>
struct _ast1429; // CXXConstructorDecl Local
struct _ast1430; // ParmVarDecl
struct _ast1431; // LValueReferenceType const v8::Local<v8::Data> &
struct _ast1432; // FunctionProtoType void (const v8::Local<v8::Data> &)
                 // noexcept
struct _ast1433; // CXXConstructorDecl Local
struct _ast1434; // ParmVarDecl
struct _ast1435; // RValueReferenceType v8::Local<v8::Data> &&
struct _ast1436; // FunctionProtoType void (v8::Local<v8::Data> &&)
struct _ast1437; // CXXDestructorDecl ~Local
struct _ast1438; // ClassTemplateSpecializationDecl Local
struct _ast1439; // CXXConstructorDecl Local
struct _ast1440; // PointerType v8::Local<v8::AccessorSignature> *
struct _ast1441; // RecordType v8::Local<v8::AccessorSignature>
struct _ast1442; // FunctionTemplateDecl Local
struct _ast1443; // TemplateTypeParmDecl S
struct _ast1444; // CXXConstructorDecl Local
struct _ast1445; // ParmVarDecl that
struct _ast1446; // TemplateSpecializationType Local<S>
struct _ast1447; // FunctionProtoType void (Local<S>)
struct _ast1448; // CXXConstructorDecl Local
struct _ast1449; // ParmVarDecl that
struct _ast1450; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1451; // FunctionProtoType void (Local<v8::AccessorSignature>)
struct _ast1452; // CXXMethodDecl IsEmpty
struct _ast1453; // PointerType const v8::Local<v8::AccessorSignature> *
struct _ast1454; // RecordType const v8::Local<v8::AccessorSignature>
struct _ast1455; // CXXMethodDecl Clear
struct _ast1456; // CXXMethodDecl operator->
struct _ast1457; // FunctionProtoType v8::AccessorSignature *() const
struct _ast1458; // PointerType v8::AccessorSignature *
struct _ast1459; // SubstTemplateTypeParmType v8::AccessorSignature
struct _ast1460; // CXXMethodDecl operator*
struct _ast1461; // FunctionTemplateDecl operator==
struct _ast1462; // TemplateTypeParmDecl S
struct _ast1463; // CXXMethodDecl operator==
struct _ast1464; // ParmVarDecl that
struct _ast1465; // LValueReferenceType const Local<S> &
struct _ast1466; // TemplateSpecializationType const Local<S>
struct _ast1467; // TemplateSpecializationType Local<S>
struct _ast1468; // FunctionProtoType bool (const Local<S> &) const
struct _ast1469; // FunctionTemplateDecl operator==
struct _ast1470; // TemplateTypeParmDecl S
struct _ast1471; // CXXMethodDecl operator==
struct _ast1472; // ParmVarDecl that
struct _ast1473; // LValueReferenceType const PersistentBase<S> &
struct _ast1474; // TemplateSpecializationType const PersistentBase<S>
struct _ast1475; // TemplateSpecializationType PersistentBase<S>
struct _ast1476; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1477; // FunctionTemplateDecl operator!=
struct _ast1478; // TemplateTypeParmDecl S
struct _ast1479; // CXXMethodDecl operator!=
struct _ast1480; // ParmVarDecl that
struct _ast1481; // LValueReferenceType const Local<S> &
struct _ast1482; // TemplateSpecializationType const Local<S>
struct _ast1483; // TemplateSpecializationType Local<S>
struct _ast1484; // FunctionProtoType bool (const Local<S> &) const
struct _ast1485; // FunctionTemplateDecl operator!=
struct _ast1486; // TemplateTypeParmDecl S
struct _ast1487; // CXXMethodDecl operator!=
struct _ast1488; // ParmVarDecl that
struct _ast1489; // LValueReferenceType const Persistent<S> &
struct _ast1490; // TemplateSpecializationType const Persistent<S>
struct _ast1491; // TemplateSpecializationType Persistent<S>
struct _ast1492; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1493; // FunctionTemplateDecl Cast
struct _ast1494; // TemplateTypeParmDecl S
struct _ast1495; // CXXMethodDecl Cast
struct _ast1496; // ParmVarDecl that
struct _ast1497; // TemplateSpecializationType Local<S>
struct _ast1498; // FunctionProtoType Local<v8::AccessorSignature> (Local<S>)
struct _ast1499; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1500; // FunctionTemplateDecl As
struct _ast1501; // TemplateTypeParmDecl S
struct _ast1502; // CXXMethodDecl As
struct _ast1503; // FunctionProtoType Local<S> () const
struct _ast1504; // TemplateSpecializationType Local<S>
struct _ast1505; // CXXMethodDecl New
struct _ast1506; // ParmVarDecl isolate
struct _ast1507; // ParmVarDecl that
struct _ast1508; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1509; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate
                 // *, Local<v8::AccessorSignature>)
struct _ast1510; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1511; // CXXMethodDecl New
struct _ast1512; // ParmVarDecl isolate
struct _ast1513; // ParmVarDecl that
struct _ast1514; // LValueReferenceType const
                 // PersistentBase<v8::AccessorSignature> &
struct _ast1515; // TemplateSpecializationType const
                 // PersistentBase<v8::AccessorSignature>
struct _ast1516; // TemplateSpecializationType
                 // PersistentBase<v8::AccessorSignature>
struct _ast1517; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate
                 // *, const PersistentBase<v8::AccessorSignature> &)
struct _ast1518; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1519; // CXXMethodDecl New
struct _ast1520; // ParmVarDecl isolate
struct _ast1521; // ParmVarDecl that
struct _ast1522; // LValueReferenceType const
                 // TracedGlobal<v8::AccessorSignature> &
struct _ast1523; // TemplateSpecializationType const
                 // TracedGlobal<v8::AccessorSignature>
struct _ast1524; // TemplateSpecializationType
                 // TracedGlobal<v8::AccessorSignature>
struct _ast1525; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate
                 // *, const TracedGlobal<v8::AccessorSignature> &)
struct _ast1526; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1527; // CXXConstructorDecl Local
struct _ast1528; // ParmVarDecl
struct _ast1529; // LValueReferenceType const v8::Local<v8::AccessorSignature> &
struct _ast1530; // FunctionProtoType void (const
                 // v8::Local<v8::AccessorSignature> &)
struct _ast1531; // CXXConstructorDecl Local
struct _ast1532; // ParmVarDecl
struct _ast1533; // RValueReferenceType v8::Local<v8::AccessorSignature> &&
struct _ast1534; // FunctionProtoType void (v8::Local<v8::AccessorSignature> &&)
                 // noexcept
struct _ast1535; // CXXDestructorDecl ~Local
struct _ast1536; // ClassTemplateSpecializationDecl Local
struct _ast1537; // CXXConstructorDecl Local
struct _ast1538; // PointerType v8::Local<v8::Signature> *
struct _ast1539; // RecordType v8::Local<v8::Signature>
struct _ast1540; // FunctionTemplateDecl Local
struct _ast1541; // TemplateTypeParmDecl S
struct _ast1542; // CXXConstructorDecl Local
struct _ast1543; // ParmVarDecl that
struct _ast1544; // TemplateSpecializationType Local<S>
struct _ast1545; // FunctionProtoType void (Local<S>)
struct _ast1546; // CXXConstructorDecl Local
struct _ast1547; // ParmVarDecl that
struct _ast1548; // TemplateSpecializationType Local<v8::Signature>
struct _ast1549; // FunctionProtoType void (Local<v8::Signature>)
struct _ast1550; // CXXMethodDecl IsEmpty
struct _ast1551; // PointerType const v8::Local<v8::Signature> *
struct _ast1552; // RecordType const v8::Local<v8::Signature>
struct _ast1553; // CXXMethodDecl Clear
struct _ast1554; // CXXMethodDecl operator->
struct _ast1555; // FunctionProtoType v8::Signature *() const
struct _ast1556; // PointerType v8::Signature *
struct _ast1557; // SubstTemplateTypeParmType v8::Signature
struct _ast1558; // CXXMethodDecl operator*
struct _ast1559; // FunctionTemplateDecl operator==
struct _ast1560; // TemplateTypeParmDecl S
struct _ast1561; // CXXMethodDecl operator==
struct _ast1562; // ParmVarDecl that
struct _ast1563; // LValueReferenceType const Local<S> &
struct _ast1564; // TemplateSpecializationType const Local<S>
struct _ast1565; // TemplateSpecializationType Local<S>
struct _ast1566; // FunctionProtoType bool (const Local<S> &) const
struct _ast1567; // FunctionTemplateDecl operator==
struct _ast1568; // TemplateTypeParmDecl S
struct _ast1569; // CXXMethodDecl operator==
struct _ast1570; // ParmVarDecl that
struct _ast1571; // LValueReferenceType const PersistentBase<S> &
struct _ast1572; // TemplateSpecializationType const PersistentBase<S>
struct _ast1573; // TemplateSpecializationType PersistentBase<S>
struct _ast1574; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1575; // FunctionTemplateDecl operator!=
struct _ast1576; // TemplateTypeParmDecl S
struct _ast1577; // CXXMethodDecl operator!=
struct _ast1578; // ParmVarDecl that
struct _ast1579; // LValueReferenceType const Local<S> &
struct _ast1580; // TemplateSpecializationType const Local<S>
struct _ast1581; // TemplateSpecializationType Local<S>
struct _ast1582; // FunctionProtoType bool (const Local<S> &) const
struct _ast1583; // FunctionTemplateDecl operator!=
struct _ast1584; // TemplateTypeParmDecl S
struct _ast1585; // CXXMethodDecl operator!=
struct _ast1586; // ParmVarDecl that
struct _ast1587; // LValueReferenceType const Persistent<S> &
struct _ast1588; // TemplateSpecializationType const Persistent<S>
struct _ast1589; // TemplateSpecializationType Persistent<S>
struct _ast1590; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1591; // FunctionTemplateDecl Cast
struct _ast1592; // TemplateTypeParmDecl S
struct _ast1593; // CXXMethodDecl Cast
struct _ast1594; // ParmVarDecl that
struct _ast1595; // TemplateSpecializationType Local<S>
struct _ast1596; // FunctionProtoType Local<v8::Signature> (Local<S>)
struct _ast1597; // TemplateSpecializationType Local<v8::Signature>
struct _ast1598; // FunctionTemplateDecl As
struct _ast1599; // TemplateTypeParmDecl S
struct _ast1600; // CXXMethodDecl As
struct _ast1601; // FunctionProtoType Local<S> () const
struct _ast1602; // TemplateSpecializationType Local<S>
struct _ast1603; // CXXMethodDecl New
struct _ast1604; // ParmVarDecl isolate
struct _ast1605; // ParmVarDecl that
struct _ast1606; // TemplateSpecializationType Local<v8::Signature>
struct _ast1607; // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
                 // Local<v8::Signature>)
struct _ast1608; // TemplateSpecializationType Local<v8::Signature>
struct _ast1609; // CXXMethodDecl New
struct _ast1610; // ParmVarDecl isolate
struct _ast1611; // ParmVarDecl that
struct _ast1612; // LValueReferenceType const PersistentBase<v8::Signature> &
struct _ast1613; // TemplateSpecializationType const
                 // PersistentBase<v8::Signature>
struct _ast1614; // TemplateSpecializationType PersistentBase<v8::Signature>
struct _ast1615; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const
                 // PersistentBase<v8::Signature> &)
struct _ast1616; // TemplateSpecializationType Local<v8::Signature>
struct _ast1617; // CXXMethodDecl New
struct _ast1618; // ParmVarDecl isolate
struct _ast1619; // ParmVarDecl that
struct _ast1620; // LValueReferenceType const TracedGlobal<v8::Signature> &
struct _ast1621; // TemplateSpecializationType const TracedGlobal<v8::Signature>
struct _ast1622; // TemplateSpecializationType TracedGlobal<v8::Signature>
struct _ast1623; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const
                 // TracedGlobal<v8::Signature> &)
struct _ast1624; // TemplateSpecializationType Local<v8::Signature>
struct _ast1625; // CXXConstructorDecl Local
struct _ast1626; // ParmVarDecl
struct _ast1627; // LValueReferenceType const v8::Local<v8::Signature> &
struct _ast1628; // FunctionProtoType void (const v8::Local<v8::Signature> &)
struct _ast1629; // CXXConstructorDecl Local
struct _ast1630; // ParmVarDecl
struct _ast1631; // RValueReferenceType v8::Local<v8::Signature> &&
struct _ast1632; // FunctionProtoType void (v8::Local<v8::Signature> &&)
                 // noexcept
struct _ast1633; // CXXDestructorDecl ~Local
struct _ast1634; // ClassTemplateSpecializationDecl Local
struct _ast1635; // ClassTemplateSpecializationDecl Local
struct _ast1636; // ClassTemplateSpecializationDecl Local
struct _ast1637; // ClassTemplateSpecializationDecl Local
struct _ast1638; // ClassTemplateDecl MaybeLocal
struct _ast1639; // TemplateTypeParmDecl T
struct _ast1640; // CXXRecordDecl MaybeLocal
struct _ast1641; // InjectedClassNameType MaybeLocal<T>
struct _ast1642; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1643; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1644; // CXXConstructorDecl MaybeLocal
struct _ast1645; // PointerType v8::MaybeLocal<v8::Value> *
struct _ast1646; // RecordType v8::MaybeLocal<v8::Value>
struct _ast1647; // FunctionTemplateDecl MaybeLocal
struct _ast1648; // TemplateTypeParmDecl S
struct _ast1649; // CXXConstructorDecl MaybeLocal
struct _ast1650; // ParmVarDecl that
struct _ast1651; // TemplateSpecializationType Local<S>
struct _ast1652; // FunctionProtoType void (Local<S>)
struct _ast1653; // CXXMethodDecl IsEmpty
struct _ast1654; // PointerType const v8::MaybeLocal<v8::Value> *
struct _ast1655; // RecordType const v8::MaybeLocal<v8::Value>
struct _ast1656; // FunctionTemplateDecl ToLocal
struct _ast1657; // TemplateTypeParmDecl S
struct _ast1658; // CXXMethodDecl ToLocal
struct _ast1659; // ParmVarDecl out
struct _ast1660; // PointerType Local<S> *
struct _ast1661; // TemplateSpecializationType Local<S>
struct _ast1662; // FunctionProtoType bool (Local<S> *) const
struct _ast1663; // CXXMethodDecl ToLocalChecked
struct _ast1664; // FunctionProtoType Local<v8::Value> ()
struct _ast1665; // TemplateSpecializationType Local<v8::Value>
struct _ast1666; // FunctionTemplateDecl FromMaybe
struct _ast1667; // TemplateTypeParmDecl S
struct _ast1668; // CXXMethodDecl FromMaybe
struct _ast1669; // ParmVarDecl default_value
struct _ast1670; // TemplateSpecializationType Local<S>
struct _ast1671; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1672; // TemplateSpecializationType Local<S>
struct _ast1673; // CXXConstructorDecl MaybeLocal
struct _ast1674; // ParmVarDecl
struct _ast1675; // LValueReferenceType const v8::MaybeLocal<v8::Value> &
struct _ast1676; // FunctionProtoType void (const v8::MaybeLocal<v8::Value> &)
struct _ast1677; // CXXConstructorDecl MaybeLocal
struct _ast1678; // ParmVarDecl
struct _ast1679; // RValueReferenceType v8::MaybeLocal<v8::Value> &&
struct _ast1680; // FunctionProtoType void (v8::MaybeLocal<v8::Value> &&)
                 // noexcept
struct _ast1681; // CXXDestructorDecl ~MaybeLocal
struct _ast1682; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1683; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1684; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1685; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1686; // CXXConstructorDecl MaybeLocal
struct _ast1687; // PointerType v8::MaybeLocal<v8::String> *
struct _ast1688; // RecordType v8::MaybeLocal<v8::String>
struct _ast1689; // FunctionTemplateDecl MaybeLocal
struct _ast1690; // TemplateTypeParmDecl S
struct _ast1691; // CXXConstructorDecl MaybeLocal
struct _ast1692; // ParmVarDecl that
struct _ast1693; // TemplateSpecializationType Local<S>
struct _ast1694; // FunctionProtoType void (Local<S>)
struct _ast1695; // CXXMethodDecl IsEmpty
struct _ast1696; // PointerType const v8::MaybeLocal<v8::String> *
struct _ast1697; // RecordType const v8::MaybeLocal<v8::String>
struct _ast1698; // FunctionTemplateDecl ToLocal
struct _ast1699; // TemplateTypeParmDecl S
struct _ast1700; // CXXMethodDecl ToLocal
struct _ast1701; // ParmVarDecl out
struct _ast1702; // PointerType Local<S> *
struct _ast1703; // TemplateSpecializationType Local<S>
struct _ast1704; // FunctionProtoType bool (Local<S> *) const
struct _ast1705; // CXXMethodDecl ToLocalChecked
struct _ast1706; // FunctionProtoType Local<v8::String> ()
struct _ast1707; // TemplateSpecializationType Local<v8::String>
struct _ast1708; // FunctionTemplateDecl FromMaybe
struct _ast1709; // TemplateTypeParmDecl S
struct _ast1710; // CXXMethodDecl FromMaybe
struct _ast1711; // ParmVarDecl default_value
struct _ast1712; // TemplateSpecializationType Local<S>
struct _ast1713; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1714; // TemplateSpecializationType Local<S>
struct _ast1715; // CXXDestructorDecl ~MaybeLocal
struct _ast1716; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1717; // CXXConstructorDecl MaybeLocal
struct _ast1718; // PointerType v8::MaybeLocal<v8::Object> *
struct _ast1719; // RecordType v8::MaybeLocal<v8::Object>
struct _ast1720; // FunctionTemplateDecl MaybeLocal
struct _ast1721; // TemplateTypeParmDecl S
struct _ast1722; // CXXConstructorDecl MaybeLocal
struct _ast1723; // ParmVarDecl that
struct _ast1724; // TemplateSpecializationType Local<S>
struct _ast1725; // FunctionProtoType void (Local<S>)
struct _ast1726; // CXXMethodDecl IsEmpty
struct _ast1727; // PointerType const v8::MaybeLocal<v8::Object> *
struct _ast1728; // RecordType const v8::MaybeLocal<v8::Object>
struct _ast1729; // FunctionTemplateDecl ToLocal
struct _ast1730; // TemplateTypeParmDecl S
struct _ast1731; // CXXMethodDecl ToLocal
struct _ast1732; // ParmVarDecl out
struct _ast1733; // PointerType Local<S> *
struct _ast1734; // TemplateSpecializationType Local<S>
struct _ast1735; // FunctionProtoType bool (Local<S> *) const
struct _ast1736; // CXXMethodDecl ToLocalChecked
struct _ast1737; // FunctionProtoType Local<v8::Object> ()
struct _ast1738; // TemplateSpecializationType Local<v8::Object>
struct _ast1739; // FunctionTemplateDecl FromMaybe
struct _ast1740; // TemplateTypeParmDecl S
struct _ast1741; // CXXMethodDecl FromMaybe
struct _ast1742; // ParmVarDecl default_value
struct _ast1743; // TemplateSpecializationType Local<S>
struct _ast1744; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1745; // TemplateSpecializationType Local<S>
struct _ast1746; // CXXDestructorDecl ~MaybeLocal
struct _ast1747; // CXXConstructorDecl MaybeLocal
struct _ast1748; // ParmVarDecl
struct _ast1749; // LValueReferenceType const v8::MaybeLocal<v8::Object> &
struct _ast1750; // FunctionProtoType void (const v8::MaybeLocal<v8::Object> &)
struct _ast1751; // CXXConstructorDecl MaybeLocal
struct _ast1752; // ParmVarDecl
struct _ast1753; // RValueReferenceType v8::MaybeLocal<v8::Object> &&
struct _ast1754; // FunctionProtoType void (v8::MaybeLocal<v8::Object> &&)
                 // noexcept
struct _ast1755; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1756; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1757; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1758; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1759; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1760; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1761; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1762; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1763; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1764; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1765; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1766; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1767; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1768; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1769; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1770; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1771; // CXXConstructorDecl MaybeLocal
struct _ast1772; // PointerType v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1773; // RecordType v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1774; // FunctionTemplateDecl MaybeLocal
struct _ast1775; // TemplateTypeParmDecl S
struct _ast1776; // CXXConstructorDecl MaybeLocal
struct _ast1777; // ParmVarDecl that
struct _ast1778; // TemplateSpecializationType Local<S>
struct _ast1779; // FunctionProtoType void (Local<S>)
struct _ast1780; // CXXMethodDecl IsEmpty
struct _ast1781; // PointerType const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1782; // RecordType const v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1783; // FunctionTemplateDecl ToLocal
struct _ast1784; // TemplateTypeParmDecl S
struct _ast1785; // CXXMethodDecl ToLocal
struct _ast1786; // ParmVarDecl out
struct _ast1787; // PointerType Local<S> *
struct _ast1788; // TemplateSpecializationType Local<S>
struct _ast1789; // FunctionProtoType bool (Local<S> *) const
struct _ast1790; // CXXMethodDecl ToLocalChecked
struct _ast1791; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast1792; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast1793; // FunctionTemplateDecl FromMaybe
struct _ast1794; // TemplateTypeParmDecl S
struct _ast1795; // CXXMethodDecl FromMaybe
struct _ast1796; // ParmVarDecl default_value
struct _ast1797; // TemplateSpecializationType Local<S>
struct _ast1798; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1799; // TemplateSpecializationType Local<S>
struct _ast1800; // CXXConstructorDecl MaybeLocal
struct _ast1801; // ParmVarDecl
struct _ast1802; // LValueReferenceType const v8::MaybeLocal<v8::ObjectTemplate>
                 // &
struct _ast1803; // FunctionProtoType void (const
                 // v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ast1804; // CXXConstructorDecl MaybeLocal
struct _ast1805; // ParmVarDecl
struct _ast1806; // RValueReferenceType v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ast1807; // FunctionProtoType void (v8::MaybeLocal<v8::ObjectTemplate>
                 // &&) noexcept
struct _ast1808; // CXXDestructorDecl ~MaybeLocal
struct _ast1809; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1810; // ClassTemplateDecl Eternal
struct _ast1811; // TemplateTypeParmDecl T
struct _ast1812; // CXXRecordDecl Eternal
struct _ast1813; // InjectedClassNameType Eternal<T>
struct _ast1814; // ClassTemplateDecl NonCopyablePersistentTraits
struct _ast1815; // TemplateTypeParmDecl T
struct _ast1816; // CXXRecordDecl NonCopyablePersistentTraits
struct _ast1817; // InjectedClassNameType NonCopyablePersistentTraits<T>
struct _ast1818; // ClassTemplateSpecializationDecl NonCopyablePersistentTraits
struct _ast1819; // ClassTemplateSpecializationDecl NonCopyablePersistentTraits
struct _ast1820; // ClassTemplateDecl PersistentBase
struct _ast1821; // TemplateTypeParmDecl T
struct _ast1822; // CXXRecordDecl PersistentBase
struct _ast1823; // InjectedClassNameType PersistentBase<T>
struct _ast1824; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1825; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1826; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1827; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1828; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1829; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1830; // CXXMethodDecl Reset
struct _ast1831; // PointerType v8::PersistentBase<v8::Object> *
struct _ast1832; // RecordType v8::PersistentBase<v8::Object>
struct _ast1833; // FunctionTemplateDecl Reset
struct _ast1834; // TemplateTypeParmDecl S
struct _ast1835; // CXXMethodDecl Reset
struct _ast1836; // ParmVarDecl isolate
struct _ast1837; // ParmVarDecl other
struct _ast1838; // LValueReferenceType const Local<S> &
struct _ast1839; // TemplateSpecializationType const Local<S>
struct _ast1840; // TemplateSpecializationType Local<S>
struct _ast1841; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1842; // FunctionTemplateDecl Reset
struct _ast1843; // TemplateTypeParmDecl S
struct _ast1844; // CXXMethodDecl Reset
struct _ast1845; // ParmVarDecl isolate
struct _ast1846; // ParmVarDecl other
struct _ast1847; // LValueReferenceType const PersistentBase<S> &
struct _ast1848; // TemplateSpecializationType const PersistentBase<S>
struct _ast1849; // TemplateSpecializationType PersistentBase<S>
struct _ast1850; // FunctionProtoType void (v8::Isolate *, const
                 // PersistentBase<S> &)
struct _ast1851; // CXXMethodDecl IsEmpty
struct _ast1852; // PointerType const v8::PersistentBase<v8::Object> *
struct _ast1853; // RecordType const v8::PersistentBase<v8::Object>
struct _ast1854; // CXXMethodDecl Empty
struct _ast1855; // CXXMethodDecl Get
struct _ast1856; // ParmVarDecl isolate
struct _ast1857; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast1858; // TemplateSpecializationType Local<v8::Object>
struct _ast1859; // FunctionTemplateDecl operator==
struct _ast1860; // TemplateTypeParmDecl S
struct _ast1861; // CXXMethodDecl operator==
struct _ast1862; // ParmVarDecl that
struct _ast1863; // LValueReferenceType const PersistentBase<S> &
struct _ast1864; // TemplateSpecializationType const PersistentBase<S>
struct _ast1865; // TemplateSpecializationType PersistentBase<S>
struct _ast1866; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1867; // FunctionTemplateDecl operator==
struct _ast1868; // TemplateTypeParmDecl S
struct _ast1869; // CXXMethodDecl operator==
struct _ast1870; // ParmVarDecl that
struct _ast1871; // LValueReferenceType const Local<S> &
struct _ast1872; // TemplateSpecializationType const Local<S>
struct _ast1873; // TemplateSpecializationType Local<S>
struct _ast1874; // FunctionProtoType bool (const Local<S> &) const
struct _ast1875; // FunctionTemplateDecl operator!=
struct _ast1876; // TemplateTypeParmDecl S
struct _ast1877; // CXXMethodDecl operator!=
struct _ast1878; // ParmVarDecl that
struct _ast1879; // LValueReferenceType const PersistentBase<S> &
struct _ast1880; // TemplateSpecializationType const PersistentBase<S>
struct _ast1881; // TemplateSpecializationType PersistentBase<S>
struct _ast1882; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1883; // FunctionTemplateDecl operator!=
struct _ast1884; // TemplateTypeParmDecl S
struct _ast1885; // CXXMethodDecl operator!=
struct _ast1886; // ParmVarDecl that
struct _ast1887; // LValueReferenceType const Local<S> &
struct _ast1888; // TemplateSpecializationType const Local<S>
struct _ast1889; // TemplateSpecializationType Local<S>
struct _ast1890; // FunctionProtoType bool (const Local<S> &) const
struct _ast1891; // FunctionTemplateDecl SetWeak
struct _ast1892; // TemplateTypeParmDecl P
struct _ast1893; // CXXMethodDecl SetWeak
struct _ast1894; // ParmVarDecl parameter
struct _ast1895; // PointerType P *
struct _ast1896; // TemplateTypeParmType P
struct _ast1897; // ParmVarDecl callback
struct _ast1898; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast1899; // ParmVarDecl type
struct _ast1900; // EnumType v8::WeakCallbackType
struct _ast1901; // BuiltinType int
struct _ast1902; // EnumDecl WeakCallbackType
struct _ast1903; // FunctionProtoType void (P *, typename
                 // WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast1904; // CXXMethodDecl SetWeak
struct _ast1905; // FunctionTemplateDecl ClearWeak
struct _ast1906; // TemplateTypeParmDecl P
struct _ast1907; // CXXMethodDecl ClearWeak
struct _ast1908; // FunctionProtoType P *()
struct _ast1909; // PointerType P *
struct _ast1910; // TemplateTypeParmType P
struct _ast1911; // CXXMethodDecl ClearWeak
struct _ast1912; // CXXMethodDecl AnnotateStrongRetainer
struct _ast1913; // ParmVarDecl label
struct _ast1914; // PointerType const char *
struct _ast1915; // BuiltinType const char
struct _ast1916; // BuiltinType char
struct _ast1917; // FunctionProtoType void (const char *)
struct _ast1918; // CXXMethodDecl IsWeak
struct _ast1919; // CXXMethodDecl SetWrapperClassId
struct _ast1920; // ParmVarDecl class_id
struct _ast1921; // TypedefType uint16_t
struct _ast1922; // FunctionProtoType void (uint16_t)
struct _ast1923; // CXXMethodDecl WrapperClassId
struct _ast1924; // FunctionProtoType uint16_t () const
struct _ast1925; // CXXConstructorDecl PersistentBase
struct _ast1926; // ParmVarDecl other
struct _ast1927; // LValueReferenceType const v8::PersistentBase<v8::Object> &
struct _ast1928; // FunctionProtoType void (const v8::PersistentBase<v8::Object>
                 // &)
struct _ast1929; // CXXMethodDecl operator=
struct _ast1930; // ParmVarDecl
struct _ast1931; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1932; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1933; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1934; // CXXMethodDecl Reset
struct _ast1935; // PointerType v8::PersistentBase<v8::Promise> *
struct _ast1936; // RecordType v8::PersistentBase<v8::Promise>
struct _ast1937; // FunctionTemplateDecl Reset
struct _ast1938; // TemplateTypeParmDecl S
struct _ast1939; // CXXMethodDecl Reset
struct _ast1940; // ParmVarDecl isolate
struct _ast1941; // ParmVarDecl other
struct _ast1942; // LValueReferenceType const Local<S> &
struct _ast1943; // TemplateSpecializationType const Local<S>
struct _ast1944; // TemplateSpecializationType Local<S>
struct _ast1945; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1946; // FunctionTemplateDecl Reset
struct _ast1947; // TemplateTypeParmDecl S
struct _ast1948; // CXXMethodDecl Reset
struct _ast1949; // ParmVarDecl isolate
struct _ast1950; // ParmVarDecl other
struct _ast1951; // LValueReferenceType const PersistentBase<S> &
struct _ast1952; // TemplateSpecializationType const PersistentBase<S>
struct _ast1953; // TemplateSpecializationType PersistentBase<S>
struct _ast1954; // FunctionProtoType void (v8::Isolate *, const
                 // PersistentBase<S> &)
struct _ast1955; // CXXMethodDecl IsEmpty
struct _ast1956; // PointerType const v8::PersistentBase<v8::Promise> *
struct _ast1957; // RecordType const v8::PersistentBase<v8::Promise>
struct _ast1958; // CXXMethodDecl Empty
struct _ast1959; // CXXMethodDecl Get
struct _ast1960; // ParmVarDecl isolate
struct _ast1961; // FunctionProtoType Local<v8::Promise> (v8::Isolate *) const
struct _ast1962; // TemplateSpecializationType Local<v8::Promise>
struct _ast1963; // FunctionTemplateDecl operator==
struct _ast1964; // TemplateTypeParmDecl S
struct _ast1965; // CXXMethodDecl operator==
struct _ast1966; // ParmVarDecl that
struct _ast1967; // LValueReferenceType const PersistentBase<S> &
struct _ast1968; // TemplateSpecializationType const PersistentBase<S>
struct _ast1969; // TemplateSpecializationType PersistentBase<S>
struct _ast1970; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1971; // FunctionTemplateDecl operator==
struct _ast1972; // TemplateTypeParmDecl S
struct _ast1973; // CXXMethodDecl operator==
struct _ast1974; // ParmVarDecl that
struct _ast1975; // LValueReferenceType const Local<S> &
struct _ast1976; // TemplateSpecializationType const Local<S>
struct _ast1977; // TemplateSpecializationType Local<S>
struct _ast1978; // FunctionProtoType bool (const Local<S> &) const
struct _ast1979; // FunctionTemplateDecl operator!=
struct _ast1980; // TemplateTypeParmDecl S
struct _ast1981; // CXXMethodDecl operator!=
struct _ast1982; // ParmVarDecl that
struct _ast1983; // LValueReferenceType const PersistentBase<S> &
struct _ast1984; // TemplateSpecializationType const PersistentBase<S>
struct _ast1985; // TemplateSpecializationType PersistentBase<S>
struct _ast1986; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1987; // FunctionTemplateDecl operator!=
struct _ast1988; // TemplateTypeParmDecl S
struct _ast1989; // CXXMethodDecl operator!=
struct _ast1990; // ParmVarDecl that
struct _ast1991; // LValueReferenceType const Local<S> &
struct _ast1992; // TemplateSpecializationType const Local<S>
struct _ast1993; // TemplateSpecializationType Local<S>
struct _ast1994; // FunctionProtoType bool (const Local<S> &) const
struct _ast1995; // FunctionTemplateDecl SetWeak
struct _ast1996; // TemplateTypeParmDecl P
struct _ast1997; // CXXMethodDecl SetWeak
struct _ast1998; // ParmVarDecl parameter
struct _ast1999; // PointerType P *
struct _ast2000; // TemplateTypeParmType P
struct _ast2001; // ParmVarDecl callback
struct _ast2002; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast2003; // ParmVarDecl type
struct _ast2004; // FunctionProtoType void (P *, typename
                 // WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2005; // CXXMethodDecl SetWeak
struct _ast2006; // FunctionTemplateDecl ClearWeak
struct _ast2007; // TemplateTypeParmDecl P
struct _ast2008; // CXXMethodDecl ClearWeak
struct _ast2009; // FunctionProtoType P *()
struct _ast2010; // PointerType P *
struct _ast2011; // TemplateTypeParmType P
struct _ast2012; // CXXMethodDecl ClearWeak
struct _ast2013; // CXXMethodDecl AnnotateStrongRetainer
struct _ast2014; // ParmVarDecl label
struct _ast2015; // CXXMethodDecl IsWeak
struct _ast2016; // CXXMethodDecl SetWrapperClassId
struct _ast2017; // ParmVarDecl class_id
struct _ast2018; // CXXMethodDecl WrapperClassId
struct _ast2019; // CXXConstructorDecl PersistentBase
struct _ast2020; // ParmVarDecl other
struct _ast2021; // LValueReferenceType const v8::PersistentBase<v8::Promise> &
struct _ast2022; // FunctionProtoType void (const
                 // v8::PersistentBase<v8::Promise> &)
struct _ast2023; // CXXMethodDecl operator=
struct _ast2024; // ParmVarDecl
struct _ast2025; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2026; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2027; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2028; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2029; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2030; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2031; // ClassTemplateSpecializationDecl PersistentBase
struct _ast2032; // ClassTemplateDecl Persistent
struct _ast2033; // TemplateTypeParmDecl T
struct _ast2034; // TemplateTypeParmDecl M
struct _ast2035; // CXXRecordDecl Persistent
struct _ast2036; // InjectedClassNameType Persistent<T, M>
struct _ast2037; // ClassTemplateSpecializationDecl Persistent
struct _ast2038; // CXXConstructorDecl Persistent
struct _ast2039; // PointerType v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2040; // RecordType v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2041; // FunctionTemplateDecl Persistent
struct _ast2042; // TemplateTypeParmDecl S
struct _ast2043; // CXXConstructorDecl Persistent
struct _ast2044; // ParmVarDecl isolate
struct _ast2045; // ParmVarDecl that
struct _ast2046; // TemplateSpecializationType Local<S>
struct _ast2047; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2048; // FunctionTemplateDecl Persistent
struct _ast2049; // TemplateTypeParmDecl S
struct _ast2050; // TemplateTypeParmDecl M2
struct _ast2051; // CXXConstructorDecl Persistent
struct _ast2052; // ParmVarDecl isolate
struct _ast2053; // ParmVarDecl that
struct _ast2054; // LValueReferenceType const Persistent<S, M2> &
struct _ast2055; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2056; // TemplateSpecializationType Persistent<S, M2>
struct _ast2057; // FunctionProtoType void (v8::Isolate *, const Persistent<S,
                 // M2> &)
struct _ast2058; // CXXConstructorDecl Persistent
struct _ast2059; // ParmVarDecl that
struct _ast2060; // LValueReferenceType const v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2061; // RecordType const v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2062; // FunctionProtoType void (const v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2063; // FunctionTemplateDecl Persistent
struct _ast2064; // TemplateTypeParmDecl S
struct _ast2065; // TemplateTypeParmDecl M2
struct _ast2066; // CXXConstructorDecl Persistent
struct _ast2067; // ParmVarDecl that
struct _ast2068; // LValueReferenceType const Persistent<S, M2> &
struct _ast2069; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2070; // TemplateSpecializationType Persistent<S, M2>
struct _ast2071; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2072; // CXXConstructorDecl Persistent
struct _ast2073; // ParmVarDecl that
struct _ast2074; // LValueReferenceType const Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2075; // TemplateSpecializationType const Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2076; // TemplateSpecializationType Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2077; // FunctionProtoType void (const Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2078; // CXXMethodDecl operator=
struct _ast2079; // ParmVarDecl that
struct _ast2080; // FunctionProtoType v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &(const
                 // v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2081; // LValueReferenceType v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2082; // FunctionTemplateDecl operator=
struct _ast2083; // TemplateTypeParmDecl S
struct _ast2084; // TemplateTypeParmDecl M2
struct _ast2085; // CXXMethodDecl operator=
struct _ast2086; // ParmVarDecl that
struct _ast2087; // LValueReferenceType const Persistent<S, M2> &
struct _ast2088; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2089; // TemplateSpecializationType Persistent<S, M2>
struct _ast2090; // FunctionProtoType v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &(const
                 // Persistent<S, M2> &)
struct _ast2091; // CXXMethodDecl operator=
struct _ast2092; // ParmVarDecl that
struct _ast2093; // LValueReferenceType const Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2094; // TemplateSpecializationType const Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2095; // TemplateSpecializationType Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2096; // FunctionProtoType v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &(const
                 // Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2097; // CXXDestructorDecl ~Persistent
struct _ast2098; // FunctionProtoType void ()
struct _ast2099; // FunctionTemplateDecl Cast
struct _ast2100; // TemplateTypeParmDecl S
struct _ast2101; // CXXMethodDecl Cast
struct _ast2102; // ParmVarDecl that
struct _ast2103; // LValueReferenceType const Persistent<S> &
struct _ast2104; // TemplateSpecializationType const Persistent<S>
struct _ast2105; // TemplateSpecializationType Persistent<S>
struct _ast2106; // FunctionProtoType Persistent<v8::Promise> &(const
                 // Persistent<S> &)
struct _ast2107; // LValueReferenceType Persistent<v8::Promise> &
struct _ast2108; // TemplateSpecializationType Persistent<v8::Promise>
struct _ast2109; // FunctionTemplateDecl As
struct _ast2110; // TemplateTypeParmDecl S
struct _ast2111; // CXXMethodDecl As
struct _ast2112; // FunctionProtoType Persistent<S> &() const
struct _ast2113; // LValueReferenceType Persistent<S> &
struct _ast2114; // TemplateSpecializationType Persistent<S>
struct _ast2115; // PointerType const v8::Persistent<v8::Promise,
                 // v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2116; // ClassTemplateSpecializationDecl Persistent
struct _ast2117; // ClassTemplateSpecializationDecl Persistent
struct _ast2118; // ClassTemplateDecl Global
struct _ast2119; // TemplateTypeParmDecl T
struct _ast2120; // CXXRecordDecl Global
struct _ast2121; // InjectedClassNameType Global<T>
struct _ast2122; // ClassTemplateDecl TracedGlobal
struct _ast2123; // TemplateTypeParmDecl T
struct _ast2124; // CXXRecordDecl TracedGlobal
struct _ast2125; // InjectedClassNameType TracedGlobal<T>
struct _ast2126; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2127; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2128; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2129; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2130; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2131; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2132; // CXXConstructorDecl TracedGlobal
struct _ast2133; // FunctionProtoType void ()
struct _ast2134; // PointerType v8::TracedGlobal<v8::Object> *
struct _ast2135; // RecordType v8::TracedGlobal<v8::Object>
struct _ast2136; // CXXDestructorDecl ~TracedGlobal
struct _ast2137; // FunctionProtoType void ()
struct _ast2138; // FunctionTemplateDecl TracedGlobal
struct _ast2139; // TemplateTypeParmDecl S
struct _ast2140; // CXXConstructorDecl TracedGlobal
struct _ast2141; // ParmVarDecl isolate
struct _ast2142; // ParmVarDecl that
struct _ast2143; // TemplateSpecializationType Local<S>
struct _ast2144; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2145; // CXXConstructorDecl TracedGlobal
struct _ast2146; // ParmVarDecl other
struct _ast2147; // RValueReferenceType v8::TracedGlobal<v8::Object> &&
struct _ast2148; // FunctionProtoType void (v8::TracedGlobal<v8::Object> &&)
struct _ast2149; // FunctionTemplateDecl operator=
struct _ast2150; // TemplateTypeParmDecl S
struct _ast2151; // CXXMethodDecl operator=
struct _ast2152; // ParmVarDecl rhs
struct _ast2153; // RValueReferenceType TracedGlobal<S> &&
struct _ast2154; // TemplateSpecializationType TracedGlobal<S>
struct _ast2155; // FunctionProtoType v8::TracedGlobal<v8::Object>
                 // &(TracedGlobal<S> &&)
struct _ast2156; // LValueReferenceType v8::TracedGlobal<v8::Object> &
struct _ast2157; // CXXConstructorDecl TracedGlobal
struct _ast2158; // ParmVarDecl
struct _ast2159; // LValueReferenceType const v8::TracedGlobal<v8::Object> &
struct _ast2160; // RecordType const v8::TracedGlobal<v8::Object>
struct _ast2161; // FunctionProtoType void (const v8::TracedGlobal<v8::Object>
                 // &)
struct _ast2162; // CXXMethodDecl operator=
struct _ast2163; // ParmVarDecl
struct _ast2164; // CXXMethodDecl IsEmpty
struct _ast2165; // PointerType const v8::TracedGlobal<v8::Object> *
struct _ast2166; // CXXMethodDecl Reset
struct _ast2167; // FunctionTemplateDecl Reset
struct _ast2168; // TemplateTypeParmDecl S
struct _ast2169; // CXXMethodDecl Reset
struct _ast2170; // ParmVarDecl isolate
struct _ast2171; // ParmVarDecl other
struct _ast2172; // LValueReferenceType const Local<S> &
struct _ast2173; // TemplateSpecializationType const Local<S>
struct _ast2174; // TemplateSpecializationType Local<S>
struct _ast2175; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2176; // CXXMethodDecl Get
struct _ast2177; // ParmVarDecl isolate
struct _ast2178; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast2179; // TemplateSpecializationType Local<v8::Object>
struct _ast2180; // FunctionTemplateDecl As
struct _ast2181; // TemplateTypeParmDecl S
struct _ast2182; // CXXMethodDecl As
struct _ast2183; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2184; // LValueReferenceType TracedGlobal<S> &
struct _ast2185; // TemplateSpecializationType TracedGlobal<S>
struct _ast2186; // FunctionTemplateDecl operator==
struct _ast2187; // TemplateTypeParmDecl S
struct _ast2188; // CXXMethodDecl operator==
struct _ast2189; // ParmVarDecl that
struct _ast2190; // LValueReferenceType const TracedGlobal<S> &
struct _ast2191; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2192; // TemplateSpecializationType TracedGlobal<S>
struct _ast2193; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2194; // FunctionTemplateDecl operator==
struct _ast2195; // TemplateTypeParmDecl S
struct _ast2196; // CXXMethodDecl operator==
struct _ast2197; // ParmVarDecl that
struct _ast2198; // LValueReferenceType const Local<S> &
struct _ast2199; // TemplateSpecializationType const Local<S>
struct _ast2200; // TemplateSpecializationType Local<S>
struct _ast2201; // FunctionProtoType bool (const Local<S> &) const
struct _ast2202; // FunctionTemplateDecl operator!=
struct _ast2203; // TemplateTypeParmDecl S
struct _ast2204; // CXXMethodDecl operator!=
struct _ast2205; // ParmVarDecl that
struct _ast2206; // LValueReferenceType const TracedGlobal<S> &
struct _ast2207; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2208; // TemplateSpecializationType TracedGlobal<S>
struct _ast2209; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2210; // FunctionTemplateDecl operator!=
struct _ast2211; // TemplateTypeParmDecl S
struct _ast2212; // CXXMethodDecl operator!=
struct _ast2213; // ParmVarDecl that
struct _ast2214; // LValueReferenceType const Local<S> &
struct _ast2215; // TemplateSpecializationType const Local<S>
struct _ast2216; // TemplateSpecializationType Local<S>
struct _ast2217; // FunctionProtoType bool (const Local<S> &) const
struct _ast2218; // CXXMethodDecl SetWrapperClassId
struct _ast2219; // ParmVarDecl class_id
struct _ast2220; // CXXMethodDecl WrapperClassId
struct _ast2221; // CXXMethodDecl SetFinalizationCallback
struct _ast2222; // ParmVarDecl parameter
struct _ast2223; // PointerType void *
struct _ast2224; // ParmVarDecl callback
struct _ast2225; // ElaboratedType WeakCallbackInfo<void>::Callback
struct _ast2226; // FunctionProtoType void (void *,
                 // WeakCallbackInfo<void>::Callback)
struct _ast2227; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2228; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2229; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2230; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2231; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2232; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2233; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2234; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2235; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2236; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2237; // ClassTemplateDecl PersistentValueMap
struct _ast2238; // TemplateTypeParmDecl K
struct _ast2239; // TemplateTypeParmDecl V
struct _ast2240; // TemplateTypeParmDecl T
struct _ast2241; // CXXRecordDecl PersistentValueMap
struct _ast2242; // InjectedClassNameType PersistentValueMap<K, V, T>
struct _ast2243; // ClassTemplateDecl PersistentValueMapBase
struct _ast2244; // TemplateTypeParmDecl K
struct _ast2245; // TemplateTypeParmDecl V
struct _ast2246; // TemplateTypeParmDecl T
struct _ast2247; // CXXRecordDecl PersistentValueMapBase
struct _ast2248; // InjectedClassNameType PersistentValueMapBase<K, V, T>
struct _ast2249; // ClassTemplateDecl GlobalValueMap
struct _ast2250; // TemplateTypeParmDecl K
struct _ast2251; // TemplateTypeParmDecl V
struct _ast2252; // TemplateTypeParmDecl T
struct _ast2253; // CXXRecordDecl GlobalValueMap
struct _ast2254; // InjectedClassNameType GlobalValueMap<K, V, T>
struct _ast2255; // ClassTemplateDecl PersistentValueVector
struct _ast2256; // TemplateTypeParmDecl V
struct _ast2257; // TemplateTypeParmDecl T
struct _ast2258; // CXXRecordDecl PersistentValueVector
struct _ast2259; // InjectedClassNameType PersistentValueVector<V, T>
struct _ast2260; // ClassTemplateDecl WeakCallbackObject
struct _ast2261; // TemplateTypeParmDecl T
struct _ast2262; // TemplateTypeParmDecl P
struct _ast2263; // CXXRecordDecl WeakCallbackObject
struct _ast2264; // InjectedClassNameType WeakCallbackObject<T, P>
struct _ast2265; // ClassTemplateDecl FunctionCallbackInfo
struct _ast2266; // TemplateTypeParmDecl T
struct _ast2267; // CXXRecordDecl FunctionCallbackInfo
struct _ast2268; // InjectedClassNameType FunctionCallbackInfo<T>
struct _ast2269; // ClassTemplateSpecializationDecl FunctionCallbackInfo
struct _ast2270; // ClassTemplateDecl PropertyCallbackInfo
struct _ast2271; // TemplateTypeParmDecl T
struct _ast2272; // CXXRecordDecl PropertyCallbackInfo
struct _ast2273; // InjectedClassNameType PropertyCallbackInfo<T>
struct _ast2274; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2275; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2276; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2277; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2278; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2279; // CXXRecordDecl CallHandlerHelper
struct _ast2280; // RecordType v8::CallHandlerHelper
struct _ast2281; // CXXRecordDecl EscapableHandleScope
struct _ast2282; // RecordType v8::EscapableHandleScope
struct _ast2283; // ClassTemplateDecl ReturnValue
struct _ast2284; // TemplateTypeParmDecl T
struct _ast2285; // CXXRecordDecl ReturnValue
struct _ast2286; // InjectedClassNameType ReturnValue<T>
struct _ast2287; // NamespaceDecl debug
struct _ast2288; // CXXRecordDecl ConsoleCallArguments
struct _ast2289; // RecordType v8::debug::ConsoleCallArguments
struct _ast2290; // TemplateTypeParmDecl T
struct _ast2291; // CXXRecordDecl Local
struct _ast2292; // CXXConstructorDecl Local<T>
struct _ast2293; // PointerType Local<T> *
struct _ast2294; // FunctionTemplateDecl Local<T>
struct _ast2295; // TemplateTypeParmDecl S
struct _ast2296; // CXXConstructorDecl Local<T>
struct _ast2297; // ParmVarDecl that
struct _ast2298; // TemplateSpecializationType Local<S>
struct _ast2299; // FunctionProtoType void (Local<S>)
struct _ast2300; // CXXMethodDecl IsEmpty
struct _ast2301; // PointerType const Local<T> *
struct _ast2302; // InjectedClassNameType const Local<T>
struct _ast2303; // CXXMethodDecl Clear
struct _ast2304; // CXXMethodDecl operator->
struct _ast2305; // FunctionProtoType T *() const
struct _ast2306; // PointerType T *
struct _ast2307; // TemplateTypeParmType T
struct _ast2308; // CXXMethodDecl operator*
struct _ast2309; // FunctionTemplateDecl operator==
struct _ast2310; // TemplateTypeParmDecl S
struct _ast2311; // CXXMethodDecl operator==
struct _ast2312; // ParmVarDecl that
struct _ast2313; // LValueReferenceType const Local<S> &
struct _ast2314; // TemplateSpecializationType const Local<S>
struct _ast2315; // TemplateSpecializationType Local<S>
struct _ast2316; // FunctionProtoType bool (const Local<S> &) const
struct _ast2317; // FunctionTemplateDecl operator==
struct _ast2318; // TemplateTypeParmDecl S
struct _ast2319; // CXXMethodDecl operator==
struct _ast2320; // ParmVarDecl that
struct _ast2321; // LValueReferenceType const PersistentBase<S> &
struct _ast2322; // TemplateSpecializationType const PersistentBase<S>
struct _ast2323; // TemplateSpecializationType PersistentBase<S>
struct _ast2324; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2325; // FunctionTemplateDecl operator!=
struct _ast2326; // TemplateTypeParmDecl S
struct _ast2327; // CXXMethodDecl operator!=
struct _ast2328; // ParmVarDecl that
struct _ast2329; // LValueReferenceType const Local<S> &
struct _ast2330; // TemplateSpecializationType const Local<S>
struct _ast2331; // TemplateSpecializationType Local<S>
struct _ast2332; // FunctionProtoType bool (const Local<S> &) const
struct _ast2333; // FunctionTemplateDecl operator!=
struct _ast2334; // TemplateTypeParmDecl S
struct _ast2335; // CXXMethodDecl operator!=
struct _ast2336; // ParmVarDecl that
struct _ast2337; // LValueReferenceType const Persistent<S> &
struct _ast2338; // TemplateSpecializationType const Persistent<S>
struct _ast2339; // TemplateSpecializationType Persistent<S>
struct _ast2340; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast2341; // FunctionTemplateDecl Cast
struct _ast2342; // TemplateTypeParmDecl S
struct _ast2343; // CXXMethodDecl Cast
struct _ast2344; // ParmVarDecl that
struct _ast2345; // TemplateSpecializationType Local<S>
struct _ast2346; // FunctionProtoType Local<T> (Local<S>)
struct _ast2347; // TemplateSpecializationType Local<T>
struct _ast2348; // FunctionTemplateDecl As
struct _ast2349; // TemplateTypeParmDecl S
struct _ast2350; // CXXMethodDecl As
struct _ast2351; // FunctionProtoType Local<S> () const
struct _ast2352; // TemplateSpecializationType Local<S>
struct _ast2353; // CXXMethodDecl New
struct _ast2354; // ParmVarDecl isolate
struct _ast2355; // ParmVarDecl that
struct _ast2356; // TemplateSpecializationType Local<T>
struct _ast2357; // FunctionProtoType Local<T> (v8::Isolate *, Local<T>)
struct _ast2358; // TemplateSpecializationType Local<T>
struct _ast2359; // CXXMethodDecl New
struct _ast2360; // ParmVarDecl isolate
struct _ast2361; // ParmVarDecl that
struct _ast2362; // LValueReferenceType const PersistentBase<T> &
struct _ast2363; // TemplateSpecializationType const PersistentBase<T>
struct _ast2364; // TemplateSpecializationType PersistentBase<T>
struct _ast2365; // FunctionProtoType Local<T> (v8::Isolate *, const
                 // PersistentBase<T> &)
struct _ast2366; // TemplateSpecializationType Local<T>
struct _ast2367; // CXXMethodDecl New
struct _ast2368; // ParmVarDecl isolate
struct _ast2369; // ParmVarDecl that
struct _ast2370; // LValueReferenceType const TracedGlobal<T> &
struct _ast2371; // TemplateSpecializationType const TracedGlobal<T>
struct _ast2372; // TemplateSpecializationType TracedGlobal<T>
struct _ast2373; // FunctionProtoType Local<T> (v8::Isolate *, const
                 // TracedGlobal<T> &)
struct _ast2374; // TemplateSpecializationType Local<T>
struct _ast2375; // TypeAliasTemplateDecl Handle
struct _ast2376; // TypeAliasDecl Handle
struct _ast2377; // TypedefType v8::Handle
struct _ast2378; // TemplateTypeParmDecl T
struct _ast2379; // TemplateTypeParmDecl T
struct _ast2380; // CXXRecordDecl MaybeLocal
struct _ast2381; // CXXConstructorDecl MaybeLocal<T>
struct _ast2382; // PointerType MaybeLocal<T> *
struct _ast2383; // FunctionTemplateDecl MaybeLocal<T>
struct _ast2384; // TemplateTypeParmDecl S
struct _ast2385; // CXXConstructorDecl MaybeLocal<T>
struct _ast2386; // ParmVarDecl that
struct _ast2387; // TemplateSpecializationType Local<S>
struct _ast2388; // FunctionProtoType void (Local<S>)
struct _ast2389; // CXXMethodDecl IsEmpty
struct _ast2390; // PointerType const MaybeLocal<T> *
struct _ast2391; // InjectedClassNameType const MaybeLocal<T>
struct _ast2392; // FunctionTemplateDecl ToLocal
struct _ast2393; // TemplateTypeParmDecl S
struct _ast2394; // CXXMethodDecl ToLocal
struct _ast2395; // ParmVarDecl out
struct _ast2396; // PointerType Local<S> *
struct _ast2397; // TemplateSpecializationType Local<S>
struct _ast2398; // FunctionProtoType bool (Local<S> *) const
struct _ast2399; // CXXMethodDecl ToLocalChecked
struct _ast2400; // FunctionProtoType Local<T> ()
struct _ast2401; // TemplateSpecializationType Local<T>
struct _ast2402; // FunctionTemplateDecl FromMaybe
struct _ast2403; // TemplateTypeParmDecl S
struct _ast2404; // CXXMethodDecl FromMaybe
struct _ast2405; // ParmVarDecl default_value
struct _ast2406; // TemplateSpecializationType Local<S>
struct _ast2407; // FunctionProtoType Local<S> (Local<S>) const
struct _ast2408; // TemplateSpecializationType Local<S>
struct _ast2409; // TemplateTypeParmDecl T
struct _ast2410; // CXXRecordDecl Eternal
struct _ast2411; // CXXConstructorDecl Eternal<T>
struct _ast2412; // PointerType Eternal<T> *
struct _ast2413; // FunctionTemplateDecl Eternal<T>
struct _ast2414; // TemplateTypeParmDecl S
struct _ast2415; // CXXConstructorDecl Eternal<T>
struct _ast2416; // ParmVarDecl isolate
struct _ast2417; // ParmVarDecl handle
struct _ast2418; // TemplateSpecializationType Local<S>
struct _ast2419; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2420; // CXXMethodDecl Get
struct _ast2421; // ParmVarDecl isolate
struct _ast2422; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2423; // TemplateSpecializationType Local<T>
struct _ast2424; // PointerType const Eternal<T> *
struct _ast2425; // InjectedClassNameType const Eternal<T>
struct _ast2426; // CXXMethodDecl IsEmpty
struct _ast2427; // FunctionTemplateDecl Set
struct _ast2428; // TemplateTypeParmDecl S
struct _ast2429; // CXXMethodDecl Set
struct _ast2430; // ParmVarDecl isolate
struct _ast2431; // ParmVarDecl handle
struct _ast2432; // TemplateSpecializationType Local<S>
struct _ast2433; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2434; // VarDecl kInternalFieldsInWeakCallback
struct _ast2435; // BuiltinType const int
struct _ast2436; // VarDecl kEmbedderFieldsInWeakCallback
struct _ast2437; // ClassTemplateDecl WeakCallbackInfo
struct _ast2438; // TemplateTypeParmDecl T
struct _ast2439; // CXXRecordDecl WeakCallbackInfo
struct _ast2440; // InjectedClassNameType WeakCallbackInfo<T>
struct _ast2441; // FieldDecl isolate_
struct _ast2442; // FieldDecl parameter_
struct _ast2443; // PointerType T *
struct _ast2444; // TemplateTypeParmType T
struct _ast2445; // FieldDecl callback_
struct _ast2446; // PointerType v8::WeakCallbackInfo::Callback *
struct _ast2447; // TypedefType v8::WeakCallbackInfo::Callback
struct _ast2448; // TypedefDecl Callback
struct _ast2449; // FieldDecl embedder_fields_
struct _ast2450; // ConstantArrayType void *[2]
struct _ast2451; // CXXRecordDecl WeakCallbackInfo
struct _ast2452; // CXXConstructorDecl WeakCallbackInfo<T>
struct _ast2453; // ParmVarDecl isolate
struct _ast2454; // ParmVarDecl parameter
struct _ast2455; // ParmVarDecl embedder_fields
struct _ast2456; // DecayedType void **
struct _ast2457; // ParmVarDecl callback
struct _ast2458; // FunctionProtoType void (v8::Isolate *, T *, void **,
                 // v8::WeakCallbackInfo::Callback *)
struct _ast2459; // PointerType WeakCallbackInfo<T> *
struct _ast2460; // CXXMethodDecl GetIsolate
struct _ast2461; // FunctionProtoType v8::Isolate *() const
struct _ast2462; // PointerType const WeakCallbackInfo<T> *
struct _ast2463; // InjectedClassNameType const WeakCallbackInfo<T>
struct _ast2464; // CXXMethodDecl GetParameter
struct _ast2465; // FunctionProtoType T *() const
struct _ast2466; // CXXMethodDecl GetInternalField
struct _ast2467; // ParmVarDecl index
struct _ast2468; // FunctionProtoType void *(int) const
struct _ast2469; // CXXMethodDecl SetSecondPassCallback
struct _ast2470; // ParmVarDecl callback
struct _ast2471; // FunctionProtoType void (v8::WeakCallbackInfo::Callback)
                 // const
struct _ast2472; // ClassTemplateSpecializationDecl WeakCallbackInfo
struct _ast2473; // TypedefDecl Callback
struct _ast2474; // TypedefType v8::WeakCallbackInfo<void>::Callback
struct _ast2475; // ParmVarDecl data
struct _ast2476; // LValueReferenceType const WeakCallbackInfo<void> &
struct _ast2477; // TemplateSpecializationType const WeakCallbackInfo<void>
struct _ast2478; // TemplateSpecializationType WeakCallbackInfo<void>
struct _ast2479; // CXXConstructorDecl WeakCallbackInfo
struct _ast2480; // ParmVarDecl isolate
struct _ast2481; // ParmVarDecl parameter
struct _ast2482; // PointerType void *
struct _ast2483; // SubstTemplateTypeParmType void
struct _ast2484; // ParmVarDecl embedder_fields
struct _ast2485; // ParmVarDecl callback
struct _ast2486; // PointerType v8::WeakCallbackInfo<void>::Callback *
struct _ast2487; // FunctionProtoType void (v8::Isolate *, void *, void **,
                 // v8::WeakCallbackInfo<void>::Callback *)
struct _ast2488; // PointerType v8::WeakCallbackInfo<void> *
struct _ast2489; // RecordType v8::WeakCallbackInfo<void>
struct _ast2490; // CXXMethodDecl GetIsolate
struct _ast2491; // PointerType const v8::WeakCallbackInfo<void> *
struct _ast2492; // RecordType const v8::WeakCallbackInfo<void>
struct _ast2493; // CXXMethodDecl GetParameter
struct _ast2494; // FunctionProtoType void *() const
struct _ast2495; // CXXMethodDecl GetInternalField
struct _ast2496; // ParmVarDecl index
struct _ast2497; // CXXMethodDecl SetSecondPassCallback
struct _ast2498; // ParmVarDecl callback
struct _ast2499; // FunctionProtoType void
                 // (v8::WeakCallbackInfo<void>::Callback) const
struct _ast2500; // EnumConstantDecl kParameter
struct _ast2501; // EnumConstantDecl kInternalFields
struct _ast2502; // EnumConstantDecl kFinalizer
struct _ast2503; // TemplateTypeParmDecl T
struct _ast2504; // CXXRecordDecl PersistentBase
struct _ast2505; // CXXMethodDecl Reset
struct _ast2506; // PointerType PersistentBase<T> *
struct _ast2507; // FunctionTemplateDecl Reset
struct _ast2508; // TemplateTypeParmDecl S
struct _ast2509; // CXXMethodDecl Reset
struct _ast2510; // ParmVarDecl isolate
struct _ast2511; // ParmVarDecl other
struct _ast2512; // LValueReferenceType const Local<S> &
struct _ast2513; // TemplateSpecializationType const Local<S>
struct _ast2514; // TemplateSpecializationType Local<S>
struct _ast2515; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2516; // FunctionTemplateDecl Reset
struct _ast2517; // TemplateTypeParmDecl S
struct _ast2518; // CXXMethodDecl Reset
struct _ast2519; // ParmVarDecl isolate
struct _ast2520; // ParmVarDecl other
struct _ast2521; // LValueReferenceType const PersistentBase<S> &
struct _ast2522; // TemplateSpecializationType const PersistentBase<S>
struct _ast2523; // TemplateSpecializationType PersistentBase<S>
struct _ast2524; // FunctionProtoType void (v8::Isolate *, const
                 // PersistentBase<S> &)
struct _ast2525; // CXXMethodDecl IsEmpty
struct _ast2526; // PointerType const PersistentBase<T> *
struct _ast2527; // InjectedClassNameType const PersistentBase<T>
struct _ast2528; // CXXMethodDecl Empty
struct _ast2529; // CXXMethodDecl Get
struct _ast2530; // ParmVarDecl isolate
struct _ast2531; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2532; // TemplateSpecializationType Local<T>
struct _ast2533; // FunctionTemplateDecl operator==
struct _ast2534; // TemplateTypeParmDecl S
struct _ast2535; // CXXMethodDecl operator==
struct _ast2536; // ParmVarDecl that
struct _ast2537; // LValueReferenceType const PersistentBase<S> &
struct _ast2538; // TemplateSpecializationType const PersistentBase<S>
struct _ast2539; // TemplateSpecializationType PersistentBase<S>
struct _ast2540; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2541; // FunctionTemplateDecl operator==
struct _ast2542; // TemplateTypeParmDecl S
struct _ast2543; // CXXMethodDecl operator==
struct _ast2544; // ParmVarDecl that
struct _ast2545; // LValueReferenceType const Local<S> &
struct _ast2546; // TemplateSpecializationType const Local<S>
struct _ast2547; // TemplateSpecializationType Local<S>
struct _ast2548; // FunctionProtoType bool (const Local<S> &) const
struct _ast2549; // FunctionTemplateDecl operator!=
struct _ast2550; // TemplateTypeParmDecl S
struct _ast2551; // CXXMethodDecl operator!=
struct _ast2552; // ParmVarDecl that
struct _ast2553; // LValueReferenceType const PersistentBase<S> &
struct _ast2554; // TemplateSpecializationType const PersistentBase<S>
struct _ast2555; // TemplateSpecializationType PersistentBase<S>
struct _ast2556; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2557; // FunctionTemplateDecl operator!=
struct _ast2558; // TemplateTypeParmDecl S
struct _ast2559; // CXXMethodDecl operator!=
struct _ast2560; // ParmVarDecl that
struct _ast2561; // LValueReferenceType const Local<S> &
struct _ast2562; // TemplateSpecializationType const Local<S>
struct _ast2563; // TemplateSpecializationType Local<S>
struct _ast2564; // FunctionProtoType bool (const Local<S> &) const
struct _ast2565; // FunctionTemplateDecl SetWeak
struct _ast2566; // TemplateTypeParmDecl P
struct _ast2567; // CXXMethodDecl SetWeak
struct _ast2568; // ParmVarDecl parameter
struct _ast2569; // PointerType P *
struct _ast2570; // TemplateTypeParmType P
struct _ast2571; // ParmVarDecl callback
struct _ast2572; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast2573; // ParmVarDecl type
struct _ast2574; // FunctionProtoType void (P *, typename
                 // WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2575; // CXXMethodDecl SetWeak
struct _ast2576; // FunctionTemplateDecl ClearWeak
struct _ast2577; // TemplateTypeParmDecl P
struct _ast2578; // CXXMethodDecl ClearWeak
struct _ast2579; // FunctionProtoType P *()
struct _ast2580; // PointerType P *
struct _ast2581; // TemplateTypeParmType P
struct _ast2582; // CXXMethodDecl ClearWeak
struct _ast2583; // CXXMethodDecl AnnotateStrongRetainer
struct _ast2584; // ParmVarDecl label
struct _ast2585; // CXXMethodDecl IsWeak
struct _ast2586; // CXXMethodDecl SetWrapperClassId
struct _ast2587; // ParmVarDecl class_id
struct _ast2588; // CXXMethodDecl WrapperClassId
struct _ast2589; // CXXConstructorDecl PersistentBase<T>
struct _ast2590; // ParmVarDecl other
struct _ast2591; // LValueReferenceType const PersistentBase<T> &
struct _ast2592; // FunctionProtoType void (const PersistentBase<T> &)
struct _ast2593; // CXXMethodDecl operator=
struct _ast2594; // ParmVarDecl
struct _ast2595; // TemplateTypeParmDecl T
struct _ast2596; // CXXRecordDecl NonCopyablePersistentTraits
struct _ast2597; // TypedefDecl NonCopyablePersistent
struct _ast2598; // TypedefType
                 // v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ast2599; // VarDecl kResetInDestructor
struct _ast2600; // BuiltinType const bool
struct _ast2601; // FunctionTemplateDecl Copy
struct _ast2602; // TemplateTypeParmDecl S
struct _ast2603; // TemplateTypeParmDecl M
struct _ast2604; // CXXMethodDecl Copy
struct _ast2605; // ParmVarDecl source
struct _ast2606; // LValueReferenceType const Persistent<S, M> &
struct _ast2607; // TemplateSpecializationType const Persistent<S, M>
struct _ast2608; // TemplateSpecializationType Persistent<S, M>
struct _ast2609; // ParmVarDecl dest
struct _ast2610; // PointerType
                 // v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ast2611; // FunctionProtoType void (const Persistent<S, M> &,
                 // v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ast2612; // FunctionTemplateDecl Uncompilable
struct _ast2613; // TemplateTypeParmDecl O
struct _ast2614; // CXXMethodDecl Uncompilable
struct _ast2615; // ClassTemplateDecl CopyablePersistentTraits
struct _ast2616; // TemplateTypeParmDecl T
struct _ast2617; // CXXRecordDecl CopyablePersistentTraits
struct _ast2618; // InjectedClassNameType CopyablePersistentTraits<T>
struct _ast2619; // CXXRecordDecl CopyablePersistentTraits
struct _ast2620; // TypedefDecl CopyablePersistent
struct _ast2621; // TypedefType v8::CopyablePersistentTraits::CopyablePersistent
struct _ast2622; // VarDecl kResetInDestructor
struct _ast2623; // FunctionTemplateDecl Copy
struct _ast2624; // TemplateTypeParmDecl S
struct _ast2625; // TemplateTypeParmDecl M
struct _ast2626; // CXXMethodDecl Copy
struct _ast2627; // ParmVarDecl source
struct _ast2628; // LValueReferenceType const Persistent<S, M> &
struct _ast2629; // TemplateSpecializationType const Persistent<S, M>
struct _ast2630; // TemplateSpecializationType Persistent<S, M>
struct _ast2631; // ParmVarDecl dest
struct _ast2632; // PointerType v8::CopyablePersistentTraits::CopyablePersistent
                 // *
struct _ast2633; // FunctionProtoType void (const Persistent<S, M> &,
                 // v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ast2634; // ClassTemplateSpecializationDecl CopyablePersistentTraits
struct _ast2635; // TemplateTypeParmDecl T
struct _ast2636; // TemplateTypeParmDecl M
struct _ast2637; // CXXRecordDecl Persistent
struct _ast2638; // CXXConstructorDecl Persistent<T, M>
struct _ast2639; // PointerType Persistent<T, M> *
struct _ast2640; // FunctionTemplateDecl Persistent<T, M>
struct _ast2641; // TemplateTypeParmDecl S
struct _ast2642; // CXXConstructorDecl Persistent<T, M>
struct _ast2643; // ParmVarDecl isolate
struct _ast2644; // ParmVarDecl that
struct _ast2645; // TemplateSpecializationType Local<S>
struct _ast2646; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2647; // FunctionTemplateDecl Persistent<T, M>
struct _ast2648; // TemplateTypeParmDecl S
struct _ast2649; // TemplateTypeParmDecl M2
struct _ast2650; // CXXConstructorDecl Persistent<T, M>
struct _ast2651; // ParmVarDecl isolate
struct _ast2652; // ParmVarDecl that
struct _ast2653; // LValueReferenceType const Persistent<S, M2> &
struct _ast2654; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2655; // TemplateSpecializationType Persistent<S, M2>
struct _ast2656; // FunctionProtoType void (v8::Isolate *, const Persistent<S,
                 // M2> &)
struct _ast2657; // CXXConstructorDecl Persistent<T, M>
struct _ast2658; // ParmVarDecl that
struct _ast2659; // LValueReferenceType const Persistent<T, M> &
struct _ast2660; // InjectedClassNameType const Persistent<T, M>
struct _ast2661; // FunctionProtoType void (const Persistent<T, M> &)
struct _ast2662; // FunctionTemplateDecl Persistent<T, M>
struct _ast2663; // TemplateTypeParmDecl S
struct _ast2664; // TemplateTypeParmDecl M2
struct _ast2665; // CXXConstructorDecl Persistent<T, M>
struct _ast2666; // ParmVarDecl that
struct _ast2667; // LValueReferenceType const Persistent<S, M2> &
struct _ast2668; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2669; // TemplateSpecializationType Persistent<S, M2>
struct _ast2670; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2671; // CXXMethodDecl operator=
struct _ast2672; // ParmVarDecl that
struct _ast2673; // FunctionProtoType Persistent<T, M> &(const Persistent<T, M>
                 // &)
struct _ast2674; // LValueReferenceType Persistent<T, M> &
struct _ast2675; // FunctionTemplateDecl operator=
struct _ast2676; // TemplateTypeParmDecl S
struct _ast2677; // TemplateTypeParmDecl M2
struct _ast2678; // CXXMethodDecl operator=
struct _ast2679; // ParmVarDecl that
struct _ast2680; // LValueReferenceType const Persistent<S, M2> &
struct _ast2681; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2682; // TemplateSpecializationType Persistent<S, M2>
struct _ast2683; // FunctionProtoType Persistent<T, M> &(const Persistent<S, M2>
                 // &)
struct _ast2684; // CXXDestructorDecl ~Persistent<T, M>
struct _ast2685; // FunctionTemplateDecl Cast
struct _ast2686; // TemplateTypeParmDecl S
struct _ast2687; // CXXMethodDecl Cast
struct _ast2688; // ParmVarDecl that
struct _ast2689; // LValueReferenceType const Persistent<S> &
struct _ast2690; // TemplateSpecializationType const Persistent<S>
struct _ast2691; // TemplateSpecializationType Persistent<S>
struct _ast2692; // FunctionProtoType Persistent<T> &(const Persistent<S> &)
struct _ast2693; // LValueReferenceType Persistent<T> &
struct _ast2694; // TemplateSpecializationType Persistent<T>
struct _ast2695; // FunctionTemplateDecl As
struct _ast2696; // TemplateTypeParmDecl S
struct _ast2697; // CXXMethodDecl As
struct _ast2698; // FunctionProtoType Persistent<S> &() const
struct _ast2699; // LValueReferenceType Persistent<S> &
struct _ast2700; // TemplateSpecializationType Persistent<S>
struct _ast2701; // PointerType const Persistent<T, M> *
struct _ast2702; // TemplateTypeParmDecl T
struct _ast2703; // CXXRecordDecl Global
struct _ast2704; // CXXConstructorDecl Global<T>
struct _ast2705; // PointerType Global<T> *
struct _ast2706; // FunctionTemplateDecl Global<T>
struct _ast2707; // TemplateTypeParmDecl S
struct _ast2708; // CXXConstructorDecl Global<T>
struct _ast2709; // ParmVarDecl isolate
struct _ast2710; // ParmVarDecl that
struct _ast2711; // TemplateSpecializationType Local<S>
struct _ast2712; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2713; // FunctionTemplateDecl Global<T>
struct _ast2714; // TemplateTypeParmDecl S
struct _ast2715; // CXXConstructorDecl Global<T>
struct _ast2716; // ParmVarDecl isolate
struct _ast2717; // ParmVarDecl that
struct _ast2718; // LValueReferenceType const PersistentBase<S> &
struct _ast2719; // TemplateSpecializationType const PersistentBase<S>
struct _ast2720; // TemplateSpecializationType PersistentBase<S>
struct _ast2721; // FunctionProtoType void (v8::Isolate *, const
                 // PersistentBase<S> &)
struct _ast2722; // CXXConstructorDecl Global<T>
struct _ast2723; // ParmVarDecl other
struct _ast2724; // RValueReferenceType Global<T> &&
struct _ast2725; // FunctionProtoType void (Global<T> &&)
struct _ast2726; // CXXDestructorDecl ~Global<T>
struct _ast2727; // FunctionTemplateDecl operator=
struct _ast2728; // TemplateTypeParmDecl S
struct _ast2729; // CXXMethodDecl operator=
struct _ast2730; // ParmVarDecl rhs
struct _ast2731; // RValueReferenceType Global<S> &&
struct _ast2732; // TemplateSpecializationType Global<S>
struct _ast2733; // FunctionProtoType Global<T> &(Global<S> &&)
struct _ast2734; // LValueReferenceType Global<T> &
struct _ast2735; // CXXMethodDecl Pass
struct _ast2736; // FunctionProtoType Global<T> ()
struct _ast2737; // TypedefDecl MoveOnlyTypeForCPP03
struct _ast2738; // TypedefType v8::Global::MoveOnlyTypeForCPP03
struct _ast2739; // CXXConstructorDecl Global<T>
struct _ast2740; // ParmVarDecl
struct _ast2741; // LValueReferenceType const Global<T> &
struct _ast2742; // InjectedClassNameType const Global<T>
struct _ast2743; // FunctionProtoType void (const Global<T> &)
struct _ast2744; // CXXMethodDecl operator=
struct _ast2745; // ParmVarDecl
struct _ast2746; // TypeAliasTemplateDecl UniquePersistent
struct _ast2747; // TypeAliasDecl UniquePersistent
struct _ast2748; // TypedefType v8::UniquePersistent
struct _ast2749; // TemplateTypeParmDecl T
struct _ast2750; // TemplateTypeParmDecl T
struct _ast2751; // CXXRecordDecl TracedGlobal
struct _ast2752; // CXXConstructorDecl TracedGlobal<T>
struct _ast2753; // PointerType TracedGlobal<T> *
struct _ast2754; // CXXDestructorDecl ~TracedGlobal<T>
struct _ast2755; // FunctionTemplateDecl TracedGlobal<T>
struct _ast2756; // TemplateTypeParmDecl S
struct _ast2757; // CXXConstructorDecl TracedGlobal<T>
struct _ast2758; // ParmVarDecl isolate
struct _ast2759; // ParmVarDecl that
struct _ast2760; // TemplateSpecializationType Local<S>
struct _ast2761; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2762; // CXXConstructorDecl TracedGlobal<T>
struct _ast2763; // ParmVarDecl other
struct _ast2764; // RValueReferenceType TracedGlobal<T> &&
struct _ast2765; // FunctionProtoType void (TracedGlobal<T> &&)
struct _ast2766; // FunctionTemplateDecl operator=
struct _ast2767; // TemplateTypeParmDecl S
struct _ast2768; // CXXMethodDecl operator=
struct _ast2769; // ParmVarDecl rhs
struct _ast2770; // RValueReferenceType TracedGlobal<S> &&
struct _ast2771; // TemplateSpecializationType TracedGlobal<S>
struct _ast2772; // FunctionProtoType TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ast2773; // LValueReferenceType TracedGlobal<T> &
struct _ast2774; // CXXConstructorDecl TracedGlobal<T>
struct _ast2775; // ParmVarDecl
struct _ast2776; // LValueReferenceType const TracedGlobal<T> &
struct _ast2777; // InjectedClassNameType const TracedGlobal<T>
struct _ast2778; // FunctionProtoType void (const TracedGlobal<T> &)
struct _ast2779; // CXXMethodDecl operator=
struct _ast2780; // ParmVarDecl
struct _ast2781; // CXXMethodDecl IsEmpty
struct _ast2782; // PointerType const TracedGlobal<T> *
struct _ast2783; // CXXMethodDecl Reset
struct _ast2784; // FunctionTemplateDecl Reset
struct _ast2785; // TemplateTypeParmDecl S
struct _ast2786; // CXXMethodDecl Reset
struct _ast2787; // ParmVarDecl isolate
struct _ast2788; // ParmVarDecl other
struct _ast2789; // LValueReferenceType const Local<S> &
struct _ast2790; // TemplateSpecializationType const Local<S>
struct _ast2791; // TemplateSpecializationType Local<S>
struct _ast2792; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2793; // CXXMethodDecl Get
struct _ast2794; // ParmVarDecl isolate
struct _ast2795; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2796; // TemplateSpecializationType Local<T>
struct _ast2797; // FunctionTemplateDecl As
struct _ast2798; // TemplateTypeParmDecl S
struct _ast2799; // CXXMethodDecl As
struct _ast2800; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2801; // LValueReferenceType TracedGlobal<S> &
struct _ast2802; // TemplateSpecializationType TracedGlobal<S>
struct _ast2803; // FunctionTemplateDecl operator==
struct _ast2804; // TemplateTypeParmDecl S
struct _ast2805; // CXXMethodDecl operator==
struct _ast2806; // ParmVarDecl that
struct _ast2807; // LValueReferenceType const TracedGlobal<S> &
struct _ast2808; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2809; // TemplateSpecializationType TracedGlobal<S>
struct _ast2810; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2811; // FunctionTemplateDecl operator==
struct _ast2812; // TemplateTypeParmDecl S
struct _ast2813; // CXXMethodDecl operator==
struct _ast2814; // ParmVarDecl that
struct _ast2815; // LValueReferenceType const Local<S> &
struct _ast2816; // TemplateSpecializationType const Local<S>
struct _ast2817; // TemplateSpecializationType Local<S>
struct _ast2818; // FunctionProtoType bool (const Local<S> &) const
struct _ast2819; // FunctionTemplateDecl operator!=
struct _ast2820; // TemplateTypeParmDecl S
struct _ast2821; // CXXMethodDecl operator!=
struct _ast2822; // ParmVarDecl that
struct _ast2823; // LValueReferenceType const TracedGlobal<S> &
struct _ast2824; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2825; // TemplateSpecializationType TracedGlobal<S>
struct _ast2826; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2827; // FunctionTemplateDecl operator!=
struct _ast2828; // TemplateTypeParmDecl S
struct _ast2829; // CXXMethodDecl operator!=
struct _ast2830; // ParmVarDecl that
struct _ast2831; // LValueReferenceType const Local<S> &
struct _ast2832; // TemplateSpecializationType const Local<S>
struct _ast2833; // TemplateSpecializationType Local<S>
struct _ast2834; // FunctionProtoType bool (const Local<S> &) const
struct _ast2835; // CXXMethodDecl SetWrapperClassId
struct _ast2836; // ParmVarDecl class_id
struct _ast2837; // CXXMethodDecl WrapperClassId
struct _ast2838; // CXXMethodDecl SetFinalizationCallback
struct _ast2839; // ParmVarDecl parameter
struct _ast2840; // ParmVarDecl callback
struct _ast2841; // CXXRecordDecl HandleScope
struct _ast2842; // RecordType v8::HandleScope
struct _ast2843; // CXXRecordDecl HandleScope
struct _ast2844; // CXXConstructorDecl HandleScope
struct _ast2845; // ParmVarDecl isolate
struct _ast2846; // FunctionProtoType void (v8::Isolate *)
struct _ast2847; // PointerType v8::HandleScope *
struct _ast2848; // CXXDestructorDecl ~HandleScope
struct _ast2849; // FunctionProtoType void ()
struct _ast2850; // CXXMethodDecl NumberOfHandles
struct _ast2851; // ParmVarDecl isolate
struct _ast2852; // FunctionProtoType int (v8::Isolate *)
struct _ast2853; // CXXMethodDecl GetIsolate
struct _ast2854; // PointerType const v8::HandleScope *
struct _ast2855; // RecordType const v8::HandleScope
struct _ast2856; // CXXConstructorDecl HandleScope
struct _ast2857; // ParmVarDecl
struct _ast2858; // LValueReferenceType const v8::HandleScope &
struct _ast2859; // FunctionProtoType void (const v8::HandleScope &)
struct _ast2860; // CXXMethodDecl operator=
struct _ast2861; // ParmVarDecl
struct _ast2862; // CXXConstructorDecl HandleScope
struct _ast2863; // FunctionProtoType void ()
struct _ast2864; // CXXMethodDecl Initialize
struct _ast2865; // ParmVarDecl isolate
struct _ast2866; // CXXMethodDecl CreateHandle
struct _ast2867; // ParmVarDecl isolate
struct _ast2868; // PointerType internal::Isolate *
struct _ast2869; // ElaboratedType internal::Isolate
struct _ast2870; // ParmVarDecl value
struct _ast2871; // ElaboratedType internal::Address
struct _ast2872; // FunctionProtoType internal::Address *(internal::Isolate *,
                 // internal::Address)
struct _ast2873; // PointerType internal::Address *
struct _ast2874; // CXXRecordDecl EscapableHandleScope
struct _ast2875; // CXXConstructorDecl EscapableHandleScope
struct _ast2876; // ParmVarDecl isolate
struct _ast2877; // PointerType v8::EscapableHandleScope *
struct _ast2878; // CXXDestructorDecl ~EscapableHandleScope
struct _ast2879; // FunctionProtoType void ()
struct _ast2880; // FunctionTemplateDecl Escape
struct _ast2881; // TemplateTypeParmDecl T
struct _ast2882; // CXXMethodDecl Escape
struct _ast2883; // ParmVarDecl value
struct _ast2884; // TemplateSpecializationType Local<T>
struct _ast2885; // FunctionProtoType Local<T> (Local<T>)
struct _ast2886; // TemplateSpecializationType Local<T>
struct _ast2887; // FunctionTemplateDecl EscapeMaybe
struct _ast2888; // TemplateTypeParmDecl T
struct _ast2889; // CXXMethodDecl EscapeMaybe
struct _ast2890; // ParmVarDecl value
struct _ast2891; // TemplateSpecializationType MaybeLocal<T>
struct _ast2892; // FunctionProtoType MaybeLocal<T> (MaybeLocal<T>)
struct _ast2893; // TemplateSpecializationType MaybeLocal<T>
struct _ast2894; // CXXConstructorDecl EscapableHandleScope
struct _ast2895; // ParmVarDecl
struct _ast2896; // LValueReferenceType const v8::EscapableHandleScope &
struct _ast2897; // RecordType const v8::EscapableHandleScope
struct _ast2898; // FunctionProtoType void (const v8::EscapableHandleScope &)
struct _ast2899; // CXXMethodDecl operator=
struct _ast2900; // ParmVarDecl
struct _ast2901; // CXXRecordDecl SealHandleScope
struct _ast2902; // RecordType v8::SealHandleScope
struct _ast2903; // FieldDecl isolate_
struct _ast2904; // PointerType internal::Isolate *const
struct _ast2905; // FieldDecl prev_limit_
struct _ast2906; // FieldDecl prev_sealed_level_
struct _ast2907; // CXXRecordDecl SealHandleScope
struct _ast2908; // CXXConstructorDecl SealHandleScope
struct _ast2909; // ParmVarDecl isolate
struct _ast2910; // PointerType v8::SealHandleScope *
struct _ast2911; // CXXDestructorDecl ~SealHandleScope
struct _ast2912; // FunctionProtoType void ()
struct _ast2913; // CXXConstructorDecl SealHandleScope
struct _ast2914; // ParmVarDecl
struct _ast2915; // LValueReferenceType const v8::SealHandleScope &
struct _ast2916; // RecordType const v8::SealHandleScope
struct _ast2917; // FunctionProtoType void (const v8::SealHandleScope &)
struct _ast2918; // CXXMethodDecl operator=
struct _ast2919; // ParmVarDecl
struct _ast2920; // CXXRecordDecl Data
struct _ast2921; // CXXRecordDecl ScriptOrModule
struct _ast2922; // RecordType v8::ScriptOrModule
struct _ast2923; // CXXRecordDecl ScriptOrModule
struct _ast2924; // CXXMethodDecl GetResourceName
struct _ast2925; // FunctionProtoType Local<v8::Value> ()
struct _ast2926; // TemplateSpecializationType Local<v8::Value>
struct _ast2927; // PointerType v8::ScriptOrModule *
struct _ast2928; // CXXMethodDecl GetHostDefinedOptions
struct _ast2929; // FunctionProtoType Local<v8::PrimitiveArray> ()
struct _ast2930; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast2931; // CXXRecordDecl PrimitiveArray
struct _ast2932; // CXXMethodDecl New
struct _ast2933; // ParmVarDecl isolate
struct _ast2934; // ParmVarDecl length
struct _ast2935; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *,
                 // int)
struct _ast2936; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast2937; // CXXMethodDecl Length
struct _ast2938; // FunctionProtoType int () const
struct _ast2939; // PointerType const v8::PrimitiveArray *
struct _ast2940; // RecordType const v8::PrimitiveArray
struct _ast2941; // CXXMethodDecl Set
struct _ast2942; // ParmVarDecl isolate
struct _ast2943; // ParmVarDecl index
struct _ast2944; // ParmVarDecl item
struct _ast2945; // TemplateSpecializationType Local<v8::Primitive>
struct _ast2946; // FunctionProtoType void (v8::Isolate *, int,
                 // Local<v8::Primitive>)
struct _ast2947; // PointerType v8::PrimitiveArray *
struct _ast2948; // CXXMethodDecl Get
struct _ast2949; // ParmVarDecl isolate
struct _ast2950; // ParmVarDecl index
struct _ast2951; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, int)
struct _ast2952; // TemplateSpecializationType Local<v8::Primitive>
struct _ast2953; // CXXRecordDecl ScriptOriginOptions
struct _ast2954; // RecordType v8::ScriptOriginOptions
struct _ast2955; // FieldDecl flags_
struct _ast2956; // CXXRecordDecl ScriptOriginOptions
struct _ast2957; // CXXConstructorDecl ScriptOriginOptions
struct _ast2958; // ParmVarDecl is_shared_cross_origin
struct _ast2959; // ParmVarDecl is_opaque
struct _ast2960; // ParmVarDecl is_wasm
struct _ast2961; // ParmVarDecl is_module
struct _ast2962; // FunctionProtoType void (bool, bool, bool, bool)
struct _ast2963; // PointerType v8::ScriptOriginOptions *
struct _ast2964; // CXXConstructorDecl ScriptOriginOptions
struct _ast2965; // ParmVarDecl flags
struct _ast2966; // FunctionProtoType void (int)
struct _ast2967; // CXXMethodDecl IsSharedCrossOrigin
struct _ast2968; // PointerType const v8::ScriptOriginOptions *
struct _ast2969; // RecordType const v8::ScriptOriginOptions
struct _ast2970; // CXXMethodDecl IsOpaque
struct _ast2971; // CXXMethodDecl IsWasm
struct _ast2972; // CXXMethodDecl IsModule
struct _ast2973; // CXXMethodDecl Flags
struct _ast2974; // CXXConstructorDecl ScriptOriginOptions
struct _ast2975; // ParmVarDecl
struct _ast2976; // LValueReferenceType const v8::ScriptOriginOptions &
struct _ast2977; // FunctionProtoType void (const v8::ScriptOriginOptions &)
                 // noexcept
struct _ast2978; // CXXConstructorDecl ScriptOriginOptions
struct _ast2979; // ParmVarDecl
struct _ast2980; // RValueReferenceType v8::ScriptOriginOptions &&
struct _ast2981; // FunctionProtoType void (v8::ScriptOriginOptions &&) noexcept
struct _ast2982; // CXXDestructorDecl ~ScriptOriginOptions
struct _ast2983; // CXXMethodDecl operator=
struct _ast2984; // ParmVarDecl
struct _ast2985; // FunctionProtoType v8::ScriptOriginOptions &(const
                 // v8::ScriptOriginOptions &)
struct _ast2986; // LValueReferenceType v8::ScriptOriginOptions &
struct _ast2987; // CXXMethodDecl operator=
struct _ast2988; // ParmVarDecl
struct _ast2989; // FunctionProtoType v8::ScriptOriginOptions
                 // &(v8::ScriptOriginOptions &&)
struct _ast2990; // CXXRecordDecl ScriptOrigin
struct _ast2991; // RecordType v8::ScriptOrigin
struct _ast2992; // FieldDecl resource_name_
struct _ast2993; // TemplateSpecializationType Local<v8::Value>
struct _ast2994; // FieldDecl resource_line_offset_
struct _ast2995; // TemplateSpecializationType Local<v8::Integer>
struct _ast2996; // FieldDecl resource_column_offset_
struct _ast2997; // TemplateSpecializationType Local<v8::Integer>
struct _ast2998; // FieldDecl options_
struct _ast2999; // FieldDecl script_id_
struct _ast3000; // TemplateSpecializationType Local<v8::Integer>
struct _ast3001; // FieldDecl source_map_url_
struct _ast3002; // TemplateSpecializationType Local<v8::Value>
struct _ast3003; // FieldDecl host_defined_options_
struct _ast3004; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast3005; // CXXRecordDecl ScriptOrigin
struct _ast3006; // CXXConstructorDecl ScriptOrigin
struct _ast3007; // ParmVarDecl resource_name
struct _ast3008; // TemplateSpecializationType Local<v8::Value>
struct _ast3009; // ParmVarDecl resource_line_offset
struct _ast3010; // TemplateSpecializationType Local<v8::Integer>
struct _ast3011; // ParmVarDecl resource_column_offset
struct _ast3012; // TemplateSpecializationType Local<v8::Integer>
struct _ast3013; // ParmVarDecl resource_is_shared_cross_origin
struct _ast3014; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3015; // ParmVarDecl script_id
struct _ast3016; // TemplateSpecializationType Local<v8::Integer>
struct _ast3017; // ParmVarDecl source_map_url
struct _ast3018; // TemplateSpecializationType Local<v8::Value>
struct _ast3019; // ParmVarDecl resource_is_opaque
struct _ast3020; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3021; // ParmVarDecl is_wasm
struct _ast3022; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3023; // ParmVarDecl is_module
struct _ast3024; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3025; // ParmVarDecl host_defined_options
struct _ast3026; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast3027; // FunctionProtoType void (Local<v8::Value>,
                 // Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>,
                 // Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>,
                 // Local<v8::Boolean>, Local<v8::Boolean>,
                 // Local<v8::PrimitiveArray>)
struct _ast3028; // PointerType v8::ScriptOrigin *
struct _ast3029; // CXXMethodDecl ResourceName
struct _ast3030; // FunctionProtoType Local<v8::Value> () const
struct _ast3031; // TemplateSpecializationType Local<v8::Value>
struct _ast3032; // PointerType const v8::ScriptOrigin *
struct _ast3033; // RecordType const v8::ScriptOrigin
struct _ast3034; // CXXMethodDecl ResourceLineOffset
struct _ast3035; // FunctionProtoType Local<v8::Integer> () const
struct _ast3036; // TemplateSpecializationType Local<v8::Integer>
struct _ast3037; // CXXMethodDecl ResourceColumnOffset
struct _ast3038; // FunctionProtoType Local<v8::Integer> () const
struct _ast3039; // TemplateSpecializationType Local<v8::Integer>
struct _ast3040; // CXXMethodDecl ScriptID
struct _ast3041; // FunctionProtoType Local<v8::Integer> () const
struct _ast3042; // TemplateSpecializationType Local<v8::Integer>
struct _ast3043; // CXXMethodDecl SourceMapUrl
struct _ast3044; // FunctionProtoType Local<v8::Value> () const
struct _ast3045; // TemplateSpecializationType Local<v8::Value>
struct _ast3046; // CXXMethodDecl HostDefinedOptions
struct _ast3047; // FunctionProtoType Local<v8::PrimitiveArray> () const
struct _ast3048; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast3049; // CXXMethodDecl Options
struct _ast3050; // FunctionProtoType v8::ScriptOriginOptions () const
struct _ast3051; // CXXConstructorDecl ScriptOrigin
struct _ast3052; // ParmVarDecl
struct _ast3053; // LValueReferenceType const v8::ScriptOrigin &
struct _ast3054; // FunctionProtoType void (const v8::ScriptOrigin &)
struct _ast3055; // CXXMethodDecl operator=
struct _ast3056; // ParmVarDecl
struct _ast3057; // RValueReferenceType v8::ScriptOrigin &&
struct _ast3058; // FunctionProtoType v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ast3059; // LValueReferenceType v8::ScriptOrigin &
struct _ast3060; // CXXConstructorDecl ScriptOrigin
struct _ast3061; // ParmVarDecl
struct _ast3062; // FunctionProtoType void (v8::ScriptOrigin &&)
struct _ast3063; // CXXRecordDecl UnboundScript
struct _ast3064; // RecordType v8::UnboundScript
struct _ast3065; // CXXRecordDecl UnboundScript
struct _ast3066; // CXXMethodDecl BindToCurrentContext
struct _ast3067; // FunctionProtoType Local<v8::Script> ()
struct _ast3068; // TemplateSpecializationType Local<v8::Script>
struct _ast3069; // PointerType v8::UnboundScript *
struct _ast3070; // CXXMethodDecl GetId
struct _ast3071; // FunctionProtoType int ()
struct _ast3072; // CXXMethodDecl GetScriptName
struct _ast3073; // FunctionProtoType Local<v8::Value> ()
struct _ast3074; // TemplateSpecializationType Local<v8::Value>
struct _ast3075; // CXXMethodDecl GetSourceURL
struct _ast3076; // FunctionProtoType Local<v8::Value> ()
struct _ast3077; // TemplateSpecializationType Local<v8::Value>
struct _ast3078; // CXXMethodDecl GetSourceMappingURL
struct _ast3079; // FunctionProtoType Local<v8::Value> ()
struct _ast3080; // TemplateSpecializationType Local<v8::Value>
struct _ast3081; // CXXMethodDecl GetLineNumber
struct _ast3082; // ParmVarDecl code_pos
struct _ast3083; // FunctionProtoType int (int)
struct _ast3084; // VarDecl kNoScriptId
struct _ast3085; // CXXRecordDecl UnboundModuleScript
struct _ast3086; // RecordType v8::UnboundModuleScript
struct _ast3087; // CXXRecordDecl UnboundModuleScript
struct _ast3088; // CXXRecordDecl Location
struct _ast3089; // RecordType v8::Location
struct _ast3090; // FieldDecl line_number_
struct _ast3091; // FieldDecl column_number_
struct _ast3092; // CXXRecordDecl Location
struct _ast3093; // CXXMethodDecl GetLineNumber
struct _ast3094; // PointerType v8::Location *
struct _ast3095; // CXXMethodDecl GetColumnNumber
struct _ast3096; // CXXConstructorDecl Location
struct _ast3097; // ParmVarDecl line_number
struct _ast3098; // ParmVarDecl column_number
struct _ast3099; // FunctionProtoType void (int, int)
struct _ast3100; // CXXRecordDecl Module
struct _ast3101; // RecordType v8::Module
struct _ast3102; // CXXRecordDecl Module
struct _ast3103; // EnumDecl Status
struct _ast3104; // EnumConstantDecl kUninstantiated
struct _ast3105; // EnumConstantDecl kInstantiating
struct _ast3106; // EnumConstantDecl kInstantiated
struct _ast3107; // EnumConstantDecl kEvaluating
struct _ast3108; // EnumConstantDecl kEvaluated
struct _ast3109; // EnumConstantDecl kErrored
struct _ast3110; // CXXMethodDecl GetStatus
struct _ast3111; // FunctionProtoType v8::Module::Status () const
struct _ast3112; // EnumType v8::Module::Status
struct _ast3113; // PointerType const v8::Module *
struct _ast3114; // RecordType const v8::Module
struct _ast3115; // CXXMethodDecl GetException
struct _ast3116; // FunctionProtoType Local<v8::Value> () const
struct _ast3117; // TemplateSpecializationType Local<v8::Value>
struct _ast3118; // CXXMethodDecl GetModuleRequestsLength
struct _ast3119; // CXXMethodDecl GetModuleRequest
struct _ast3120; // ParmVarDecl i
struct _ast3121; // FunctionProtoType Local<v8::String> (int) const
struct _ast3122; // TemplateSpecializationType Local<v8::String>
struct _ast3123; // CXXMethodDecl GetModuleRequestLocation
struct _ast3124; // ParmVarDecl i
struct _ast3125; // FunctionProtoType v8::Location (int) const
struct _ast3126; // CXXMethodDecl GetIdentityHash
struct _ast3127; // TypedefDecl ResolveCallback
struct _ast3128; // TypedefType v8::Module::ResolveCallback
struct _ast3129; // CXXMethodDecl InstantiateModule
struct _ast3130; // ParmVarDecl context
struct _ast3131; // TemplateSpecializationType Local<v8::Context>
struct _ast3132; // ParmVarDecl callback
struct _ast3133; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // v8::Module::ResolveCallback)
struct _ast3134; // TemplateSpecializationType Maybe<bool>
struct _ast3135; // PointerType v8::Module *
struct _ast3136; // CXXMethodDecl Evaluate
struct _ast3137; // ParmVarDecl context
struct _ast3138; // TemplateSpecializationType Local<v8::Context>
struct _ast3139; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3140; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3141; // CXXMethodDecl GetModuleNamespace
struct _ast3142; // FunctionProtoType Local<v8::Value> ()
struct _ast3143; // TemplateSpecializationType Local<v8::Value>
struct _ast3144; // CXXMethodDecl GetUnboundModuleScript
struct _ast3145; // FunctionProtoType Local<v8::UnboundModuleScript> ()
struct _ast3146; // TemplateSpecializationType Local<v8::UnboundModuleScript>
struct _ast3147; // CXXRecordDecl Script
struct _ast3148; // CXXMethodDecl Compile
struct _ast3149; // ParmVarDecl context
struct _ast3150; // TemplateSpecializationType Local<v8::Context>
struct _ast3151; // ParmVarDecl source
struct _ast3152; // TemplateSpecializationType Local<v8::String>
struct _ast3153; // ParmVarDecl origin
struct _ast3154; // FunctionProtoType MaybeLocal<v8::Script>
                 // (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _ast3155; // TemplateSpecializationType MaybeLocal<v8::Script>
struct _ast3156; // CXXMethodDecl Run
struct _ast3157; // ParmVarDecl context
struct _ast3158; // TemplateSpecializationType Local<v8::Context>
struct _ast3159; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3160; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3161; // PointerType v8::Script *
struct _ast3162; // CXXMethodDecl GetUnboundScript
struct _ast3163; // FunctionProtoType Local<v8::UnboundScript> ()
struct _ast3164; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast3165; // CXXRecordDecl ScriptCompiler
struct _ast3166; // RecordType v8::ScriptCompiler
struct _ast3167; // CXXRecordDecl ScriptCompiler
struct _ast3168; // CXXRecordDecl CachedData
struct _ast3169; // RecordType v8::ScriptCompiler::CachedData
struct _ast3170; // FieldDecl data
struct _ast3171; // PointerType const uint8_t *
struct _ast3172; // TypedefType const uint8_t
struct _ast3173; // TypedefType uint8_t
struct _ast3174; // FieldDecl length
struct _ast3175; // FieldDecl rejected
struct _ast3176; // FieldDecl buffer_policy
struct _ast3177; // EnumType v8::ScriptCompiler::CachedData::BufferPolicy
struct _ast3178; // EnumDecl BufferPolicy
struct _ast3179; // CXXRecordDecl CachedData
struct _ast3180; // EnumConstantDecl BufferNotOwned
struct _ast3181; // EnumConstantDecl BufferOwned
struct _ast3182; // CXXConstructorDecl CachedData
struct _ast3183; // PointerType v8::ScriptCompiler::CachedData *
struct _ast3184; // CXXConstructorDecl CachedData
struct _ast3185; // ParmVarDecl data
struct _ast3186; // ParmVarDecl length
struct _ast3187; // ParmVarDecl buffer_policy
struct _ast3188; // FunctionProtoType void (const uint8_t *, int,
                 // v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ast3189; // CXXDestructorDecl ~CachedData
struct _ast3190; // CXXConstructorDecl CachedData
struct _ast3191; // ParmVarDecl
struct _ast3192; // LValueReferenceType const v8::ScriptCompiler::CachedData &
struct _ast3193; // RecordType const v8::ScriptCompiler::CachedData
struct _ast3194; // FunctionProtoType void (const v8::ScriptCompiler::CachedData
                 // &)
struct _ast3195; // CXXMethodDecl operator=
struct _ast3196; // ParmVarDecl
struct _ast3197; // FunctionProtoType v8::ScriptCompiler::CachedData &(const
                 // v8::ScriptCompiler::CachedData &)
struct _ast3198; // LValueReferenceType v8::ScriptCompiler::CachedData &
struct _ast3199; // CXXRecordDecl Source
struct _ast3200; // RecordType v8::ScriptCompiler::Source
struct _ast3201; // FieldDecl source_string
struct _ast3202; // TemplateSpecializationType Local<v8::String>
struct _ast3203; // FieldDecl resource_name
struct _ast3204; // TemplateSpecializationType Local<v8::Value>
struct _ast3205; // FieldDecl resource_line_offset
struct _ast3206; // TemplateSpecializationType Local<v8::Integer>
struct _ast3207; // FieldDecl resource_column_offset
struct _ast3208; // TemplateSpecializationType Local<v8::Integer>
struct _ast3209; // FieldDecl resource_options
struct _ast3210; // FieldDecl source_map_url
struct _ast3211; // TemplateSpecializationType Local<v8::Value>
struct _ast3212; // FieldDecl host_defined_options
struct _ast3213; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast3214; // FieldDecl cached_data
struct _ast3215; // CXXRecordDecl Source
struct _ast3216; // CXXConstructorDecl Source
struct _ast3217; // ParmVarDecl source_string
struct _ast3218; // TemplateSpecializationType Local<v8::String>
struct _ast3219; // ParmVarDecl origin
struct _ast3220; // ParmVarDecl cached_data
struct _ast3221; // FunctionProtoType void (Local<v8::String>, const
                 // v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _ast3222; // PointerType v8::ScriptCompiler::Source *
struct _ast3223; // CXXConstructorDecl Source
struct _ast3224; // ParmVarDecl source_string
struct _ast3225; // TemplateSpecializationType Local<v8::String>
struct _ast3226; // ParmVarDecl cached_data
struct _ast3227; // FunctionProtoType void (Local<v8::String>,
                 // v8::ScriptCompiler::CachedData *)
struct _ast3228; // CXXDestructorDecl ~Source
struct _ast3229; // CXXMethodDecl GetCachedData
struct _ast3230; // FunctionProtoType const v8::ScriptCompiler::CachedData *()
                 // const
struct _ast3231; // PointerType const v8::ScriptCompiler::CachedData *
struct _ast3232; // PointerType const v8::ScriptCompiler::Source *
struct _ast3233; // RecordType const v8::ScriptCompiler::Source
struct _ast3234; // CXXMethodDecl GetResourceOptions
struct _ast3235; // FunctionProtoType const v8::ScriptOriginOptions &() const
struct _ast3236; // CXXConstructorDecl Source
struct _ast3237; // ParmVarDecl
struct _ast3238; // LValueReferenceType const v8::ScriptCompiler::Source &
struct _ast3239; // FunctionProtoType void (const v8::ScriptCompiler::Source &)
struct _ast3240; // CXXMethodDecl operator=
struct _ast3241; // ParmVarDecl
struct _ast3242; // FunctionProtoType v8::ScriptCompiler::Source &(const
                 // v8::ScriptCompiler::Source &)
struct _ast3243; // LValueReferenceType v8::ScriptCompiler::Source &
struct _ast3244; // CXXRecordDecl ExternalSourceStream
struct _ast3245; // RecordType v8::ScriptCompiler::ExternalSourceStream
struct _ast3246; // CXXRecordDecl ExternalSourceStream
struct _ast3247; // CXXDestructorDecl ~ExternalSourceStream
struct _ast3248; // FunctionProtoType void ()
struct _ast3249; // PointerType v8::ScriptCompiler::ExternalSourceStream *
struct _ast3250; // CXXMethodDecl GetMoreData
struct _ast3251; // ParmVarDecl src
struct _ast3252; // PointerType const uint8_t **
struct _ast3253; // FunctionProtoType size_t (const uint8_t **)
struct _ast3254; // TypedefType size_t
struct _ast3255; // CXXMethodDecl SetBookmark
struct _ast3256; // FunctionProtoType bool ()
struct _ast3257; // CXXMethodDecl ResetToBookmark
struct _ast3258; // CXXMethodDecl operator=
struct _ast3259; // ParmVarDecl
struct _ast3260; // LValueReferenceType const
                 // v8::ScriptCompiler::ExternalSourceStream &
struct _ast3261; // RecordType const v8::ScriptCompiler::ExternalSourceStream
struct _ast3262; // FunctionProtoType v8::ScriptCompiler::ExternalSourceStream
                 // &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _ast3263; // LValueReferenceType v8::ScriptCompiler::ExternalSourceStream
                 // &
struct _ast3264; // CXXRecordDecl StreamedSource
struct _ast3265; // RecordType v8::ScriptCompiler::StreamedSource
struct _ast3266; // FieldDecl impl_
struct _ast3267; // ElaboratedType
                 // std::unique_ptr<internal::ScriptStreamingData>
struct _ast3268; // CXXRecordDecl StreamedSource
struct _ast3269; // EnumDecl Encoding
struct _ast3270; // EnumConstantDecl ONE_BYTE
struct _ast3271; // EnumConstantDecl TWO_BYTE
struct _ast3272; // EnumConstantDecl UTF8
struct _ast3273; // CXXConstructorDecl StreamedSource
struct _ast3274; // ParmVarDecl source_stream
struct _ast3275; // ParmVarDecl encoding
struct _ast3276; // EnumType v8::ScriptCompiler::StreamedSource::Encoding
struct _ast3277; // FunctionProtoType void
                 // (v8::ScriptCompiler::ExternalSourceStream *,
                 // v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3278; // PointerType v8::ScriptCompiler::StreamedSource *
struct _ast3279; // CXXConstructorDecl StreamedSource
struct _ast3280; // ParmVarDecl source_stream
struct _ast3281; // ElaboratedType std::unique_ptr<ExternalSourceStream>
struct _ast3282; // ParmVarDecl encoding
struct _ast3283; // FunctionProtoType void
                 // (std::unique_ptr<ExternalSourceStream>,
                 // v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3284; // CXXDestructorDecl ~StreamedSource
struct _ast3285; // FunctionProtoType void ()
struct _ast3286; // CXXMethodDecl impl
struct _ast3287; // FunctionProtoType internal::ScriptStreamingData *() const
struct _ast3288; // PointerType internal::ScriptStreamingData *
struct _ast3289; // ElaboratedType internal::ScriptStreamingData
struct _ast3290; // PointerType const v8::ScriptCompiler::StreamedSource *
struct _ast3291; // RecordType const v8::ScriptCompiler::StreamedSource
struct _ast3292; // CXXConstructorDecl StreamedSource
struct _ast3293; // ParmVarDecl
struct _ast3294; // LValueReferenceType const v8::ScriptCompiler::StreamedSource
                 // &
struct _ast3295; // FunctionProtoType void (const
                 // v8::ScriptCompiler::StreamedSource &)
struct _ast3296; // CXXMethodDecl operator=
struct _ast3297; // ParmVarDecl
struct _ast3298; // FunctionProtoType v8::ScriptCompiler::StreamedSource &(const
                 // v8::ScriptCompiler::StreamedSource &)
struct _ast3299; // LValueReferenceType v8::ScriptCompiler::StreamedSource &
struct _ast3300; // CXXRecordDecl ScriptStreamingTask
struct _ast3301; // RecordType v8::ScriptCompiler::ScriptStreamingTask
struct _ast3302; // FieldDecl data_
struct _ast3303; // CXXRecordDecl ScriptStreamingTask
struct _ast3304; // CXXMethodDecl Run
struct _ast3305; // PointerType v8::ScriptCompiler::ScriptStreamingTask *
struct _ast3306; // EnumDecl CompileOptions
struct _ast3307; // EnumConstantDecl kNoCompileOptions
struct _ast3308; // EnumConstantDecl kConsumeCodeCache
struct _ast3309; // EnumConstantDecl kEagerCompile
struct _ast3310; // EnumDecl NoCacheReason
struct _ast3311; // EnumConstantDecl kNoCacheNoReason
struct _ast3312; // EnumConstantDecl kNoCacheBecauseCachingDisabled
struct _ast3313; // EnumConstantDecl kNoCacheBecauseNoResource
struct _ast3314; // EnumConstantDecl kNoCacheBecauseInlineScript
struct _ast3315; // EnumConstantDecl kNoCacheBecauseModule
struct _ast3316; // EnumConstantDecl kNoCacheBecauseStreamingSource
struct _ast3317; // EnumConstantDecl kNoCacheBecauseInspector
struct _ast3318; // EnumConstantDecl kNoCacheBecauseScriptTooSmall
struct _ast3319; // EnumConstantDecl kNoCacheBecauseCacheTooCold
struct _ast3320; // EnumConstantDecl kNoCacheBecauseV8Extension
struct _ast3321; // EnumConstantDecl kNoCacheBecauseExtensionModule
struct _ast3322; // EnumConstantDecl kNoCacheBecausePacScript
struct _ast3323; // EnumConstantDecl kNoCacheBecauseInDocumentWrite
struct _ast3324; // EnumConstantDecl kNoCacheBecauseResourceWithNoCacheHandler
struct _ast3325; // EnumConstantDecl kNoCacheBecauseDeferredProduceCodeCache
struct _ast3326; // CXXMethodDecl CompileUnboundScript
struct _ast3327; // ParmVarDecl isolate
struct _ast3328; // ParmVarDecl source
struct _ast3329; // ParmVarDecl options
struct _ast3330; // EnumType v8::ScriptCompiler::CompileOptions
struct _ast3331; // ParmVarDecl no_cache_reason
struct _ast3332; // EnumType v8::ScriptCompiler::NoCacheReason
struct _ast3333; // FunctionProtoType MaybeLocal<v8::UnboundScript> (v8::Isolate
                 // *, v8::ScriptCompiler::Source *,
                 // v8::ScriptCompiler::CompileOptions,
                 // v8::ScriptCompiler::NoCacheReason)
struct _ast3334; // TemplateSpecializationType MaybeLocal<v8::UnboundScript>
struct _ast3335; // CXXMethodDecl Compile
struct _ast3336; // ParmVarDecl context
struct _ast3337; // TemplateSpecializationType Local<v8::Context>
struct _ast3338; // ParmVarDecl source
struct _ast3339; // ParmVarDecl options
struct _ast3340; // ParmVarDecl no_cache_reason
struct _ast3341; // FunctionProtoType MaybeLocal<v8::Script>
                 // (Local<v8::Context>, v8::ScriptCompiler::Source *,
                 // v8::ScriptCompiler::CompileOptions,
                 // v8::ScriptCompiler::NoCacheReason)
struct _ast3342; // TemplateSpecializationType MaybeLocal<v8::Script>
struct _ast3343; // CXXMethodDecl StartStreamingScript
struct _ast3344; // ParmVarDecl isolate
struct _ast3345; // ParmVarDecl source
struct _ast3346; // ParmVarDecl options
struct _ast3347; // FunctionProtoType v8::ScriptCompiler::ScriptStreamingTask
                 // *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *,
                 // v8::ScriptCompiler::CompileOptions)
struct _ast3348; // CXXMethodDecl Compile
struct _ast3349; // ParmVarDecl context
struct _ast3350; // TemplateSpecializationType Local<v8::Context>
struct _ast3351; // ParmVarDecl source
struct _ast3352; // ParmVarDecl full_source_string
struct _ast3353; // TemplateSpecializationType Local<v8::String>
struct _ast3354; // ParmVarDecl origin
struct _ast3355; // FunctionProtoType MaybeLocal<v8::Script>
                 // (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *,
                 // Local<v8::String>, const v8::ScriptOrigin &)
struct _ast3356; // TemplateSpecializationType MaybeLocal<v8::Script>
struct _ast3357; // CXXMethodDecl CachedDataVersionTag
struct _ast3358; // FunctionProtoType uint32_t ()
struct _ast3359; // TypedefType uint32_t
struct _ast3360; // CXXMethodDecl CompileModule
struct _ast3361; // ParmVarDecl isolate
struct _ast3362; // ParmVarDecl source
struct _ast3363; // ParmVarDecl options
struct _ast3364; // ParmVarDecl no_cache_reason
struct _ast3365; // FunctionProtoType MaybeLocal<v8::Module> (v8::Isolate *,
                 // v8::ScriptCompiler::Source *,
                 // v8::ScriptCompiler::CompileOptions,
                 // v8::ScriptCompiler::NoCacheReason)
struct _ast3366; // TemplateSpecializationType MaybeLocal<v8::Module>
struct _ast3367; // CXXMethodDecl CompileFunctionInContext
struct _ast3368; // ParmVarDecl context
struct _ast3369; // TemplateSpecializationType Local<v8::Context>
struct _ast3370; // ParmVarDecl source
struct _ast3371; // ParmVarDecl arguments_count
struct _ast3372; // ParmVarDecl arguments
struct _ast3373; // DecayedType Local<v8::String> *
struct _ast3374; // ParmVarDecl context_extension_count
struct _ast3375; // ParmVarDecl context_extensions
struct _ast3376; // DecayedType Local<v8::Object> *
struct _ast3377; // ParmVarDecl options
struct _ast3378; // ParmVarDecl no_cache_reason
struct _ast3379; // FunctionProtoType MaybeLocal<v8::Function>
                 // (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t,
                 // Local<v8::String> *, size_t, Local<v8::Object> *,
                 // v8::ScriptCompiler::CompileOptions,
                 // v8::ScriptCompiler::NoCacheReason)
struct _ast3380; // TemplateSpecializationType MaybeLocal<v8::Function>
struct _ast3381; // CXXMethodDecl CreateCodeCache
struct _ast3382; // ParmVarDecl unbound_script
struct _ast3383; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast3384; // FunctionProtoType v8::ScriptCompiler::CachedData
                 // *(Local<v8::UnboundScript>)
struct _ast3385; // CXXMethodDecl CreateCodeCache
struct _ast3386; // ParmVarDecl unbound_module_script
struct _ast3387; // TemplateSpecializationType Local<v8::UnboundModuleScript>
struct _ast3388; // FunctionProtoType v8::ScriptCompiler::CachedData
                 // *(Local<v8::UnboundModuleScript>)
struct _ast3389; // CXXMethodDecl CreateCodeCacheForFunction
struct _ast3390; // ParmVarDecl function
struct _ast3391; // TemplateSpecializationType Local<v8::Function>
struct _ast3392; // FunctionProtoType v8::ScriptCompiler::CachedData
                 // *(Local<v8::Function>)
struct _ast3393; // CXXRecordDecl Message
struct _ast3394; // RecordType v8::Message
struct _ast3395; // CXXRecordDecl Message
struct _ast3396; // CXXMethodDecl Get
struct _ast3397; // FunctionProtoType Local<v8::String> () const
struct _ast3398; // TemplateSpecializationType Local<v8::String>
struct _ast3399; // PointerType const v8::Message *
struct _ast3400; // RecordType const v8::Message
struct _ast3401; // CXXMethodDecl GetIsolate
struct _ast3402; // CXXMethodDecl GetSourceLine
struct _ast3403; // ParmVarDecl context
struct _ast3404; // TemplateSpecializationType Local<v8::Context>
struct _ast3405; // FunctionProtoType MaybeLocal<v8::String>
                 // (Local<v8::Context>) const
struct _ast3406; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3407; // CXXMethodDecl GetScriptOrigin
struct _ast3408; // FunctionProtoType v8::ScriptOrigin () const
struct _ast3409; // CXXMethodDecl GetScriptResourceName
struct _ast3410; // FunctionProtoType Local<v8::Value> () const
struct _ast3411; // TemplateSpecializationType Local<v8::Value>
struct _ast3412; // CXXMethodDecl GetStackTrace
struct _ast3413; // FunctionProtoType Local<v8::StackTrace> () const
struct _ast3414; // TemplateSpecializationType Local<v8::StackTrace>
struct _ast3415; // CXXMethodDecl GetLineNumber
struct _ast3416; // ParmVarDecl context
struct _ast3417; // TemplateSpecializationType Local<v8::Context>
struct _ast3418; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3419; // TemplateSpecializationType Maybe<int>
struct _ast3420; // CXXMethodDecl GetStartPosition
struct _ast3421; // CXXMethodDecl GetEndPosition
struct _ast3422; // CXXMethodDecl ErrorLevel
struct _ast3423; // CXXMethodDecl GetStartColumn
struct _ast3424; // CXXMethodDecl GetStartColumn
struct _ast3425; // ParmVarDecl context
struct _ast3426; // TemplateSpecializationType Local<v8::Context>
struct _ast3427; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3428; // TemplateSpecializationType Maybe<int>
struct _ast3429; // CXXMethodDecl GetEndColumn
struct _ast3430; // CXXMethodDecl GetEndColumn
struct _ast3431; // ParmVarDecl context
struct _ast3432; // TemplateSpecializationType Local<v8::Context>
struct _ast3433; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3434; // TemplateSpecializationType Maybe<int>
struct _ast3435; // CXXMethodDecl IsSharedCrossOrigin
struct _ast3436; // CXXMethodDecl IsOpaque
struct _ast3437; // CXXMethodDecl PrintCurrentStackTrace
struct _ast3438; // ParmVarDecl isolate
struct _ast3439; // ParmVarDecl out
struct _ast3440; // PointerType FILE *
struct _ast3441; // TypedefType FILE
struct _ast3442; // TypedefDecl FILE
struct _ast3443; // LinkageSpecDecl
struct _ast3444; // FunctionProtoType void (v8::Isolate *, FILE *)
struct _ast3445; // VarDecl kNoLineNumberInfo
struct _ast3446; // VarDecl kNoColumnInfo
struct _ast3447; // VarDecl kNoScriptIdInfo
struct _ast3448; // CXXRecordDecl StackTrace
struct _ast3449; // EnumDecl StackTraceOptions
struct _ast3450; // EnumConstantDecl kLineNumber
struct _ast3451; // EnumConstantDecl kColumnOffset
struct _ast3452; // EnumConstantDecl kScriptName
struct _ast3453; // EnumConstantDecl kFunctionName
struct _ast3454; // EnumConstantDecl kIsEval
struct _ast3455; // EnumConstantDecl kIsConstructor
struct _ast3456; // EnumConstantDecl kScriptNameOrSourceURL
struct _ast3457; // EnumConstantDecl kScriptId
struct _ast3458; // EnumConstantDecl kExposeFramesAcrossSecurityOrigins
struct _ast3459; // EnumConstantDecl kOverview
struct _ast3460; // EnumConstantDecl kDetailed
struct _ast3461; // CXXMethodDecl GetFrame
struct _ast3462; // ParmVarDecl isolate
struct _ast3463; // ParmVarDecl index
struct _ast3464; // FunctionProtoType Local<v8::StackFrame> (v8::Isolate *,
                 // uint32_t) const
struct _ast3465; // TemplateSpecializationType Local<v8::StackFrame>
struct _ast3466; // PointerType const v8::StackTrace *
struct _ast3467; // RecordType const v8::StackTrace
struct _ast3468; // CXXMethodDecl GetFrameCount
struct _ast3469; // CXXMethodDecl CurrentStackTrace
struct _ast3470; // ParmVarDecl isolate
struct _ast3471; // ParmVarDecl frame_limit
struct _ast3472; // ParmVarDecl options
struct _ast3473; // EnumType v8::StackTrace::StackTraceOptions
struct _ast3474; // FunctionProtoType Local<v8::StackTrace> (v8::Isolate *, int,
                 // v8::StackTrace::StackTraceOptions)
struct _ast3475; // TemplateSpecializationType Local<v8::StackTrace>
struct _ast3476; // CXXRecordDecl StackFrame
struct _ast3477; // CXXMethodDecl GetLineNumber
struct _ast3478; // PointerType const v8::StackFrame *
struct _ast3479; // RecordType const v8::StackFrame
struct _ast3480; // CXXMethodDecl GetColumn
struct _ast3481; // CXXMethodDecl GetScriptId
struct _ast3482; // CXXMethodDecl GetScriptName
struct _ast3483; // FunctionProtoType Local<v8::String> () const
struct _ast3484; // TemplateSpecializationType Local<v8::String>
struct _ast3485; // CXXMethodDecl GetScriptNameOrSourceURL
struct _ast3486; // FunctionProtoType Local<v8::String> () const
struct _ast3487; // TemplateSpecializationType Local<v8::String>
struct _ast3488; // CXXMethodDecl GetFunctionName
struct _ast3489; // FunctionProtoType Local<v8::String> () const
struct _ast3490; // TemplateSpecializationType Local<v8::String>
struct _ast3491; // CXXMethodDecl IsEval
struct _ast3492; // CXXMethodDecl IsConstructor
struct _ast3493; // CXXMethodDecl IsWasm
struct _ast3494; // CXXMethodDecl IsUserJavaScript
struct _ast3495; // EnumDecl StateTag
struct _ast3496; // EnumConstantDecl JS
struct _ast3497; // EnumConstantDecl GC
struct _ast3498; // EnumConstantDecl PARSER
struct _ast3499; // EnumConstantDecl BYTECODE_COMPILER
struct _ast3500; // EnumConstantDecl COMPILER
struct _ast3501; // EnumConstantDecl OTHER
struct _ast3502; // EnumConstantDecl EXTERNAL
struct _ast3503; // EnumConstantDecl IDLE
struct _ast3504; // CXXRecordDecl RegisterState
struct _ast3505; // RecordType v8::RegisterState
struct _ast3506; // FieldDecl pc
struct _ast3507; // FieldDecl sp
struct _ast3508; // FieldDecl fp
struct _ast3509; // FieldDecl lr
struct _ast3510; // CXXRecordDecl RegisterState
struct _ast3511; // CXXConstructorDecl RegisterState
struct _ast3512; // PointerType v8::RegisterState *
struct _ast3513; // CXXRecordDecl SampleInfo
struct _ast3514; // RecordType v8::SampleInfo
struct _ast3515; // FieldDecl frames_count
struct _ast3516; // FieldDecl vm_state
struct _ast3517; // EnumType v8::StateTag
struct _ast3518; // FieldDecl external_callback_entry
struct _ast3519; // CXXRecordDecl SampleInfo
struct _ast3520; // CXXRecordDecl MemoryRange
struct _ast3521; // RecordType v8::MemoryRange
struct _ast3522; // FieldDecl start
struct _ast3523; // PointerType const void *
struct _ast3524; // BuiltinType const void
struct _ast3525; // FieldDecl length_in_bytes
struct _ast3526; // CXXRecordDecl MemoryRange
struct _ast3527; // CXXRecordDecl JSEntryStub
struct _ast3528; // RecordType v8::JSEntryStub
struct _ast3529; // FieldDecl code
struct _ast3530; // CXXRecordDecl JSEntryStub
struct _ast3531; // CXXRecordDecl UnwindState
struct _ast3532; // RecordType v8::UnwindState
struct _ast3533; // FieldDecl code_range
struct _ast3534; // FieldDecl embedded_code_range
struct _ast3535; // FieldDecl js_entry_stub
struct _ast3536; // CXXRecordDecl UnwindState
struct _ast3537; // CXXRecordDecl JSON
struct _ast3538; // RecordType v8::JSON
struct _ast3539; // CXXRecordDecl JSON
struct _ast3540; // CXXMethodDecl Parse
struct _ast3541; // ParmVarDecl context
struct _ast3542; // TemplateSpecializationType Local<v8::Context>
struct _ast3543; // ParmVarDecl json_string
struct _ast3544; // TemplateSpecializationType Local<v8::String>
struct _ast3545; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::String>)
struct _ast3546; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3547; // CXXMethodDecl Stringify
struct _ast3548; // ParmVarDecl context
struct _ast3549; // TemplateSpecializationType Local<v8::Context>
struct _ast3550; // ParmVarDecl json_object
struct _ast3551; // TemplateSpecializationType Local<v8::Value>
struct _ast3552; // ParmVarDecl gap
struct _ast3553; // TemplateSpecializationType Local<v8::String>
struct _ast3554; // FunctionProtoType MaybeLocal<v8::String>
                 // (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _ast3555; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3556; // CXXRecordDecl ValueSerializer
struct _ast3557; // RecordType v8::ValueSerializer
struct _ast3558; // FieldDecl private_
struct _ast3559; // PointerType v8::ValueSerializer::PrivateData *
struct _ast3560; // RecordType v8::ValueSerializer::PrivateData
struct _ast3561; // CXXRecordDecl PrivateData
struct _ast3562; // CXXRecordDecl ValueSerializer
struct _ast3563; // CXXRecordDecl Delegate
struct _ast3564; // RecordType v8::ValueSerializer::Delegate
struct _ast3565; // CXXRecordDecl Delegate
struct _ast3566; // CXXDestructorDecl ~Delegate
struct _ast3567; // FunctionProtoType void ()
struct _ast3568; // PointerType v8::ValueSerializer::Delegate *
struct _ast3569; // CXXMethodDecl ThrowDataCloneError
struct _ast3570; // ParmVarDecl message
struct _ast3571; // TemplateSpecializationType Local<v8::String>
struct _ast3572; // FunctionProtoType void (Local<v8::String>)
struct _ast3573; // CXXMethodDecl WriteHostObject
struct _ast3574; // ParmVarDecl isolate
struct _ast3575; // ParmVarDecl object
struct _ast3576; // TemplateSpecializationType Local<v8::Object>
struct _ast3577; // FunctionProtoType Maybe<bool> (v8::Isolate *,
                 // Local<v8::Object>)
struct _ast3578; // TemplateSpecializationType Maybe<bool>
struct _ast3579; // CXXMethodDecl GetSharedArrayBufferId
struct _ast3580; // ParmVarDecl isolate
struct _ast3581; // ParmVarDecl shared_array_buffer
struct _ast3582; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast3583; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *,
                 // Local<v8::SharedArrayBuffer>)
struct _ast3584; // TemplateSpecializationType Maybe<uint32_t>
struct _ast3585; // CXXMethodDecl GetWasmModuleTransferId
struct _ast3586; // ParmVarDecl isolate
struct _ast3587; // ParmVarDecl module
struct _ast3588; // TemplateSpecializationType Local<v8::WasmModuleObject>
struct _ast3589; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *,
                 // Local<v8::WasmModuleObject>)
struct _ast3590; // TemplateSpecializationType Maybe<uint32_t>
struct _ast3591; // CXXMethodDecl ReallocateBufferMemory
struct _ast3592; // ParmVarDecl old_buffer
struct _ast3593; // ParmVarDecl size
struct _ast3594; // ParmVarDecl actual_size
struct _ast3595; // PointerType size_t *
struct _ast3596; // FunctionProtoType void *(void *, size_t, size_t *)
struct _ast3597; // CXXMethodDecl FreeBufferMemory
struct _ast3598; // ParmVarDecl buffer
struct _ast3599; // FunctionProtoType void (void *)
struct _ast3600; // CXXMethodDecl operator=
struct _ast3601; // ParmVarDecl
struct _ast3602; // LValueReferenceType const v8::ValueSerializer::Delegate &
struct _ast3603; // RecordType const v8::ValueSerializer::Delegate
struct _ast3604; // FunctionProtoType v8::ValueSerializer::Delegate &(const
                 // v8::ValueSerializer::Delegate &)
struct _ast3605; // LValueReferenceType v8::ValueSerializer::Delegate &
struct _ast3606; // CXXConstructorDecl ValueSerializer
struct _ast3607; // ParmVarDecl isolate
struct _ast3608; // PointerType v8::ValueSerializer *
struct _ast3609; // CXXConstructorDecl ValueSerializer
struct _ast3610; // ParmVarDecl isolate
struct _ast3611; // ParmVarDecl delegate
struct _ast3612; // FunctionProtoType void (v8::Isolate *,
                 // v8::ValueSerializer::Delegate *)
struct _ast3613; // CXXDestructorDecl ~ValueSerializer
struct _ast3614; // FunctionProtoType void ()
struct _ast3615; // CXXMethodDecl WriteHeader
struct _ast3616; // CXXMethodDecl WriteValue
struct _ast3617; // ParmVarDecl context
struct _ast3618; // TemplateSpecializationType Local<v8::Context>
struct _ast3619; // ParmVarDecl value
struct _ast3620; // TemplateSpecializationType Local<v8::Value>
struct _ast3621; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast3622; // TemplateSpecializationType Maybe<bool>
struct _ast3623; // CXXMethodDecl Release
struct _ast3624; // FunctionProtoType std::pair<uint8_t *, size_t> ()
struct _ast3625; // ElaboratedType std::pair<uint8_t *, size_t>
struct _ast3626; // CXXMethodDecl TransferArrayBuffer
struct _ast3627; // ParmVarDecl transfer_id
struct _ast3628; // ParmVarDecl array_buffer
struct _ast3629; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast3630; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3631; // CXXMethodDecl SetTreatArrayBufferViewsAsHostObjects
struct _ast3632; // ParmVarDecl mode
struct _ast3633; // FunctionProtoType void (bool)
struct _ast3634; // CXXMethodDecl WriteUint32
struct _ast3635; // ParmVarDecl value
struct _ast3636; // FunctionProtoType void (uint32_t)
struct _ast3637; // CXXMethodDecl WriteUint64
struct _ast3638; // ParmVarDecl value
struct _ast3639; // TypedefType uint64_t
struct _ast3640; // FunctionProtoType void (uint64_t)
struct _ast3641; // CXXMethodDecl WriteDouble
struct _ast3642; // ParmVarDecl value
struct _ast3643; // BuiltinType double
struct _ast3644; // FunctionProtoType void (double)
struct _ast3645; // CXXMethodDecl WriteRawBytes
struct _ast3646; // ParmVarDecl source
struct _ast3647; // ParmVarDecl length
struct _ast3648; // FunctionProtoType void (const void *, size_t)
struct _ast3649; // CXXConstructorDecl ValueSerializer
struct _ast3650; // ParmVarDecl
struct _ast3651; // LValueReferenceType const v8::ValueSerializer &
struct _ast3652; // RecordType const v8::ValueSerializer
struct _ast3653; // FunctionProtoType void (const v8::ValueSerializer &)
struct _ast3654; // CXXMethodDecl operator=
struct _ast3655; // ParmVarDecl
struct _ast3656; // CXXRecordDecl ValueDeserializer
struct _ast3657; // RecordType v8::ValueDeserializer
struct _ast3658; // FieldDecl private_
struct _ast3659; // PointerType v8::ValueDeserializer::PrivateData *
struct _ast3660; // RecordType v8::ValueDeserializer::PrivateData
struct _ast3661; // CXXRecordDecl PrivateData
struct _ast3662; // CXXRecordDecl ValueDeserializer
struct _ast3663; // CXXRecordDecl Delegate
struct _ast3664; // RecordType v8::ValueDeserializer::Delegate
struct _ast3665; // CXXRecordDecl Delegate
struct _ast3666; // CXXDestructorDecl ~Delegate
struct _ast3667; // FunctionProtoType void ()
struct _ast3668; // PointerType v8::ValueDeserializer::Delegate *
struct _ast3669; // CXXMethodDecl ReadHostObject
struct _ast3670; // ParmVarDecl isolate
struct _ast3671; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *)
struct _ast3672; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast3673; // CXXMethodDecl GetWasmModuleFromId
struct _ast3674; // ParmVarDecl isolate
struct _ast3675; // ParmVarDecl transfer_id
struct _ast3676; // FunctionProtoType MaybeLocal<v8::WasmModuleObject>
                 // (v8::Isolate *, uint32_t)
struct _ast3677; // TemplateSpecializationType MaybeLocal<v8::WasmModuleObject>
struct _ast3678; // CXXMethodDecl GetSharedArrayBufferFromId
struct _ast3679; // ParmVarDecl isolate
struct _ast3680; // ParmVarDecl clone_id
struct _ast3681; // FunctionProtoType MaybeLocal<v8::SharedArrayBuffer>
                 // (v8::Isolate *, uint32_t)
struct _ast3682; // TemplateSpecializationType MaybeLocal<v8::SharedArrayBuffer>
struct _ast3683; // CXXMethodDecl operator=
struct _ast3684; // ParmVarDecl
struct _ast3685; // LValueReferenceType const v8::ValueDeserializer::Delegate &
struct _ast3686; // RecordType const v8::ValueDeserializer::Delegate
struct _ast3687; // FunctionProtoType v8::ValueDeserializer::Delegate &(const
                 // v8::ValueDeserializer::Delegate &)
struct _ast3688; // LValueReferenceType v8::ValueDeserializer::Delegate &
struct _ast3689; // CXXConstructorDecl ValueDeserializer
struct _ast3690; // ParmVarDecl isolate
struct _ast3691; // ParmVarDecl data
struct _ast3692; // ParmVarDecl size
struct _ast3693; // FunctionProtoType void (v8::Isolate *, const uint8_t *,
                 // size_t)
struct _ast3694; // PointerType v8::ValueDeserializer *
struct _ast3695; // CXXConstructorDecl ValueDeserializer
struct _ast3696; // ParmVarDecl isolate
struct _ast3697; // ParmVarDecl data
struct _ast3698; // ParmVarDecl size
struct _ast3699; // ParmVarDecl delegate
struct _ast3700; // FunctionProtoType void (v8::Isolate *, const uint8_t *,
                 // size_t, v8::ValueDeserializer::Delegate *)
struct _ast3701; // CXXDestructorDecl ~ValueDeserializer
struct _ast3702; // FunctionProtoType void ()
struct _ast3703; // CXXMethodDecl ReadHeader
struct _ast3704; // ParmVarDecl context
struct _ast3705; // TemplateSpecializationType Local<v8::Context>
struct _ast3706; // FunctionProtoType Maybe<bool> (Local<v8::Context>)
struct _ast3707; // TemplateSpecializationType Maybe<bool>
struct _ast3708; // CXXMethodDecl ReadValue
struct _ast3709; // ParmVarDecl context
struct _ast3710; // TemplateSpecializationType Local<v8::Context>
struct _ast3711; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3712; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3713; // CXXMethodDecl TransferArrayBuffer
struct _ast3714; // ParmVarDecl transfer_id
struct _ast3715; // ParmVarDecl array_buffer
struct _ast3716; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast3717; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3718; // CXXMethodDecl TransferSharedArrayBuffer
struct _ast3719; // ParmVarDecl id
struct _ast3720; // ParmVarDecl shared_array_buffer
struct _ast3721; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast3722; // FunctionProtoType void (uint32_t,
                 // Local<v8::SharedArrayBuffer>)
struct _ast3723; // CXXMethodDecl SetSupportsLegacyWireFormat
struct _ast3724; // ParmVarDecl supports_legacy_wire_format
struct _ast3725; // CXXMethodDecl SetExpectInlineWasm
struct _ast3726; // ParmVarDecl allow_inline_wasm
struct _ast3727; // CXXMethodDecl GetWireFormatVersion
struct _ast3728; // FunctionProtoType uint32_t () const
struct _ast3729; // PointerType const v8::ValueDeserializer *
struct _ast3730; // RecordType const v8::ValueDeserializer
struct _ast3731; // CXXMethodDecl ReadUint32
struct _ast3732; // ParmVarDecl value
struct _ast3733; // PointerType uint32_t *
struct _ast3734; // FunctionProtoType bool (uint32_t *)
struct _ast3735; // CXXMethodDecl ReadUint64
struct _ast3736; // ParmVarDecl value
struct _ast3737; // PointerType uint64_t *
struct _ast3738; // FunctionProtoType bool (uint64_t *)
struct _ast3739; // CXXMethodDecl ReadDouble
struct _ast3740; // ParmVarDecl value
struct _ast3741; // PointerType double *
struct _ast3742; // FunctionProtoType bool (double *)
struct _ast3743; // CXXMethodDecl ReadRawBytes
struct _ast3744; // ParmVarDecl length
struct _ast3745; // ParmVarDecl data
struct _ast3746; // PointerType const void **
struct _ast3747; // FunctionProtoType bool (size_t, const void **)
struct _ast3748; // CXXConstructorDecl ValueDeserializer
struct _ast3749; // ParmVarDecl
struct _ast3750; // LValueReferenceType const v8::ValueDeserializer &
struct _ast3751; // FunctionProtoType void (const v8::ValueDeserializer &)
struct _ast3752; // CXXMethodDecl operator=
struct _ast3753; // ParmVarDecl
struct _ast3754; // CXXRecordDecl Value
struct _ast3755; // CXXMethodDecl IsUndefined
struct _ast3756; // PointerType const v8::Value *
struct _ast3757; // RecordType const v8::Value
struct _ast3758; // CXXMethodDecl IsNull
struct _ast3759; // CXXMethodDecl IsNullOrUndefined
struct _ast3760; // CXXMethodDecl IsTrue
struct _ast3761; // CXXMethodDecl IsFalse
struct _ast3762; // CXXMethodDecl IsName
struct _ast3763; // CXXMethodDecl IsString
struct _ast3764; // CXXMethodDecl IsSymbol
struct _ast3765; // CXXMethodDecl IsFunction
struct _ast3766; // CXXMethodDecl IsArray
struct _ast3767; // CXXMethodDecl IsObject
struct _ast3768; // CXXMethodDecl IsBigInt
struct _ast3769; // CXXMethodDecl IsBoolean
struct _ast3770; // CXXMethodDecl IsNumber
struct _ast3771; // CXXMethodDecl IsExternal
struct _ast3772; // CXXMethodDecl IsInt32
struct _ast3773; // CXXMethodDecl IsUint32
struct _ast3774; // CXXMethodDecl IsDate
struct _ast3775; // CXXMethodDecl IsArgumentsObject
struct _ast3776; // CXXMethodDecl IsBigIntObject
struct _ast3777; // CXXMethodDecl IsBooleanObject
struct _ast3778; // CXXMethodDecl IsNumberObject
struct _ast3779; // CXXMethodDecl IsStringObject
struct _ast3780; // CXXMethodDecl IsSymbolObject
struct _ast3781; // CXXMethodDecl IsNativeError
struct _ast3782; // CXXMethodDecl IsRegExp
struct _ast3783; // CXXMethodDecl IsAsyncFunction
struct _ast3784; // CXXMethodDecl IsGeneratorFunction
struct _ast3785; // CXXMethodDecl IsGeneratorObject
struct _ast3786; // CXXMethodDecl IsPromise
struct _ast3787; // CXXMethodDecl IsMap
struct _ast3788; // CXXMethodDecl IsSet
struct _ast3789; // CXXMethodDecl IsMapIterator
struct _ast3790; // CXXMethodDecl IsSetIterator
struct _ast3791; // CXXMethodDecl IsWeakMap
struct _ast3792; // CXXMethodDecl IsWeakSet
struct _ast3793; // CXXMethodDecl IsArrayBuffer
struct _ast3794; // CXXMethodDecl IsArrayBufferView
struct _ast3795; // CXXMethodDecl IsTypedArray
struct _ast3796; // CXXMethodDecl IsUint8Array
struct _ast3797; // CXXMethodDecl IsUint8ClampedArray
struct _ast3798; // CXXMethodDecl IsInt8Array
struct _ast3799; // CXXMethodDecl IsUint16Array
struct _ast3800; // CXXMethodDecl IsInt16Array
struct _ast3801; // CXXMethodDecl IsUint32Array
struct _ast3802; // CXXMethodDecl IsInt32Array
struct _ast3803; // CXXMethodDecl IsFloat32Array
struct _ast3804; // CXXMethodDecl IsFloat64Array
struct _ast3805; // CXXMethodDecl IsBigInt64Array
struct _ast3806; // CXXMethodDecl IsBigUint64Array
struct _ast3807; // CXXMethodDecl IsDataView
struct _ast3808; // CXXMethodDecl IsSharedArrayBuffer
struct _ast3809; // CXXMethodDecl IsProxy
struct _ast3810; // CXXMethodDecl IsWebAssemblyCompiledModule
struct _ast3811; // CXXMethodDecl IsModuleNamespaceObject
struct _ast3812; // CXXMethodDecl ToBigInt
struct _ast3813; // ParmVarDecl context
struct _ast3814; // TemplateSpecializationType Local<v8::Context>
struct _ast3815; // FunctionProtoType MaybeLocal<v8::BigInt>
                 // (Local<v8::Context>) const
struct _ast3816; // TemplateSpecializationType MaybeLocal<v8::BigInt>
struct _ast3817; // CXXMethodDecl ToNumber
struct _ast3818; // ParmVarDecl context
struct _ast3819; // TemplateSpecializationType Local<v8::Context>
struct _ast3820; // FunctionProtoType MaybeLocal<v8::Number>
                 // (Local<v8::Context>) const
struct _ast3821; // TemplateSpecializationType MaybeLocal<v8::Number>
struct _ast3822; // CXXMethodDecl ToString
struct _ast3823; // ParmVarDecl context
struct _ast3824; // TemplateSpecializationType Local<v8::Context>
struct _ast3825; // FunctionProtoType MaybeLocal<v8::String>
                 // (Local<v8::Context>) const
struct _ast3826; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3827; // CXXMethodDecl ToDetailString
struct _ast3828; // ParmVarDecl context
struct _ast3829; // TemplateSpecializationType Local<v8::Context>
struct _ast3830; // FunctionProtoType MaybeLocal<v8::String>
                 // (Local<v8::Context>) const
struct _ast3831; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3832; // CXXMethodDecl ToObject
struct _ast3833; // ParmVarDecl context
struct _ast3834; // TemplateSpecializationType Local<v8::Context>
struct _ast3835; // FunctionProtoType MaybeLocal<v8::Object>
                 // (Local<v8::Context>) const
struct _ast3836; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast3837; // CXXMethodDecl ToInteger
struct _ast3838; // ParmVarDecl context
struct _ast3839; // TemplateSpecializationType Local<v8::Context>
struct _ast3840; // FunctionProtoType MaybeLocal<v8::Integer>
                 // (Local<v8::Context>) const
struct _ast3841; // TemplateSpecializationType MaybeLocal<v8::Integer>
struct _ast3842; // CXXMethodDecl ToUint32
struct _ast3843; // ParmVarDecl context
struct _ast3844; // TemplateSpecializationType Local<v8::Context>
struct _ast3845; // FunctionProtoType MaybeLocal<v8::Uint32>
                 // (Local<v8::Context>) const
struct _ast3846; // TemplateSpecializationType MaybeLocal<v8::Uint32>
struct _ast3847; // CXXMethodDecl ToInt32
struct _ast3848; // ParmVarDecl context
struct _ast3849; // TemplateSpecializationType Local<v8::Context>
struct _ast3850; // FunctionProtoType MaybeLocal<v8::Int32> (Local<v8::Context>)
                 // const
struct _ast3851; // TemplateSpecializationType MaybeLocal<v8::Int32>
struct _ast3852; // CXXMethodDecl ToBoolean
struct _ast3853; // ParmVarDecl isolate
struct _ast3854; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *) const
struct _ast3855; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3856; // CXXMethodDecl ToArrayIndex
struct _ast3857; // ParmVarDecl context
struct _ast3858; // TemplateSpecializationType Local<v8::Context>
struct _ast3859; // FunctionProtoType MaybeLocal<v8::Uint32>
                 // (Local<v8::Context>) const
struct _ast3860; // TemplateSpecializationType MaybeLocal<v8::Uint32>
struct _ast3861; // CXXMethodDecl BooleanValue
struct _ast3862; // ParmVarDecl isolate
struct _ast3863; // FunctionProtoType bool (v8::Isolate *) const
struct _ast3864; // CXXMethodDecl NumberValue
struct _ast3865; // ParmVarDecl context
struct _ast3866; // TemplateSpecializationType Local<v8::Context>
struct _ast3867; // FunctionProtoType Maybe<double> (Local<v8::Context>) const
struct _ast3868; // TemplateSpecializationType Maybe<double>
struct _ast3869; // CXXMethodDecl IntegerValue
struct _ast3870; // ParmVarDecl context
struct _ast3871; // TemplateSpecializationType Local<v8::Context>
struct _ast3872; // FunctionProtoType Maybe<int64_t> (Local<v8::Context>) const
struct _ast3873; // TemplateSpecializationType Maybe<int64_t>
struct _ast3874; // CXXMethodDecl Uint32Value
struct _ast3875; // ParmVarDecl context
struct _ast3876; // TemplateSpecializationType Local<v8::Context>
struct _ast3877; // FunctionProtoType Maybe<uint32_t> (Local<v8::Context>) const
struct _ast3878; // TemplateSpecializationType Maybe<uint32_t>
struct _ast3879; // CXXMethodDecl Int32Value
struct _ast3880; // ParmVarDecl context
struct _ast3881; // TemplateSpecializationType Local<v8::Context>
struct _ast3882; // FunctionProtoType Maybe<int32_t> (Local<v8::Context>) const
struct _ast3883; // TemplateSpecializationType Maybe<int32_t>
struct _ast3884; // CXXMethodDecl Equals
struct _ast3885; // ParmVarDecl context
struct _ast3886; // TemplateSpecializationType Local<v8::Context>
struct _ast3887; // ParmVarDecl that
struct _ast3888; // TemplateSpecializationType Local<v8::Value>
struct _ast3889; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>) const
struct _ast3890; // TemplateSpecializationType Maybe<bool>
struct _ast3891; // CXXMethodDecl StrictEquals
struct _ast3892; // ParmVarDecl that
struct _ast3893; // TemplateSpecializationType Local<v8::Value>
struct _ast3894; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3895; // CXXMethodDecl SameValue
struct _ast3896; // ParmVarDecl that
struct _ast3897; // TemplateSpecializationType Local<v8::Value>
struct _ast3898; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3899; // FunctionTemplateDecl Cast
struct _ast3900; // TemplateTypeParmDecl T
struct _ast3901; // CXXMethodDecl Cast
struct _ast3902; // ParmVarDecl value
struct _ast3903; // PointerType T *
struct _ast3904; // TemplateTypeParmType T
struct _ast3905; // FunctionProtoType v8::Value *(T *)
struct _ast3906; // PointerType v8::Value *
struct _ast3907; // CXXMethodDecl TypeOf
struct _ast3908; // ParmVarDecl
struct _ast3909; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3910; // TemplateSpecializationType Local<v8::String>
struct _ast3911; // CXXMethodDecl InstanceOf
struct _ast3912; // ParmVarDecl context
struct _ast3913; // TemplateSpecializationType Local<v8::Context>
struct _ast3914; // ParmVarDecl object
struct _ast3915; // TemplateSpecializationType Local<v8::Object>
struct _ast3916; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Object>)
struct _ast3917; // TemplateSpecializationType Maybe<bool>
struct _ast3918; // CXXRecordDecl Primitive
struct _ast3919; // CXXRecordDecl Boolean
struct _ast3920; // CXXMethodDecl Value
struct _ast3921; // PointerType const v8::Boolean *
struct _ast3922; // RecordType const v8::Boolean
struct _ast3923; // CXXMethodDecl Cast
struct _ast3924; // ParmVarDecl obj
struct _ast3925; // PointerType v8::Value *
struct _ast3926; // ElaboratedType v8::Value
struct _ast3927; // FunctionProtoType v8::Boolean *(v8::Value *)
struct _ast3928; // PointerType v8::Boolean *
struct _ast3929; // CXXMethodDecl New
struct _ast3930; // ParmVarDecl isolate
struct _ast3931; // ParmVarDecl value
struct _ast3932; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, bool)
struct _ast3933; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3934; // CXXRecordDecl Name
struct _ast3935; // CXXMethodDecl GetIdentityHash
struct _ast3936; // PointerType v8::Name *
struct _ast3937; // CXXMethodDecl Cast
struct _ast3938; // ParmVarDecl obj
struct _ast3939; // FunctionProtoType v8::Name *(v8::Value *)
struct _ast3940; // EnumDecl NewStringType
struct _ast3941; // EnumConstantDecl kNormal
struct _ast3942; // EnumConstantDecl kInternalized
struct _ast3943; // CXXRecordDecl String
struct _ast3944; // VarDecl kMaxLength
struct _ast3945; // EnumDecl Encoding
struct _ast3946; // EnumConstantDecl UNKNOWN_ENCODING
struct _ast3947; // EnumConstantDecl TWO_BYTE_ENCODING
struct _ast3948; // EnumConstantDecl ONE_BYTE_ENCODING
struct _ast3949; // CXXMethodDecl Length
struct _ast3950; // PointerType const v8::String *
struct _ast3951; // RecordType const v8::String
struct _ast3952; // CXXMethodDecl Utf8Length
struct _ast3953; // ParmVarDecl isolate
struct _ast3954; // FunctionProtoType int (v8::Isolate *) const
struct _ast3955; // CXXMethodDecl IsOneByte
struct _ast3956; // CXXMethodDecl ContainsOnlyOneByte
struct _ast3957; // EnumDecl WriteOptions
struct _ast3958; // EnumConstantDecl NO_OPTIONS
struct _ast3959; // EnumConstantDecl HINT_MANY_WRITES_EXPECTED
struct _ast3960; // EnumConstantDecl NO_NULL_TERMINATION
struct _ast3961; // EnumConstantDecl PRESERVE_ONE_BYTE_NULL
struct _ast3962; // EnumConstantDecl REPLACE_INVALID_UTF8
struct _ast3963; // CXXMethodDecl Write
struct _ast3964; // ParmVarDecl isolate
struct _ast3965; // ParmVarDecl buffer
struct _ast3966; // PointerType uint16_t *
struct _ast3967; // ParmVarDecl start
struct _ast3968; // ParmVarDecl length
struct _ast3969; // ParmVarDecl options
struct _ast3970; // FunctionProtoType int (v8::Isolate *, uint16_t *, int, int,
                 // int) const
struct _ast3971; // CXXMethodDecl WriteOneByte
struct _ast3972; // ParmVarDecl isolate
struct _ast3973; // ParmVarDecl buffer
struct _ast3974; // PointerType uint8_t *
struct _ast3975; // ParmVarDecl start
struct _ast3976; // ParmVarDecl length
struct _ast3977; // ParmVarDecl options
struct _ast3978; // FunctionProtoType int (v8::Isolate *, uint8_t *, int, int,
                 // int) const
struct _ast3979; // CXXMethodDecl WriteUtf8
struct _ast3980; // ParmVarDecl isolate
struct _ast3981; // ParmVarDecl buffer
struct _ast3982; // PointerType char *
struct _ast3983; // ParmVarDecl length
struct _ast3984; // ParmVarDecl nchars_ref
struct _ast3985; // PointerType int *
struct _ast3986; // ParmVarDecl options
struct _ast3987; // FunctionProtoType int (v8::Isolate *, char *, int, int *,
                 // int) const
struct _ast3988; // CXXMethodDecl Empty
struct _ast3989; // ParmVarDecl isolate
struct _ast3990; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3991; // TemplateSpecializationType Local<v8::String>
struct _ast3992; // CXXMethodDecl IsExternal
struct _ast3993; // CXXMethodDecl IsExternalOneByte
struct _ast3994; // CXXRecordDecl ExternalStringResourceBase
struct _ast3995; // RecordType v8::String::ExternalStringResourceBase
struct _ast3996; // CXXRecordDecl ExternalStringResourceBase
struct _ast3997; // CXXDestructorDecl ~ExternalStringResourceBase
struct _ast3998; // PointerType v8::String::ExternalStringResourceBase *
struct _ast3999; // CXXMethodDecl IsCacheable
struct _ast4000; // PointerType const v8::String::ExternalStringResourceBase *
struct _ast4001; // RecordType const v8::String::ExternalStringResourceBase
struct _ast4002; // CXXConstructorDecl ExternalStringResourceBase
struct _ast4003; // ParmVarDecl
struct _ast4004; // LValueReferenceType const
                 // v8::String::ExternalStringResourceBase &
struct _ast4005; // FunctionProtoType void (const
                 // v8::String::ExternalStringResourceBase &)
struct _ast4006; // CXXMethodDecl operator=
struct _ast4007; // ParmVarDecl
struct _ast4008; // CXXConstructorDecl ExternalStringResourceBase
struct _ast4009; // FunctionProtoType void ()
struct _ast4010; // CXXMethodDecl Dispose
struct _ast4011; // CXXMethodDecl Lock
struct _ast4012; // FunctionProtoType void () const
struct _ast4013; // CXXMethodDecl Unlock
struct _ast4014; // CXXRecordDecl ExternalStringResource
struct _ast4015; // RecordType v8::String::ExternalStringResource
struct _ast4016; // CXXBaseSpecifier Record
                 // v8::String::ExternalStringResourceBase
struct _ast4017; // CXXRecordDecl ExternalStringResource
struct _ast4018; // CXXDestructorDecl ~ExternalStringResource
struct _ast4019; // PointerType v8::String::ExternalStringResource *
struct _ast4020; // CXXMethodDecl data
struct _ast4021; // FunctionProtoType const uint16_t *() const
struct _ast4022; // PointerType const uint16_t *
struct _ast4023; // TypedefType const uint16_t
struct _ast4024; // PointerType const v8::String::ExternalStringResource *
struct _ast4025; // RecordType const v8::String::ExternalStringResource
struct _ast4026; // CXXMethodDecl length
struct _ast4027; // FunctionProtoType size_t () const
struct _ast4028; // CXXConstructorDecl ExternalStringResource
struct _ast4029; // FunctionProtoType void ()
struct _ast4030; // CXXConstructorDecl ExternalStringResource
struct _ast4031; // ParmVarDecl
struct _ast4032; // LValueReferenceType const v8::String::ExternalStringResource
                 // &
struct _ast4033; // FunctionProtoType void (const
                 // v8::String::ExternalStringResource &)
struct _ast4034; // CXXMethodDecl operator=
struct _ast4035; // ParmVarDecl
struct _ast4036; // FunctionProtoType v8::String::ExternalStringResource &(const
                 // v8::String::ExternalStringResource &)
struct _ast4037; // LValueReferenceType v8::String::ExternalStringResource &
struct _ast4038; // CXXRecordDecl ExternalOneByteStringResource
struct _ast4039; // RecordType v8::String::ExternalOneByteStringResource
struct _ast4040; // CXXBaseSpecifier Record
                 // v8::String::ExternalStringResourceBase
struct _ast4041; // CXXRecordDecl ExternalOneByteStringResource
struct _ast4042; // CXXDestructorDecl ~ExternalOneByteStringResource
struct _ast4043; // PointerType v8::String::ExternalOneByteStringResource *
struct _ast4044; // CXXMethodDecl data
struct _ast4045; // FunctionProtoType const char *() const
struct _ast4046; // PointerType const v8::String::ExternalOneByteStringResource
                 // *
struct _ast4047; // RecordType const v8::String::ExternalOneByteStringResource
struct _ast4048; // CXXMethodDecl length
struct _ast4049; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast4050; // FunctionProtoType void ()
struct _ast4051; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast4052; // ParmVarDecl
struct _ast4053; // LValueReferenceType const
                 // v8::String::ExternalOneByteStringResource &
struct _ast4054; // FunctionProtoType void (const
                 // v8::String::ExternalOneByteStringResource &)
struct _ast4055; // CXXMethodDecl operator=
struct _ast4056; // ParmVarDecl
struct _ast4057; // FunctionProtoType v8::String::ExternalOneByteStringResource
                 // &(const v8::String::ExternalOneByteStringResource &)
struct _ast4058; // LValueReferenceType
                 // v8::String::ExternalOneByteStringResource &
struct _ast4059; // CXXMethodDecl GetExternalStringResourceBase
struct _ast4060; // ParmVarDecl encoding_out
struct _ast4061; // PointerType v8::String::Encoding *
struct _ast4062; // EnumType v8::String::Encoding
struct _ast4063; // FunctionProtoType v8::String::ExternalStringResourceBase
                 // *(v8::String::Encoding *) const
struct _ast4064; // CXXMethodDecl GetExternalStringResource
struct _ast4065; // FunctionProtoType v8::String::ExternalStringResource *()
                 // const
struct _ast4066; // CXXMethodDecl GetExternalOneByteStringResource
struct _ast4067; // FunctionProtoType const
                 // v8::String::ExternalOneByteStringResource *() const
struct _ast4068; // CXXMethodDecl Cast
struct _ast4069; // ParmVarDecl obj
struct _ast4070; // FunctionProtoType v8::String *(v8::Value *)
struct _ast4071; // PointerType v8::String *
struct _ast4072; // CXXMethodDecl NewFromUtf8
struct _ast4073; // ParmVarDecl isolate
struct _ast4074; // ParmVarDecl data
struct _ast4075; // ParmVarDecl type
struct _ast4076; // EnumType v8::NewStringType
struct _ast4077; // ParmVarDecl length
struct _ast4078; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                 // const char *, v8::NewStringType, int)
struct _ast4079; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4080; // CXXMethodDecl NewFromOneByte
struct _ast4081; // ParmVarDecl isolate
struct _ast4082; // ParmVarDecl data
struct _ast4083; // ParmVarDecl type
struct _ast4084; // ParmVarDecl length
struct _ast4085; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                 // const uint8_t *, v8::NewStringType, int)
struct _ast4086; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4087; // CXXMethodDecl NewFromTwoByte
struct _ast4088; // ParmVarDecl isolate
struct _ast4089; // ParmVarDecl data
struct _ast4090; // ParmVarDecl type
struct _ast4091; // ParmVarDecl length
struct _ast4092; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                 // const uint16_t *, v8::NewStringType, int)
struct _ast4093; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4094; // CXXMethodDecl Concat
struct _ast4095; // ParmVarDecl isolate
struct _ast4096; // ParmVarDecl left
struct _ast4097; // TemplateSpecializationType Local<v8::String>
struct _ast4098; // ParmVarDecl right
struct _ast4099; // TemplateSpecializationType Local<v8::String>
struct _ast4100; // FunctionProtoType Local<v8::String> (v8::Isolate *,
                 // Local<v8::String>, Local<v8::String>)
struct _ast4101; // TemplateSpecializationType Local<v8::String>
struct _ast4102; // CXXMethodDecl NewExternalTwoByte
struct _ast4103; // ParmVarDecl isolate
struct _ast4104; // ParmVarDecl resource
struct _ast4105; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                 // v8::String::ExternalStringResource *)
struct _ast4106; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4107; // CXXMethodDecl MakeExternal
struct _ast4108; // ParmVarDecl resource
struct _ast4109; // FunctionProtoType bool (v8::String::ExternalStringResource
                 // *)
struct _ast4110; // CXXMethodDecl NewExternalOneByte
struct _ast4111; // ParmVarDecl isolate
struct _ast4112; // ParmVarDecl resource
struct _ast4113; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                 // v8::String::ExternalOneByteStringResource *)
struct _ast4114; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4115; // CXXMethodDecl MakeExternal
struct _ast4116; // ParmVarDecl resource
struct _ast4117; // FunctionProtoType bool
                 // (v8::String::ExternalOneByteStringResource *)
struct _ast4118; // CXXMethodDecl CanMakeExternal
struct _ast4119; // CXXMethodDecl StringEquals
struct _ast4120; // ParmVarDecl str
struct _ast4121; // TemplateSpecializationType Local<v8::String>
struct _ast4122; // FunctionProtoType bool (Local<v8::String>)
struct _ast4123; // CXXRecordDecl Utf8Value
struct _ast4124; // RecordType v8::String::Utf8Value
struct _ast4125; // FieldDecl str_
struct _ast4126; // FieldDecl length_
struct _ast4127; // CXXRecordDecl Utf8Value
struct _ast4128; // CXXConstructorDecl Utf8Value
struct _ast4129; // ParmVarDecl isolate
struct _ast4130; // ParmVarDecl obj
struct _ast4131; // TemplateSpecializationType Local<v8::Value>
struct _ast4132; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4133; // PointerType v8::String::Utf8Value *
struct _ast4134; // CXXDestructorDecl ~Utf8Value
struct _ast4135; // FunctionProtoType void ()
struct _ast4136; // CXXMethodDecl operator*
struct _ast4137; // FunctionProtoType char *()
struct _ast4138; // CXXMethodDecl operator*
struct _ast4139; // PointerType const v8::String::Utf8Value *
struct _ast4140; // RecordType const v8::String::Utf8Value
struct _ast4141; // CXXMethodDecl length
struct _ast4142; // CXXConstructorDecl Utf8Value
struct _ast4143; // ParmVarDecl
struct _ast4144; // LValueReferenceType const v8::String::Utf8Value &
struct _ast4145; // FunctionProtoType void (const v8::String::Utf8Value &)
struct _ast4146; // CXXMethodDecl operator=
struct _ast4147; // ParmVarDecl
struct _ast4148; // CXXRecordDecl Value
struct _ast4149; // RecordType v8::String::Value
struct _ast4150; // FieldDecl str_
struct _ast4151; // FieldDecl length_
struct _ast4152; // CXXRecordDecl Value
struct _ast4153; // CXXConstructorDecl Value
struct _ast4154; // ParmVarDecl isolate
struct _ast4155; // ParmVarDecl obj
struct _ast4156; // TemplateSpecializationType Local<v8::Value>
struct _ast4157; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4158; // PointerType v8::String::Value *
struct _ast4159; // CXXDestructorDecl ~Value
struct _ast4160; // FunctionProtoType void ()
struct _ast4161; // CXXMethodDecl operator*
struct _ast4162; // FunctionProtoType uint16_t *()
struct _ast4163; // CXXMethodDecl operator*
struct _ast4164; // PointerType const v8::String::Value *
struct _ast4165; // RecordType const v8::String::Value
struct _ast4166; // CXXMethodDecl length
struct _ast4167; // CXXConstructorDecl Value
struct _ast4168; // ParmVarDecl
struct _ast4169; // LValueReferenceType const v8::String::Value &
struct _ast4170; // FunctionProtoType void (const v8::String::Value &)
struct _ast4171; // CXXMethodDecl operator=
struct _ast4172; // ParmVarDecl
struct _ast4173; // CXXRecordDecl Symbol
struct _ast4174; // CXXMethodDecl Name
struct _ast4175; // FunctionProtoType Local<v8::Value> () const
struct _ast4176; // TemplateSpecializationType Local<v8::Value>
struct _ast4177; // PointerType const v8::Symbol *
struct _ast4178; // RecordType const v8::Symbol
struct _ast4179; // CXXMethodDecl New
struct _ast4180; // ParmVarDecl isolate
struct _ast4181; // ParmVarDecl name
struct _ast4182; // TemplateSpecializationType Local<v8::String>
struct _ast4183; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *,
                 // Local<v8::String>)
struct _ast4184; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4185; // CXXMethodDecl For
struct _ast4186; // ParmVarDecl isolate
struct _ast4187; // ParmVarDecl name
struct _ast4188; // TemplateSpecializationType Local<v8::String>
struct _ast4189; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *,
                 // Local<v8::String>)
struct _ast4190; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4191; // CXXMethodDecl ForApi
struct _ast4192; // ParmVarDecl isolate
struct _ast4193; // ParmVarDecl name
struct _ast4194; // TemplateSpecializationType Local<v8::String>
struct _ast4195; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *,
                 // Local<v8::String>)
struct _ast4196; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4197; // CXXMethodDecl GetAsyncIterator
struct _ast4198; // ParmVarDecl isolate
struct _ast4199; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4200; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4201; // CXXMethodDecl GetHasInstance
struct _ast4202; // ParmVarDecl isolate
struct _ast4203; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4204; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4205; // CXXMethodDecl GetIsConcatSpreadable
struct _ast4206; // ParmVarDecl isolate
struct _ast4207; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4208; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4209; // CXXMethodDecl GetIterator
struct _ast4210; // ParmVarDecl isolate
struct _ast4211; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4212; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4213; // CXXMethodDecl GetMatch
struct _ast4214; // ParmVarDecl isolate
struct _ast4215; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4216; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4217; // CXXMethodDecl GetReplace
struct _ast4218; // ParmVarDecl isolate
struct _ast4219; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4220; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4221; // CXXMethodDecl GetSearch
struct _ast4222; // ParmVarDecl isolate
struct _ast4223; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4224; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4225; // CXXMethodDecl GetSplit
struct _ast4226; // ParmVarDecl isolate
struct _ast4227; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4228; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4229; // CXXMethodDecl GetToPrimitive
struct _ast4230; // ParmVarDecl isolate
struct _ast4231; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4232; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4233; // CXXMethodDecl GetToStringTag
struct _ast4234; // ParmVarDecl isolate
struct _ast4235; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4236; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4237; // CXXMethodDecl GetUnscopables
struct _ast4238; // ParmVarDecl isolate
struct _ast4239; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4240; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4241; // CXXMethodDecl Cast
struct _ast4242; // ParmVarDecl obj
struct _ast4243; // FunctionProtoType v8::Symbol *(v8::Value *)
struct _ast4244; // PointerType v8::Symbol *
struct _ast4245; // CXXRecordDecl Private
struct _ast4246; // CXXMethodDecl Name
struct _ast4247; // FunctionProtoType Local<v8::Value> () const
struct _ast4248; // TemplateSpecializationType Local<v8::Value>
struct _ast4249; // PointerType const v8::Private *
struct _ast4250; // RecordType const v8::Private
struct _ast4251; // CXXMethodDecl New
struct _ast4252; // ParmVarDecl isolate
struct _ast4253; // ParmVarDecl name
struct _ast4254; // TemplateSpecializationType Local<v8::String>
struct _ast4255; // FunctionProtoType Local<v8::Private> (v8::Isolate *,
                 // Local<v8::String>)
struct _ast4256; // TemplateSpecializationType Local<v8::Private>
struct _ast4257; // CXXMethodDecl ForApi
struct _ast4258; // ParmVarDecl isolate
struct _ast4259; // ParmVarDecl name
struct _ast4260; // TemplateSpecializationType Local<v8::String>
struct _ast4261; // FunctionProtoType Local<v8::Private> (v8::Isolate *,
                 // Local<v8::String>)
struct _ast4262; // TemplateSpecializationType Local<v8::Private>
struct _ast4263; // CXXMethodDecl Cast
struct _ast4264; // ParmVarDecl data
struct _ast4265; // PointerType v8::Data *
struct _ast4266; // FunctionProtoType v8::Private *(v8::Data *)
struct _ast4267; // PointerType v8::Private *
struct _ast4268; // CXXRecordDecl Number
struct _ast4269; // CXXMethodDecl Value
struct _ast4270; // FunctionProtoType double () const
struct _ast4271; // PointerType const v8::Number *
struct _ast4272; // RecordType const v8::Number
struct _ast4273; // CXXMethodDecl New
struct _ast4274; // ParmVarDecl isolate
struct _ast4275; // ParmVarDecl value
struct _ast4276; // FunctionProtoType Local<v8::Number> (v8::Isolate *, double)
struct _ast4277; // TemplateSpecializationType Local<v8::Number>
struct _ast4278; // CXXMethodDecl Cast
struct _ast4279; // ParmVarDecl obj
struct _ast4280; // FunctionProtoType v8::Number *(v8::Value *)
struct _ast4281; // PointerType v8::Number *
struct _ast4282; // CXXRecordDecl Integer
struct _ast4283; // CXXMethodDecl New
struct _ast4284; // ParmVarDecl isolate
struct _ast4285; // ParmVarDecl value
struct _ast4286; // TypedefType int32_t
struct _ast4287; // FunctionProtoType Local<v8::Integer> (v8::Isolate *,
                 // int32_t)
struct _ast4288; // TemplateSpecializationType Local<v8::Integer>
struct _ast4289; // CXXMethodDecl NewFromUnsigned
struct _ast4290; // ParmVarDecl isolate
struct _ast4291; // ParmVarDecl value
struct _ast4292; // FunctionProtoType Local<v8::Integer> (v8::Isolate *,
                 // uint32_t)
struct _ast4293; // TemplateSpecializationType Local<v8::Integer>
struct _ast4294; // CXXMethodDecl Value
struct _ast4295; // FunctionProtoType int64_t () const
struct _ast4296; // TypedefType int64_t
struct _ast4297; // PointerType const v8::Integer *
struct _ast4298; // RecordType const v8::Integer
struct _ast4299; // CXXMethodDecl Cast
struct _ast4300; // ParmVarDecl obj
struct _ast4301; // FunctionProtoType v8::Integer *(v8::Value *)
struct _ast4302; // PointerType v8::Integer *
struct _ast4303; // CXXRecordDecl Int32
struct _ast4304; // CXXMethodDecl Value
struct _ast4305; // FunctionProtoType int32_t () const
struct _ast4306; // PointerType const v8::Int32 *
struct _ast4307; // RecordType const v8::Int32
struct _ast4308; // CXXMethodDecl Cast
struct _ast4309; // ParmVarDecl obj
struct _ast4310; // FunctionProtoType v8::Int32 *(v8::Value *)
struct _ast4311; // PointerType v8::Int32 *
struct _ast4312; // CXXRecordDecl Uint32
struct _ast4313; // CXXMethodDecl Value
struct _ast4314; // PointerType const v8::Uint32 *
struct _ast4315; // RecordType const v8::Uint32
struct _ast4316; // CXXMethodDecl Cast
struct _ast4317; // ParmVarDecl obj
struct _ast4318; // FunctionProtoType v8::Uint32 *(v8::Value *)
struct _ast4319; // PointerType v8::Uint32 *
struct _ast4320; // CXXRecordDecl BigInt
struct _ast4321; // CXXMethodDecl New
struct _ast4322; // ParmVarDecl isolate
struct _ast4323; // ParmVarDecl value
struct _ast4324; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ast4325; // TemplateSpecializationType Local<v8::BigInt>
struct _ast4326; // CXXMethodDecl NewFromUnsigned
struct _ast4327; // ParmVarDecl isolate
struct _ast4328; // ParmVarDecl value
struct _ast4329; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *,
                 // uint64_t)
struct _ast4330; // TemplateSpecializationType Local<v8::BigInt>
struct _ast4331; // CXXMethodDecl NewFromWords
struct _ast4332; // ParmVarDecl context
struct _ast4333; // TemplateSpecializationType Local<v8::Context>
struct _ast4334; // ParmVarDecl sign_bit
struct _ast4335; // ParmVarDecl word_count
struct _ast4336; // ParmVarDecl words
struct _ast4337; // PointerType const uint64_t *
struct _ast4338; // TypedefType const uint64_t
struct _ast4339; // FunctionProtoType MaybeLocal<v8::BigInt>
                 // (Local<v8::Context>, int, int, const uint64_t *)
struct _ast4340; // TemplateSpecializationType MaybeLocal<v8::BigInt>
struct _ast4341; // CXXMethodDecl Uint64Value
struct _ast4342; // ParmVarDecl lossless
struct _ast4343; // PointerType bool *
struct _ast4344; // FunctionProtoType uint64_t (bool *) const
struct _ast4345; // PointerType const v8::BigInt *
struct _ast4346; // RecordType const v8::BigInt
struct _ast4347; // CXXMethodDecl Int64Value
struct _ast4348; // ParmVarDecl lossless
struct _ast4349; // FunctionProtoType int64_t (bool *) const
struct _ast4350; // CXXMethodDecl WordCount
struct _ast4351; // CXXMethodDecl ToWordsArray
struct _ast4352; // ParmVarDecl sign_bit
struct _ast4353; // ParmVarDecl word_count
struct _ast4354; // ParmVarDecl words
struct _ast4355; // FunctionProtoType void (int *, int *, uint64_t *) const
struct _ast4356; // CXXMethodDecl Cast
struct _ast4357; // ParmVarDecl obj
struct _ast4358; // FunctionProtoType v8::BigInt *(v8::Value *)
struct _ast4359; // PointerType v8::BigInt *
struct _ast4360; // EnumDecl PropertyAttribute
struct _ast4361; // EnumConstantDecl None
struct _ast4362; // EnumConstantDecl ReadOnly
struct _ast4363; // EnumConstantDecl DontEnum
struct _ast4364; // EnumConstantDecl DontDelete
struct _ast4365; // TypedefDecl AccessorGetterCallback
struct _ast4366; // TypedefType v8::AccessorGetterCallback
struct _ast4367; // TypedefDecl AccessorNameGetterCallback
struct _ast4368; // TypedefType v8::AccessorNameGetterCallback
struct _ast4369; // TypedefDecl AccessorSetterCallback
struct _ast4370; // TypedefType v8::AccessorSetterCallback
struct _ast4371; // TypedefDecl AccessorNameSetterCallback
struct _ast4372; // TypedefType v8::AccessorNameSetterCallback
struct _ast4373; // EnumDecl AccessControl
struct _ast4374; // EnumConstantDecl DEFAULT
struct _ast4375; // EnumConstantDecl ALL_CAN_READ
struct _ast4376; // EnumConstantDecl ALL_CAN_WRITE
struct _ast4377; // EnumConstantDecl PROHIBITS_OVERWRITING
struct _ast4378; // EnumDecl PropertyFilter
struct _ast4379; // EnumConstantDecl ALL_PROPERTIES
struct _ast4380; // EnumConstantDecl ONLY_WRITABLE
struct _ast4381; // EnumConstantDecl ONLY_ENUMERABLE
struct _ast4382; // EnumConstantDecl ONLY_CONFIGURABLE
struct _ast4383; // EnumConstantDecl SKIP_STRINGS
struct _ast4384; // EnumConstantDecl SKIP_SYMBOLS
struct _ast4385; // EnumDecl SideEffectType
struct _ast4386; // EnumConstantDecl kHasSideEffect
struct _ast4387; // EnumConstantDecl kHasNoSideEffect
struct _ast4388; // EnumConstantDecl kHasSideEffectToReceiver
struct _ast4389; // EnumDecl KeyCollectionMode
struct _ast4390; // EnumConstantDecl kOwnOnly
struct _ast4391; // EnumConstantDecl kIncludePrototypes
struct _ast4392; // EnumDecl IndexFilter
struct _ast4393; // EnumConstantDecl kIncludeIndices
struct _ast4394; // EnumConstantDecl kSkipIndices
struct _ast4395; // EnumDecl KeyConversionMode
struct _ast4396; // EnumConstantDecl kConvertToString
struct _ast4397; // EnumConstantDecl kKeepNumbers
struct _ast4398; // EnumDecl IntegrityLevel
struct _ast4399; // EnumConstantDecl kFrozen
struct _ast4400; // EnumConstantDecl kSealed
struct _ast4401; // CXXRecordDecl Object
struct _ast4402; // CXXMethodDecl Set
struct _ast4403; // ParmVarDecl key
struct _ast4404; // TemplateSpecializationType Local<v8::Value>
struct _ast4405; // ParmVarDecl value
struct _ast4406; // TemplateSpecializationType Local<v8::Value>
struct _ast4407; // FunctionProtoType bool (Local<v8::Value>, Local<v8::Value>)
struct _ast4408; // PointerType v8::Object *
struct _ast4409; // CXXMethodDecl Set
struct _ast4410; // ParmVarDecl context
struct _ast4411; // TemplateSpecializationType Local<v8::Context>
struct _ast4412; // ParmVarDecl key
struct _ast4413; // TemplateSpecializationType Local<v8::Value>
struct _ast4414; // ParmVarDecl value
struct _ast4415; // TemplateSpecializationType Local<v8::Value>
struct _ast4416; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>, Local<v8::Value>)
struct _ast4417; // TemplateSpecializationType Maybe<bool>
struct _ast4418; // CXXMethodDecl Set
struct _ast4419; // ParmVarDecl index
struct _ast4420; // ParmVarDecl value
struct _ast4421; // TemplateSpecializationType Local<v8::Value>
struct _ast4422; // FunctionProtoType bool (uint32_t, Local<v8::Value>)
struct _ast4423; // CXXMethodDecl Set
struct _ast4424; // ParmVarDecl context
struct _ast4425; // TemplateSpecializationType Local<v8::Context>
struct _ast4426; // ParmVarDecl index
struct _ast4427; // ParmVarDecl value
struct _ast4428; // TemplateSpecializationType Local<v8::Value>
struct _ast4429; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t,
                 // Local<v8::Value>)
struct _ast4430; // TemplateSpecializationType Maybe<bool>
struct _ast4431; // CXXMethodDecl CreateDataProperty
struct _ast4432; // ParmVarDecl context
struct _ast4433; // TemplateSpecializationType Local<v8::Context>
struct _ast4434; // ParmVarDecl key
struct _ast4435; // TemplateSpecializationType Local<v8::Name>
struct _ast4436; // ParmVarDecl value
struct _ast4437; // TemplateSpecializationType Local<v8::Value>
struct _ast4438; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>, Local<v8::Value>)
struct _ast4439; // TemplateSpecializationType Maybe<bool>
struct _ast4440; // CXXMethodDecl CreateDataProperty
struct _ast4441; // ParmVarDecl context
struct _ast4442; // TemplateSpecializationType Local<v8::Context>
struct _ast4443; // ParmVarDecl index
struct _ast4444; // ParmVarDecl value
struct _ast4445; // TemplateSpecializationType Local<v8::Value>
struct _ast4446; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t,
                 // Local<v8::Value>)
struct _ast4447; // TemplateSpecializationType Maybe<bool>
struct _ast4448; // CXXMethodDecl DefineOwnProperty
struct _ast4449; // ParmVarDecl context
struct _ast4450; // TemplateSpecializationType Local<v8::Context>
struct _ast4451; // ParmVarDecl key
struct _ast4452; // TemplateSpecializationType Local<v8::Name>
struct _ast4453; // ParmVarDecl value
struct _ast4454; // TemplateSpecializationType Local<v8::Value>
struct _ast4455; // ParmVarDecl attributes
struct _ast4456; // EnumType v8::PropertyAttribute
struct _ast4457; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _ast4458; // TemplateSpecializationType Maybe<bool>
struct _ast4459; // CXXMethodDecl DefineProperty
struct _ast4460; // ParmVarDecl context
struct _ast4461; // TemplateSpecializationType Local<v8::Context>
struct _ast4462; // ParmVarDecl key
struct _ast4463; // TemplateSpecializationType Local<v8::Name>
struct _ast4464; // ParmVarDecl descriptor
struct _ast4465; // LValueReferenceType v8::PropertyDescriptor &
struct _ast4466; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>, v8::PropertyDescriptor &)
struct _ast4467; // TemplateSpecializationType Maybe<bool>
struct _ast4468; // CXXMethodDecl Get
struct _ast4469; // ParmVarDecl key
struct _ast4470; // TemplateSpecializationType Local<v8::Value>
struct _ast4471; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast4472; // TemplateSpecializationType Local<v8::Value>
struct _ast4473; // CXXMethodDecl Get
struct _ast4474; // ParmVarDecl context
struct _ast4475; // TemplateSpecializationType Local<v8::Context>
struct _ast4476; // ParmVarDecl key
struct _ast4477; // TemplateSpecializationType Local<v8::Value>
struct _ast4478; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4479; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4480; // CXXMethodDecl Get
struct _ast4481; // ParmVarDecl index
struct _ast4482; // FunctionProtoType Local<v8::Value> (uint32_t)
struct _ast4483; // TemplateSpecializationType Local<v8::Value>
struct _ast4484; // CXXMethodDecl Get
struct _ast4485; // ParmVarDecl context
struct _ast4486; // TemplateSpecializationType Local<v8::Context>
struct _ast4487; // ParmVarDecl index
struct _ast4488; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // uint32_t)
struct _ast4489; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4490; // CXXMethodDecl GetPropertyAttributes
struct _ast4491; // ParmVarDecl context
struct _ast4492; // TemplateSpecializationType Local<v8::Context>
struct _ast4493; // ParmVarDecl key
struct _ast4494; // TemplateSpecializationType Local<v8::Value>
struct _ast4495; // FunctionProtoType Maybe<v8::PropertyAttribute>
                 // (Local<v8::Context>, Local<v8::Value>)
struct _ast4496; // TemplateSpecializationType Maybe<v8::PropertyAttribute>
struct _ast4497; // CXXMethodDecl GetOwnPropertyDescriptor
struct _ast4498; // ParmVarDecl context
struct _ast4499; // TemplateSpecializationType Local<v8::Context>
struct _ast4500; // ParmVarDecl key
struct _ast4501; // TemplateSpecializationType Local<v8::Name>
struct _ast4502; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Name>)
struct _ast4503; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4504; // CXXMethodDecl Has
struct _ast4505; // ParmVarDecl context
struct _ast4506; // TemplateSpecializationType Local<v8::Context>
struct _ast4507; // ParmVarDecl key
struct _ast4508; // TemplateSpecializationType Local<v8::Value>
struct _ast4509; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4510; // TemplateSpecializationType Maybe<bool>
struct _ast4511; // CXXMethodDecl Delete
struct _ast4512; // ParmVarDecl context
struct _ast4513; // TemplateSpecializationType Local<v8::Context>
struct _ast4514; // ParmVarDecl key
struct _ast4515; // TemplateSpecializationType Local<v8::Value>
struct _ast4516; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4517; // TemplateSpecializationType Maybe<bool>
struct _ast4518; // CXXMethodDecl Has
struct _ast4519; // ParmVarDecl context
struct _ast4520; // TemplateSpecializationType Local<v8::Context>
struct _ast4521; // ParmVarDecl index
struct _ast4522; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4523; // TemplateSpecializationType Maybe<bool>
struct _ast4524; // CXXMethodDecl Delete
struct _ast4525; // ParmVarDecl context
struct _ast4526; // TemplateSpecializationType Local<v8::Context>
struct _ast4527; // ParmVarDecl index
struct _ast4528; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4529; // TemplateSpecializationType Maybe<bool>
struct _ast4530; // CXXMethodDecl SetAccessor
struct _ast4531; // ParmVarDecl context
struct _ast4532; // TemplateSpecializationType Local<v8::Context>
struct _ast4533; // ParmVarDecl name
struct _ast4534; // TemplateSpecializationType Local<v8::Name>
struct _ast4535; // ParmVarDecl getter
struct _ast4536; // ParmVarDecl setter
struct _ast4537; // ParmVarDecl data
struct _ast4538; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4539; // ParmVarDecl settings
struct _ast4540; // EnumType v8::AccessControl
struct _ast4541; // ParmVarDecl attribute
struct _ast4542; // ParmVarDecl getter_side_effect_type
struct _ast4543; // EnumType v8::SideEffectType
struct _ast4544; // ParmVarDecl setter_side_effect_type
struct _ast4545; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>, v8::AccessorNameGetterCallback,
                 // v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>,
                 // v8::AccessControl, v8::PropertyAttribute,
                 // v8::SideEffectType, v8::SideEffectType)
struct _ast4546; // TemplateSpecializationType Maybe<bool>
struct _ast4547; // CXXMethodDecl SetAccessorProperty
struct _ast4548; // ParmVarDecl name
struct _ast4549; // TemplateSpecializationType Local<v8::Name>
struct _ast4550; // ParmVarDecl getter
struct _ast4551; // TemplateSpecializationType Local<v8::Function>
struct _ast4552; // ParmVarDecl setter
struct _ast4553; // TemplateSpecializationType Local<v8::Function>
struct _ast4554; // ParmVarDecl attribute
struct _ast4555; // ParmVarDecl settings
struct _ast4556; // FunctionProtoType void (Local<v8::Name>,
                 // Local<v8::Function>, Local<v8::Function>,
                 // v8::PropertyAttribute, v8::AccessControl)
struct _ast4557; // CXXMethodDecl SetNativeDataProperty
struct _ast4558; // ParmVarDecl context
struct _ast4559; // TemplateSpecializationType Local<v8::Context>
struct _ast4560; // ParmVarDecl name
struct _ast4561; // TemplateSpecializationType Local<v8::Name>
struct _ast4562; // ParmVarDecl getter
struct _ast4563; // ParmVarDecl setter
struct _ast4564; // ParmVarDecl data
struct _ast4565; // TemplateSpecializationType Local<v8::Value>
struct _ast4566; // ParmVarDecl attributes
struct _ast4567; // ParmVarDecl getter_side_effect_type
struct _ast4568; // ParmVarDecl setter_side_effect_type
struct _ast4569; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>, v8::AccessorNameGetterCallback,
                 // v8::AccessorNameSetterCallback, Local<v8::Value>,
                 // v8::PropertyAttribute, v8::SideEffectType,
                 // v8::SideEffectType)
struct _ast4570; // TemplateSpecializationType Maybe<bool>
struct _ast4571; // CXXMethodDecl SetLazyDataProperty
struct _ast4572; // ParmVarDecl context
struct _ast4573; // TemplateSpecializationType Local<v8::Context>
struct _ast4574; // ParmVarDecl name
struct _ast4575; // TemplateSpecializationType Local<v8::Name>
struct _ast4576; // ParmVarDecl getter
struct _ast4577; // ParmVarDecl data
struct _ast4578; // TemplateSpecializationType Local<v8::Value>
struct _ast4579; // ParmVarDecl attributes
struct _ast4580; // ParmVarDecl getter_side_effect_type
struct _ast4581; // ParmVarDecl setter_side_effect_type
struct _ast4582; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>, v8::AccessorNameGetterCallback,
                 // Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType,
                 // v8::SideEffectType)
struct _ast4583; // TemplateSpecializationType Maybe<bool>
struct _ast4584; // CXXMethodDecl HasPrivate
struct _ast4585; // ParmVarDecl context
struct _ast4586; // TemplateSpecializationType Local<v8::Context>
struct _ast4587; // ParmVarDecl key
struct _ast4588; // TemplateSpecializationType Local<v8::Private>
struct _ast4589; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Private>)
struct _ast4590; // TemplateSpecializationType Maybe<bool>
struct _ast4591; // CXXMethodDecl SetPrivate
struct _ast4592; // ParmVarDecl context
struct _ast4593; // TemplateSpecializationType Local<v8::Context>
struct _ast4594; // ParmVarDecl key
struct _ast4595; // TemplateSpecializationType Local<v8::Private>
struct _ast4596; // ParmVarDecl value
struct _ast4597; // TemplateSpecializationType Local<v8::Value>
struct _ast4598; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Private>, Local<v8::Value>)
struct _ast4599; // TemplateSpecializationType Maybe<bool>
struct _ast4600; // CXXMethodDecl DeletePrivate
struct _ast4601; // ParmVarDecl context
struct _ast4602; // TemplateSpecializationType Local<v8::Context>
struct _ast4603; // ParmVarDecl key
struct _ast4604; // TemplateSpecializationType Local<v8::Private>
struct _ast4605; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Private>)
struct _ast4606; // TemplateSpecializationType Maybe<bool>
struct _ast4607; // CXXMethodDecl GetPrivate
struct _ast4608; // ParmVarDecl context
struct _ast4609; // TemplateSpecializationType Local<v8::Context>
struct _ast4610; // ParmVarDecl key
struct _ast4611; // TemplateSpecializationType Local<v8::Private>
struct _ast4612; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Private>)
struct _ast4613; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4614; // CXXMethodDecl GetPropertyNames
struct _ast4615; // ParmVarDecl context
struct _ast4616; // TemplateSpecializationType Local<v8::Context>
struct _ast4617; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4618; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4619; // CXXMethodDecl GetPropertyNames
struct _ast4620; // ParmVarDecl context
struct _ast4621; // TemplateSpecializationType Local<v8::Context>
struct _ast4622; // ParmVarDecl mode
struct _ast4623; // EnumType v8::KeyCollectionMode
struct _ast4624; // ParmVarDecl property_filter
struct _ast4625; // EnumType v8::PropertyFilter
struct _ast4626; // ParmVarDecl index_filter
struct _ast4627; // EnumType v8::IndexFilter
struct _ast4628; // ParmVarDecl key_conversion
struct _ast4629; // EnumType v8::KeyConversionMode
struct _ast4630; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>,
                 // v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter,
                 // v8::KeyConversionMode)
struct _ast4631; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4632; // CXXMethodDecl GetOwnPropertyNames
struct _ast4633; // ParmVarDecl context
struct _ast4634; // TemplateSpecializationType Local<v8::Context>
struct _ast4635; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4636; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4637; // CXXMethodDecl GetOwnPropertyNames
struct _ast4638; // ParmVarDecl context
struct _ast4639; // TemplateSpecializationType Local<v8::Context>
struct _ast4640; // ParmVarDecl filter
struct _ast4641; // ParmVarDecl key_conversion
struct _ast4642; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>,
                 // v8::PropertyFilter, v8::KeyConversionMode)
struct _ast4643; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4644; // CXXMethodDecl GetPrototype
struct _ast4645; // FunctionProtoType Local<v8::Value> ()
struct _ast4646; // TemplateSpecializationType Local<v8::Value>
struct _ast4647; // CXXMethodDecl SetPrototype
struct _ast4648; // ParmVarDecl context
struct _ast4649; // TemplateSpecializationType Local<v8::Context>
struct _ast4650; // ParmVarDecl prototype
struct _ast4651; // TemplateSpecializationType Local<v8::Value>
struct _ast4652; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4653; // TemplateSpecializationType Maybe<bool>
struct _ast4654; // CXXMethodDecl FindInstanceInPrototypeChain
struct _ast4655; // ParmVarDecl tmpl
struct _ast4656; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast4657; // FunctionProtoType Local<v8::Object>
                 // (Local<v8::FunctionTemplate>)
struct _ast4658; // TemplateSpecializationType Local<v8::Object>
struct _ast4659; // CXXMethodDecl ObjectProtoToString
struct _ast4660; // ParmVarDecl context
struct _ast4661; // TemplateSpecializationType Local<v8::Context>
struct _ast4662; // FunctionProtoType MaybeLocal<v8::String>
                 // (Local<v8::Context>)
struct _ast4663; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4664; // CXXMethodDecl GetConstructorName
struct _ast4665; // FunctionProtoType Local<v8::String> ()
struct _ast4666; // TemplateSpecializationType Local<v8::String>
struct _ast4667; // CXXMethodDecl SetIntegrityLevel
struct _ast4668; // ParmVarDecl context
struct _ast4669; // TemplateSpecializationType Local<v8::Context>
struct _ast4670; // ParmVarDecl level
struct _ast4671; // EnumType v8::IntegrityLevel
struct _ast4672; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // v8::IntegrityLevel)
struct _ast4673; // TemplateSpecializationType Maybe<bool>
struct _ast4674; // CXXMethodDecl InternalFieldCount
struct _ast4675; // CXXMethodDecl InternalFieldCount
struct _ast4676; // ParmVarDecl object
struct _ast4677; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4678; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4679; // TemplateSpecializationType PersistentBase<v8::Object>
struct _ast4680; // FunctionProtoType int (const PersistentBase<v8::Object> &)
struct _ast4681; // CXXMethodDecl InternalFieldCount
struct _ast4682; // ParmVarDecl object
struct _ast4683; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4684; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4685; // TemplateSpecializationType TracedGlobal<v8::Object>
struct _ast4686; // FunctionProtoType int (const TracedGlobal<v8::Object> &)
struct _ast4687; // CXXMethodDecl GetInternalField
struct _ast4688; // ParmVarDecl index
struct _ast4689; // FunctionProtoType Local<v8::Value> (int)
struct _ast4690; // TemplateSpecializationType Local<v8::Value>
struct _ast4691; // CXXMethodDecl SetInternalField
struct _ast4692; // ParmVarDecl index
struct _ast4693; // ParmVarDecl value
struct _ast4694; // TemplateSpecializationType Local<v8::Value>
struct _ast4695; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast4696; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4697; // ParmVarDecl index
struct _ast4698; // FunctionProtoType void *(int)
struct _ast4699; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4700; // ParmVarDecl object
struct _ast4701; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4702; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4703; // TemplateSpecializationType PersistentBase<v8::Object>
struct _ast4704; // ParmVarDecl index
struct _ast4705; // FunctionProtoType void *(const PersistentBase<v8::Object> &,
                 // int)
struct _ast4706; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4707; // ParmVarDecl object
struct _ast4708; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4709; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4710; // TemplateSpecializationType TracedGlobal<v8::Object>
struct _ast4711; // ParmVarDecl index
struct _ast4712; // FunctionProtoType void *(const TracedGlobal<v8::Object> &,
                 // int)
struct _ast4713; // CXXMethodDecl SetAlignedPointerInInternalField
struct _ast4714; // ParmVarDecl index
struct _ast4715; // ParmVarDecl value
struct _ast4716; // FunctionProtoType void (int, void *)
struct _ast4717; // CXXMethodDecl SetAlignedPointerInInternalFields
struct _ast4718; // ParmVarDecl argc
struct _ast4719; // ParmVarDecl indices
struct _ast4720; // DecayedType int *
struct _ast4721; // ParmVarDecl values
struct _ast4722; // DecayedType void **
struct _ast4723; // FunctionProtoType void (int, int *, void **)
struct _ast4724; // CXXMethodDecl HasOwnProperty
struct _ast4725; // ParmVarDecl context
struct _ast4726; // TemplateSpecializationType Local<v8::Context>
struct _ast4727; // ParmVarDecl key
struct _ast4728; // TemplateSpecializationType Local<v8::Name>
struct _ast4729; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>)
struct _ast4730; // TemplateSpecializationType Maybe<bool>
struct _ast4731; // CXXMethodDecl HasOwnProperty
struct _ast4732; // ParmVarDecl context
struct _ast4733; // TemplateSpecializationType Local<v8::Context>
struct _ast4734; // ParmVarDecl index
struct _ast4735; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4736; // TemplateSpecializationType Maybe<bool>
struct _ast4737; // CXXMethodDecl HasRealNamedProperty
struct _ast4738; // ParmVarDecl context
struct _ast4739; // TemplateSpecializationType Local<v8::Context>
struct _ast4740; // ParmVarDecl key
struct _ast4741; // TemplateSpecializationType Local<v8::Name>
struct _ast4742; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>)
struct _ast4743; // TemplateSpecializationType Maybe<bool>
struct _ast4744; // CXXMethodDecl HasRealIndexedProperty
struct _ast4745; // ParmVarDecl context
struct _ast4746; // TemplateSpecializationType Local<v8::Context>
struct _ast4747; // ParmVarDecl index
struct _ast4748; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4749; // TemplateSpecializationType Maybe<bool>
struct _ast4750; // CXXMethodDecl HasRealNamedCallbackProperty
struct _ast4751; // ParmVarDecl context
struct _ast4752; // TemplateSpecializationType Local<v8::Context>
struct _ast4753; // ParmVarDecl key
struct _ast4754; // TemplateSpecializationType Local<v8::Name>
struct _ast4755; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Name>)
struct _ast4756; // TemplateSpecializationType Maybe<bool>
struct _ast4757; // CXXMethodDecl GetRealNamedPropertyInPrototypeChain
struct _ast4758; // ParmVarDecl context
struct _ast4759; // TemplateSpecializationType Local<v8::Context>
struct _ast4760; // ParmVarDecl key
struct _ast4761; // TemplateSpecializationType Local<v8::Name>
struct _ast4762; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Name>)
struct _ast4763; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4764; // CXXMethodDecl GetRealNamedPropertyAttributesInPrototypeChain
struct _ast4765; // ParmVarDecl context
struct _ast4766; // TemplateSpecializationType Local<v8::Context>
struct _ast4767; // ParmVarDecl key
struct _ast4768; // TemplateSpecializationType Local<v8::Name>
struct _ast4769; // FunctionProtoType Maybe<v8::PropertyAttribute>
                 // (Local<v8::Context>, Local<v8::Name>)
struct _ast4770; // TemplateSpecializationType Maybe<v8::PropertyAttribute>
struct _ast4771; // CXXMethodDecl GetRealNamedProperty
struct _ast4772; // ParmVarDecl context
struct _ast4773; // TemplateSpecializationType Local<v8::Context>
struct _ast4774; // ParmVarDecl key
struct _ast4775; // TemplateSpecializationType Local<v8::Name>
struct _ast4776; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Name>)
struct _ast4777; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4778; // CXXMethodDecl GetRealNamedPropertyAttributes
struct _ast4779; // ParmVarDecl context
struct _ast4780; // TemplateSpecializationType Local<v8::Context>
struct _ast4781; // ParmVarDecl key
struct _ast4782; // TemplateSpecializationType Local<v8::Name>
struct _ast4783; // FunctionProtoType Maybe<v8::PropertyAttribute>
                 // (Local<v8::Context>, Local<v8::Name>)
struct _ast4784; // TemplateSpecializationType Maybe<v8::PropertyAttribute>
struct _ast4785; // CXXMethodDecl HasNamedLookupInterceptor
struct _ast4786; // CXXMethodDecl HasIndexedLookupInterceptor
struct _ast4787; // CXXMethodDecl GetIdentityHash
struct _ast4788; // CXXMethodDecl Clone
struct _ast4789; // FunctionProtoType Local<v8::Object> ()
struct _ast4790; // TemplateSpecializationType Local<v8::Object>
struct _ast4791; // CXXMethodDecl CreationContext
struct _ast4792; // FunctionProtoType Local<v8::Context> ()
struct _ast4793; // TemplateSpecializationType Local<v8::Context>
struct _ast4794; // CXXMethodDecl CreationContext
struct _ast4795; // ParmVarDecl object
struct _ast4796; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4797; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4798; // TemplateSpecializationType PersistentBase<v8::Object>
struct _ast4799; // FunctionProtoType Local<v8::Context> (const
                 // PersistentBase<v8::Object> &)
struct _ast4800; // TemplateSpecializationType Local<v8::Context>
struct _ast4801; // CXXMethodDecl IsCallable
struct _ast4802; // CXXMethodDecl IsConstructor
struct _ast4803; // CXXMethodDecl CallAsFunction
struct _ast4804; // ParmVarDecl context
struct _ast4805; // TemplateSpecializationType Local<v8::Context>
struct _ast4806; // ParmVarDecl recv
struct _ast4807; // TemplateSpecializationType Local<v8::Value>
struct _ast4808; // ParmVarDecl argc
struct _ast4809; // ParmVarDecl argv
struct _ast4810; // DecayedType Local<v8::Value> *
struct _ast4811; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Value>, int, Local<v8::Value> *)
struct _ast4812; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4813; // CXXMethodDecl CallAsConstructor
struct _ast4814; // ParmVarDecl context
struct _ast4815; // TemplateSpecializationType Local<v8::Context>
struct _ast4816; // ParmVarDecl argc
struct _ast4817; // ParmVarDecl argv
struct _ast4818; // DecayedType Local<v8::Value> *
struct _ast4819; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // int, Local<v8::Value> *)
struct _ast4820; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4821; // CXXMethodDecl GetIsolate
struct _ast4822; // FunctionProtoType v8::Isolate *()
struct _ast4823; // CXXMethodDecl PreviewEntries
struct _ast4824; // ParmVarDecl is_key_value
struct _ast4825; // FunctionProtoType MaybeLocal<v8::Array> (bool *)
struct _ast4826; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4827; // CXXMethodDecl New
struct _ast4828; // ParmVarDecl isolate
struct _ast4829; // FunctionProtoType Local<v8::Object> (v8::Isolate *)
struct _ast4830; // TemplateSpecializationType Local<v8::Object>
struct _ast4831; // CXXMethodDecl New
struct _ast4832; // ParmVarDecl isolate
struct _ast4833; // ParmVarDecl prototype_or_null
struct _ast4834; // TemplateSpecializationType Local<v8::Value>
struct _ast4835; // ParmVarDecl names
struct _ast4836; // PointerType Local<v8::Name> *
struct _ast4837; // TemplateSpecializationType Local<v8::Name>
struct _ast4838; // ParmVarDecl values
struct _ast4839; // PointerType Local<v8::Value> *
struct _ast4840; // TemplateSpecializationType Local<v8::Value>
struct _ast4841; // ParmVarDecl length
struct _ast4842; // FunctionProtoType Local<v8::Object> (v8::Isolate *,
                 // Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *,
                 // size_t)
struct _ast4843; // TemplateSpecializationType Local<v8::Object>
struct _ast4844; // CXXMethodDecl Cast
struct _ast4845; // ParmVarDecl obj
struct _ast4846; // FunctionProtoType v8::Object *(v8::Value *)
struct _ast4847; // CXXRecordDecl Array
struct _ast4848; // CXXMethodDecl Length
struct _ast4849; // PointerType const v8::Array *
struct _ast4850; // RecordType const v8::Array
struct _ast4851; // CXXMethodDecl New
struct _ast4852; // ParmVarDecl isolate
struct _ast4853; // ParmVarDecl length
struct _ast4854; // FunctionProtoType Local<v8::Array> (v8::Isolate *, int)
struct _ast4855; // TemplateSpecializationType Local<v8::Array>
struct _ast4856; // CXXMethodDecl New
struct _ast4857; // ParmVarDecl isolate
struct _ast4858; // ParmVarDecl elements
struct _ast4859; // PointerType Local<v8::Value> *
struct _ast4860; // TemplateSpecializationType Local<v8::Value>
struct _ast4861; // ParmVarDecl length
struct _ast4862; // FunctionProtoType Local<v8::Array> (v8::Isolate *,
                 // Local<v8::Value> *, size_t)
struct _ast4863; // TemplateSpecializationType Local<v8::Array>
struct _ast4864; // CXXMethodDecl Cast
struct _ast4865; // ParmVarDecl obj
struct _ast4866; // FunctionProtoType v8::Array *(v8::Value *)
struct _ast4867; // PointerType v8::Array *
struct _ast4868; // CXXRecordDecl Map
struct _ast4869; // RecordType v8::Map
struct _ast4870; // CXXBaseSpecifier Record v8::Object
struct _ast4871; // CXXRecordDecl Map
struct _ast4872; // CXXMethodDecl Size
struct _ast4873; // PointerType const v8::Map *
struct _ast4874; // RecordType const v8::Map
struct _ast4875; // CXXMethodDecl Clear
struct _ast4876; // PointerType v8::Map *
struct _ast4877; // CXXMethodDecl Get
struct _ast4878; // ParmVarDecl context
struct _ast4879; // TemplateSpecializationType Local<v8::Context>
struct _ast4880; // ParmVarDecl key
struct _ast4881; // TemplateSpecializationType Local<v8::Value>
struct _ast4882; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4883; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4884; // CXXMethodDecl Set
struct _ast4885; // ParmVarDecl context
struct _ast4886; // TemplateSpecializationType Local<v8::Context>
struct _ast4887; // ParmVarDecl key
struct _ast4888; // TemplateSpecializationType Local<v8::Value>
struct _ast4889; // ParmVarDecl value
struct _ast4890; // TemplateSpecializationType Local<v8::Value>
struct _ast4891; // FunctionProtoType MaybeLocal<v8::Map> (Local<v8::Context>,
                 // Local<v8::Value>, Local<v8::Value>)
struct _ast4892; // TemplateSpecializationType MaybeLocal<v8::Map>
struct _ast4893; // CXXMethodDecl Has
struct _ast4894; // ParmVarDecl context
struct _ast4895; // TemplateSpecializationType Local<v8::Context>
struct _ast4896; // ParmVarDecl key
struct _ast4897; // TemplateSpecializationType Local<v8::Value>
struct _ast4898; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4899; // TemplateSpecializationType Maybe<bool>
struct _ast4900; // CXXMethodDecl Delete
struct _ast4901; // ParmVarDecl context
struct _ast4902; // TemplateSpecializationType Local<v8::Context>
struct _ast4903; // ParmVarDecl key
struct _ast4904; // TemplateSpecializationType Local<v8::Value>
struct _ast4905; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4906; // TemplateSpecializationType Maybe<bool>
struct _ast4907; // CXXMethodDecl AsArray
struct _ast4908; // FunctionProtoType Local<v8::Array> () const
struct _ast4909; // TemplateSpecializationType Local<v8::Array>
struct _ast4910; // CXXMethodDecl New
struct _ast4911; // ParmVarDecl isolate
struct _ast4912; // FunctionProtoType Local<v8::Map> (v8::Isolate *)
struct _ast4913; // TemplateSpecializationType Local<v8::Map>
struct _ast4914; // CXXMethodDecl Cast
struct _ast4915; // ParmVarDecl obj
struct _ast4916; // FunctionProtoType v8::Map *(v8::Value *)
struct _ast4917; // CXXRecordDecl Set
struct _ast4918; // RecordType v8::Set
struct _ast4919; // CXXBaseSpecifier Record v8::Object
struct _ast4920; // CXXRecordDecl Set
struct _ast4921; // CXXMethodDecl Size
struct _ast4922; // PointerType const v8::Set *
struct _ast4923; // RecordType const v8::Set
struct _ast4924; // CXXMethodDecl Clear
struct _ast4925; // PointerType v8::Set *
struct _ast4926; // CXXMethodDecl Add
struct _ast4927; // ParmVarDecl context
struct _ast4928; // TemplateSpecializationType Local<v8::Context>
struct _ast4929; // ParmVarDecl key
struct _ast4930; // TemplateSpecializationType Local<v8::Value>
struct _ast4931; // FunctionProtoType MaybeLocal<v8::Set> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4932; // TemplateSpecializationType MaybeLocal<v8::Set>
struct _ast4933; // CXXMethodDecl Has
struct _ast4934; // ParmVarDecl context
struct _ast4935; // TemplateSpecializationType Local<v8::Context>
struct _ast4936; // ParmVarDecl key
struct _ast4937; // TemplateSpecializationType Local<v8::Value>
struct _ast4938; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4939; // TemplateSpecializationType Maybe<bool>
struct _ast4940; // CXXMethodDecl Delete
struct _ast4941; // ParmVarDecl context
struct _ast4942; // TemplateSpecializationType Local<v8::Context>
struct _ast4943; // ParmVarDecl key
struct _ast4944; // TemplateSpecializationType Local<v8::Value>
struct _ast4945; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast4946; // TemplateSpecializationType Maybe<bool>
struct _ast4947; // CXXMethodDecl AsArray
struct _ast4948; // FunctionProtoType Local<v8::Array> () const
struct _ast4949; // TemplateSpecializationType Local<v8::Array>
struct _ast4950; // CXXMethodDecl New
struct _ast4951; // ParmVarDecl isolate
struct _ast4952; // FunctionProtoType Local<v8::Set> (v8::Isolate *)
struct _ast4953; // TemplateSpecializationType Local<v8::Set>
struct _ast4954; // CXXMethodDecl Cast
struct _ast4955; // ParmVarDecl obj
struct _ast4956; // FunctionProtoType v8::Set *(v8::Value *)
struct _ast4957; // TemplateTypeParmDecl T
struct _ast4958; // CXXRecordDecl ReturnValue
struct _ast4959; // FunctionTemplateDecl ReturnValue<T>
struct _ast4960; // TemplateTypeParmDecl S
struct _ast4961; // CXXConstructorDecl ReturnValue<T>
struct _ast4962; // ParmVarDecl that
struct _ast4963; // LValueReferenceType const ReturnValue<S> &
struct _ast4964; // TemplateSpecializationType const ReturnValue<S>
struct _ast4965; // TemplateSpecializationType ReturnValue<S>
struct _ast4966; // FunctionProtoType void (const ReturnValue<S> &)
struct _ast4967; // PointerType ReturnValue<T> *
struct _ast4968; // FunctionTemplateDecl Set
struct _ast4969; // TemplateTypeParmDecl S
struct _ast4970; // CXXMethodDecl Set
struct _ast4971; // ParmVarDecl handle
struct _ast4972; // LValueReferenceType const Global<S> &
struct _ast4973; // TemplateSpecializationType const Global<S>
struct _ast4974; // TemplateSpecializationType Global<S>
struct _ast4975; // FunctionProtoType void (const Global<S> &)
struct _ast4976; // FunctionTemplateDecl Set
struct _ast4977; // TemplateTypeParmDecl S
struct _ast4978; // CXXMethodDecl Set
struct _ast4979; // ParmVarDecl handle
struct _ast4980; // LValueReferenceType const TracedGlobal<S> &
struct _ast4981; // TemplateSpecializationType const TracedGlobal<S>
struct _ast4982; // TemplateSpecializationType TracedGlobal<S>
struct _ast4983; // FunctionProtoType void (const TracedGlobal<S> &)
struct _ast4984; // FunctionTemplateDecl Set
struct _ast4985; // TemplateTypeParmDecl S
struct _ast4986; // CXXMethodDecl Set
struct _ast4987; // ParmVarDecl handle
struct _ast4988; // TemplateSpecializationType const Local<S>
struct _ast4989; // TemplateSpecializationType Local<S>
struct _ast4990; // FunctionProtoType void (const Local<S>)
struct _ast4991; // CXXMethodDecl Set
struct _ast4992; // ParmVarDecl value
struct _ast4993; // CXXMethodDecl Set
struct _ast4994; // ParmVarDecl i
struct _ast4995; // CXXMethodDecl Set
struct _ast4996; // ParmVarDecl i
struct _ast4997; // FunctionProtoType void (int32_t)
struct _ast4998; // CXXMethodDecl Set
struct _ast4999; // ParmVarDecl i
struct _ast5000; // CXXMethodDecl SetNull
struct _ast5001; // CXXMethodDecl SetUndefined
struct _ast5002; // CXXMethodDecl SetEmptyString
struct _ast5003; // CXXMethodDecl GetIsolate
struct _ast5004; // PointerType const ReturnValue<T> *
struct _ast5005; // InjectedClassNameType const ReturnValue<T>
struct _ast5006; // FunctionTemplateDecl Set
struct _ast5007; // TemplateTypeParmDecl S
struct _ast5008; // CXXMethodDecl Set
struct _ast5009; // ParmVarDecl whatever
struct _ast5010; // PointerType S *
struct _ast5011; // TemplateTypeParmType S
struct _ast5012; // FunctionProtoType void (S *)
struct _ast5013; // CXXMethodDecl Get
struct _ast5014; // FunctionProtoType Local<v8::Value> () const
struct _ast5015; // TemplateSpecializationType Local<v8::Value>
struct _ast5016; // TemplateTypeParmDecl T
struct _ast5017; // CXXRecordDecl FunctionCallbackInfo
struct _ast5018; // CXXMethodDecl Length
struct _ast5019; // PointerType const FunctionCallbackInfo<T> *
struct _ast5020; // InjectedClassNameType const FunctionCallbackInfo<T>
struct _ast5021; // CXXMethodDecl operator[]
struct _ast5022; // ParmVarDecl i
struct _ast5023; // FunctionProtoType Local<v8::Value> (int) const
struct _ast5024; // TemplateSpecializationType Local<v8::Value>
struct _ast5025; // CXXMethodDecl This
struct _ast5026; // FunctionProtoType Local<v8::Object> () const
struct _ast5027; // TemplateSpecializationType Local<v8::Object>
struct _ast5028; // CXXMethodDecl Holder
struct _ast5029; // FunctionProtoType Local<v8::Object> () const
struct _ast5030; // TemplateSpecializationType Local<v8::Object>
struct _ast5031; // CXXMethodDecl NewTarget
struct _ast5032; // FunctionProtoType Local<v8::Value> () const
struct _ast5033; // TemplateSpecializationType Local<v8::Value>
struct _ast5034; // CXXMethodDecl IsConstructCall
struct _ast5035; // CXXMethodDecl Data
struct _ast5036; // FunctionProtoType Local<v8::Value> () const
struct _ast5037; // TemplateSpecializationType Local<v8::Value>
struct _ast5038; // CXXMethodDecl GetIsolate
struct _ast5039; // CXXMethodDecl GetReturnValue
struct _ast5040; // FunctionProtoType ReturnValue<T> () const
struct _ast5041; // TemplateSpecializationType ReturnValue<T>
struct _ast5042; // VarDecl kArgsLength
struct _ast5043; // VarDecl kHolderIndex
struct _ast5044; // VarDecl kIsolateIndex
struct _ast5045; // VarDecl kReturnValueDefaultValueIndex
struct _ast5046; // VarDecl kReturnValueIndex
struct _ast5047; // VarDecl kDataIndex
struct _ast5048; // VarDecl kNewTargetIndex
struct _ast5049; // CXXConstructorDecl FunctionCallbackInfo<T>
struct _ast5050; // ParmVarDecl implicit_args
struct _ast5051; // ParmVarDecl values
struct _ast5052; // ParmVarDecl length
struct _ast5053; // FunctionProtoType void (internal::Address *,
                 // internal::Address *, int)
struct _ast5054; // PointerType FunctionCallbackInfo<T> *
struct _ast5055; // FieldDecl implicit_args_
struct _ast5056; // FieldDecl values_
struct _ast5057; // FieldDecl length_
struct _ast5058; // TemplateTypeParmDecl T
struct _ast5059; // CXXRecordDecl PropertyCallbackInfo
struct _ast5060; // CXXMethodDecl GetIsolate
struct _ast5061; // PointerType const PropertyCallbackInfo<T> *
struct _ast5062; // InjectedClassNameType const PropertyCallbackInfo<T>
struct _ast5063; // CXXMethodDecl Data
struct _ast5064; // FunctionProtoType Local<v8::Value> () const
struct _ast5065; // TemplateSpecializationType Local<v8::Value>
struct _ast5066; // CXXMethodDecl This
struct _ast5067; // FunctionProtoType Local<v8::Object> () const
struct _ast5068; // TemplateSpecializationType Local<v8::Object>
struct _ast5069; // CXXMethodDecl Holder
struct _ast5070; // FunctionProtoType Local<v8::Object> () const
struct _ast5071; // TemplateSpecializationType Local<v8::Object>
struct _ast5072; // CXXMethodDecl GetReturnValue
struct _ast5073; // FunctionProtoType ReturnValue<T> () const
struct _ast5074; // TemplateSpecializationType ReturnValue<T>
struct _ast5075; // CXXMethodDecl ShouldThrowOnError
struct _ast5076; // VarDecl kArgsLength
struct _ast5077; // VarDecl kShouldThrowOnErrorIndex
struct _ast5078; // VarDecl kHolderIndex
struct _ast5079; // VarDecl kIsolateIndex
struct _ast5080; // VarDecl kReturnValueDefaultValueIndex
struct _ast5081; // VarDecl kReturnValueIndex
struct _ast5082; // VarDecl kDataIndex
struct _ast5083; // VarDecl kThisIndex
struct _ast5084; // CXXConstructorDecl PropertyCallbackInfo<T>
struct _ast5085; // ParmVarDecl args
struct _ast5086; // FunctionProtoType void (internal::Address *)
struct _ast5087; // PointerType PropertyCallbackInfo<T> *
struct _ast5088; // FieldDecl args_
struct _ast5089; // TypedefDecl FunctionCallback
struct _ast5090; // TypedefType v8::FunctionCallback
struct _ast5091; // EnumDecl ConstructorBehavior
struct _ast5092; // EnumConstantDecl kThrow
struct _ast5093; // EnumConstantDecl kAllow
struct _ast5094; // CXXRecordDecl Function
struct _ast5095; // CXXMethodDecl New
struct _ast5096; // ParmVarDecl context
struct _ast5097; // TemplateSpecializationType Local<v8::Context>
struct _ast5098; // ParmVarDecl callback
struct _ast5099; // ParmVarDecl data
struct _ast5100; // TemplateSpecializationType Local<v8::Value>
struct _ast5101; // ParmVarDecl length
struct _ast5102; // ParmVarDecl behavior
struct _ast5103; // EnumType v8::ConstructorBehavior
struct _ast5104; // ParmVarDecl side_effect_type
struct _ast5105; // FunctionProtoType MaybeLocal<v8::Function>
                 // (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>,
                 // int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast5106; // TemplateSpecializationType MaybeLocal<v8::Function>
struct _ast5107; // CXXMethodDecl NewInstance
struct _ast5108; // ParmVarDecl context
struct _ast5109; // TemplateSpecializationType Local<v8::Context>
struct _ast5110; // ParmVarDecl argc
struct _ast5111; // ParmVarDecl argv
struct _ast5112; // DecayedType Local<v8::Value> *
struct _ast5113; // FunctionProtoType MaybeLocal<v8::Object>
                 // (Local<v8::Context>, int, Local<v8::Value> *) const
struct _ast5114; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast5115; // PointerType const v8::Function *
struct _ast5116; // RecordType const v8::Function
struct _ast5117; // CXXMethodDecl NewInstance
struct _ast5118; // ParmVarDecl context
struct _ast5119; // TemplateSpecializationType Local<v8::Context>
struct _ast5120; // FunctionProtoType MaybeLocal<v8::Object>
                 // (Local<v8::Context>) const
struct _ast5121; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast5122; // CXXMethodDecl NewInstanceWithSideEffectType
struct _ast5123; // ParmVarDecl context
struct _ast5124; // TemplateSpecializationType Local<v8::Context>
struct _ast5125; // ParmVarDecl argc
struct _ast5126; // ParmVarDecl argv
struct _ast5127; // DecayedType Local<v8::Value> *
struct _ast5128; // ParmVarDecl side_effect_type
struct _ast5129; // FunctionProtoType MaybeLocal<v8::Object>
                 // (Local<v8::Context>, int, Local<v8::Value> *,
                 // v8::SideEffectType) const
struct _ast5130; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast5131; // CXXMethodDecl Call
struct _ast5132; // ParmVarDecl context
struct _ast5133; // TemplateSpecializationType Local<v8::Context>
struct _ast5134; // ParmVarDecl recv
struct _ast5135; // TemplateSpecializationType Local<v8::Value>
struct _ast5136; // ParmVarDecl argc
struct _ast5137; // ParmVarDecl argv
struct _ast5138; // DecayedType Local<v8::Value> *
struct _ast5139; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5140; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5141; // PointerType v8::Function *
struct _ast5142; // CXXMethodDecl SetName
struct _ast5143; // ParmVarDecl name
struct _ast5144; // TemplateSpecializationType Local<v8::String>
struct _ast5145; // FunctionProtoType void (Local<v8::String>)
struct _ast5146; // CXXMethodDecl GetName
struct _ast5147; // FunctionProtoType Local<v8::Value> () const
struct _ast5148; // TemplateSpecializationType Local<v8::Value>
struct _ast5149; // CXXMethodDecl GetInferredName
struct _ast5150; // FunctionProtoType Local<v8::Value> () const
struct _ast5151; // TemplateSpecializationType Local<v8::Value>
struct _ast5152; // CXXMethodDecl GetDebugName
struct _ast5153; // FunctionProtoType Local<v8::Value> () const
struct _ast5154; // TemplateSpecializationType Local<v8::Value>
struct _ast5155; // CXXMethodDecl GetDisplayName
struct _ast5156; // FunctionProtoType Local<v8::Value> () const
struct _ast5157; // TemplateSpecializationType Local<v8::Value>
struct _ast5158; // CXXMethodDecl GetScriptLineNumber
struct _ast5159; // CXXMethodDecl GetScriptColumnNumber
struct _ast5160; // CXXMethodDecl ScriptId
struct _ast5161; // CXXMethodDecl GetBoundFunction
struct _ast5162; // FunctionProtoType Local<v8::Value> () const
struct _ast5163; // TemplateSpecializationType Local<v8::Value>
struct _ast5164; // CXXMethodDecl GetScriptOrigin
struct _ast5165; // CXXMethodDecl Cast
struct _ast5166; // ParmVarDecl obj
struct _ast5167; // FunctionProtoType v8::Function *(v8::Value *)
struct _ast5168; // VarDecl kLineOffsetNotFound
struct _ast5169; // CXXRecordDecl Promise
struct _ast5170; // EnumDecl PromiseState
struct _ast5171; // EnumConstantDecl kPending
struct _ast5172; // EnumConstantDecl kFulfilled
struct _ast5173; // EnumConstantDecl kRejected
struct _ast5174; // CXXRecordDecl Resolver
struct _ast5175; // RecordType v8::Promise::Resolver
struct _ast5176; // CXXBaseSpecifier Record v8::Object
struct _ast5177; // CXXRecordDecl Resolver
struct _ast5178; // CXXMethodDecl New
struct _ast5179; // ParmVarDecl context
struct _ast5180; // TemplateSpecializationType Local<v8::Context>
struct _ast5181; // FunctionProtoType MaybeLocal<v8::Promise::Resolver>
                 // (Local<v8::Context>)
struct _ast5182; // TemplateSpecializationType MaybeLocal<v8::Promise::Resolver>
struct _ast5183; // CXXMethodDecl GetPromise
struct _ast5184; // FunctionProtoType Local<v8::Promise> ()
struct _ast5185; // TemplateSpecializationType Local<v8::Promise>
struct _ast5186; // PointerType v8::Promise::Resolver *
struct _ast5187; // CXXMethodDecl Resolve
struct _ast5188; // ParmVarDecl context
struct _ast5189; // TemplateSpecializationType Local<v8::Context>
struct _ast5190; // ParmVarDecl value
struct _ast5191; // TemplateSpecializationType Local<v8::Value>
struct _ast5192; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast5193; // TemplateSpecializationType Maybe<bool>
struct _ast5194; // CXXMethodDecl Reject
struct _ast5195; // ParmVarDecl context
struct _ast5196; // TemplateSpecializationType Local<v8::Context>
struct _ast5197; // ParmVarDecl value
struct _ast5198; // TemplateSpecializationType Local<v8::Value>
struct _ast5199; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                 // Local<v8::Value>)
struct _ast5200; // TemplateSpecializationType Maybe<bool>
struct _ast5201; // CXXMethodDecl Cast
struct _ast5202; // ParmVarDecl obj
struct _ast5203; // FunctionProtoType v8::Promise::Resolver *(v8::Value *)
struct _ast5204; // CXXMethodDecl Catch
struct _ast5205; // ParmVarDecl context
struct _ast5206; // TemplateSpecializationType Local<v8::Context>
struct _ast5207; // ParmVarDecl handler
struct _ast5208; // TemplateSpecializationType Local<v8::Function>
struct _ast5209; // FunctionProtoType MaybeLocal<v8::Promise>
                 // (Local<v8::Context>, Local<v8::Function>)
struct _ast5210; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast5211; // PointerType v8::Promise *
struct _ast5212; // CXXMethodDecl Then
struct _ast5213; // ParmVarDecl context
struct _ast5214; // TemplateSpecializationType Local<v8::Context>
struct _ast5215; // ParmVarDecl handler
struct _ast5216; // TemplateSpecializationType Local<v8::Function>
struct _ast5217; // FunctionProtoType MaybeLocal<v8::Promise>
                 // (Local<v8::Context>, Local<v8::Function>)
struct _ast5218; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast5219; // CXXMethodDecl Then
struct _ast5220; // ParmVarDecl context
struct _ast5221; // TemplateSpecializationType Local<v8::Context>
struct _ast5222; // ParmVarDecl on_fulfilled
struct _ast5223; // TemplateSpecializationType Local<v8::Function>
struct _ast5224; // ParmVarDecl on_rejected
struct _ast5225; // TemplateSpecializationType Local<v8::Function>
struct _ast5226; // FunctionProtoType MaybeLocal<v8::Promise>
                 // (Local<v8::Context>, Local<v8::Function>,
                 // Local<v8::Function>)
struct _ast5227; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast5228; // CXXMethodDecl HasHandler
struct _ast5229; // CXXMethodDecl Result
struct _ast5230; // FunctionProtoType Local<v8::Value> ()
struct _ast5231; // TemplateSpecializationType Local<v8::Value>
struct _ast5232; // CXXMethodDecl State
struct _ast5233; // FunctionProtoType v8::Promise::PromiseState ()
struct _ast5234; // EnumType v8::Promise::PromiseState
struct _ast5235; // CXXMethodDecl MarkAsHandled
struct _ast5236; // CXXMethodDecl Cast
struct _ast5237; // ParmVarDecl obj
struct _ast5238; // FunctionProtoType v8::Promise *(v8::Value *)
struct _ast5239; // VarDecl kEmbedderFieldCount
struct _ast5240; // CXXRecordDecl PropertyDescriptor
struct _ast5241; // CXXConstructorDecl PropertyDescriptor
struct _ast5242; // PointerType v8::PropertyDescriptor *
struct _ast5243; // CXXConstructorDecl PropertyDescriptor
struct _ast5244; // ParmVarDecl value
struct _ast5245; // TemplateSpecializationType Local<v8::Value>
struct _ast5246; // FunctionProtoType void (Local<v8::Value>)
struct _ast5247; // CXXConstructorDecl PropertyDescriptor
struct _ast5248; // ParmVarDecl value
struct _ast5249; // TemplateSpecializationType Local<v8::Value>
struct _ast5250; // ParmVarDecl writable
struct _ast5251; // FunctionProtoType void (Local<v8::Value>, bool)
struct _ast5252; // CXXConstructorDecl PropertyDescriptor
struct _ast5253; // ParmVarDecl get
struct _ast5254; // TemplateSpecializationType Local<v8::Value>
struct _ast5255; // ParmVarDecl set
struct _ast5256; // TemplateSpecializationType Local<v8::Value>
struct _ast5257; // FunctionProtoType void (Local<v8::Value>, Local<v8::Value>)
struct _ast5258; // CXXDestructorDecl ~PropertyDescriptor
struct _ast5259; // FunctionProtoType void ()
struct _ast5260; // CXXMethodDecl value
struct _ast5261; // FunctionProtoType Local<v8::Value> () const
struct _ast5262; // TemplateSpecializationType Local<v8::Value>
struct _ast5263; // PointerType const v8::PropertyDescriptor *
struct _ast5264; // RecordType const v8::PropertyDescriptor
struct _ast5265; // CXXMethodDecl has_value
struct _ast5266; // CXXMethodDecl get
struct _ast5267; // FunctionProtoType Local<v8::Value> () const
struct _ast5268; // TemplateSpecializationType Local<v8::Value>
struct _ast5269; // CXXMethodDecl has_get
struct _ast5270; // CXXMethodDecl set
struct _ast5271; // FunctionProtoType Local<v8::Value> () const
struct _ast5272; // TemplateSpecializationType Local<v8::Value>
struct _ast5273; // CXXMethodDecl has_set
struct _ast5274; // CXXMethodDecl set_enumerable
struct _ast5275; // ParmVarDecl enumerable
struct _ast5276; // CXXMethodDecl enumerable
struct _ast5277; // CXXMethodDecl has_enumerable
struct _ast5278; // CXXMethodDecl set_configurable
struct _ast5279; // ParmVarDecl configurable
struct _ast5280; // CXXMethodDecl configurable
struct _ast5281; // CXXMethodDecl has_configurable
struct _ast5282; // CXXMethodDecl writable
struct _ast5283; // CXXMethodDecl has_writable
struct _ast5284; // CXXRecordDecl PrivateData
struct _ast5285; // RecordType v8::PropertyDescriptor::PrivateData
struct _ast5286; // CXXMethodDecl get_private
struct _ast5287; // FunctionProtoType v8::PropertyDescriptor::PrivateData *()
                 // const
struct _ast5288; // PointerType v8::PropertyDescriptor::PrivateData *
struct _ast5289; // CXXConstructorDecl PropertyDescriptor
struct _ast5290; // ParmVarDecl
struct _ast5291; // LValueReferenceType const v8::PropertyDescriptor &
struct _ast5292; // FunctionProtoType void (const v8::PropertyDescriptor &)
struct _ast5293; // CXXMethodDecl operator=
struct _ast5294; // ParmVarDecl
struct _ast5295; // CXXRecordDecl Proxy
struct _ast5296; // CXXMethodDecl GetTarget
struct _ast5297; // FunctionProtoType Local<v8::Value> ()
struct _ast5298; // TemplateSpecializationType Local<v8::Value>
struct _ast5299; // PointerType v8::Proxy *
struct _ast5300; // CXXMethodDecl GetHandler
struct _ast5301; // FunctionProtoType Local<v8::Value> ()
struct _ast5302; // TemplateSpecializationType Local<v8::Value>
struct _ast5303; // CXXMethodDecl IsRevoked
struct _ast5304; // CXXMethodDecl Revoke
struct _ast5305; // CXXMethodDecl New
struct _ast5306; // ParmVarDecl context
struct _ast5307; // TemplateSpecializationType Local<v8::Context>
struct _ast5308; // ParmVarDecl local_target
struct _ast5309; // TemplateSpecializationType Local<v8::Object>
struct _ast5310; // ParmVarDecl local_handler
struct _ast5311; // TemplateSpecializationType Local<v8::Object>
struct _ast5312; // FunctionProtoType MaybeLocal<v8::Proxy> (Local<v8::Context>,
                 // Local<v8::Object>, Local<v8::Object>)
struct _ast5313; // TemplateSpecializationType MaybeLocal<v8::Proxy>
struct _ast5314; // CXXMethodDecl Cast
struct _ast5315; // ParmVarDecl obj
struct _ast5316; // FunctionProtoType v8::Proxy *(v8::Value *)
struct _ast5317; // ClassTemplateDecl MemorySpan
struct _ast5318; // TemplateTypeParmDecl T
struct _ast5319; // CXXRecordDecl MemorySpan
struct _ast5320; // InjectedClassNameType MemorySpan<T>
struct _ast5321; // FieldDecl data_
struct _ast5322; // PointerType T *
struct _ast5323; // TemplateTypeParmType T
struct _ast5324; // FieldDecl size_
struct _ast5325; // CXXRecordDecl MemorySpan
struct _ast5326; // CXXConstructorDecl MemorySpan<T>
struct _ast5327; // PointerType MemorySpan<T> *
struct _ast5328; // CXXConstructorDecl MemorySpan<T>
struct _ast5329; // ParmVarDecl data
struct _ast5330; // ParmVarDecl size
struct _ast5331; // FunctionProtoType void (T *, size_t)
struct _ast5332; // CXXMethodDecl data
struct _ast5333; // FunctionProtoType T *() const
struct _ast5334; // PointerType const MemorySpan<T> *
struct _ast5335; // InjectedClassNameType const MemorySpan<T>
struct _ast5336; // CXXMethodDecl size
struct _ast5337; // ClassTemplateSpecializationDecl MemorySpan
struct _ast5338; // CXXConstructorDecl MemorySpan
struct _ast5339; // FunctionProtoType void ()
struct _ast5340; // PointerType v8::MemorySpan<const unsigned char> *
struct _ast5341; // RecordType v8::MemorySpan<const unsigned char>
struct _ast5342; // CXXConstructorDecl MemorySpan
struct _ast5343; // ParmVarDecl data
struct _ast5344; // PointerType const unsigned char *
struct _ast5345; // SubstTemplateTypeParmType const unsigned char
struct _ast5346; // ParmVarDecl size
struct _ast5347; // FunctionProtoType void (const unsigned char *, size_t)
struct _ast5348; // CXXMethodDecl data
struct _ast5349; // FunctionProtoType const unsigned char *() const
struct _ast5350; // PointerType const v8::MemorySpan<const unsigned char> *
struct _ast5351; // RecordType const v8::MemorySpan<const unsigned char>
struct _ast5352; // CXXMethodDecl size
struct _ast5353; // CXXConstructorDecl MemorySpan
struct _ast5354; // ParmVarDecl
struct _ast5355; // LValueReferenceType const v8::MemorySpan<const unsigned
                 // char> &
struct _ast5356; // FunctionProtoType void (const v8::MemorySpan<const unsigned
                 // char> &)
struct _ast5357; // CXXConstructorDecl MemorySpan
struct _ast5358; // ParmVarDecl
struct _ast5359; // RValueReferenceType v8::MemorySpan<const unsigned char> &&
struct _ast5360; // FunctionProtoType void (v8::MemorySpan<const unsigned char>
                 // &&)
struct _ast5361; // CXXRecordDecl OwnedBuffer
struct _ast5362; // RecordType v8::OwnedBuffer
struct _ast5363; // FieldDecl buffer
struct _ast5364; // ElaboratedType std::unique_ptr<const uint8_t []>
struct _ast5365; // FieldDecl size
struct _ast5366; // CXXRecordDecl OwnedBuffer
struct _ast5367; // CXXConstructorDecl OwnedBuffer
struct _ast5368; // ParmVarDecl buffer
struct _ast5369; // ElaboratedType std::unique_ptr<const uint8_t []>
struct _ast5370; // ParmVarDecl size
struct _ast5371; // FunctionProtoType void (std::unique_ptr<const uint8_t []>,
                 // size_t)
struct _ast5372; // PointerType v8::OwnedBuffer *
struct _ast5373; // CXXConstructorDecl OwnedBuffer
struct _ast5374; // FunctionProtoType void ()
struct _ast5375; // CXXConstructorDecl OwnedBuffer
struct _ast5376; // ParmVarDecl
struct _ast5377; // LValueReferenceType const v8::OwnedBuffer &
struct _ast5378; // RecordType const v8::OwnedBuffer
struct _ast5379; // FunctionProtoType void (const v8::OwnedBuffer &)
struct _ast5380; // CXXConstructorDecl OwnedBuffer
struct _ast5381; // ParmVarDecl
struct _ast5382; // RValueReferenceType v8::OwnedBuffer &&
struct _ast5383; // FunctionProtoType void (v8::OwnedBuffer &&) noexcept
struct _ast5384; // CXXMethodDecl operator=
struct _ast5385; // ParmVarDecl
struct _ast5386; // FunctionProtoType v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ast5387; // LValueReferenceType v8::OwnedBuffer &
struct _ast5388; // CXXDestructorDecl ~OwnedBuffer
struct _ast5389; // CXXMethodDecl operator=
struct _ast5390; // ParmVarDecl
struct _ast5391; // FunctionProtoType v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ast5392; // CXXRecordDecl CompiledWasmModule
struct _ast5393; // RecordType v8::CompiledWasmModule
struct _ast5394; // FieldDecl native_module_
struct _ast5395; // ElaboratedType const
                 // std::shared_ptr<internal::wasm::NativeModule>
struct _ast5396; // ElaboratedType std::shared_ptr<internal::wasm::NativeModule>
struct _ast5397; // CXXRecordDecl CompiledWasmModule
struct _ast5398; // CXXMethodDecl Serialize
struct _ast5399; // FunctionProtoType v8::OwnedBuffer ()
struct _ast5400; // PointerType v8::CompiledWasmModule *
struct _ast5401; // CXXMethodDecl GetWireBytesRef
struct _ast5402; // FunctionProtoType MemorySpan<const uint8_t> ()
struct _ast5403; // TemplateSpecializationType MemorySpan<const uint8_t>
struct _ast5404; // CXXConstructorDecl CompiledWasmModule
struct _ast5405; // ParmVarDecl
struct _ast5406; // LValueReferenceType const v8::CompiledWasmModule &
struct _ast5407; // RecordType const v8::CompiledWasmModule
struct _ast5408; // FunctionProtoType void (const v8::CompiledWasmModule &)
struct _ast5409; // CXXConstructorDecl CompiledWasmModule
struct _ast5410; // ParmVarDecl
struct _ast5411; // RValueReferenceType v8::CompiledWasmModule &&
struct _ast5412; // FunctionProtoType void (v8::CompiledWasmModule &&)
struct _ast5413; // CXXMethodDecl operator=
struct _ast5414; // ParmVarDecl
struct _ast5415; // FunctionProtoType v8::CompiledWasmModule
                 // &(v8::CompiledWasmModule &&)
struct _ast5416; // LValueReferenceType v8::CompiledWasmModule &
struct _ast5417; // CXXDestructorDecl ~CompiledWasmModule
struct _ast5418; // FunctionProtoType void ()
struct _ast5419; // CXXRecordDecl WasmModuleObject
struct _ast5420; // CXXRecordDecl TransferrableModule
struct _ast5421; // RecordType v8::WasmModuleObject::TransferrableModule
struct _ast5422; // FieldDecl shared_module_
struct _ast5423; // TypedefType
                 // v8::WasmModuleObject::TransferrableModule::SharedModule
struct _ast5424; // TypedefDecl SharedModule
struct _ast5425; // FieldDecl serialized_
struct _ast5426; // FieldDecl wire_bytes_
struct _ast5427; // CXXRecordDecl TransferrableModule
struct _ast5428; // CXXConstructorDecl TransferrableModule
struct _ast5429; // ParmVarDecl src
struct _ast5430; // RValueReferenceType
                 // v8::WasmModuleObject::TransferrableModule &&
struct _ast5431; // FunctionProtoType void
                 // (v8::WasmModuleObject::TransferrableModule &&)
struct _ast5432; // PointerType v8::WasmModuleObject::TransferrableModule *
struct _ast5433; // CXXConstructorDecl TransferrableModule
struct _ast5434; // ParmVarDecl src
struct _ast5435; // LValueReferenceType const
                 // v8::WasmModuleObject::TransferrableModule &
struct _ast5436; // RecordType const v8::WasmModuleObject::TransferrableModule
struct _ast5437; // FunctionProtoType void (const
                 // v8::WasmModuleObject::TransferrableModule &)
struct _ast5438; // CXXMethodDecl operator=
struct _ast5439; // ParmVarDecl src
struct _ast5440; // FunctionProtoType v8::WasmModuleObject::TransferrableModule
                 // &(v8::WasmModuleObject::TransferrableModule &&)
struct _ast5441; // LValueReferenceType
                 // v8::WasmModuleObject::TransferrableModule &
struct _ast5442; // CXXMethodDecl operator=
struct _ast5443; // ParmVarDecl src
struct _ast5444; // FunctionProtoType v8::WasmModuleObject::TransferrableModule
                 // &(const v8::WasmModuleObject::TransferrableModule &)
struct _ast5445; // CXXDestructorDecl ~TransferrableModule
struct _ast5446; // FunctionProtoType void ()
struct _ast5447; // CXXMethodDecl GetTransferrableModule
struct _ast5448; // FunctionProtoType v8::WasmModuleObject::TransferrableModule
                 // ()
struct _ast5449; // PointerType v8::WasmModuleObject *
struct _ast5450; // CXXMethodDecl FromTransferrableModule
struct _ast5451; // ParmVarDecl isolate
struct _ast5452; // ParmVarDecl
struct _ast5453; // FunctionProtoType MaybeLocal<v8::WasmModuleObject>
                 // (v8::Isolate *, const
                 // v8::WasmModuleObject::TransferrableModule &)
struct _ast5454; // TemplateSpecializationType MaybeLocal<v8::WasmModuleObject>
struct _ast5455; // CXXMethodDecl GetCompiledModule
struct _ast5456; // FunctionProtoType v8::CompiledWasmModule ()
struct _ast5457; // CXXMethodDecl DeserializeOrCompile
struct _ast5458; // ParmVarDecl isolate
struct _ast5459; // ParmVarDecl serialized_module
struct _ast5460; // TemplateSpecializationType MemorySpan<const uint8_t>
struct _ast5461; // ParmVarDecl wire_bytes
struct _ast5462; // TemplateSpecializationType MemorySpan<const uint8_t>
struct _ast5463; // FunctionProtoType MaybeLocal<v8::WasmModuleObject>
                 // (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const
                 // uint8_t>)
struct _ast5464; // TemplateSpecializationType MaybeLocal<v8::WasmModuleObject>
struct _ast5465; // CXXMethodDecl Cast
struct _ast5466; // ParmVarDecl obj
struct _ast5467; // FunctionProtoType v8::WasmModuleObject *(v8::Value *)
struct _ast5468; // CXXRecordDecl WasmStreaming
struct _ast5469; // RecordType v8::WasmStreaming
struct _ast5470; // FieldDecl impl_
struct _ast5471; // ElaboratedType std::unique_ptr<WasmStreamingImpl>
struct _ast5472; // CXXRecordDecl WasmStreaming
struct _ast5473; // CXXRecordDecl WasmStreamingImpl
struct _ast5474; // RecordType v8::WasmStreaming::WasmStreamingImpl
struct _ast5475; // CXXRecordDecl Client
struct _ast5476; // RecordType v8::WasmStreaming::Client
struct _ast5477; // CXXRecordDecl Client
struct _ast5478; // CXXDestructorDecl ~Client
struct _ast5479; // FunctionProtoType void ()
struct _ast5480; // PointerType v8::WasmStreaming::Client *
struct _ast5481; // CXXMethodDecl OnModuleCompiled
struct _ast5482; // ParmVarDecl compiled_module
struct _ast5483; // FunctionProtoType void (v8::CompiledWasmModule)
struct _ast5484; // CXXMethodDecl operator=
struct _ast5485; // ParmVarDecl
struct _ast5486; // LValueReferenceType const v8::WasmStreaming::Client &
struct _ast5487; // RecordType const v8::WasmStreaming::Client
struct _ast5488; // FunctionProtoType v8::WasmStreaming::Client &(const
                 // v8::WasmStreaming::Client &)
struct _ast5489; // LValueReferenceType v8::WasmStreaming::Client &
struct _ast5490; // CXXConstructorDecl WasmStreaming
struct _ast5491; // ParmVarDecl impl
struct _ast5492; // ElaboratedType std::unique_ptr<WasmStreamingImpl>
struct _ast5493; // FunctionProtoType void (std::unique_ptr<WasmStreamingImpl>)
struct _ast5494; // PointerType v8::WasmStreaming *
struct _ast5495; // CXXDestructorDecl ~WasmStreaming
struct _ast5496; // FunctionProtoType void ()
struct _ast5497; // CXXMethodDecl OnBytesReceived
struct _ast5498; // ParmVarDecl bytes
struct _ast5499; // ParmVarDecl size
struct _ast5500; // FunctionProtoType void (const uint8_t *, size_t)
struct _ast5501; // CXXMethodDecl Finish
struct _ast5502; // CXXMethodDecl Abort
struct _ast5503; // ParmVarDecl exception
struct _ast5504; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5505; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5506; // CXXMethodDecl SetCompiledModuleBytes
struct _ast5507; // ParmVarDecl bytes
struct _ast5508; // ParmVarDecl size
struct _ast5509; // FunctionProtoType bool (const uint8_t *, size_t)
struct _ast5510; // CXXMethodDecl SetClient
struct _ast5511; // ParmVarDecl client
struct _ast5512; // ElaboratedType std::shared_ptr<Client>
struct _ast5513; // FunctionProtoType void (std::shared_ptr<Client>)
struct _ast5514; // CXXMethodDecl Unpack
struct _ast5515; // ParmVarDecl isolate
struct _ast5516; // ParmVarDecl value
struct _ast5517; // TemplateSpecializationType Local<v8::Value>
struct _ast5518; // FunctionProtoType std::shared_ptr<WasmStreaming>
                 // (v8::Isolate *, Local<v8::Value>)
struct _ast5519; // ElaboratedType std::shared_ptr<WasmStreaming>
struct _ast5520; // CXXConstructorDecl WasmStreaming
struct _ast5521; // ParmVarDecl
struct _ast5522; // LValueReferenceType const v8::WasmStreaming &
struct _ast5523; // RecordType const v8::WasmStreaming
struct _ast5524; // FunctionProtoType void (const v8::WasmStreaming &)
struct _ast5525; // CXXRecordDecl WasmModuleObjectBuilderStreaming
struct _ast5526; // RecordType v8::WasmModuleObjectBuilderStreaming
struct _ast5527; // FieldDecl isolate_
struct _ast5528; // FieldDecl promise_
struct _ast5529; // TemplateSpecializationType Persistent<v8::Promise,
                 // CopyablePersistentTraits<v8::Promise> >
struct _ast5530; // FieldDecl streaming_decoder_
struct _ast5531; // ElaboratedType
                 // std::shared_ptr<internal::wasm::StreamingDecoder>
struct _ast5532; // CXXRecordDecl WasmModuleObjectBuilderStreaming
struct _ast5533; // CXXConstructorDecl WasmModuleObjectBuilderStreaming
struct _ast5534; // ParmVarDecl isolate
struct _ast5535; // PointerType v8::WasmModuleObjectBuilderStreaming *
struct _ast5536; // CXXMethodDecl OnBytesReceived
struct _ast5537; // ParmVarDecl
struct _ast5538; // ParmVarDecl size
struct _ast5539; // CXXMethodDecl Finish
struct _ast5540; // CXXMethodDecl Abort
struct _ast5541; // ParmVarDecl exception
struct _ast5542; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5543; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5544; // CXXMethodDecl GetPromise
struct _ast5545; // FunctionProtoType Local<v8::Promise> ()
struct _ast5546; // TemplateSpecializationType Local<v8::Promise>
struct _ast5547; // CXXDestructorDecl ~WasmModuleObjectBuilderStreaming
struct _ast5548; // FunctionProtoType void ()
struct _ast5549; // EnumDecl ArrayBufferCreationMode
struct _ast5550; // EnumConstantDecl kInternalized
struct _ast5551; // EnumConstantDecl kExternalized
struct _ast5552; // CXXRecordDecl ArrayBuffer
struct _ast5553; // CXXRecordDecl Allocator
struct _ast5554; // RecordType v8::ArrayBuffer::Allocator
struct _ast5555; // CXXRecordDecl Allocator
struct _ast5556; // CXXDestructorDecl ~Allocator
struct _ast5557; // FunctionProtoType void ()
struct _ast5558; // PointerType v8::ArrayBuffer::Allocator *
struct _ast5559; // CXXMethodDecl Allocate
struct _ast5560; // ParmVarDecl length
struct _ast5561; // FunctionProtoType void *(size_t)
struct _ast5562; // CXXMethodDecl AllocateUninitialized
struct _ast5563; // ParmVarDecl length
struct _ast5564; // CXXMethodDecl Free
struct _ast5565; // ParmVarDecl data
struct _ast5566; // ParmVarDecl length
struct _ast5567; // FunctionProtoType void (void *, size_t)
struct _ast5568; // EnumDecl AllocationMode
struct _ast5569; // EnumConstantDecl kNormal
struct _ast5570; // EnumConstantDecl kReservation
struct _ast5571; // CXXMethodDecl NewDefaultAllocator
struct _ast5572; // FunctionProtoType v8::ArrayBuffer::Allocator *()
struct _ast5573; // CXXMethodDecl operator=
struct _ast5574; // ParmVarDecl
struct _ast5575; // LValueReferenceType const v8::ArrayBuffer::Allocator &
struct _ast5576; // RecordType const v8::ArrayBuffer::Allocator
struct _ast5577; // FunctionProtoType v8::ArrayBuffer::Allocator &(const
                 // v8::ArrayBuffer::Allocator &)
struct _ast5578; // LValueReferenceType v8::ArrayBuffer::Allocator &
struct _ast5579; // CXXRecordDecl Contents
struct _ast5580; // RecordType v8::ArrayBuffer::Contents
struct _ast5581; // FieldDecl data_
struct _ast5582; // FieldDecl byte_length_
struct _ast5583; // FieldDecl allocation_base_
struct _ast5584; // FieldDecl allocation_length_
struct _ast5585; // FieldDecl allocation_mode_
struct _ast5586; // ElaboratedType Allocator::AllocationMode
struct _ast5587; // FieldDecl deleter_
struct _ast5588; // TypedefType v8::ArrayBuffer::Contents::DeleterCallback
struct _ast5589; // TypeAliasDecl DeleterCallback
struct _ast5590; // FieldDecl deleter_data_
struct _ast5591; // CXXRecordDecl Contents
struct _ast5592; // CXXConstructorDecl Contents
struct _ast5593; // PointerType v8::ArrayBuffer::Contents *
struct _ast5594; // CXXMethodDecl AllocationBase
struct _ast5595; // FunctionProtoType void *() const
struct _ast5596; // PointerType const v8::ArrayBuffer::Contents *
struct _ast5597; // RecordType const v8::ArrayBuffer::Contents
struct _ast5598; // CXXMethodDecl AllocationLength
struct _ast5599; // CXXMethodDecl AllocationMode
struct _ast5600; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5601; // CXXMethodDecl Data
struct _ast5602; // CXXMethodDecl ByteLength
struct _ast5603; // CXXMethodDecl Deleter
struct _ast5604; // FunctionProtoType v8::ArrayBuffer::Contents::DeleterCallback
                 // () const
struct _ast5605; // CXXMethodDecl DeleterData
struct _ast5606; // CXXMethodDecl ByteLength
struct _ast5607; // PointerType const v8::ArrayBuffer *
struct _ast5608; // RecordType const v8::ArrayBuffer
struct _ast5609; // CXXMethodDecl New
struct _ast5610; // ParmVarDecl isolate
struct _ast5611; // ParmVarDecl byte_length
struct _ast5612; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *,
                 // size_t)
struct _ast5613; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5614; // CXXMethodDecl New
struct _ast5615; // ParmVarDecl isolate
struct _ast5616; // ParmVarDecl data
struct _ast5617; // ParmVarDecl byte_length
struct _ast5618; // ParmVarDecl mode
struct _ast5619; // EnumType v8::ArrayBufferCreationMode
struct _ast5620; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *,
                 // void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5621; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5622; // CXXMethodDecl IsExternal
struct _ast5623; // CXXMethodDecl IsDetachable
struct _ast5624; // CXXMethodDecl IsNeuterable
struct _ast5625; // CXXMethodDecl Detach
struct _ast5626; // PointerType v8::ArrayBuffer *
struct _ast5627; // CXXMethodDecl Neuter
struct _ast5628; // CXXMethodDecl Externalize
struct _ast5629; // FunctionProtoType v8::ArrayBuffer::Contents ()
struct _ast5630; // CXXMethodDecl GetContents
struct _ast5631; // CXXMethodDecl Cast
struct _ast5632; // ParmVarDecl obj
struct _ast5633; // FunctionProtoType v8::ArrayBuffer *(v8::Value *)
struct _ast5634; // VarDecl kInternalFieldCount
struct _ast5635; // VarDecl kEmbedderFieldCount
struct _ast5636; // CXXRecordDecl ArrayBufferView
struct _ast5637; // RecordType v8::ArrayBufferView
struct _ast5638; // CXXBaseSpecifier Record v8::Object
struct _ast5639; // CXXRecordDecl ArrayBufferView
struct _ast5640; // CXXMethodDecl Buffer
struct _ast5641; // FunctionProtoType Local<v8::ArrayBuffer> ()
struct _ast5642; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5643; // PointerType v8::ArrayBufferView *
struct _ast5644; // CXXMethodDecl ByteOffset
struct _ast5645; // FunctionProtoType size_t ()
struct _ast5646; // CXXMethodDecl ByteLength
struct _ast5647; // CXXMethodDecl CopyContents
struct _ast5648; // ParmVarDecl dest
struct _ast5649; // ParmVarDecl byte_length
struct _ast5650; // FunctionProtoType size_t (void *, size_t)
struct _ast5651; // CXXMethodDecl HasBuffer
struct _ast5652; // PointerType const v8::ArrayBufferView *
struct _ast5653; // RecordType const v8::ArrayBufferView
struct _ast5654; // CXXMethodDecl Cast
struct _ast5655; // ParmVarDecl obj
struct _ast5656; // FunctionProtoType v8::ArrayBufferView *(v8::Value *)
struct _ast5657; // VarDecl kInternalFieldCount
struct _ast5658; // VarDecl kEmbedderFieldCount
struct _ast5659; // CXXRecordDecl TypedArray
struct _ast5660; // RecordType v8::TypedArray
struct _ast5661; // CXXBaseSpecifier Record v8::ArrayBufferView
struct _ast5662; // CXXRecordDecl TypedArray
struct _ast5663; // VarDecl kMaxLength
struct _ast5664; // TypedefType const size_t
struct _ast5665; // CXXMethodDecl Length
struct _ast5666; // PointerType v8::TypedArray *
struct _ast5667; // CXXMethodDecl Cast
struct _ast5668; // ParmVarDecl obj
struct _ast5669; // FunctionProtoType v8::TypedArray *(v8::Value *)
struct _ast5670; // CXXRecordDecl Uint8Array
struct _ast5671; // RecordType v8::Uint8Array
struct _ast5672; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5673; // CXXRecordDecl Uint8Array
struct _ast5674; // CXXMethodDecl New
struct _ast5675; // ParmVarDecl array_buffer
struct _ast5676; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5677; // ParmVarDecl byte_offset
struct _ast5678; // ParmVarDecl length
struct _ast5679; // FunctionProtoType Local<v8::Uint8Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5680; // TemplateSpecializationType Local<v8::Uint8Array>
struct _ast5681; // CXXMethodDecl New
struct _ast5682; // ParmVarDecl shared_array_buffer
struct _ast5683; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5684; // ParmVarDecl byte_offset
struct _ast5685; // ParmVarDecl length
struct _ast5686; // FunctionProtoType Local<v8::Uint8Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5687; // TemplateSpecializationType Local<v8::Uint8Array>
struct _ast5688; // CXXMethodDecl Cast
struct _ast5689; // ParmVarDecl obj
struct _ast5690; // FunctionProtoType v8::Uint8Array *(v8::Value *)
struct _ast5691; // PointerType v8::Uint8Array *
struct _ast5692; // CXXRecordDecl Uint8ClampedArray
struct _ast5693; // RecordType v8::Uint8ClampedArray
struct _ast5694; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5695; // CXXRecordDecl Uint8ClampedArray
struct _ast5696; // CXXMethodDecl New
struct _ast5697; // ParmVarDecl array_buffer
struct _ast5698; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5699; // ParmVarDecl byte_offset
struct _ast5700; // ParmVarDecl length
struct _ast5701; // FunctionProtoType Local<v8::Uint8ClampedArray>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5702; // TemplateSpecializationType Local<v8::Uint8ClampedArray>
struct _ast5703; // CXXMethodDecl New
struct _ast5704; // ParmVarDecl shared_array_buffer
struct _ast5705; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5706; // ParmVarDecl byte_offset
struct _ast5707; // ParmVarDecl length
struct _ast5708; // FunctionProtoType Local<v8::Uint8ClampedArray>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5709; // TemplateSpecializationType Local<v8::Uint8ClampedArray>
struct _ast5710; // CXXMethodDecl Cast
struct _ast5711; // ParmVarDecl obj
struct _ast5712; // FunctionProtoType v8::Uint8ClampedArray *(v8::Value *)
struct _ast5713; // PointerType v8::Uint8ClampedArray *
struct _ast5714; // CXXRecordDecl Int8Array
struct _ast5715; // RecordType v8::Int8Array
struct _ast5716; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5717; // CXXRecordDecl Int8Array
struct _ast5718; // CXXMethodDecl New
struct _ast5719; // ParmVarDecl array_buffer
struct _ast5720; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5721; // ParmVarDecl byte_offset
struct _ast5722; // ParmVarDecl length
struct _ast5723; // FunctionProtoType Local<v8::Int8Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5724; // TemplateSpecializationType Local<v8::Int8Array>
struct _ast5725; // CXXMethodDecl New
struct _ast5726; // ParmVarDecl shared_array_buffer
struct _ast5727; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5728; // ParmVarDecl byte_offset
struct _ast5729; // ParmVarDecl length
struct _ast5730; // FunctionProtoType Local<v8::Int8Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5731; // TemplateSpecializationType Local<v8::Int8Array>
struct _ast5732; // CXXMethodDecl Cast
struct _ast5733; // ParmVarDecl obj
struct _ast5734; // FunctionProtoType v8::Int8Array *(v8::Value *)
struct _ast5735; // PointerType v8::Int8Array *
struct _ast5736; // CXXRecordDecl Uint16Array
struct _ast5737; // RecordType v8::Uint16Array
struct _ast5738; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5739; // CXXRecordDecl Uint16Array
struct _ast5740; // CXXMethodDecl New
struct _ast5741; // ParmVarDecl array_buffer
struct _ast5742; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5743; // ParmVarDecl byte_offset
struct _ast5744; // ParmVarDecl length
struct _ast5745; // FunctionProtoType Local<v8::Uint16Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5746; // TemplateSpecializationType Local<v8::Uint16Array>
struct _ast5747; // CXXMethodDecl New
struct _ast5748; // ParmVarDecl shared_array_buffer
struct _ast5749; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5750; // ParmVarDecl byte_offset
struct _ast5751; // ParmVarDecl length
struct _ast5752; // FunctionProtoType Local<v8::Uint16Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5753; // TemplateSpecializationType Local<v8::Uint16Array>
struct _ast5754; // CXXMethodDecl Cast
struct _ast5755; // ParmVarDecl obj
struct _ast5756; // FunctionProtoType v8::Uint16Array *(v8::Value *)
struct _ast5757; // PointerType v8::Uint16Array *
struct _ast5758; // CXXRecordDecl Int16Array
struct _ast5759; // RecordType v8::Int16Array
struct _ast5760; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5761; // CXXRecordDecl Int16Array
struct _ast5762; // CXXMethodDecl New
struct _ast5763; // ParmVarDecl array_buffer
struct _ast5764; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5765; // ParmVarDecl byte_offset
struct _ast5766; // ParmVarDecl length
struct _ast5767; // FunctionProtoType Local<v8::Int16Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5768; // TemplateSpecializationType Local<v8::Int16Array>
struct _ast5769; // CXXMethodDecl New
struct _ast5770; // ParmVarDecl shared_array_buffer
struct _ast5771; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5772; // ParmVarDecl byte_offset
struct _ast5773; // ParmVarDecl length
struct _ast5774; // FunctionProtoType Local<v8::Int16Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5775; // TemplateSpecializationType Local<v8::Int16Array>
struct _ast5776; // CXXMethodDecl Cast
struct _ast5777; // ParmVarDecl obj
struct _ast5778; // FunctionProtoType v8::Int16Array *(v8::Value *)
struct _ast5779; // PointerType v8::Int16Array *
struct _ast5780; // CXXRecordDecl Uint32Array
struct _ast5781; // RecordType v8::Uint32Array
struct _ast5782; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5783; // CXXRecordDecl Uint32Array
struct _ast5784; // CXXMethodDecl New
struct _ast5785; // ParmVarDecl array_buffer
struct _ast5786; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5787; // ParmVarDecl byte_offset
struct _ast5788; // ParmVarDecl length
struct _ast5789; // FunctionProtoType Local<v8::Uint32Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5790; // TemplateSpecializationType Local<v8::Uint32Array>
struct _ast5791; // CXXMethodDecl New
struct _ast5792; // ParmVarDecl shared_array_buffer
struct _ast5793; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5794; // ParmVarDecl byte_offset
struct _ast5795; // ParmVarDecl length
struct _ast5796; // FunctionProtoType Local<v8::Uint32Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5797; // TemplateSpecializationType Local<v8::Uint32Array>
struct _ast5798; // CXXMethodDecl Cast
struct _ast5799; // ParmVarDecl obj
struct _ast5800; // FunctionProtoType v8::Uint32Array *(v8::Value *)
struct _ast5801; // PointerType v8::Uint32Array *
struct _ast5802; // CXXRecordDecl Int32Array
struct _ast5803; // RecordType v8::Int32Array
struct _ast5804; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5805; // CXXRecordDecl Int32Array
struct _ast5806; // CXXMethodDecl New
struct _ast5807; // ParmVarDecl array_buffer
struct _ast5808; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5809; // ParmVarDecl byte_offset
struct _ast5810; // ParmVarDecl length
struct _ast5811; // FunctionProtoType Local<v8::Int32Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5812; // TemplateSpecializationType Local<v8::Int32Array>
struct _ast5813; // CXXMethodDecl New
struct _ast5814; // ParmVarDecl shared_array_buffer
struct _ast5815; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5816; // ParmVarDecl byte_offset
struct _ast5817; // ParmVarDecl length
struct _ast5818; // FunctionProtoType Local<v8::Int32Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5819; // TemplateSpecializationType Local<v8::Int32Array>
struct _ast5820; // CXXMethodDecl Cast
struct _ast5821; // ParmVarDecl obj
struct _ast5822; // FunctionProtoType v8::Int32Array *(v8::Value *)
struct _ast5823; // PointerType v8::Int32Array *
struct _ast5824; // CXXRecordDecl Float32Array
struct _ast5825; // RecordType v8::Float32Array
struct _ast5826; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5827; // CXXRecordDecl Float32Array
struct _ast5828; // CXXMethodDecl New
struct _ast5829; // ParmVarDecl array_buffer
struct _ast5830; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5831; // ParmVarDecl byte_offset
struct _ast5832; // ParmVarDecl length
struct _ast5833; // FunctionProtoType Local<v8::Float32Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5834; // TemplateSpecializationType Local<v8::Float32Array>
struct _ast5835; // CXXMethodDecl New
struct _ast5836; // ParmVarDecl shared_array_buffer
struct _ast5837; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5838; // ParmVarDecl byte_offset
struct _ast5839; // ParmVarDecl length
struct _ast5840; // FunctionProtoType Local<v8::Float32Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5841; // TemplateSpecializationType Local<v8::Float32Array>
struct _ast5842; // CXXMethodDecl Cast
struct _ast5843; // ParmVarDecl obj
struct _ast5844; // FunctionProtoType v8::Float32Array *(v8::Value *)
struct _ast5845; // PointerType v8::Float32Array *
struct _ast5846; // CXXRecordDecl Float64Array
struct _ast5847; // RecordType v8::Float64Array
struct _ast5848; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5849; // CXXRecordDecl Float64Array
struct _ast5850; // CXXMethodDecl New
struct _ast5851; // ParmVarDecl array_buffer
struct _ast5852; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5853; // ParmVarDecl byte_offset
struct _ast5854; // ParmVarDecl length
struct _ast5855; // FunctionProtoType Local<v8::Float64Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5856; // TemplateSpecializationType Local<v8::Float64Array>
struct _ast5857; // CXXMethodDecl New
struct _ast5858; // ParmVarDecl shared_array_buffer
struct _ast5859; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5860; // ParmVarDecl byte_offset
struct _ast5861; // ParmVarDecl length
struct _ast5862; // FunctionProtoType Local<v8::Float64Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5863; // TemplateSpecializationType Local<v8::Float64Array>
struct _ast5864; // CXXMethodDecl Cast
struct _ast5865; // ParmVarDecl obj
struct _ast5866; // FunctionProtoType v8::Float64Array *(v8::Value *)
struct _ast5867; // PointerType v8::Float64Array *
struct _ast5868; // CXXRecordDecl BigInt64Array
struct _ast5869; // RecordType v8::BigInt64Array
struct _ast5870; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5871; // CXXRecordDecl BigInt64Array
struct _ast5872; // CXXMethodDecl New
struct _ast5873; // ParmVarDecl array_buffer
struct _ast5874; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5875; // ParmVarDecl byte_offset
struct _ast5876; // ParmVarDecl length
struct _ast5877; // FunctionProtoType Local<v8::BigInt64Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5878; // TemplateSpecializationType Local<v8::BigInt64Array>
struct _ast5879; // CXXMethodDecl New
struct _ast5880; // ParmVarDecl shared_array_buffer
struct _ast5881; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5882; // ParmVarDecl byte_offset
struct _ast5883; // ParmVarDecl length
struct _ast5884; // FunctionProtoType Local<v8::BigInt64Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5885; // TemplateSpecializationType Local<v8::BigInt64Array>
struct _ast5886; // CXXMethodDecl Cast
struct _ast5887; // ParmVarDecl obj
struct _ast5888; // FunctionProtoType v8::BigInt64Array *(v8::Value *)
struct _ast5889; // PointerType v8::BigInt64Array *
struct _ast5890; // CXXRecordDecl BigUint64Array
struct _ast5891; // RecordType v8::BigUint64Array
struct _ast5892; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5893; // CXXRecordDecl BigUint64Array
struct _ast5894; // CXXMethodDecl New
struct _ast5895; // ParmVarDecl array_buffer
struct _ast5896; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5897; // ParmVarDecl byte_offset
struct _ast5898; // ParmVarDecl length
struct _ast5899; // FunctionProtoType Local<v8::BigUint64Array>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5900; // TemplateSpecializationType Local<v8::BigUint64Array>
struct _ast5901; // CXXMethodDecl New
struct _ast5902; // ParmVarDecl shared_array_buffer
struct _ast5903; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5904; // ParmVarDecl byte_offset
struct _ast5905; // ParmVarDecl length
struct _ast5906; // FunctionProtoType Local<v8::BigUint64Array>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5907; // TemplateSpecializationType Local<v8::BigUint64Array>
struct _ast5908; // CXXMethodDecl Cast
struct _ast5909; // ParmVarDecl obj
struct _ast5910; // FunctionProtoType v8::BigUint64Array *(v8::Value *)
struct _ast5911; // PointerType v8::BigUint64Array *
struct _ast5912; // CXXRecordDecl DataView
struct _ast5913; // RecordType v8::DataView
struct _ast5914; // CXXBaseSpecifier Record v8::ArrayBufferView
struct _ast5915; // CXXRecordDecl DataView
struct _ast5916; // CXXMethodDecl New
struct _ast5917; // ParmVarDecl array_buffer
struct _ast5918; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5919; // ParmVarDecl byte_offset
struct _ast5920; // ParmVarDecl length
struct _ast5921; // FunctionProtoType Local<v8::DataView>
                 // (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5922; // TemplateSpecializationType Local<v8::DataView>
struct _ast5923; // CXXMethodDecl New
struct _ast5924; // ParmVarDecl shared_array_buffer
struct _ast5925; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5926; // ParmVarDecl byte_offset
struct _ast5927; // ParmVarDecl length
struct _ast5928; // FunctionProtoType Local<v8::DataView>
                 // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5929; // TemplateSpecializationType Local<v8::DataView>
struct _ast5930; // CXXMethodDecl Cast
struct _ast5931; // ParmVarDecl obj
struct _ast5932; // FunctionProtoType v8::DataView *(v8::Value *)
struct _ast5933; // PointerType v8::DataView *
struct _ast5934; // CXXRecordDecl SharedArrayBuffer
struct _ast5935; // CXXRecordDecl Contents
struct _ast5936; // RecordType v8::SharedArrayBuffer::Contents
struct _ast5937; // FieldDecl data_
struct _ast5938; // FieldDecl byte_length_
struct _ast5939; // FieldDecl allocation_base_
struct _ast5940; // FieldDecl allocation_length_
struct _ast5941; // FieldDecl allocation_mode_
struct _ast5942; // ElaboratedType Allocator::AllocationMode
struct _ast5943; // FieldDecl deleter_
struct _ast5944; // TypedefType v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ast5945; // TypeAliasDecl DeleterCallback
struct _ast5946; // FieldDecl deleter_data_
struct _ast5947; // CXXRecordDecl Contents
struct _ast5948; // TypeAliasDecl Allocator
struct _ast5949; // TypedefType v8::SharedArrayBuffer::Contents::Allocator
struct _ast5950; // CXXConstructorDecl Contents
struct _ast5951; // PointerType v8::SharedArrayBuffer::Contents *
struct _ast5952; // CXXMethodDecl AllocationBase
struct _ast5953; // PointerType const v8::SharedArrayBuffer::Contents *
struct _ast5954; // RecordType const v8::SharedArrayBuffer::Contents
struct _ast5955; // CXXMethodDecl AllocationLength
struct _ast5956; // CXXMethodDecl AllocationMode
struct _ast5957; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5958; // CXXMethodDecl Data
struct _ast5959; // CXXMethodDecl ByteLength
struct _ast5960; // CXXMethodDecl Deleter
struct _ast5961; // FunctionProtoType
                 // v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _ast5962; // CXXMethodDecl DeleterData
struct _ast5963; // CXXMethodDecl ByteLength
struct _ast5964; // PointerType const v8::SharedArrayBuffer *
struct _ast5965; // RecordType const v8::SharedArrayBuffer
struct _ast5966; // CXXMethodDecl New
struct _ast5967; // ParmVarDecl isolate
struct _ast5968; // ParmVarDecl byte_length
struct _ast5969; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate
                 // *, size_t)
struct _ast5970; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5971; // CXXMethodDecl New
struct _ast5972; // ParmVarDecl isolate
struct _ast5973; // ParmVarDecl data
struct _ast5974; // ParmVarDecl byte_length
struct _ast5975; // ParmVarDecl mode
struct _ast5976; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate
                 // *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5977; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5978; // CXXMethodDecl New
struct _ast5979; // ParmVarDecl isolate
struct _ast5980; // ParmVarDecl
struct _ast5981; // LValueReferenceType const SharedArrayBuffer::Contents &
struct _ast5982; // ElaboratedType const SharedArrayBuffer::Contents
struct _ast5983; // ElaboratedType SharedArrayBuffer::Contents
struct _ast5984; // ParmVarDecl mode
struct _ast5985; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate
                 // *, const SharedArrayBuffer::Contents &,
                 // v8::ArrayBufferCreationMode)
struct _ast5986; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5987; // CXXMethodDecl IsExternal
struct _ast5988; // CXXMethodDecl Externalize
struct _ast5989; // FunctionProtoType v8::SharedArrayBuffer::Contents ()
struct _ast5990; // PointerType v8::SharedArrayBuffer *
struct _ast5991; // CXXMethodDecl GetContents
struct _ast5992; // CXXMethodDecl Cast
struct _ast5993; // ParmVarDecl obj
struct _ast5994; // FunctionProtoType v8::SharedArrayBuffer *(v8::Value *)
struct _ast5995; // VarDecl kInternalFieldCount
struct _ast5996; // CXXRecordDecl Date
struct _ast5997; // CXXMethodDecl New
struct _ast5998; // ParmVarDecl context
struct _ast5999; // TemplateSpecializationType Local<v8::Context>
struct _ast6000; // ParmVarDecl time
struct _ast6001; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
                 // double)
struct _ast6002; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast6003; // CXXMethodDecl ValueOf
struct _ast6004; // PointerType const v8::Date *
struct _ast6005; // RecordType const v8::Date
struct _ast6006; // CXXMethodDecl Cast
struct _ast6007; // ParmVarDecl obj
struct _ast6008; // FunctionProtoType v8::Date *(v8::Value *)
struct _ast6009; // PointerType v8::Date *
struct _ast6010; // CXXRecordDecl NumberObject
struct _ast6011; // CXXMethodDecl New
struct _ast6012; // ParmVarDecl isolate
struct _ast6013; // ParmVarDecl value
struct _ast6014; // FunctionProtoType Local<v8::Value> (v8::Isolate *, double)
struct _ast6015; // TemplateSpecializationType Local<v8::Value>
struct _ast6016; // CXXMethodDecl ValueOf
struct _ast6017; // PointerType const v8::NumberObject *
struct _ast6018; // RecordType const v8::NumberObject
struct _ast6019; // CXXMethodDecl Cast
struct _ast6020; // ParmVarDecl obj
struct _ast6021; // FunctionProtoType v8::NumberObject *(v8::Value *)
struct _ast6022; // PointerType v8::NumberObject *
struct _ast6023; // CXXRecordDecl BigIntObject
struct _ast6024; // CXXMethodDecl New
struct _ast6025; // ParmVarDecl isolate
struct _ast6026; // ParmVarDecl value
struct _ast6027; // FunctionProtoType Local<v8::Value> (v8::Isolate *, int64_t)
struct _ast6028; // TemplateSpecializationType Local<v8::Value>
struct _ast6029; // CXXMethodDecl ValueOf
struct _ast6030; // FunctionProtoType Local<v8::BigInt> () const
struct _ast6031; // TemplateSpecializationType Local<v8::BigInt>
struct _ast6032; // PointerType const v8::BigIntObject *
struct _ast6033; // RecordType const v8::BigIntObject
struct _ast6034; // CXXMethodDecl Cast
struct _ast6035; // ParmVarDecl obj
struct _ast6036; // FunctionProtoType v8::BigIntObject *(v8::Value *)
struct _ast6037; // PointerType v8::BigIntObject *
struct _ast6038; // CXXRecordDecl BooleanObject
struct _ast6039; // CXXMethodDecl New
struct _ast6040; // ParmVarDecl isolate
struct _ast6041; // ParmVarDecl value
struct _ast6042; // FunctionProtoType Local<v8::Value> (v8::Isolate *, bool)
struct _ast6043; // TemplateSpecializationType Local<v8::Value>
struct _ast6044; // CXXMethodDecl ValueOf
struct _ast6045; // PointerType const v8::BooleanObject *
struct _ast6046; // RecordType const v8::BooleanObject
struct _ast6047; // CXXMethodDecl Cast
struct _ast6048; // ParmVarDecl obj
struct _ast6049; // FunctionProtoType v8::BooleanObject *(v8::Value *)
struct _ast6050; // PointerType v8::BooleanObject *
struct _ast6051; // CXXRecordDecl StringObject
struct _ast6052; // CXXMethodDecl New
struct _ast6053; // ParmVarDecl isolate
struct _ast6054; // ParmVarDecl value
struct _ast6055; // TemplateSpecializationType Local<v8::String>
struct _ast6056; // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                 // Local<v8::String>)
struct _ast6057; // TemplateSpecializationType Local<v8::Value>
struct _ast6058; // CXXMethodDecl ValueOf
struct _ast6059; // FunctionProtoType Local<v8::String> () const
struct _ast6060; // TemplateSpecializationType Local<v8::String>
struct _ast6061; // PointerType const v8::StringObject *
struct _ast6062; // RecordType const v8::StringObject
struct _ast6063; // CXXMethodDecl Cast
struct _ast6064; // ParmVarDecl obj
struct _ast6065; // FunctionProtoType v8::StringObject *(v8::Value *)
struct _ast6066; // PointerType v8::StringObject *
struct _ast6067; // CXXRecordDecl SymbolObject
struct _ast6068; // CXXMethodDecl New
struct _ast6069; // ParmVarDecl isolate
struct _ast6070; // ParmVarDecl value
struct _ast6071; // TemplateSpecializationType Local<v8::Symbol>
struct _ast6072; // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                 // Local<v8::Symbol>)
struct _ast6073; // TemplateSpecializationType Local<v8::Value>
struct _ast6074; // CXXMethodDecl ValueOf
struct _ast6075; // FunctionProtoType Local<v8::Symbol> () const
struct _ast6076; // TemplateSpecializationType Local<v8::Symbol>
struct _ast6077; // PointerType const v8::SymbolObject *
struct _ast6078; // RecordType const v8::SymbolObject
struct _ast6079; // CXXMethodDecl Cast
struct _ast6080; // ParmVarDecl obj
struct _ast6081; // FunctionProtoType v8::SymbolObject *(v8::Value *)
struct _ast6082; // PointerType v8::SymbolObject *
struct _ast6083; // CXXRecordDecl RegExp
struct _ast6084; // RecordType v8::RegExp
struct _ast6085; // CXXBaseSpecifier Record v8::Object
struct _ast6086; // CXXRecordDecl RegExp
struct _ast6087; // EnumDecl Flags
struct _ast6088; // EnumConstantDecl kNone
struct _ast6089; // EnumConstantDecl kGlobal
struct _ast6090; // EnumConstantDecl kIgnoreCase
struct _ast6091; // EnumConstantDecl kMultiline
struct _ast6092; // EnumConstantDecl kSticky
struct _ast6093; // EnumConstantDecl kUnicode
struct _ast6094; // EnumConstantDecl kDotAll
struct _ast6095; // CXXMethodDecl New
struct _ast6096; // ParmVarDecl context
struct _ast6097; // TemplateSpecializationType Local<v8::Context>
struct _ast6098; // ParmVarDecl pattern
struct _ast6099; // TemplateSpecializationType Local<v8::String>
struct _ast6100; // ParmVarDecl flags
struct _ast6101; // EnumType v8::RegExp::Flags
struct _ast6102; // FunctionProtoType MaybeLocal<v8::RegExp>
                 // (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _ast6103; // TemplateSpecializationType MaybeLocal<v8::RegExp>
struct _ast6104; // CXXMethodDecl GetSource
struct _ast6105; // FunctionProtoType Local<v8::String> () const
struct _ast6106; // TemplateSpecializationType Local<v8::String>
struct _ast6107; // PointerType const v8::RegExp *
struct _ast6108; // RecordType const v8::RegExp
struct _ast6109; // CXXMethodDecl GetFlags
struct _ast6110; // FunctionProtoType v8::RegExp::Flags () const
struct _ast6111; // CXXMethodDecl Cast
struct _ast6112; // ParmVarDecl obj
struct _ast6113; // FunctionProtoType v8::RegExp *(v8::Value *)
struct _ast6114; // PointerType v8::RegExp *
struct _ast6115; // CXXRecordDecl External
struct _ast6116; // CXXMethodDecl New
struct _ast6117; // ParmVarDecl isolate
struct _ast6118; // ParmVarDecl value
struct _ast6119; // FunctionProtoType Local<v8::External> (v8::Isolate *, void
                 // *)
struct _ast6120; // TemplateSpecializationType Local<v8::External>
struct _ast6121; // CXXMethodDecl Cast
struct _ast6122; // ParmVarDecl obj
struct _ast6123; // FunctionProtoType v8::External *(v8::Value *)
struct _ast6124; // PointerType v8::External *
struct _ast6125; // CXXMethodDecl Value
struct _ast6126; // PointerType const v8::External *
struct _ast6127; // RecordType const v8::External
struct _ast6128; // EnumDecl Intrinsic
struct _ast6129; // EnumConstantDecl kArrayProto_entries
struct _ast6130; // EnumConstantDecl kArrayProto_forEach
struct _ast6131; // EnumConstantDecl kArrayProto_keys
struct _ast6132; // EnumConstantDecl kArrayProto_values
struct _ast6133; // EnumConstantDecl kErrorPrototype
struct _ast6134; // EnumConstantDecl kIteratorPrototype
struct _ast6135; // CXXRecordDecl Template
struct _ast6136; // RecordType v8::Template
struct _ast6137; // CXXBaseSpecifier Record v8::Data
struct _ast6138; // CXXRecordDecl Template
struct _ast6139; // CXXMethodDecl Set
struct _ast6140; // ParmVarDecl name
struct _ast6141; // TemplateSpecializationType Local<v8::Name>
struct _ast6142; // ParmVarDecl value
struct _ast6143; // TemplateSpecializationType Local<v8::Data>
struct _ast6144; // ParmVarDecl attributes
struct _ast6145; // FunctionProtoType void (Local<v8::Name>, Local<v8::Data>,
                 // v8::PropertyAttribute)
struct _ast6146; // PointerType v8::Template *
struct _ast6147; // CXXMethodDecl SetPrivate
struct _ast6148; // ParmVarDecl name
struct _ast6149; // TemplateSpecializationType Local<v8::Private>
struct _ast6150; // ParmVarDecl value
struct _ast6151; // TemplateSpecializationType Local<v8::Data>
struct _ast6152; // ParmVarDecl attributes
struct _ast6153; // FunctionProtoType void (Local<v8::Private>, Local<v8::Data>,
                 // v8::PropertyAttribute)
struct _ast6154; // CXXMethodDecl Set
struct _ast6155; // ParmVarDecl isolate
struct _ast6156; // ParmVarDecl name
struct _ast6157; // ParmVarDecl value
struct _ast6158; // TemplateSpecializationType Local<v8::Data>
struct _ast6159; // FunctionProtoType void (v8::Isolate *, const char *,
                 // Local<v8::Data>)
struct _ast6160; // CXXMethodDecl SetAccessorProperty
struct _ast6161; // ParmVarDecl name
struct _ast6162; // TemplateSpecializationType Local<v8::Name>
struct _ast6163; // ParmVarDecl getter
struct _ast6164; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6165; // ParmVarDecl setter
struct _ast6166; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6167; // ParmVarDecl attribute
struct _ast6168; // ParmVarDecl settings
struct _ast6169; // FunctionProtoType void (Local<v8::Name>,
                 // Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>,
                 // v8::PropertyAttribute, v8::AccessControl)
struct _ast6170; // CXXMethodDecl SetNativeDataProperty
struct _ast6171; // ParmVarDecl name
struct _ast6172; // TemplateSpecializationType Local<v8::String>
struct _ast6173; // ParmVarDecl getter
struct _ast6174; // ParmVarDecl setter
struct _ast6175; // ParmVarDecl data
struct _ast6176; // TemplateSpecializationType Local<v8::Value>
struct _ast6177; // ParmVarDecl attribute
struct _ast6178; // ParmVarDecl signature
struct _ast6179; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6180; // ParmVarDecl settings
struct _ast6181; // ParmVarDecl getter_side_effect_type
struct _ast6182; // ParmVarDecl setter_side_effect_type
struct _ast6183; // FunctionProtoType void (Local<v8::String>,
                 // v8::AccessorGetterCallback, v8::AccessorSetterCallback,
                 // Local<v8::Value>, v8::PropertyAttribute,
                 // Local<v8::AccessorSignature>, v8::AccessControl,
                 // v8::SideEffectType, v8::SideEffectType)
struct _ast6184; // CXXMethodDecl SetNativeDataProperty
struct _ast6185; // ParmVarDecl name
struct _ast6186; // TemplateSpecializationType Local<v8::Name>
struct _ast6187; // ParmVarDecl getter
struct _ast6188; // ParmVarDecl setter
struct _ast6189; // ParmVarDecl data
struct _ast6190; // TemplateSpecializationType Local<v8::Value>
struct _ast6191; // ParmVarDecl attribute
struct _ast6192; // ParmVarDecl signature
struct _ast6193; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6194; // ParmVarDecl settings
struct _ast6195; // ParmVarDecl getter_side_effect_type
struct _ast6196; // ParmVarDecl setter_side_effect_type
struct _ast6197; // FunctionProtoType void (Local<v8::Name>,
                 // v8::AccessorNameGetterCallback,
                 // v8::AccessorNameSetterCallback, Local<v8::Value>,
                 // v8::PropertyAttribute, Local<v8::AccessorSignature>,
                 // v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6198; // CXXMethodDecl SetLazyDataProperty
struct _ast6199; // ParmVarDecl name
struct _ast6200; // TemplateSpecializationType Local<v8::Name>
struct _ast6201; // ParmVarDecl getter
struct _ast6202; // ParmVarDecl data
struct _ast6203; // TemplateSpecializationType Local<v8::Value>
struct _ast6204; // ParmVarDecl attribute
struct _ast6205; // ParmVarDecl getter_side_effect_type
struct _ast6206; // ParmVarDecl setter_side_effect_type
struct _ast6207; // FunctionProtoType void (Local<v8::Name>,
                 // v8::AccessorNameGetterCallback, Local<v8::Value>,
                 // v8::PropertyAttribute, v8::SideEffectType,
                 // v8::SideEffectType)
struct _ast6208; // CXXMethodDecl SetIntrinsicDataProperty
struct _ast6209; // ParmVarDecl name
struct _ast6210; // TemplateSpecializationType Local<v8::Name>
struct _ast6211; // ParmVarDecl intrinsic
struct _ast6212; // EnumType v8::Intrinsic
struct _ast6213; // ParmVarDecl attribute
struct _ast6214; // FunctionProtoType void (Local<v8::Name>, v8::Intrinsic,
                 // v8::PropertyAttribute)
struct _ast6215; // TypedefDecl GenericNamedPropertyGetterCallback
struct _ast6216; // TypedefType v8::GenericNamedPropertyGetterCallback
struct _ast6217; // TypedefDecl GenericNamedPropertySetterCallback
struct _ast6218; // TypedefType v8::GenericNamedPropertySetterCallback
struct _ast6219; // TypedefDecl GenericNamedPropertyQueryCallback
struct _ast6220; // TypedefType v8::GenericNamedPropertyQueryCallback
struct _ast6221; // TypedefDecl GenericNamedPropertyDeleterCallback
struct _ast6222; // TypedefType v8::GenericNamedPropertyDeleterCallback
struct _ast6223; // TypedefDecl GenericNamedPropertyEnumeratorCallback
struct _ast6224; // TypedefType v8::GenericNamedPropertyEnumeratorCallback
struct _ast6225; // TypedefDecl GenericNamedPropertyDefinerCallback
struct _ast6226; // TypedefType v8::GenericNamedPropertyDefinerCallback
struct _ast6227; // TypedefDecl GenericNamedPropertyDescriptorCallback
struct _ast6228; // TypedefType v8::GenericNamedPropertyDescriptorCallback
struct _ast6229; // TypedefDecl IndexedPropertyGetterCallback
struct _ast6230; // TypedefType v8::IndexedPropertyGetterCallback
struct _ast6231; // TypedefDecl IndexedPropertySetterCallback
struct _ast6232; // TypedefType v8::IndexedPropertySetterCallback
struct _ast6233; // TypedefDecl IndexedPropertyQueryCallback
struct _ast6234; // TypedefType v8::IndexedPropertyQueryCallback
struct _ast6235; // TypedefDecl IndexedPropertyDeleterCallback
struct _ast6236; // TypedefType v8::IndexedPropertyDeleterCallback
struct _ast6237; // TypedefDecl IndexedPropertyEnumeratorCallback
struct _ast6238; // TypedefType v8::IndexedPropertyEnumeratorCallback
struct _ast6239; // TypedefDecl IndexedPropertyDefinerCallback
struct _ast6240; // TypedefType v8::IndexedPropertyDefinerCallback
struct _ast6241; // TypedefDecl IndexedPropertyDescriptorCallback
struct _ast6242; // TypedefType v8::IndexedPropertyDescriptorCallback
struct _ast6243; // EnumDecl AccessType
struct _ast6244; // EnumConstantDecl ACCESS_GET
struct _ast6245; // EnumConstantDecl ACCESS_SET
struct _ast6246; // EnumConstantDecl ACCESS_HAS
struct _ast6247; // EnumConstantDecl ACCESS_DELETE
struct _ast6248; // EnumConstantDecl ACCESS_KEYS
struct _ast6249; // TypedefDecl AccessCheckCallback
struct _ast6250; // TypedefType v8::AccessCheckCallback
struct _ast6251; // CXXRecordDecl FunctionTemplate
struct _ast6252; // CXXMethodDecl New
struct _ast6253; // ParmVarDecl isolate
struct _ast6254; // ParmVarDecl callback
struct _ast6255; // ParmVarDecl data
struct _ast6256; // TemplateSpecializationType Local<v8::Value>
struct _ast6257; // ParmVarDecl signature
struct _ast6258; // TemplateSpecializationType Local<v8::Signature>
struct _ast6259; // ParmVarDecl length
struct _ast6260; // ParmVarDecl behavior
struct _ast6261; // ParmVarDecl side_effect_type
struct _ast6262; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate
                 // *, v8::FunctionCallback, Local<v8::Value>,
                 // Local<v8::Signature>, int, v8::ConstructorBehavior,
                 // v8::SideEffectType)
struct _ast6263; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6264; // CXXMethodDecl FromSnapshot
struct _ast6265; // ParmVarDecl isolate
struct _ast6266; // ParmVarDecl index
struct _ast6267; // FunctionProtoType MaybeLocal<v8::FunctionTemplate>
                 // (v8::Isolate *, size_t)
struct _ast6268; // TemplateSpecializationType MaybeLocal<v8::FunctionTemplate>
struct _ast6269; // CXXMethodDecl NewWithCache
struct _ast6270; // ParmVarDecl isolate
struct _ast6271; // ParmVarDecl callback
struct _ast6272; // ParmVarDecl cache_property
struct _ast6273; // TemplateSpecializationType Local<v8::Private>
struct _ast6274; // ParmVarDecl data
struct _ast6275; // TemplateSpecializationType Local<v8::Value>
struct _ast6276; // ParmVarDecl signature
struct _ast6277; // TemplateSpecializationType Local<v8::Signature>
struct _ast6278; // ParmVarDecl length
struct _ast6279; // ParmVarDecl side_effect_type
struct _ast6280; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate
                 // *, v8::FunctionCallback, Local<v8::Private>,
                 // Local<v8::Value>, Local<v8::Signature>, int,
                 // v8::SideEffectType)
struct _ast6281; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6282; // CXXMethodDecl GetFunction
struct _ast6283; // ParmVarDecl context
struct _ast6284; // TemplateSpecializationType Local<v8::Context>
struct _ast6285; // FunctionProtoType MaybeLocal<v8::Function>
                 // (Local<v8::Context>)
struct _ast6286; // TemplateSpecializationType MaybeLocal<v8::Function>
struct _ast6287; // PointerType v8::FunctionTemplate *
struct _ast6288; // CXXMethodDecl NewRemoteInstance
struct _ast6289; // FunctionProtoType MaybeLocal<v8::Object> ()
struct _ast6290; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast6291; // CXXMethodDecl SetCallHandler
struct _ast6292; // ParmVarDecl callback
struct _ast6293; // ParmVarDecl data
struct _ast6294; // TemplateSpecializationType Local<v8::Value>
struct _ast6295; // ParmVarDecl side_effect_type
struct _ast6296; // FunctionProtoType void (v8::FunctionCallback,
                 // Local<v8::Value>, v8::SideEffectType)
struct _ast6297; // CXXMethodDecl SetLength
struct _ast6298; // ParmVarDecl length
struct _ast6299; // CXXMethodDecl InstanceTemplate
struct _ast6300; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6301; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast6302; // CXXMethodDecl Inherit
struct _ast6303; // ParmVarDecl parent
struct _ast6304; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6305; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6306; // CXXMethodDecl PrototypeTemplate
struct _ast6307; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6308; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast6309; // CXXMethodDecl SetPrototypeProviderTemplate
struct _ast6310; // ParmVarDecl prototype_provider
struct _ast6311; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6312; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6313; // CXXMethodDecl SetClassName
struct _ast6314; // ParmVarDecl name
struct _ast6315; // TemplateSpecializationType Local<v8::String>
struct _ast6316; // FunctionProtoType void (Local<v8::String>)
struct _ast6317; // CXXMethodDecl SetAcceptAnyReceiver
struct _ast6318; // ParmVarDecl value
struct _ast6319; // CXXMethodDecl ReadOnlyPrototype
struct _ast6320; // CXXMethodDecl RemovePrototype
struct _ast6321; // CXXMethodDecl HasInstance
struct _ast6322; // ParmVarDecl object
struct _ast6323; // TemplateSpecializationType Local<v8::Value>
struct _ast6324; // FunctionProtoType bool (Local<v8::Value>)
struct _ast6325; // CXXMethodDecl Cast
struct _ast6326; // ParmVarDecl data
struct _ast6327; // FunctionProtoType v8::FunctionTemplate *(v8::Data *)
struct _ast6328; // EnumDecl PropertyHandlerFlags
struct _ast6329; // EnumConstantDecl kNone
struct _ast6330; // EnumConstantDecl kAllCanRead
struct _ast6331; // EnumConstantDecl kNonMasking
struct _ast6332; // EnumConstantDecl kOnlyInterceptStrings
struct _ast6333; // EnumConstantDecl kHasNoSideEffect
struct _ast6334; // CXXRecordDecl NamedPropertyHandlerConfiguration
struct _ast6335; // RecordType v8::NamedPropertyHandlerConfiguration
struct _ast6336; // FieldDecl getter
struct _ast6337; // FieldDecl setter
struct _ast6338; // FieldDecl query
struct _ast6339; // FieldDecl deleter
struct _ast6340; // FieldDecl enumerator
struct _ast6341; // FieldDecl definer
struct _ast6342; // FieldDecl descriptor
struct _ast6343; // FieldDecl data
struct _ast6344; // TemplateSpecializationType Local<v8::Value>
struct _ast6345; // FieldDecl flags
struct _ast6346; // EnumType v8::PropertyHandlerFlags
struct _ast6347; // CXXRecordDecl NamedPropertyHandlerConfiguration
struct _ast6348; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6349; // ParmVarDecl getter
struct _ast6350; // ParmVarDecl setter
struct _ast6351; // ParmVarDecl query
struct _ast6352; // ParmVarDecl deleter
struct _ast6353; // ParmVarDecl enumerator
struct _ast6354; // ParmVarDecl definer
struct _ast6355; // ParmVarDecl descriptor
struct _ast6356; // ParmVarDecl data
struct _ast6357; // TemplateSpecializationType Local<v8::Value>
struct _ast6358; // ParmVarDecl flags
struct _ast6359; // FunctionProtoType void
                 // (v8::GenericNamedPropertyGetterCallback,
                 // v8::GenericNamedPropertySetterCallback,
                 // v8::GenericNamedPropertyQueryCallback,
                 // v8::GenericNamedPropertyDeleterCallback,
                 // v8::GenericNamedPropertyEnumeratorCallback,
                 // v8::GenericNamedPropertyDefinerCallback,
                 // v8::GenericNamedPropertyDescriptorCallback,
                 // Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6360; // PointerType v8::NamedPropertyHandlerConfiguration *
struct _ast6361; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6362; // ParmVarDecl getter
struct _ast6363; // ParmVarDecl setter
struct _ast6364; // ParmVarDecl query
struct _ast6365; // ParmVarDecl deleter
struct _ast6366; // ParmVarDecl enumerator
struct _ast6367; // ParmVarDecl data
struct _ast6368; // TemplateSpecializationType Local<v8::Value>
struct _ast6369; // ParmVarDecl flags
struct _ast6370; // FunctionProtoType void
                 // (v8::GenericNamedPropertyGetterCallback,
                 // v8::GenericNamedPropertySetterCallback,
                 // v8::GenericNamedPropertyQueryCallback,
                 // v8::GenericNamedPropertyDeleterCallback,
                 // v8::GenericNamedPropertyEnumeratorCallback,
                 // Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6371; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6372; // ParmVarDecl getter
struct _ast6373; // ParmVarDecl setter
struct _ast6374; // ParmVarDecl descriptor
struct _ast6375; // ParmVarDecl deleter
struct _ast6376; // ParmVarDecl enumerator
struct _ast6377; // ParmVarDecl definer
struct _ast6378; // ParmVarDecl data
struct _ast6379; // TemplateSpecializationType Local<v8::Value>
struct _ast6380; // ParmVarDecl flags
struct _ast6381; // FunctionProtoType void
                 // (v8::GenericNamedPropertyGetterCallback,
                 // v8::GenericNamedPropertySetterCallback,
                 // v8::GenericNamedPropertyDescriptorCallback,
                 // v8::GenericNamedPropertyDeleterCallback,
                 // v8::GenericNamedPropertyEnumeratorCallback,
                 // v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>,
                 // v8::PropertyHandlerFlags)
struct _ast6382; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6383; // ParmVarDecl
struct _ast6384; // LValueReferenceType const
                 // v8::NamedPropertyHandlerConfiguration &
struct _ast6385; // RecordType const v8::NamedPropertyHandlerConfiguration
struct _ast6386; // FunctionProtoType void (const
                 // v8::NamedPropertyHandlerConfiguration &)
struct _ast6387; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6388; // ParmVarDecl
struct _ast6389; // RValueReferenceType v8::NamedPropertyHandlerConfiguration &&
struct _ast6390; // FunctionProtoType void
                 // (v8::NamedPropertyHandlerConfiguration &&)
struct _ast6391; // CXXRecordDecl IndexedPropertyHandlerConfiguration
struct _ast6392; // RecordType v8::IndexedPropertyHandlerConfiguration
struct _ast6393; // FieldDecl getter
struct _ast6394; // FieldDecl setter
struct _ast6395; // FieldDecl query
struct _ast6396; // FieldDecl deleter
struct _ast6397; // FieldDecl enumerator
struct _ast6398; // FieldDecl definer
struct _ast6399; // FieldDecl descriptor
struct _ast6400; // FieldDecl data
struct _ast6401; // TemplateSpecializationType Local<v8::Value>
struct _ast6402; // FieldDecl flags
struct _ast6403; // CXXRecordDecl IndexedPropertyHandlerConfiguration
struct _ast6404; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6405; // ParmVarDecl getter
struct _ast6406; // ParmVarDecl setter
struct _ast6407; // ParmVarDecl query
struct _ast6408; // ParmVarDecl deleter
struct _ast6409; // ParmVarDecl enumerator
struct _ast6410; // ParmVarDecl definer
struct _ast6411; // ParmVarDecl descriptor
struct _ast6412; // ParmVarDecl data
struct _ast6413; // TemplateSpecializationType Local<v8::Value>
struct _ast6414; // ParmVarDecl flags
struct _ast6415; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
                 // v8::IndexedPropertySetterCallback,
                 // v8::IndexedPropertyQueryCallback,
                 // v8::IndexedPropertyDeleterCallback,
                 // v8::IndexedPropertyEnumeratorCallback,
                 // v8::IndexedPropertyDefinerCallback,
                 // v8::IndexedPropertyDescriptorCallback, Local<v8::Value>,
                 // v8::PropertyHandlerFlags)
struct _ast6416; // PointerType v8::IndexedPropertyHandlerConfiguration *
struct _ast6417; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6418; // ParmVarDecl getter
struct _ast6419; // ParmVarDecl setter
struct _ast6420; // ParmVarDecl query
struct _ast6421; // ParmVarDecl deleter
struct _ast6422; // ParmVarDecl enumerator
struct _ast6423; // ParmVarDecl data
struct _ast6424; // TemplateSpecializationType Local<v8::Value>
struct _ast6425; // ParmVarDecl flags
struct _ast6426; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
                 // v8::IndexedPropertySetterCallback,
                 // v8::IndexedPropertyQueryCallback,
                 // v8::IndexedPropertyDeleterCallback,
                 // v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>,
                 // v8::PropertyHandlerFlags)
struct _ast6427; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6428; // ParmVarDecl getter
struct _ast6429; // ParmVarDecl setter
struct _ast6430; // ParmVarDecl descriptor
struct _ast6431; // ParmVarDecl deleter
struct _ast6432; // ParmVarDecl enumerator
struct _ast6433; // ParmVarDecl definer
struct _ast6434; // ParmVarDecl data
struct _ast6435; // TemplateSpecializationType Local<v8::Value>
struct _ast6436; // ParmVarDecl flags
struct _ast6437; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
                 // v8::IndexedPropertySetterCallback,
                 // v8::IndexedPropertyDescriptorCallback,
                 // v8::IndexedPropertyDeleterCallback,
                 // v8::IndexedPropertyEnumeratorCallback,
                 // v8::IndexedPropertyDefinerCallback, Local<v8::Value>,
                 // v8::PropertyHandlerFlags)
struct _ast6438; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6439; // ParmVarDecl
struct _ast6440; // LValueReferenceType const
                 // v8::IndexedPropertyHandlerConfiguration &
struct _ast6441; // RecordType const v8::IndexedPropertyHandlerConfiguration
struct _ast6442; // FunctionProtoType void (const
                 // v8::IndexedPropertyHandlerConfiguration &)
struct _ast6443; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6444; // ParmVarDecl
struct _ast6445; // RValueReferenceType v8::IndexedPropertyHandlerConfiguration
                 // &&
struct _ast6446; // FunctionProtoType void
                 // (v8::IndexedPropertyHandlerConfiguration &&)
struct _ast6447; // CXXDestructorDecl ~IndexedPropertyHandlerConfiguration
struct _ast6448; // CXXRecordDecl ObjectTemplate
struct _ast6449; // CXXMethodDecl New
struct _ast6450; // ParmVarDecl isolate
struct _ast6451; // ParmVarDecl constructor
struct _ast6452; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6453; // FunctionProtoType Local<v8::ObjectTemplate> (v8::Isolate *,
                 // Local<v8::FunctionTemplate>)
struct _ast6454; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast6455; // CXXMethodDecl FromSnapshot
struct _ast6456; // ParmVarDecl isolate
struct _ast6457; // ParmVarDecl index
struct _ast6458; // FunctionProtoType MaybeLocal<v8::ObjectTemplate>
                 // (v8::Isolate *, size_t)
struct _ast6459; // TemplateSpecializationType MaybeLocal<v8::ObjectTemplate>
struct _ast6460; // CXXMethodDecl NewInstance
struct _ast6461; // ParmVarDecl context
struct _ast6462; // TemplateSpecializationType Local<v8::Context>
struct _ast6463; // FunctionProtoType MaybeLocal<v8::Object>
                 // (Local<v8::Context>)
struct _ast6464; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast6465; // PointerType v8::ObjectTemplate *
struct _ast6466; // CXXMethodDecl SetAccessor
struct _ast6467; // ParmVarDecl name
struct _ast6468; // TemplateSpecializationType Local<v8::String>
struct _ast6469; // ParmVarDecl getter
struct _ast6470; // ParmVarDecl setter
struct _ast6471; // ParmVarDecl data
struct _ast6472; // TemplateSpecializationType Local<v8::Value>
struct _ast6473; // ParmVarDecl settings
struct _ast6474; // ParmVarDecl attribute
struct _ast6475; // ParmVarDecl signature
struct _ast6476; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6477; // ParmVarDecl getter_side_effect_type
struct _ast6478; // ParmVarDecl setter_side_effect_type
struct _ast6479; // FunctionProtoType void (Local<v8::String>,
                 // v8::AccessorGetterCallback, v8::AccessorSetterCallback,
                 // Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute,
                 // Local<v8::AccessorSignature>, v8::SideEffectType,
                 // v8::SideEffectType)
struct _ast6480; // CXXMethodDecl SetAccessor
struct _ast6481; // ParmVarDecl name
struct _ast6482; // TemplateSpecializationType Local<v8::Name>
struct _ast6483; // ParmVarDecl getter
struct _ast6484; // ParmVarDecl setter
struct _ast6485; // ParmVarDecl data
struct _ast6486; // TemplateSpecializationType Local<v8::Value>
struct _ast6487; // ParmVarDecl settings
struct _ast6488; // ParmVarDecl attribute
struct _ast6489; // ParmVarDecl signature
struct _ast6490; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6491; // ParmVarDecl getter_side_effect_type
struct _ast6492; // ParmVarDecl setter_side_effect_type
struct _ast6493; // FunctionProtoType void (Local<v8::Name>,
                 // v8::AccessorNameGetterCallback,
                 // v8::AccessorNameSetterCallback, Local<v8::Value>,
                 // v8::AccessControl, v8::PropertyAttribute,
                 // Local<v8::AccessorSignature>, v8::SideEffectType,
                 // v8::SideEffectType)
struct _ast6494; // CXXMethodDecl SetHandler
struct _ast6495; // ParmVarDecl configuration
struct _ast6496; // FunctionProtoType void (const
                 // v8::NamedPropertyHandlerConfiguration &)
struct _ast6497; // CXXMethodDecl SetIndexedPropertyHandler
struct _ast6498; // ParmVarDecl getter
struct _ast6499; // ParmVarDecl setter
struct _ast6500; // ParmVarDecl query
struct _ast6501; // ParmVarDecl deleter
struct _ast6502; // ParmVarDecl enumerator
struct _ast6503; // ParmVarDecl data
struct _ast6504; // TemplateSpecializationType Local<v8::Value>
struct _ast6505; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
                 // v8::IndexedPropertySetterCallback,
                 // v8::IndexedPropertyQueryCallback,
                 // v8::IndexedPropertyDeleterCallback,
                 // v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _ast6506; // CXXMethodDecl SetHandler
struct _ast6507; // ParmVarDecl configuration
struct _ast6508; // FunctionProtoType void (const
                 // v8::IndexedPropertyHandlerConfiguration &)
struct _ast6509; // CXXMethodDecl SetCallAsFunctionHandler
struct _ast6510; // ParmVarDecl callback
struct _ast6511; // ParmVarDecl data
struct _ast6512; // TemplateSpecializationType Local<v8::Value>
struct _ast6513; // FunctionProtoType void (v8::FunctionCallback,
                 // Local<v8::Value>)
struct _ast6514; // CXXMethodDecl MarkAsUndetectable
struct _ast6515; // CXXMethodDecl SetAccessCheckCallback
struct _ast6516; // ParmVarDecl callback
struct _ast6517; // ParmVarDecl data
struct _ast6518; // TemplateSpecializationType Local<v8::Value>
struct _ast6519; // FunctionProtoType void (v8::AccessCheckCallback,
                 // Local<v8::Value>)
struct _ast6520; // CXXMethodDecl SetAccessCheckCallbackAndHandler
struct _ast6521; // ParmVarDecl callback
struct _ast6522; // ParmVarDecl named_handler
struct _ast6523; // ParmVarDecl indexed_handler
struct _ast6524; // ParmVarDecl data
struct _ast6525; // TemplateSpecializationType Local<v8::Value>
struct _ast6526; // FunctionProtoType void (v8::AccessCheckCallback, const
                 // v8::NamedPropertyHandlerConfiguration &, const
                 // v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ast6527; // CXXMethodDecl InternalFieldCount
struct _ast6528; // CXXMethodDecl SetInternalFieldCount
struct _ast6529; // ParmVarDecl value
struct _ast6530; // CXXMethodDecl IsImmutableProto
struct _ast6531; // CXXMethodDecl SetImmutableProto
struct _ast6532; // CXXMethodDecl Cast
struct _ast6533; // ParmVarDecl data
struct _ast6534; // FunctionProtoType v8::ObjectTemplate *(v8::Data *)
struct _ast6535; // CXXRecordDecl Signature
struct _ast6536; // CXXMethodDecl New
struct _ast6537; // ParmVarDecl isolate
struct _ast6538; // ParmVarDecl receiver
struct _ast6539; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6540; // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
                 // Local<v8::FunctionTemplate>)
struct _ast6541; // TemplateSpecializationType Local<v8::Signature>
struct _ast6542; // CXXMethodDecl Cast
struct _ast6543; // ParmVarDecl data
struct _ast6544; // FunctionProtoType v8::Signature *(v8::Data *)
struct _ast6545; // PointerType v8::Signature *
struct _ast6546; // CXXRecordDecl AccessorSignature
struct _ast6547; // CXXMethodDecl New
struct _ast6548; // ParmVarDecl isolate
struct _ast6549; // ParmVarDecl receiver
struct _ast6550; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6551; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate
                 // *, Local<v8::FunctionTemplate>)
struct _ast6552; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6553; // CXXMethodDecl Cast
struct _ast6554; // ParmVarDecl data
struct _ast6555; // FunctionProtoType v8::AccessorSignature *(v8::Data *)
struct _ast6556; // PointerType v8::AccessorSignature *
struct _ast6557; // CXXRecordDecl Extension
struct _ast6558; // RecordType v8::Extension
struct _ast6559; // FieldDecl name_
struct _ast6560; // FieldDecl source_length_
struct _ast6561; // FieldDecl source_
struct _ast6562; // PointerType String::ExternalOneByteStringResource *
struct _ast6563; // ElaboratedType String::ExternalOneByteStringResource
struct _ast6564; // FieldDecl dep_count_
struct _ast6565; // FieldDecl deps_
struct _ast6566; // PointerType const char **
struct _ast6567; // FieldDecl auto_enable_
struct _ast6568; // CXXRecordDecl Extension
struct _ast6569; // CXXConstructorDecl Extension
struct _ast6570; // ParmVarDecl name
struct _ast6571; // ParmVarDecl source
struct _ast6572; // ParmVarDecl dep_count
struct _ast6573; // ParmVarDecl deps
struct _ast6574; // ParmVarDecl source_length
struct _ast6575; // FunctionProtoType void (const char *, const char *, int,
                 // const char **, int)
struct _ast6576; // PointerType v8::Extension *
struct _ast6577; // CXXDestructorDecl ~Extension
struct _ast6578; // CXXMethodDecl GetNativeFunctionTemplate
struct _ast6579; // ParmVarDecl isolate
struct _ast6580; // ParmVarDecl name
struct _ast6581; // TemplateSpecializationType Local<v8::String>
struct _ast6582; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate
                 // *, Local<v8::String>)
struct _ast6583; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6584; // CXXMethodDecl name
struct _ast6585; // PointerType const v8::Extension *
struct _ast6586; // RecordType const v8::Extension
struct _ast6587; // CXXMethodDecl source_length
struct _ast6588; // CXXMethodDecl source
struct _ast6589; // FunctionProtoType const
                 // String::ExternalOneByteStringResource *() const
struct _ast6590; // PointerType const String::ExternalOneByteStringResource *
struct _ast6591; // ElaboratedType const String::ExternalOneByteStringResource
struct _ast6592; // CXXMethodDecl dependency_count
struct _ast6593; // CXXMethodDecl dependencies
struct _ast6594; // FunctionProtoType const char **() const
struct _ast6595; // CXXMethodDecl set_auto_enable
struct _ast6596; // ParmVarDecl value
struct _ast6597; // CXXMethodDecl auto_enable
struct _ast6598; // CXXConstructorDecl Extension
struct _ast6599; // ParmVarDecl
struct _ast6600; // LValueReferenceType const v8::Extension &
struct _ast6601; // FunctionProtoType void (const v8::Extension &)
struct _ast6602; // CXXMethodDecl operator=
struct _ast6603; // ParmVarDecl
struct _ast6604; // FunctionDecl RegisterExtension
struct _ast6605; // ParmVarDecl
struct _ast6606; // ElaboratedType std::unique_ptr<Extension>
struct _ast6607; // FunctionProtoType void (std::unique_ptr<Extension>)
struct _ast6608; // FunctionDecl Undefined
struct _ast6609; // ParmVarDecl isolate
struct _ast6610; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6611; // TemplateSpecializationType Local<v8::Primitive>
struct _ast6612; // ParmVarDecl isolate
struct _ast6613; // FunctionDecl Null
struct _ast6614; // ParmVarDecl isolate
struct _ast6615; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6616; // TemplateSpecializationType Local<v8::Primitive>
struct _ast6617; // ParmVarDecl isolate
struct _ast6618; // FunctionDecl True
struct _ast6619; // ParmVarDecl isolate
struct _ast6620; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6621; // TemplateSpecializationType Local<v8::Boolean>
struct _ast6622; // ParmVarDecl isolate
struct _ast6623; // FunctionDecl False
struct _ast6624; // ParmVarDecl isolate
struct _ast6625; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6626; // TemplateSpecializationType Local<v8::Boolean>
struct _ast6627; // ParmVarDecl isolate
struct _ast6628; // CXXRecordDecl ResourceConstraints
struct _ast6629; // RecordType v8::ResourceConstraints
struct _ast6630; // FieldDecl code_range_size_
struct _ast6631; // FieldDecl max_old_generation_size_
struct _ast6632; // FieldDecl max_young_generation_size_
struct _ast6633; // FieldDecl max_zone_pool_size_
struct _ast6634; // FieldDecl initial_old_generation_size_
struct _ast6635; // FieldDecl initial_young_generation_size_
struct _ast6636; // FieldDecl stack_limit_
struct _ast6637; // CXXRecordDecl ResourceConstraints
struct _ast6638; // CXXMethodDecl ConfigureDefaultsFromHeapSize
struct _ast6639; // ParmVarDecl initial_heap_size_in_bytes
struct _ast6640; // ParmVarDecl maximum_heap_size_in_bytes
struct _ast6641; // FunctionProtoType void (size_t, size_t)
struct _ast6642; // PointerType v8::ResourceConstraints *
struct _ast6643; // CXXMethodDecl ConfigureDefaults
struct _ast6644; // ParmVarDecl physical_memory
struct _ast6645; // ParmVarDecl virtual_memory_limit
struct _ast6646; // FunctionProtoType void (uint64_t, uint64_t)
struct _ast6647; // CXXMethodDecl stack_limit
struct _ast6648; // FunctionProtoType uint32_t *() const
struct _ast6649; // PointerType const v8::ResourceConstraints *
struct _ast6650; // RecordType const v8::ResourceConstraints
struct _ast6651; // CXXMethodDecl set_stack_limit
struct _ast6652; // ParmVarDecl value
struct _ast6653; // FunctionProtoType void (uint32_t *)
struct _ast6654; // CXXMethodDecl code_range_size_in_bytes
struct _ast6655; // CXXMethodDecl set_code_range_size_in_bytes
struct _ast6656; // ParmVarDecl limit
struct _ast6657; // FunctionProtoType void (size_t)
struct _ast6658; // CXXMethodDecl max_old_generation_size_in_bytes
struct _ast6659; // CXXMethodDecl set_max_old_generation_size_in_bytes
struct _ast6660; // ParmVarDecl limit
struct _ast6661; // CXXMethodDecl max_young_generation_size_in_bytes
struct _ast6662; // CXXMethodDecl set_max_young_generation_size_in_bytes
struct _ast6663; // ParmVarDecl limit
struct _ast6664; // CXXMethodDecl initial_old_generation_size_in_bytes
struct _ast6665; // CXXMethodDecl set_initial_old_generation_size_in_bytes
struct _ast6666; // ParmVarDecl initial_size
struct _ast6667; // CXXMethodDecl initial_young_generation_size_in_bytes
struct _ast6668; // CXXMethodDecl set_initial_young_generation_size_in_bytes
struct _ast6669; // ParmVarDecl initial_size
struct _ast6670; // CXXMethodDecl code_range_size
struct _ast6671; // CXXMethodDecl set_code_range_size
struct _ast6672; // ParmVarDecl limit_in_mb
struct _ast6673; // CXXMethodDecl max_semi_space_size_in_kb
struct _ast6674; // CXXMethodDecl set_max_semi_space_size_in_kb
struct _ast6675; // ParmVarDecl limit_in_kb
struct _ast6676; // CXXMethodDecl max_old_space_size
struct _ast6677; // CXXMethodDecl set_max_old_space_size
struct _ast6678; // ParmVarDecl limit_in_mb
struct _ast6679; // CXXMethodDecl max_zone_pool_size
struct _ast6680; // CXXMethodDecl set_max_zone_pool_size
struct _ast6681; // ParmVarDecl bytes
struct _ast6682; // CXXConstructorDecl ResourceConstraints
struct _ast6683; // CXXConstructorDecl ResourceConstraints
struct _ast6684; // ParmVarDecl
struct _ast6685; // LValueReferenceType const v8::ResourceConstraints &
struct _ast6686; // FunctionProtoType void (const v8::ResourceConstraints &)
struct _ast6687; // CXXConstructorDecl ResourceConstraints
struct _ast6688; // ParmVarDecl
struct _ast6689; // RValueReferenceType v8::ResourceConstraints &&
struct _ast6690; // FunctionProtoType void (v8::ResourceConstraints &&)
struct _ast6691; // TypedefDecl FatalErrorCallback
struct _ast6692; // TypedefType v8::FatalErrorCallback
struct _ast6693; // TypedefDecl OOMErrorCallback
struct _ast6694; // TypedefType v8::OOMErrorCallback
struct _ast6695; // TypedefDecl DcheckErrorCallback
struct _ast6696; // TypedefType v8::DcheckErrorCallback
struct _ast6697; // TypedefDecl MessageCallback
struct _ast6698; // TypedefType v8::MessageCallback
struct _ast6699; // TypedefDecl LogEventCallback
struct _ast6700; // TypedefType v8::LogEventCallback
struct _ast6701; // CXXRecordDecl Exception
struct _ast6702; // RecordType v8::Exception
struct _ast6703; // CXXRecordDecl Exception
struct _ast6704; // CXXMethodDecl RangeError
struct _ast6705; // ParmVarDecl message
struct _ast6706; // TemplateSpecializationType Local<v8::String>
struct _ast6707; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6708; // TemplateSpecializationType Local<v8::Value>
struct _ast6709; // CXXMethodDecl ReferenceError
struct _ast6710; // ParmVarDecl message
struct _ast6711; // TemplateSpecializationType Local<v8::String>
struct _ast6712; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6713; // TemplateSpecializationType Local<v8::Value>
struct _ast6714; // CXXMethodDecl SyntaxError
struct _ast6715; // ParmVarDecl message
struct _ast6716; // TemplateSpecializationType Local<v8::String>
struct _ast6717; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6718; // TemplateSpecializationType Local<v8::Value>
struct _ast6719; // CXXMethodDecl TypeError
struct _ast6720; // ParmVarDecl message
struct _ast6721; // TemplateSpecializationType Local<v8::String>
struct _ast6722; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6723; // TemplateSpecializationType Local<v8::Value>
struct _ast6724; // CXXMethodDecl Error
struct _ast6725; // ParmVarDecl message
struct _ast6726; // TemplateSpecializationType Local<v8::String>
struct _ast6727; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6728; // TemplateSpecializationType Local<v8::Value>
struct _ast6729; // CXXMethodDecl CreateMessage
struct _ast6730; // ParmVarDecl isolate
struct _ast6731; // ParmVarDecl exception
struct _ast6732; // TemplateSpecializationType Local<v8::Value>
struct _ast6733; // FunctionProtoType Local<v8::Message> (v8::Isolate *,
                 // Local<v8::Value>)
struct _ast6734; // TemplateSpecializationType Local<v8::Message>
struct _ast6735; // CXXMethodDecl GetStackTrace
struct _ast6736; // ParmVarDecl exception
struct _ast6737; // TemplateSpecializationType Local<v8::Value>
struct _ast6738; // FunctionProtoType Local<v8::StackTrace> (Local<v8::Value>)
struct _ast6739; // TemplateSpecializationType Local<v8::StackTrace>
struct _ast6740; // TypedefDecl CounterLookupCallback
struct _ast6741; // TypedefType v8::CounterLookupCallback
struct _ast6742; // TypedefDecl CreateHistogramCallback
struct _ast6743; // TypedefType v8::CreateHistogramCallback
struct _ast6744; // TypedefDecl AddHistogramSampleCallback
struct _ast6745; // TypedefType v8::AddHistogramSampleCallback
struct _ast6746; // TypedefDecl BeforeCallEnteredCallback
struct _ast6747; // TypedefType v8::BeforeCallEnteredCallback
struct _ast6748; // TypedefDecl CallCompletedCallback
struct _ast6749; // TypedefType v8::CallCompletedCallback
struct _ast6750; // TypedefDecl HostImportModuleDynamicallyCallback
struct _ast6751; // TypedefType v8::HostImportModuleDynamicallyCallback
struct _ast6752; // TypedefDecl HostInitializeImportMetaObjectCallback
struct _ast6753; // TypedefType v8::HostInitializeImportMetaObjectCallback
struct _ast6754; // TypedefDecl PrepareStackTraceCallback
struct _ast6755; // TypedefType v8::PrepareStackTraceCallback
struct _ast6756; // EnumDecl PromiseHookType
struct _ast6757; // EnumConstantDecl kInit
struct _ast6758; // EnumConstantDecl kResolve
struct _ast6759; // EnumConstantDecl kBefore
struct _ast6760; // EnumConstantDecl kAfter
struct _ast6761; // TypedefDecl PromiseHook
struct _ast6762; // TypedefType v8::PromiseHook
struct _ast6763; // EnumDecl PromiseRejectEvent
struct _ast6764; // EnumConstantDecl kPromiseRejectWithNoHandler
struct _ast6765; // EnumConstantDecl kPromiseHandlerAddedAfterReject
struct _ast6766; // EnumConstantDecl kPromiseRejectAfterResolved
struct _ast6767; // EnumConstantDecl kPromiseResolveAfterResolved
struct _ast6768; // CXXRecordDecl PromiseRejectMessage
struct _ast6769; // RecordType v8::PromiseRejectMessage
struct _ast6770; // FieldDecl promise_
struct _ast6771; // TemplateSpecializationType Local<v8::Promise>
struct _ast6772; // FieldDecl event_
struct _ast6773; // EnumType v8::PromiseRejectEvent
struct _ast6774; // FieldDecl value_
struct _ast6775; // TemplateSpecializationType Local<v8::Value>
struct _ast6776; // CXXRecordDecl PromiseRejectMessage
struct _ast6777; // CXXConstructorDecl PromiseRejectMessage
struct _ast6778; // ParmVarDecl promise
struct _ast6779; // TemplateSpecializationType Local<v8::Promise>
struct _ast6780; // ParmVarDecl event
struct _ast6781; // ParmVarDecl value
struct _ast6782; // TemplateSpecializationType Local<v8::Value>
struct _ast6783; // FunctionProtoType void (Local<v8::Promise>,
                 // v8::PromiseRejectEvent, Local<v8::Value>)
struct _ast6784; // PointerType v8::PromiseRejectMessage *
struct _ast6785; // CXXMethodDecl GetPromise
struct _ast6786; // FunctionProtoType Local<v8::Promise> () const
struct _ast6787; // TemplateSpecializationType Local<v8::Promise>
struct _ast6788; // PointerType const v8::PromiseRejectMessage *
struct _ast6789; // RecordType const v8::PromiseRejectMessage
struct _ast6790; // CXXMethodDecl GetEvent
struct _ast6791; // FunctionProtoType v8::PromiseRejectEvent () const
struct _ast6792; // CXXMethodDecl GetValue
struct _ast6793; // FunctionProtoType Local<v8::Value> () const
struct _ast6794; // TemplateSpecializationType Local<v8::Value>
struct _ast6795; // TypedefDecl PromiseRejectCallback
struct _ast6796; // TypedefType v8::PromiseRejectCallback
struct _ast6797; // TypedefDecl MicrotasksCompletedCallback
struct _ast6798; // TypedefType v8::MicrotasksCompletedCallback
struct _ast6799; // TypedefDecl MicrotasksCompletedCallbackWithData
struct _ast6800; // TypedefType v8::MicrotasksCompletedCallbackWithData
struct _ast6801; // TypedefDecl MicrotaskCallback
struct _ast6802; // TypedefType v8::MicrotaskCallback
struct _ast6803; // EnumDecl MicrotasksPolicy
struct _ast6804; // EnumConstantDecl kExplicit
struct _ast6805; // EnumConstantDecl kScoped
struct _ast6806; // EnumConstantDecl kAuto
struct _ast6807; // CXXRecordDecl MicrotaskQueue
struct _ast6808; // CXXMethodDecl New
struct _ast6809; // ParmVarDecl isolate
struct _ast6810; // ParmVarDecl policy
struct _ast6811; // EnumType v8::MicrotasksPolicy
struct _ast6812; // FunctionProtoType std::unique_ptr<MicrotaskQueue>
                 // (v8::Isolate *, v8::MicrotasksPolicy)
struct _ast6813; // ElaboratedType std::unique_ptr<MicrotaskQueue>
struct _ast6814; // CXXDestructorDecl ~MicrotaskQueue
struct _ast6815; // FunctionProtoType void ()
struct _ast6816; // PointerType v8::MicrotaskQueue *
struct _ast6817; // CXXMethodDecl EnqueueMicrotask
struct _ast6818; // ParmVarDecl isolate
struct _ast6819; // ParmVarDecl microtask
struct _ast6820; // TemplateSpecializationType Local<v8::Function>
struct _ast6821; // FunctionProtoType void (v8::Isolate *, Local<v8::Function>)
struct _ast6822; // CXXMethodDecl EnqueueMicrotask
struct _ast6823; // ParmVarDecl isolate
struct _ast6824; // PointerType v8::Isolate *
struct _ast6825; // ElaboratedType v8::Isolate
struct _ast6826; // ParmVarDecl callback
struct _ast6827; // ParmVarDecl data
struct _ast6828; // FunctionProtoType void (v8::Isolate *,
                 // v8::MicrotaskCallback, void *)
struct _ast6829; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast6830; // ParmVarDecl callback
struct _ast6831; // ParmVarDecl data
struct _ast6832; // FunctionProtoType void
                 // (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ast6833; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast6834; // ParmVarDecl callback
struct _ast6835; // ParmVarDecl data
struct _ast6836; // CXXMethodDecl PerformCheckpoint
struct _ast6837; // ParmVarDecl isolate
struct _ast6838; // CXXMethodDecl IsRunningMicrotasks
struct _ast6839; // PointerType const v8::MicrotaskQueue *
struct _ast6840; // RecordType const v8::MicrotaskQueue
struct _ast6841; // CXXMethodDecl GetMicrotasksScopeDepth
struct _ast6842; // CXXConstructorDecl MicrotaskQueue
struct _ast6843; // ParmVarDecl
struct _ast6844; // LValueReferenceType const v8::MicrotaskQueue &
struct _ast6845; // FunctionProtoType void (const v8::MicrotaskQueue &)
struct _ast6846; // CXXMethodDecl operator=
struct _ast6847; // ParmVarDecl
struct _ast6848; // FunctionProtoType v8::MicrotaskQueue &(const
                 // v8::MicrotaskQueue &)
struct _ast6849; // LValueReferenceType v8::MicrotaskQueue &
struct _ast6850; // CXXRecordDecl MicrotasksScope
struct _ast6851; // RecordType v8::MicrotasksScope
struct _ast6852; // FieldDecl isolate_
struct _ast6853; // FieldDecl microtask_queue_
struct _ast6854; // PointerType internal::MicrotaskQueue *const
struct _ast6855; // PointerType internal::MicrotaskQueue *
struct _ast6856; // ElaboratedType internal::MicrotaskQueue
struct _ast6857; // FieldDecl run_
struct _ast6858; // CXXRecordDecl MicrotasksScope
struct _ast6859; // EnumDecl Type
struct _ast6860; // EnumConstantDecl kRunMicrotasks
struct _ast6861; // EnumConstantDecl kDoNotRunMicrotasks
struct _ast6862; // CXXConstructorDecl MicrotasksScope
struct _ast6863; // ParmVarDecl isolate
struct _ast6864; // ParmVarDecl type
struct _ast6865; // EnumType v8::MicrotasksScope::Type
struct _ast6866; // FunctionProtoType void (v8::Isolate *,
                 // v8::MicrotasksScope::Type)
struct _ast6867; // PointerType v8::MicrotasksScope *
struct _ast6868; // CXXConstructorDecl MicrotasksScope
struct _ast6869; // ParmVarDecl isolate
struct _ast6870; // ParmVarDecl microtask_queue
struct _ast6871; // ParmVarDecl type
struct _ast6872; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskQueue *,
                 // v8::MicrotasksScope::Type)
struct _ast6873; // CXXDestructorDecl ~MicrotasksScope
struct _ast6874; // FunctionProtoType void ()
struct _ast6875; // CXXMethodDecl PerformCheckpoint
struct _ast6876; // ParmVarDecl isolate
struct _ast6877; // CXXMethodDecl GetCurrentDepth
struct _ast6878; // ParmVarDecl isolate
struct _ast6879; // CXXMethodDecl IsRunningMicrotasks
struct _ast6880; // ParmVarDecl isolate
struct _ast6881; // FunctionProtoType bool (v8::Isolate *)
struct _ast6882; // CXXConstructorDecl MicrotasksScope
struct _ast6883; // ParmVarDecl
struct _ast6884; // LValueReferenceType const v8::MicrotasksScope &
struct _ast6885; // RecordType const v8::MicrotasksScope
struct _ast6886; // FunctionProtoType void (const v8::MicrotasksScope &)
struct _ast6887; // CXXMethodDecl operator=
struct _ast6888; // ParmVarDecl
struct _ast6889; // FunctionProtoType v8::MicrotasksScope &(const
                 // v8::MicrotasksScope &)
struct _ast6890; // LValueReferenceType v8::MicrotasksScope &
struct _ast6891; // TypedefDecl FailedAccessCheckCallback
struct _ast6892; // TypedefType v8::FailedAccessCheckCallback
struct _ast6893; // TypedefDecl AllowCodeGenerationFromStringsCallback
struct _ast6894; // TypedefType v8::AllowCodeGenerationFromStringsCallback
struct _ast6895; // TypedefDecl ExtensionCallback
struct _ast6896; // TypedefType v8::ExtensionCallback
struct _ast6897; // TypedefDecl AllowWasmCodeGenerationCallback
struct _ast6898; // TypedefType v8::AllowWasmCodeGenerationCallback
struct _ast6899; // TypedefDecl ApiImplementationCallback
struct _ast6900; // TypedefType v8::ApiImplementationCallback
struct _ast6901; // TypedefDecl WasmStreamingCallback
struct _ast6902; // TypedefType v8::WasmStreamingCallback
struct _ast6903; // TypedefDecl WasmThreadsEnabledCallback
struct _ast6904; // TypedefType v8::WasmThreadsEnabledCallback
struct _ast6905; // EnumDecl GCType
struct _ast6906; // EnumConstantDecl kGCTypeScavenge
struct _ast6907; // EnumConstantDecl kGCTypeMarkSweepCompact
struct _ast6908; // EnumConstantDecl kGCTypeIncrementalMarking
struct _ast6909; // EnumConstantDecl kGCTypeProcessWeakCallbacks
struct _ast6910; // EnumConstantDecl kGCTypeAll
struct _ast6911; // EnumDecl GCCallbackFlags
struct _ast6912; // EnumConstantDecl kNoGCCallbackFlags
struct _ast6913; // EnumConstantDecl kGCCallbackFlagConstructRetainedObjectInfos
struct _ast6914; // EnumConstantDecl kGCCallbackFlagForced
struct _ast6915; // EnumConstantDecl
                 // kGCCallbackFlagSynchronousPhantomCallbackProcessing
struct _ast6916; // EnumConstantDecl kGCCallbackFlagCollectAllAvailableGarbage
struct _ast6917; // EnumConstantDecl kGCCallbackFlagCollectAllExternalMemory
struct _ast6918; // EnumConstantDecl kGCCallbackScheduleIdleGarbageCollection
struct _ast6919; // TypedefDecl GCCallback
struct _ast6920; // TypedefType v8::GCCallback
struct _ast6921; // TypedefDecl InterruptCallback
struct _ast6922; // TypedefType v8::InterruptCallback
struct _ast6923; // TypedefDecl NearHeapLimitCallback
struct _ast6924; // TypedefType v8::NearHeapLimitCallback
struct _ast6925; // CXXRecordDecl HeapStatistics
struct _ast6926; // RecordType v8::HeapStatistics
struct _ast6927; // FieldDecl total_heap_size_
struct _ast6928; // FieldDecl total_heap_size_executable_
struct _ast6929; // FieldDecl total_physical_size_
struct _ast6930; // FieldDecl total_available_size_
struct _ast6931; // FieldDecl used_heap_size_
struct _ast6932; // FieldDecl heap_size_limit_
struct _ast6933; // FieldDecl malloced_memory_
struct _ast6934; // FieldDecl external_memory_
struct _ast6935; // FieldDecl peak_malloced_memory_
struct _ast6936; // FieldDecl does_zap_garbage_
struct _ast6937; // FieldDecl number_of_native_contexts_
struct _ast6938; // FieldDecl number_of_detached_contexts_
struct _ast6939; // CXXRecordDecl HeapStatistics
struct _ast6940; // CXXConstructorDecl HeapStatistics
struct _ast6941; // PointerType v8::HeapStatistics *
struct _ast6942; // CXXMethodDecl total_heap_size
struct _ast6943; // CXXMethodDecl total_heap_size_executable
struct _ast6944; // CXXMethodDecl total_physical_size
struct _ast6945; // CXXMethodDecl total_available_size
struct _ast6946; // CXXMethodDecl used_heap_size
struct _ast6947; // CXXMethodDecl heap_size_limit
struct _ast6948; // CXXMethodDecl malloced_memory
struct _ast6949; // CXXMethodDecl external_memory
struct _ast6950; // CXXMethodDecl peak_malloced_memory
struct _ast6951; // CXXMethodDecl number_of_native_contexts
struct _ast6952; // CXXMethodDecl number_of_detached_contexts
struct _ast6953; // CXXMethodDecl does_zap_garbage
struct _ast6954; // CXXRecordDecl HeapSpaceStatistics
struct _ast6955; // RecordType v8::HeapSpaceStatistics
struct _ast6956; // FieldDecl space_name_
struct _ast6957; // FieldDecl space_size_
struct _ast6958; // FieldDecl space_used_size_
struct _ast6959; // FieldDecl space_available_size_
struct _ast6960; // FieldDecl physical_space_size_
struct _ast6961; // CXXRecordDecl HeapSpaceStatistics
struct _ast6962; // CXXConstructorDecl HeapSpaceStatistics
struct _ast6963; // PointerType v8::HeapSpaceStatistics *
struct _ast6964; // CXXMethodDecl space_name
struct _ast6965; // FunctionProtoType const char *()
struct _ast6966; // CXXMethodDecl space_size
struct _ast6967; // CXXMethodDecl space_used_size
struct _ast6968; // CXXMethodDecl space_available_size
struct _ast6969; // CXXMethodDecl physical_space_size
struct _ast6970; // CXXRecordDecl HeapObjectStatistics
struct _ast6971; // RecordType v8::HeapObjectStatistics
struct _ast6972; // FieldDecl object_type_
struct _ast6973; // FieldDecl object_sub_type_
struct _ast6974; // FieldDecl object_count_
struct _ast6975; // FieldDecl object_size_
struct _ast6976; // CXXRecordDecl HeapObjectStatistics
struct _ast6977; // CXXConstructorDecl HeapObjectStatistics
struct _ast6978; // PointerType v8::HeapObjectStatistics *
struct _ast6979; // CXXMethodDecl object_type
struct _ast6980; // CXXMethodDecl object_sub_type
struct _ast6981; // CXXMethodDecl object_count
struct _ast6982; // CXXMethodDecl object_size
struct _ast6983; // CXXRecordDecl HeapCodeStatistics
struct _ast6984; // RecordType v8::HeapCodeStatistics
struct _ast6985; // FieldDecl code_and_metadata_size_
struct _ast6986; // FieldDecl bytecode_and_metadata_size_
struct _ast6987; // FieldDecl external_script_source_size_
struct _ast6988; // CXXRecordDecl HeapCodeStatistics
struct _ast6989; // CXXConstructorDecl HeapCodeStatistics
struct _ast6990; // PointerType v8::HeapCodeStatistics *
struct _ast6991; // CXXMethodDecl code_and_metadata_size
struct _ast6992; // CXXMethodDecl bytecode_and_metadata_size
struct _ast6993; // CXXMethodDecl external_script_source_size
struct _ast6994; // CXXRecordDecl JitCodeEvent
struct _ast6995; // RecordType v8::JitCodeEvent
struct _ast6996; // FieldDecl type
struct _ast6997; // EnumType v8::JitCodeEvent::EventType
struct _ast6998; // EnumDecl EventType
struct _ast6999; // FieldDecl code_type
struct _ast7000; // EnumType v8::JitCodeEvent::CodeType
struct _ast7001; // EnumDecl CodeType
struct _ast7002; // FieldDecl code_start
struct _ast7003; // FieldDecl code_len
struct _ast7004; // FieldDecl script
struct _ast7005; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast7006; // FieldDecl user_data
struct _ast7007; // FieldDecl
struct _ast7008; // RecordType v8::JitCodeEvent::(anonymous union at
                 // D:\gen8/v8/include/v8.h:7072:3)
struct _ast7009; // CXXRecordDecl
struct _ast7010; // FieldDecl name
struct _ast7011; // ElaboratedType struct name_t
struct _ast7012; // FieldDecl line_info
struct _ast7013; // ElaboratedType struct line_info_t
struct _ast7014; // FieldDecl new_code_start
struct _ast7015; // FieldDecl isolate
struct _ast7016; // CXXRecordDecl JitCodeEvent
struct _ast7017; // EnumConstantDecl CODE_ADDED
struct _ast7018; // EnumConstantDecl CODE_MOVED
struct _ast7019; // EnumConstantDecl CODE_REMOVED
struct _ast7020; // EnumConstantDecl CODE_ADD_LINE_POS_INFO
struct _ast7021; // EnumConstantDecl CODE_START_LINE_INFO_RECORDING
struct _ast7022; // EnumConstantDecl CODE_END_LINE_INFO_RECORDING
struct _ast7023; // EnumDecl PositionType
struct _ast7024; // EnumConstantDecl POSITION
struct _ast7025; // EnumConstantDecl STATEMENT_POSITION
struct _ast7026; // EnumConstantDecl BYTE_CODE
struct _ast7027; // EnumConstantDecl JIT_CODE
struct _ast7028; // CXXRecordDecl name_t
struct _ast7029; // RecordType v8::JitCodeEvent::name_t
struct _ast7030; // FieldDecl str
struct _ast7031; // FieldDecl len
struct _ast7032; // CXXRecordDecl name_t
struct _ast7033; // CXXRecordDecl line_info_t
struct _ast7034; // RecordType v8::JitCodeEvent::line_info_t
struct _ast7035; // FieldDecl offset
struct _ast7036; // FieldDecl pos
struct _ast7037; // FieldDecl position_type
struct _ast7038; // EnumType v8::JitCodeEvent::PositionType
struct _ast7039; // CXXRecordDecl line_info_t
struct _ast7040; // IndirectFieldDecl name
struct _ast7041; // IndirectFieldDecl line_info
struct _ast7042; // IndirectFieldDecl new_code_start
struct _ast7043; // EnumDecl RAILMode
struct _ast7044; // EnumConstantDecl PERFORMANCE_RESPONSE
struct _ast7045; // EnumConstantDecl PERFORMANCE_ANIMATION
struct _ast7046; // EnumConstantDecl PERFORMANCE_IDLE
struct _ast7047; // EnumConstantDecl PERFORMANCE_LOAD
struct _ast7048; // EnumDecl JitCodeEventOptions
struct _ast7049; // EnumConstantDecl kJitCodeEventDefault
struct _ast7050; // EnumConstantDecl kJitCodeEventEnumExisting
struct _ast7051; // TypedefDecl JitCodeEventHandler
struct _ast7052; // TypedefType v8::JitCodeEventHandler
struct _ast7053; // TypedefDecl UnhandledExceptionCallback
struct _ast7054; // TypedefType v8::UnhandledExceptionCallback
struct _ast7055; // CXXRecordDecl ExternalResourceVisitor
struct _ast7056; // RecordType v8::ExternalResourceVisitor
struct _ast7057; // CXXRecordDecl ExternalResourceVisitor
struct _ast7058; // CXXDestructorDecl ~ExternalResourceVisitor
struct _ast7059; // FunctionProtoType void ()
struct _ast7060; // PointerType v8::ExternalResourceVisitor *
struct _ast7061; // CXXMethodDecl VisitExternalString
struct _ast7062; // ParmVarDecl string
struct _ast7063; // TemplateSpecializationType Local<v8::String>
struct _ast7064; // FunctionProtoType void (Local<v8::String>)
struct _ast7065; // CXXMethodDecl operator=
struct _ast7066; // ParmVarDecl
struct _ast7067; // LValueReferenceType const v8::ExternalResourceVisitor &
struct _ast7068; // RecordType const v8::ExternalResourceVisitor
struct _ast7069; // FunctionProtoType v8::ExternalResourceVisitor &(const
                 // v8::ExternalResourceVisitor &)
struct _ast7070; // LValueReferenceType v8::ExternalResourceVisitor &
struct _ast7071; // CXXRecordDecl PersistentHandleVisitor
struct _ast7072; // RecordType v8::PersistentHandleVisitor
struct _ast7073; // CXXRecordDecl PersistentHandleVisitor
struct _ast7074; // CXXDestructorDecl ~PersistentHandleVisitor
struct _ast7075; // FunctionProtoType void ()
struct _ast7076; // PointerType v8::PersistentHandleVisitor *
struct _ast7077; // CXXMethodDecl VisitPersistentHandle
struct _ast7078; // ParmVarDecl value
struct _ast7079; // PointerType Persistent<v8::Value> *
struct _ast7080; // TemplateSpecializationType Persistent<v8::Value>
struct _ast7081; // ParmVarDecl class_id
struct _ast7082; // FunctionProtoType void (Persistent<v8::Value> *, uint16_t)
struct _ast7083; // CXXMethodDecl operator=
struct _ast7084; // ParmVarDecl
struct _ast7085; // LValueReferenceType const v8::PersistentHandleVisitor &
struct _ast7086; // RecordType const v8::PersistentHandleVisitor
struct _ast7087; // FunctionProtoType v8::PersistentHandleVisitor &(const
                 // v8::PersistentHandleVisitor &)
struct _ast7088; // LValueReferenceType v8::PersistentHandleVisitor &
struct _ast7089; // EnumDecl MemoryPressureLevel
struct _ast7090; // EnumConstantDecl kNone
struct _ast7091; // EnumConstantDecl kModerate
struct _ast7092; // EnumConstantDecl kCritical
struct _ast7093; // CXXRecordDecl EmbedderHeapTracer
struct _ast7094; // RecordType v8::EmbedderHeapTracer
struct _ast7095; // CXXRecordDecl EmbedderHeapTracer
struct _ast7096; // EnumDecl TraceFlags
struct _ast7097; // EnumConstantDecl kNoFlags
struct _ast7098; // EnumConstantDecl kReduceMemory
struct _ast7099; // EnumDecl EmbedderStackState
struct _ast7100; // EnumConstantDecl kUnknown
struct _ast7101; // EnumConstantDecl kNonEmpty
struct _ast7102; // EnumConstantDecl kEmpty
struct _ast7103; // CXXRecordDecl TracedGlobalHandleVisitor
struct _ast7104; // RecordType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7105; // CXXRecordDecl TracedGlobalHandleVisitor
struct _ast7106; // CXXDestructorDecl ~TracedGlobalHandleVisitor
struct _ast7107; // FunctionProtoType void ()
struct _ast7108; // PointerType
                 // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ast7109; // CXXMethodDecl VisitTracedGlobalHandle
struct _ast7110; // ParmVarDecl value
struct _ast7111; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7112; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7113; // TemplateSpecializationType TracedGlobal<v8::Value>
struct _ast7114; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7115; // CXXMethodDecl operator=
struct _ast7116; // ParmVarDecl
struct _ast7117; // LValueReferenceType const
                 // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7118; // RecordType const
                 // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7119; // FunctionProtoType
                 // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const
                 // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ast7120; // LValueReferenceType
                 // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7121; // CXXRecordDecl TraceSummary
struct _ast7122; // RecordType v8::EmbedderHeapTracer::TraceSummary
struct _ast7123; // FieldDecl time
struct _ast7124; // FieldDecl allocated_size
struct _ast7125; // CXXRecordDecl TraceSummary
struct _ast7126; // CXXDestructorDecl ~EmbedderHeapTracer
struct _ast7127; // FunctionProtoType void ()
struct _ast7128; // PointerType v8::EmbedderHeapTracer *
struct _ast7129; // CXXMethodDecl IterateTracedGlobalHandles
struct _ast7130; // ParmVarDecl visitor
struct _ast7131; // FunctionProtoType void
                 // (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _ast7132; // CXXMethodDecl RegisterV8References
struct _ast7133; // ParmVarDecl embedder_fields
struct _ast7134; // LValueReferenceType const std::vector<std::pair<void *, void
                 // *> > &
struct _ast7135; // ElaboratedType const std::vector<std::pair<void *, void *> >
struct _ast7136; // ElaboratedType std::vector<std::pair<void *, void *> >
struct _ast7137; // FunctionProtoType void (const std::vector<std::pair<void *,
                 // void *> > &)
struct _ast7138; // CXXMethodDecl RegisterEmbedderReference
struct _ast7139; // ParmVarDecl ref
struct _ast7140; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7141; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7142; // TemplateSpecializationType TracedGlobal<v8::Value>
struct _ast7143; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7144; // CXXMethodDecl TracePrologue
struct _ast7145; // CXXMethodDecl TracePrologue
struct _ast7146; // ParmVarDecl flags
struct _ast7147; // EnumType v8::EmbedderHeapTracer::TraceFlags
struct _ast7148; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceFlags)
struct _ast7149; // CXXMethodDecl AdvanceTracing
struct _ast7150; // ParmVarDecl deadline_in_ms
struct _ast7151; // FunctionProtoType bool (double)
struct _ast7152; // CXXMethodDecl IsTracingDone
struct _ast7153; // CXXMethodDecl TraceEpilogue
struct _ast7154; // CXXMethodDecl TraceEpilogue
struct _ast7155; // ParmVarDecl trace_summary
struct _ast7156; // PointerType v8::EmbedderHeapTracer::TraceSummary *
struct _ast7157; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceSummary
                 // *)
struct _ast7158; // CXXMethodDecl EnterFinalPause
struct _ast7159; // ParmVarDecl stack_state
struct _ast7160; // EnumType v8::EmbedderHeapTracer::EmbedderStackState
struct _ast7161; // FunctionProtoType void
                 // (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ast7162; // CXXMethodDecl FinalizeTracing
struct _ast7163; // CXXMethodDecl IsRootForNonTracingGC
struct _ast7164; // ParmVarDecl handle
struct _ast7165; // LValueReferenceType const v8::TracedGlobal<v8::Value> &
struct _ast7166; // ElaboratedType const v8::TracedGlobal<v8::Value>
struct _ast7167; // ElaboratedType v8::TracedGlobal<v8::Value>
struct _ast7168; // FunctionProtoType bool (const v8::TracedGlobal<v8::Value> &)
struct _ast7169; // CXXMethodDecl GarbageCollectionForTesting
struct _ast7170; // ParmVarDecl stack_state
struct _ast7171; // CXXMethodDecl IncreaseAllocatedSize
struct _ast7172; // ParmVarDecl bytes
struct _ast7173; // CXXMethodDecl DecreaseAllocatedSize
struct _ast7174; // ParmVarDecl bytes
struct _ast7175; // CXXMethodDecl isolate
struct _ast7176; // FunctionProtoType v8::Isolate *() const
struct _ast7177; // PointerType const v8::EmbedderHeapTracer *
struct _ast7178; // RecordType const v8::EmbedderHeapTracer
struct _ast7179; // FieldDecl isolate_
struct _ast7180; // CXXMethodDecl operator=
struct _ast7181; // ParmVarDecl
struct _ast7182; // LValueReferenceType const v8::EmbedderHeapTracer &
struct _ast7183; // FunctionProtoType v8::EmbedderHeapTracer &(const
                 // v8::EmbedderHeapTracer &)
struct _ast7184; // LValueReferenceType v8::EmbedderHeapTracer &
struct _ast7185; // CXXRecordDecl SerializeInternalFieldsCallback
struct _ast7186; // RecordType v8::SerializeInternalFieldsCallback
struct _ast7187; // FieldDecl callback
struct _ast7188; // TypedefType
                 // v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ast7189; // TypedefDecl CallbackFunction
struct _ast7190; // FieldDecl data
struct _ast7191; // CXXRecordDecl SerializeInternalFieldsCallback
struct _ast7192; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7193; // ParmVarDecl function
struct _ast7194; // ParmVarDecl data_arg
struct _ast7195; // FunctionProtoType void
                 // (v8::SerializeInternalFieldsCallback::CallbackFunction, void
                 // *)
struct _ast7196; // PointerType v8::SerializeInternalFieldsCallback *
struct _ast7197; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7198; // ParmVarDecl
struct _ast7199; // LValueReferenceType const
                 // v8::SerializeInternalFieldsCallback &
struct _ast7200; // RecordType const v8::SerializeInternalFieldsCallback
struct _ast7201; // FunctionProtoType void (const
                 // v8::SerializeInternalFieldsCallback &)
struct _ast7202; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7203; // ParmVarDecl
struct _ast7204; // RValueReferenceType v8::SerializeInternalFieldsCallback &&
struct _ast7205; // FunctionProtoType void (v8::SerializeInternalFieldsCallback
                 // &&) noexcept
struct _ast7206; // CXXDestructorDecl ~SerializeInternalFieldsCallback
struct _ast7207; // TypedefDecl SerializeEmbedderFieldsCallback
struct _ast7208; // TypedefType v8::SerializeEmbedderFieldsCallback
struct _ast7209; // CXXRecordDecl DeserializeInternalFieldsCallback
struct _ast7210; // RecordType v8::DeserializeInternalFieldsCallback
struct _ast7211; // FieldDecl callback
struct _ast7212; // PointerType void (*)(Local<v8::Object>, int,
                 // v8::StartupData, void *)
struct _ast7213; // ParenType void (Local<v8::Object>, int, v8::StartupData,
                 // void *)
struct _ast7214; // FunctionProtoType void (Local<v8::Object>, int,
                 // v8::StartupData, void *)
struct _ast7215; // TemplateSpecializationType Local<v8::Object>
struct _ast7216; // FieldDecl data
struct _ast7217; // CXXRecordDecl DeserializeInternalFieldsCallback
struct _ast7218; // TypedefDecl CallbackFunction
struct _ast7219; // TypedefType
                 // v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ast7220; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7221; // ParmVarDecl function
struct _ast7222; // ParmVarDecl data_arg
struct _ast7223; // FunctionProtoType void
                 // (v8::DeserializeInternalFieldsCallback::CallbackFunction,
                 // void *)
struct _ast7224; // PointerType v8::DeserializeInternalFieldsCallback *
struct _ast7225; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7226; // ParmVarDecl
struct _ast7227; // LValueReferenceType const
                 // v8::DeserializeInternalFieldsCallback &
struct _ast7228; // RecordType const v8::DeserializeInternalFieldsCallback
struct _ast7229; // FunctionProtoType void (const
                 // v8::DeserializeInternalFieldsCallback &)
struct _ast7230; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7231; // ParmVarDecl
struct _ast7232; // RValueReferenceType v8::DeserializeInternalFieldsCallback &&
struct _ast7233; // FunctionProtoType void
                 // (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ast7234; // CXXDestructorDecl ~DeserializeInternalFieldsCallback
struct _ast7235; // TypedefDecl DeserializeEmbedderFieldsCallback
struct _ast7236; // TypedefType v8::DeserializeEmbedderFieldsCallback
struct _ast7237; // CXXRecordDecl Isolate
struct _ast7238; // CXXRecordDecl CreateParams
struct _ast7239; // RecordType v8::Isolate::CreateParams
struct _ast7240; // FieldDecl code_event_handler
struct _ast7241; // FieldDecl constraints
struct _ast7242; // FieldDecl snapshot_blob
struct _ast7243; // PointerType v8::StartupData *
struct _ast7244; // FieldDecl counter_lookup_callback
struct _ast7245; // FieldDecl create_histogram_callback
struct _ast7246; // FieldDecl add_histogram_sample_callback
struct _ast7247; // FieldDecl array_buffer_allocator
struct _ast7248; // PointerType ArrayBuffer::Allocator *
struct _ast7249; // ElaboratedType ArrayBuffer::Allocator
struct _ast7250; // FieldDecl external_references
struct _ast7251; // PointerType const intptr_t *
struct _ast7252; // TypedefType const intptr_t
struct _ast7253; // TypedefType intptr_t
struct _ast7254; // FieldDecl allow_atomics_wait
struct _ast7255; // FieldDecl only_terminate_in_safe_scope
struct _ast7256; // CXXRecordDecl CreateParams
struct _ast7257; // CXXConstructorDecl CreateParams
struct _ast7258; // PointerType v8::Isolate::CreateParams *
struct _ast7259; // CXXRecordDecl Scope
struct _ast7260; // RecordType v8::Isolate::Scope
struct _ast7261; // FieldDecl isolate_
struct _ast7262; // PointerType v8::Isolate *const
struct _ast7263; // CXXRecordDecl Scope
struct _ast7264; // CXXConstructorDecl Scope
struct _ast7265; // ParmVarDecl isolate
struct _ast7266; // PointerType v8::Isolate::Scope *
struct _ast7267; // CXXDestructorDecl ~Scope
struct _ast7268; // CXXConstructorDecl Scope
struct _ast7269; // ParmVarDecl
struct _ast7270; // LValueReferenceType const v8::Isolate::Scope &
struct _ast7271; // RecordType const v8::Isolate::Scope
struct _ast7272; // FunctionProtoType void (const v8::Isolate::Scope &)
struct _ast7273; // CXXMethodDecl operator=
struct _ast7274; // ParmVarDecl
struct _ast7275; // FunctionProtoType v8::Isolate::Scope &(const
                 // v8::Isolate::Scope &)
struct _ast7276; // LValueReferenceType v8::Isolate::Scope &
struct _ast7277; // CXXRecordDecl DisallowJavascriptExecutionScope
struct _ast7278; // RecordType v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7279; // FieldDecl on_failure_
struct _ast7280; // EnumType
                 // v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ast7281; // EnumDecl OnFailure
struct _ast7282; // FieldDecl internal_
struct _ast7283; // CXXRecordDecl DisallowJavascriptExecutionScope
struct _ast7284; // EnumConstantDecl CRASH_ON_FAILURE
struct _ast7285; // EnumConstantDecl THROW_ON_FAILURE
struct _ast7286; // EnumConstantDecl DUMP_ON_FAILURE
struct _ast7287; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7288; // ParmVarDecl isolate
struct _ast7289; // ParmVarDecl on_failure
struct _ast7290; // FunctionProtoType void (v8::Isolate *,
                 // v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ast7291; // PointerType v8::Isolate::DisallowJavascriptExecutionScope *
struct _ast7292; // CXXDestructorDecl ~DisallowJavascriptExecutionScope
struct _ast7293; // FunctionProtoType void ()
struct _ast7294; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7295; // ParmVarDecl
struct _ast7296; // LValueReferenceType const
                 // v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7297; // RecordType const
                 // v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7298; // FunctionProtoType void (const
                 // v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7299; // CXXMethodDecl operator=
struct _ast7300; // ParmVarDecl
struct _ast7301; // FunctionProtoType
                 // v8::Isolate::DisallowJavascriptExecutionScope &(const
                 // v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7302; // LValueReferenceType
                 // v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7303; // CXXRecordDecl AllowJavascriptExecutionScope
struct _ast7304; // RecordType v8::Isolate::AllowJavascriptExecutionScope
struct _ast7305; // FieldDecl internal_throws_
struct _ast7306; // FieldDecl internal_assert_
struct _ast7307; // FieldDecl internal_dump_
struct _ast7308; // CXXRecordDecl AllowJavascriptExecutionScope
struct _ast7309; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7310; // ParmVarDecl isolate
struct _ast7311; // PointerType v8::Isolate::AllowJavascriptExecutionScope *
struct _ast7312; // CXXDestructorDecl ~AllowJavascriptExecutionScope
struct _ast7313; // FunctionProtoType void ()
struct _ast7314; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7315; // ParmVarDecl
struct _ast7316; // LValueReferenceType const
                 // v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7317; // RecordType const v8::Isolate::AllowJavascriptExecutionScope
struct _ast7318; // FunctionProtoType void (const
                 // v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7319; // CXXMethodDecl operator=
struct _ast7320; // ParmVarDecl
struct _ast7321; // FunctionProtoType v8::Isolate::AllowJavascriptExecutionScope
                 // &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7322; // LValueReferenceType
                 // v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7323; // CXXRecordDecl SuppressMicrotaskExecutionScope
struct _ast7324; // RecordType v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7325; // FieldDecl isolate_
struct _ast7326; // FieldDecl microtask_queue_
struct _ast7327; // CXXRecordDecl SuppressMicrotaskExecutionScope
struct _ast7328; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7329; // ParmVarDecl isolate
struct _ast7330; // PointerType v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ast7331; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7332; // ParmVarDecl microtask_queue
struct _ast7333; // FunctionProtoType void (v8::MicrotaskQueue *)
struct _ast7334; // CXXDestructorDecl ~SuppressMicrotaskExecutionScope
struct _ast7335; // FunctionProtoType void ()
struct _ast7336; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7337; // ParmVarDecl
struct _ast7338; // LValueReferenceType const
                 // v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7339; // RecordType const
                 // v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7340; // FunctionProtoType void (const
                 // v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7341; // CXXMethodDecl operator=
struct _ast7342; // ParmVarDecl
struct _ast7343; // FunctionProtoType
                 // v8::Isolate::SuppressMicrotaskExecutionScope &(const
                 // v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7344; // LValueReferenceType
                 // v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7345; // CXXRecordDecl SafeForTerminationScope
struct _ast7346; // RecordType v8::Isolate::SafeForTerminationScope
struct _ast7347; // FieldDecl isolate_
struct _ast7348; // FieldDecl prev_value_
struct _ast7349; // CXXRecordDecl SafeForTerminationScope
struct _ast7350; // CXXConstructorDecl SafeForTerminationScope
struct _ast7351; // ParmVarDecl isolate
struct _ast7352; // FunctionProtoType void (v8::Isolate *)
struct _ast7353; // PointerType v8::Isolate::SafeForTerminationScope *
struct _ast7354; // CXXDestructorDecl ~SafeForTerminationScope
struct _ast7355; // FunctionProtoType void ()
struct _ast7356; // CXXConstructorDecl SafeForTerminationScope
struct _ast7357; // ParmVarDecl
struct _ast7358; // LValueReferenceType const
                 // v8::Isolate::SafeForTerminationScope &
struct _ast7359; // RecordType const v8::Isolate::SafeForTerminationScope
struct _ast7360; // FunctionProtoType void (const
                 // v8::Isolate::SafeForTerminationScope &)
struct _ast7361; // CXXMethodDecl operator=
struct _ast7362; // ParmVarDecl
struct _ast7363; // FunctionProtoType v8::Isolate::SafeForTerminationScope
                 // &(const v8::Isolate::SafeForTerminationScope &)
struct _ast7364; // LValueReferenceType v8::Isolate::SafeForTerminationScope &
struct _ast7365; // EnumDecl GarbageCollectionType
struct _ast7366; // EnumConstantDecl kFullGarbageCollection
struct _ast7367; // EnumConstantDecl kMinorGarbageCollection
struct _ast7368; // EnumDecl UseCounterFeature
struct _ast7369; // EnumConstantDecl kUseAsm
struct _ast7370; // EnumConstantDecl kBreakIterator
struct _ast7371; // EnumConstantDecl kLegacyConst
struct _ast7372; // EnumConstantDecl kMarkDequeOverflow
struct _ast7373; // EnumConstantDecl kStoreBufferOverflow
struct _ast7374; // EnumConstantDecl kSlotsBufferOverflow
struct _ast7375; // EnumConstantDecl kObjectObserve
struct _ast7376; // EnumConstantDecl kForcedGC
struct _ast7377; // EnumConstantDecl kSloppyMode
struct _ast7378; // EnumConstantDecl kStrictMode
struct _ast7379; // EnumConstantDecl kStrongMode
struct _ast7380; // EnumConstantDecl kRegExpPrototypeStickyGetter
struct _ast7381; // EnumConstantDecl kRegExpPrototypeToString
struct _ast7382; // EnumConstantDecl kRegExpPrototypeUnicodeGetter
struct _ast7383; // EnumConstantDecl kIntlV8Parse
struct _ast7384; // EnumConstantDecl kIntlPattern
struct _ast7385; // EnumConstantDecl kIntlResolved
struct _ast7386; // EnumConstantDecl kPromiseChain
struct _ast7387; // EnumConstantDecl kPromiseAccept
struct _ast7388; // EnumConstantDecl kPromiseDefer
struct _ast7389; // EnumConstantDecl kHtmlCommentInExternalScript
struct _ast7390; // EnumConstantDecl kHtmlComment
struct _ast7391; // EnumConstantDecl kSloppyModeBlockScopedFunctionRedefinition
struct _ast7392; // EnumConstantDecl kForInInitializer
struct _ast7393; // EnumConstantDecl kArrayProtectorDirtied
struct _ast7394; // EnumConstantDecl kArraySpeciesModified
struct _ast7395; // EnumConstantDecl kArrayPrototypeConstructorModified
struct _ast7396; // EnumConstantDecl kArrayInstanceProtoModified
struct _ast7397; // EnumConstantDecl kArrayInstanceConstructorModified
struct _ast7398; // EnumConstantDecl kLegacyFunctionDeclaration
struct _ast7399; // EnumConstantDecl kRegExpPrototypeSourceGetter
struct _ast7400; // EnumConstantDecl kRegExpPrototypeOldFlagGetter
struct _ast7401; // EnumConstantDecl kDecimalWithLeadingZeroInStrictMode
struct _ast7402; // EnumConstantDecl kLegacyDateParser
struct _ast7403; // EnumConstantDecl kDefineGetterOrSetterWouldThrow
struct _ast7404; // EnumConstantDecl kFunctionConstructorReturnedUndefined
struct _ast7405; // EnumConstantDecl kAssigmentExpressionLHSIsCallInSloppy
struct _ast7406; // EnumConstantDecl kAssigmentExpressionLHSIsCallInStrict
struct _ast7407; // EnumConstantDecl kPromiseConstructorReturnedUndefined
struct _ast7408; // EnumConstantDecl kConstructorNonUndefinedPrimitiveReturn
struct _ast7409; // EnumConstantDecl kLabeledExpressionStatement
struct _ast7410; // EnumConstantDecl kLineOrParagraphSeparatorAsLineTerminator
struct _ast7411; // EnumConstantDecl kIndexAccessor
struct _ast7412; // EnumConstantDecl kErrorCaptureStackTrace
struct _ast7413; // EnumConstantDecl kErrorPrepareStackTrace
struct _ast7414; // EnumConstantDecl kErrorStackTraceLimit
struct _ast7415; // EnumConstantDecl kWebAssemblyInstantiation
struct _ast7416; // EnumConstantDecl kDeoptimizerDisableSpeculation
struct _ast7417; // EnumConstantDecl kArrayPrototypeSortJSArrayModifiedPrototype
struct _ast7418; // EnumConstantDecl kFunctionTokenOffsetTooLongForToString
struct _ast7419; // EnumConstantDecl kWasmSharedMemory
struct _ast7420; // EnumConstantDecl kWasmThreadOpcodes
struct _ast7421; // EnumConstantDecl kAtomicsNotify
struct _ast7422; // EnumConstantDecl kAtomicsWake
struct _ast7423; // EnumConstantDecl kCollator
struct _ast7424; // EnumConstantDecl kNumberFormat
struct _ast7425; // EnumConstantDecl kDateTimeFormat
struct _ast7426; // EnumConstantDecl kPluralRules
struct _ast7427; // EnumConstantDecl kRelativeTimeFormat
struct _ast7428; // EnumConstantDecl kLocale
struct _ast7429; // EnumConstantDecl kListFormat
struct _ast7430; // EnumConstantDecl kSegmenter
struct _ast7431; // EnumConstantDecl kStringLocaleCompare
struct _ast7432; // EnumConstantDecl kStringToLocaleUpperCase
struct _ast7433; // EnumConstantDecl kStringToLocaleLowerCase
struct _ast7434; // EnumConstantDecl kNumberToLocaleString
struct _ast7435; // EnumConstantDecl kDateToLocaleString
struct _ast7436; // EnumConstantDecl kDateToLocaleDateString
struct _ast7437; // EnumConstantDecl kDateToLocaleTimeString
struct _ast7438; // EnumConstantDecl kAttemptOverrideReadOnlyOnPrototypeSloppy
struct _ast7439; // EnumConstantDecl kAttemptOverrideReadOnlyOnPrototypeStrict
struct _ast7440; // EnumConstantDecl kOptimizedFunctionWithOneShotBytecode
struct _ast7441; // EnumConstantDecl kRegExpMatchIsTrueishOnNonJSRegExp
struct _ast7442; // EnumConstantDecl kRegExpMatchIsFalseishOnJSRegExp
struct _ast7443; // EnumConstantDecl kDateGetTimezoneOffset
struct _ast7444; // EnumConstantDecl kStringNormalize
struct _ast7445; // EnumConstantDecl kUseCounterFeatureCount
struct _ast7446; // EnumDecl MessageErrorLevel
struct _ast7447; // EnumConstantDecl kMessageLog
struct _ast7448; // EnumConstantDecl kMessageDebug
struct _ast7449; // EnumConstantDecl kMessageInfo
struct _ast7450; // EnumConstantDecl kMessageError
struct _ast7451; // EnumConstantDecl kMessageWarning
struct _ast7452; // EnumConstantDecl kMessageAll
struct _ast7453; // TypedefDecl UseCounterCallback
struct _ast7454; // TypedefType v8::Isolate::UseCounterCallback
struct _ast7455; // CXXMethodDecl Allocate
struct _ast7456; // CXXMethodDecl Initialize
struct _ast7457; // ParmVarDecl isolate
struct _ast7458; // ParmVarDecl params
struct _ast7459; // LValueReferenceType const v8::Isolate::CreateParams &
struct _ast7460; // RecordType const v8::Isolate::CreateParams
struct _ast7461; // FunctionProtoType void (v8::Isolate *, const
                 // v8::Isolate::CreateParams &)
struct _ast7462; // CXXMethodDecl New
struct _ast7463; // ParmVarDecl params
struct _ast7464; // FunctionProtoType v8::Isolate *(const
                 // v8::Isolate::CreateParams &)
struct _ast7465; // CXXMethodDecl GetCurrent
struct _ast7466; // TypedefDecl AbortOnUncaughtExceptionCallback
struct _ast7467; // TypedefType v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ast7468; // CXXMethodDecl SetAbortOnUncaughtExceptionCallback
struct _ast7469; // ParmVarDecl callback
struct _ast7470; // FunctionProtoType void
                 // (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ast7471; // CXXMethodDecl SetHostImportModuleDynamicallyCallback
struct _ast7472; // ParmVarDecl callback
struct _ast7473; // FunctionProtoType void
                 // (v8::HostImportModuleDynamicallyCallback)
struct _ast7474; // CXXMethodDecl SetHostInitializeImportMetaObjectCallback
struct _ast7475; // ParmVarDecl callback
struct _ast7476; // FunctionProtoType void
                 // (v8::HostInitializeImportMetaObjectCallback)
struct _ast7477; // CXXMethodDecl SetPrepareStackTraceCallback
struct _ast7478; // ParmVarDecl callback
struct _ast7479; // FunctionProtoType void (v8::PrepareStackTraceCallback)
struct _ast7480; // CXXMethodDecl MemoryPressureNotification
struct _ast7481; // ParmVarDecl level
struct _ast7482; // EnumType v8::MemoryPressureLevel
struct _ast7483; // FunctionProtoType void (v8::MemoryPressureLevel)
struct _ast7484; // CXXMethodDecl Enter
struct _ast7485; // CXXMethodDecl Exit
struct _ast7486; // CXXMethodDecl Dispose
struct _ast7487; // CXXMethodDecl DumpAndResetStats
struct _ast7488; // CXXMethodDecl DiscardThreadSpecificMetadata
struct _ast7489; // CXXMethodDecl SetData
struct _ast7490; // ParmVarDecl slot
struct _ast7491; // ParmVarDecl data
struct _ast7492; // FunctionProtoType void (uint32_t, void *)
struct _ast7493; // CXXMethodDecl GetData
struct _ast7494; // ParmVarDecl slot
struct _ast7495; // FunctionProtoType void *(uint32_t)
struct _ast7496; // CXXMethodDecl GetNumberOfDataSlots
struct _ast7497; // FunctionTemplateDecl GetDataFromSnapshotOnce
struct _ast7498; // TemplateTypeParmDecl T
struct _ast7499; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast7500; // ParmVarDecl index
struct _ast7501; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast7502; // TemplateSpecializationType MaybeLocal<T>
struct _ast7503; // CXXMethodDecl GetHeapStatistics
struct _ast7504; // ParmVarDecl heap_statistics
struct _ast7505; // FunctionProtoType void (v8::HeapStatistics *)
struct _ast7506; // CXXMethodDecl NumberOfHeapSpaces
struct _ast7507; // CXXMethodDecl GetHeapSpaceStatistics
struct _ast7508; // ParmVarDecl space_statistics
struct _ast7509; // ParmVarDecl index
struct _ast7510; // FunctionProtoType bool (v8::HeapSpaceStatistics *, size_t)
struct _ast7511; // CXXMethodDecl NumberOfTrackedHeapObjectTypes
struct _ast7512; // CXXMethodDecl GetHeapObjectStatisticsAtLastGC
struct _ast7513; // ParmVarDecl object_statistics
struct _ast7514; // ParmVarDecl type_index
struct _ast7515; // FunctionProtoType bool (v8::HeapObjectStatistics *, size_t)
struct _ast7516; // CXXMethodDecl GetHeapCodeAndMetadataStatistics
struct _ast7517; // ParmVarDecl object_statistics
struct _ast7518; // FunctionProtoType bool (v8::HeapCodeStatistics *)
struct _ast7519; // CXXMethodDecl GetStackSample
struct _ast7520; // ParmVarDecl state
struct _ast7521; // LValueReferenceType const v8::RegisterState &
struct _ast7522; // RecordType const v8::RegisterState
struct _ast7523; // ParmVarDecl frames
struct _ast7524; // PointerType void **
struct _ast7525; // ParmVarDecl frames_limit
struct _ast7526; // ParmVarDecl sample_info
struct _ast7527; // PointerType v8::SampleInfo *
struct _ast7528; // FunctionProtoType void (const v8::RegisterState &, void **,
                 // size_t, v8::SampleInfo *)
struct _ast7529; // CXXMethodDecl AdjustAmountOfExternalAllocatedMemory
struct _ast7530; // ParmVarDecl change_in_bytes
struct _ast7531; // FunctionProtoType int64_t (int64_t)
struct _ast7532; // CXXMethodDecl NumberOfPhantomHandleResetsSinceLastCall
struct _ast7533; // CXXMethodDecl GetHeapProfiler
struct _ast7534; // FunctionProtoType v8::HeapProfiler *()
struct _ast7535; // PointerType v8::HeapProfiler *
struct _ast7536; // CXXMethodDecl SetIdle
struct _ast7537; // ParmVarDecl is_idle
struct _ast7538; // CXXMethodDecl GetArrayBufferAllocator
struct _ast7539; // FunctionProtoType ArrayBuffer::Allocator *()
struct _ast7540; // CXXMethodDecl InContext
struct _ast7541; // CXXMethodDecl GetCurrentContext
struct _ast7542; // FunctionProtoType Local<v8::Context> ()
struct _ast7543; // TemplateSpecializationType Local<v8::Context>
struct _ast7544; // CXXMethodDecl GetEnteredContext
struct _ast7545; // FunctionProtoType Local<v8::Context> ()
struct _ast7546; // TemplateSpecializationType Local<v8::Context>
struct _ast7547; // CXXMethodDecl GetEnteredOrMicrotaskContext
struct _ast7548; // FunctionProtoType Local<v8::Context> ()
struct _ast7549; // TemplateSpecializationType Local<v8::Context>
struct _ast7550; // CXXMethodDecl GetIncumbentContext
struct _ast7551; // FunctionProtoType Local<v8::Context> ()
struct _ast7552; // TemplateSpecializationType Local<v8::Context>
struct _ast7553; // CXXMethodDecl ThrowException
struct _ast7554; // ParmVarDecl exception
struct _ast7555; // TemplateSpecializationType Local<v8::Value>
struct _ast7556; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast7557; // TemplateSpecializationType Local<v8::Value>
struct _ast7558; // TypedefDecl GCCallback
struct _ast7559; // TypedefType v8::Isolate::GCCallback
struct _ast7560; // TypedefDecl GCCallbackWithData
struct _ast7561; // TypedefType v8::Isolate::GCCallbackWithData
struct _ast7562; // CXXMethodDecl AddGCPrologueCallback
struct _ast7563; // ParmVarDecl callback
struct _ast7564; // ParmVarDecl data
struct _ast7565; // ParmVarDecl gc_type_filter
struct _ast7566; // EnumType v8::GCType
struct _ast7567; // FunctionProtoType void (v8::Isolate::GCCallbackWithData,
                 // void *, v8::GCType)
struct _ast7568; // CXXMethodDecl AddGCPrologueCallback
struct _ast7569; // ParmVarDecl callback
struct _ast7570; // ParmVarDecl gc_type_filter
struct _ast7571; // FunctionProtoType void (v8::Isolate::GCCallback, v8::GCType)
struct _ast7572; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7573; // ParmVarDecl
struct _ast7574; // ParmVarDecl data
struct _ast7575; // FunctionProtoType void (v8::Isolate::GCCallbackWithData,
                 // void *)
struct _ast7576; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7577; // ParmVarDecl callback
struct _ast7578; // FunctionProtoType void (v8::Isolate::GCCallback)
struct _ast7579; // CXXMethodDecl SetEmbedderHeapTracer
struct _ast7580; // ParmVarDecl tracer
struct _ast7581; // FunctionProtoType void (v8::EmbedderHeapTracer *)
struct _ast7582; // CXXMethodDecl GetEmbedderHeapTracer
struct _ast7583; // FunctionProtoType v8::EmbedderHeapTracer *()
struct _ast7584; // EnumDecl AtomicsWaitEvent
struct _ast7585; // EnumConstantDecl kStartWait
struct _ast7586; // EnumConstantDecl kWokenUp
struct _ast7587; // EnumConstantDecl kTimedOut
struct _ast7588; // EnumConstantDecl kTerminatedExecution
struct _ast7589; // EnumConstantDecl kAPIStopped
struct _ast7590; // EnumConstantDecl kNotEqual
struct _ast7591; // CXXRecordDecl AtomicsWaitWakeHandle
struct _ast7592; // RecordType v8::Isolate::AtomicsWaitWakeHandle
struct _ast7593; // CXXRecordDecl AtomicsWaitWakeHandle
struct _ast7594; // CXXMethodDecl Wake
struct _ast7595; // PointerType v8::Isolate::AtomicsWaitWakeHandle *
struct _ast7596; // TypedefDecl AtomicsWaitCallback
struct _ast7597; // TypedefType v8::Isolate::AtomicsWaitCallback
struct _ast7598; // CXXMethodDecl SetAtomicsWaitCallback
struct _ast7599; // ParmVarDecl callback
struct _ast7600; // ParmVarDecl data
struct _ast7601; // FunctionProtoType void (v8::Isolate::AtomicsWaitCallback,
                 // void *)
struct _ast7602; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7603; // ParmVarDecl callback
struct _ast7604; // ParmVarDecl data
struct _ast7605; // ParmVarDecl gc_type_filter
struct _ast7606; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7607; // ParmVarDecl callback
struct _ast7608; // ParmVarDecl gc_type_filter
struct _ast7609; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7610; // ParmVarDecl callback
struct _ast7611; // ParmVarDecl data
struct _ast7612; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7613; // ParmVarDecl callback
struct _ast7614; // TypedefDecl GetExternallyAllocatedMemoryInBytesCallback
struct _ast7615; // TypedefType
                 // v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ast7616; // CXXMethodDecl SetGetExternallyAllocatedMemoryInBytesCallback
struct _ast7617; // ParmVarDecl callback
struct _ast7618; // FunctionProtoType void
                 // (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ast7619; // CXXMethodDecl TerminateExecution
struct _ast7620; // CXXMethodDecl IsExecutionTerminating
struct _ast7621; // CXXMethodDecl CancelTerminateExecution
struct _ast7622; // CXXMethodDecl RequestInterrupt
struct _ast7623; // ParmVarDecl callback
struct _ast7624; // ParmVarDecl data
struct _ast7625; // FunctionProtoType void (v8::InterruptCallback, void *)
struct _ast7626; // CXXMethodDecl RequestGarbageCollectionForTesting
struct _ast7627; // ParmVarDecl type
struct _ast7628; // EnumType v8::Isolate::GarbageCollectionType
struct _ast7629; // FunctionProtoType void (v8::Isolate::GarbageCollectionType)
struct _ast7630; // CXXMethodDecl SetEventLogger
struct _ast7631; // ParmVarDecl that
struct _ast7632; // FunctionProtoType void (v8::LogEventCallback)
struct _ast7633; // CXXMethodDecl AddBeforeCallEnteredCallback
struct _ast7634; // ParmVarDecl callback
struct _ast7635; // FunctionProtoType void (v8::BeforeCallEnteredCallback)
struct _ast7636; // CXXMethodDecl RemoveBeforeCallEnteredCallback
struct _ast7637; // ParmVarDecl callback
struct _ast7638; // CXXMethodDecl AddCallCompletedCallback
struct _ast7639; // ParmVarDecl callback
struct _ast7640; // FunctionProtoType void (v8::CallCompletedCallback)
struct _ast7641; // CXXMethodDecl RemoveCallCompletedCallback
struct _ast7642; // ParmVarDecl callback
struct _ast7643; // CXXMethodDecl SetPromiseHook
struct _ast7644; // ParmVarDecl hook
struct _ast7645; // FunctionProtoType void (v8::PromiseHook)
struct _ast7646; // CXXMethodDecl SetPromiseRejectCallback
struct _ast7647; // ParmVarDecl callback
struct _ast7648; // FunctionProtoType void (v8::PromiseRejectCallback)
struct _ast7649; // CXXMethodDecl RunMicrotasks
struct _ast7650; // CXXMethodDecl EnqueueMicrotask
struct _ast7651; // ParmVarDecl microtask
struct _ast7652; // TemplateSpecializationType Local<v8::Function>
struct _ast7653; // FunctionProtoType void (Local<v8::Function>)
struct _ast7654; // CXXMethodDecl EnqueueMicrotask
struct _ast7655; // ParmVarDecl callback
struct _ast7656; // ParmVarDecl data
struct _ast7657; // FunctionProtoType void (v8::MicrotaskCallback, void *)
struct _ast7658; // CXXMethodDecl SetMicrotasksPolicy
struct _ast7659; // ParmVarDecl policy
struct _ast7660; // FunctionProtoType void (v8::MicrotasksPolicy)
struct _ast7661; // CXXMethodDecl GetMicrotasksPolicy
struct _ast7662; // FunctionProtoType v8::MicrotasksPolicy () const
struct _ast7663; // PointerType const v8::Isolate *
struct _ast7664; // RecordType const v8::Isolate
struct _ast7665; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7666; // ParmVarDecl callback
struct _ast7667; // FunctionProtoType void (v8::MicrotasksCompletedCallback)
struct _ast7668; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7669; // ParmVarDecl callback
struct _ast7670; // ParmVarDecl data
struct _ast7671; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7672; // ParmVarDecl callback
struct _ast7673; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7674; // ParmVarDecl callback
struct _ast7675; // ParmVarDecl data
struct _ast7676; // CXXMethodDecl SetUseCounterCallback
struct _ast7677; // ParmVarDecl callback
struct _ast7678; // FunctionProtoType void (v8::Isolate::UseCounterCallback)
struct _ast7679; // CXXMethodDecl SetCounterFunction
struct _ast7680; // ParmVarDecl
struct _ast7681; // FunctionProtoType void (v8::CounterLookupCallback)
struct _ast7682; // CXXMethodDecl SetCreateHistogramFunction
struct _ast7683; // ParmVarDecl
struct _ast7684; // FunctionProtoType void (v8::CreateHistogramCallback)
struct _ast7685; // CXXMethodDecl SetAddHistogramSampleFunction
struct _ast7686; // ParmVarDecl
struct _ast7687; // FunctionProtoType void (v8::AddHistogramSampleCallback)
struct _ast7688; // CXXMethodDecl IdleNotificationDeadline
struct _ast7689; // ParmVarDecl deadline_in_seconds
struct _ast7690; // CXXMethodDecl LowMemoryNotification
struct _ast7691; // CXXMethodDecl ContextDisposedNotification
struct _ast7692; // ParmVarDecl dependant_context
struct _ast7693; // FunctionProtoType int (bool)
struct _ast7694; // CXXMethodDecl IsolateInForegroundNotification
struct _ast7695; // CXXMethodDecl IsolateInBackgroundNotification
struct _ast7696; // CXXMethodDecl EnableMemorySavingsMode
struct _ast7697; // CXXMethodDecl DisableMemorySavingsMode
struct _ast7698; // CXXMethodDecl SetRAILMode
struct _ast7699; // ParmVarDecl rail_mode
struct _ast7700; // EnumType v8::RAILMode
struct _ast7701; // BuiltinType unsigned int
struct _ast7702; // FunctionProtoType void (v8::RAILMode)
struct _ast7703; // CXXMethodDecl IncreaseHeapLimitForDebugging
struct _ast7704; // CXXMethodDecl RestoreOriginalHeapLimit
struct _ast7705; // CXXMethodDecl IsHeapLimitIncreasedForDebugging
struct _ast7706; // CXXMethodDecl SetJitCodeEventHandler
struct _ast7707; // ParmVarDecl options
struct _ast7708; // EnumType v8::JitCodeEventOptions
struct _ast7709; // ParmVarDecl event_handler
struct _ast7710; // FunctionProtoType void (v8::JitCodeEventOptions,
                 // v8::JitCodeEventHandler)
struct _ast7711; // CXXMethodDecl SetStackLimit
struct _ast7712; // ParmVarDecl stack_limit
struct _ast7713; // TypedefType uintptr_t
struct _ast7714; // FunctionProtoType void (uintptr_t)
struct _ast7715; // CXXMethodDecl GetCodeRange
struct _ast7716; // ParmVarDecl start
struct _ast7717; // ParmVarDecl length_in_bytes
struct _ast7718; // FunctionProtoType void (void **, size_t *)
struct _ast7719; // CXXMethodDecl GetUnwindState
struct _ast7720; // FunctionProtoType v8::UnwindState ()
struct _ast7721; // CXXMethodDecl SetFatalErrorHandler
struct _ast7722; // ParmVarDecl that
struct _ast7723; // FunctionProtoType void (v8::FatalErrorCallback)
struct _ast7724; // CXXMethodDecl SetOOMErrorHandler
struct _ast7725; // ParmVarDecl that
struct _ast7726; // FunctionProtoType void (v8::OOMErrorCallback)
struct _ast7727; // CXXMethodDecl AddNearHeapLimitCallback
struct _ast7728; // ParmVarDecl callback
struct _ast7729; // ParmVarDecl data
struct _ast7730; // FunctionProtoType void (v8::NearHeapLimitCallback, void *)
struct _ast7731; // CXXMethodDecl RemoveNearHeapLimitCallback
struct _ast7732; // ParmVarDecl callback
struct _ast7733; // ParmVarDecl heap_limit
struct _ast7734; // FunctionProtoType void (v8::NearHeapLimitCallback, size_t)
struct _ast7735; // CXXMethodDecl AutomaticallyRestoreInitialHeapLimit
struct _ast7736; // ParmVarDecl threshold_percent
struct _ast7737; // CXXMethodDecl SetAllowCodeGenerationFromStringsCallback
struct _ast7738; // ParmVarDecl callback
struct _ast7739; // FunctionProtoType void
                 // (v8::AllowCodeGenerationFromStringsCallback)
struct _ast7740; // CXXMethodDecl SetAllowWasmCodeGenerationCallback
struct _ast7741; // ParmVarDecl callback
struct _ast7742; // FunctionProtoType void (v8::AllowWasmCodeGenerationCallback)
struct _ast7743; // CXXMethodDecl SetWasmModuleCallback
struct _ast7744; // ParmVarDecl callback
struct _ast7745; // FunctionProtoType void (v8::ExtensionCallback)
struct _ast7746; // CXXMethodDecl SetWasmInstanceCallback
struct _ast7747; // ParmVarDecl callback
struct _ast7748; // CXXMethodDecl SetWasmStreamingCallback
struct _ast7749; // ParmVarDecl callback
struct _ast7750; // FunctionProtoType void (v8::WasmStreamingCallback)
struct _ast7751; // CXXMethodDecl SetWasmThreadsEnabledCallback
struct _ast7752; // ParmVarDecl callback
struct _ast7753; // FunctionProtoType void (v8::WasmThreadsEnabledCallback)
struct _ast7754; // CXXMethodDecl IsDead
struct _ast7755; // CXXMethodDecl AddMessageListener
struct _ast7756; // ParmVarDecl that
struct _ast7757; // ParmVarDecl data
struct _ast7758; // TemplateSpecializationType Local<v8::Value>
struct _ast7759; // FunctionProtoType bool (v8::MessageCallback,
                 // Local<v8::Value>)
struct _ast7760; // CXXMethodDecl AddMessageListenerWithErrorLevel
struct _ast7761; // ParmVarDecl that
struct _ast7762; // ParmVarDecl message_levels
struct _ast7763; // ParmVarDecl data
struct _ast7764; // TemplateSpecializationType Local<v8::Value>
struct _ast7765; // FunctionProtoType bool (v8::MessageCallback, int,
                 // Local<v8::Value>)
struct _ast7766; // CXXMethodDecl RemoveMessageListeners
struct _ast7767; // ParmVarDecl that
struct _ast7768; // FunctionProtoType void (v8::MessageCallback)
struct _ast7769; // CXXMethodDecl SetFailedAccessCheckCallbackFunction
struct _ast7770; // ParmVarDecl
struct _ast7771; // FunctionProtoType void (v8::FailedAccessCheckCallback)
struct _ast7772; // CXXMethodDecl SetCaptureStackTraceForUncaughtExceptions
struct _ast7773; // ParmVarDecl capture
struct _ast7774; // ParmVarDecl frame_limit
struct _ast7775; // ParmVarDecl options
struct _ast7776; // ElaboratedType StackTrace::StackTraceOptions
struct _ast7777; // FunctionProtoType void (bool, int,
                 // StackTrace::StackTraceOptions)
struct _ast7778; // CXXMethodDecl VisitExternalResources
struct _ast7779; // ParmVarDecl visitor
struct _ast7780; // FunctionProtoType void (v8::ExternalResourceVisitor *)
struct _ast7781; // CXXMethodDecl VisitHandlesWithClassIds
struct _ast7782; // ParmVarDecl visitor
struct _ast7783; // FunctionProtoType void (v8::PersistentHandleVisitor *)
struct _ast7784; // CXXMethodDecl VisitWeakHandles
struct _ast7785; // ParmVarDecl visitor
struct _ast7786; // CXXMethodDecl IsInUse
struct _ast7787; // CXXMethodDecl SetAllowAtomicsWait
struct _ast7788; // ParmVarDecl allow
struct _ast7789; // EnumDecl TimeZoneDetection
struct _ast7790; // EnumConstantDecl kSkip
struct _ast7791; // EnumConstantDecl kRedetect
struct _ast7792; // CXXMethodDecl DateTimeConfigurationChangeNotification
struct _ast7793; // ParmVarDecl time_zone_detection
struct _ast7794; // EnumType v8::Isolate::TimeZoneDetection
struct _ast7795; // FunctionProtoType void (v8::Isolate::TimeZoneDetection)
struct _ast7796; // CXXMethodDecl LocaleConfigurationChangeNotification
struct _ast7797; // CXXConstructorDecl Isolate
struct _ast7798; // CXXDestructorDecl ~Isolate
struct _ast7799; // FunctionProtoType void ()
struct _ast7800; // CXXConstructorDecl Isolate
struct _ast7801; // ParmVarDecl
struct _ast7802; // LValueReferenceType const v8::Isolate &
struct _ast7803; // FunctionProtoType void (const v8::Isolate &)
struct _ast7804; // CXXMethodDecl operator=
struct _ast7805; // ParmVarDecl
struct _ast7806; // FunctionProtoType v8::Isolate &(const v8::Isolate &)
struct _ast7807; // LValueReferenceType v8::Isolate &
struct _ast7808; // CXXMethodDecl operator new
struct _ast7809; // ParmVarDecl size
struct _ast7810; // CXXMethodDecl operator new[]
struct _ast7811; // ParmVarDecl size
struct _ast7812; // CXXMethodDecl operator delete
struct _ast7813; // ParmVarDecl
struct _ast7814; // ParmVarDecl
struct _ast7815; // FunctionProtoType void (void *, size_t) noexcept
struct _ast7816; // CXXMethodDecl operator delete[]
struct _ast7817; // ParmVarDecl
struct _ast7818; // ParmVarDecl
struct _ast7819; // CXXRecordDecl StartupData
struct _ast7820; // CXXMethodDecl CanBeRehashed
struct _ast7821; // PointerType const v8::StartupData *
struct _ast7822; // RecordType const v8::StartupData
struct _ast7823; // FieldDecl data
struct _ast7824; // FieldDecl raw_size
struct _ast7825; // TypedefDecl EntropySource
struct _ast7826; // TypedefType v8::EntropySource
struct _ast7827; // TypedefDecl ReturnAddressLocationResolver
struct _ast7828; // TypedefType v8::ReturnAddressLocationResolver
struct _ast7829; // CXXRecordDecl V8
struct _ast7830; // RecordType v8::V8
struct _ast7831; // CXXRecordDecl V8
struct _ast7832; // CXXMethodDecl SetNativesDataBlob
struct _ast7833; // ParmVarDecl startup_blob
struct _ast7834; // FunctionProtoType void (v8::StartupData *)
struct _ast7835; // CXXMethodDecl SetSnapshotDataBlob
struct _ast7836; // ParmVarDecl startup_blob
struct _ast7837; // CXXMethodDecl SetDcheckErrorHandler
struct _ast7838; // ParmVarDecl that
struct _ast7839; // FunctionProtoType void (v8::DcheckErrorCallback)
struct _ast7840; // CXXMethodDecl SetFlagsFromString
struct _ast7841; // ParmVarDecl str
struct _ast7842; // CXXMethodDecl SetFlagsFromString
struct _ast7843; // ParmVarDecl str
struct _ast7844; // ParmVarDecl length
struct _ast7845; // FunctionProtoType void (const char *, size_t)
struct _ast7846; // CXXMethodDecl SetFlagsFromString
struct _ast7847; // ParmVarDecl str
struct _ast7848; // ParmVarDecl length
struct _ast7849; // FunctionProtoType void (const char *, int)
struct _ast7850; // CXXMethodDecl SetFlagsFromCommandLine
struct _ast7851; // ParmVarDecl argc
struct _ast7852; // ParmVarDecl argv
struct _ast7853; // PointerType char **
struct _ast7854; // ParmVarDecl remove_flags
struct _ast7855; // FunctionProtoType void (int *, char **, bool)
struct _ast7856; // CXXMethodDecl GetVersion
struct _ast7857; // CXXMethodDecl Initialize
struct _ast7858; // CXXMethodDecl SetEntropySource
struct _ast7859; // ParmVarDecl source
struct _ast7860; // FunctionProtoType void (v8::EntropySource)
struct _ast7861; // CXXMethodDecl SetReturnAddressLocationResolver
struct _ast7862; // ParmVarDecl return_address_resolver
struct _ast7863; // FunctionProtoType void (v8::ReturnAddressLocationResolver)
struct _ast7864; // CXXMethodDecl Dispose
struct _ast7865; // CXXMethodDecl InitializeICU
struct _ast7866; // ParmVarDecl icu_data_file
struct _ast7867; // FunctionProtoType bool (const char *)
struct _ast7868; // CXXMethodDecl InitializeICUDefaultLocation
struct _ast7869; // ParmVarDecl exec_path
struct _ast7870; // ParmVarDecl icu_data_file
struct _ast7871; // FunctionProtoType bool (const char *, const char *)
struct _ast7872; // CXXMethodDecl InitializeExternalStartupData
struct _ast7873; // ParmVarDecl directory_path
struct _ast7874; // CXXMethodDecl InitializeExternalStartupData
struct _ast7875; // ParmVarDecl natives_blob
struct _ast7876; // ParmVarDecl snapshot_blob
struct _ast7877; // FunctionProtoType void (const char *, const char *)
struct _ast7878; // CXXMethodDecl InitializePlatform
struct _ast7879; // ParmVarDecl platform
struct _ast7880; // PointerType v8::Platform *
struct _ast7881; // FunctionProtoType void (v8::Platform *)
struct _ast7882; // CXXMethodDecl ShutdownPlatform
struct _ast7883; // CXXMethodDecl EnableWebAssemblyTrapHandler
struct _ast7884; // ParmVarDecl use_v8_signal_handler
struct _ast7885; // FunctionProtoType bool (bool)
struct _ast7886; // CXXMethodDecl SetUnhandledExceptionCallback
struct _ast7887; // ParmVarDecl unhandled_exception_callback
struct _ast7888; // FunctionProtoType void (v8::UnhandledExceptionCallback)
struct _ast7889; // CXXRecordDecl SnapshotCreator
struct _ast7890; // RecordType v8::SnapshotCreator
struct _ast7891; // FieldDecl data_
struct _ast7892; // CXXRecordDecl SnapshotCreator
struct _ast7893; // EnumDecl FunctionCodeHandling
struct _ast7894; // EnumConstantDecl kClear
struct _ast7895; // EnumConstantDecl kKeep
struct _ast7896; // CXXConstructorDecl SnapshotCreator
struct _ast7897; // ParmVarDecl isolate
struct _ast7898; // ParmVarDecl external_references
struct _ast7899; // ParmVarDecl existing_blob
struct _ast7900; // FunctionProtoType void (v8::Isolate *, const intptr_t *,
                 // v8::StartupData *)
struct _ast7901; // PointerType v8::SnapshotCreator *
struct _ast7902; // CXXConstructorDecl SnapshotCreator
struct _ast7903; // ParmVarDecl external_references
struct _ast7904; // ParmVarDecl existing_blob
struct _ast7905; // FunctionProtoType void (const intptr_t *, v8::StartupData *)
struct _ast7906; // CXXDestructorDecl ~SnapshotCreator
struct _ast7907; // FunctionProtoType void ()
struct _ast7908; // CXXMethodDecl GetIsolate
struct _ast7909; // CXXMethodDecl SetDefaultContext
struct _ast7910; // ParmVarDecl context
struct _ast7911; // TemplateSpecializationType Local<v8::Context>
struct _ast7912; // ParmVarDecl callback
struct _ast7913; // FunctionProtoType void (Local<v8::Context>,
                 // v8::SerializeInternalFieldsCallback)
struct _ast7914; // CXXMethodDecl AddContext
struct _ast7915; // ParmVarDecl context
struct _ast7916; // TemplateSpecializationType Local<v8::Context>
struct _ast7917; // ParmVarDecl callback
struct _ast7918; // FunctionProtoType size_t (Local<v8::Context>,
                 // v8::SerializeInternalFieldsCallback)
struct _ast7919; // CXXMethodDecl AddTemplate
struct _ast7920; // ParmVarDecl template_obj
struct _ast7921; // TemplateSpecializationType Local<v8::Template>
struct _ast7922; // FunctionProtoType size_t (Local<v8::Template>)
struct _ast7923; // FunctionTemplateDecl AddData
struct _ast7924; // TemplateTypeParmDecl T
struct _ast7925; // CXXMethodDecl AddData
struct _ast7926; // ParmVarDecl context
struct _ast7927; // TemplateSpecializationType Local<v8::Context>
struct _ast7928; // ParmVarDecl object
struct _ast7929; // TemplateSpecializationType Local<T>
struct _ast7930; // FunctionProtoType size_t (Local<v8::Context>, Local<T>)
struct _ast7931; // FunctionTemplateDecl AddData
struct _ast7932; // TemplateTypeParmDecl T
struct _ast7933; // CXXMethodDecl AddData
struct _ast7934; // ParmVarDecl object
struct _ast7935; // TemplateSpecializationType Local<T>
struct _ast7936; // FunctionProtoType size_t (Local<T>)
struct _ast7937; // CXXMethodDecl CreateBlob
struct _ast7938; // ParmVarDecl function_code_handling
struct _ast7939; // EnumType v8::SnapshotCreator::FunctionCodeHandling
struct _ast7940; // FunctionProtoType v8::StartupData
                 // (v8::SnapshotCreator::FunctionCodeHandling)
struct _ast7941; // CXXConstructorDecl SnapshotCreator
struct _ast7942; // ParmVarDecl
struct _ast7943; // LValueReferenceType const v8::SnapshotCreator &
struct _ast7944; // RecordType const v8::SnapshotCreator
struct _ast7945; // FunctionProtoType void (const v8::SnapshotCreator &)
struct _ast7946; // CXXMethodDecl operator=
struct _ast7947; // ParmVarDecl
struct _ast7948; // TemplateTypeParmDecl T
struct _ast7949; // CXXRecordDecl Maybe
struct _ast7950; // CXXMethodDecl IsNothing
struct _ast7951; // PointerType const Maybe<T> *
struct _ast7952; // InjectedClassNameType const Maybe<T>
struct _ast7953; // CXXMethodDecl IsJust
struct _ast7954; // CXXMethodDecl ToChecked
struct _ast7955; // FunctionProtoType T () const
struct _ast7956; // TemplateTypeParmType T
struct _ast7957; // CXXMethodDecl Check
struct _ast7958; // CXXMethodDecl To
struct _ast7959; // ParmVarDecl out
struct _ast7960; // PointerType T *
struct _ast7961; // FunctionProtoType bool (T *) const
struct _ast7962; // CXXMethodDecl FromJust
struct _ast7963; // CXXMethodDecl FromMaybe
struct _ast7964; // ParmVarDecl default_value
struct _ast7965; // LValueReferenceType const T &
struct _ast7966; // TemplateTypeParmType const T
struct _ast7967; // FunctionProtoType T (const T &) const
struct _ast7968; // CXXMethodDecl operator==
struct _ast7969; // ParmVarDecl other
struct _ast7970; // LValueReferenceType const Maybe<T> &
struct _ast7971; // FunctionProtoType bool (const Maybe<T> &) const
struct _ast7972; // CXXMethodDecl operator!=
struct _ast7973; // ParmVarDecl other
struct _ast7974; // FunctionTemplateDecl Nothing
struct _ast7975; // TemplateTypeParmDecl T
struct _ast7976; // FunctionDecl Nothing
struct _ast7977; // FunctionProtoType Maybe<T> ()
struct _ast7978; // TemplateSpecializationType Maybe<T>
struct _ast7979; // FunctionTemplateDecl Just
struct _ast7980; // TemplateTypeParmDecl T
struct _ast7981; // FunctionDecl Just
struct _ast7982; // ParmVarDecl t
struct _ast7983; // LValueReferenceType const T &
struct _ast7984; // TemplateTypeParmType const T
struct _ast7985; // TemplateTypeParmType T
struct _ast7986; // FunctionProtoType Maybe<T> (const T &)
struct _ast7987; // TemplateSpecializationType Maybe<T>
struct _ast7988; // ClassTemplateSpecializationDecl Maybe
struct _ast7989; // CXXRecordDecl Maybe
struct _ast7990; // RecordType v8::Maybe<void>
struct _ast7991; // CXXMethodDecl IsNothing
struct _ast7992; // PointerType const v8::Maybe<void> *
struct _ast7993; // RecordType const v8::Maybe<void>
struct _ast7994; // CXXMethodDecl IsJust
struct _ast7995; // CXXMethodDecl operator==
struct _ast7996; // ParmVarDecl other
struct _ast7997; // LValueReferenceType const v8::Maybe<void> &
struct _ast7998; // FunctionProtoType bool (const v8::Maybe<void> &) const
struct _ast7999; // CXXMethodDecl operator!=
struct _ast8000; // ParmVarDecl other
struct _ast8001; // CXXConstructorDecl Maybe
struct _ast8002; // ParmVarDecl
struct _ast8003; // FunctionProtoType void (const v8::Maybe<void> &)
struct _ast8004; // PointerType v8::Maybe<void> *
struct _ast8005; // CXXConstructorDecl Maybe
struct _ast8006; // ParmVarDecl
struct _ast8007; // RValueReferenceType v8::Maybe<void> &&
struct _ast8008; // FunctionProtoType void (v8::Maybe<void> &&) noexcept
struct _ast8009; // CXXDestructorDecl ~Maybe
struct _ast8010; // FunctionDecl JustVoid
struct _ast8011; // FunctionProtoType Maybe<void> ()
struct _ast8012; // TemplateSpecializationType Maybe<void>
struct _ast8013; // CXXRecordDecl TryCatch
struct _ast8014; // RecordType v8::TryCatch
struct _ast8015; // FieldDecl isolate_
struct _ast8016; // FieldDecl next_
struct _ast8017; // PointerType v8::TryCatch *
struct _ast8018; // FieldDecl exception_
struct _ast8019; // FieldDecl message_obj_
struct _ast8020; // FieldDecl js_stack_comparable_address_
struct _ast8021; // FieldDecl is_verbose_
struct _ast8022; // FieldDecl can_continue_
struct _ast8023; // FieldDecl capture_message_
struct _ast8024; // FieldDecl rethrow_
struct _ast8025; // FieldDecl has_terminated_
struct _ast8026; // CXXRecordDecl TryCatch
struct _ast8027; // CXXConstructorDecl TryCatch
struct _ast8028; // ParmVarDecl isolate
struct _ast8029; // CXXDestructorDecl ~TryCatch
struct _ast8030; // FunctionProtoType void ()
struct _ast8031; // CXXMethodDecl HasCaught
struct _ast8032; // PointerType const v8::TryCatch *
struct _ast8033; // RecordType const v8::TryCatch
struct _ast8034; // CXXMethodDecl CanContinue
struct _ast8035; // CXXMethodDecl HasTerminated
struct _ast8036; // CXXMethodDecl ReThrow
struct _ast8037; // FunctionProtoType Local<v8::Value> ()
struct _ast8038; // TemplateSpecializationType Local<v8::Value>
struct _ast8039; // CXXMethodDecl Exception
struct _ast8040; // FunctionProtoType Local<v8::Value> () const
struct _ast8041; // TemplateSpecializationType Local<v8::Value>
struct _ast8042; // CXXMethodDecl StackTrace
struct _ast8043; // ParmVarDecl context
struct _ast8044; // TemplateSpecializationType Local<v8::Context>
struct _ast8045; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
                 // const
struct _ast8046; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8047; // CXXMethodDecl Message
struct _ast8048; // FunctionProtoType Local<v8::Message> () const
struct _ast8049; // TemplateSpecializationType Local<v8::Message>
struct _ast8050; // CXXMethodDecl Reset
struct _ast8051; // CXXMethodDecl SetVerbose
struct _ast8052; // ParmVarDecl value
struct _ast8053; // CXXMethodDecl IsVerbose
struct _ast8054; // CXXMethodDecl SetCaptureMessage
struct _ast8055; // ParmVarDecl value
struct _ast8056; // CXXMethodDecl JSStackComparableAddress
struct _ast8057; // ParmVarDecl handler
struct _ast8058; // FunctionProtoType void *(v8::TryCatch *)
struct _ast8059; // CXXConstructorDecl TryCatch
struct _ast8060; // ParmVarDecl
struct _ast8061; // LValueReferenceType const v8::TryCatch &
struct _ast8062; // FunctionProtoType void (const v8::TryCatch &)
struct _ast8063; // CXXMethodDecl operator=
struct _ast8064; // ParmVarDecl
struct _ast8065; // CXXRecordDecl ExtensionConfiguration
struct _ast8066; // RecordType v8::ExtensionConfiguration
struct _ast8067; // FieldDecl name_count_
struct _ast8068; // FieldDecl names_
struct _ast8069; // CXXRecordDecl ExtensionConfiguration
struct _ast8070; // CXXConstructorDecl ExtensionConfiguration
struct _ast8071; // PointerType v8::ExtensionConfiguration *
struct _ast8072; // CXXConstructorDecl ExtensionConfiguration
struct _ast8073; // ParmVarDecl name_count
struct _ast8074; // ParmVarDecl names
struct _ast8075; // DecayedType const char **
struct _ast8076; // FunctionProtoType void (int, const char **)
struct _ast8077; // CXXMethodDecl begin
struct _ast8078; // PointerType const v8::ExtensionConfiguration *
struct _ast8079; // RecordType const v8::ExtensionConfiguration
struct _ast8080; // CXXMethodDecl end
struct _ast8081; // CXXRecordDecl Context
struct _ast8082; // CXXMethodDecl Global
struct _ast8083; // FunctionProtoType Local<v8::Object> ()
struct _ast8084; // TemplateSpecializationType Local<v8::Object>
struct _ast8085; // PointerType v8::Context *
struct _ast8086; // CXXMethodDecl DetachGlobal
struct _ast8087; // CXXMethodDecl New
struct _ast8088; // ParmVarDecl isolate
struct _ast8089; // ParmVarDecl extensions
struct _ast8090; // ParmVarDecl global_template
struct _ast8091; // TemplateSpecializationType MaybeLocal<v8::ObjectTemplate>
struct _ast8092; // ParmVarDecl global_object
struct _ast8093; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8094; // ParmVarDecl internal_fields_deserializer
struct _ast8095; // ParmVarDecl microtask_queue
struct _ast8096; // FunctionProtoType Local<v8::Context> (v8::Isolate *,
                 // v8::ExtensionConfiguration *,
                 // MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>,
                 // v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _ast8097; // TemplateSpecializationType Local<v8::Context>
struct _ast8098; // CXXMethodDecl FromSnapshot
struct _ast8099; // ParmVarDecl isolate
struct _ast8100; // ParmVarDecl context_snapshot_index
struct _ast8101; // ParmVarDecl embedder_fields_deserializer
struct _ast8102; // ParmVarDecl extensions
struct _ast8103; // ParmVarDecl global_object
struct _ast8104; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8105; // ParmVarDecl microtask_queue
struct _ast8106; // FunctionProtoType MaybeLocal<v8::Context> (v8::Isolate *,
                 // size_t, v8::DeserializeInternalFieldsCallback,
                 // v8::ExtensionConfiguration *, MaybeLocal<v8::Value>,
                 // v8::MicrotaskQueue *)
struct _ast8107; // TemplateSpecializationType MaybeLocal<v8::Context>
struct _ast8108; // CXXMethodDecl NewRemoteContext
struct _ast8109; // ParmVarDecl isolate
struct _ast8110; // ParmVarDecl global_template
struct _ast8111; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast8112; // ParmVarDecl global_object
struct _ast8113; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8114; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *,
                 // Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ast8115; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast8116; // CXXMethodDecl SetSecurityToken
struct _ast8117; // ParmVarDecl token
struct _ast8118; // TemplateSpecializationType Local<v8::Value>
struct _ast8119; // FunctionProtoType void (Local<v8::Value>)
struct _ast8120; // CXXMethodDecl UseDefaultSecurityToken
struct _ast8121; // CXXMethodDecl GetSecurityToken
struct _ast8122; // FunctionProtoType Local<v8::Value> ()
struct _ast8123; // TemplateSpecializationType Local<v8::Value>
struct _ast8124; // CXXMethodDecl Enter
struct _ast8125; // CXXMethodDecl Exit
struct _ast8126; // CXXMethodDecl GetIsolate
struct _ast8127; // EnumDecl EmbedderDataFields
struct _ast8128; // EnumConstantDecl kDebugIdIndex
struct _ast8129; // CXXMethodDecl GetNumberOfEmbedderDataFields
struct _ast8130; // CXXMethodDecl GetEmbedderData
struct _ast8131; // ParmVarDecl index
struct _ast8132; // FunctionProtoType Local<v8::Value> (int)
struct _ast8133; // TemplateSpecializationType Local<v8::Value>
struct _ast8134; // CXXMethodDecl GetExtrasBindingObject
struct _ast8135; // FunctionProtoType Local<v8::Object> ()
struct _ast8136; // TemplateSpecializationType Local<v8::Object>
struct _ast8137; // CXXMethodDecl SetEmbedderData
struct _ast8138; // ParmVarDecl index
struct _ast8139; // ParmVarDecl value
struct _ast8140; // TemplateSpecializationType Local<v8::Value>
struct _ast8141; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast8142; // CXXMethodDecl GetAlignedPointerFromEmbedderData
struct _ast8143; // ParmVarDecl index
struct _ast8144; // CXXMethodDecl SetAlignedPointerInEmbedderData
struct _ast8145; // ParmVarDecl index
struct _ast8146; // ParmVarDecl value
struct _ast8147; // CXXMethodDecl AllowCodeGenerationFromStrings
struct _ast8148; // ParmVarDecl allow
struct _ast8149; // CXXMethodDecl IsCodeGenerationFromStringsAllowed
struct _ast8150; // CXXMethodDecl SetErrorMessageForCodeGenerationFromStrings
struct _ast8151; // ParmVarDecl message
struct _ast8152; // TemplateSpecializationType Local<v8::String>
struct _ast8153; // FunctionProtoType void (Local<v8::String>)
struct _ast8154; // FunctionTemplateDecl GetDataFromSnapshotOnce
struct _ast8155; // TemplateTypeParmDecl T
struct _ast8156; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast8157; // ParmVarDecl index
struct _ast8158; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast8159; // TemplateSpecializationType MaybeLocal<T>
struct _ast8160; // TypedefDecl AbortScriptExecutionCallback
struct _ast8161; // TypedefType v8::Context::AbortScriptExecutionCallback
struct _ast8162; // CXXMethodDecl SetAbortScriptExecution
struct _ast8163; // ParmVarDecl callback
struct _ast8164; // FunctionProtoType void
                 // (v8::Context::AbortScriptExecutionCallback)
struct _ast8165; // CXXRecordDecl Scope
struct _ast8166; // RecordType v8::Context::Scope
struct _ast8167; // FieldDecl context_
struct _ast8168; // TemplateSpecializationType Local<v8::Context>
struct _ast8169; // CXXRecordDecl Scope
struct _ast8170; // CXXConstructorDecl Scope
struct _ast8171; // ParmVarDecl context
struct _ast8172; // TemplateSpecializationType Local<v8::Context>
struct _ast8173; // FunctionProtoType void (Local<v8::Context>)
struct _ast8174; // PointerType v8::Context::Scope *
struct _ast8175; // CXXDestructorDecl ~Scope
struct _ast8176; // CXXRecordDecl BackupIncumbentScope
struct _ast8177; // RecordType v8::Context::BackupIncumbentScope
struct _ast8178; // FieldDecl backup_incumbent_context_
struct _ast8179; // TemplateSpecializationType Local<v8::Context>
struct _ast8180; // FieldDecl js_stack_comparable_address_
struct _ast8181; // FieldDecl prev_
struct _ast8182; // PointerType const v8::Context::BackupIncumbentScope *
struct _ast8183; // RecordType const v8::Context::BackupIncumbentScope
struct _ast8184; // CXXRecordDecl BackupIncumbentScope
struct _ast8185; // CXXConstructorDecl BackupIncumbentScope
struct _ast8186; // ParmVarDecl backup_incumbent_context
struct _ast8187; // TemplateSpecializationType Local<v8::Context>
struct _ast8188; // FunctionProtoType void (Local<v8::Context>)
struct _ast8189; // PointerType v8::Context::BackupIncumbentScope *
struct _ast8190; // CXXDestructorDecl ~BackupIncumbentScope
struct _ast8191; // FunctionProtoType void ()
struct _ast8192; // CXXMethodDecl JSStackComparableAddress
struct _ast8193; // FunctionProtoType uintptr_t () const
struct _ast8194; // CXXRecordDecl Unlocker
struct _ast8195; // RecordType v8::Unlocker
struct _ast8196; // FieldDecl isolate_
struct _ast8197; // CXXRecordDecl Unlocker
struct _ast8198; // CXXConstructorDecl Unlocker
struct _ast8199; // ParmVarDecl isolate
struct _ast8200; // PointerType v8::Unlocker *
struct _ast8201; // CXXDestructorDecl ~Unlocker
struct _ast8202; // FunctionProtoType void ()
struct _ast8203; // CXXRecordDecl Locker
struct _ast8204; // RecordType v8::Locker
struct _ast8205; // FieldDecl has_lock_
struct _ast8206; // FieldDecl top_level_
struct _ast8207; // FieldDecl isolate_
struct _ast8208; // CXXRecordDecl Locker
struct _ast8209; // CXXConstructorDecl Locker
struct _ast8210; // ParmVarDecl isolate
struct _ast8211; // PointerType v8::Locker *
struct _ast8212; // CXXDestructorDecl ~Locker
struct _ast8213; // FunctionProtoType void ()
struct _ast8214; // CXXMethodDecl IsLocked
struct _ast8215; // ParmVarDecl isolate
struct _ast8216; // CXXMethodDecl IsActive
struct _ast8217; // CXXConstructorDecl Locker
struct _ast8218; // ParmVarDecl
struct _ast8219; // LValueReferenceType const v8::Locker &
struct _ast8220; // RecordType const v8::Locker
struct _ast8221; // FunctionProtoType void (const v8::Locker &)
struct _ast8222; // CXXMethodDecl operator=
struct _ast8223; // ParmVarDecl
struct _ast8224; // CXXRecordDecl Unwinder
struct _ast8225; // RecordType v8::Unwinder
struct _ast8226; // CXXRecordDecl Unwinder
struct _ast8227; // CXXMethodDecl TryUnwindV8Frames
struct _ast8228; // ParmVarDecl unwind_state
struct _ast8229; // LValueReferenceType const v8::UnwindState &
struct _ast8230; // RecordType const v8::UnwindState
struct _ast8231; // ParmVarDecl register_state
struct _ast8232; // ParmVarDecl stack_base
struct _ast8233; // FunctionProtoType bool (const v8::UnwindState &,
                 // v8::RegisterState *, const void *)
struct _ast8234; // CXXMethodDecl PCIsInV8
struct _ast8235; // ParmVarDecl unwind_state
struct _ast8236; // ParmVarDecl pc
struct _ast8237; // FunctionProtoType bool (const v8::UnwindState &, void *)
struct _ast8238; // ParmVarDecl isolate
struct _ast8239; // ParmVarDecl that
struct _ast8240; // TemplateSpecializationType Local<T>
struct _ast8241; // ParmVarDecl isolate
struct _ast8242; // ParmVarDecl that
struct _ast8243; // LValueReferenceType const PersistentBase<T> &
struct _ast8244; // TemplateSpecializationType const PersistentBase<T>
struct _ast8245; // TemplateSpecializationType PersistentBase<T>
struct _ast8246; // ParmVarDecl isolate
struct _ast8247; // ParmVarDecl that
struct _ast8248; // LValueReferenceType const TracedGlobal<T> &
struct _ast8249; // TemplateSpecializationType const TracedGlobal<T>
struct _ast8250; // TemplateSpecializationType TracedGlobal<T>
struct _ast8251; // TemplateTypeParmDecl S
struct _ast8252; // ParmVarDecl isolate
struct _ast8253; // ParmVarDecl handle
struct _ast8254; // TemplateSpecializationType Local<S>
struct _ast8255; // ParmVarDecl isolate
struct _ast8256; // ParmVarDecl index
struct _ast8257; // TemplateTypeParmDecl S
struct _ast8258; // ParmVarDecl isolate
struct _ast8259; // ParmVarDecl other
struct _ast8260; // LValueReferenceType const Local<S> &
struct _ast8261; // TemplateSpecializationType const Local<S>
struct _ast8262; // TemplateSpecializationType Local<S>
struct _ast8263; // TemplateTypeParmDecl S
struct _ast8264; // ParmVarDecl isolate
struct _ast8265; // ParmVarDecl other
struct _ast8266; // LValueReferenceType const PersistentBase<S> &
struct _ast8267; // TemplateSpecializationType const PersistentBase<S>
struct _ast8268; // TemplateSpecializationType PersistentBase<S>
struct _ast8269; // TemplateTypeParmDecl P
struct _ast8270; // ParmVarDecl parameter
struct _ast8271; // PointerType P *
struct _ast8272; // TemplateTypeParmType P
struct _ast8273; // ParmVarDecl callback
struct _ast8274; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast8275; // ParmVarDecl type
struct _ast8276; // TemplateTypeParmDecl P
struct _ast8277; // ParmVarDecl label
struct _ast8278; // ParmVarDecl class_id
struct _ast8279; // ParmVarDecl other
struct _ast8280; // TemplateTypeParmDecl S
struct _ast8281; // ParmVarDecl rhs
struct _ast8282; // RValueReferenceType Global<S> &&
struct _ast8283; // TemplateSpecializationType Global<S>
struct _ast8284; // TemplateTypeParmDecl S
struct _ast8285; // ParmVarDecl isolate
struct _ast8286; // ParmVarDecl other
struct _ast8287; // LValueReferenceType const Local<S> &
struct _ast8288; // TemplateSpecializationType const Local<S>
struct _ast8289; // TemplateSpecializationType Local<S>
struct _ast8290; // ParmVarDecl other
struct _ast8291; // TemplateTypeParmDecl S
struct _ast8292; // ParmVarDecl rhs
struct _ast8293; // RValueReferenceType TracedGlobal<S> &&
struct _ast8294; // TemplateSpecializationType TracedGlobal<S>
struct _ast8295; // ParmVarDecl class_id
struct _ast8296; // ParmVarDecl parameter
struct _ast8297; // ParmVarDecl callback
struct _ast8298; // ElaboratedType typename WeakCallbackInfo<void>::Callback
struct _ast8299; // TemplateTypeParmDecl S
struct _ast8300; // ParmVarDecl handle
struct _ast8301; // LValueReferenceType const Global<S> &
struct _ast8302; // TemplateSpecializationType const Global<S>
struct _ast8303; // TemplateSpecializationType Global<S>
struct _ast8304; // TemplateTypeParmDecl S
struct _ast8305; // ParmVarDecl handle
struct _ast8306; // LValueReferenceType const TracedGlobal<S> &
struct _ast8307; // TemplateSpecializationType const TracedGlobal<S>
struct _ast8308; // TemplateSpecializationType TracedGlobal<S>
struct _ast8309; // TemplateTypeParmDecl S
struct _ast8310; // ParmVarDecl handle
struct _ast8311; // TemplateSpecializationType const Local<S>
struct _ast8312; // TemplateSpecializationType Local<S>
struct _ast8313; // ParmVarDecl i
struct _ast8314; // ParmVarDecl i
struct _ast8315; // ParmVarDecl i
struct _ast8316; // ParmVarDecl value
struct _ast8317; // TemplateTypeParmDecl S
struct _ast8318; // ParmVarDecl whatever
struct _ast8319; // PointerType S *
struct _ast8320; // TemplateTypeParmType S
struct _ast8321; // ParmVarDecl implicit_args
struct _ast8322; // ParmVarDecl values
struct _ast8323; // ParmVarDecl length
struct _ast8324; // ParmVarDecl i
struct _ast8325; // ParmVarDecl resource_name
struct _ast8326; // TemplateSpecializationType Local<v8::Value>
struct _ast8327; // ParmVarDecl resource_line_offset
struct _ast8328; // TemplateSpecializationType Local<v8::Integer>
struct _ast8329; // ParmVarDecl resource_column_offset
struct _ast8330; // TemplateSpecializationType Local<v8::Integer>
struct _ast8331; // ParmVarDecl resource_is_shared_cross_origin
struct _ast8332; // TemplateSpecializationType Local<v8::Boolean>
struct _ast8333; // ParmVarDecl script_id
struct _ast8334; // TemplateSpecializationType Local<v8::Integer>
struct _ast8335; // ParmVarDecl source_map_url
struct _ast8336; // TemplateSpecializationType Local<v8::Value>
struct _ast8337; // ParmVarDecl resource_is_opaque
struct _ast8338; // TemplateSpecializationType Local<v8::Boolean>
struct _ast8339; // ParmVarDecl is_wasm
struct _ast8340; // TemplateSpecializationType Local<v8::Boolean>
struct _ast8341; // ParmVarDecl is_module
struct _ast8342; // TemplateSpecializationType Local<v8::Boolean>
struct _ast8343; // ParmVarDecl host_defined_options
struct _ast8344; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast8345; // ParmVarDecl string
struct _ast8346; // TemplateSpecializationType Local<v8::String>
struct _ast8347; // ParmVarDecl origin
struct _ast8348; // ParmVarDecl data
struct _ast8349; // ParmVarDecl string
struct _ast8350; // TemplateSpecializationType Local<v8::String>
struct _ast8351; // ParmVarDecl data
struct _ast8352; // ParmVarDecl isolate
struct _ast8353; // ParmVarDecl value
struct _ast8354; // ParmVarDecl isolate
struct _ast8355; // ParmVarDecl name
struct _ast8356; // ParmVarDecl value
struct _ast8357; // TemplateSpecializationType Local<v8::Data>
struct _ast8358; // ParmVarDecl data
struct _ast8359; // ParmVarDecl data
struct _ast8360; // ParmVarDecl data
struct _ast8361; // ParmVarDecl data
struct _ast8362; // ParmVarDecl index
struct _ast8363; // ParmVarDecl index
struct _ast8364; // ParmVarDecl value
struct _ast8365; // ParmVarDecl isolate
struct _ast8366; // ParmVarDecl encoding_out
struct _ast8367; // PointerType String::Encoding *
struct _ast8368; // ElaboratedType String::Encoding
struct _ast8369; // TemplateTypeParmDecl T
struct _ast8370; // ParmVarDecl value
struct _ast8371; // PointerType T *
struct _ast8372; // TemplateTypeParmType T
struct _ast8373; // ParmVarDecl value
struct _ast8374; // ParmVarDecl value
struct _ast8375; // ParmVarDecl value
struct _ast8376; // ParmVarDecl data
struct _ast8377; // ParmVarDecl value
struct _ast8378; // ParmVarDecl value
struct _ast8379; // ParmVarDecl value
struct _ast8380; // ParmVarDecl value
struct _ast8381; // ParmVarDecl value
struct _ast8382; // ParmVarDecl value
struct _ast8383; // ParmVarDecl value
struct _ast8384; // ParmVarDecl value
struct _ast8385; // ParmVarDecl value
struct _ast8386; // ParmVarDecl value
struct _ast8387; // ParmVarDecl value
struct _ast8388; // ParmVarDecl value
struct _ast8389; // ParmVarDecl value
struct _ast8390; // ParmVarDecl value
struct _ast8391; // ParmVarDecl value
struct _ast8392; // ParmVarDecl value
struct _ast8393; // ParmVarDecl value
struct _ast8394; // ParmVarDecl value
struct _ast8395; // ParmVarDecl value
struct _ast8396; // ParmVarDecl value
struct _ast8397; // ParmVarDecl value
struct _ast8398; // ParmVarDecl value
struct _ast8399; // ParmVarDecl value
struct _ast8400; // ParmVarDecl value
struct _ast8401; // ParmVarDecl value
struct _ast8402; // ParmVarDecl value
struct _ast8403; // ParmVarDecl value
struct _ast8404; // ParmVarDecl value
struct _ast8405; // ParmVarDecl value
struct _ast8406; // ParmVarDecl value
struct _ast8407; // ParmVarDecl value
struct _ast8408; // ParmVarDecl value
struct _ast8409; // ParmVarDecl value
struct _ast8410; // ParmVarDecl value
struct _ast8411; // ParmVarDecl value
struct _ast8412; // ParmVarDecl value
struct _ast8413; // ParmVarDecl value
struct _ast8414; // ParmVarDecl value
struct _ast8415; // ParmVarDecl isolate
struct _ast8416; // ParmVarDecl isolate
struct _ast8417; // ParmVarDecl isolate
struct _ast8418; // ParmVarDecl isolate
struct _ast8419; // ParmVarDecl slot
struct _ast8420; // ParmVarDecl data
struct _ast8421; // ParmVarDecl slot
struct _ast8422; // TemplateTypeParmDecl T
struct _ast8423; // ParmVarDecl index
struct _ast8424; // ParmVarDecl change_in_bytes
struct _ast8425; // ParmVarDecl index
struct _ast8426; // ParmVarDecl index
struct _ast8427; // TemplateTypeParmDecl T
struct _ast8428; // ParmVarDecl index
struct _ast8429; // TemplateTypeParmDecl T
struct _ast8430; // ParmVarDecl context
struct _ast8431; // TemplateSpecializationType Local<v8::Context>
struct _ast8432; // ParmVarDecl object
struct _ast8433; // TemplateSpecializationType Local<T>
struct _ast8434; // TemplateTypeParmDecl T
struct _ast8435; // ParmVarDecl object
struct _ast8436; // TemplateSpecializationType Local<T>

struct _ast1
    : DeclContext<Pack<_ast3, _ast5, _ast7, _ast2841, _ast7093, _ast7829>>,
      NamespaceDecl<NamedDeclName<Decl<_ast2>, _str1>> {}; // NamespaceDecl v8
struct _ast2 : DeclContext<Pack<_ast1>> {}; // TranslationUnitDecl
struct _ast3
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str2>, _ast4>, None>,
          None> {}; // CXXRecordDecl Context
struct _ast4 : StructOrClassRecordType<RecordType<_ast3>> {
}; // RecordType v8::Context
struct _ast5
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str3>, _ast6>, None>,
          None> {}; // CXXRecordDecl Data
struct _ast6 : StructOrClassRecordType<RecordType<_ast5>> {
}; // RecordType v8::Data
struct _ast7
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str4>, _ast8>, None>,
          None> {}; // CXXRecordDecl Isolate
struct _ast8 : StructOrClassRecordType<RecordType<_ast7>> {
}; // RecordType v8::Isolate
struct _ast9
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str5>, _ast10>, None>,
          None> {}; // CXXRecordDecl AccessorSignature
struct _ast10 : StructOrClassRecordType<RecordType<_ast9>> {
}; // RecordType v8::AccessorSignature
struct _ast11
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str6>, _ast12>, None>,
          None> {}; // CXXRecordDecl Array
struct _ast12 : StructOrClassRecordType<RecordType<_ast11>> {
}; // RecordType v8::Array
struct _ast13
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str7>, _ast14>, None>,
          None> {}; // CXXRecordDecl ArrayBuffer
struct _ast14 : StructOrClassRecordType<RecordType<_ast13>> {
}; // RecordType v8::ArrayBuffer
struct _ast15
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str8>, _ast16>, None>,
          None> {}; // CXXRecordDecl BigInt
struct _ast16 : StructOrClassRecordType<RecordType<_ast15>> {
}; // RecordType v8::BigInt
struct _ast17
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str9>, _ast18>, None>,
          None> {}; // CXXRecordDecl BigIntObject
struct _ast18 : StructOrClassRecordType<RecordType<_ast17>> {
}; // RecordType v8::BigIntObject
struct _ast19
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str10>, _ast20>,
                     None>,
          None> {}; // CXXRecordDecl Boolean
struct _ast20 : StructOrClassRecordType<RecordType<_ast19>> {
}; // RecordType v8::Boolean
struct _ast21
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str11>, _ast22>,
                     None>,
          None> {}; // CXXRecordDecl BooleanObject
struct _ast22 : StructOrClassRecordType<RecordType<_ast21>> {
}; // RecordType v8::BooleanObject
struct _ast23
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str12>, _ast24>,
                     None>,
          None> {}; // CXXRecordDecl Date
struct _ast24 : StructOrClassRecordType<RecordType<_ast23>> {
}; // RecordType v8::Date
struct _ast25
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str13>, _ast26>,
                     None>,
          None> {}; // CXXRecordDecl External
struct _ast26 : StructOrClassRecordType<RecordType<_ast25>> {
}; // RecordType v8::External
struct _ast27
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str14>, _ast28>,
                     None>,
          None> {}; // CXXRecordDecl Function
struct _ast28 : StructOrClassRecordType<RecordType<_ast27>> {
}; // RecordType v8::Function
struct _ast29
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str15>, _ast30>,
                     None>,
          None> {}; // CXXRecordDecl FunctionTemplate
struct _ast30 : StructOrClassRecordType<RecordType<_ast29>> {
}; // RecordType v8::FunctionTemplate
struct _ast31
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str16>, _ast32>,
                     None>,
          None> {}; // CXXRecordDecl HeapProfiler
struct _ast32 : StructOrClassRecordType<RecordType<_ast31>> {
}; // RecordType v8::HeapProfiler
struct _ast33
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str17>, _ast34>,
                     None>,
          None> {}; // CXXRecordDecl ImplementationUtilities
struct _ast34 : StructOrClassRecordType<RecordType<_ast33>> {
}; // RecordType v8::ImplementationUtilities
struct _ast35
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str18>, _ast36>,
                     None>,
          None> {}; // CXXRecordDecl Int32
struct _ast36 : StructOrClassRecordType<RecordType<_ast35>> {
}; // RecordType v8::Int32
struct _ast37
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str19>, _ast38>,
                     None>,
          None> {}; // CXXRecordDecl Integer
struct _ast38 : StructOrClassRecordType<RecordType<_ast37>> {
}; // RecordType v8::Integer
struct _ast41
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str20>, _ast42>,
                     None>,
          None> {}; // CXXRecordDecl Maybe
struct _ast49
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str21>, _ast50>,
                     None>,
          None> {}; // CXXRecordDecl MicrotaskQueue
struct _ast50 : StructOrClassRecordType<RecordType<_ast49>> {
}; // RecordType v8::MicrotaskQueue
struct _ast51
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str22>, _ast52>,
                     None>,
          None> {}; // CXXRecordDecl Name
struct _ast52 : StructOrClassRecordType<RecordType<_ast51>> {
}; // RecordType v8::Name
struct _ast53
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str23>, _ast54>,
                     None>,
          None> {}; // CXXRecordDecl Number
struct _ast54 : StructOrClassRecordType<RecordType<_ast53>> {
}; // RecordType v8::Number
struct _ast55
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str24>, _ast56>,
                     None>,
          None> {}; // CXXRecordDecl NumberObject
struct _ast56 : StructOrClassRecordType<RecordType<_ast55>> {
}; // RecordType v8::NumberObject
struct _ast57
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str25>, _ast58>,
                     None>,
          None> {}; // CXXRecordDecl Object
struct _ast58 : StructOrClassRecordType<RecordType<_ast57>> {
}; // RecordType v8::Object
struct _ast59
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str26>, _ast60>,
                     None>,
          None> {}; // CXXRecordDecl ObjectOperationDescriptor
struct _ast60 : StructOrClassRecordType<RecordType<_ast59>> {
}; // RecordType v8::ObjectOperationDescriptor
struct _ast61
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str27>, _ast62>,
                     None>,
          None> {}; // CXXRecordDecl ObjectTemplate
struct _ast62 : StructOrClassRecordType<RecordType<_ast61>> {
}; // RecordType v8::ObjectTemplate
struct _ast63
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str28>, _ast64>,
                     None>,
          None> {}; // CXXRecordDecl Platform
struct _ast64 : StructOrClassRecordType<RecordType<_ast63>> {
}; // RecordType v8::Platform
struct _ast65
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str29>, _ast66>,
                     None>,
          None> {}; // CXXRecordDecl Primitive
struct _ast66 : StructOrClassRecordType<RecordType<_ast65>> {
}; // RecordType v8::Primitive
struct _ast67
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str30>, _ast68>,
                     None>,
          None> {}; // CXXRecordDecl Promise
struct _ast68 : StructOrClassRecordType<RecordType<_ast67>> {
}; // RecordType v8::Promise
struct _ast69
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str31>, _ast70>,
                     None>,
          None> {}; // CXXRecordDecl PropertyDescriptor
struct _ast70 : StructOrClassRecordType<RecordType<_ast69>> {
}; // RecordType v8::PropertyDescriptor
struct _ast71
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str32>, _ast72>,
                     None>,
          None> {}; // CXXRecordDecl Proxy
struct _ast72 : StructOrClassRecordType<RecordType<_ast71>> {
}; // RecordType v8::Proxy
struct _ast73
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str33>, _ast74>,
                     None>,
          None> {}; // CXXRecordDecl RawOperationDescriptor
struct _ast74 : StructOrClassRecordType<RecordType<_ast73>> {
}; // RecordType v8::RawOperationDescriptor
struct _ast75
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str34>, _ast76>,
                     None>,
          None> {}; // CXXRecordDecl Script
struct _ast76 : StructOrClassRecordType<RecordType<_ast75>> {
}; // RecordType v8::Script
struct _ast77
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str35>, _ast78>,
                     None>,
          None> {}; // CXXRecordDecl SharedArrayBuffer
struct _ast78 : StructOrClassRecordType<RecordType<_ast77>> {
}; // RecordType v8::SharedArrayBuffer
struct _ast79
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str36>, _ast80>,
                     None>,
          None> {}; // CXXRecordDecl Signature
struct _ast80 : StructOrClassRecordType<RecordType<_ast79>> {
}; // RecordType v8::Signature
struct _ast81
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str37>, _ast82>,
                     None>,
          None> {}; // CXXRecordDecl StartupData
struct _ast82 : StructOrClassRecordType<RecordType<_ast81>> {
}; // RecordType v8::StartupData
struct _ast83
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str38>, _ast84>,
                     None>,
          None> {}; // CXXRecordDecl StackFrame
struct _ast84 : StructOrClassRecordType<RecordType<_ast83>> {
}; // RecordType v8::StackFrame
struct _ast85
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str39>, _ast86>,
                     None>,
          None> {}; // CXXRecordDecl StackTrace
struct _ast86 : StructOrClassRecordType<RecordType<_ast85>> {
}; // RecordType v8::StackTrace
struct _ast87
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str40>, _ast88>,
                     None>,
          None> {}; // CXXRecordDecl String
struct _ast88 : StructOrClassRecordType<RecordType<_ast87>> {
}; // RecordType v8::String
struct _ast89
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str41>, _ast90>,
                     None>,
          None> {}; // CXXRecordDecl StringObject
struct _ast90 : StructOrClassRecordType<RecordType<_ast89>> {
}; // RecordType v8::StringObject
struct _ast91
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str42>, _ast92>,
                     None>,
          None> {}; // CXXRecordDecl Symbol
struct _ast92 : StructOrClassRecordType<RecordType<_ast91>> {
}; // RecordType v8::Symbol
struct _ast93
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str43>, _ast94>,
                     None>,
          None> {}; // CXXRecordDecl SymbolObject
struct _ast94 : StructOrClassRecordType<RecordType<_ast93>> {
}; // RecordType v8::SymbolObject
struct _ast95
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str44>, _ast96>,
                     None>,
          None> {}; // CXXRecordDecl PrimitiveArray
struct _ast96 : StructOrClassRecordType<RecordType<_ast95>> {
}; // RecordType v8::PrimitiveArray
struct _ast97
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str45>, _ast98>,
                     None>,
          None> {}; // CXXRecordDecl Private
struct _ast98 : StructOrClassRecordType<RecordType<_ast97>> {
}; // RecordType v8::Private
struct _ast99
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str46>, _ast100>,
                     None>,
          None> {}; // CXXRecordDecl Uint32
struct _ast100 : StructOrClassRecordType<RecordType<_ast99>> {
}; // RecordType v8::Uint32
struct _ast101
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str47>, _ast102>,
                     None>,
          None> {}; // CXXRecordDecl Utils
struct _ast102 : StructOrClassRecordType<RecordType<_ast101>> {
}; // RecordType v8::Utils
struct _ast103
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str48>, _ast104>,
                     None>,
          None> {}; // CXXRecordDecl Value
struct _ast104 : StructOrClassRecordType<RecordType<_ast103>> {
}; // RecordType v8::Value
struct _ast105
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str49>, _ast106>,
                     None>,
          None> {}; // CXXRecordDecl WasmModuleObject
struct _ast106 : StructOrClassRecordType<RecordType<_ast105>> {
}; // RecordType v8::WasmModuleObject
struct _ast109
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str50>, _ast110>,
                     None>,
          None> {}; // CXXRecordDecl Local
struct _ast111 : DeclContext<Pack<_ast112,
                                  _ast119,
                                  _ast127,
                                  _ast132,
                                  _ast133,
                                  _ast137,
                                  _ast140,
                                  _ast148,
                                  _ast156,
                                  _ast164,
                                  _ast172,
                                  _ast179,
                                  _ast182,
                                  _ast189,
                                  _ast197,
                                  _ast205,
                                  _ast209,
                                  _ast213,
                                  _ast123>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast112
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str50>, _ast113>>,
              Pack<>>>,
          _ast115>> {}; // CXXConstructorDecl Local
struct _ast113 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
};                            // FunctionProtoType void ()
struct _ast114 : VoidType {}; // BuiltinType void
struct _ast115 : PointerType<_ast116> {
}; // PointerType v8::Local<v8::Primitive> *
struct _ast116 : StructOrClassRecordType<RecordType<_ast111>> {
}; // RecordType v8::Local<v8::Primitive>
struct _ast119
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str50>, _ast122>>,
              Pack<_ast120>>>,
          _ast115>>,
      DeclContext<Pack<_ast120>> {}; // CXXConstructorDecl Local
struct _ast120
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast119>, _str51>, _ast121>>>> {
}; // ParmVarDecl that
struct _ast122 : FunctionProtoType<_ast114, Pack<_ast121>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast123
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str50>, _ast126>>,
              Pack<_ast124>>>,
          _ast115>>,
      DeclContext<Pack<_ast124>> {}; // CXXConstructorDecl Local
struct _ast124
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast123>, _str51>, _ast125>>>> {
}; // ParmVarDecl that
struct _ast126 : FunctionProtoType<_ast114, Pack<_ast125>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Primitive>)
struct _ast127
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str52>, _ast128>>,
              Pack<>>>,
          _ast130> {}; // CXXMethodDecl IsEmpty
struct _ast128 : FunctionProtoType<_ast129, Pack<>, ConstQualifiedType> {
};                            // FunctionProtoType bool () const
struct _ast129 : BoolType {}; // BuiltinType bool
struct _ast130 : PointerType<_ast131> {
}; // PointerType const v8::Local<v8::Primitive> *
struct _ast131 : ConstQualifiedType<_ast116> {
}; // RecordType const v8::Local<v8::Primitive>
struct _ast132
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str53>, _ast113>>,
              Pack<>>>,
          _ast115> {}; // CXXMethodDecl Clear
struct _ast133
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str54>, _ast134>>,
              Pack<>>>,
          _ast130> {}; // CXXMethodDecl operator->
struct _ast134 : FunctionProtoType<_ast135, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Primitive *() const
struct _ast135 : PointerType<_ast136> {}; // PointerType v8::Primitive *
struct _ast137
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str55>, _ast134>>,
              Pack<>>>,
          _ast130> {}; // CXXMethodDecl operator*
struct _ast140
    : DeclContext<Pack<_ast141>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str56>, _ast145>>,
              Pack<_ast141>>>,
          _ast130> {}; // CXXMethodDecl operator==
struct _ast141
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast140>, _str51>, _ast142>>>> {
}; // ParmVarDecl that
struct _ast142 : LValueReferenceType<ReferenceType<_ast143>> {
}; // LValueReferenceType const Local<S> &
struct _ast143 : ConstQualifiedType<_ast144> {
}; // TemplateSpecializationType const Local<S>
struct _ast145 : FunctionProtoType<_ast129, Pack<_ast142>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast148
    : DeclContext<Pack<_ast149>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str56>, _ast153>>,
              Pack<_ast149>>>,
          _ast130> {}; // CXXMethodDecl operator==
struct _ast149
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast148>, _str51>, _ast150>>>> {
}; // ParmVarDecl that
struct _ast150 : LValueReferenceType<ReferenceType<_ast151>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast151 : ConstQualifiedType<_ast152> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast153 : FunctionProtoType<_ast129, Pack<_ast150>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast156
    : DeclContext<Pack<_ast157>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str57>, _ast161>>,
              Pack<_ast157>>>,
          _ast130> {}; // CXXMethodDecl operator!=
struct _ast157
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast156>, _str51>, _ast158>>>> {
}; // ParmVarDecl that
struct _ast158 : LValueReferenceType<ReferenceType<_ast159>> {
}; // LValueReferenceType const Local<S> &
struct _ast159 : ConstQualifiedType<_ast160> {
}; // TemplateSpecializationType const Local<S>
struct _ast161 : FunctionProtoType<_ast129, Pack<_ast158>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast164
    : DeclContext<Pack<_ast165>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str57>, _ast169>>,
              Pack<_ast165>>>,
          _ast130> {}; // CXXMethodDecl operator!=
struct _ast165
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast164>, _str51>, _ast166>>>> {
}; // ParmVarDecl that
struct _ast166 : LValueReferenceType<ReferenceType<_ast167>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast167 : ConstQualifiedType<_ast168> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast169 : FunctionProtoType<_ast129, Pack<_ast166>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast172
    : DeclContext<Pack<_ast173>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast111>, _str58>, _ast175>>,
          Pack<_ast173>>> {}; // CXXMethodDecl Cast
struct _ast173
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast172>, _str51>, _ast174>>>> {
}; // ParmVarDecl that
struct _ast175 : FunctionProtoType<_ast176, Pack<_ast174>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (Local<S>)
struct _ast179
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str59>, _ast180>>,
              Pack<>>>,
          _ast130> {}; // CXXMethodDecl As
struct _ast180 : FunctionProtoType<_ast181, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast182
    : DeclContext<Pack<_ast183, _ast185>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast111>, _str61>, _ast187>>,
          Pack<_ast183, _ast185>>> {}; // CXXMethodDecl New
struct _ast183
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast182>, _str60>, _ast184>>>> {
};                                      // ParmVarDecl isolate
struct _ast184 : PointerType<_ast8> {}; // PointerType v8::Isolate *
struct _ast185
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast182>, _str51>, _ast186>>>> {
}; // ParmVarDecl that
struct _ast187
    : FunctionProtoType<_ast188, Pack<_ast184, _ast186>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *,
   // Local<v8::Primitive>)
struct _ast189
    : DeclContext<Pack<_ast190, _ast191>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast111>, _str61>, _ast195>>,
          Pack<_ast190, _ast191>>> {}; // CXXMethodDecl New
struct _ast190
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast189>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast191
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast189>, _str51>, _ast192>>>> {
}; // ParmVarDecl that
struct _ast192 : LValueReferenceType<ReferenceType<_ast193>> {
}; // LValueReferenceType const PersistentBase<v8::Primitive> &
struct _ast193 : ConstQualifiedType<_ast194> {
}; // TemplateSpecializationType const PersistentBase<v8::Primitive>
struct _ast195
    : FunctionProtoType<_ast196, Pack<_ast184, _ast192>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const
   // PersistentBase<v8::Primitive> &)
struct _ast197
    : DeclContext<Pack<_ast198, _ast199>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast111>, _str61>, _ast203>>,
          Pack<_ast198, _ast199>>> {}; // CXXMethodDecl New
struct _ast198
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast197>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast199
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast197>, _str51>, _ast200>>>> {
}; // ParmVarDecl that
struct _ast200 : LValueReferenceType<ReferenceType<_ast201>> {
}; // LValueReferenceType const TracedGlobal<v8::Primitive> &
struct _ast201 : ConstQualifiedType<_ast202> {
}; // TemplateSpecializationType const TracedGlobal<v8::Primitive>
struct _ast203
    : FunctionProtoType<_ast204, Pack<_ast184, _ast200>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const
   // TracedGlobal<v8::Primitive> &)
struct _ast205
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str50>, _ast208>>,
              Pack<_ast206>>>,
          _ast115>>,
      DeclContext<Pack<_ast206>> {}; // CXXConstructorDecl Local
struct _ast206
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast205>, _str62>, _ast207>>>> {
}; // ParmVarDecl
struct _ast207 : LValueReferenceType<ReferenceType<_ast131>> {
}; // LValueReferenceType const v8::Local<v8::Primitive> &
struct _ast208 : FunctionProtoType<_ast114, Pack<_ast207>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Primitive> &)
struct _ast209
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str50>, _ast212>>,
              Pack<_ast210>>>,
          _ast115>>,
      DeclContext<Pack<_ast210>> {}; // CXXConstructorDecl Local
struct _ast210
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast209>, _str62>, _ast211>>>> {
}; // ParmVarDecl
struct _ast211 : RValueReferenceType<ReferenceType<_ast116>> {
}; // RValueReferenceType v8::Local<v8::Primitive> &&
struct _ast212 : FunctionProtoType<_ast114, Pack<_ast211>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Primitive> &&) noexcept
struct _ast213
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast111>, _str63>, _ast214>>,
              Pack<>>>,
          _ast115>> {}; // CXXDestructorDecl ~Local
struct _ast214 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void () noexcept
struct _ast215 : DeclContext<Pack<_ast216,
                                  _ast221,
                                  _ast229,
                                  _ast232,
                                  _ast233,
                                  _ast237,
                                  _ast240,
                                  _ast248,
                                  _ast256,
                                  _ast264,
                                  _ast272,
                                  _ast279,
                                  _ast282,
                                  _ast288,
                                  _ast296,
                                  _ast304,
                                  _ast308,
                                  _ast312,
                                  _ast225>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast216
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str50>, _ast113>>,
              Pack<>>>,
          _ast217>> {}; // CXXConstructorDecl Local
struct _ast217 : PointerType<_ast218> {
}; // PointerType v8::Local<v8::Boolean> *
struct _ast218 : StructOrClassRecordType<RecordType<_ast215>> {
}; // RecordType v8::Local<v8::Boolean>
struct _ast221
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str50>, _ast224>>,
              Pack<_ast222>>>,
          _ast217>>,
      DeclContext<Pack<_ast222>> {}; // CXXConstructorDecl Local
struct _ast222
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast221>, _str51>, _ast223>>>> {
}; // ParmVarDecl that
struct _ast224 : FunctionProtoType<_ast114, Pack<_ast223>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast225
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str50>, _ast228>>,
              Pack<_ast226>>>,
          _ast217>>,
      DeclContext<Pack<_ast226>> {}; // CXXConstructorDecl Local
struct _ast226
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast225>, _str51>, _ast227>>>> {
}; // ParmVarDecl that
struct _ast228 : FunctionProtoType<_ast114, Pack<_ast227>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Boolean>)
struct _ast229
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str52>, _ast128>>,
              Pack<>>>,
          _ast230> {}; // CXXMethodDecl IsEmpty
struct _ast230 : PointerType<_ast231> {
}; // PointerType const v8::Local<v8::Boolean> *
struct _ast231 : ConstQualifiedType<_ast218> {
}; // RecordType const v8::Local<v8::Boolean>
struct _ast232
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str53>, _ast113>>,
              Pack<>>>,
          _ast217> {}; // CXXMethodDecl Clear
struct _ast233
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str54>, _ast234>>,
              Pack<>>>,
          _ast230> {}; // CXXMethodDecl operator->
struct _ast234 : FunctionProtoType<_ast235, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Boolean *() const
struct _ast235 : PointerType<_ast236> {}; // PointerType v8::Boolean *
struct _ast237
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str55>, _ast234>>,
              Pack<>>>,
          _ast230> {}; // CXXMethodDecl operator*
struct _ast240
    : DeclContext<Pack<_ast241>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str56>, _ast245>>,
              Pack<_ast241>>>,
          _ast230> {}; // CXXMethodDecl operator==
struct _ast241
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast240>, _str51>, _ast242>>>> {
}; // ParmVarDecl that
struct _ast242 : LValueReferenceType<ReferenceType<_ast243>> {
}; // LValueReferenceType const Local<S> &
struct _ast243 : ConstQualifiedType<_ast244> {
}; // TemplateSpecializationType const Local<S>
struct _ast245 : FunctionProtoType<_ast129, Pack<_ast242>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast248
    : DeclContext<Pack<_ast249>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str56>, _ast253>>,
              Pack<_ast249>>>,
          _ast230> {}; // CXXMethodDecl operator==
struct _ast249
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast248>, _str51>, _ast250>>>> {
}; // ParmVarDecl that
struct _ast250 : LValueReferenceType<ReferenceType<_ast251>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast251 : ConstQualifiedType<_ast252> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast253 : FunctionProtoType<_ast129, Pack<_ast250>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast256
    : DeclContext<Pack<_ast257>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str57>, _ast261>>,
              Pack<_ast257>>>,
          _ast230> {}; // CXXMethodDecl operator!=
struct _ast257
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast256>, _str51>, _ast258>>>> {
}; // ParmVarDecl that
struct _ast258 : LValueReferenceType<ReferenceType<_ast259>> {
}; // LValueReferenceType const Local<S> &
struct _ast259 : ConstQualifiedType<_ast260> {
}; // TemplateSpecializationType const Local<S>
struct _ast261 : FunctionProtoType<_ast129, Pack<_ast258>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast264
    : DeclContext<Pack<_ast265>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str57>, _ast269>>,
              Pack<_ast265>>>,
          _ast230> {}; // CXXMethodDecl operator!=
struct _ast265
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast264>, _str51>, _ast266>>>> {
}; // ParmVarDecl that
struct _ast266 : LValueReferenceType<ReferenceType<_ast267>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast267 : ConstQualifiedType<_ast268> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast269 : FunctionProtoType<_ast129, Pack<_ast266>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast272
    : DeclContext<Pack<_ast273>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast215>, _str58>, _ast275>>,
          Pack<_ast273>>> {}; // CXXMethodDecl Cast
struct _ast273
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast272>, _str51>, _ast274>>>> {
}; // ParmVarDecl that
struct _ast275 : FunctionProtoType<_ast276, Pack<_ast274>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (Local<S>)
struct _ast279
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str59>, _ast280>>,
              Pack<>>>,
          _ast230> {}; // CXXMethodDecl As
struct _ast280 : FunctionProtoType<_ast281, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast282
    : DeclContext<Pack<_ast283, _ast284>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast215>, _str61>, _ast286>>,
          Pack<_ast283, _ast284>>> {}; // CXXMethodDecl New
struct _ast283
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast282>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast284
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast282>, _str51>, _ast285>>>> {
}; // ParmVarDecl that
struct _ast286
    : FunctionProtoType<_ast287, Pack<_ast184, _ast285>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _ast288
    : DeclContext<Pack<_ast289, _ast290>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast215>, _str61>, _ast294>>,
          Pack<_ast289, _ast290>>> {}; // CXXMethodDecl New
struct _ast289
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast288>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast290
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast288>, _str51>, _ast291>>>> {
}; // ParmVarDecl that
struct _ast291 : LValueReferenceType<ReferenceType<_ast292>> {
}; // LValueReferenceType const PersistentBase<v8::Boolean> &
struct _ast292 : ConstQualifiedType<_ast293> {
}; // TemplateSpecializationType const PersistentBase<v8::Boolean>
struct _ast294
    : FunctionProtoType<_ast295, Pack<_ast184, _ast291>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const
   // PersistentBase<v8::Boolean> &)
struct _ast296
    : DeclContext<Pack<_ast297, _ast298>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast215>, _str61>, _ast302>>,
          Pack<_ast297, _ast298>>> {}; // CXXMethodDecl New
struct _ast297
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast296>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast298
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast296>, _str51>, _ast299>>>> {
}; // ParmVarDecl that
struct _ast299 : LValueReferenceType<ReferenceType<_ast300>> {
}; // LValueReferenceType const TracedGlobal<v8::Boolean> &
struct _ast300 : ConstQualifiedType<_ast301> {
}; // TemplateSpecializationType const TracedGlobal<v8::Boolean>
struct _ast302
    : FunctionProtoType<_ast303, Pack<_ast184, _ast299>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const
   // TracedGlobal<v8::Boolean> &)
struct _ast304
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str50>, _ast307>>,
              Pack<_ast305>>>,
          _ast217>>,
      DeclContext<Pack<_ast305>> {}; // CXXConstructorDecl Local
struct _ast305
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast304>, _str62>, _ast306>>>> {
}; // ParmVarDecl
struct _ast306 : LValueReferenceType<ReferenceType<_ast231>> {
}; // LValueReferenceType const v8::Local<v8::Boolean> &
struct _ast307 : FunctionProtoType<_ast114, Pack<_ast306>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Boolean> &)
struct _ast308
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str50>, _ast311>>,
              Pack<_ast309>>>,
          _ast217>>,
      DeclContext<Pack<_ast309>> {}; // CXXConstructorDecl Local
struct _ast309
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast308>, _str62>, _ast310>>>> {
}; // ParmVarDecl
struct _ast310 : RValueReferenceType<ReferenceType<_ast218>> {
}; // RValueReferenceType v8::Local<v8::Boolean> &&
struct _ast311 : FunctionProtoType<_ast114, Pack<_ast310>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Boolean> &&) noexcept
struct _ast312
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast215>, _str63>, _ast214>>,
              Pack<>>>,
          _ast217>> {}; // CXXDestructorDecl ~Local
struct _ast313 : DeclContext<Pack<_ast314,
                                  _ast319,
                                  _ast327,
                                  _ast330,
                                  _ast331,
                                  _ast335,
                                  _ast338,
                                  _ast346,
                                  _ast354,
                                  _ast362,
                                  _ast370,
                                  _ast377,
                                  _ast380,
                                  _ast386,
                                  _ast394,
                                  _ast402,
                                  _ast406,
                                  _ast323,
                                  _ast410,
                                  _ast411,
                                  _ast415>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast314
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str50>, _ast113>>,
              Pack<>>>,
          _ast315>> {};                   // CXXConstructorDecl Local
struct _ast315 : PointerType<_ast316> {}; // PointerType v8::Local<v8::Value> *
struct _ast316 : StructOrClassRecordType<RecordType<_ast313>> {
}; // RecordType v8::Local<v8::Value>
struct _ast319
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str50>, _ast322>>,
              Pack<_ast320>>>,
          _ast315>>,
      DeclContext<Pack<_ast320>> {}; // CXXConstructorDecl Local
struct _ast320
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast319>, _str51>, _ast321>>>> {
}; // ParmVarDecl that
struct _ast322 : FunctionProtoType<_ast114, Pack<_ast321>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast323
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str50>, _ast326>>,
              Pack<_ast324>>>,
          _ast315>>,
      DeclContext<Pack<_ast324>> {}; // CXXConstructorDecl Local
struct _ast324
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast323>, _str51>, _ast325>>>> {
}; // ParmVarDecl that
struct _ast326 : FunctionProtoType<_ast114, Pack<_ast325>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Value>)
struct _ast327
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str52>, _ast128>>,
              Pack<>>>,
          _ast328> {}; // CXXMethodDecl IsEmpty
struct _ast328 : PointerType<_ast329> {
}; // PointerType const v8::Local<v8::Value> *
struct _ast329 : ConstQualifiedType<_ast316> {
}; // RecordType const v8::Local<v8::Value>
struct _ast330
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str53>, _ast113>>,
              Pack<>>>,
          _ast315> {}; // CXXMethodDecl Clear
struct _ast331
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str54>, _ast332>>,
              Pack<>>>,
          _ast328> {}; // CXXMethodDecl operator->
struct _ast332 : FunctionProtoType<_ast333, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Value *() const
struct _ast333 : PointerType<_ast334> {}; // PointerType v8::Value *
struct _ast335
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str55>, _ast332>>,
              Pack<>>>,
          _ast328> {}; // CXXMethodDecl operator*
struct _ast338
    : DeclContext<Pack<_ast339>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str56>, _ast343>>,
              Pack<_ast339>>>,
          _ast328> {}; // CXXMethodDecl operator==
struct _ast339
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast338>, _str51>, _ast340>>>> {
}; // ParmVarDecl that
struct _ast340 : LValueReferenceType<ReferenceType<_ast341>> {
}; // LValueReferenceType const Local<S> &
struct _ast341 : ConstQualifiedType<_ast342> {
}; // TemplateSpecializationType const Local<S>
struct _ast343 : FunctionProtoType<_ast129, Pack<_ast340>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast346
    : DeclContext<Pack<_ast347>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str56>, _ast351>>,
              Pack<_ast347>>>,
          _ast328> {}; // CXXMethodDecl operator==
struct _ast347
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast346>, _str51>, _ast348>>>> {
}; // ParmVarDecl that
struct _ast348 : LValueReferenceType<ReferenceType<_ast349>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast349 : ConstQualifiedType<_ast350> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast351 : FunctionProtoType<_ast129, Pack<_ast348>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast354
    : DeclContext<Pack<_ast355>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str57>, _ast359>>,
              Pack<_ast355>>>,
          _ast328> {}; // CXXMethodDecl operator!=
struct _ast355
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast354>, _str51>, _ast356>>>> {
}; // ParmVarDecl that
struct _ast356 : LValueReferenceType<ReferenceType<_ast357>> {
}; // LValueReferenceType const Local<S> &
struct _ast357 : ConstQualifiedType<_ast358> {
}; // TemplateSpecializationType const Local<S>
struct _ast359 : FunctionProtoType<_ast129, Pack<_ast356>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast362
    : DeclContext<Pack<_ast363>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str57>, _ast367>>,
              Pack<_ast363>>>,
          _ast328> {}; // CXXMethodDecl operator!=
struct _ast363
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast362>, _str51>, _ast364>>>> {
}; // ParmVarDecl that
struct _ast364 : LValueReferenceType<ReferenceType<_ast365>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast365 : ConstQualifiedType<_ast366> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast367 : FunctionProtoType<_ast129, Pack<_ast364>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast370
    : DeclContext<Pack<_ast371>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast313>, _str58>, _ast373>>,
          Pack<_ast371>>> {}; // CXXMethodDecl Cast
struct _ast371
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast370>, _str51>, _ast372>>>> {
}; // ParmVarDecl that
struct _ast373 : FunctionProtoType<_ast374, Pack<_ast372>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<S>)
struct _ast377
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str59>, _ast378>>,
              Pack<>>>,
          _ast328> {}; // CXXMethodDecl As
struct _ast378 : FunctionProtoType<_ast379, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast380
    : DeclContext<Pack<_ast381, _ast382>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast313>, _str61>, _ast384>>,
          Pack<_ast381, _ast382>>> {}; // CXXMethodDecl New
struct _ast381
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast380>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast382
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast380>, _str51>, _ast383>>>> {
}; // ParmVarDecl that
struct _ast384
    : FunctionProtoType<_ast385, Pack<_ast184, _ast383>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _ast386
    : DeclContext<Pack<_ast387, _ast388>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast313>, _str61>, _ast392>>,
          Pack<_ast387, _ast388>>> {}; // CXXMethodDecl New
struct _ast387
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast386>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast388
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast386>, _str51>, _ast389>>>> {
}; // ParmVarDecl that
struct _ast389 : LValueReferenceType<ReferenceType<_ast390>> {
}; // LValueReferenceType const PersistentBase<v8::Value> &
struct _ast390 : ConstQualifiedType<_ast391> {
}; // TemplateSpecializationType const PersistentBase<v8::Value>
struct _ast392
    : FunctionProtoType<_ast393, Pack<_ast184, _ast389>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const
   // PersistentBase<v8::Value> &)
struct _ast394
    : DeclContext<Pack<_ast395, _ast396>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast313>, _str61>, _ast400>>,
          Pack<_ast395, _ast396>>> {}; // CXXMethodDecl New
struct _ast395
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast394>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast396
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast394>, _str51>, _ast397>>>> {
}; // ParmVarDecl that
struct _ast397 : LValueReferenceType<ReferenceType<_ast398>> {
}; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast398 : ConstQualifiedType<_ast399> {
}; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast400
    : FunctionProtoType<_ast401, Pack<_ast184, _ast397>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const
   // TracedGlobal<v8::Value> &)
struct _ast402
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str50>, _ast405>>,
              Pack<_ast403>>>,
          _ast315>>,
      DeclContext<Pack<_ast403>> {}; // CXXConstructorDecl Local
struct _ast403
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast402>, _str62>, _ast404>>>> {
}; // ParmVarDecl
struct _ast404 : LValueReferenceType<ReferenceType<_ast329>> {
}; // LValueReferenceType const v8::Local<v8::Value> &
struct _ast405 : FunctionProtoType<_ast114, Pack<_ast404>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Value> &) noexcept
struct _ast406
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str50>, _ast409>>,
              Pack<_ast407>>>,
          _ast315>>,
      DeclContext<Pack<_ast407>> {}; // CXXConstructorDecl Local
struct _ast407
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast406>, _str62>, _ast408>>>> {
}; // ParmVarDecl
struct _ast408 : RValueReferenceType<ReferenceType<_ast316>> {
}; // RValueReferenceType v8::Local<v8::Value> &&
struct _ast409 : FunctionProtoType<_ast114, Pack<_ast408>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Value> &&) noexcept
struct _ast410
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str63>, _ast214>>,
              Pack<>>>,
          _ast315>> {}; // CXXDestructorDecl ~Local
struct _ast411
    : DeclContext<Pack<_ast412>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str64>, _ast413>>,
              Pack<_ast412>>>,
          _ast315> {}; // CXXMethodDecl operator=
struct _ast412
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast411>, _str62>, _ast404>>>> {
}; // ParmVarDecl
struct _ast413 : FunctionProtoType<_ast414, Pack<_ast404>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _ast414 : LValueReferenceType<ReferenceType<_ast316>> {
}; // LValueReferenceType v8::Local<v8::Value> &
struct _ast415
    : DeclContext<Pack<_ast416>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast313>, _str64>, _ast417>>,
              Pack<_ast416>>>,
          _ast315> {}; // CXXMethodDecl operator=
struct _ast416
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast415>, _str62>, _ast408>>>> {
}; // ParmVarDecl
struct _ast417 : FunctionProtoType<_ast414, Pack<_ast408>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _ast418 : DeclContext<Pack<_ast419,
                                  _ast424,
                                  _ast432,
                                  _ast435,
                                  _ast436,
                                  _ast440,
                                  _ast443,
                                  _ast451,
                                  _ast459,
                                  _ast467,
                                  _ast475,
                                  _ast482,
                                  _ast485,
                                  _ast491,
                                  _ast499,
                                  _ast507,
                                  _ast511,
                                  _ast428,
                                  _ast515,
                                  _ast516,
                                  _ast520>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast419
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str50>, _ast113>>,
              Pack<>>>,
          _ast420>> {}; // CXXConstructorDecl Local
struct _ast420 : PointerType<_ast421> {
}; // PointerType v8::Local<v8::PrimitiveArray> *
struct _ast421 : StructOrClassRecordType<RecordType<_ast418>> {
}; // RecordType v8::Local<v8::PrimitiveArray>
struct _ast424
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str50>, _ast427>>,
              Pack<_ast425>>>,
          _ast420>>,
      DeclContext<Pack<_ast425>> {}; // CXXConstructorDecl Local
struct _ast425
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast424>, _str51>, _ast426>>>> {
}; // ParmVarDecl that
struct _ast427 : FunctionProtoType<_ast114, Pack<_ast426>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast428
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str50>, _ast431>>,
              Pack<_ast429>>>,
          _ast420>>,
      DeclContext<Pack<_ast429>> {}; // CXXConstructorDecl Local
struct _ast429
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast428>, _str51>, _ast430>>>> {
}; // ParmVarDecl that
struct _ast431 : FunctionProtoType<_ast114, Pack<_ast430>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::PrimitiveArray>)
struct _ast432
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str52>, _ast128>>,
              Pack<>>>,
          _ast433> {}; // CXXMethodDecl IsEmpty
struct _ast433 : PointerType<_ast434> {
}; // PointerType const v8::Local<v8::PrimitiveArray> *
struct _ast434 : ConstQualifiedType<_ast421> {
}; // RecordType const v8::Local<v8::PrimitiveArray>
struct _ast435
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str53>, _ast113>>,
              Pack<>>>,
          _ast420> {}; // CXXMethodDecl Clear
struct _ast436
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str54>, _ast437>>,
              Pack<>>>,
          _ast433> {}; // CXXMethodDecl operator->
struct _ast437 : FunctionProtoType<_ast438, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::PrimitiveArray *() const
struct _ast438 : PointerType<_ast439> {}; // PointerType v8::PrimitiveArray *
struct _ast440
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str55>, _ast437>>,
              Pack<>>>,
          _ast433> {}; // CXXMethodDecl operator*
struct _ast443
    : DeclContext<Pack<_ast444>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str56>, _ast448>>,
              Pack<_ast444>>>,
          _ast433> {}; // CXXMethodDecl operator==
struct _ast444
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast443>, _str51>, _ast445>>>> {
}; // ParmVarDecl that
struct _ast445 : LValueReferenceType<ReferenceType<_ast446>> {
}; // LValueReferenceType const Local<S> &
struct _ast446 : ConstQualifiedType<_ast447> {
}; // TemplateSpecializationType const Local<S>
struct _ast448 : FunctionProtoType<_ast129, Pack<_ast445>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast451
    : DeclContext<Pack<_ast452>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str56>, _ast456>>,
              Pack<_ast452>>>,
          _ast433> {}; // CXXMethodDecl operator==
struct _ast452
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast451>, _str51>, _ast453>>>> {
}; // ParmVarDecl that
struct _ast453 : LValueReferenceType<ReferenceType<_ast454>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast454 : ConstQualifiedType<_ast455> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast456 : FunctionProtoType<_ast129, Pack<_ast453>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast459
    : DeclContext<Pack<_ast460>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str57>, _ast464>>,
              Pack<_ast460>>>,
          _ast433> {}; // CXXMethodDecl operator!=
struct _ast460
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast459>, _str51>, _ast461>>>> {
}; // ParmVarDecl that
struct _ast461 : LValueReferenceType<ReferenceType<_ast462>> {
}; // LValueReferenceType const Local<S> &
struct _ast462 : ConstQualifiedType<_ast463> {
}; // TemplateSpecializationType const Local<S>
struct _ast464 : FunctionProtoType<_ast129, Pack<_ast461>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast467
    : DeclContext<Pack<_ast468>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str57>, _ast472>>,
              Pack<_ast468>>>,
          _ast433> {}; // CXXMethodDecl operator!=
struct _ast468
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast467>, _str51>, _ast469>>>> {
}; // ParmVarDecl that
struct _ast469 : LValueReferenceType<ReferenceType<_ast470>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast470 : ConstQualifiedType<_ast471> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast472 : FunctionProtoType<_ast129, Pack<_ast469>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast475
    : DeclContext<Pack<_ast476>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast418>, _str58>, _ast478>>,
          Pack<_ast476>>> {}; // CXXMethodDecl Cast
struct _ast476
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast475>, _str51>, _ast477>>>> {
}; // ParmVarDecl that
struct _ast478 : FunctionProtoType<_ast479, Pack<_ast477>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> (Local<S>)
struct _ast482
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str59>, _ast483>>,
              Pack<>>>,
          _ast433> {}; // CXXMethodDecl As
struct _ast483 : FunctionProtoType<_ast484, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast485
    : DeclContext<Pack<_ast486, _ast487>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast418>, _str61>, _ast489>>,
          Pack<_ast486, _ast487>>> {}; // CXXMethodDecl New
struct _ast486
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast485>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast487
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast485>, _str51>, _ast488>>>> {
}; // ParmVarDecl that
struct _ast489
    : FunctionProtoType<_ast490, Pack<_ast184, _ast488>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *,
   // Local<v8::PrimitiveArray>)
struct _ast491
    : DeclContext<Pack<_ast492, _ast493>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast418>, _str61>, _ast497>>,
          Pack<_ast492, _ast493>>> {}; // CXXMethodDecl New
struct _ast492
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast491>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast493
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast491>, _str51>, _ast494>>>> {
}; // ParmVarDecl that
struct _ast494 : LValueReferenceType<ReferenceType<_ast495>> {
}; // LValueReferenceType const PersistentBase<v8::PrimitiveArray> &
struct _ast495 : ConstQualifiedType<_ast496> {
}; // TemplateSpecializationType const PersistentBase<v8::PrimitiveArray>
struct _ast497
    : FunctionProtoType<_ast498, Pack<_ast184, _ast494>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const
   // PersistentBase<v8::PrimitiveArray> &)
struct _ast499
    : DeclContext<Pack<_ast500, _ast501>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast418>, _str61>, _ast505>>,
          Pack<_ast500, _ast501>>> {}; // CXXMethodDecl New
struct _ast500
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast499>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast501
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast499>, _str51>, _ast502>>>> {
}; // ParmVarDecl that
struct _ast502 : LValueReferenceType<ReferenceType<_ast503>> {
}; // LValueReferenceType const TracedGlobal<v8::PrimitiveArray> &
struct _ast503 : ConstQualifiedType<_ast504> {
}; // TemplateSpecializationType const TracedGlobal<v8::PrimitiveArray>
struct _ast505
    : FunctionProtoType<_ast506, Pack<_ast184, _ast502>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const
   // TracedGlobal<v8::PrimitiveArray> &)
struct _ast507
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str50>, _ast510>>,
              Pack<_ast508>>>,
          _ast420>>,
      DeclContext<Pack<_ast508>> {}; // CXXConstructorDecl Local
struct _ast508
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast507>, _str62>, _ast509>>>> {
}; // ParmVarDecl
struct _ast509 : LValueReferenceType<ReferenceType<_ast434>> {
}; // LValueReferenceType const v8::Local<v8::PrimitiveArray> &
struct _ast510 : FunctionProtoType<_ast114, Pack<_ast509>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _ast511
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str50>, _ast514>>,
              Pack<_ast512>>>,
          _ast420>>,
      DeclContext<Pack<_ast512>> {}; // CXXConstructorDecl Local
struct _ast512
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast511>, _str62>, _ast513>>>> {
}; // ParmVarDecl
struct _ast513 : RValueReferenceType<ReferenceType<_ast421>> {
}; // RValueReferenceType v8::Local<v8::PrimitiveArray> &&
struct _ast514 : FunctionProtoType<_ast114, Pack<_ast513>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _ast515
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str63>, _ast214>>,
              Pack<>>>,
          _ast420>> {}; // CXXDestructorDecl ~Local
struct _ast516
    : DeclContext<Pack<_ast517>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str64>, _ast518>>,
              Pack<_ast517>>>,
          _ast420> {}; // CXXMethodDecl operator=
struct _ast517
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast516>, _str62>, _ast509>>>> {
}; // ParmVarDecl
struct _ast518 : FunctionProtoType<_ast519, Pack<_ast509>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::PrimitiveArray> &(const
   // v8::Local<v8::PrimitiveArray> &)
struct _ast519 : LValueReferenceType<ReferenceType<_ast421>> {
}; // LValueReferenceType v8::Local<v8::PrimitiveArray> &
struct _ast520
    : DeclContext<Pack<_ast521>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast418>, _str64>, _ast522>>,
              Pack<_ast521>>>,
          _ast420> {}; // CXXMethodDecl operator=
struct _ast521
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast520>, _str62>, _ast513>>>> {
}; // ParmVarDecl
struct _ast522 : FunctionProtoType<_ast519, Pack<_ast513>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::PrimitiveArray>
   // &(v8::Local<v8::PrimitiveArray> &&)
struct _ast523 : DeclContext<Pack<_ast524,
                                  _ast529,
                                  _ast537,
                                  _ast540,
                                  _ast541,
                                  _ast545,
                                  _ast548,
                                  _ast556,
                                  _ast564,
                                  _ast572,
                                  _ast580,
                                  _ast587,
                                  _ast590,
                                  _ast596,
                                  _ast604,
                                  _ast612,
                                  _ast616,
                                  _ast533,
                                  _ast620,
                                  _ast621,
                                  _ast625>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast524
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str50>, _ast113>>,
              Pack<>>>,
          _ast525>> {}; // CXXConstructorDecl Local
struct _ast525 : PointerType<_ast526> {
}; // PointerType v8::Local<v8::Integer> *
struct _ast526 : StructOrClassRecordType<RecordType<_ast523>> {
}; // RecordType v8::Local<v8::Integer>
struct _ast529
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str50>, _ast532>>,
              Pack<_ast530>>>,
          _ast525>>,
      DeclContext<Pack<_ast530>> {}; // CXXConstructorDecl Local
struct _ast530
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast529>, _str51>, _ast531>>>> {
}; // ParmVarDecl that
struct _ast532 : FunctionProtoType<_ast114, Pack<_ast531>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast533
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str50>, _ast536>>,
              Pack<_ast534>>>,
          _ast525>>,
      DeclContext<Pack<_ast534>> {}; // CXXConstructorDecl Local
struct _ast534
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast533>, _str51>, _ast535>>>> {
}; // ParmVarDecl that
struct _ast536 : FunctionProtoType<_ast114, Pack<_ast535>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Integer>)
struct _ast537
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str52>, _ast128>>,
              Pack<>>>,
          _ast538> {}; // CXXMethodDecl IsEmpty
struct _ast538 : PointerType<_ast539> {
}; // PointerType const v8::Local<v8::Integer> *
struct _ast539 : ConstQualifiedType<_ast526> {
}; // RecordType const v8::Local<v8::Integer>
struct _ast540
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str53>, _ast113>>,
              Pack<>>>,
          _ast525> {}; // CXXMethodDecl Clear
struct _ast541
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str54>, _ast542>>,
              Pack<>>>,
          _ast538> {}; // CXXMethodDecl operator->
struct _ast542 : FunctionProtoType<_ast543, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Integer *() const
struct _ast543 : PointerType<_ast544> {}; // PointerType v8::Integer *
struct _ast545
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str55>, _ast542>>,
              Pack<>>>,
          _ast538> {}; // CXXMethodDecl operator*
struct _ast548
    : DeclContext<Pack<_ast549>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str56>, _ast553>>,
              Pack<_ast549>>>,
          _ast538> {}; // CXXMethodDecl operator==
struct _ast549
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast548>, _str51>, _ast550>>>> {
}; // ParmVarDecl that
struct _ast550 : LValueReferenceType<ReferenceType<_ast551>> {
}; // LValueReferenceType const Local<S> &
struct _ast551 : ConstQualifiedType<_ast552> {
}; // TemplateSpecializationType const Local<S>
struct _ast553 : FunctionProtoType<_ast129, Pack<_ast550>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast556
    : DeclContext<Pack<_ast557>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str56>, _ast561>>,
              Pack<_ast557>>>,
          _ast538> {}; // CXXMethodDecl operator==
struct _ast557
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast556>, _str51>, _ast558>>>> {
}; // ParmVarDecl that
struct _ast558 : LValueReferenceType<ReferenceType<_ast559>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast559 : ConstQualifiedType<_ast560> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast561 : FunctionProtoType<_ast129, Pack<_ast558>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast564
    : DeclContext<Pack<_ast565>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str57>, _ast569>>,
              Pack<_ast565>>>,
          _ast538> {}; // CXXMethodDecl operator!=
struct _ast565
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast564>, _str51>, _ast566>>>> {
}; // ParmVarDecl that
struct _ast566 : LValueReferenceType<ReferenceType<_ast567>> {
}; // LValueReferenceType const Local<S> &
struct _ast567 : ConstQualifiedType<_ast568> {
}; // TemplateSpecializationType const Local<S>
struct _ast569 : FunctionProtoType<_ast129, Pack<_ast566>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast572
    : DeclContext<Pack<_ast573>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str57>, _ast577>>,
              Pack<_ast573>>>,
          _ast538> {}; // CXXMethodDecl operator!=
struct _ast573
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast572>, _str51>, _ast574>>>> {
}; // ParmVarDecl that
struct _ast574 : LValueReferenceType<ReferenceType<_ast575>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast575 : ConstQualifiedType<_ast576> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast577 : FunctionProtoType<_ast129, Pack<_ast574>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast580
    : DeclContext<Pack<_ast581>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast523>, _str58>, _ast583>>,
          Pack<_ast581>>> {}; // CXXMethodDecl Cast
struct _ast581
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast580>, _str51>, _ast582>>>> {
}; // ParmVarDecl that
struct _ast583 : FunctionProtoType<_ast584, Pack<_ast582>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Integer> (Local<S>)
struct _ast587
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str59>, _ast588>>,
              Pack<>>>,
          _ast538> {}; // CXXMethodDecl As
struct _ast588 : FunctionProtoType<_ast589, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast590
    : DeclContext<Pack<_ast591, _ast592>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast523>, _str61>, _ast594>>,
          Pack<_ast591, _ast592>>> {}; // CXXMethodDecl New
struct _ast591
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast590>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast592
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast590>, _str51>, _ast593>>>> {
}; // ParmVarDecl that
struct _ast594
    : FunctionProtoType<_ast595, Pack<_ast184, _ast593>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _ast596
    : DeclContext<Pack<_ast597, _ast598>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast523>, _str61>, _ast602>>,
          Pack<_ast597, _ast598>>> {}; // CXXMethodDecl New
struct _ast597
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast596>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast598
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast596>, _str51>, _ast599>>>> {
}; // ParmVarDecl that
struct _ast599 : LValueReferenceType<ReferenceType<_ast600>> {
}; // LValueReferenceType const PersistentBase<v8::Integer> &
struct _ast600 : ConstQualifiedType<_ast601> {
}; // TemplateSpecializationType const PersistentBase<v8::Integer>
struct _ast602
    : FunctionProtoType<_ast603, Pack<_ast184, _ast599>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const
   // PersistentBase<v8::Integer> &)
struct _ast604
    : DeclContext<Pack<_ast605, _ast606>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast523>, _str61>, _ast610>>,
          Pack<_ast605, _ast606>>> {}; // CXXMethodDecl New
struct _ast605
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast604>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast606
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast604>, _str51>, _ast607>>>> {
}; // ParmVarDecl that
struct _ast607 : LValueReferenceType<ReferenceType<_ast608>> {
}; // LValueReferenceType const TracedGlobal<v8::Integer> &
struct _ast608 : ConstQualifiedType<_ast609> {
}; // TemplateSpecializationType const TracedGlobal<v8::Integer>
struct _ast610
    : FunctionProtoType<_ast611, Pack<_ast184, _ast607>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const
   // TracedGlobal<v8::Integer> &)
struct _ast612
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str50>, _ast615>>,
              Pack<_ast613>>>,
          _ast525>>,
      DeclContext<Pack<_ast613>> {}; // CXXConstructorDecl Local
struct _ast613
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast612>, _str62>, _ast614>>>> {
}; // ParmVarDecl
struct _ast614 : LValueReferenceType<ReferenceType<_ast539>> {
}; // LValueReferenceType const v8::Local<v8::Integer> &
struct _ast615 : FunctionProtoType<_ast114, Pack<_ast614>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Integer> &) noexcept
struct _ast616
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str50>, _ast619>>,
              Pack<_ast617>>>,
          _ast525>>,
      DeclContext<Pack<_ast617>> {}; // CXXConstructorDecl Local
struct _ast617
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast616>, _str62>, _ast618>>>> {
}; // ParmVarDecl
struct _ast618 : RValueReferenceType<ReferenceType<_ast526>> {
}; // RValueReferenceType v8::Local<v8::Integer> &&
struct _ast619 : FunctionProtoType<_ast114, Pack<_ast618>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Integer> &&) noexcept
struct _ast620
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str63>, _ast214>>,
              Pack<>>>,
          _ast525>> {}; // CXXDestructorDecl ~Local
struct _ast621
    : DeclContext<Pack<_ast622>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str64>, _ast623>>,
              Pack<_ast622>>>,
          _ast525> {}; // CXXMethodDecl operator=
struct _ast622
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast621>, _str62>, _ast614>>>> {
}; // ParmVarDecl
struct _ast623 : FunctionProtoType<_ast624, Pack<_ast614>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _ast624 : LValueReferenceType<ReferenceType<_ast526>> {
}; // LValueReferenceType v8::Local<v8::Integer> &
struct _ast625
    : DeclContext<Pack<_ast626>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast523>, _str64>, _ast627>>,
              Pack<_ast626>>>,
          _ast525> {}; // CXXMethodDecl operator=
struct _ast626
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast625>, _str62>, _ast618>>>> {
}; // ParmVarDecl
struct _ast627 : FunctionProtoType<_ast624, Pack<_ast618>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _ast629 : DeclContext<Pack<_ast630,
                                  _ast635,
                                  _ast643,
                                  _ast646,
                                  _ast647,
                                  _ast651,
                                  _ast654,
                                  _ast662,
                                  _ast670,
                                  _ast678,
                                  _ast686,
                                  _ast693,
                                  _ast696,
                                  _ast702,
                                  _ast710,
                                  _ast718,
                                  _ast722,
                                  _ast639,
                                  _ast726,
                                  _ast730,
                                  _ast733>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast630
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str50>, _ast113>>,
              Pack<>>>,
          _ast631>> {};                   // CXXConstructorDecl Local
struct _ast631 : PointerType<_ast632> {}; // PointerType v8::Local<v8::String> *
struct _ast632 : StructOrClassRecordType<RecordType<_ast629>> {
}; // RecordType v8::Local<v8::String>
struct _ast635
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str50>, _ast638>>,
              Pack<_ast636>>>,
          _ast631>>,
      DeclContext<Pack<_ast636>> {}; // CXXConstructorDecl Local
struct _ast636
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast635>, _str51>, _ast637>>>> {
}; // ParmVarDecl that
struct _ast638 : FunctionProtoType<_ast114, Pack<_ast637>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast639
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str50>, _ast642>>,
              Pack<_ast640>>>,
          _ast631>>,
      DeclContext<Pack<_ast640>> {}; // CXXConstructorDecl Local
struct _ast640
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast639>, _str51>, _ast641>>>> {
}; // ParmVarDecl that
struct _ast642 : FunctionProtoType<_ast114, Pack<_ast641>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast643
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str52>, _ast128>>,
              Pack<>>>,
          _ast644> {}; // CXXMethodDecl IsEmpty
struct _ast644 : PointerType<_ast645> {
}; // PointerType const v8::Local<v8::String> *
struct _ast645 : ConstQualifiedType<_ast632> {
}; // RecordType const v8::Local<v8::String>
struct _ast646
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str53>, _ast113>>,
              Pack<>>>,
          _ast631> {}; // CXXMethodDecl Clear
struct _ast647
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str54>, _ast648>>,
              Pack<>>>,
          _ast644> {}; // CXXMethodDecl operator->
struct _ast648 : FunctionProtoType<_ast649, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::String *() const
struct _ast649 : PointerType<_ast650> {}; // PointerType v8::String *
struct _ast651
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str55>, _ast648>>,
              Pack<>>>,
          _ast644> {}; // CXXMethodDecl operator*
struct _ast654
    : DeclContext<Pack<_ast655>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str56>, _ast659>>,
              Pack<_ast655>>>,
          _ast644> {}; // CXXMethodDecl operator==
struct _ast655
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast654>, _str51>, _ast656>>>> {
}; // ParmVarDecl that
struct _ast656 : LValueReferenceType<ReferenceType<_ast657>> {
}; // LValueReferenceType const Local<S> &
struct _ast657 : ConstQualifiedType<_ast658> {
}; // TemplateSpecializationType const Local<S>
struct _ast659 : FunctionProtoType<_ast129, Pack<_ast656>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast662
    : DeclContext<Pack<_ast663>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str56>, _ast667>>,
              Pack<_ast663>>>,
          _ast644> {}; // CXXMethodDecl operator==
struct _ast663
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast662>, _str51>, _ast664>>>> {
}; // ParmVarDecl that
struct _ast664 : LValueReferenceType<ReferenceType<_ast665>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast665 : ConstQualifiedType<_ast666> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast667 : FunctionProtoType<_ast129, Pack<_ast664>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast670
    : DeclContext<Pack<_ast671>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str57>, _ast675>>,
              Pack<_ast671>>>,
          _ast644> {}; // CXXMethodDecl operator!=
struct _ast671
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast670>, _str51>, _ast672>>>> {
}; // ParmVarDecl that
struct _ast672 : LValueReferenceType<ReferenceType<_ast673>> {
}; // LValueReferenceType const Local<S> &
struct _ast673 : ConstQualifiedType<_ast674> {
}; // TemplateSpecializationType const Local<S>
struct _ast675 : FunctionProtoType<_ast129, Pack<_ast672>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast678
    : DeclContext<Pack<_ast679>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str57>, _ast683>>,
              Pack<_ast679>>>,
          _ast644> {}; // CXXMethodDecl operator!=
struct _ast679
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast678>, _str51>, _ast680>>>> {
}; // ParmVarDecl that
struct _ast680 : LValueReferenceType<ReferenceType<_ast681>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast681 : ConstQualifiedType<_ast682> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast683 : FunctionProtoType<_ast129, Pack<_ast680>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast686
    : DeclContext<Pack<_ast687>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast629>, _str58>, _ast689>>,
          Pack<_ast687>>> {}; // CXXMethodDecl Cast
struct _ast687
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast686>, _str51>, _ast688>>>> {
}; // ParmVarDecl that
struct _ast689 : FunctionProtoType<_ast690, Pack<_ast688>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (Local<S>)
struct _ast693
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str59>, _ast694>>,
              Pack<>>>,
          _ast644> {}; // CXXMethodDecl As
struct _ast694 : FunctionProtoType<_ast695, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast696
    : DeclContext<Pack<_ast697, _ast698>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast629>, _str61>, _ast700>>,
          Pack<_ast697, _ast698>>> {}; // CXXMethodDecl New
struct _ast697
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast696>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast698
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast696>, _str51>, _ast699>>>> {
}; // ParmVarDecl that
struct _ast700
    : FunctionProtoType<_ast701, Pack<_ast184, _ast699>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _ast702
    : DeclContext<Pack<_ast703, _ast704>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast629>, _str61>, _ast708>>,
          Pack<_ast703, _ast704>>> {}; // CXXMethodDecl New
struct _ast703
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast702>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast704
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast702>, _str51>, _ast705>>>> {
}; // ParmVarDecl that
struct _ast705 : LValueReferenceType<ReferenceType<_ast706>> {
}; // LValueReferenceType const PersistentBase<v8::String> &
struct _ast706 : ConstQualifiedType<_ast707> {
}; // TemplateSpecializationType const PersistentBase<v8::String>
struct _ast708
    : FunctionProtoType<_ast709, Pack<_ast184, _ast705>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (v8::Isolate *, const
   // PersistentBase<v8::String> &)
struct _ast710
    : DeclContext<Pack<_ast711, _ast712>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast629>, _str61>, _ast716>>,
          Pack<_ast711, _ast712>>> {}; // CXXMethodDecl New
struct _ast711
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast710>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast712
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast710>, _str51>, _ast713>>>> {
}; // ParmVarDecl that
struct _ast713 : LValueReferenceType<ReferenceType<_ast714>> {
}; // LValueReferenceType const TracedGlobal<v8::String> &
struct _ast714 : ConstQualifiedType<_ast715> {
}; // TemplateSpecializationType const TracedGlobal<v8::String>
struct _ast716
    : FunctionProtoType<_ast717, Pack<_ast184, _ast713>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (v8::Isolate *, const
   // TracedGlobal<v8::String> &)
struct _ast718
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str50>, _ast721>>,
              Pack<_ast719>>>,
          _ast631>>,
      DeclContext<Pack<_ast719>> {}; // CXXConstructorDecl Local
struct _ast719
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast718>, _str62>, _ast720>>>> {
}; // ParmVarDecl
struct _ast720 : LValueReferenceType<ReferenceType<_ast645>> {
}; // LValueReferenceType const v8::Local<v8::String> &
struct _ast721 : FunctionProtoType<_ast114, Pack<_ast720>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::String> &) noexcept
struct _ast722
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str50>, _ast725>>,
              Pack<_ast723>>>,
          _ast631>>,
      DeclContext<Pack<_ast723>> {}; // CXXConstructorDecl Local
struct _ast723
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast722>, _str62>, _ast724>>>> {
}; // ParmVarDecl
struct _ast724 : RValueReferenceType<ReferenceType<_ast632>> {
}; // RValueReferenceType v8::Local<v8::String> &&
struct _ast725 : FunctionProtoType<_ast114, Pack<_ast724>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::String> &&) noexcept
struct _ast726
    : DeclContext<Pack<_ast727>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str64>, _ast728>>,
              Pack<_ast727>>>,
          _ast631> {}; // CXXMethodDecl operator=
struct _ast727
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast726>, _str62>, _ast720>>>> {
}; // ParmVarDecl
struct _ast728 : FunctionProtoType<_ast729, Pack<_ast720>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _ast729 : LValueReferenceType<ReferenceType<_ast632>> {
}; // LValueReferenceType v8::Local<v8::String> &
struct _ast730
    : DeclContext<Pack<_ast731>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str64>, _ast732>>,
              Pack<_ast731>>>,
          _ast631> {}; // CXXMethodDecl operator=
struct _ast731
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast730>, _str62>, _ast724>>>> {
}; // ParmVarDecl
struct _ast732 : FunctionProtoType<_ast729, Pack<_ast724>, UnqualifiedType> {
}; // FunctionProtoType v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _ast733
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast629>, _str63>, _ast214>>,
              Pack<>>>,
          _ast631>> {}; // CXXDestructorDecl ~Local
struct _ast734 : DeclContext<Pack<_ast735,
                                  _ast740,
                                  _ast748,
                                  _ast751,
                                  _ast752,
                                  _ast756,
                                  _ast759,
                                  _ast767,
                                  _ast775,
                                  _ast783,
                                  _ast791,
                                  _ast798,
                                  _ast801,
                                  _ast807,
                                  _ast815,
                                  _ast823,
                                  _ast824,
                                  _ast828,
                                  _ast744>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast735
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str50>, _ast113>>,
              Pack<>>>,
          _ast736>> {}; // CXXConstructorDecl Local
struct _ast736 : PointerType<_ast737> {
}; // PointerType v8::Local<v8::Context> *
struct _ast737 : StructOrClassRecordType<RecordType<_ast734>> {
}; // RecordType v8::Local<v8::Context>
struct _ast740
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str50>, _ast743>>,
              Pack<_ast741>>>,
          _ast736>>,
      DeclContext<Pack<_ast741>> {}; // CXXConstructorDecl Local
struct _ast741
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast740>, _str51>, _ast742>>>> {
}; // ParmVarDecl that
struct _ast743 : FunctionProtoType<_ast114, Pack<_ast742>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast744
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str50>, _ast747>>,
              Pack<_ast745>>>,
          _ast736>>,
      DeclContext<Pack<_ast745>> {}; // CXXConstructorDecl Local
struct _ast745
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast744>, _str51>, _ast746>>>> {
}; // ParmVarDecl that
struct _ast747 : FunctionProtoType<_ast114, Pack<_ast746>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Context>)
struct _ast748
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str52>, _ast128>>,
              Pack<>>>,
          _ast749> {}; // CXXMethodDecl IsEmpty
struct _ast749 : PointerType<_ast750> {
}; // PointerType const v8::Local<v8::Context> *
struct _ast750 : ConstQualifiedType<_ast737> {
}; // RecordType const v8::Local<v8::Context>
struct _ast751
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str53>, _ast113>>,
              Pack<>>>,
          _ast736> {}; // CXXMethodDecl Clear
struct _ast752
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str54>, _ast753>>,
              Pack<>>>,
          _ast749> {}; // CXXMethodDecl operator->
struct _ast753 : FunctionProtoType<_ast754, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Context *() const
struct _ast754 : PointerType<_ast755> {}; // PointerType v8::Context *
struct _ast756
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str55>, _ast753>>,
              Pack<>>>,
          _ast749> {}; // CXXMethodDecl operator*
struct _ast759
    : DeclContext<Pack<_ast760>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str56>, _ast764>>,
              Pack<_ast760>>>,
          _ast749> {}; // CXXMethodDecl operator==
struct _ast760
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast759>, _str51>, _ast761>>>> {
}; // ParmVarDecl that
struct _ast761 : LValueReferenceType<ReferenceType<_ast762>> {
}; // LValueReferenceType const Local<S> &
struct _ast762 : ConstQualifiedType<_ast763> {
}; // TemplateSpecializationType const Local<S>
struct _ast764 : FunctionProtoType<_ast129, Pack<_ast761>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast767
    : DeclContext<Pack<_ast768>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str56>, _ast772>>,
              Pack<_ast768>>>,
          _ast749> {}; // CXXMethodDecl operator==
struct _ast768
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast767>, _str51>, _ast769>>>> {
}; // ParmVarDecl that
struct _ast769 : LValueReferenceType<ReferenceType<_ast770>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast770 : ConstQualifiedType<_ast771> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast772 : FunctionProtoType<_ast129, Pack<_ast769>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast775
    : DeclContext<Pack<_ast776>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str57>, _ast780>>,
              Pack<_ast776>>>,
          _ast749> {}; // CXXMethodDecl operator!=
struct _ast776
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast775>, _str51>, _ast777>>>> {
}; // ParmVarDecl that
struct _ast777 : LValueReferenceType<ReferenceType<_ast778>> {
}; // LValueReferenceType const Local<S> &
struct _ast778 : ConstQualifiedType<_ast779> {
}; // TemplateSpecializationType const Local<S>
struct _ast780 : FunctionProtoType<_ast129, Pack<_ast777>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast783
    : DeclContext<Pack<_ast784>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str57>, _ast788>>,
              Pack<_ast784>>>,
          _ast749> {}; // CXXMethodDecl operator!=
struct _ast784
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast783>, _str51>, _ast785>>>> {
}; // ParmVarDecl that
struct _ast785 : LValueReferenceType<ReferenceType<_ast786>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast786 : ConstQualifiedType<_ast787> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast788 : FunctionProtoType<_ast129, Pack<_ast785>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast791
    : DeclContext<Pack<_ast792>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast734>, _str58>, _ast794>>,
          Pack<_ast792>>> {}; // CXXMethodDecl Cast
struct _ast792
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast791>, _str51>, _ast793>>>> {
}; // ParmVarDecl that
struct _ast794 : FunctionProtoType<_ast795, Pack<_ast793>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> (Local<S>)
struct _ast798
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str59>, _ast799>>,
              Pack<>>>,
          _ast749> {}; // CXXMethodDecl As
struct _ast799 : FunctionProtoType<_ast800, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast801
    : DeclContext<Pack<_ast802, _ast803>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast734>, _str61>, _ast805>>,
          Pack<_ast802, _ast803>>> {}; // CXXMethodDecl New
struct _ast802
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast801>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast803
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast801>, _str51>, _ast804>>>> {
}; // ParmVarDecl that
struct _ast805
    : FunctionProtoType<_ast806, Pack<_ast184, _ast804>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _ast807
    : DeclContext<Pack<_ast808, _ast809>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast734>, _str61>, _ast813>>,
          Pack<_ast808, _ast809>>> {}; // CXXMethodDecl New
struct _ast808
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast807>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast809
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast807>, _str51>, _ast810>>>> {
}; // ParmVarDecl that
struct _ast810 : LValueReferenceType<ReferenceType<_ast811>> {
}; // LValueReferenceType const PersistentBase<v8::Context> &
struct _ast811 : ConstQualifiedType<_ast812> {
}; // TemplateSpecializationType const PersistentBase<v8::Context>
struct _ast813
    : FunctionProtoType<_ast814, Pack<_ast184, _ast810>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const
   // PersistentBase<v8::Context> &)
struct _ast815
    : DeclContext<Pack<_ast816, _ast817>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast734>, _str61>, _ast821>>,
          Pack<_ast816, _ast817>>> {}; // CXXMethodDecl New
struct _ast816
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast815>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast817
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast815>, _str51>, _ast818>>>> {
}; // ParmVarDecl that
struct _ast818 : LValueReferenceType<ReferenceType<_ast819>> {
}; // LValueReferenceType const TracedGlobal<v8::Context> &
struct _ast819 : ConstQualifiedType<_ast820> {
}; // TemplateSpecializationType const TracedGlobal<v8::Context>
struct _ast821
    : FunctionProtoType<_ast822, Pack<_ast184, _ast818>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const
   // TracedGlobal<v8::Context> &)
struct _ast823
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str63>, _ast214>>,
              Pack<>>>,
          _ast736>> {}; // CXXDestructorDecl ~Local
struct _ast824
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str50>, _ast827>>,
              Pack<_ast825>>>,
          _ast736>>,
      DeclContext<Pack<_ast825>> {}; // CXXConstructorDecl Local
struct _ast825
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast824>, _str62>, _ast826>>>> {
}; // ParmVarDecl
struct _ast826 : LValueReferenceType<ReferenceType<_ast750>> {
}; // LValueReferenceType const v8::Local<v8::Context> &
struct _ast827 : FunctionProtoType<_ast114, Pack<_ast826>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Context> &) noexcept
struct _ast828
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast734>, _str50>, _ast831>>,
              Pack<_ast829>>>,
          _ast736>>,
      DeclContext<Pack<_ast829>> {}; // CXXConstructorDecl Local
struct _ast829
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast828>, _str62>, _ast830>>>> {
}; // ParmVarDecl
struct _ast830 : RValueReferenceType<ReferenceType<_ast737>> {
}; // RValueReferenceType v8::Local<v8::Context> &&
struct _ast831 : FunctionProtoType<_ast114, Pack<_ast830>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Context> &&) noexcept
struct _ast834 : DeclContext<Pack<_ast835,
                                  _ast840,
                                  _ast844,
                                  _ast847,
                                  _ast848,
                                  _ast852,
                                  _ast855,
                                  _ast863,
                                  _ast871,
                                  _ast879,
                                  _ast887,
                                  _ast894,
                                  _ast897,
                                  _ast903,
                                  _ast911>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast835
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str50>, _ast113>>,
              Pack<>>>,
          _ast836>> {}; // CXXConstructorDecl Local
struct _ast836 : PointerType<_ast837> {
}; // PointerType v8::Local<v8::UnboundScript> *
struct _ast837 : StructOrClassRecordType<RecordType<_ast834>> {
}; // RecordType v8::Local<v8::UnboundScript>
struct _ast840
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str50>, _ast843>>,
              Pack<_ast841>>>,
          _ast836>>,
      DeclContext<Pack<_ast841>> {}; // CXXConstructorDecl Local
struct _ast841
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast840>, _str51>, _ast842>>>> {
}; // ParmVarDecl that
struct _ast843 : FunctionProtoType<_ast114, Pack<_ast842>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast844
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str52>, _ast128>>,
              Pack<>>>,
          _ast845> {}; // CXXMethodDecl IsEmpty
struct _ast845 : PointerType<_ast846> {
}; // PointerType const v8::Local<v8::UnboundScript> *
struct _ast846 : ConstQualifiedType<_ast837> {
}; // RecordType const v8::Local<v8::UnboundScript>
struct _ast847
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str53>, _ast113>>,
              Pack<>>>,
          _ast836> {}; // CXXMethodDecl Clear
struct _ast848
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str54>, _ast849>>,
              Pack<>>>,
          _ast845> {}; // CXXMethodDecl operator->
struct _ast849 : FunctionProtoType<_ast850, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::UnboundScript *() const
struct _ast850 : PointerType<_ast851> {}; // PointerType v8::UnboundScript *
struct _ast852
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str55>, _ast849>>,
              Pack<>>>,
          _ast845> {}; // CXXMethodDecl operator*
struct _ast855
    : DeclContext<Pack<_ast856>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str56>, _ast860>>,
              Pack<_ast856>>>,
          _ast845> {}; // CXXMethodDecl operator==
struct _ast856
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast855>, _str51>, _ast857>>>> {
}; // ParmVarDecl that
struct _ast857 : LValueReferenceType<ReferenceType<_ast858>> {
}; // LValueReferenceType const Local<S> &
struct _ast858 : ConstQualifiedType<_ast859> {
}; // TemplateSpecializationType const Local<S>
struct _ast860 : FunctionProtoType<_ast129, Pack<_ast857>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast863
    : DeclContext<Pack<_ast864>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str56>, _ast868>>,
              Pack<_ast864>>>,
          _ast845> {}; // CXXMethodDecl operator==
struct _ast864
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast863>, _str51>, _ast865>>>> {
}; // ParmVarDecl that
struct _ast865 : LValueReferenceType<ReferenceType<_ast866>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast866 : ConstQualifiedType<_ast867> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast868 : FunctionProtoType<_ast129, Pack<_ast865>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast871
    : DeclContext<Pack<_ast872>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str57>, _ast876>>,
              Pack<_ast872>>>,
          _ast845> {}; // CXXMethodDecl operator!=
struct _ast872
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast871>, _str51>, _ast873>>>> {
}; // ParmVarDecl that
struct _ast873 : LValueReferenceType<ReferenceType<_ast874>> {
}; // LValueReferenceType const Local<S> &
struct _ast874 : ConstQualifiedType<_ast875> {
}; // TemplateSpecializationType const Local<S>
struct _ast876 : FunctionProtoType<_ast129, Pack<_ast873>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast879
    : DeclContext<Pack<_ast880>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str57>, _ast884>>,
              Pack<_ast880>>>,
          _ast845> {}; // CXXMethodDecl operator!=
struct _ast880
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast879>, _str51>, _ast881>>>> {
}; // ParmVarDecl that
struct _ast881 : LValueReferenceType<ReferenceType<_ast882>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast882 : ConstQualifiedType<_ast883> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast884 : FunctionProtoType<_ast129, Pack<_ast881>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast887
    : DeclContext<Pack<_ast888>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast834>, _str58>, _ast890>>,
          Pack<_ast888>>> {}; // CXXMethodDecl Cast
struct _ast888
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast887>, _str51>, _ast889>>>> {
}; // ParmVarDecl that
struct _ast890 : FunctionProtoType<_ast891, Pack<_ast889>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::UnboundScript> (Local<S>)
struct _ast894
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast834>, _str59>, _ast895>>,
              Pack<>>>,
          _ast845> {}; // CXXMethodDecl As
struct _ast895 : FunctionProtoType<_ast896, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast897
    : DeclContext<Pack<_ast898, _ast899>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast834>, _str61>, _ast901>>,
          Pack<_ast898, _ast899>>> {}; // CXXMethodDecl New
struct _ast898
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast897>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast899
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast897>, _str51>, _ast900>>>> {
}; // ParmVarDecl that
struct _ast901
    : FunctionProtoType<_ast902, Pack<_ast184, _ast900>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
   // Local<v8::UnboundScript>)
struct _ast903
    : DeclContext<Pack<_ast904, _ast905>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast834>, _str61>, _ast909>>,
          Pack<_ast904, _ast905>>> {}; // CXXMethodDecl New
struct _ast904
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast903>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast905
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast903>, _str51>, _ast906>>>> {
}; // ParmVarDecl that
struct _ast906 : LValueReferenceType<ReferenceType<_ast907>> {
}; // LValueReferenceType const PersistentBase<v8::UnboundScript> &
struct _ast907 : ConstQualifiedType<_ast908> {
}; // TemplateSpecializationType const PersistentBase<v8::UnboundScript>
struct _ast909
    : FunctionProtoType<_ast910, Pack<_ast184, _ast906>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const
   // PersistentBase<v8::UnboundScript> &)
struct _ast911
    : DeclContext<Pack<_ast912, _ast913>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast834>, _str61>, _ast917>>,
          Pack<_ast912, _ast913>>> {}; // CXXMethodDecl New
struct _ast912
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast911>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast913
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast911>, _str51>, _ast914>>>> {
}; // ParmVarDecl that
struct _ast914 : LValueReferenceType<ReferenceType<_ast915>> {
}; // LValueReferenceType const TracedGlobal<v8::UnboundScript> &
struct _ast915 : ConstQualifiedType<_ast916> {
}; // TemplateSpecializationType const TracedGlobal<v8::UnboundScript>
struct _ast917
    : FunctionProtoType<_ast918, Pack<_ast184, _ast914>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const
   // TracedGlobal<v8::UnboundScript> &)
struct _ast920 : DeclContext<Pack<_ast921,
                                  _ast926,
                                  _ast934,
                                  _ast937,
                                  _ast938,
                                  _ast942,
                                  _ast945,
                                  _ast953,
                                  _ast961,
                                  _ast969,
                                  _ast977,
                                  _ast984,
                                  _ast987,
                                  _ast993,
                                  _ast1001,
                                  _ast1009,
                                  _ast1013,
                                  _ast1017,
                                  _ast930>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast921
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str50>, _ast113>>,
              Pack<>>>,
          _ast922>> {}; // CXXConstructorDecl Local
struct _ast922 : PointerType<_ast923> {
}; // PointerType v8::Local<v8::Function> *
struct _ast923 : StructOrClassRecordType<RecordType<_ast920>> {
}; // RecordType v8::Local<v8::Function>
struct _ast926
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str50>, _ast929>>,
              Pack<_ast927>>>,
          _ast922>>,
      DeclContext<Pack<_ast927>> {}; // CXXConstructorDecl Local
struct _ast927
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast926>, _str51>, _ast928>>>> {
}; // ParmVarDecl that
struct _ast929 : FunctionProtoType<_ast114, Pack<_ast928>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast930
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str50>, _ast933>>,
              Pack<_ast931>>>,
          _ast922>>,
      DeclContext<Pack<_ast931>> {}; // CXXConstructorDecl Local
struct _ast931
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast930>, _str51>, _ast932>>>> {
}; // ParmVarDecl that
struct _ast933 : FunctionProtoType<_ast114, Pack<_ast932>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Function>)
struct _ast934
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str52>, _ast128>>,
              Pack<>>>,
          _ast935> {}; // CXXMethodDecl IsEmpty
struct _ast935 : PointerType<_ast936> {
}; // PointerType const v8::Local<v8::Function> *
struct _ast936 : ConstQualifiedType<_ast923> {
}; // RecordType const v8::Local<v8::Function>
struct _ast937
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str53>, _ast113>>,
              Pack<>>>,
          _ast922> {}; // CXXMethodDecl Clear
struct _ast938
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str54>, _ast939>>,
              Pack<>>>,
          _ast935> {}; // CXXMethodDecl operator->
struct _ast939 : FunctionProtoType<_ast940, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Function *() const
struct _ast940 : PointerType<_ast941> {}; // PointerType v8::Function *
struct _ast942
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str55>, _ast939>>,
              Pack<>>>,
          _ast935> {}; // CXXMethodDecl operator*
struct _ast945
    : DeclContext<Pack<_ast946>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str56>, _ast950>>,
              Pack<_ast946>>>,
          _ast935> {}; // CXXMethodDecl operator==
struct _ast946
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast945>, _str51>, _ast947>>>> {
}; // ParmVarDecl that
struct _ast947 : LValueReferenceType<ReferenceType<_ast948>> {
}; // LValueReferenceType const Local<S> &
struct _ast948 : ConstQualifiedType<_ast949> {
}; // TemplateSpecializationType const Local<S>
struct _ast950 : FunctionProtoType<_ast129, Pack<_ast947>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast953
    : DeclContext<Pack<_ast954>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str56>, _ast958>>,
              Pack<_ast954>>>,
          _ast935> {}; // CXXMethodDecl operator==
struct _ast954
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast953>, _str51>, _ast955>>>> {
}; // ParmVarDecl that
struct _ast955 : LValueReferenceType<ReferenceType<_ast956>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast956 : ConstQualifiedType<_ast957> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast958 : FunctionProtoType<_ast129, Pack<_ast955>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast961
    : DeclContext<Pack<_ast962>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str57>, _ast966>>,
              Pack<_ast962>>>,
          _ast935> {}; // CXXMethodDecl operator!=
struct _ast962
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast961>, _str51>, _ast963>>>> {
}; // ParmVarDecl that
struct _ast963 : LValueReferenceType<ReferenceType<_ast964>> {
}; // LValueReferenceType const Local<S> &
struct _ast964 : ConstQualifiedType<_ast965> {
}; // TemplateSpecializationType const Local<S>
struct _ast966 : FunctionProtoType<_ast129, Pack<_ast963>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast969
    : DeclContext<Pack<_ast970>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str57>, _ast974>>,
              Pack<_ast970>>>,
          _ast935> {}; // CXXMethodDecl operator!=
struct _ast970
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast969>, _str51>, _ast971>>>> {
}; // ParmVarDecl that
struct _ast971 : LValueReferenceType<ReferenceType<_ast972>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast972 : ConstQualifiedType<_ast973> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast974 : FunctionProtoType<_ast129, Pack<_ast971>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast977
    : DeclContext<Pack<_ast978>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast920>, _str58>, _ast980>>,
          Pack<_ast978>>> {}; // CXXMethodDecl Cast
struct _ast978
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast977>, _str51>, _ast979>>>> {
}; // ParmVarDecl that
struct _ast980 : FunctionProtoType<_ast981, Pack<_ast979>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Function> (Local<S>)
struct _ast984
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str59>, _ast985>>,
              Pack<>>>,
          _ast935> {}; // CXXMethodDecl As
struct _ast985 : FunctionProtoType<_ast986, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast987
    : DeclContext<Pack<_ast988, _ast989>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast920>, _str61>, _ast991>>,
          Pack<_ast988, _ast989>>> {}; // CXXMethodDecl New
struct _ast988
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast987>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast989
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast987>, _str51>, _ast990>>>> {
}; // ParmVarDecl that
struct _ast991
    : FunctionProtoType<_ast992, Pack<_ast184, _ast990>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _ast993
    : DeclContext<Pack<_ast994, _ast995>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast920>, _str61>, _ast999>>,
          Pack<_ast994, _ast995>>> {}; // CXXMethodDecl New
struct _ast994
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast993>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast995
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast993>, _str51>, _ast996>>>> {
}; // ParmVarDecl that
struct _ast996 : LValueReferenceType<ReferenceType<_ast997>> {
}; // LValueReferenceType const PersistentBase<v8::Function> &
struct _ast997 : ConstQualifiedType<_ast998> {
}; // TemplateSpecializationType const PersistentBase<v8::Function>
struct _ast999
    : FunctionProtoType<_ast1000, Pack<_ast184, _ast996>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const
   // PersistentBase<v8::Function> &)
struct _ast1001
    : DeclContext<Pack<_ast1002, _ast1003>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast920>, _str61>, _ast1007>>,
          Pack<_ast1002, _ast1003>>> {}; // CXXMethodDecl New
struct _ast1002
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1001>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1003
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1001>, _str51>, _ast1004>>>> {
}; // ParmVarDecl that
struct _ast1004 : LValueReferenceType<ReferenceType<_ast1005>> {
}; // LValueReferenceType const TracedGlobal<v8::Function> &
struct _ast1005 : ConstQualifiedType<_ast1006> {
}; // TemplateSpecializationType const TracedGlobal<v8::Function>
struct _ast1007
    : FunctionProtoType<_ast1008, Pack<_ast184, _ast1004>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const
   // TracedGlobal<v8::Function> &)
struct _ast1009
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str50>, _ast1012>>,
              Pack<_ast1010>>>,
          _ast922>>,
      DeclContext<Pack<_ast1010>> {}; // CXXConstructorDecl Local
struct _ast1010
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1009>, _str62>, _ast1011>>>> {
}; // ParmVarDecl
struct _ast1011 : LValueReferenceType<ReferenceType<_ast936>> {
}; // LValueReferenceType const v8::Local<v8::Function> &
struct _ast1012 : FunctionProtoType<_ast114, Pack<_ast1011>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Function> &)
struct _ast1013
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str50>, _ast1016>>,
              Pack<_ast1014>>>,
          _ast922>>,
      DeclContext<Pack<_ast1014>> {}; // CXXConstructorDecl Local
struct _ast1014
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1013>, _str62>, _ast1015>>>> {
}; // ParmVarDecl
struct _ast1015 : RValueReferenceType<ReferenceType<_ast923>> {
}; // RValueReferenceType v8::Local<v8::Function> &&
struct _ast1016 : FunctionProtoType<_ast114, Pack<_ast1015>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Function> &&) noexcept
struct _ast1017
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast920>, _str63>, _ast214>>,
              Pack<>>>,
          _ast922>> {}; // CXXDestructorDecl ~Local
struct _ast1027 : DeclContext<Pack<_ast1028,
                                   _ast1033,
                                   _ast1045,
                                   _ast1048,
                                   _ast1049,
                                   _ast1053,
                                   _ast1056,
                                   _ast1064,
                                   _ast1072,
                                   _ast1080,
                                   _ast1088,
                                   _ast1095,
                                   _ast1098,
                                   _ast1104,
                                   _ast1112,
                                   _ast1120,
                                   _ast1124,
                                   _ast1037,
                                   _ast1128,
                                   _ast1041>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast1028
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str50>, _ast113>>,
              Pack<>>>,
          _ast1029>> {};                    // CXXConstructorDecl Local
struct _ast1029 : PointerType<_ast1030> {}; // PointerType v8::Local<v8::Name> *
struct _ast1030 : StructOrClassRecordType<RecordType<_ast1027>> {
}; // RecordType v8::Local<v8::Name>
struct _ast1033
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str50>, _ast1036>>,
              Pack<_ast1034>>>,
          _ast1029>>,
      DeclContext<Pack<_ast1034>> {}; // CXXConstructorDecl Local
struct _ast1034
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1033>, _str51>, _ast1035>>>> {
}; // ParmVarDecl that
struct _ast1036 : FunctionProtoType<_ast114, Pack<_ast1035>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1037
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str50>, _ast1040>>,
              Pack<_ast1038>>>,
          _ast1029>>,
      DeclContext<Pack<_ast1038>> {}; // CXXConstructorDecl Local
struct _ast1038
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1037>, _str51>, _ast1039>>>> {
}; // ParmVarDecl that
struct _ast1040 : FunctionProtoType<_ast114, Pack<_ast1039>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast1041
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str50>, _ast1044>>,
              Pack<_ast1042>>>,
          _ast1029>>,
      DeclContext<Pack<_ast1042>> {}; // CXXConstructorDecl Local
struct _ast1042
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1041>, _str51>, _ast1043>>>> {
}; // ParmVarDecl that
struct _ast1044 : FunctionProtoType<_ast114, Pack<_ast1043>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>)
struct _ast1045
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1046> {}; // CXXMethodDecl IsEmpty
struct _ast1046 : PointerType<_ast1047> {
}; // PointerType const v8::Local<v8::Name> *
struct _ast1047 : ConstQualifiedType<_ast1030> {
}; // RecordType const v8::Local<v8::Name>
struct _ast1048
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str53>, _ast113>>,
              Pack<>>>,
          _ast1029> {}; // CXXMethodDecl Clear
struct _ast1049
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str54>, _ast1050>>,
              Pack<>>>,
          _ast1046> {}; // CXXMethodDecl operator->
struct _ast1050 : FunctionProtoType<_ast1051, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Name *() const
struct _ast1051 : PointerType<_ast1052> {}; // PointerType v8::Name *
struct _ast1053
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str55>, _ast1050>>,
              Pack<>>>,
          _ast1046> {}; // CXXMethodDecl operator*
struct _ast1056
    : DeclContext<Pack<_ast1057>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str56>, _ast1061>>,
              Pack<_ast1057>>>,
          _ast1046> {}; // CXXMethodDecl operator==
struct _ast1057
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1056>, _str51>, _ast1058>>>> {
}; // ParmVarDecl that
struct _ast1058 : LValueReferenceType<ReferenceType<_ast1059>> {
}; // LValueReferenceType const Local<S> &
struct _ast1059 : ConstQualifiedType<_ast1060> {
}; // TemplateSpecializationType const Local<S>
struct _ast1061
    : FunctionProtoType<_ast129, Pack<_ast1058>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1064
    : DeclContext<Pack<_ast1065>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str56>, _ast1069>>,
              Pack<_ast1065>>>,
          _ast1046> {}; // CXXMethodDecl operator==
struct _ast1065
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1064>, _str51>, _ast1066>>>> {
}; // ParmVarDecl that
struct _ast1066 : LValueReferenceType<ReferenceType<_ast1067>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1067 : ConstQualifiedType<_ast1068> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1069
    : FunctionProtoType<_ast129, Pack<_ast1066>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1072
    : DeclContext<Pack<_ast1073>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str57>, _ast1077>>,
              Pack<_ast1073>>>,
          _ast1046> {}; // CXXMethodDecl operator!=
struct _ast1073
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1072>, _str51>, _ast1074>>>> {
}; // ParmVarDecl that
struct _ast1074 : LValueReferenceType<ReferenceType<_ast1075>> {
}; // LValueReferenceType const Local<S> &
struct _ast1075 : ConstQualifiedType<_ast1076> {
}; // TemplateSpecializationType const Local<S>
struct _ast1077
    : FunctionProtoType<_ast129, Pack<_ast1074>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1080
    : DeclContext<Pack<_ast1081>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str57>, _ast1085>>,
              Pack<_ast1081>>>,
          _ast1046> {}; // CXXMethodDecl operator!=
struct _ast1081
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1080>, _str51>, _ast1082>>>> {
}; // ParmVarDecl that
struct _ast1082 : LValueReferenceType<ReferenceType<_ast1083>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast1083 : ConstQualifiedType<_ast1084> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast1085
    : FunctionProtoType<_ast129, Pack<_ast1082>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1088
    : DeclContext<Pack<_ast1089>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1027>, _str58>, _ast1091>>,
          Pack<_ast1089>>> {}; // CXXMethodDecl Cast
struct _ast1089
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1088>, _str51>, _ast1090>>>> {
}; // ParmVarDecl that
struct _ast1091 : FunctionProtoType<_ast1092, Pack<_ast1090>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Name> (Local<S>)
struct _ast1095
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str59>, _ast1096>>,
              Pack<>>>,
          _ast1046> {}; // CXXMethodDecl As
struct _ast1096 : FunctionProtoType<_ast1097, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast1098
    : DeclContext<Pack<_ast1099, _ast1100>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1027>, _str61>, _ast1102>>,
          Pack<_ast1099, _ast1100>>> {}; // CXXMethodDecl New
struct _ast1099
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1098>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1100
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1098>, _str51>, _ast1101>>>> {
}; // ParmVarDecl that
struct _ast1102
    : FunctionProtoType<_ast1103, Pack<_ast184, _ast1101>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _ast1104
    : DeclContext<Pack<_ast1105, _ast1106>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1027>, _str61>, _ast1110>>,
          Pack<_ast1105, _ast1106>>> {}; // CXXMethodDecl New
struct _ast1105
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1104>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1106
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1104>, _str51>, _ast1107>>>> {
}; // ParmVarDecl that
struct _ast1107 : LValueReferenceType<ReferenceType<_ast1108>> {
}; // LValueReferenceType const PersistentBase<v8::Name> &
struct _ast1108 : ConstQualifiedType<_ast1109> {
}; // TemplateSpecializationType const PersistentBase<v8::Name>
struct _ast1110
    : FunctionProtoType<_ast1111, Pack<_ast184, _ast1107>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const
   // PersistentBase<v8::Name> &)
struct _ast1112
    : DeclContext<Pack<_ast1113, _ast1114>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1027>, _str61>, _ast1118>>,
          Pack<_ast1113, _ast1114>>> {}; // CXXMethodDecl New
struct _ast1113
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1112>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1114
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1112>, _str51>, _ast1115>>>> {
}; // ParmVarDecl that
struct _ast1115 : LValueReferenceType<ReferenceType<_ast1116>> {
}; // LValueReferenceType const TracedGlobal<v8::Name> &
struct _ast1116 : ConstQualifiedType<_ast1117> {
}; // TemplateSpecializationType const TracedGlobal<v8::Name>
struct _ast1118
    : FunctionProtoType<_ast1119, Pack<_ast184, _ast1115>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const
   // TracedGlobal<v8::Name> &)
struct _ast1120
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str50>, _ast1123>>,
              Pack<_ast1121>>>,
          _ast1029>>,
      DeclContext<Pack<_ast1121>> {}; // CXXConstructorDecl Local
struct _ast1121
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1120>, _str62>, _ast1122>>>> {
}; // ParmVarDecl
struct _ast1122 : LValueReferenceType<ReferenceType<_ast1047>> {
}; // LValueReferenceType const v8::Local<v8::Name> &
struct _ast1123 : FunctionProtoType<_ast114, Pack<_ast1122>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Name> &)
struct _ast1124
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str50>, _ast1127>>,
              Pack<_ast1125>>>,
          _ast1029>>,
      DeclContext<Pack<_ast1125>> {}; // CXXConstructorDecl Local
struct _ast1125
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1124>, _str62>, _ast1126>>>> {
}; // ParmVarDecl
struct _ast1126 : RValueReferenceType<ReferenceType<_ast1030>> {
}; // RValueReferenceType v8::Local<v8::Name> &&
struct _ast1127 : FunctionProtoType<_ast114, Pack<_ast1126>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Name> &&) noexcept
struct _ast1128
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1027>, _str63>, _ast214>>,
              Pack<>>>,
          _ast1029>> {}; // CXXDestructorDecl ~Local
struct _ast1129 : DeclContext<Pack<_ast1130,
                                   _ast1135,
                                   _ast1143,
                                   _ast1146,
                                   _ast1147,
                                   _ast1151,
                                   _ast1154,
                                   _ast1162,
                                   _ast1170,
                                   _ast1178,
                                   _ast1186,
                                   _ast1193,
                                   _ast1196,
                                   _ast1202,
                                   _ast1210,
                                   _ast1218,
                                   _ast1222,
                                   _ast1226,
                                   _ast1139>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast1130
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str50>, _ast113>>,
              Pack<>>>,
          _ast1131>> {}; // CXXConstructorDecl Local
struct _ast1131 : PointerType<_ast1132> {
}; // PointerType v8::Local<v8::FunctionTemplate> *
struct _ast1132 : StructOrClassRecordType<RecordType<_ast1129>> {
}; // RecordType v8::Local<v8::FunctionTemplate>
struct _ast1135
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str50>, _ast1138>>,
              Pack<_ast1136>>>,
          _ast1131>>,
      DeclContext<Pack<_ast1136>> {}; // CXXConstructorDecl Local
struct _ast1136
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1135>, _str51>, _ast1137>>>> {
}; // ParmVarDecl that
struct _ast1138 : FunctionProtoType<_ast114, Pack<_ast1137>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1139
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str50>, _ast1142>>,
              Pack<_ast1140>>>,
          _ast1131>>,
      DeclContext<Pack<_ast1140>> {}; // CXXConstructorDecl Local
struct _ast1140
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1139>, _str51>, _ast1141>>>> {
}; // ParmVarDecl that
struct _ast1142 : FunctionProtoType<_ast114, Pack<_ast1141>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast1143
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1144> {}; // CXXMethodDecl IsEmpty
struct _ast1144 : PointerType<_ast1145> {
}; // PointerType const v8::Local<v8::FunctionTemplate> *
struct _ast1145 : ConstQualifiedType<_ast1132> {
}; // RecordType const v8::Local<v8::FunctionTemplate>
struct _ast1146
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str53>, _ast113>>,
              Pack<>>>,
          _ast1131> {}; // CXXMethodDecl Clear
struct _ast1147
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str54>, _ast1148>>,
              Pack<>>>,
          _ast1144> {}; // CXXMethodDecl operator->
struct _ast1148 : FunctionProtoType<_ast1149, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::FunctionTemplate *() const
struct _ast1149 : PointerType<_ast1150> {
}; // PointerType v8::FunctionTemplate *
struct _ast1151
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str55>, _ast1148>>,
              Pack<>>>,
          _ast1144> {}; // CXXMethodDecl operator*
struct _ast1154
    : DeclContext<Pack<_ast1155>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str56>, _ast1159>>,
              Pack<_ast1155>>>,
          _ast1144> {}; // CXXMethodDecl operator==
struct _ast1155
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1154>, _str51>, _ast1156>>>> {
}; // ParmVarDecl that
struct _ast1156 : LValueReferenceType<ReferenceType<_ast1157>> {
}; // LValueReferenceType const Local<S> &
struct _ast1157 : ConstQualifiedType<_ast1158> {
}; // TemplateSpecializationType const Local<S>
struct _ast1159
    : FunctionProtoType<_ast129, Pack<_ast1156>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1162
    : DeclContext<Pack<_ast1163>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str56>, _ast1167>>,
              Pack<_ast1163>>>,
          _ast1144> {}; // CXXMethodDecl operator==
struct _ast1163
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1162>, _str51>, _ast1164>>>> {
}; // ParmVarDecl that
struct _ast1164 : LValueReferenceType<ReferenceType<_ast1165>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1165 : ConstQualifiedType<_ast1166> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1167
    : FunctionProtoType<_ast129, Pack<_ast1164>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1170
    : DeclContext<Pack<_ast1171>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str57>, _ast1175>>,
              Pack<_ast1171>>>,
          _ast1144> {}; // CXXMethodDecl operator!=
struct _ast1171
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1170>, _str51>, _ast1172>>>> {
}; // ParmVarDecl that
struct _ast1172 : LValueReferenceType<ReferenceType<_ast1173>> {
}; // LValueReferenceType const Local<S> &
struct _ast1173 : ConstQualifiedType<_ast1174> {
}; // TemplateSpecializationType const Local<S>
struct _ast1175
    : FunctionProtoType<_ast129, Pack<_ast1172>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1178
    : DeclContext<Pack<_ast1179>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str57>, _ast1183>>,
              Pack<_ast1179>>>,
          _ast1144> {}; // CXXMethodDecl operator!=
struct _ast1179
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1178>, _str51>, _ast1180>>>> {
}; // ParmVarDecl that
struct _ast1180 : LValueReferenceType<ReferenceType<_ast1181>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast1181 : ConstQualifiedType<_ast1182> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast1183
    : FunctionProtoType<_ast129, Pack<_ast1180>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1186
    : DeclContext<Pack<_ast1187>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1129>, _str58>, _ast1189>>,
          Pack<_ast1187>>> {}; // CXXMethodDecl Cast
struct _ast1187
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1186>, _str51>, _ast1188>>>> {
}; // ParmVarDecl that
struct _ast1189 : FunctionProtoType<_ast1190, Pack<_ast1188>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (Local<S>)
struct _ast1193
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str59>, _ast1194>>,
              Pack<>>>,
          _ast1144> {}; // CXXMethodDecl As
struct _ast1194 : FunctionProtoType<_ast1195, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast1196
    : DeclContext<Pack<_ast1197, _ast1198>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1129>, _str61>, _ast1200>>,
          Pack<_ast1197, _ast1198>>> {}; // CXXMethodDecl New
struct _ast1197
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1196>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1198
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1196>, _str51>, _ast1199>>>> {
}; // ParmVarDecl that
struct _ast1200
    : FunctionProtoType<_ast1201, Pack<_ast184, _ast1199>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *,
   // Local<v8::FunctionTemplate>)
struct _ast1202
    : DeclContext<Pack<_ast1203, _ast1204>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1129>, _str61>, _ast1208>>,
          Pack<_ast1203, _ast1204>>> {}; // CXXMethodDecl New
struct _ast1203
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1202>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1204
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1202>, _str51>, _ast1205>>>> {
}; // ParmVarDecl that
struct _ast1205 : LValueReferenceType<ReferenceType<_ast1206>> {
}; // LValueReferenceType const PersistentBase<v8::FunctionTemplate> &
struct _ast1206 : ConstQualifiedType<_ast1207> {
}; // TemplateSpecializationType const PersistentBase<v8::FunctionTemplate>
struct _ast1208
    : FunctionProtoType<_ast1209, Pack<_ast184, _ast1205>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const
   // PersistentBase<v8::FunctionTemplate> &)
struct _ast1210
    : DeclContext<Pack<_ast1211, _ast1212>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1129>, _str61>, _ast1216>>,
          Pack<_ast1211, _ast1212>>> {}; // CXXMethodDecl New
struct _ast1211
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1210>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1212
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1210>, _str51>, _ast1213>>>> {
}; // ParmVarDecl that
struct _ast1213 : LValueReferenceType<ReferenceType<_ast1214>> {
}; // LValueReferenceType const TracedGlobal<v8::FunctionTemplate> &
struct _ast1214 : ConstQualifiedType<_ast1215> {
}; // TemplateSpecializationType const TracedGlobal<v8::FunctionTemplate>
struct _ast1216
    : FunctionProtoType<_ast1217, Pack<_ast184, _ast1213>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const
   // TracedGlobal<v8::FunctionTemplate> &)
struct _ast1218
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str50>, _ast1221>>,
              Pack<_ast1219>>>,
          _ast1131>>,
      DeclContext<Pack<_ast1219>> {}; // CXXConstructorDecl Local
struct _ast1219
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1218>, _str62>, _ast1220>>>> {
}; // ParmVarDecl
struct _ast1220 : LValueReferenceType<ReferenceType<_ast1145>> {
}; // LValueReferenceType const v8::Local<v8::FunctionTemplate> &
struct _ast1221 : FunctionProtoType<_ast114, Pack<_ast1220>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::FunctionTemplate> &)
struct _ast1222
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str50>, _ast1225>>,
              Pack<_ast1223>>>,
          _ast1131>>,
      DeclContext<Pack<_ast1223>> {}; // CXXConstructorDecl Local
struct _ast1223
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1222>, _str62>, _ast1224>>>> {
}; // ParmVarDecl
struct _ast1224 : RValueReferenceType<ReferenceType<_ast1132>> {
}; // RValueReferenceType v8::Local<v8::FunctionTemplate> &&
struct _ast1225 : FunctionProtoType<_ast114, Pack<_ast1224>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _ast1226
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1129>, _str63>, _ast214>>,
              Pack<>>>,
          _ast1131>> {}; // CXXDestructorDecl ~Local
struct _ast1230 : DeclContext<Pack<_ast1231,
                                   _ast1236,
                                   _ast1244,
                                   _ast1247,
                                   _ast1248,
                                   _ast1252,
                                   _ast1255,
                                   _ast1263,
                                   _ast1271,
                                   _ast1279,
                                   _ast1287,
                                   _ast1294,
                                   _ast1297,
                                   _ast1303,
                                   _ast1311,
                                   _ast1319,
                                   _ast1323,
                                   _ast1240>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast1231
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str50>, _ast113>>,
              Pack<>>>,
          _ast1232>> {}; // CXXConstructorDecl Local
struct _ast1232 : PointerType<_ast1233> {
}; // PointerType v8::Local<v8::Promise> *
struct _ast1233 : StructOrClassRecordType<RecordType<_ast1230>> {
}; // RecordType v8::Local<v8::Promise>
struct _ast1236
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str50>, _ast1239>>,
              Pack<_ast1237>>>,
          _ast1232>>,
      DeclContext<Pack<_ast1237>> {}; // CXXConstructorDecl Local
struct _ast1237
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1236>, _str51>, _ast1238>>>> {
}; // ParmVarDecl that
struct _ast1239 : FunctionProtoType<_ast114, Pack<_ast1238>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1240
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str50>, _ast1243>>,
              Pack<_ast1241>>>,
          _ast1232>>,
      DeclContext<Pack<_ast1241>> {}; // CXXConstructorDecl Local
struct _ast1241
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1240>, _str51>, _ast1242>>>> {
}; // ParmVarDecl that
struct _ast1243 : FunctionProtoType<_ast114, Pack<_ast1242>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Promise>)
struct _ast1244
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1245> {}; // CXXMethodDecl IsEmpty
struct _ast1245 : PointerType<_ast1246> {
}; // PointerType const v8::Local<v8::Promise> *
struct _ast1246 : ConstQualifiedType<_ast1233> {
}; // RecordType const v8::Local<v8::Promise>
struct _ast1247
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str53>, _ast113>>,
              Pack<>>>,
          _ast1232> {}; // CXXMethodDecl Clear
struct _ast1248
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str54>, _ast1249>>,
              Pack<>>>,
          _ast1245> {}; // CXXMethodDecl operator->
struct _ast1249 : FunctionProtoType<_ast1250, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Promise *() const
struct _ast1250 : PointerType<_ast1251> {}; // PointerType v8::Promise *
struct _ast1252
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str55>, _ast1249>>,
              Pack<>>>,
          _ast1245> {}; // CXXMethodDecl operator*
struct _ast1255
    : DeclContext<Pack<_ast1256>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str56>, _ast1260>>,
              Pack<_ast1256>>>,
          _ast1245> {}; // CXXMethodDecl operator==
struct _ast1256
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1255>, _str51>, _ast1257>>>> {
}; // ParmVarDecl that
struct _ast1257 : LValueReferenceType<ReferenceType<_ast1258>> {
}; // LValueReferenceType const Local<S> &
struct _ast1258 : ConstQualifiedType<_ast1259> {
}; // TemplateSpecializationType const Local<S>
struct _ast1260
    : FunctionProtoType<_ast129, Pack<_ast1257>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1263
    : DeclContext<Pack<_ast1264>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str56>, _ast1268>>,
              Pack<_ast1264>>>,
          _ast1245> {}; // CXXMethodDecl operator==
struct _ast1264
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1263>, _str51>, _ast1265>>>> {
}; // ParmVarDecl that
struct _ast1265 : LValueReferenceType<ReferenceType<_ast1266>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1266 : ConstQualifiedType<_ast1267> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1268
    : FunctionProtoType<_ast129, Pack<_ast1265>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1271
    : DeclContext<Pack<_ast1272>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str57>, _ast1276>>,
              Pack<_ast1272>>>,
          _ast1245> {}; // CXXMethodDecl operator!=
struct _ast1272
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1271>, _str51>, _ast1273>>>> {
}; // ParmVarDecl that
struct _ast1273 : LValueReferenceType<ReferenceType<_ast1274>> {
}; // LValueReferenceType const Local<S> &
struct _ast1274 : ConstQualifiedType<_ast1275> {
}; // TemplateSpecializationType const Local<S>
struct _ast1276
    : FunctionProtoType<_ast129, Pack<_ast1273>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1279
    : DeclContext<Pack<_ast1280>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str57>, _ast1284>>,
              Pack<_ast1280>>>,
          _ast1245> {}; // CXXMethodDecl operator!=
struct _ast1280
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1279>, _str51>, _ast1281>>>> {
}; // ParmVarDecl that
struct _ast1281 : LValueReferenceType<ReferenceType<_ast1282>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast1282 : ConstQualifiedType<_ast1283> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast1284
    : FunctionProtoType<_ast129, Pack<_ast1281>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1287
    : DeclContext<Pack<_ast1288>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1230>, _str58>, _ast1290>>,
          Pack<_ast1288>>> {}; // CXXMethodDecl Cast
struct _ast1288
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1287>, _str51>, _ast1289>>>> {
}; // ParmVarDecl that
struct _ast1290 : FunctionProtoType<_ast1291, Pack<_ast1289>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Promise> (Local<S>)
struct _ast1294
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str59>, _ast1295>>,
              Pack<>>>,
          _ast1245> {}; // CXXMethodDecl As
struct _ast1295 : FunctionProtoType<_ast1296, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast1297
    : DeclContext<Pack<_ast1298, _ast1299>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1230>, _str61>, _ast1301>>,
          Pack<_ast1298, _ast1299>>> {}; // CXXMethodDecl New
struct _ast1298
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1297>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1299
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1297>, _str51>, _ast1300>>>> {
}; // ParmVarDecl that
struct _ast1301
    : FunctionProtoType<_ast1302, Pack<_ast184, _ast1300>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _ast1303
    : DeclContext<Pack<_ast1304, _ast1305>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1230>, _str61>, _ast1309>>,
          Pack<_ast1304, _ast1305>>> {}; // CXXMethodDecl New
struct _ast1304
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1303>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1305
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1303>, _str51>, _ast1306>>>> {
}; // ParmVarDecl that
struct _ast1306 : LValueReferenceType<ReferenceType<_ast1307>> {
}; // LValueReferenceType const PersistentBase<v8::Promise> &
struct _ast1307 : ConstQualifiedType<_ast1308> {
}; // TemplateSpecializationType const PersistentBase<v8::Promise>
struct _ast1309
    : FunctionProtoType<_ast1310, Pack<_ast184, _ast1306>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const
   // PersistentBase<v8::Promise> &)
struct _ast1311
    : DeclContext<Pack<_ast1312, _ast1313>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1230>, _str61>, _ast1317>>,
          Pack<_ast1312, _ast1313>>> {}; // CXXMethodDecl New
struct _ast1312
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1311>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1313
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1311>, _str51>, _ast1314>>>> {
}; // ParmVarDecl that
struct _ast1314 : LValueReferenceType<ReferenceType<_ast1315>> {
}; // LValueReferenceType const TracedGlobal<v8::Promise> &
struct _ast1315 : ConstQualifiedType<_ast1316> {
}; // TemplateSpecializationType const TracedGlobal<v8::Promise>
struct _ast1317
    : FunctionProtoType<_ast1318, Pack<_ast184, _ast1314>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const
   // TracedGlobal<v8::Promise> &)
struct _ast1319
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str50>, _ast1322>>,
              Pack<_ast1320>>>,
          _ast1232>>,
      DeclContext<Pack<_ast1320>> {}; // CXXConstructorDecl Local
struct _ast1320
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1319>, _str62>, _ast1321>>>> {
}; // ParmVarDecl
struct _ast1321 : LValueReferenceType<ReferenceType<_ast1246>> {
}; // LValueReferenceType const v8::Local<v8::Promise> &
struct _ast1322 : FunctionProtoType<_ast114, Pack<_ast1321>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Promise> &) noexcept
struct _ast1323
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1230>, _str50>, _ast1326>>,
              Pack<_ast1324>>>,
          _ast1232>>,
      DeclContext<Pack<_ast1324>> {}; // CXXConstructorDecl Local
struct _ast1324
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1323>, _str62>, _ast1325>>>> {
}; // ParmVarDecl
struct _ast1325 : RValueReferenceType<ReferenceType<_ast1233>> {
}; // RValueReferenceType v8::Local<v8::Promise> &&
struct _ast1326 : FunctionProtoType<_ast114, Pack<_ast1325>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Promise> &&)
struct _ast1340 : DeclContext<Pack<_ast1341,
                                   _ast1346,
                                   _ast1354,
                                   _ast1357,
                                   _ast1358,
                                   _ast1362,
                                   _ast1365,
                                   _ast1373,
                                   _ast1381,
                                   _ast1389,
                                   _ast1397,
                                   _ast1404,
                                   _ast1407,
                                   _ast1413,
                                   _ast1421,
                                   _ast1429,
                                   _ast1433,
                                   _ast1350,
                                   _ast1437>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast1341
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str50>, _ast113>>,
              Pack<>>>,
          _ast1342>> {};                    // CXXConstructorDecl Local
struct _ast1342 : PointerType<_ast1343> {}; // PointerType v8::Local<v8::Data> *
struct _ast1343 : StructOrClassRecordType<RecordType<_ast1340>> {
}; // RecordType v8::Local<v8::Data>
struct _ast1346
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str50>, _ast1349>>,
              Pack<_ast1347>>>,
          _ast1342>>,
      DeclContext<Pack<_ast1347>> {}; // CXXConstructorDecl Local
struct _ast1347
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1346>, _str51>, _ast1348>>>> {
}; // ParmVarDecl that
struct _ast1349 : FunctionProtoType<_ast114, Pack<_ast1348>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1350
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str50>, _ast1353>>,
              Pack<_ast1351>>>,
          _ast1342>>,
      DeclContext<Pack<_ast1351>> {}; // CXXConstructorDecl Local
struct _ast1351
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1350>, _str51>, _ast1352>>>> {
}; // ParmVarDecl that
struct _ast1353 : FunctionProtoType<_ast114, Pack<_ast1352>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Data>)
struct _ast1354
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1355> {}; // CXXMethodDecl IsEmpty
struct _ast1355 : PointerType<_ast1356> {
}; // PointerType const v8::Local<v8::Data> *
struct _ast1356 : ConstQualifiedType<_ast1343> {
}; // RecordType const v8::Local<v8::Data>
struct _ast1357
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str53>, _ast113>>,
              Pack<>>>,
          _ast1342> {}; // CXXMethodDecl Clear
struct _ast1358
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str54>, _ast1359>>,
              Pack<>>>,
          _ast1355> {}; // CXXMethodDecl operator->
struct _ast1359 : FunctionProtoType<_ast1360, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Data *() const
struct _ast1360 : PointerType<_ast1361> {}; // PointerType v8::Data *
struct _ast1362
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str55>, _ast1359>>,
              Pack<>>>,
          _ast1355> {}; // CXXMethodDecl operator*
struct _ast1365
    : DeclContext<Pack<_ast1366>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str56>, _ast1370>>,
              Pack<_ast1366>>>,
          _ast1355> {}; // CXXMethodDecl operator==
struct _ast1366
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1365>, _str51>, _ast1367>>>> {
}; // ParmVarDecl that
struct _ast1367 : LValueReferenceType<ReferenceType<_ast1368>> {
}; // LValueReferenceType const Local<S> &
struct _ast1368 : ConstQualifiedType<_ast1369> {
}; // TemplateSpecializationType const Local<S>
struct _ast1370
    : FunctionProtoType<_ast129, Pack<_ast1367>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1373
    : DeclContext<Pack<_ast1374>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str56>, _ast1378>>,
              Pack<_ast1374>>>,
          _ast1355> {}; // CXXMethodDecl operator==
struct _ast1374
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1373>, _str51>, _ast1375>>>> {
}; // ParmVarDecl that
struct _ast1375 : LValueReferenceType<ReferenceType<_ast1376>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1376 : ConstQualifiedType<_ast1377> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1378
    : FunctionProtoType<_ast129, Pack<_ast1375>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1381
    : DeclContext<Pack<_ast1382>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str57>, _ast1386>>,
              Pack<_ast1382>>>,
          _ast1355> {}; // CXXMethodDecl operator!=
struct _ast1382
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1381>, _str51>, _ast1383>>>> {
}; // ParmVarDecl that
struct _ast1383 : LValueReferenceType<ReferenceType<_ast1384>> {
}; // LValueReferenceType const Local<S> &
struct _ast1384 : ConstQualifiedType<_ast1385> {
}; // TemplateSpecializationType const Local<S>
struct _ast1386
    : FunctionProtoType<_ast129, Pack<_ast1383>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1389
    : DeclContext<Pack<_ast1390>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str57>, _ast1394>>,
              Pack<_ast1390>>>,
          _ast1355> {}; // CXXMethodDecl operator!=
struct _ast1390
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1389>, _str51>, _ast1391>>>> {
}; // ParmVarDecl that
struct _ast1391 : LValueReferenceType<ReferenceType<_ast1392>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast1392 : ConstQualifiedType<_ast1393> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast1394
    : FunctionProtoType<_ast129, Pack<_ast1391>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1397
    : DeclContext<Pack<_ast1398>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1340>, _str58>, _ast1400>>,
          Pack<_ast1398>>> {}; // CXXMethodDecl Cast
struct _ast1398
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1397>, _str51>, _ast1399>>>> {
}; // ParmVarDecl that
struct _ast1400 : FunctionProtoType<_ast1401, Pack<_ast1399>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Data> (Local<S>)
struct _ast1404
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str59>, _ast1405>>,
              Pack<>>>,
          _ast1355> {}; // CXXMethodDecl As
struct _ast1405 : FunctionProtoType<_ast1406, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast1407
    : DeclContext<Pack<_ast1408, _ast1409>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1340>, _str61>, _ast1411>>,
          Pack<_ast1408, _ast1409>>> {}; // CXXMethodDecl New
struct _ast1408
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1407>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1409
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1407>, _str51>, _ast1410>>>> {
}; // ParmVarDecl that
struct _ast1411
    : FunctionProtoType<_ast1412, Pack<_ast184, _ast1410>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _ast1413
    : DeclContext<Pack<_ast1414, _ast1415>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1340>, _str61>, _ast1419>>,
          Pack<_ast1414, _ast1415>>> {}; // CXXMethodDecl New
struct _ast1414
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1413>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1415
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1413>, _str51>, _ast1416>>>> {
}; // ParmVarDecl that
struct _ast1416 : LValueReferenceType<ReferenceType<_ast1417>> {
}; // LValueReferenceType const PersistentBase<v8::Data> &
struct _ast1417 : ConstQualifiedType<_ast1418> {
}; // TemplateSpecializationType const PersistentBase<v8::Data>
struct _ast1419
    : FunctionProtoType<_ast1420, Pack<_ast184, _ast1416>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const
   // PersistentBase<v8::Data> &)
struct _ast1421
    : DeclContext<Pack<_ast1422, _ast1423>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1340>, _str61>, _ast1427>>,
          Pack<_ast1422, _ast1423>>> {}; // CXXMethodDecl New
struct _ast1422
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1421>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1423
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1421>, _str51>, _ast1424>>>> {
}; // ParmVarDecl that
struct _ast1424 : LValueReferenceType<ReferenceType<_ast1425>> {
}; // LValueReferenceType const TracedGlobal<v8::Data> &
struct _ast1425 : ConstQualifiedType<_ast1426> {
}; // TemplateSpecializationType const TracedGlobal<v8::Data>
struct _ast1427
    : FunctionProtoType<_ast1428, Pack<_ast184, _ast1424>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const
   // TracedGlobal<v8::Data> &)
struct _ast1429
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str50>, _ast1432>>,
              Pack<_ast1430>>>,
          _ast1342>>,
      DeclContext<Pack<_ast1430>> {}; // CXXConstructorDecl Local
struct _ast1430
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1429>, _str62>, _ast1431>>>> {
}; // ParmVarDecl
struct _ast1431 : LValueReferenceType<ReferenceType<_ast1356>> {
}; // LValueReferenceType const v8::Local<v8::Data> &
struct _ast1432 : FunctionProtoType<_ast114, Pack<_ast1431>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Data> &) noexcept
struct _ast1433
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str50>, _ast1436>>,
              Pack<_ast1434>>>,
          _ast1342>>,
      DeclContext<Pack<_ast1434>> {}; // CXXConstructorDecl Local
struct _ast1434
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1433>, _str62>, _ast1435>>>> {
}; // ParmVarDecl
struct _ast1435 : RValueReferenceType<ReferenceType<_ast1343>> {
}; // RValueReferenceType v8::Local<v8::Data> &&
struct _ast1436 : FunctionProtoType<_ast114, Pack<_ast1435>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Data> &&)
struct _ast1437
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1340>, _str63>, _ast214>>,
              Pack<>>>,
          _ast1342>> {}; // CXXDestructorDecl ~Local
struct _ast1438 : DeclContext<Pack<_ast1439,
                                   _ast1444,
                                   _ast1452,
                                   _ast1455,
                                   _ast1456,
                                   _ast1460,
                                   _ast1463,
                                   _ast1471,
                                   _ast1479,
                                   _ast1487,
                                   _ast1495,
                                   _ast1502,
                                   _ast1505,
                                   _ast1511,
                                   _ast1519,
                                   _ast1527,
                                   _ast1531,
                                   _ast1535,
                                   _ast1448>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast1439
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str50>, _ast113>>,
              Pack<>>>,
          _ast1440>> {}; // CXXConstructorDecl Local
struct _ast1440 : PointerType<_ast1441> {
}; // PointerType v8::Local<v8::AccessorSignature> *
struct _ast1441 : StructOrClassRecordType<RecordType<_ast1438>> {
}; // RecordType v8::Local<v8::AccessorSignature>
struct _ast1444
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str50>, _ast1447>>,
              Pack<_ast1445>>>,
          _ast1440>>,
      DeclContext<Pack<_ast1445>> {}; // CXXConstructorDecl Local
struct _ast1445
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1444>, _str51>, _ast1446>>>> {
}; // ParmVarDecl that
struct _ast1447 : FunctionProtoType<_ast114, Pack<_ast1446>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1448
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str50>, _ast1451>>,
              Pack<_ast1449>>>,
          _ast1440>>,
      DeclContext<Pack<_ast1449>> {}; // CXXConstructorDecl Local
struct _ast1449
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1448>, _str51>, _ast1450>>>> {
}; // ParmVarDecl that
struct _ast1451 : FunctionProtoType<_ast114, Pack<_ast1450>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::AccessorSignature>)
struct _ast1452
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1453> {}; // CXXMethodDecl IsEmpty
struct _ast1453 : PointerType<_ast1454> {
}; // PointerType const v8::Local<v8::AccessorSignature> *
struct _ast1454 : ConstQualifiedType<_ast1441> {
}; // RecordType const v8::Local<v8::AccessorSignature>
struct _ast1455
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str53>, _ast113>>,
              Pack<>>>,
          _ast1440> {}; // CXXMethodDecl Clear
struct _ast1456
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str54>, _ast1457>>,
              Pack<>>>,
          _ast1453> {}; // CXXMethodDecl operator->
struct _ast1457 : FunctionProtoType<_ast1458, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::AccessorSignature *() const
struct _ast1458 : PointerType<_ast1459> {
}; // PointerType v8::AccessorSignature *
struct _ast1460
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str55>, _ast1457>>,
              Pack<>>>,
          _ast1453> {}; // CXXMethodDecl operator*
struct _ast1463
    : DeclContext<Pack<_ast1464>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str56>, _ast1468>>,
              Pack<_ast1464>>>,
          _ast1453> {}; // CXXMethodDecl operator==
struct _ast1464
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1463>, _str51>, _ast1465>>>> {
}; // ParmVarDecl that
struct _ast1465 : LValueReferenceType<ReferenceType<_ast1466>> {
}; // LValueReferenceType const Local<S> &
struct _ast1466 : ConstQualifiedType<_ast1467> {
}; // TemplateSpecializationType const Local<S>
struct _ast1468
    : FunctionProtoType<_ast129, Pack<_ast1465>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1471
    : DeclContext<Pack<_ast1472>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str56>, _ast1476>>,
              Pack<_ast1472>>>,
          _ast1453> {}; // CXXMethodDecl operator==
struct _ast1472
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1471>, _str51>, _ast1473>>>> {
}; // ParmVarDecl that
struct _ast1473 : LValueReferenceType<ReferenceType<_ast1474>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1474 : ConstQualifiedType<_ast1475> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1476
    : FunctionProtoType<_ast129, Pack<_ast1473>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1479
    : DeclContext<Pack<_ast1480>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str57>, _ast1484>>,
              Pack<_ast1480>>>,
          _ast1453> {}; // CXXMethodDecl operator!=
struct _ast1480
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1479>, _str51>, _ast1481>>>> {
}; // ParmVarDecl that
struct _ast1481 : LValueReferenceType<ReferenceType<_ast1482>> {
}; // LValueReferenceType const Local<S> &
struct _ast1482 : ConstQualifiedType<_ast1483> {
}; // TemplateSpecializationType const Local<S>
struct _ast1484
    : FunctionProtoType<_ast129, Pack<_ast1481>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1487
    : DeclContext<Pack<_ast1488>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str57>, _ast1492>>,
              Pack<_ast1488>>>,
          _ast1453> {}; // CXXMethodDecl operator!=
struct _ast1488
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1487>, _str51>, _ast1489>>>> {
}; // ParmVarDecl that
struct _ast1489 : LValueReferenceType<ReferenceType<_ast1490>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast1490 : ConstQualifiedType<_ast1491> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast1492
    : FunctionProtoType<_ast129, Pack<_ast1489>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1495
    : DeclContext<Pack<_ast1496>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1438>, _str58>, _ast1498>>,
          Pack<_ast1496>>> {}; // CXXMethodDecl Cast
struct _ast1496
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1495>, _str51>, _ast1497>>>> {
}; // ParmVarDecl that
struct _ast1498 : FunctionProtoType<_ast1499, Pack<_ast1497>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::AccessorSignature> (Local<S>)
struct _ast1502
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str59>, _ast1503>>,
              Pack<>>>,
          _ast1453> {}; // CXXMethodDecl As
struct _ast1503 : FunctionProtoType<_ast1504, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast1505
    : DeclContext<Pack<_ast1506, _ast1507>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1438>, _str61>, _ast1509>>,
          Pack<_ast1506, _ast1507>>> {}; // CXXMethodDecl New
struct _ast1506
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1505>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1507
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1505>, _str51>, _ast1508>>>> {
}; // ParmVarDecl that
struct _ast1509
    : FunctionProtoType<_ast1510, Pack<_ast184, _ast1508>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *,
   // Local<v8::AccessorSignature>)
struct _ast1511
    : DeclContext<Pack<_ast1512, _ast1513>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1438>, _str61>, _ast1517>>,
          Pack<_ast1512, _ast1513>>> {}; // CXXMethodDecl New
struct _ast1512
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1511>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1513
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1511>, _str51>, _ast1514>>>> {
}; // ParmVarDecl that
struct _ast1514 : LValueReferenceType<ReferenceType<_ast1515>> {
}; // LValueReferenceType const PersistentBase<v8::AccessorSignature> &
struct _ast1515 : ConstQualifiedType<_ast1516> {
}; // TemplateSpecializationType const PersistentBase<v8::AccessorSignature>
struct _ast1517
    : FunctionProtoType<_ast1518, Pack<_ast184, _ast1514>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const
   // PersistentBase<v8::AccessorSignature> &)
struct _ast1519
    : DeclContext<Pack<_ast1520, _ast1521>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1438>, _str61>, _ast1525>>,
          Pack<_ast1520, _ast1521>>> {}; // CXXMethodDecl New
struct _ast1520
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1519>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1521
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1519>, _str51>, _ast1522>>>> {
}; // ParmVarDecl that
struct _ast1522 : LValueReferenceType<ReferenceType<_ast1523>> {
}; // LValueReferenceType const TracedGlobal<v8::AccessorSignature> &
struct _ast1523 : ConstQualifiedType<_ast1524> {
}; // TemplateSpecializationType const TracedGlobal<v8::AccessorSignature>
struct _ast1525
    : FunctionProtoType<_ast1526, Pack<_ast184, _ast1522>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const
   // TracedGlobal<v8::AccessorSignature> &)
struct _ast1527
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str50>, _ast1530>>,
              Pack<_ast1528>>>,
          _ast1440>>,
      DeclContext<Pack<_ast1528>> {}; // CXXConstructorDecl Local
struct _ast1528
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1527>, _str62>, _ast1529>>>> {
}; // ParmVarDecl
struct _ast1529 : LValueReferenceType<ReferenceType<_ast1454>> {
}; // LValueReferenceType const v8::Local<v8::AccessorSignature> &
struct _ast1530 : FunctionProtoType<_ast114, Pack<_ast1529>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::AccessorSignature> &)
struct _ast1531
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str50>, _ast1534>>,
              Pack<_ast1532>>>,
          _ast1440>>,
      DeclContext<Pack<_ast1532>> {}; // CXXConstructorDecl Local
struct _ast1532
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1531>, _str62>, _ast1533>>>> {
}; // ParmVarDecl
struct _ast1533 : RValueReferenceType<ReferenceType<_ast1441>> {
}; // RValueReferenceType v8::Local<v8::AccessorSignature> &&
struct _ast1534 : FunctionProtoType<_ast114, Pack<_ast1533>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _ast1535
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1438>, _str63>, _ast214>>,
              Pack<>>>,
          _ast1440>> {}; // CXXDestructorDecl ~Local
struct _ast1536 : DeclContext<Pack<_ast1537,
                                   _ast1542,
                                   _ast1550,
                                   _ast1553,
                                   _ast1554,
                                   _ast1558,
                                   _ast1561,
                                   _ast1569,
                                   _ast1577,
                                   _ast1585,
                                   _ast1593,
                                   _ast1600,
                                   _ast1603,
                                   _ast1609,
                                   _ast1617,
                                   _ast1625,
                                   _ast1629,
                                   _ast1633,
                                   _ast1546>> {
}; // ClassTemplateSpecializationDecl Local
struct _ast1537
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str50>, _ast113>>,
              Pack<>>>,
          _ast1538>> {}; // CXXConstructorDecl Local
struct _ast1538 : PointerType<_ast1539> {
}; // PointerType v8::Local<v8::Signature> *
struct _ast1539 : StructOrClassRecordType<RecordType<_ast1536>> {
}; // RecordType v8::Local<v8::Signature>
struct _ast1542
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str50>, _ast1545>>,
              Pack<_ast1543>>>,
          _ast1538>>,
      DeclContext<Pack<_ast1543>> {}; // CXXConstructorDecl Local
struct _ast1543
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1542>, _str51>, _ast1544>>>> {
}; // ParmVarDecl that
struct _ast1545 : FunctionProtoType<_ast114, Pack<_ast1544>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1546
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str50>, _ast1549>>,
              Pack<_ast1547>>>,
          _ast1538>>,
      DeclContext<Pack<_ast1547>> {}; // CXXConstructorDecl Local
struct _ast1547
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1546>, _str51>, _ast1548>>>> {
}; // ParmVarDecl that
struct _ast1549 : FunctionProtoType<_ast114, Pack<_ast1548>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Signature>)
struct _ast1550
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1551> {}; // CXXMethodDecl IsEmpty
struct _ast1551 : PointerType<_ast1552> {
}; // PointerType const v8::Local<v8::Signature> *
struct _ast1552 : ConstQualifiedType<_ast1539> {
}; // RecordType const v8::Local<v8::Signature>
struct _ast1553
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str53>, _ast113>>,
              Pack<>>>,
          _ast1538> {}; // CXXMethodDecl Clear
struct _ast1554
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str54>, _ast1555>>,
              Pack<>>>,
          _ast1551> {}; // CXXMethodDecl operator->
struct _ast1555 : FunctionProtoType<_ast1556, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Signature *() const
struct _ast1556 : PointerType<_ast1557> {}; // PointerType v8::Signature *
struct _ast1558
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str55>, _ast1555>>,
              Pack<>>>,
          _ast1551> {}; // CXXMethodDecl operator*
struct _ast1561
    : DeclContext<Pack<_ast1562>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str56>, _ast1566>>,
              Pack<_ast1562>>>,
          _ast1551> {}; // CXXMethodDecl operator==
struct _ast1562
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1561>, _str51>, _ast1563>>>> {
}; // ParmVarDecl that
struct _ast1563 : LValueReferenceType<ReferenceType<_ast1564>> {
}; // LValueReferenceType const Local<S> &
struct _ast1564 : ConstQualifiedType<_ast1565> {
}; // TemplateSpecializationType const Local<S>
struct _ast1566
    : FunctionProtoType<_ast129, Pack<_ast1563>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1569
    : DeclContext<Pack<_ast1570>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str56>, _ast1574>>,
              Pack<_ast1570>>>,
          _ast1551> {}; // CXXMethodDecl operator==
struct _ast1570
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1569>, _str51>, _ast1571>>>> {
}; // ParmVarDecl that
struct _ast1571 : LValueReferenceType<ReferenceType<_ast1572>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1572 : ConstQualifiedType<_ast1573> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1574
    : FunctionProtoType<_ast129, Pack<_ast1571>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1577
    : DeclContext<Pack<_ast1578>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str57>, _ast1582>>,
              Pack<_ast1578>>>,
          _ast1551> {}; // CXXMethodDecl operator!=
struct _ast1578
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1577>, _str51>, _ast1579>>>> {
}; // ParmVarDecl that
struct _ast1579 : LValueReferenceType<ReferenceType<_ast1580>> {
}; // LValueReferenceType const Local<S> &
struct _ast1580 : ConstQualifiedType<_ast1581> {
}; // TemplateSpecializationType const Local<S>
struct _ast1582
    : FunctionProtoType<_ast129, Pack<_ast1579>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1585
    : DeclContext<Pack<_ast1586>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str57>, _ast1590>>,
              Pack<_ast1586>>>,
          _ast1551> {}; // CXXMethodDecl operator!=
struct _ast1586
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1585>, _str51>, _ast1587>>>> {
}; // ParmVarDecl that
struct _ast1587 : LValueReferenceType<ReferenceType<_ast1588>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast1588 : ConstQualifiedType<_ast1589> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast1590
    : FunctionProtoType<_ast129, Pack<_ast1587>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1593
    : DeclContext<Pack<_ast1594>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1536>, _str58>, _ast1596>>,
          Pack<_ast1594>>> {}; // CXXMethodDecl Cast
struct _ast1594
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1593>, _str51>, _ast1595>>>> {
}; // ParmVarDecl that
struct _ast1596 : FunctionProtoType<_ast1597, Pack<_ast1595>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Signature> (Local<S>)
struct _ast1600
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str59>, _ast1601>>,
              Pack<>>>,
          _ast1551> {}; // CXXMethodDecl As
struct _ast1601 : FunctionProtoType<_ast1602, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast1603
    : DeclContext<Pack<_ast1604, _ast1605>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1536>, _str61>, _ast1607>>,
          Pack<_ast1604, _ast1605>>> {}; // CXXMethodDecl New
struct _ast1604
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1603>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1605
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1603>, _str51>, _ast1606>>>> {
}; // ParmVarDecl that
struct _ast1607
    : FunctionProtoType<_ast1608, Pack<_ast184, _ast1606>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
   // Local<v8::Signature>)
struct _ast1609
    : DeclContext<Pack<_ast1610, _ast1611>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1536>, _str61>, _ast1615>>,
          Pack<_ast1610, _ast1611>>> {}; // CXXMethodDecl New
struct _ast1610
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1609>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1611
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1609>, _str51>, _ast1612>>>> {
}; // ParmVarDecl that
struct _ast1612 : LValueReferenceType<ReferenceType<_ast1613>> {
}; // LValueReferenceType const PersistentBase<v8::Signature> &
struct _ast1613 : ConstQualifiedType<_ast1614> {
}; // TemplateSpecializationType const PersistentBase<v8::Signature>
struct _ast1615
    : FunctionProtoType<_ast1616, Pack<_ast184, _ast1612>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const
   // PersistentBase<v8::Signature> &)
struct _ast1617
    : DeclContext<Pack<_ast1618, _ast1619>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1536>, _str61>, _ast1623>>,
          Pack<_ast1618, _ast1619>>> {}; // CXXMethodDecl New
struct _ast1618
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1617>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1619
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1617>, _str51>, _ast1620>>>> {
}; // ParmVarDecl that
struct _ast1620 : LValueReferenceType<ReferenceType<_ast1621>> {
}; // LValueReferenceType const TracedGlobal<v8::Signature> &
struct _ast1621 : ConstQualifiedType<_ast1622> {
}; // TemplateSpecializationType const TracedGlobal<v8::Signature>
struct _ast1623
    : FunctionProtoType<_ast1624, Pack<_ast184, _ast1620>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const
   // TracedGlobal<v8::Signature> &)
struct _ast1625
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str50>, _ast1628>>,
              Pack<_ast1626>>>,
          _ast1538>>,
      DeclContext<Pack<_ast1626>> {}; // CXXConstructorDecl Local
struct _ast1626
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1625>, _str62>, _ast1627>>>> {
}; // ParmVarDecl
struct _ast1627 : LValueReferenceType<ReferenceType<_ast1552>> {
}; // LValueReferenceType const v8::Local<v8::Signature> &
struct _ast1628 : FunctionProtoType<_ast114, Pack<_ast1627>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Local<v8::Signature> &)
struct _ast1629
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str50>, _ast1632>>,
              Pack<_ast1630>>>,
          _ast1538>>,
      DeclContext<Pack<_ast1630>> {}; // CXXConstructorDecl Local
struct _ast1630
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1629>, _str62>, _ast1631>>>> {
}; // ParmVarDecl
struct _ast1631 : RValueReferenceType<ReferenceType<_ast1539>> {
}; // RValueReferenceType v8::Local<v8::Signature> &&
struct _ast1632 : FunctionProtoType<_ast114, Pack<_ast1631>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Local<v8::Signature> &&) noexcept
struct _ast1633
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1536>, _str63>, _ast214>>,
              Pack<>>>,
          _ast1538>> {}; // CXXDestructorDecl ~Local
struct _ast1640
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str65>, _ast1641>,
                     None>,
          None> {}; // CXXRecordDecl MaybeLocal
struct _ast1643 : DeclContext<Pack<_ast1644,
                                   _ast1649,
                                   _ast1653,
                                   _ast1658,
                                   _ast1663,
                                   _ast1668,
                                   _ast1673,
                                   _ast1677,
                                   _ast1681>> {
}; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1644
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str65>, _ast113>>,
              Pack<>>>,
          _ast1645>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1645 : PointerType<_ast1646> {
}; // PointerType v8::MaybeLocal<v8::Value> *
struct _ast1646 : StructOrClassRecordType<RecordType<_ast1643>> {
}; // RecordType v8::MaybeLocal<v8::Value>
struct _ast1649
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str65>, _ast1652>>,
              Pack<_ast1650>>>,
          _ast1645>>,
      DeclContext<Pack<_ast1650>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1650
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1649>, _str51>, _ast1651>>>> {
}; // ParmVarDecl that
struct _ast1652 : FunctionProtoType<_ast114, Pack<_ast1651>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1653
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1654> {}; // CXXMethodDecl IsEmpty
struct _ast1654 : PointerType<_ast1655> {
}; // PointerType const v8::MaybeLocal<v8::Value> *
struct _ast1655 : ConstQualifiedType<_ast1646> {
}; // RecordType const v8::MaybeLocal<v8::Value>
struct _ast1658
    : DeclContext<Pack<_ast1659>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str67>, _ast1662>>,
              Pack<_ast1659>>>,
          _ast1654> {}; // CXXMethodDecl ToLocal
struct _ast1659
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1658>, _str66>, _ast1660>>>> {
};                                          // ParmVarDecl out
struct _ast1660 : PointerType<_ast1661> {}; // PointerType Local<S> *
struct _ast1662
    : FunctionProtoType<_ast129, Pack<_ast1660>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<S> *) const
struct _ast1663
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str68>, _ast1664>>,
              Pack<>>>,
          _ast1645> {}; // CXXMethodDecl ToLocalChecked
struct _ast1664 : FunctionProtoType<_ast1665, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast1668
    : DeclContext<Pack<_ast1669>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str70>, _ast1671>>,
              Pack<_ast1669>>>,
          _ast1654> {}; // CXXMethodDecl FromMaybe
struct _ast1669
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1668>, _str69>, _ast1670>>>> {
}; // ParmVarDecl default_value
struct _ast1671
    : FunctionProtoType<_ast1672, Pack<_ast1670>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1673
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str65>, _ast1676>>,
              Pack<_ast1674>>>,
          _ast1645>>,
      DeclContext<Pack<_ast1674>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1674
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1673>, _str62>, _ast1675>>>> {
}; // ParmVarDecl
struct _ast1675 : LValueReferenceType<ReferenceType<_ast1655>> {
}; // LValueReferenceType const v8::MaybeLocal<v8::Value> &
struct _ast1676 : FunctionProtoType<_ast114, Pack<_ast1675>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::MaybeLocal<v8::Value> &)
struct _ast1677
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str65>, _ast1680>>,
              Pack<_ast1678>>>,
          _ast1645>>,
      DeclContext<Pack<_ast1678>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1678
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1677>, _str62>, _ast1679>>>> {
}; // ParmVarDecl
struct _ast1679 : RValueReferenceType<ReferenceType<_ast1646>> {
}; // RValueReferenceType v8::MaybeLocal<v8::Value> &&
struct _ast1680 : FunctionProtoType<_ast114, Pack<_ast1679>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _ast1681
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1643>, _str71>, _ast214>>,
              Pack<>>>,
          _ast1645>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1685 : DeclContext<Pack<_ast1686,
                                   _ast1691,
                                   _ast1695,
                                   _ast1700,
                                   _ast1705,
                                   _ast1710,
                                   _ast1715>> {
}; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1686
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str65>, _ast113>>,
              Pack<>>>,
          _ast1687>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1687 : PointerType<_ast1688> {
}; // PointerType v8::MaybeLocal<v8::String> *
struct _ast1688 : StructOrClassRecordType<RecordType<_ast1685>> {
}; // RecordType v8::MaybeLocal<v8::String>
struct _ast1691
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str65>, _ast1694>>,
              Pack<_ast1692>>>,
          _ast1687>>,
      DeclContext<Pack<_ast1692>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1692
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1691>, _str51>, _ast1693>>>> {
}; // ParmVarDecl that
struct _ast1694 : FunctionProtoType<_ast114, Pack<_ast1693>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1695
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1696> {}; // CXXMethodDecl IsEmpty
struct _ast1696 : PointerType<_ast1697> {
}; // PointerType const v8::MaybeLocal<v8::String> *
struct _ast1697 : ConstQualifiedType<_ast1688> {
}; // RecordType const v8::MaybeLocal<v8::String>
struct _ast1700
    : DeclContext<Pack<_ast1701>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str67>, _ast1704>>,
              Pack<_ast1701>>>,
          _ast1696> {}; // CXXMethodDecl ToLocal
struct _ast1701
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1700>, _str66>, _ast1702>>>> {
};                                          // ParmVarDecl out
struct _ast1702 : PointerType<_ast1703> {}; // PointerType Local<S> *
struct _ast1704
    : FunctionProtoType<_ast129, Pack<_ast1702>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<S> *) const
struct _ast1705
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str68>, _ast1706>>,
              Pack<>>>,
          _ast1687> {}; // CXXMethodDecl ToLocalChecked
struct _ast1706 : FunctionProtoType<_ast1707, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> ()
struct _ast1710
    : DeclContext<Pack<_ast1711>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str70>, _ast1713>>,
              Pack<_ast1711>>>,
          _ast1696> {}; // CXXMethodDecl FromMaybe
struct _ast1711
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1710>, _str69>, _ast1712>>>> {
}; // ParmVarDecl default_value
struct _ast1713
    : FunctionProtoType<_ast1714, Pack<_ast1712>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1715
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1685>, _str71>, _ast214>>,
              Pack<>>>,
          _ast1687>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1716 : DeclContext<Pack<_ast1717,
                                   _ast1722,
                                   _ast1726,
                                   _ast1731,
                                   _ast1736,
                                   _ast1741,
                                   _ast1746,
                                   _ast1747,
                                   _ast1751>> {
}; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1717
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str65>, _ast113>>,
              Pack<>>>,
          _ast1718>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1718 : PointerType<_ast1719> {
}; // PointerType v8::MaybeLocal<v8::Object> *
struct _ast1719 : StructOrClassRecordType<RecordType<_ast1716>> {
}; // RecordType v8::MaybeLocal<v8::Object>
struct _ast1722
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str65>, _ast1725>>,
              Pack<_ast1723>>>,
          _ast1718>>,
      DeclContext<Pack<_ast1723>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1723
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1722>, _str51>, _ast1724>>>> {
}; // ParmVarDecl that
struct _ast1725 : FunctionProtoType<_ast114, Pack<_ast1724>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1726
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1727> {}; // CXXMethodDecl IsEmpty
struct _ast1727 : PointerType<_ast1728> {
}; // PointerType const v8::MaybeLocal<v8::Object> *
struct _ast1728 : ConstQualifiedType<_ast1719> {
}; // RecordType const v8::MaybeLocal<v8::Object>
struct _ast1731
    : DeclContext<Pack<_ast1732>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str67>, _ast1735>>,
              Pack<_ast1732>>>,
          _ast1727> {}; // CXXMethodDecl ToLocal
struct _ast1732
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1731>, _str66>, _ast1733>>>> {
};                                          // ParmVarDecl out
struct _ast1733 : PointerType<_ast1734> {}; // PointerType Local<S> *
struct _ast1735
    : FunctionProtoType<_ast129, Pack<_ast1733>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<S> *) const
struct _ast1736
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str68>, _ast1737>>,
              Pack<>>>,
          _ast1718> {}; // CXXMethodDecl ToLocalChecked
struct _ast1737 : FunctionProtoType<_ast1738, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> ()
struct _ast1741
    : DeclContext<Pack<_ast1742>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str70>, _ast1744>>,
              Pack<_ast1742>>>,
          _ast1727> {}; // CXXMethodDecl FromMaybe
struct _ast1742
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1741>, _str69>, _ast1743>>>> {
}; // ParmVarDecl default_value
struct _ast1744
    : FunctionProtoType<_ast1745, Pack<_ast1743>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1746
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str71>, _ast214>>,
              Pack<>>>,
          _ast1718>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1747
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str65>, _ast1750>>,
              Pack<_ast1748>>>,
          _ast1718>>,
      DeclContext<Pack<_ast1748>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1748
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1747>, _str62>, _ast1749>>>> {
}; // ParmVarDecl
struct _ast1749 : LValueReferenceType<ReferenceType<_ast1728>> {
}; // LValueReferenceType const v8::MaybeLocal<v8::Object> &
struct _ast1750 : FunctionProtoType<_ast114, Pack<_ast1749>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::MaybeLocal<v8::Object> &)
struct _ast1751
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1716>, _str65>, _ast1754>>,
              Pack<_ast1752>>>,
          _ast1718>>,
      DeclContext<Pack<_ast1752>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1752
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1751>, _str62>, _ast1753>>>> {
}; // ParmVarDecl
struct _ast1753 : RValueReferenceType<ReferenceType<_ast1719>> {
}; // RValueReferenceType v8::MaybeLocal<v8::Object> &&
struct _ast1754 : FunctionProtoType<_ast114, Pack<_ast1753>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _ast1770 : DeclContext<Pack<_ast1771,
                                   _ast1776,
                                   _ast1780,
                                   _ast1785,
                                   _ast1790,
                                   _ast1795,
                                   _ast1800,
                                   _ast1804,
                                   _ast1808>> {
}; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1771
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str65>, _ast113>>,
              Pack<>>>,
          _ast1772>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1772 : PointerType<_ast1773> {
}; // PointerType v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1773 : StructOrClassRecordType<RecordType<_ast1770>> {
}; // RecordType v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1776
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str65>, _ast1779>>,
              Pack<_ast1777>>>,
          _ast1772>>,
      DeclContext<Pack<_ast1777>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1777
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1776>, _str51>, _ast1778>>>> {
}; // ParmVarDecl that
struct _ast1779 : FunctionProtoType<_ast114, Pack<_ast1778>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast1780
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1781> {}; // CXXMethodDecl IsEmpty
struct _ast1781 : PointerType<_ast1782> {
}; // PointerType const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1782 : ConstQualifiedType<_ast1773> {
}; // RecordType const v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1785
    : DeclContext<Pack<_ast1786>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str67>, _ast1789>>,
              Pack<_ast1786>>>,
          _ast1781> {}; // CXXMethodDecl ToLocal
struct _ast1786
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1785>, _str66>, _ast1787>>>> {
};                                          // ParmVarDecl out
struct _ast1787 : PointerType<_ast1788> {}; // PointerType Local<S> *
struct _ast1789
    : FunctionProtoType<_ast129, Pack<_ast1787>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<S> *) const
struct _ast1790
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str68>, _ast1791>>,
              Pack<>>>,
          _ast1772> {}; // CXXMethodDecl ToLocalChecked
struct _ast1791 : FunctionProtoType<_ast1792, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast1795
    : DeclContext<Pack<_ast1796>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str70>, _ast1798>>,
              Pack<_ast1796>>>,
          _ast1781> {}; // CXXMethodDecl FromMaybe
struct _ast1796
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1795>, _str69>, _ast1797>>>> {
}; // ParmVarDecl default_value
struct _ast1798
    : FunctionProtoType<_ast1799, Pack<_ast1797>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1800
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str65>, _ast1803>>,
              Pack<_ast1801>>>,
          _ast1772>>,
      DeclContext<Pack<_ast1801>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1801
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1800>, _str62>, _ast1802>>>> {
}; // ParmVarDecl
struct _ast1802 : LValueReferenceType<ReferenceType<_ast1782>> {
}; // LValueReferenceType const v8::MaybeLocal<v8::ObjectTemplate> &
struct _ast1803 : FunctionProtoType<_ast114, Pack<_ast1802>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ast1804
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str65>, _ast1807>>,
              Pack<_ast1805>>>,
          _ast1772>>,
      DeclContext<Pack<_ast1805>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1805
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1804>, _str62>, _ast1806>>>> {
}; // ParmVarDecl
struct _ast1806 : RValueReferenceType<ReferenceType<_ast1773>> {
}; // RValueReferenceType v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ast1807 : FunctionProtoType<_ast114, Pack<_ast1806>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _ast1808
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1770>, _str71>, _ast214>>,
              Pack<>>>,
          _ast1772>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1812
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str72>, _ast1813>,
                     None>,
          None> {}; // CXXRecordDecl Eternal
struct _ast1816
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str73>, _ast1817>,
                     None>,
          None> {}; // CXXRecordDecl NonCopyablePersistentTraits
struct _ast1822
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str74>, _ast1823>,
                     None>,
          None> {}; // CXXRecordDecl PersistentBase
struct _ast1829 : DeclContext<Pack<_ast1830,
                                   _ast1835,
                                   _ast1844,
                                   _ast1851,
                                   _ast1854,
                                   _ast1855,
                                   _ast1861,
                                   _ast1869,
                                   _ast1877,
                                   _ast1885,
                                   _ast1893,
                                   _ast1904,
                                   _ast1907,
                                   _ast1911,
                                   _ast1912,
                                   _ast1918,
                                   _ast1919,
                                   _ast1923,
                                   _ast1925,
                                   _ast1929>> {
}; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1830
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str75>, _ast113>>,
              Pack<>>>,
          _ast1831> {}; // CXXMethodDecl Reset
struct _ast1831 : PointerType<_ast1832> {
}; // PointerType v8::PersistentBase<v8::Object> *
struct _ast1832 : StructOrClassRecordType<RecordType<_ast1829>> {
}; // RecordType v8::PersistentBase<v8::Object>
struct _ast1835
    : DeclContext<Pack<_ast1836, _ast1837>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str75>, _ast1841>>,
              Pack<_ast1836, _ast1837>>>,
          _ast1831> {}; // CXXMethodDecl Reset
struct _ast1836
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1835>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1837
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1835>, _str76>, _ast1838>>>> {
}; // ParmVarDecl other
struct _ast1838 : LValueReferenceType<ReferenceType<_ast1839>> {
}; // LValueReferenceType const Local<S> &
struct _ast1839 : ConstQualifiedType<_ast1840> {
}; // TemplateSpecializationType const Local<S>
struct _ast1841
    : FunctionProtoType<_ast114, Pack<_ast184, _ast1838>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1844
    : DeclContext<Pack<_ast1845, _ast1846>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str75>, _ast1850>>,
              Pack<_ast1845, _ast1846>>>,
          _ast1831> {}; // CXXMethodDecl Reset
struct _ast1845
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1844>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1846
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1844>, _str76>, _ast1847>>>> {
}; // ParmVarDecl other
struct _ast1847 : LValueReferenceType<ReferenceType<_ast1848>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1848 : ConstQualifiedType<_ast1849> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1850
    : FunctionProtoType<_ast114, Pack<_ast184, _ast1847>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast1851
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1852> {}; // CXXMethodDecl IsEmpty
struct _ast1852 : PointerType<_ast1853> {
}; // PointerType const v8::PersistentBase<v8::Object> *
struct _ast1853 : ConstQualifiedType<_ast1832> {
}; // RecordType const v8::PersistentBase<v8::Object>
struct _ast1854
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str77>, _ast113>>,
              Pack<>>>,
          _ast1831> {}; // CXXMethodDecl Empty
struct _ast1855
    : DeclContext<Pack<_ast1856>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str78>, _ast1857>>,
              Pack<_ast1856>>>,
          _ast1852> {}; // CXXMethodDecl Get
struct _ast1856
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1855>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1857
    : FunctionProtoType<_ast1858, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast1861
    : DeclContext<Pack<_ast1862>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str56>, _ast1866>>,
              Pack<_ast1862>>>,
          _ast1852> {}; // CXXMethodDecl operator==
struct _ast1862
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1861>, _str51>, _ast1863>>>> {
}; // ParmVarDecl that
struct _ast1863 : LValueReferenceType<ReferenceType<_ast1864>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1864 : ConstQualifiedType<_ast1865> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1866
    : FunctionProtoType<_ast129, Pack<_ast1863>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1869
    : DeclContext<Pack<_ast1870>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str56>, _ast1874>>,
              Pack<_ast1870>>>,
          _ast1852> {}; // CXXMethodDecl operator==
struct _ast1870
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1869>, _str51>, _ast1871>>>> {
}; // ParmVarDecl that
struct _ast1871 : LValueReferenceType<ReferenceType<_ast1872>> {
}; // LValueReferenceType const Local<S> &
struct _ast1872 : ConstQualifiedType<_ast1873> {
}; // TemplateSpecializationType const Local<S>
struct _ast1874
    : FunctionProtoType<_ast129, Pack<_ast1871>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1877
    : DeclContext<Pack<_ast1878>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str57>, _ast1882>>,
              Pack<_ast1878>>>,
          _ast1852> {}; // CXXMethodDecl operator!=
struct _ast1878
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1877>, _str51>, _ast1879>>>> {
}; // ParmVarDecl that
struct _ast1879 : LValueReferenceType<ReferenceType<_ast1880>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1880 : ConstQualifiedType<_ast1881> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1882
    : FunctionProtoType<_ast129, Pack<_ast1879>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1885
    : DeclContext<Pack<_ast1886>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str57>, _ast1890>>,
              Pack<_ast1886>>>,
          _ast1852> {}; // CXXMethodDecl operator!=
struct _ast1886
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1885>, _str51>, _ast1887>>>> {
}; // ParmVarDecl that
struct _ast1887 : LValueReferenceType<ReferenceType<_ast1888>> {
}; // LValueReferenceType const Local<S> &
struct _ast1888 : ConstQualifiedType<_ast1889> {
}; // TemplateSpecializationType const Local<S>
struct _ast1890
    : FunctionProtoType<_ast129, Pack<_ast1887>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1893
    : DeclContext<Pack<_ast1894, _ast1897, _ast1899>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str82>, _ast1903>>,
              Pack<_ast1894, _ast1897, _ast1899>>>,
          _ast1831> {}; // CXXMethodDecl SetWeak
struct _ast1894
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1893>, _str79>, _ast1895>>>> {
};                                          // ParmVarDecl parameter
struct _ast1895 : PointerType<_ast1896> {}; // PointerType P *
struct _ast1897
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1893>, _str80>, _ast1898>>>> {
}; // ParmVarDecl callback
struct _ast1899
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1893>, _str81>, _ast1900>>>> {
}; // ParmVarDecl type
struct _ast1900 : EnumType<_ast1902, _ast1901> {
}; // EnumType v8::WeakCallbackType
struct _ast1901 : ABIIndependentSizeType<SignedIntegerType, 4> {
}; // BuiltinType int
struct _ast1903 : FunctionProtoType<_ast114,
                                    Pack<_ast1895, _ast1898, _ast1900>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback,
   // v8::WeakCallbackType)
struct _ast1904
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str82>, _ast113>>,
              Pack<>>>,
          _ast1831> {}; // CXXMethodDecl SetWeak
struct _ast1907
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str83>, _ast1908>>,
              Pack<>>>,
          _ast1831> {}; // CXXMethodDecl ClearWeak
struct _ast1908 : FunctionProtoType<_ast1909, Pack<>, UnqualifiedType> {
};                                          // FunctionProtoType P *()
struct _ast1909 : PointerType<_ast1910> {}; // PointerType P *
struct _ast1911
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str83>, _ast113>>,
              Pack<>>>,
          _ast1831> {}; // CXXMethodDecl ClearWeak
struct _ast1912
    : DeclContext<Pack<_ast1913>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str85>, _ast1917>>,
              Pack<_ast1913>>>,
          _ast1831> {}; // CXXMethodDecl AnnotateStrongRetainer
struct _ast1913
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1912>, _str84>, _ast1914>>>> {
};                                                 // ParmVarDecl label
struct _ast1914 : PointerType<_ast1915> {};        // PointerType const char *
struct _ast1915 : ConstQualifiedType<_ast1916> {}; // BuiltinType const char
struct _ast1916 : ABIIndependentSizeType<SignedIntegerType, 1> {
}; // BuiltinType char
struct _ast1917 : FunctionProtoType<_ast114, Pack<_ast1914>, UnqualifiedType> {
}; // FunctionProtoType void (const char *)
struct _ast1918
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str86>, _ast128>>,
              Pack<>>>,
          _ast1852> {}; // CXXMethodDecl IsWeak
struct _ast1919
    : DeclContext<Pack<_ast1920>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str88>, _ast1922>>,
              Pack<_ast1920>>>,
          _ast1831> {}; // CXXMethodDecl SetWrapperClassId
struct _ast1920
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1919>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast1921 : ABIIndependentSizeType<UnsignedIntegerType, 2> {
}; // TypedefType uint16_t
struct _ast1922 : FunctionProtoType<_ast114, Pack<_ast1921>, UnqualifiedType> {
}; // FunctionProtoType void (uint16_t)
struct _ast1923
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str89>, _ast1924>>,
              Pack<>>>,
          _ast1852> {}; // CXXMethodDecl WrapperClassId
struct _ast1924 : FunctionProtoType<_ast1921, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType uint16_t () const
struct _ast1925
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str74>, _ast1928>>,
              Pack<_ast1926>>>,
          _ast1831>>,
      DeclContext<Pack<_ast1926>> {}; // CXXConstructorDecl PersistentBase
struct _ast1926
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1925>, _str76>, _ast1927>>>> {
}; // ParmVarDecl other
struct _ast1927 : LValueReferenceType<ReferenceType<_ast1853>> {
}; // LValueReferenceType const v8::PersistentBase<v8::Object> &
struct _ast1928 : FunctionProtoType<_ast114, Pack<_ast1927>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::PersistentBase<v8::Object> &)
struct _ast1929
    : DeclContext<Pack<_ast1930>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1829>, _str64>, _ast1928>>,
              Pack<_ast1930>>>,
          _ast1831> {}; // CXXMethodDecl operator=
struct _ast1930
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast1929>, _str62>, _ast1927>>>> {
}; // ParmVarDecl
struct _ast1933 : DeclContext<Pack<_ast1934,
                                   _ast1939,
                                   _ast1948,
                                   _ast1955,
                                   _ast1958,
                                   _ast1959,
                                   _ast1965,
                                   _ast1973,
                                   _ast1981,
                                   _ast1989,
                                   _ast1997,
                                   _ast2005,
                                   _ast2008,
                                   _ast2012,
                                   _ast2013,
                                   _ast2015,
                                   _ast2016,
                                   _ast2018,
                                   _ast2019,
                                   _ast2023>> {
}; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1934
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str75>, _ast113>>,
              Pack<>>>,
          _ast1935> {}; // CXXMethodDecl Reset
struct _ast1935 : PointerType<_ast1936> {
}; // PointerType v8::PersistentBase<v8::Promise> *
struct _ast1936 : StructOrClassRecordType<RecordType<_ast1933>> {
}; // RecordType v8::PersistentBase<v8::Promise>
struct _ast1939
    : DeclContext<Pack<_ast1940, _ast1941>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str75>, _ast1945>>,
              Pack<_ast1940, _ast1941>>>,
          _ast1935> {}; // CXXMethodDecl Reset
struct _ast1940
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1939>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1941
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1939>, _str76>, _ast1942>>>> {
}; // ParmVarDecl other
struct _ast1942 : LValueReferenceType<ReferenceType<_ast1943>> {
}; // LValueReferenceType const Local<S> &
struct _ast1943 : ConstQualifiedType<_ast1944> {
}; // TemplateSpecializationType const Local<S>
struct _ast1945
    : FunctionProtoType<_ast114, Pack<_ast184, _ast1942>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1948
    : DeclContext<Pack<_ast1949, _ast1950>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str75>, _ast1954>>,
              Pack<_ast1949, _ast1950>>>,
          _ast1935> {}; // CXXMethodDecl Reset
struct _ast1949
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1948>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1950
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1948>, _str76>, _ast1951>>>> {
}; // ParmVarDecl other
struct _ast1951 : LValueReferenceType<ReferenceType<_ast1952>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1952 : ConstQualifiedType<_ast1953> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1954
    : FunctionProtoType<_ast114, Pack<_ast184, _ast1951>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast1955
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str52>, _ast128>>,
              Pack<>>>,
          _ast1956> {}; // CXXMethodDecl IsEmpty
struct _ast1956 : PointerType<_ast1957> {
}; // PointerType const v8::PersistentBase<v8::Promise> *
struct _ast1957 : ConstQualifiedType<_ast1936> {
}; // RecordType const v8::PersistentBase<v8::Promise>
struct _ast1958
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str77>, _ast113>>,
              Pack<>>>,
          _ast1935> {}; // CXXMethodDecl Empty
struct _ast1959
    : DeclContext<Pack<_ast1960>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str78>, _ast1961>>,
              Pack<_ast1960>>>,
          _ast1956> {}; // CXXMethodDecl Get
struct _ast1960
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1959>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast1961
    : FunctionProtoType<_ast1962, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *) const
struct _ast1965
    : DeclContext<Pack<_ast1966>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str56>, _ast1970>>,
              Pack<_ast1966>>>,
          _ast1956> {}; // CXXMethodDecl operator==
struct _ast1966
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1965>, _str51>, _ast1967>>>> {
}; // ParmVarDecl that
struct _ast1967 : LValueReferenceType<ReferenceType<_ast1968>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1968 : ConstQualifiedType<_ast1969> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1970
    : FunctionProtoType<_ast129, Pack<_ast1967>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1973
    : DeclContext<Pack<_ast1974>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str56>, _ast1978>>,
              Pack<_ast1974>>>,
          _ast1956> {}; // CXXMethodDecl operator==
struct _ast1974
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1973>, _str51>, _ast1975>>>> {
}; // ParmVarDecl that
struct _ast1975 : LValueReferenceType<ReferenceType<_ast1976>> {
}; // LValueReferenceType const Local<S> &
struct _ast1976 : ConstQualifiedType<_ast1977> {
}; // TemplateSpecializationType const Local<S>
struct _ast1978
    : FunctionProtoType<_ast129, Pack<_ast1975>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1981
    : DeclContext<Pack<_ast1982>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str57>, _ast1986>>,
              Pack<_ast1982>>>,
          _ast1956> {}; // CXXMethodDecl operator!=
struct _ast1982
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1981>, _str51>, _ast1983>>>> {
}; // ParmVarDecl that
struct _ast1983 : LValueReferenceType<ReferenceType<_ast1984>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast1984 : ConstQualifiedType<_ast1985> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1986
    : FunctionProtoType<_ast129, Pack<_ast1983>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1989
    : DeclContext<Pack<_ast1990>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str57>, _ast1994>>,
              Pack<_ast1990>>>,
          _ast1956> {}; // CXXMethodDecl operator!=
struct _ast1990
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1989>, _str51>, _ast1991>>>> {
}; // ParmVarDecl that
struct _ast1991 : LValueReferenceType<ReferenceType<_ast1992>> {
}; // LValueReferenceType const Local<S> &
struct _ast1992 : ConstQualifiedType<_ast1993> {
}; // TemplateSpecializationType const Local<S>
struct _ast1994
    : FunctionProtoType<_ast129, Pack<_ast1991>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1997
    : DeclContext<Pack<_ast1998, _ast2001, _ast2003>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str82>, _ast2004>>,
              Pack<_ast1998, _ast2001, _ast2003>>>,
          _ast1935> {}; // CXXMethodDecl SetWeak
struct _ast1998
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1997>, _str79>, _ast1999>>>> {
};                                          // ParmVarDecl parameter
struct _ast1999 : PointerType<_ast2000> {}; // PointerType P *
struct _ast2001
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1997>, _str80>, _ast2002>>>> {
}; // ParmVarDecl callback
struct _ast2003
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1997>, _str81>, _ast1900>>>> {
}; // ParmVarDecl type
struct _ast2004 : FunctionProtoType<_ast114,
                                    Pack<_ast1999, _ast2002, _ast1900>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback,
   // v8::WeakCallbackType)
struct _ast2005
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str82>, _ast113>>,
              Pack<>>>,
          _ast1935> {}; // CXXMethodDecl SetWeak
struct _ast2008
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str83>, _ast2009>>,
              Pack<>>>,
          _ast1935> {}; // CXXMethodDecl ClearWeak
struct _ast2009 : FunctionProtoType<_ast2010, Pack<>, UnqualifiedType> {
};                                          // FunctionProtoType P *()
struct _ast2010 : PointerType<_ast2011> {}; // PointerType P *
struct _ast2012
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str83>, _ast113>>,
              Pack<>>>,
          _ast1935> {}; // CXXMethodDecl ClearWeak
struct _ast2013
    : DeclContext<Pack<_ast2014>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str85>, _ast1917>>,
              Pack<_ast2014>>>,
          _ast1935> {}; // CXXMethodDecl AnnotateStrongRetainer
struct _ast2014
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2013>, _str84>, _ast1914>>>> {
}; // ParmVarDecl label
struct _ast2015
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str86>, _ast128>>,
              Pack<>>>,
          _ast1956> {}; // CXXMethodDecl IsWeak
struct _ast2016
    : DeclContext<Pack<_ast2017>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str88>, _ast1922>>,
              Pack<_ast2017>>>,
          _ast1935> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2017
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2016>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast2018
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str89>, _ast1924>>,
              Pack<>>>,
          _ast1956> {}; // CXXMethodDecl WrapperClassId
struct _ast2019
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str74>, _ast2022>>,
              Pack<_ast2020>>>,
          _ast1935>>,
      DeclContext<Pack<_ast2020>> {}; // CXXConstructorDecl PersistentBase
struct _ast2020
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2019>, _str76>, _ast2021>>>> {
}; // ParmVarDecl other
struct _ast2021 : LValueReferenceType<ReferenceType<_ast1957>> {
}; // LValueReferenceType const v8::PersistentBase<v8::Promise> &
struct _ast2022 : FunctionProtoType<_ast114, Pack<_ast2021>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::PersistentBase<v8::Promise> &)
struct _ast2023
    : DeclContext<Pack<_ast2024>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1933>, _str64>, _ast2022>>,
              Pack<_ast2024>>>,
          _ast1935> {}; // CXXMethodDecl operator=
struct _ast2024
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2023>, _str62>, _ast2021>>>> {
}; // ParmVarDecl
struct _ast2035
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str90>, _ast2036>,
                     None>,
          None> {}; // CXXRecordDecl Persistent
struct _ast2037 : DeclContext<Pack<_ast2038,
                                   _ast2043,
                                   _ast2051,
                                   _ast2058,
                                   _ast2066,
                                   _ast2078,
                                   _ast2085,
                                   _ast2097,
                                   _ast2101,
                                   _ast2111,
                                   _ast2072,
                                   _ast2091>> {
}; // ClassTemplateSpecializationDecl Persistent
struct _ast2038
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str90>, _ast113>>,
              Pack<>>>,
          _ast2039>> {}; // CXXConstructorDecl Persistent
struct _ast2039 : PointerType<_ast2040> {
}; // PointerType v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2040 : StructOrClassRecordType<RecordType<_ast2037>> {
}; // RecordType v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2043
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str90>, _ast2047>>,
              Pack<_ast2044, _ast2045>>>,
          _ast2039>>,
      DeclContext<Pack<_ast2044, _ast2045>> {}; // CXXConstructorDecl Persistent
struct _ast2044
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2043>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2045
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2043>, _str51>, _ast2046>>>> {
}; // ParmVarDecl that
struct _ast2047
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2046>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2051
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str90>, _ast2057>>,
              Pack<_ast2052, _ast2053>>>,
          _ast2039>>,
      DeclContext<Pack<_ast2052, _ast2053>> {}; // CXXConstructorDecl Persistent
struct _ast2052
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2051>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2053
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2051>, _str51>, _ast2054>>>> {
}; // ParmVarDecl that
struct _ast2054 : LValueReferenceType<ReferenceType<_ast2055>> {
}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2055 : ConstQualifiedType<_ast2056> {
}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2057
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2054>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2058
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str90>, _ast2062>>,
              Pack<_ast2059>>>,
          _ast2039>>,
      DeclContext<Pack<_ast2059>> {}; // CXXConstructorDecl Persistent
struct _ast2059
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2058>, _str51>, _ast2060>>>> {
}; // ParmVarDecl that
struct _ast2060 : LValueReferenceType<ReferenceType<_ast2061>> {
}; // LValueReferenceType const v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2061 : ConstQualifiedType<_ast2040> {
}; // RecordType const v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2062 : FunctionProtoType<_ast114, Pack<_ast2060>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2066
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str90>, _ast2071>>,
              Pack<_ast2067>>>,
          _ast2039>>,
      DeclContext<Pack<_ast2067>> {}; // CXXConstructorDecl Persistent
struct _ast2067
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2066>, _str51>, _ast2068>>>> {
}; // ParmVarDecl that
struct _ast2068 : LValueReferenceType<ReferenceType<_ast2069>> {
}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2069 : ConstQualifiedType<_ast2070> {
}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2071 : FunctionProtoType<_ast114, Pack<_ast2068>, UnqualifiedType> {
}; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2072
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str90>, _ast2077>>,
              Pack<_ast2073>>>,
          _ast2039>>,
      DeclContext<Pack<_ast2073>> {}; // CXXConstructorDecl Persistent
struct _ast2073
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2072>, _str51>, _ast2074>>>> {
}; // ParmVarDecl that
struct _ast2074 : LValueReferenceType<ReferenceType<_ast2075>> {
}; // LValueReferenceType const Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2075 : ConstQualifiedType<_ast2076> {
}; // TemplateSpecializationType const Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2077 : FunctionProtoType<_ast114, Pack<_ast2074>, UnqualifiedType> {
}; // FunctionProtoType void (const Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2078
    : DeclContext<Pack<_ast2079>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str64>, _ast2080>>,
              Pack<_ast2079>>>,
          _ast2039> {}; // CXXMethodDecl operator=
struct _ast2079
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2078>, _str51>, _ast2060>>>> {
}; // ParmVarDecl that
struct _ast2080 : FunctionProtoType<_ast2081, Pack<_ast2060>, UnqualifiedType> {
}; // FunctionProtoType v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &(const
   // v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2081 : LValueReferenceType<ReferenceType<_ast2040>> {
}; // LValueReferenceType v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2085
    : DeclContext<Pack<_ast2086>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str64>, _ast2090>>,
              Pack<_ast2086>>>,
          _ast2039> {}; // CXXMethodDecl operator=
struct _ast2086
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2085>, _str51>, _ast2087>>>> {
}; // ParmVarDecl that
struct _ast2087 : LValueReferenceType<ReferenceType<_ast2088>> {
}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2088 : ConstQualifiedType<_ast2089> {
}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2090 : FunctionProtoType<_ast2081, Pack<_ast2087>, UnqualifiedType> {
}; // FunctionProtoType v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _ast2091
    : DeclContext<Pack<_ast2092>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str64>, _ast2096>>,
              Pack<_ast2092>>>,
          _ast2039> {}; // CXXMethodDecl operator=
struct _ast2092
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2091>, _str51>, _ast2093>>>> {
}; // ParmVarDecl that
struct _ast2093 : LValueReferenceType<ReferenceType<_ast2094>> {
}; // LValueReferenceType const Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2094 : ConstQualifiedType<_ast2095> {
}; // TemplateSpecializationType const Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2096 : FunctionProtoType<_ast2081, Pack<_ast2093>, UnqualifiedType> {
}; // FunctionProtoType v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > &(const
   // Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2097
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str91>, _ast2098>>,
              Pack<>>>,
          _ast2039>> {}; // CXXDestructorDecl ~Persistent
struct _ast2098 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2101
    : DeclContext<Pack<_ast2102>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast2037>, _str58>, _ast2106>>,
          Pack<_ast2102>>> {}; // CXXMethodDecl Cast
struct _ast2102
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2101>, _str51>, _ast2103>>>> {
}; // ParmVarDecl that
struct _ast2103 : LValueReferenceType<ReferenceType<_ast2104>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast2104 : ConstQualifiedType<_ast2105> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast2106 : FunctionProtoType<_ast2107, Pack<_ast2103>, UnqualifiedType> {
}; // FunctionProtoType Persistent<v8::Promise> &(const Persistent<S> &)
struct _ast2107 : LValueReferenceType<ReferenceType<_ast2108>> {
}; // LValueReferenceType Persistent<v8::Promise> &
struct _ast2111
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2037>, _str59>, _ast2112>>,
              Pack<>>>,
          _ast2115> {}; // CXXMethodDecl As
struct _ast2112 : FunctionProtoType<_ast2113, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Persistent<S> &() const
struct _ast2113 : LValueReferenceType<ReferenceType<_ast2114>> {
}; // LValueReferenceType Persistent<S> &
struct _ast2115 : PointerType<_ast2061> {
}; // PointerType const v8::Persistent<v8::Promise,
   // v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2120
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str92>, _ast2121>,
                     None>,
          None> {}; // CXXRecordDecl Global
struct _ast2124
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str93>, _ast2125>,
                     None>,
          None> {}; // CXXRecordDecl TracedGlobal
struct _ast2131 : DeclContext<Pack<_ast2132,
                                   _ast2136,
                                   _ast2140,
                                   _ast2145,
                                   _ast2151,
                                   _ast2157,
                                   _ast2162,
                                   _ast2164,
                                   _ast2166,
                                   _ast2169,
                                   _ast2176,
                                   _ast2182,
                                   _ast2188,
                                   _ast2196,
                                   _ast2204,
                                   _ast2212,
                                   _ast2218,
                                   _ast2220,
                                   _ast2221>> {
}; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2132
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str93>, _ast2133>>,
              Pack<>>>,
          _ast2134>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2133 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2134 : PointerType<_ast2135> {
}; // PointerType v8::TracedGlobal<v8::Object> *
struct _ast2135 : StructOrClassRecordType<RecordType<_ast2131>> {
}; // RecordType v8::TracedGlobal<v8::Object>
struct _ast2136
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str94>, _ast2137>>,
              Pack<>>>,
          _ast2134>> {}; // CXXDestructorDecl ~TracedGlobal
struct _ast2137 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2140
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str93>, _ast2144>>,
              Pack<_ast2141, _ast2142>>>,
          _ast2134>>,
      DeclContext<Pack<_ast2141, _ast2142>> {
}; // CXXConstructorDecl TracedGlobal
struct _ast2141
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2140>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2142
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2140>, _str51>, _ast2143>>>> {
}; // ParmVarDecl that
struct _ast2144
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2143>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2145
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str93>, _ast2148>>,
              Pack<_ast2146>>>,
          _ast2134>>,
      DeclContext<Pack<_ast2146>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2146
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2145>, _str76>, _ast2147>>>> {
}; // ParmVarDecl other
struct _ast2147 : RValueReferenceType<ReferenceType<_ast2135>> {
}; // RValueReferenceType v8::TracedGlobal<v8::Object> &&
struct _ast2148 : FunctionProtoType<_ast114, Pack<_ast2147>, UnqualifiedType> {
}; // FunctionProtoType void (v8::TracedGlobal<v8::Object> &&)
struct _ast2151
    : DeclContext<Pack<_ast2152>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str64>, _ast2155>>,
              Pack<_ast2152>>>,
          _ast2134> {}; // CXXMethodDecl operator=
struct _ast2152
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2151>, _str95>, _ast2153>>>> {
}; // ParmVarDecl rhs
struct _ast2153 : RValueReferenceType<ReferenceType<_ast2154>> {
}; // RValueReferenceType TracedGlobal<S> &&
struct _ast2155 : FunctionProtoType<_ast2156, Pack<_ast2153>, UnqualifiedType> {
}; // FunctionProtoType v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _ast2156 : LValueReferenceType<ReferenceType<_ast2135>> {
}; // LValueReferenceType v8::TracedGlobal<v8::Object> &
struct _ast2157
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str93>, _ast2161>>,
              Pack<_ast2158>>>,
          _ast2134>>,
      DeclContext<Pack<_ast2158>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2158
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2157>, _str62>, _ast2159>>>> {
}; // ParmVarDecl
struct _ast2159 : LValueReferenceType<ReferenceType<_ast2160>> {
}; // LValueReferenceType const v8::TracedGlobal<v8::Object> &
struct _ast2160 : ConstQualifiedType<_ast2135> {
}; // RecordType const v8::TracedGlobal<v8::Object>
struct _ast2161 : FunctionProtoType<_ast114, Pack<_ast2159>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::TracedGlobal<v8::Object> &)
struct _ast2162
    : DeclContext<Pack<_ast2163>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str64>, _ast2161>>,
              Pack<_ast2163>>>,
          _ast2134> {}; // CXXMethodDecl operator=
struct _ast2163
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2162>, _str62>, _ast2159>>>> {
}; // ParmVarDecl
struct _ast2164
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str52>, _ast128>>,
              Pack<>>>,
          _ast2165> {}; // CXXMethodDecl IsEmpty
struct _ast2165 : PointerType<_ast2160> {
}; // PointerType const v8::TracedGlobal<v8::Object> *
struct _ast2166
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str75>, _ast113>>,
              Pack<>>>,
          _ast2134> {}; // CXXMethodDecl Reset
struct _ast2169
    : DeclContext<Pack<_ast2170, _ast2171>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str75>, _ast2175>>,
              Pack<_ast2170, _ast2171>>>,
          _ast2134> {}; // CXXMethodDecl Reset
struct _ast2170
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2169>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2171
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2169>, _str76>, _ast2172>>>> {
}; // ParmVarDecl other
struct _ast2172 : LValueReferenceType<ReferenceType<_ast2173>> {
}; // LValueReferenceType const Local<S> &
struct _ast2173 : ConstQualifiedType<_ast2174> {
}; // TemplateSpecializationType const Local<S>
struct _ast2175
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2172>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2176
    : DeclContext<Pack<_ast2177>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str78>, _ast2178>>,
              Pack<_ast2177>>>,
          _ast2165> {}; // CXXMethodDecl Get
struct _ast2177
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2176>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2178
    : FunctionProtoType<_ast2179, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast2182
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str59>, _ast2183>>,
              Pack<>>>,
          _ast2165> {}; // CXXMethodDecl As
struct _ast2183 : FunctionProtoType<_ast2184, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2184 : LValueReferenceType<ReferenceType<_ast2185>> {
}; // LValueReferenceType TracedGlobal<S> &
struct _ast2188
    : DeclContext<Pack<_ast2189>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str56>, _ast2193>>,
              Pack<_ast2189>>>,
          _ast2165> {}; // CXXMethodDecl operator==
struct _ast2189
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2188>, _str51>, _ast2190>>>> {
}; // ParmVarDecl that
struct _ast2190 : LValueReferenceType<ReferenceType<_ast2191>> {
}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2191 : ConstQualifiedType<_ast2192> {
}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2193
    : FunctionProtoType<_ast129, Pack<_ast2190>, ConstQualifiedType> {
}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2196
    : DeclContext<Pack<_ast2197>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str56>, _ast2201>>,
              Pack<_ast2197>>>,
          _ast2165> {}; // CXXMethodDecl operator==
struct _ast2197
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2196>, _str51>, _ast2198>>>> {
}; // ParmVarDecl that
struct _ast2198 : LValueReferenceType<ReferenceType<_ast2199>> {
}; // LValueReferenceType const Local<S> &
struct _ast2199 : ConstQualifiedType<_ast2200> {
}; // TemplateSpecializationType const Local<S>
struct _ast2201
    : FunctionProtoType<_ast129, Pack<_ast2198>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2204
    : DeclContext<Pack<_ast2205>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str57>, _ast2209>>,
              Pack<_ast2205>>>,
          _ast2165> {}; // CXXMethodDecl operator!=
struct _ast2205
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2204>, _str51>, _ast2206>>>> {
}; // ParmVarDecl that
struct _ast2206 : LValueReferenceType<ReferenceType<_ast2207>> {
}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2207 : ConstQualifiedType<_ast2208> {
}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2209
    : FunctionProtoType<_ast129, Pack<_ast2206>, ConstQualifiedType> {
}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2212
    : DeclContext<Pack<_ast2213>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str57>, _ast2217>>,
              Pack<_ast2213>>>,
          _ast2165> {}; // CXXMethodDecl operator!=
struct _ast2213
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2212>, _str51>, _ast2214>>>> {
}; // ParmVarDecl that
struct _ast2214 : LValueReferenceType<ReferenceType<_ast2215>> {
}; // LValueReferenceType const Local<S> &
struct _ast2215 : ConstQualifiedType<_ast2216> {
}; // TemplateSpecializationType const Local<S>
struct _ast2217
    : FunctionProtoType<_ast129, Pack<_ast2214>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2218
    : DeclContext<Pack<_ast2219>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str88>, _ast1922>>,
              Pack<_ast2219>>>,
          _ast2134> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2219
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2218>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast2220
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str89>, _ast1924>>,
              Pack<>>>,
          _ast2165> {}; // CXXMethodDecl WrapperClassId
struct _ast2221
    : DeclContext<Pack<_ast2222, _ast2224>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2131>, _str96>, _ast2226>>,
              Pack<_ast2222, _ast2224>>>,
          _ast2134> {}; // CXXMethodDecl SetFinalizationCallback
struct _ast2222
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2221>, _str79>, _ast2223>>>> {
};                                         // ParmVarDecl parameter
struct _ast2223 : PointerType<_ast114> {}; // PointerType void *
struct _ast2224
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2221>, _str80>, _ast2225>>>> {
}; // ParmVarDecl callback
struct _ast2226
    : FunctionProtoType<_ast114, Pack<_ast2223, _ast2225>, UnqualifiedType> {
}; // FunctionProtoType void (void *, WeakCallbackInfo<void>::Callback)
struct _ast2241
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str97>, _ast2242>,
                     None>,
          None> {}; // CXXRecordDecl PersistentValueMap
struct _ast2247
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str98>, _ast2248>,
                     None>,
          None> {}; // CXXRecordDecl PersistentValueMapBase
struct _ast2253
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str99>, _ast2254>,
                     None>,
          None> {}; // CXXRecordDecl GlobalValueMap
struct _ast2258
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str100>, _ast2259>,
                     None>,
          None> {}; // CXXRecordDecl PersistentValueVector
struct _ast2263
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str101>, _ast2264>,
                     None>,
          None> {}; // CXXRecordDecl WeakCallbackObject
struct _ast2267
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str102>, _ast2268>,
                     None>,
          None> {}; // CXXRecordDecl FunctionCallbackInfo
struct _ast2272
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str103>, _ast2273>,
                     None>,
          None> {}; // CXXRecordDecl PropertyCallbackInfo
struct _ast2279
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str104>, _ast2280>,
                     None>,
          None> {}; // CXXRecordDecl CallHandlerHelper
struct _ast2280 : StructOrClassRecordType<RecordType<_ast2279>> {
}; // RecordType v8::CallHandlerHelper
struct _ast2281
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str105>, _ast2282>,
                     None>,
          None> {}; // CXXRecordDecl EscapableHandleScope
struct _ast2282 : StructOrClassRecordType<RecordType<_ast2281>> {
}; // RecordType v8::EscapableHandleScope
struct _ast2285
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str106>, _ast2286>,
                     None>,
          None> {}; // CXXRecordDecl ReturnValue
struct _ast2287 : DeclContext<Pack<_ast2288>>,
                  NamespaceDecl<NamedDeclName<Decl<_ast1>, _str107>> {
}; // NamespaceDecl debug
struct _ast2288
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2287>, _str108>, _ast2289>,
                     None>,
          None> {}; // CXXRecordDecl ConsoleCallArguments
struct _ast2289 : StructOrClassRecordType<RecordType<_ast2288>> {
}; // RecordType v8::debug::ConsoleCallArguments
struct _ast2291
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast109>, _str50>, _ast110>,
                     None>,
          None> {}; // CXXRecordDecl Local
struct _ast2292
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str109>, _ast113>>,
              Pack<>>>,
          _ast2293>> {};                   // CXXConstructorDecl Local<T>
struct _ast2293 : PointerType<_ast110> {}; // PointerType Local<T> *
struct _ast2296
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str109>, _ast2299>>,
              Pack<_ast2297>>>,
          _ast2293>>,
      DeclContext<Pack<_ast2297>> {}; // CXXConstructorDecl Local<T>
struct _ast2297
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2296>, _str51>, _ast2298>>>> {
}; // ParmVarDecl that
struct _ast2299 : FunctionProtoType<_ast114, Pack<_ast2298>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast2300
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str52>, _ast128>>,
              Pack<>>>,
          _ast2301> {};                     // CXXMethodDecl IsEmpty
struct _ast2301 : PointerType<_ast2302> {}; // PointerType const Local<T> *
struct _ast2302 : ConstQualifiedType<_ast110> {
}; // InjectedClassNameType const Local<T>
struct _ast2303
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str53>, _ast113>>,
              Pack<>>>,
          _ast2293> {}; // CXXMethodDecl Clear
struct _ast2304
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str54>, _ast2305>>,
              Pack<>>>,
          _ast2301> {}; // CXXMethodDecl operator->
struct _ast2305 : FunctionProtoType<_ast2306, Pack<>, ConstQualifiedType> {
};                                          // FunctionProtoType T *() const
struct _ast2306 : PointerType<_ast2307> {}; // PointerType T *
struct _ast2308
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str55>, _ast2305>>,
              Pack<>>>,
          _ast2301> {}; // CXXMethodDecl operator*
struct _ast2311
    : DeclContext<Pack<_ast2312>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str56>, _ast2316>>,
              Pack<_ast2312>>>,
          _ast2301> {}; // CXXMethodDecl operator==
struct _ast2312
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2311>, _str51>, _ast2313>>>> {
}; // ParmVarDecl that
struct _ast2313 : LValueReferenceType<ReferenceType<_ast2314>> {
}; // LValueReferenceType const Local<S> &
struct _ast2314 : ConstQualifiedType<_ast2315> {
}; // TemplateSpecializationType const Local<S>
struct _ast2316
    : FunctionProtoType<_ast129, Pack<_ast2313>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2319
    : DeclContext<Pack<_ast2320>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str56>, _ast2324>>,
              Pack<_ast2320>>>,
          _ast2301> {}; // CXXMethodDecl operator==
struct _ast2320
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2319>, _str51>, _ast2321>>>> {
}; // ParmVarDecl that
struct _ast2321 : LValueReferenceType<ReferenceType<_ast2322>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast2322 : ConstQualifiedType<_ast2323> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2324
    : FunctionProtoType<_ast129, Pack<_ast2321>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2327
    : DeclContext<Pack<_ast2328>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str57>, _ast2332>>,
              Pack<_ast2328>>>,
          _ast2301> {}; // CXXMethodDecl operator!=
struct _ast2328
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2327>, _str51>, _ast2329>>>> {
}; // ParmVarDecl that
struct _ast2329 : LValueReferenceType<ReferenceType<_ast2330>> {
}; // LValueReferenceType const Local<S> &
struct _ast2330 : ConstQualifiedType<_ast2331> {
}; // TemplateSpecializationType const Local<S>
struct _ast2332
    : FunctionProtoType<_ast129, Pack<_ast2329>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2335
    : DeclContext<Pack<_ast2336>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str57>, _ast2340>>,
              Pack<_ast2336>>>,
          _ast2301> {}; // CXXMethodDecl operator!=
struct _ast2336
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2335>, _str51>, _ast2337>>>> {
}; // ParmVarDecl that
struct _ast2337 : LValueReferenceType<ReferenceType<_ast2338>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast2338 : ConstQualifiedType<_ast2339> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast2340
    : FunctionProtoType<_ast129, Pack<_ast2337>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast2343
    : DeclContext<Pack<_ast2344>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast109>, _str58>, _ast2346>>,
          Pack<_ast2344>>> {}; // CXXMethodDecl Cast
struct _ast2344
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2343>, _str51>, _ast2345>>>> {
}; // ParmVarDecl that
struct _ast2346 : FunctionProtoType<_ast2347, Pack<_ast2345>, UnqualifiedType> {
}; // FunctionProtoType Local<T> (Local<S>)
struct _ast2350
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast109>, _str59>, _ast2351>>,
              Pack<>>>,
          _ast2301> {}; // CXXMethodDecl As
struct _ast2351 : FunctionProtoType<_ast2352, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> () const
struct _ast2353
    : DeclContext<Pack<_ast2354, _ast2355>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast109>, _str61>, _ast2357>>,
          Pack<_ast2354, _ast2355>>> {}; // CXXMethodDecl New
struct _ast2354
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2353>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2355
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2353>, _str51>, _ast2356>>>> {
}; // ParmVarDecl that
struct _ast2357
    : FunctionProtoType<_ast2358, Pack<_ast184, _ast2356>, UnqualifiedType> {
}; // FunctionProtoType Local<T> (v8::Isolate *, Local<T>)
struct _ast2359
    : DeclContext<Pack<_ast2360, _ast2361>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast109>, _str61>, _ast2365>>,
          Pack<_ast2360, _ast2361>>> {}; // CXXMethodDecl New
struct _ast2360
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2359>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2361
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2359>, _str51>, _ast2362>>>> {
}; // ParmVarDecl that
struct _ast2362 : LValueReferenceType<ReferenceType<_ast2363>> {
}; // LValueReferenceType const PersistentBase<T> &
struct _ast2363 : ConstQualifiedType<_ast2364> {
}; // TemplateSpecializationType const PersistentBase<T>
struct _ast2365
    : FunctionProtoType<_ast2366, Pack<_ast184, _ast2362>, UnqualifiedType> {
}; // FunctionProtoType Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _ast2367
    : DeclContext<Pack<_ast2368, _ast2369>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast109>, _str61>, _ast2373>>,
          Pack<_ast2368, _ast2369>>> {}; // CXXMethodDecl New
struct _ast2368
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2367>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2369
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2367>, _str51>, _ast2370>>>> {
}; // ParmVarDecl that
struct _ast2370 : LValueReferenceType<ReferenceType<_ast2371>> {
}; // LValueReferenceType const TracedGlobal<T> &
struct _ast2371 : ConstQualifiedType<_ast2372> {
}; // TemplateSpecializationType const TracedGlobal<T>
struct _ast2373
    : FunctionProtoType<_ast2374, Pack<_ast184, _ast2370>, UnqualifiedType> {
}; // FunctionProtoType Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _ast2376
    : TypeAliasDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str110>, _ast2377>>> {
};                                          // TypeAliasDecl Handle
struct _ast2377 : TypedefType<_ast2376> {}; // TypedefType v8::Handle
struct _ast2380
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1640>, _str65>, _ast1641>,
                     None>,
          None> {}; // CXXRecordDecl MaybeLocal
struct _ast2381
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1640>, _str111>, _ast113>>,
              Pack<>>>,
          _ast2382>> {};                    // CXXConstructorDecl MaybeLocal<T>
struct _ast2382 : PointerType<_ast1641> {}; // PointerType MaybeLocal<T> *
struct _ast2385
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1640>, _str111>, _ast2388>>,
              Pack<_ast2386>>>,
          _ast2382>>,
      DeclContext<Pack<_ast2386>> {}; // CXXConstructorDecl MaybeLocal<T>
struct _ast2386
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2385>, _str51>, _ast2387>>>> {
}; // ParmVarDecl that
struct _ast2388 : FunctionProtoType<_ast114, Pack<_ast2387>, UnqualifiedType> {
}; // FunctionProtoType void (Local<S>)
struct _ast2389
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1640>, _str52>, _ast128>>,
              Pack<>>>,
          _ast2390> {};                     // CXXMethodDecl IsEmpty
struct _ast2390 : PointerType<_ast2391> {}; // PointerType const MaybeLocal<T> *
struct _ast2391 : ConstQualifiedType<_ast1641> {
}; // InjectedClassNameType const MaybeLocal<T>
struct _ast2394
    : DeclContext<Pack<_ast2395>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1640>, _str67>, _ast2398>>,
              Pack<_ast2395>>>,
          _ast2390> {}; // CXXMethodDecl ToLocal
struct _ast2395
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2394>, _str66>, _ast2396>>>> {
};                                          // ParmVarDecl out
struct _ast2396 : PointerType<_ast2397> {}; // PointerType Local<S> *
struct _ast2398
    : FunctionProtoType<_ast129, Pack<_ast2396>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<S> *) const
struct _ast2399
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1640>, _str68>, _ast2400>>,
              Pack<>>>,
          _ast2382> {}; // CXXMethodDecl ToLocalChecked
struct _ast2400 : FunctionProtoType<_ast2401, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<T> ()
struct _ast2404
    : DeclContext<Pack<_ast2405>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1640>, _str70>, _ast2407>>,
              Pack<_ast2405>>>,
          _ast2390> {}; // CXXMethodDecl FromMaybe
struct _ast2405
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2404>, _str69>, _ast2406>>>> {
}; // ParmVarDecl default_value
struct _ast2407
    : FunctionProtoType<_ast2408, Pack<_ast2406>, ConstQualifiedType> {
}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast2410
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1812>, _str72>, _ast1813>,
                     None>,
          None> {}; // CXXRecordDecl Eternal
struct _ast2411
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1812>, _str112>, _ast113>>,
              Pack<>>>,
          _ast2412>> {};                    // CXXConstructorDecl Eternal<T>
struct _ast2412 : PointerType<_ast1813> {}; // PointerType Eternal<T> *
struct _ast2415
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1812>, _str112>, _ast2419>>,
              Pack<_ast2416, _ast2417>>>,
          _ast2412>>,
      DeclContext<Pack<_ast2416, _ast2417>> {}; // CXXConstructorDecl Eternal<T>
struct _ast2416
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2415>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2417
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2415>, _str113>, _ast2418>>>> {
}; // ParmVarDecl handle
struct _ast2419
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2418>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2420
    : DeclContext<Pack<_ast2421>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1812>, _str78>, _ast2422>>,
              Pack<_ast2421>>>,
          _ast2424> {}; // CXXMethodDecl Get
struct _ast2421
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2420>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2422
    : FunctionProtoType<_ast2423, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2424 : PointerType<_ast2425> {}; // PointerType const Eternal<T> *
struct _ast2425 : ConstQualifiedType<_ast1813> {
}; // InjectedClassNameType const Eternal<T>
struct _ast2426
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1812>, _str52>, _ast128>>,
              Pack<>>>,
          _ast2424> {}; // CXXMethodDecl IsEmpty
struct _ast2429
    : DeclContext<Pack<_ast2430, _ast2431>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1812>, _str114>, _ast2433>>,
              Pack<_ast2430, _ast2431>>>,
          _ast2412> {}; // CXXMethodDecl Set
struct _ast2430
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2429>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2431
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2429>, _str113>, _ast2432>>>> {
}; // ParmVarDecl handle
struct _ast2433
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2432>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2434
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1>, _str115>, _ast2435>>> {
}; // VarDecl kInternalFieldsInWeakCallback
struct _ast2435 : ConstQualifiedType<_ast1901> {}; // BuiltinType const int
struct _ast2436
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1>, _str116>, _ast2435>>> {
}; // VarDecl kEmbedderFieldsInWeakCallback
struct _ast2439
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str117>, _ast2440>,
                     Pack<_ast2441, _ast2442, _ast2445, _ast2449>>,
          Pack<>>,
      DeclContext<Pack<_ast2451,
                       _ast2448,
                       _ast2452,
                       _ast2460,
                       _ast2464,
                       _ast2466,
                       _ast2469,
                       _ast2441,
                       _ast2442,
                       _ast2445,
                       _ast2449>> {}; // CXXRecordDecl WeakCallbackInfo
struct _ast2441
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2439>, _str118>, _ast184>>> {
}; // FieldDecl isolate_
struct _ast2442
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2439>, _str119>, _ast2443>>> {
};                                          // FieldDecl parameter_
struct _ast2443 : PointerType<_ast2444> {}; // PointerType T *
struct _ast2445
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2439>, _str121>, _ast2446>>> {
}; // FieldDecl callback_
struct _ast2446 : PointerType<_ast2447> {
}; // PointerType v8::WeakCallbackInfo::Callback *
struct _ast2447 : TypedefType<_ast2448> {
}; // TypedefType v8::WeakCallbackInfo::Callback
struct _ast2448
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast2439>, _str120>, _ast2447>>> {
}; // TypedefDecl Callback
struct _ast2449
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2439>, _str122>, _ast2450>>> {
}; // FieldDecl embedder_fields_
struct _ast2451
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2439>, _str117>, _ast2440>,
                     None>,
          None> {}; // CXXRecordDecl WeakCallbackInfo
struct _ast2452
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2439>, _str124>, _ast2458>>,
              Pack<_ast2453, _ast2454, _ast2455, _ast2457>>>,
          _ast2459>>,
      DeclContext<Pack<_ast2453, _ast2454, _ast2455, _ast2457>> {
}; // CXXConstructorDecl WeakCallbackInfo<T>
struct _ast2453
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2452>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2454
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2452>, _str79>, _ast2443>>>> {
}; // ParmVarDecl parameter
struct _ast2455
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2452>, _str123>, _ast2456>>>> {
}; // ParmVarDecl embedder_fields
struct _ast2457
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2452>, _str80>, _ast2446>>>> {
}; // ParmVarDecl callback
struct _ast2458 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast2443, _ast2456, _ast2446>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, T *, void **,
   // v8::WeakCallbackInfo::Callback *)
struct _ast2459 : PointerType<_ast2440> {}; // PointerType WeakCallbackInfo<T> *
struct _ast2460
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2439>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast2462> {}; // CXXMethodDecl GetIsolate
struct _ast2461 : FunctionProtoType<_ast184, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Isolate *() const
struct _ast2462 : PointerType<_ast2463> {
}; // PointerType const WeakCallbackInfo<T> *
struct _ast2463 : ConstQualifiedType<_ast2440> {
}; // InjectedClassNameType const WeakCallbackInfo<T>
struct _ast2464
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2439>, _str126>, _ast2465>>,
              Pack<>>>,
          _ast2462> {}; // CXXMethodDecl GetParameter
struct _ast2465 : FunctionProtoType<_ast2443, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType T *() const
struct _ast2466
    : DeclContext<Pack<_ast2467>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2439>, _str128>, _ast2468>>,
              Pack<_ast2467>>>,
          _ast2462> {}; // CXXMethodDecl GetInternalField
struct _ast2467
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2466>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast2468
    : FunctionProtoType<_ast2223, Pack<_ast1901>, ConstQualifiedType> {
}; // FunctionProtoType void *(int) const
struct _ast2469
    : DeclContext<Pack<_ast2470>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2439>, _str129>, _ast2471>>,
              Pack<_ast2470>>>,
          _ast2462> {}; // CXXMethodDecl SetSecondPassCallback
struct _ast2470
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2469>, _str80>, _ast2447>>>> {
}; // ParmVarDecl callback
struct _ast2471
    : FunctionProtoType<_ast114, Pack<_ast2447>, ConstQualifiedType> {
}; // FunctionProtoType void (v8::WeakCallbackInfo::Callback) const
struct _ast2472 : DeclContext<Pack<_ast2475,
                                   _ast2473,
                                   _ast2479,
                                   _ast2490,
                                   _ast2493,
                                   _ast2495,
                                   _ast2497>> {
}; // ClassTemplateSpecializationDecl WeakCallbackInfo
struct _ast2473
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast2472>, _str120>, _ast2474>>> {
}; // TypedefDecl Callback
struct _ast2474 : TypedefType<_ast2473> {
}; // TypedefType v8::WeakCallbackInfo<void>::Callback
struct _ast2475
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2472>, _str130>, _ast2476>>>> {
}; // ParmVarDecl data
struct _ast2476 : LValueReferenceType<ReferenceType<_ast2477>> {
}; // LValueReferenceType const WeakCallbackInfo<void> &
struct _ast2477 : ConstQualifiedType<_ast2478> {
}; // TemplateSpecializationType const WeakCallbackInfo<void>
struct _ast2479
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2472>, _str117>, _ast2487>>,
              Pack<_ast2480, _ast2481, _ast2484, _ast2485>>>,
          _ast2488>>,
      DeclContext<Pack<_ast2480, _ast2481, _ast2484, _ast2485>> {
}; // CXXConstructorDecl WeakCallbackInfo
struct _ast2480
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2479>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2481
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2479>, _str79>, _ast2482>>>> {
};                                          // ParmVarDecl parameter
struct _ast2482 : PointerType<_ast2483> {}; // PointerType void *
struct _ast2484
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2479>, _str123>, _ast2456>>>> {
}; // ParmVarDecl embedder_fields
struct _ast2485
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2479>, _str80>, _ast2486>>>> {
}; // ParmVarDecl callback
struct _ast2486 : PointerType<_ast2474> {
}; // PointerType v8::WeakCallbackInfo<void>::Callback *
struct _ast2487 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast2482, _ast2456, _ast2486>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, void *, void **,
   // v8::WeakCallbackInfo<void>::Callback *)
struct _ast2488 : PointerType<_ast2489> {
}; // PointerType v8::WeakCallbackInfo<void> *
struct _ast2489 : StructOrClassRecordType<RecordType<_ast2472>> {
}; // RecordType v8::WeakCallbackInfo<void>
struct _ast2490
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2472>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast2491> {}; // CXXMethodDecl GetIsolate
struct _ast2491 : PointerType<_ast2492> {
}; // PointerType const v8::WeakCallbackInfo<void> *
struct _ast2492 : ConstQualifiedType<_ast2489> {
}; // RecordType const v8::WeakCallbackInfo<void>
struct _ast2493
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2472>, _str126>, _ast2494>>,
              Pack<>>>,
          _ast2491> {}; // CXXMethodDecl GetParameter
struct _ast2494 : FunctionProtoType<_ast2482, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType void *() const
struct _ast2495
    : DeclContext<Pack<_ast2496>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2472>, _str128>, _ast2468>>,
              Pack<_ast2496>>>,
          _ast2491> {}; // CXXMethodDecl GetInternalField
struct _ast2496
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2495>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast2497
    : DeclContext<Pack<_ast2498>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2472>, _str129>, _ast2499>>,
              Pack<_ast2498>>>,
          _ast2491> {}; // CXXMethodDecl SetSecondPassCallback
struct _ast2498
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2497>, _str80>, _ast2474>>>> {
}; // ParmVarDecl callback
struct _ast2499
    : FunctionProtoType<_ast114, Pack<_ast2474>, ConstQualifiedType> {
}; // FunctionProtoType void (v8::WeakCallbackInfo<void>::Callback) const
struct _ast2504
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1822>, _str74>, _ast1823>,
                     None>,
          None> {}; // CXXRecordDecl PersistentBase
struct _ast2505
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str75>, _ast113>>,
              Pack<>>>,
          _ast2506> {};                     // CXXMethodDecl Reset
struct _ast2506 : PointerType<_ast1823> {}; // PointerType PersistentBase<T> *
struct _ast2509
    : DeclContext<Pack<_ast2510, _ast2511>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str75>, _ast2515>>,
              Pack<_ast2510, _ast2511>>>,
          _ast2506> {}; // CXXMethodDecl Reset
struct _ast2510
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2509>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2511
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2509>, _str76>, _ast2512>>>> {
}; // ParmVarDecl other
struct _ast2512 : LValueReferenceType<ReferenceType<_ast2513>> {
}; // LValueReferenceType const Local<S> &
struct _ast2513 : ConstQualifiedType<_ast2514> {
}; // TemplateSpecializationType const Local<S>
struct _ast2515
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2512>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2518
    : DeclContext<Pack<_ast2519, _ast2520>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str75>, _ast2524>>,
              Pack<_ast2519, _ast2520>>>,
          _ast2506> {}; // CXXMethodDecl Reset
struct _ast2519
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2518>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2520
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2518>, _str76>, _ast2521>>>> {
}; // ParmVarDecl other
struct _ast2521 : LValueReferenceType<ReferenceType<_ast2522>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast2522 : ConstQualifiedType<_ast2523> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2524
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2521>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2525
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str52>, _ast128>>,
              Pack<>>>,
          _ast2526> {}; // CXXMethodDecl IsEmpty
struct _ast2526 : PointerType<_ast2527> {
}; // PointerType const PersistentBase<T> *
struct _ast2527 : ConstQualifiedType<_ast1823> {
}; // InjectedClassNameType const PersistentBase<T>
struct _ast2528
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str77>, _ast113>>,
              Pack<>>>,
          _ast2506> {}; // CXXMethodDecl Empty
struct _ast2529
    : DeclContext<Pack<_ast2530>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str78>, _ast2531>>,
              Pack<_ast2530>>>,
          _ast2526> {}; // CXXMethodDecl Get
struct _ast2530
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2529>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2531
    : FunctionProtoType<_ast2532, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2535
    : DeclContext<Pack<_ast2536>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str56>, _ast2540>>,
              Pack<_ast2536>>>,
          _ast2526> {}; // CXXMethodDecl operator==
struct _ast2536
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2535>, _str51>, _ast2537>>>> {
}; // ParmVarDecl that
struct _ast2537 : LValueReferenceType<ReferenceType<_ast2538>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast2538 : ConstQualifiedType<_ast2539> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2540
    : FunctionProtoType<_ast129, Pack<_ast2537>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2543
    : DeclContext<Pack<_ast2544>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str56>, _ast2548>>,
              Pack<_ast2544>>>,
          _ast2526> {}; // CXXMethodDecl operator==
struct _ast2544
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2543>, _str51>, _ast2545>>>> {
}; // ParmVarDecl that
struct _ast2545 : LValueReferenceType<ReferenceType<_ast2546>> {
}; // LValueReferenceType const Local<S> &
struct _ast2546 : ConstQualifiedType<_ast2547> {
}; // TemplateSpecializationType const Local<S>
struct _ast2548
    : FunctionProtoType<_ast129, Pack<_ast2545>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2551
    : DeclContext<Pack<_ast2552>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str57>, _ast2556>>,
              Pack<_ast2552>>>,
          _ast2526> {}; // CXXMethodDecl operator!=
struct _ast2552
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2551>, _str51>, _ast2553>>>> {
}; // ParmVarDecl that
struct _ast2553 : LValueReferenceType<ReferenceType<_ast2554>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast2554 : ConstQualifiedType<_ast2555> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2556
    : FunctionProtoType<_ast129, Pack<_ast2553>, ConstQualifiedType> {
}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2559
    : DeclContext<Pack<_ast2560>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str57>, _ast2564>>,
              Pack<_ast2560>>>,
          _ast2526> {}; // CXXMethodDecl operator!=
struct _ast2560
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2559>, _str51>, _ast2561>>>> {
}; // ParmVarDecl that
struct _ast2561 : LValueReferenceType<ReferenceType<_ast2562>> {
}; // LValueReferenceType const Local<S> &
struct _ast2562 : ConstQualifiedType<_ast2563> {
}; // TemplateSpecializationType const Local<S>
struct _ast2564
    : FunctionProtoType<_ast129, Pack<_ast2561>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2567
    : DeclContext<Pack<_ast2568, _ast2571, _ast2573>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str82>, _ast2574>>,
              Pack<_ast2568, _ast2571, _ast2573>>>,
          _ast2506> {}; // CXXMethodDecl SetWeak
struct _ast2568
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2567>, _str79>, _ast2569>>>> {
};                                          // ParmVarDecl parameter
struct _ast2569 : PointerType<_ast2570> {}; // PointerType P *
struct _ast2571
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2567>, _str80>, _ast2572>>>> {
}; // ParmVarDecl callback
struct _ast2573
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2567>, _str81>, _ast1900>>>> {
}; // ParmVarDecl type
struct _ast2574 : FunctionProtoType<_ast114,
                                    Pack<_ast2569, _ast2572, _ast1900>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback,
   // v8::WeakCallbackType)
struct _ast2575
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str82>, _ast113>>,
              Pack<>>>,
          _ast2506> {}; // CXXMethodDecl SetWeak
struct _ast2578
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str83>, _ast2579>>,
              Pack<>>>,
          _ast2506> {}; // CXXMethodDecl ClearWeak
struct _ast2579 : FunctionProtoType<_ast2580, Pack<>, UnqualifiedType> {
};                                          // FunctionProtoType P *()
struct _ast2580 : PointerType<_ast2581> {}; // PointerType P *
struct _ast2582
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str83>, _ast113>>,
              Pack<>>>,
          _ast2506> {}; // CXXMethodDecl ClearWeak
struct _ast2583
    : DeclContext<Pack<_ast2584>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str85>, _ast1917>>,
              Pack<_ast2584>>>,
          _ast2506> {}; // CXXMethodDecl AnnotateStrongRetainer
struct _ast2584
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2583>, _str84>, _ast1914>>>> {
}; // ParmVarDecl label
struct _ast2585
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str86>, _ast128>>,
              Pack<>>>,
          _ast2526> {}; // CXXMethodDecl IsWeak
struct _ast2586
    : DeclContext<Pack<_ast2587>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str88>, _ast1922>>,
              Pack<_ast2587>>>,
          _ast2506> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2587
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2586>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast2588
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str89>, _ast1924>>,
              Pack<>>>,
          _ast2526> {}; // CXXMethodDecl WrapperClassId
struct _ast2589
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str131>, _ast2592>>,
              Pack<_ast2590>>>,
          _ast2506>>,
      DeclContext<Pack<_ast2590>> {}; // CXXConstructorDecl PersistentBase<T>
struct _ast2590
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2589>, _str76>, _ast2591>>>> {
}; // ParmVarDecl other
struct _ast2591 : LValueReferenceType<ReferenceType<_ast2527>> {
}; // LValueReferenceType const PersistentBase<T> &
struct _ast2592 : FunctionProtoType<_ast114, Pack<_ast2591>, UnqualifiedType> {
}; // FunctionProtoType void (const PersistentBase<T> &)
struct _ast2593
    : DeclContext<Pack<_ast2594>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast1822>, _str64>, _ast2592>>,
              Pack<_ast2594>>>,
          _ast2506> {}; // CXXMethodDecl operator=
struct _ast2594
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2593>, _str62>, _ast2591>>>> {
}; // ParmVarDecl
struct _ast2596
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1816>, _str73>, _ast1817>,
                     None>,
          None> {}; // CXXRecordDecl NonCopyablePersistentTraits
struct _ast2597
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1816>, _str132>, _ast2598>>> {
}; // TypedefDecl NonCopyablePersistent
struct _ast2598 : TypedefType<_ast2597> {
}; // TypedefType v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ast2599
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast1816>, _str133>, _ast2600>>> {
};                                                // VarDecl kResetInDestructor
struct _ast2600 : ConstQualifiedType<_ast129> {}; // BuiltinType const bool
struct _ast2604
    : DeclContext<Pack<_ast2605, _ast2609>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1816>, _str136>, _ast2611>>,
          Pack<_ast2605, _ast2609>>> {}; // CXXMethodDecl Copy
struct _ast2605
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2604>, _str134>, _ast2606>>>> {
}; // ParmVarDecl source
struct _ast2606 : LValueReferenceType<ReferenceType<_ast2607>> {
}; // LValueReferenceType const Persistent<S, M> &
struct _ast2607 : ConstQualifiedType<_ast2608> {
}; // TemplateSpecializationType const Persistent<S, M>
struct _ast2609
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2604>, _str135>, _ast2610>>>> {
}; // ParmVarDecl dest
struct _ast2610 : PointerType<_ast2598> {
}; // PointerType v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ast2611
    : FunctionProtoType<_ast114, Pack<_ast2606, _ast2610>, UnqualifiedType> {
}; // FunctionProtoType void (const Persistent<S, M> &,
   // v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ast2614
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1816>, _str137>, _ast113>>,
          Pack<>>> {}; // CXXMethodDecl Uncompilable
struct _ast2617
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str138>, _ast2618>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast2619, _ast2620, _ast2622, _ast2626>> {
}; // CXXRecordDecl CopyablePersistentTraits
struct _ast2619
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2617>, _str138>, _ast2618>,
                     None>,
          None> {}; // CXXRecordDecl CopyablePersistentTraits
struct _ast2620
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast2617>, _str139>, _ast2621>>> {
}; // TypedefDecl CopyablePersistent
struct _ast2621 : TypedefType<_ast2620> {
}; // TypedefType v8::CopyablePersistentTraits::CopyablePersistent
struct _ast2622
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2617>, _str133>, _ast2600>>> {
}; // VarDecl kResetInDestructor
struct _ast2626
    : DeclContext<Pack<_ast2627, _ast2631>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast2617>, _str136>, _ast2633>>,
          Pack<_ast2627, _ast2631>>> {}; // CXXMethodDecl Copy
struct _ast2627
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2626>, _str134>, _ast2628>>>> {
}; // ParmVarDecl source
struct _ast2628 : LValueReferenceType<ReferenceType<_ast2629>> {
}; // LValueReferenceType const Persistent<S, M> &
struct _ast2629 : ConstQualifiedType<_ast2630> {
}; // TemplateSpecializationType const Persistent<S, M>
struct _ast2631
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2626>, _str135>, _ast2632>>>> {
}; // ParmVarDecl dest
struct _ast2632 : PointerType<_ast2621> {
}; // PointerType v8::CopyablePersistentTraits::CopyablePersistent *
struct _ast2633
    : FunctionProtoType<_ast114, Pack<_ast2628, _ast2632>, UnqualifiedType> {
}; // FunctionProtoType void (const Persistent<S, M> &,
   // v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ast2637
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2035>, _str90>, _ast2036>,
                     None>,
          None> {}; // CXXRecordDecl Persistent
struct _ast2638
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str140>, _ast113>>,
              Pack<>>>,
          _ast2639>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2639 : PointerType<_ast2036> {}; // PointerType Persistent<T, M> *
struct _ast2642
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str140>, _ast2646>>,
              Pack<_ast2643, _ast2644>>>,
          _ast2639>>,
      DeclContext<Pack<_ast2643, _ast2644>> {
}; // CXXConstructorDecl Persistent<T, M>
struct _ast2643
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2642>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2644
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2642>, _str51>, _ast2645>>>> {
}; // ParmVarDecl that
struct _ast2646
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2645>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2650
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str140>, _ast2656>>,
              Pack<_ast2651, _ast2652>>>,
          _ast2639>>,
      DeclContext<Pack<_ast2651, _ast2652>> {
}; // CXXConstructorDecl Persistent<T, M>
struct _ast2651
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2650>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2652
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2650>, _str51>, _ast2653>>>> {
}; // ParmVarDecl that
struct _ast2653 : LValueReferenceType<ReferenceType<_ast2654>> {
}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2654 : ConstQualifiedType<_ast2655> {
}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2656
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2653>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2657
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str140>, _ast2661>>,
              Pack<_ast2658>>>,
          _ast2639>>,
      DeclContext<Pack<_ast2658>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2658
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2657>, _str51>, _ast2659>>>> {
}; // ParmVarDecl that
struct _ast2659 : LValueReferenceType<ReferenceType<_ast2660>> {
}; // LValueReferenceType const Persistent<T, M> &
struct _ast2660 : ConstQualifiedType<_ast2036> {
}; // InjectedClassNameType const Persistent<T, M>
struct _ast2661 : FunctionProtoType<_ast114, Pack<_ast2659>, UnqualifiedType> {
}; // FunctionProtoType void (const Persistent<T, M> &)
struct _ast2665
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str140>, _ast2670>>,
              Pack<_ast2666>>>,
          _ast2639>>,
      DeclContext<Pack<_ast2666>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2666
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2665>, _str51>, _ast2667>>>> {
}; // ParmVarDecl that
struct _ast2667 : LValueReferenceType<ReferenceType<_ast2668>> {
}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2668 : ConstQualifiedType<_ast2669> {
}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2670 : FunctionProtoType<_ast114, Pack<_ast2667>, UnqualifiedType> {
}; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2671
    : DeclContext<Pack<_ast2672>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str64>, _ast2673>>,
              Pack<_ast2672>>>,
          _ast2639> {}; // CXXMethodDecl operator=
struct _ast2672
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2671>, _str51>, _ast2659>>>> {
}; // ParmVarDecl that
struct _ast2673 : FunctionProtoType<_ast2674, Pack<_ast2659>, UnqualifiedType> {
}; // FunctionProtoType Persistent<T, M> &(const Persistent<T, M> &)
struct _ast2674 : LValueReferenceType<ReferenceType<_ast2036>> {
}; // LValueReferenceType Persistent<T, M> &
struct _ast2678
    : DeclContext<Pack<_ast2679>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str64>, _ast2683>>,
              Pack<_ast2679>>>,
          _ast2639> {}; // CXXMethodDecl operator=
struct _ast2679
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2678>, _str51>, _ast2680>>>> {
}; // ParmVarDecl that
struct _ast2680 : LValueReferenceType<ReferenceType<_ast2681>> {
}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2681 : ConstQualifiedType<_ast2682> {
}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2683 : FunctionProtoType<_ast2674, Pack<_ast2680>, UnqualifiedType> {
}; // FunctionProtoType Persistent<T, M> &(const Persistent<S, M2> &)
struct _ast2684
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str141>, _ast113>>,
              Pack<>>>,
          _ast2639>> {}; // CXXDestructorDecl ~Persistent<T, M>
struct _ast2687
    : DeclContext<Pack<_ast2688>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast2035>, _str58>, _ast2692>>,
          Pack<_ast2688>>> {}; // CXXMethodDecl Cast
struct _ast2688
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2687>, _str51>, _ast2689>>>> {
}; // ParmVarDecl that
struct _ast2689 : LValueReferenceType<ReferenceType<_ast2690>> {
}; // LValueReferenceType const Persistent<S> &
struct _ast2690 : ConstQualifiedType<_ast2691> {
}; // TemplateSpecializationType const Persistent<S>
struct _ast2692 : FunctionProtoType<_ast2693, Pack<_ast2689>, UnqualifiedType> {
}; // FunctionProtoType Persistent<T> &(const Persistent<S> &)
struct _ast2693 : LValueReferenceType<ReferenceType<_ast2694>> {
}; // LValueReferenceType Persistent<T> &
struct _ast2697
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2035>, _str59>, _ast2698>>,
              Pack<>>>,
          _ast2701> {}; // CXXMethodDecl As
struct _ast2698 : FunctionProtoType<_ast2699, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Persistent<S> &() const
struct _ast2699 : LValueReferenceType<ReferenceType<_ast2700>> {
}; // LValueReferenceType Persistent<S> &
struct _ast2701 : PointerType<_ast2660> {
}; // PointerType const Persistent<T, M> *
struct _ast2703
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2120>, _str92>, _ast2121>,
                     None>,
          None> {}; // CXXRecordDecl Global
struct _ast2704
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str142>, _ast113>>,
              Pack<>>>,
          _ast2705>> {};                    // CXXConstructorDecl Global<T>
struct _ast2705 : PointerType<_ast2121> {}; // PointerType Global<T> *
struct _ast2708
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str142>, _ast2712>>,
              Pack<_ast2709, _ast2710>>>,
          _ast2705>>,
      DeclContext<Pack<_ast2709, _ast2710>> {}; // CXXConstructorDecl Global<T>
struct _ast2709
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2708>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2710
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2708>, _str51>, _ast2711>>>> {
}; // ParmVarDecl that
struct _ast2712
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2711>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2715
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str142>, _ast2721>>,
              Pack<_ast2716, _ast2717>>>,
          _ast2705>>,
      DeclContext<Pack<_ast2716, _ast2717>> {}; // CXXConstructorDecl Global<T>
struct _ast2716
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2715>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2717
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2715>, _str51>, _ast2718>>>> {
}; // ParmVarDecl that
struct _ast2718 : LValueReferenceType<ReferenceType<_ast2719>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast2719 : ConstQualifiedType<_ast2720> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2721
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2718>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2722
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str142>, _ast2725>>,
              Pack<_ast2723>>>,
          _ast2705>>,
      DeclContext<Pack<_ast2723>> {}; // CXXConstructorDecl Global<T>
struct _ast2723
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2722>, _str76>, _ast2724>>>> {
}; // ParmVarDecl other
struct _ast2724 : RValueReferenceType<ReferenceType<_ast2121>> {
}; // RValueReferenceType Global<T> &&
struct _ast2725 : FunctionProtoType<_ast114, Pack<_ast2724>, UnqualifiedType> {
}; // FunctionProtoType void (Global<T> &&)
struct _ast2726
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str143>, _ast113>>,
              Pack<>>>,
          _ast2705>> {}; // CXXDestructorDecl ~Global<T>
struct _ast2729
    : DeclContext<Pack<_ast2730>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str64>, _ast2733>>,
              Pack<_ast2730>>>,
          _ast2705> {}; // CXXMethodDecl operator=
struct _ast2730
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2729>, _str95>, _ast2731>>>> {
}; // ParmVarDecl rhs
struct _ast2731 : RValueReferenceType<ReferenceType<_ast2732>> {
}; // RValueReferenceType Global<S> &&
struct _ast2733 : FunctionProtoType<_ast2734, Pack<_ast2731>, UnqualifiedType> {
}; // FunctionProtoType Global<T> &(Global<S> &&)
struct _ast2734 : LValueReferenceType<ReferenceType<_ast2121>> {
}; // LValueReferenceType Global<T> &
struct _ast2735
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str144>, _ast2736>>,
              Pack<>>>,
          _ast2705> {}; // CXXMethodDecl Pass
struct _ast2736 : FunctionProtoType<_ast2121, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Global<T> ()
struct _ast2737
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast2120>, _str145>, _ast2738>>> {
}; // TypedefDecl MoveOnlyTypeForCPP03
struct _ast2738 : TypedefType<_ast2737> {
}; // TypedefType v8::Global::MoveOnlyTypeForCPP03
struct _ast2739
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str142>, _ast2743>>,
              Pack<_ast2740>>>,
          _ast2705>>,
      DeclContext<Pack<_ast2740>> {}; // CXXConstructorDecl Global<T>
struct _ast2740
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2739>, _str62>, _ast2741>>>> {
}; // ParmVarDecl
struct _ast2741 : LValueReferenceType<ReferenceType<_ast2742>> {
}; // LValueReferenceType const Global<T> &
struct _ast2742 : ConstQualifiedType<_ast2121> {
}; // InjectedClassNameType const Global<T>
struct _ast2743 : FunctionProtoType<_ast114, Pack<_ast2741>, UnqualifiedType> {
}; // FunctionProtoType void (const Global<T> &)
struct _ast2744
    : DeclContext<Pack<_ast2745>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2120>, _str64>, _ast2743>>,
              Pack<_ast2745>>>,
          _ast2705> {}; // CXXMethodDecl operator=
struct _ast2745
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2744>, _str62>, _ast2741>>>> {
}; // ParmVarDecl
struct _ast2747
    : TypeAliasDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str146>, _ast2748>>> {
};                                          // TypeAliasDecl UniquePersistent
struct _ast2748 : TypedefType<_ast2747> {}; // TypedefType v8::UniquePersistent
struct _ast2751
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2124>, _str93>, _ast2125>,
                     None>,
          None> {}; // CXXRecordDecl TracedGlobal
struct _ast2752
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str147>, _ast113>>,
              Pack<>>>,
          _ast2753>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2753 : PointerType<_ast2125> {}; // PointerType TracedGlobal<T> *
struct _ast2754
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str148>, _ast113>>,
              Pack<>>>,
          _ast2753>> {}; // CXXDestructorDecl ~TracedGlobal<T>
struct _ast2757
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str147>, _ast2761>>,
              Pack<_ast2758, _ast2759>>>,
          _ast2753>>,
      DeclContext<Pack<_ast2758, _ast2759>> {
}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2758
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2757>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2759
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2757>, _str51>, _ast2760>>>> {
}; // ParmVarDecl that
struct _ast2761
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2760>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2762
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str147>, _ast2765>>,
              Pack<_ast2763>>>,
          _ast2753>>,
      DeclContext<Pack<_ast2763>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2763
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2762>, _str76>, _ast2764>>>> {
}; // ParmVarDecl other
struct _ast2764 : RValueReferenceType<ReferenceType<_ast2125>> {
}; // RValueReferenceType TracedGlobal<T> &&
struct _ast2765 : FunctionProtoType<_ast114, Pack<_ast2764>, UnqualifiedType> {
}; // FunctionProtoType void (TracedGlobal<T> &&)
struct _ast2768
    : DeclContext<Pack<_ast2769>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str64>, _ast2772>>,
              Pack<_ast2769>>>,
          _ast2753> {}; // CXXMethodDecl operator=
struct _ast2769
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2768>, _str95>, _ast2770>>>> {
}; // ParmVarDecl rhs
struct _ast2770 : RValueReferenceType<ReferenceType<_ast2771>> {
}; // RValueReferenceType TracedGlobal<S> &&
struct _ast2772 : FunctionProtoType<_ast2773, Pack<_ast2770>, UnqualifiedType> {
}; // FunctionProtoType TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ast2773 : LValueReferenceType<ReferenceType<_ast2125>> {
}; // LValueReferenceType TracedGlobal<T> &
struct _ast2774
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str147>, _ast2778>>,
              Pack<_ast2775>>>,
          _ast2753>>,
      DeclContext<Pack<_ast2775>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2775
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2774>, _str62>, _ast2776>>>> {
}; // ParmVarDecl
struct _ast2776 : LValueReferenceType<ReferenceType<_ast2777>> {
}; // LValueReferenceType const TracedGlobal<T> &
struct _ast2777 : ConstQualifiedType<_ast2125> {
}; // InjectedClassNameType const TracedGlobal<T>
struct _ast2778 : FunctionProtoType<_ast114, Pack<_ast2776>, UnqualifiedType> {
}; // FunctionProtoType void (const TracedGlobal<T> &)
struct _ast2779
    : DeclContext<Pack<_ast2780>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str64>, _ast2778>>,
              Pack<_ast2780>>>,
          _ast2753> {}; // CXXMethodDecl operator=
struct _ast2780
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2779>, _str62>, _ast2776>>>> {
}; // ParmVarDecl
struct _ast2781
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str52>, _ast128>>,
              Pack<>>>,
          _ast2782> {}; // CXXMethodDecl IsEmpty
struct _ast2782 : PointerType<_ast2777> {
}; // PointerType const TracedGlobal<T> *
struct _ast2783
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str75>, _ast113>>,
              Pack<>>>,
          _ast2753> {}; // CXXMethodDecl Reset
struct _ast2786
    : DeclContext<Pack<_ast2787, _ast2788>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str75>, _ast2792>>,
              Pack<_ast2787, _ast2788>>>,
          _ast2753> {}; // CXXMethodDecl Reset
struct _ast2787
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2786>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2788
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2786>, _str76>, _ast2789>>>> {
}; // ParmVarDecl other
struct _ast2789 : LValueReferenceType<ReferenceType<_ast2790>> {
}; // LValueReferenceType const Local<S> &
struct _ast2790 : ConstQualifiedType<_ast2791> {
}; // TemplateSpecializationType const Local<S>
struct _ast2792
    : FunctionProtoType<_ast114, Pack<_ast184, _ast2789>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2793
    : DeclContext<Pack<_ast2794>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str78>, _ast2795>>,
              Pack<_ast2794>>>,
          _ast2782> {}; // CXXMethodDecl Get
struct _ast2794
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2793>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2795
    : FunctionProtoType<_ast2796, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2799
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str59>, _ast2800>>,
              Pack<>>>,
          _ast2782> {}; // CXXMethodDecl As
struct _ast2800 : FunctionProtoType<_ast2801, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2801 : LValueReferenceType<ReferenceType<_ast2802>> {
}; // LValueReferenceType TracedGlobal<S> &
struct _ast2805
    : DeclContext<Pack<_ast2806>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str56>, _ast2810>>,
              Pack<_ast2806>>>,
          _ast2782> {}; // CXXMethodDecl operator==
struct _ast2806
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2805>, _str51>, _ast2807>>>> {
}; // ParmVarDecl that
struct _ast2807 : LValueReferenceType<ReferenceType<_ast2808>> {
}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2808 : ConstQualifiedType<_ast2809> {
}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2810
    : FunctionProtoType<_ast129, Pack<_ast2807>, ConstQualifiedType> {
}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2813
    : DeclContext<Pack<_ast2814>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str56>, _ast2818>>,
              Pack<_ast2814>>>,
          _ast2782> {}; // CXXMethodDecl operator==
struct _ast2814
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2813>, _str51>, _ast2815>>>> {
}; // ParmVarDecl that
struct _ast2815 : LValueReferenceType<ReferenceType<_ast2816>> {
}; // LValueReferenceType const Local<S> &
struct _ast2816 : ConstQualifiedType<_ast2817> {
}; // TemplateSpecializationType const Local<S>
struct _ast2818
    : FunctionProtoType<_ast129, Pack<_ast2815>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2821
    : DeclContext<Pack<_ast2822>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str57>, _ast2826>>,
              Pack<_ast2822>>>,
          _ast2782> {}; // CXXMethodDecl operator!=
struct _ast2822
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2821>, _str51>, _ast2823>>>> {
}; // ParmVarDecl that
struct _ast2823 : LValueReferenceType<ReferenceType<_ast2824>> {
}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2824 : ConstQualifiedType<_ast2825> {
}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2826
    : FunctionProtoType<_ast129, Pack<_ast2823>, ConstQualifiedType> {
}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2829
    : DeclContext<Pack<_ast2830>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str57>, _ast2834>>,
              Pack<_ast2830>>>,
          _ast2782> {}; // CXXMethodDecl operator!=
struct _ast2830
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2829>, _str51>, _ast2831>>>> {
}; // ParmVarDecl that
struct _ast2831 : LValueReferenceType<ReferenceType<_ast2832>> {
}; // LValueReferenceType const Local<S> &
struct _ast2832 : ConstQualifiedType<_ast2833> {
}; // TemplateSpecializationType const Local<S>
struct _ast2834
    : FunctionProtoType<_ast129, Pack<_ast2831>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2835
    : DeclContext<Pack<_ast2836>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str88>, _ast1922>>,
              Pack<_ast2836>>>,
          _ast2753> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2836
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2835>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast2837
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str89>, _ast1924>>,
              Pack<>>>,
          _ast2782> {}; // CXXMethodDecl WrapperClassId
struct _ast2838
    : DeclContext<Pack<_ast2839, _ast2840>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2124>, _str96>, _ast2226>>,
              Pack<_ast2839, _ast2840>>>,
          _ast2753> {}; // CXXMethodDecl SetFinalizationCallback
struct _ast2839
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2838>, _str79>, _ast2223>>>> {
}; // ParmVarDecl parameter
struct _ast2840
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2838>, _str80>, _ast2225>>>> {
}; // ParmVarDecl callback
struct _ast2841
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str149>, _ast2842>,
                     None>,
          None> {}; // CXXRecordDecl HandleScope
struct _ast2842 : StructOrClassRecordType<RecordType<_ast2841>> {
}; // RecordType v8::HandleScope
struct _ast2843
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2841>, _str149>, _ast2842>,
                     None>,
          None> {}; // CXXRecordDecl HandleScope
struct _ast2844
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str149>, _ast2846>>,
              Pack<_ast2845>>>,
          _ast2847>>,
      DeclContext<Pack<_ast2845>> {}; // CXXConstructorDecl HandleScope
struct _ast2845
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2844>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2846 : FunctionProtoType<_ast114, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *)
struct _ast2847 : PointerType<_ast2842> {}; // PointerType v8::HandleScope *
struct _ast2848
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str150>, _ast2849>>,
              Pack<>>>,
          _ast2847>> {}; // CXXDestructorDecl ~HandleScope
struct _ast2849 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2850
    : DeclContext<Pack<_ast2851>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast2841>, _str151>, _ast2852>>,
          Pack<_ast2851>>> {}; // CXXMethodDecl NumberOfHandles
struct _ast2851
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2850>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2852 : FunctionProtoType<_ast1901, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType int (v8::Isolate *)
struct _ast2853
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast2854> {}; // CXXMethodDecl GetIsolate
struct _ast2854 : PointerType<_ast2855> {
}; // PointerType const v8::HandleScope *
struct _ast2855 : ConstQualifiedType<_ast2842> {
}; // RecordType const v8::HandleScope
struct _ast2856
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str149>, _ast2859>>,
              Pack<_ast2857>>>,
          _ast2847>>,
      DeclContext<Pack<_ast2857>> {}; // CXXConstructorDecl HandleScope
struct _ast2857
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2856>, _str62>, _ast2858>>>> {
}; // ParmVarDecl
struct _ast2858 : LValueReferenceType<ReferenceType<_ast2855>> {
}; // LValueReferenceType const v8::HandleScope &
struct _ast2859 : FunctionProtoType<_ast114, Pack<_ast2858>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::HandleScope &)
struct _ast2860
    : DeclContext<Pack<_ast2861>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str64>, _ast2859>>,
              Pack<_ast2861>>>,
          _ast2847> {}; // CXXMethodDecl operator=
struct _ast2861
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2860>, _str62>, _ast2858>>>> {
}; // ParmVarDecl
struct _ast2862
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str149>, _ast2863>>,
              Pack<>>>,
          _ast2847>> {}; // CXXConstructorDecl HandleScope
struct _ast2863 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2864
    : DeclContext<Pack<_ast2865>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2841>, _str152>, _ast2846>>,
              Pack<_ast2865>>>,
          _ast2847> {}; // CXXMethodDecl Initialize
struct _ast2865
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2864>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2866
    : DeclContext<Pack<_ast2867, _ast2870>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast2841>, _str154>, _ast2872>>,
          Pack<_ast2867, _ast2870>>> {}; // CXXMethodDecl CreateHandle
struct _ast2867
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2866>, _str60>, _ast2868>>>> {
};                                          // ParmVarDecl isolate
struct _ast2868 : PointerType<_ast2869> {}; // PointerType internal::Isolate *
struct _ast2870
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2866>, _str153>, _ast2871>>>> {
}; // ParmVarDecl value
struct _ast2872
    : FunctionProtoType<_ast2873, Pack<_ast2868, _ast2871>, UnqualifiedType> {
}; // FunctionProtoType internal::Address *(internal::Isolate *,
   // internal::Address)
struct _ast2873 : PointerType<_ast2871> {}; // PointerType internal::Address *
struct _ast2874
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2281>, _str105>, _ast2282>,
                     None>,
          None> {}; // CXXRecordDecl EscapableHandleScope
struct _ast2875
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2281>, _str105>, _ast2846>>,
              Pack<_ast2876>>>,
          _ast2877>>,
      DeclContext<Pack<_ast2876>> {}; // CXXConstructorDecl EscapableHandleScope
struct _ast2876
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2875>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2877 : PointerType<_ast2282> {
}; // PointerType v8::EscapableHandleScope *
struct _ast2878
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2281>, _str155>, _ast2879>>,
              Pack<>>>,
          _ast2877>> {}; // CXXDestructorDecl ~EscapableHandleScope
struct _ast2879 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2882
    : DeclContext<Pack<_ast2883>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2281>, _str156>, _ast2885>>,
              Pack<_ast2883>>>,
          _ast2877> {}; // CXXMethodDecl Escape
struct _ast2883
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2882>, _str153>, _ast2884>>>> {
}; // ParmVarDecl value
struct _ast2885 : FunctionProtoType<_ast2886, Pack<_ast2884>, UnqualifiedType> {
}; // FunctionProtoType Local<T> (Local<T>)
struct _ast2889
    : DeclContext<Pack<_ast2890>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2281>, _str157>, _ast2892>>,
              Pack<_ast2890>>>,
          _ast2877> {}; // CXXMethodDecl EscapeMaybe
struct _ast2890
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2889>, _str153>, _ast2891>>>> {
}; // ParmVarDecl value
struct _ast2892 : FunctionProtoType<_ast2893, Pack<_ast2891>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<T> (MaybeLocal<T>)
struct _ast2894
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2281>, _str105>, _ast2898>>,
              Pack<_ast2895>>>,
          _ast2877>>,
      DeclContext<Pack<_ast2895>> {}; // CXXConstructorDecl EscapableHandleScope
struct _ast2895
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2894>, _str62>, _ast2896>>>> {
}; // ParmVarDecl
struct _ast2896 : LValueReferenceType<ReferenceType<_ast2897>> {
}; // LValueReferenceType const v8::EscapableHandleScope &
struct _ast2897 : ConstQualifiedType<_ast2282> {
}; // RecordType const v8::EscapableHandleScope
struct _ast2898 : FunctionProtoType<_ast114, Pack<_ast2896>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::EscapableHandleScope &)
struct _ast2899
    : DeclContext<Pack<_ast2900>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2281>, _str64>, _ast2898>>,
              Pack<_ast2900>>>,
          _ast2877> {}; // CXXMethodDecl operator=
struct _ast2900
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2899>, _str62>, _ast2896>>>> {
}; // ParmVarDecl
struct _ast2901
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str158>, _ast2902>,
                     Pack<_ast2903, _ast2905, _ast2906>>,
          Pack<>>,
      DeclContext<Pack<_ast2907,
                       _ast2908,
                       _ast2911,
                       _ast2913,
                       _ast2918,
                       _ast2903,
                       _ast2905,
                       _ast2906>> {}; // CXXRecordDecl SealHandleScope
struct _ast2902 : StructOrClassRecordType<RecordType<_ast2901>> {
}; // RecordType v8::SealHandleScope
struct _ast2903
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2901>, _str118>, _ast2904>>> {
}; // FieldDecl isolate_
struct _ast2904 : ConstQualifiedType<_ast2868> {
}; // PointerType internal::Isolate *const
struct _ast2905
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2901>, _str159>, _ast2873>>> {
}; // FieldDecl prev_limit_
struct _ast2906
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2901>, _str160>, _ast1901>>> {
}; // FieldDecl prev_sealed_level_
struct _ast2907
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2901>, _str158>, _ast2902>,
                     None>,
          None> {}; // CXXRecordDecl SealHandleScope
struct _ast2908
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2901>, _str158>, _ast2846>>,
              Pack<_ast2909>>>,
          _ast2910>>,
      DeclContext<Pack<_ast2909>> {}; // CXXConstructorDecl SealHandleScope
struct _ast2909
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2908>, _str60>, _ast184>>>> {
};                                          // ParmVarDecl isolate
struct _ast2910 : PointerType<_ast2902> {}; // PointerType v8::SealHandleScope *
struct _ast2911
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2901>, _str161>, _ast2912>>,
              Pack<>>>,
          _ast2910>> {}; // CXXDestructorDecl ~SealHandleScope
struct _ast2912 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast2913
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2901>, _str158>, _ast2917>>,
              Pack<_ast2914>>>,
          _ast2910>>,
      DeclContext<Pack<_ast2914>> {}; // CXXConstructorDecl SealHandleScope
struct _ast2914
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2913>, _str62>, _ast2915>>>> {
}; // ParmVarDecl
struct _ast2915 : LValueReferenceType<ReferenceType<_ast2916>> {
}; // LValueReferenceType const v8::SealHandleScope &
struct _ast2916 : ConstQualifiedType<_ast2902> {
}; // RecordType const v8::SealHandleScope
struct _ast2917 : FunctionProtoType<_ast114, Pack<_ast2915>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::SealHandleScope &)
struct _ast2918
    : DeclContext<Pack<_ast2919>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2901>, _str64>, _ast2917>>,
              Pack<_ast2919>>>,
          _ast2910> {}; // CXXMethodDecl operator=
struct _ast2919
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2918>, _str62>, _ast2915>>>> {
}; // ParmVarDecl
struct _ast2920
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5>, _str3>, _ast6>, None>,
          None> {}; // CXXRecordDecl Data
struct _ast2921
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str162>, _ast2922>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast2923, _ast2924, _ast2928>> {
}; // CXXRecordDecl ScriptOrModule
struct _ast2922 : StructOrClassRecordType<RecordType<_ast2921>> {
}; // RecordType v8::ScriptOrModule
struct _ast2923
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2921>, _str162>, _ast2922>,
                     None>,
          None> {}; // CXXRecordDecl ScriptOrModule
struct _ast2924
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2921>, _str163>, _ast2925>>,
              Pack<>>>,
          _ast2927> {}; // CXXMethodDecl GetResourceName
struct _ast2925 : FunctionProtoType<_ast2926, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast2927 : PointerType<_ast2922> {}; // PointerType v8::ScriptOrModule *
struct _ast2928
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2921>, _str164>, _ast2929>>,
              Pack<>>>,
          _ast2927> {}; // CXXMethodDecl GetHostDefinedOptions
struct _ast2929 : FunctionProtoType<_ast2930, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> ()
struct _ast2931
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast95>, _str44>, _ast96>,
                     None>,
          None> {}; // CXXRecordDecl PrimitiveArray
struct _ast2932
    : DeclContext<Pack<_ast2933, _ast2934>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast95>, _str61>, _ast2935>>,
          Pack<_ast2933, _ast2934>>> {}; // CXXMethodDecl New
struct _ast2933
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2932>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2934
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2932>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast2935
    : FunctionProtoType<_ast2936, Pack<_ast184, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _ast2937
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast95>, _str166>, _ast2938>>,
              Pack<>>>,
          _ast2939> {}; // CXXMethodDecl Length
struct _ast2938 : FunctionProtoType<_ast1901, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType int () const
struct _ast2939 : PointerType<_ast2940> {
}; // PointerType const v8::PrimitiveArray *
struct _ast2940 : ConstQualifiedType<_ast96> {
}; // RecordType const v8::PrimitiveArray
struct _ast2941
    : DeclContext<Pack<_ast2942, _ast2943, _ast2944>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast95>, _str114>, _ast2946>>,
              Pack<_ast2942, _ast2943, _ast2944>>>,
          _ast2947> {}; // CXXMethodDecl Set
struct _ast2942
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2941>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2943
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2941>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast2944
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2941>, _str167>, _ast2945>>>> {
}; // ParmVarDecl item
struct _ast2946 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast1901, _ast2945>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, int, Local<v8::Primitive>)
struct _ast2947 : PointerType<_ast96> {}; // PointerType v8::PrimitiveArray *
struct _ast2948
    : DeclContext<Pack<_ast2949, _ast2950>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast95>, _str78>, _ast2951>>,
              Pack<_ast2949, _ast2950>>>,
          _ast2947> {}; // CXXMethodDecl Get
struct _ast2949
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2948>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast2950
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2948>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast2951
    : FunctionProtoType<_ast2952, Pack<_ast184, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, int)
struct _ast2953
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str168>, _ast2954>,
                     Pack<_ast2955>>,
          Pack<>>,
      DeclContext<Pack<_ast2956,
                       _ast2957,
                       _ast2964,
                       _ast2967,
                       _ast2970,
                       _ast2971,
                       _ast2972,
                       _ast2973,
                       _ast2955,
                       _ast2974,
                       _ast2978,
                       _ast2982,
                       _ast2983,
                       _ast2987>> {}; // CXXRecordDecl ScriptOriginOptions
struct _ast2954 : StructOrClassRecordType<RecordType<_ast2953>> {
}; // RecordType v8::ScriptOriginOptions
struct _ast2955
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2953>, _str169>, _ast2435>>> {
}; // FieldDecl flags_
struct _ast2956
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2953>, _str168>, _ast2954>,
                     None>,
          None> {}; // CXXRecordDecl ScriptOriginOptions
struct _ast2957
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str168>, _ast2962>>,
              Pack<_ast2958, _ast2959, _ast2960, _ast2961>>>,
          _ast2963>>,
      DeclContext<Pack<_ast2958, _ast2959, _ast2960, _ast2961>> {
}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2958
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2957>, _str170>, _ast129>>>> {
}; // ParmVarDecl is_shared_cross_origin
struct _ast2959
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2957>, _str171>, _ast129>>>> {
}; // ParmVarDecl is_opaque
struct _ast2960
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2957>, _str172>, _ast129>>>> {
}; // ParmVarDecl is_wasm
struct _ast2961
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2957>, _str173>, _ast129>>>> {
}; // ParmVarDecl is_module
struct _ast2962 : FunctionProtoType<_ast114,
                                    Pack<_ast129, _ast129, _ast129, _ast129>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (bool, bool, bool, bool)
struct _ast2963 : PointerType<_ast2954> {
}; // PointerType v8::ScriptOriginOptions *
struct _ast2964
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str168>, _ast2966>>,
              Pack<_ast2965>>>,
          _ast2963>>,
      DeclContext<Pack<_ast2965>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2965
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2964>, _str174>, _ast1901>>>> {
}; // ParmVarDecl flags
struct _ast2966 : FunctionProtoType<_ast114, Pack<_ast1901>, UnqualifiedType> {
}; // FunctionProtoType void (int)
struct _ast2967
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str175>, _ast128>>,
              Pack<>>>,
          _ast2968> {}; // CXXMethodDecl IsSharedCrossOrigin
struct _ast2968 : PointerType<_ast2969> {
}; // PointerType const v8::ScriptOriginOptions *
struct _ast2969 : ConstQualifiedType<_ast2954> {
}; // RecordType const v8::ScriptOriginOptions
struct _ast2970
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str176>, _ast128>>,
              Pack<>>>,
          _ast2968> {}; // CXXMethodDecl IsOpaque
struct _ast2971
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str177>, _ast128>>,
              Pack<>>>,
          _ast2968> {}; // CXXMethodDecl IsWasm
struct _ast2972
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str178>, _ast128>>,
              Pack<>>>,
          _ast2968> {}; // CXXMethodDecl IsModule
struct _ast2973
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str179>, _ast2938>>,
              Pack<>>>,
          _ast2968> {}; // CXXMethodDecl Flags
struct _ast2974
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str168>, _ast2977>>,
              Pack<_ast2975>>>,
          _ast2963>>,
      DeclContext<Pack<_ast2975>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2975
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2974>, _str62>, _ast2976>>>> {
}; // ParmVarDecl
struct _ast2976 : LValueReferenceType<ReferenceType<_ast2969>> {
}; // LValueReferenceType const v8::ScriptOriginOptions &
struct _ast2977 : FunctionProtoType<_ast114, Pack<_ast2976>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ScriptOriginOptions &) noexcept
struct _ast2978
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str168>, _ast2981>>,
              Pack<_ast2979>>>,
          _ast2963>>,
      DeclContext<Pack<_ast2979>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2979
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2978>, _str62>, _ast2980>>>> {
}; // ParmVarDecl
struct _ast2980 : RValueReferenceType<ReferenceType<_ast2954>> {
}; // RValueReferenceType v8::ScriptOriginOptions &&
struct _ast2981 : FunctionProtoType<_ast114, Pack<_ast2980>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ScriptOriginOptions &&) noexcept
struct _ast2982
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str180>, _ast214>>,
              Pack<>>>,
          _ast2963>> {}; // CXXDestructorDecl ~ScriptOriginOptions
struct _ast2983
    : DeclContext<Pack<_ast2984>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str64>, _ast2985>>,
              Pack<_ast2984>>>,
          _ast2963> {}; // CXXMethodDecl operator=
struct _ast2984
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2983>, _str62>, _ast2976>>>> {
}; // ParmVarDecl
struct _ast2985 : FunctionProtoType<_ast2986, Pack<_ast2976>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptOriginOptions &(const v8::ScriptOriginOptions
   // &)
struct _ast2986 : LValueReferenceType<ReferenceType<_ast2954>> {
}; // LValueReferenceType v8::ScriptOriginOptions &
struct _ast2987
    : DeclContext<Pack<_ast2988>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2953>, _str64>, _ast2989>>,
              Pack<_ast2988>>>,
          _ast2963> {}; // CXXMethodDecl operator=
struct _ast2988
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast2987>, _str62>, _ast2980>>>> {
}; // ParmVarDecl
struct _ast2989 : FunctionProtoType<_ast2986, Pack<_ast2980>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _ast2990
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str181>, _ast2991>,
                     Pack<_ast2992,
                          _ast2994,
                          _ast2996,
                          _ast2998,
                          _ast2999,
                          _ast3001,
                          _ast3003>>,
          Pack<>>,
      DeclContext<Pack<_ast3005,
                       _ast3006,
                       _ast3029,
                       _ast3034,
                       _ast3037,
                       _ast3040,
                       _ast3043,
                       _ast3046,
                       _ast3049,
                       _ast2992,
                       _ast2994,
                       _ast2996,
                       _ast2998,
                       _ast2999,
                       _ast3001,
                       _ast3003,
                       _ast3051,
                       _ast3055,
                       _ast3060>> {}; // CXXRecordDecl ScriptOrigin
struct _ast2991 : StructOrClassRecordType<RecordType<_ast2990>> {
}; // RecordType v8::ScriptOrigin
struct _ast2992
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str182>, _ast2993>>> {
}; // FieldDecl resource_name_
struct _ast2994
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str183>, _ast2995>>> {
}; // FieldDecl resource_line_offset_
struct _ast2996
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str184>, _ast2997>>> {
}; // FieldDecl resource_column_offset_
struct _ast2998
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str185>, _ast2954>>> {
}; // FieldDecl options_
struct _ast2999
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str186>, _ast3000>>> {
}; // FieldDecl script_id_
struct _ast3001
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str187>, _ast3002>>> {
}; // FieldDecl source_map_url_
struct _ast3003
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2990>, _str188>, _ast3004>>> {
}; // FieldDecl host_defined_options_
struct _ast3005
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2990>, _str181>, _ast2991>,
                     None>,
          None> {}; // CXXRecordDecl ScriptOrigin
struct _ast3006
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str181>, _ast3027>>,
              Pack<_ast3007,
                   _ast3009,
                   _ast3011,
                   _ast3013,
                   _ast3015,
                   _ast3017,
                   _ast3019,
                   _ast3021,
                   _ast3023,
                   _ast3025>>>,
          _ast3028>>,
      DeclContext<Pack<_ast3007,
                       _ast3009,
                       _ast3011,
                       _ast3013,
                       _ast3015,
                       _ast3017,
                       _ast3019,
                       _ast3021,
                       _ast3023,
                       _ast3025>> {}; // CXXConstructorDecl ScriptOrigin
struct _ast3007
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str189>, _ast3008>>>> {
}; // ParmVarDecl resource_name
struct _ast3009
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str190>, _ast3010>>>> {
}; // ParmVarDecl resource_line_offset
struct _ast3011
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str191>, _ast3012>>>> {
}; // ParmVarDecl resource_column_offset
struct _ast3013
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str192>, _ast3014>>>> {
}; // ParmVarDecl resource_is_shared_cross_origin
struct _ast3015
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str193>, _ast3016>>>> {
}; // ParmVarDecl script_id
struct _ast3017
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str194>, _ast3018>>>> {
}; // ParmVarDecl source_map_url
struct _ast3019
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str195>, _ast3020>>>> {
}; // ParmVarDecl resource_is_opaque
struct _ast3021
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str172>, _ast3022>>>> {
}; // ParmVarDecl is_wasm
struct _ast3023
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str173>, _ast3024>>>> {
}; // ParmVarDecl is_module
struct _ast3025
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str196>, _ast3026>>>> {
}; // ParmVarDecl host_defined_options
struct _ast3027 : FunctionProtoType<_ast114,
                                    Pack<_ast3008,
                                         _ast3010,
                                         _ast3012,
                                         _ast3014,
                                         _ast3016,
                                         _ast3018,
                                         _ast3020,
                                         _ast3022,
                                         _ast3024,
                                         _ast3026>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Value>, Local<v8::Integer>,
   // Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>,
   // Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>,
   // Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _ast3028 : PointerType<_ast2991> {}; // PointerType v8::ScriptOrigin *
struct _ast3029
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str197>, _ast3030>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl ResourceName
struct _ast3030 : FunctionProtoType<_ast3031, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast3032 : PointerType<_ast3033> {
}; // PointerType const v8::ScriptOrigin *
struct _ast3033 : ConstQualifiedType<_ast2991> {
}; // RecordType const v8::ScriptOrigin
struct _ast3034
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str198>, _ast3035>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl ResourceLineOffset
struct _ast3035 : FunctionProtoType<_ast3036, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Integer> () const
struct _ast3037
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str199>, _ast3038>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl ResourceColumnOffset
struct _ast3038 : FunctionProtoType<_ast3039, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Integer> () const
struct _ast3040
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str200>, _ast3041>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl ScriptID
struct _ast3041 : FunctionProtoType<_ast3042, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Integer> () const
struct _ast3043
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str201>, _ast3044>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl SourceMapUrl
struct _ast3044 : FunctionProtoType<_ast3045, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast3046
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str202>, _ast3047>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl HostDefinedOptions
struct _ast3047 : FunctionProtoType<_ast3048, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::PrimitiveArray> () const
struct _ast3049
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str203>, _ast3050>>,
              Pack<>>>,
          _ast3032> {}; // CXXMethodDecl Options
struct _ast3050 : FunctionProtoType<_ast2954, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::ScriptOriginOptions () const
struct _ast3051
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str181>, _ast3054>>,
              Pack<_ast3052>>>,
          _ast3028>>,
      DeclContext<Pack<_ast3052>> {}; // CXXConstructorDecl ScriptOrigin
struct _ast3052
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3051>, _str62>, _ast3053>>>> {
}; // ParmVarDecl
struct _ast3053 : LValueReferenceType<ReferenceType<_ast3033>> {
}; // LValueReferenceType const v8::ScriptOrigin &
struct _ast3054 : FunctionProtoType<_ast114, Pack<_ast3053>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ScriptOrigin &)
struct _ast3055
    : DeclContext<Pack<_ast3056>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str64>, _ast3058>>,
              Pack<_ast3056>>>,
          _ast3028> {}; // CXXMethodDecl operator=
struct _ast3056
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3055>, _str62>, _ast3057>>>> {
}; // ParmVarDecl
struct _ast3057 : RValueReferenceType<ReferenceType<_ast2991>> {
}; // RValueReferenceType v8::ScriptOrigin &&
struct _ast3058 : FunctionProtoType<_ast3059, Pack<_ast3057>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ast3059 : LValueReferenceType<ReferenceType<_ast2991>> {
}; // LValueReferenceType v8::ScriptOrigin &
struct _ast3060
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2990>, _str181>, _ast3062>>,
              Pack<_ast3061>>>,
          _ast3028>>,
      DeclContext<Pack<_ast3061>> {}; // CXXConstructorDecl ScriptOrigin
struct _ast3061
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3060>, _str62>, _ast3057>>>> {
}; // ParmVarDecl
struct _ast3062 : FunctionProtoType<_ast114, Pack<_ast3057>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ScriptOrigin &&)
struct _ast3063
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str204>, _ast3064>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3065,
                       _ast3066,
                       _ast3070,
                       _ast3072,
                       _ast3075,
                       _ast3078,
                       _ast3081,
                       _ast3084>> {}; // CXXRecordDecl UnboundScript
struct _ast3064 : StructOrClassRecordType<RecordType<_ast3063>> {
}; // RecordType v8::UnboundScript
struct _ast3065
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3063>, _str204>, _ast3064>,
                     None>,
          None> {}; // CXXRecordDecl UnboundScript
struct _ast3066
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3063>, _str205>, _ast3067>>,
              Pack<>>>,
          _ast3069> {}; // CXXMethodDecl BindToCurrentContext
struct _ast3067 : FunctionProtoType<_ast3068, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Script> ()
struct _ast3069 : PointerType<_ast3064> {}; // PointerType v8::UnboundScript *
struct _ast3070
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3063>, _str206>, _ast3071>>,
              Pack<>>>,
          _ast3069> {}; // CXXMethodDecl GetId
struct _ast3071 : FunctionProtoType<_ast1901, Pack<>, UnqualifiedType> {
}; // FunctionProtoType int ()
struct _ast3072
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3063>, _str207>, _ast3073>>,
              Pack<>>>,
          _ast3069> {}; // CXXMethodDecl GetScriptName
struct _ast3073 : FunctionProtoType<_ast3074, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast3075
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3063>, _str208>, _ast3076>>,
              Pack<>>>,
          _ast3069> {}; // CXXMethodDecl GetSourceURL
struct _ast3076 : FunctionProtoType<_ast3077, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast3078
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3063>, _str209>, _ast3079>>,
              Pack<>>>,
          _ast3069> {}; // CXXMethodDecl GetSourceMappingURL
struct _ast3079 : FunctionProtoType<_ast3080, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast3081
    : DeclContext<Pack<_ast3082>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3063>, _str211>, _ast3083>>,
              Pack<_ast3082>>>,
          _ast3069> {}; // CXXMethodDecl GetLineNumber
struct _ast3082
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3081>, _str210>, _ast1901>>>> {
}; // ParmVarDecl code_pos
struct _ast3083 : FunctionProtoType<_ast1901, Pack<_ast1901>, UnqualifiedType> {
}; // FunctionProtoType int (int)
struct _ast3084
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3063>, _str212>, _ast2435>>> {
}; // VarDecl kNoScriptId
struct _ast3085
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str213>, _ast3086>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3087>> {}; // CXXRecordDecl UnboundModuleScript
struct _ast3086 : StructOrClassRecordType<RecordType<_ast3085>> {
}; // RecordType v8::UnboundModuleScript
struct _ast3087
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3085>, _str213>, _ast3086>,
                     None>,
          None> {}; // CXXRecordDecl UnboundModuleScript
struct _ast3088
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str214>, _ast3089>,
                     Pack<_ast3090, _ast3091>>,
          Pack<>>,
      DeclContext<
          Pack<_ast3092, _ast3093, _ast3095, _ast3096, _ast3090, _ast3091>> {
}; // CXXRecordDecl Location
struct _ast3089 : StructOrClassRecordType<RecordType<_ast3088>> {
}; // RecordType v8::Location
struct _ast3090
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3088>, _str215>, _ast1901>>> {
}; // FieldDecl line_number_
struct _ast3091
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3088>, _str216>, _ast1901>>> {
}; // FieldDecl column_number_
struct _ast3092
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3088>, _str214>, _ast3089>,
                     None>,
          None> {}; // CXXRecordDecl Location
struct _ast3093
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3088>, _str211>, _ast3071>>,
              Pack<>>>,
          _ast3094> {};                     // CXXMethodDecl GetLineNumber
struct _ast3094 : PointerType<_ast3089> {}; // PointerType v8::Location *
struct _ast3095
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3088>, _str217>, _ast3071>>,
              Pack<>>>,
          _ast3094> {}; // CXXMethodDecl GetColumnNumber
struct _ast3096
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3088>, _str214>, _ast3099>>,
              Pack<_ast3097, _ast3098>>>,
          _ast3094>>,
      DeclContext<Pack<_ast3097, _ast3098>> {}; // CXXConstructorDecl Location
struct _ast3097
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3096>, _str218>, _ast1901>>>> {
}; // ParmVarDecl line_number
struct _ast3098
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3096>, _str219>, _ast1901>>>> {
}; // ParmVarDecl column_number
struct _ast3099
    : FunctionProtoType<_ast114, Pack<_ast1901, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType void (int, int)
struct _ast3100
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str220>, _ast3101>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3102,
                       _ast3110,
                       _ast3115,
                       _ast3118,
                       _ast3119,
                       _ast3123,
                       _ast3126,
                       _ast3127,
                       _ast3129,
                       _ast3136,
                       _ast3141,
                       _ast3144>> {}; // CXXRecordDecl Module
struct _ast3101 : StructOrClassRecordType<RecordType<_ast3100>> {
}; // RecordType v8::Module
struct _ast3102
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3100>, _str220>, _ast3101>,
                     None>,
          None> {}; // CXXRecordDecl Module
struct _ast3110
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str221>, _ast3111>>,
              Pack<>>>,
          _ast3113> {}; // CXXMethodDecl GetStatus
struct _ast3111 : FunctionProtoType<_ast3112, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Module::Status () const
struct _ast3112 : EnumType<_ast3103, _ast1901> {
};                                          // EnumType v8::Module::Status
struct _ast3113 : PointerType<_ast3114> {}; // PointerType const v8::Module *
struct _ast3114 : ConstQualifiedType<_ast3101> {
}; // RecordType const v8::Module
struct _ast3115
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str222>, _ast3116>>,
              Pack<>>>,
          _ast3113> {}; // CXXMethodDecl GetException
struct _ast3116 : FunctionProtoType<_ast3117, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast3118
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str223>, _ast2938>>,
              Pack<>>>,
          _ast3113> {}; // CXXMethodDecl GetModuleRequestsLength
struct _ast3119
    : DeclContext<Pack<_ast3120>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str225>, _ast3121>>,
              Pack<_ast3120>>>,
          _ast3113> {}; // CXXMethodDecl GetModuleRequest
struct _ast3120
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3119>, _str224>, _ast1901>>>> {
}; // ParmVarDecl i
struct _ast3121
    : FunctionProtoType<_ast3122, Pack<_ast1901>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> (int) const
struct _ast3123
    : DeclContext<Pack<_ast3124>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str226>, _ast3125>>,
              Pack<_ast3124>>>,
          _ast3113> {}; // CXXMethodDecl GetModuleRequestLocation
struct _ast3124
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3123>, _str224>, _ast1901>>>> {
}; // ParmVarDecl i
struct _ast3125
    : FunctionProtoType<_ast3089, Pack<_ast1901>, ConstQualifiedType> {
}; // FunctionProtoType v8::Location (int) const
struct _ast3126
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str227>, _ast2938>>,
              Pack<>>>,
          _ast3113> {}; // CXXMethodDecl GetIdentityHash
struct _ast3127
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast3100>, _str228>, _ast3128>>> {
}; // TypedefDecl ResolveCallback
struct _ast3128 : TypedefType<_ast3127> {
}; // TypedefType v8::Module::ResolveCallback
struct _ast3129
    : DeclContext<Pack<_ast3130, _ast3132>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str230>, _ast3133>>,
              Pack<_ast3130, _ast3132>>>,
          _ast3135> {}; // CXXMethodDecl InstantiateModule
struct _ast3130
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3129>, _str229>, _ast3131>>>> {
}; // ParmVarDecl context
struct _ast3132
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3129>, _str80>, _ast3128>>>> {
}; // ParmVarDecl callback
struct _ast3133
    : FunctionProtoType<_ast3134, Pack<_ast3131, _ast3128>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>,
   // v8::Module::ResolveCallback)
struct _ast3135 : PointerType<_ast3101> {}; // PointerType v8::Module *
struct _ast3136
    : DeclContext<Pack<_ast3137>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str231>, _ast3139>>,
              Pack<_ast3137>>>,
          _ast3135> {}; // CXXMethodDecl Evaluate
struct _ast3137
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3136>, _str229>, _ast3138>>>> {
}; // ParmVarDecl context
struct _ast3139 : FunctionProtoType<_ast3140, Pack<_ast3138>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3141
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str232>, _ast3142>>,
              Pack<>>>,
          _ast3135> {}; // CXXMethodDecl GetModuleNamespace
struct _ast3142 : FunctionProtoType<_ast3143, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast3144
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3100>, _str233>, _ast3145>>,
              Pack<>>>,
          _ast3135> {}; // CXXMethodDecl GetUnboundModuleScript
struct _ast3145 : FunctionProtoType<_ast3146, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::UnboundModuleScript> ()
struct _ast3147
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast75>, _str34>, _ast76>,
                     None>,
          None> {}; // CXXRecordDecl Script
struct _ast3148
    : DeclContext<Pack<_ast3149, _ast3151, _ast3153>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast75>, _str235>, _ast3154>>,
          Pack<_ast3149, _ast3151, _ast3153>>> {}; // CXXMethodDecl Compile
struct _ast3149
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3148>, _str229>, _ast3150>>>> {
}; // ParmVarDecl context
struct _ast3151
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3148>, _str134>, _ast3152>>>> {
}; // ParmVarDecl source
struct _ast3153
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3148>, _str234>, _ast3028>>>> {
}; // ParmVarDecl origin
struct _ast3154 : FunctionProtoType<_ast3155,
                                    Pack<_ast3150, _ast3152, _ast3028>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>,
   // Local<v8::String>, v8::ScriptOrigin *)
struct _ast3156
    : DeclContext<Pack<_ast3157>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast75>, _str236>, _ast3159>>,
              Pack<_ast3157>>>,
          _ast3161> {}; // CXXMethodDecl Run
struct _ast3157
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3156>, _str229>, _ast3158>>>> {
}; // ParmVarDecl context
struct _ast3159 : FunctionProtoType<_ast3160, Pack<_ast3158>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3161 : PointerType<_ast76> {}; // PointerType v8::Script *
struct _ast3162
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast75>, _str237>, _ast3163>>,
              Pack<>>>,
          _ast3161> {}; // CXXMethodDecl GetUnboundScript
struct _ast3163 : FunctionProtoType<_ast3164, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::UnboundScript> ()
struct _ast3165
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str238>, _ast3166>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3167,
                       _ast3168,
                       _ast3199,
                       _ast3244,
                       _ast3264,
                       _ast3300,
                       _ast3326,
                       _ast3335,
                       _ast3343,
                       _ast3348,
                       _ast3357,
                       _ast3360,
                       _ast3367,
                       _ast3381,
                       _ast3385,
                       _ast3389>> {}; // CXXRecordDecl ScriptCompiler
struct _ast3166 : StructOrClassRecordType<RecordType<_ast3165>> {
}; // RecordType v8::ScriptCompiler
struct _ast3167
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3165>, _str238>, _ast3166>,
                     None>,
          None> {}; // CXXRecordDecl ScriptCompiler
struct _ast3168
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3165>, _str239>, _ast3169>,
                     Pack<_ast3170, _ast3174, _ast3175, _ast3176>>,
          Pack<>>,
      DeclContext<Pack<_ast3179,
                       _ast3182,
                       _ast3184,
                       _ast3189,
                       _ast3170,
                       _ast3174,
                       _ast3175,
                       _ast3176,
                       _ast3190,
                       _ast3195>> {}; // CXXRecordDecl CachedData
struct _ast3169 : StructOrClassRecordType<RecordType<_ast3168>> {
}; // RecordType v8::ScriptCompiler::CachedData
struct _ast3170
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3168>, _str130>, _ast3171>>> {
};                                          // FieldDecl data
struct _ast3171 : PointerType<_ast3172> {}; // PointerType const uint8_t *
struct _ast3172 : ConstQualifiedType<_ast3173> {}; // TypedefType const uint8_t
struct _ast3173 : ABIIndependentSizeType<UnsignedIntegerType, 1> {
}; // TypedefType uint8_t
struct _ast3174
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3168>, _str165>, _ast1901>>> {
}; // FieldDecl length
struct _ast3175
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3168>, _str240>, _ast129>>> {
}; // FieldDecl rejected
struct _ast3176
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3168>, _str241>, _ast3177>>> {
}; // FieldDecl buffer_policy
struct _ast3177 : EnumType<_ast3178, _ast1901> {
}; // EnumType v8::ScriptCompiler::CachedData::BufferPolicy
struct _ast3179
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3168>, _str239>, _ast3169>,
                     None>,
          None> {}; // CXXRecordDecl CachedData
struct _ast3182
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3168>, _str239>, _ast113>>,
              Pack<>>>,
          _ast3183>> {}; // CXXConstructorDecl CachedData
struct _ast3183 : PointerType<_ast3169> {
}; // PointerType v8::ScriptCompiler::CachedData *
struct _ast3184
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3168>, _str239>, _ast3188>>,
              Pack<_ast3185, _ast3186, _ast3187>>>,
          _ast3183>>,
      DeclContext<Pack<_ast3185, _ast3186, _ast3187>> {
}; // CXXConstructorDecl CachedData
struct _ast3185
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3184>, _str130>, _ast3171>>>> {
}; // ParmVarDecl data
struct _ast3186
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3184>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast3187
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3184>, _str241>, _ast3177>>>> {
}; // ParmVarDecl buffer_policy
struct _ast3188 : FunctionProtoType<_ast114,
                                    Pack<_ast3171, _ast1901, _ast3177>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (const uint8_t *, int,
   // v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ast3189
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3168>, _str242>, _ast214>>,
              Pack<>>>,
          _ast3183>> {}; // CXXDestructorDecl ~CachedData
struct _ast3190
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3168>, _str239>, _ast3194>>,
              Pack<_ast3191>>>,
          _ast3183>>,
      DeclContext<Pack<_ast3191>> {}; // CXXConstructorDecl CachedData
struct _ast3191
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3190>, _str62>, _ast3192>>>> {
}; // ParmVarDecl
struct _ast3192 : LValueReferenceType<ReferenceType<_ast3193>> {
}; // LValueReferenceType const v8::ScriptCompiler::CachedData &
struct _ast3193 : ConstQualifiedType<_ast3169> {
}; // RecordType const v8::ScriptCompiler::CachedData
struct _ast3194 : FunctionProtoType<_ast114, Pack<_ast3192>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ScriptCompiler::CachedData &)
struct _ast3195
    : DeclContext<Pack<_ast3196>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3168>, _str64>, _ast3197>>,
              Pack<_ast3196>>>,
          _ast3183> {}; // CXXMethodDecl operator=
struct _ast3196
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3195>, _str62>, _ast3192>>>> {
}; // ParmVarDecl
struct _ast3197 : FunctionProtoType<_ast3198, Pack<_ast3192>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::CachedData &(const
   // v8::ScriptCompiler::CachedData &)
struct _ast3198 : LValueReferenceType<ReferenceType<_ast3169>> {
}; // LValueReferenceType v8::ScriptCompiler::CachedData &
struct _ast3199
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3165>, _str243>, _ast3200>,
                     Pack<_ast3201,
                          _ast3203,
                          _ast3205,
                          _ast3207,
                          _ast3209,
                          _ast3210,
                          _ast3212,
                          _ast3214>>,
          Pack<>>,
      DeclContext<Pack<_ast3215,
                       _ast3216,
                       _ast3223,
                       _ast3228,
                       _ast3229,
                       _ast3234,
                       _ast3236,
                       _ast3240,
                       _ast3201,
                       _ast3203,
                       _ast3205,
                       _ast3207,
                       _ast3209,
                       _ast3210,
                       _ast3212,
                       _ast3214>> {}; // CXXRecordDecl Source
struct _ast3200 : StructOrClassRecordType<RecordType<_ast3199>> {
}; // RecordType v8::ScriptCompiler::Source
struct _ast3201
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str244>, _ast3202>>> {
}; // FieldDecl source_string
struct _ast3203
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str189>, _ast3204>>> {
}; // FieldDecl resource_name
struct _ast3205
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str190>, _ast3206>>> {
}; // FieldDecl resource_line_offset
struct _ast3207
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str191>, _ast3208>>> {
}; // FieldDecl resource_column_offset
struct _ast3209
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str245>, _ast2954>>> {
}; // FieldDecl resource_options
struct _ast3210
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str194>, _ast3211>>> {
}; // FieldDecl source_map_url
struct _ast3212
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str196>, _ast3213>>> {
}; // FieldDecl host_defined_options
struct _ast3214
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3199>, _str246>, _ast3183>>> {
}; // FieldDecl cached_data
struct _ast3215
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3199>, _str243>, _ast3200>,
                     None>,
          None> {}; // CXXRecordDecl Source
struct _ast3216
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str243>, _ast3221>>,
              Pack<_ast3217, _ast3219, _ast3220>>>,
          _ast3222>>,
      DeclContext<Pack<_ast3217, _ast3219, _ast3220>> {
}; // CXXConstructorDecl Source
struct _ast3217
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3216>, _str244>, _ast3218>>>> {
}; // ParmVarDecl source_string
struct _ast3219
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3216>, _str234>, _ast3053>>>> {
}; // ParmVarDecl origin
struct _ast3220
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3216>, _str246>, _ast3183>>>> {
}; // ParmVarDecl cached_data
struct _ast3221 : FunctionProtoType<_ast114,
                                    Pack<_ast3218, _ast3053, _ast3183>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>, const v8::ScriptOrigin &,
   // v8::ScriptCompiler::CachedData *)
struct _ast3222 : PointerType<_ast3200> {
}; // PointerType v8::ScriptCompiler::Source *
struct _ast3223
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str243>, _ast3227>>,
              Pack<_ast3224, _ast3226>>>,
          _ast3222>>,
      DeclContext<Pack<_ast3224, _ast3226>> {}; // CXXConstructorDecl Source
struct _ast3224
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3223>, _str244>, _ast3225>>>> {
}; // ParmVarDecl source_string
struct _ast3226
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3223>, _str246>, _ast3183>>>> {
}; // ParmVarDecl cached_data
struct _ast3227
    : FunctionProtoType<_ast114, Pack<_ast3225, _ast3183>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>, v8::ScriptCompiler::CachedData
   // *)
struct _ast3228
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str247>, _ast214>>,
              Pack<>>>,
          _ast3222>> {}; // CXXDestructorDecl ~Source
struct _ast3229
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str248>, _ast3230>>,
              Pack<>>>,
          _ast3232> {}; // CXXMethodDecl GetCachedData
struct _ast3230 : FunctionProtoType<_ast3231, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const v8::ScriptCompiler::CachedData *() const
struct _ast3231 : PointerType<_ast3193> {
}; // PointerType const v8::ScriptCompiler::CachedData *
struct _ast3232 : PointerType<_ast3233> {
}; // PointerType const v8::ScriptCompiler::Source *
struct _ast3233 : ConstQualifiedType<_ast3200> {
}; // RecordType const v8::ScriptCompiler::Source
struct _ast3234
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str249>, _ast3235>>,
              Pack<>>>,
          _ast3232> {}; // CXXMethodDecl GetResourceOptions
struct _ast3235 : FunctionProtoType<_ast2976, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const v8::ScriptOriginOptions &() const
struct _ast3236
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str243>, _ast3239>>,
              Pack<_ast3237>>>,
          _ast3222>>,
      DeclContext<Pack<_ast3237>> {}; // CXXConstructorDecl Source
struct _ast3237
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3236>, _str62>, _ast3238>>>> {
}; // ParmVarDecl
struct _ast3238 : LValueReferenceType<ReferenceType<_ast3233>> {
}; // LValueReferenceType const v8::ScriptCompiler::Source &
struct _ast3239 : FunctionProtoType<_ast114, Pack<_ast3238>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ScriptCompiler::Source &)
struct _ast3240
    : DeclContext<Pack<_ast3241>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3199>, _str64>, _ast3242>>,
              Pack<_ast3241>>>,
          _ast3222> {}; // CXXMethodDecl operator=
struct _ast3241
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3240>, _str62>, _ast3238>>>> {
}; // ParmVarDecl
struct _ast3242 : FunctionProtoType<_ast3243, Pack<_ast3238>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::Source &(const
   // v8::ScriptCompiler::Source &)
struct _ast3243 : LValueReferenceType<ReferenceType<_ast3200>> {
}; // LValueReferenceType v8::ScriptCompiler::Source &
struct _ast3244
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3165>, _str250>, _ast3245>,
                     Pack<>>,
          Pack<>>,
      DeclContext<
          Pack<_ast3246, _ast3247, _ast3250, _ast3255, _ast3257, _ast3258>> {
}; // CXXRecordDecl ExternalSourceStream
struct _ast3245 : StructOrClassRecordType<RecordType<_ast3244>> {
}; // RecordType v8::ScriptCompiler::ExternalSourceStream
struct _ast3246
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3244>, _str250>, _ast3245>,
                     None>,
          None> {}; // CXXRecordDecl ExternalSourceStream
struct _ast3247
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3244>, _str251>, _ast3248>>,
              Pack<>>>,
          _ast3249>>> {}; // CXXDestructorDecl ~ExternalSourceStream
struct _ast3248 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast3249 : PointerType<_ast3245> {
}; // PointerType v8::ScriptCompiler::ExternalSourceStream *
struct _ast3250
    : DeclContext<Pack<_ast3251>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3244>, _str253>, _ast3253>>,
              Pack<_ast3251>>>,
          _ast3249>> {}; // CXXMethodDecl GetMoreData
struct _ast3251
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3250>, _str252>, _ast3252>>>> {
};                                          // ParmVarDecl src
struct _ast3252 : PointerType<_ast3171> {}; // PointerType const uint8_t **
struct _ast3253 : FunctionProtoType<_ast3254, Pack<_ast3252>, UnqualifiedType> {
}; // FunctionProtoType size_t (const uint8_t **)
struct _ast3254 : PointerSizeType<UnsignedIntegerType> {}; // TypedefType size_t
struct _ast3255
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3244>, _str254>, _ast3256>>,
              Pack<>>>,
          _ast3249>> {}; // CXXMethodDecl SetBookmark
struct _ast3256 : FunctionProtoType<_ast129, Pack<>, UnqualifiedType> {
}; // FunctionProtoType bool ()
struct _ast3257
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3244>, _str255>, _ast113>>,
              Pack<>>>,
          _ast3249>> {}; // CXXMethodDecl ResetToBookmark
struct _ast3258
    : DeclContext<Pack<_ast3259>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3244>, _str64>, _ast3262>>,
              Pack<_ast3259>>>,
          _ast3249> {}; // CXXMethodDecl operator=
struct _ast3259
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3258>, _str62>, _ast3260>>>> {
}; // ParmVarDecl
struct _ast3260 : LValueReferenceType<ReferenceType<_ast3261>> {
}; // LValueReferenceType const v8::ScriptCompiler::ExternalSourceStream &
struct _ast3261 : ConstQualifiedType<_ast3245> {
}; // RecordType const v8::ScriptCompiler::ExternalSourceStream
struct _ast3262 : FunctionProtoType<_ast3263, Pack<_ast3260>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::ExternalSourceStream &(const
   // v8::ScriptCompiler::ExternalSourceStream &)
struct _ast3263 : LValueReferenceType<ReferenceType<_ast3245>> {
}; // LValueReferenceType v8::ScriptCompiler::ExternalSourceStream &
struct _ast3264
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3165>, _str256>, _ast3265>,
                     Pack<_ast3266>>,
          Pack<>>,
      DeclContext<Pack<_ast3279,
                       _ast3284,
                       _ast3286,
                       _ast3292,
                       _ast3296,
                       _ast3268,
                       _ast3273,
                       _ast3266>> {}; // CXXRecordDecl StreamedSource
struct _ast3265 : StructOrClassRecordType<RecordType<_ast3264>> {
}; // RecordType v8::ScriptCompiler::StreamedSource
struct _ast3266
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3264>, _str257>, _ast3267>>> {
}; // FieldDecl impl_
struct _ast3268
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3264>, _str256>, _ast3265>,
                     None>,
          None> {}; // CXXRecordDecl StreamedSource
struct _ast3273
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3264>, _str256>, _ast3277>>,
              Pack<_ast3274, _ast3275>>>,
          _ast3278>>,
      DeclContext<Pack<_ast3274, _ast3275>> {
}; // CXXConstructorDecl StreamedSource
struct _ast3274
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3273>, _str258>, _ast3249>>>> {
}; // ParmVarDecl source_stream
struct _ast3275
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3273>, _str259>, _ast3276>>>> {
}; // ParmVarDecl encoding
struct _ast3276 : EnumType<_ast3269, _ast1901> {
}; // EnumType v8::ScriptCompiler::StreamedSource::Encoding
struct _ast3277
    : FunctionProtoType<_ast114, Pack<_ast3249, _ast3276>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ScriptCompiler::ExternalSourceStream *,
   // v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3278 : PointerType<_ast3265> {
}; // PointerType v8::ScriptCompiler::StreamedSource *
struct _ast3279
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3264>, _str256>, _ast3283>>,
              Pack<_ast3280, _ast3282>>>,
          _ast3278>>,
      DeclContext<Pack<_ast3280, _ast3282>> {
}; // CXXConstructorDecl StreamedSource
struct _ast3280
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3279>, _str258>, _ast3281>>>> {
}; // ParmVarDecl source_stream
struct _ast3282
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3279>, _str259>, _ast3276>>>> {
}; // ParmVarDecl encoding
struct _ast3283
    : FunctionProtoType<_ast114, Pack<_ast3281, _ast3276>, UnqualifiedType> {
}; // FunctionProtoType void (std::unique_ptr<ExternalSourceStream>,
   // v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3284
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3264>, _str260>, _ast3285>>,
              Pack<>>>,
          _ast3278>> {}; // CXXDestructorDecl ~StreamedSource
struct _ast3285 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast3286
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3264>, _str261>, _ast3287>>,
              Pack<>>>,
          _ast3290> {}; // CXXMethodDecl impl
struct _ast3287 : FunctionProtoType<_ast3288, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType internal::ScriptStreamingData *() const
struct _ast3288 : PointerType<_ast3289> {
}; // PointerType internal::ScriptStreamingData *
struct _ast3290 : PointerType<_ast3291> {
}; // PointerType const v8::ScriptCompiler::StreamedSource *
struct _ast3291 : ConstQualifiedType<_ast3265> {
}; // RecordType const v8::ScriptCompiler::StreamedSource
struct _ast3292
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3264>, _str256>, _ast3295>>,
              Pack<_ast3293>>>,
          _ast3278>>,
      DeclContext<Pack<_ast3293>> {}; // CXXConstructorDecl StreamedSource
struct _ast3293
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3292>, _str62>, _ast3294>>>> {
}; // ParmVarDecl
struct _ast3294 : LValueReferenceType<ReferenceType<_ast3291>> {
}; // LValueReferenceType const v8::ScriptCompiler::StreamedSource &
struct _ast3295 : FunctionProtoType<_ast114, Pack<_ast3294>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ScriptCompiler::StreamedSource &)
struct _ast3296
    : DeclContext<Pack<_ast3297>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3264>, _str64>, _ast3298>>,
              Pack<_ast3297>>>,
          _ast3278> {}; // CXXMethodDecl operator=
struct _ast3297
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3296>, _str62>, _ast3294>>>> {
}; // ParmVarDecl
struct _ast3298 : FunctionProtoType<_ast3299, Pack<_ast3294>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::StreamedSource &(const
   // v8::ScriptCompiler::StreamedSource &)
struct _ast3299 : LValueReferenceType<ReferenceType<_ast3265>> {
}; // LValueReferenceType v8::ScriptCompiler::StreamedSource &
struct _ast3300
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3165>, _str262>, _ast3301>,
                     Pack<_ast3302>>,
          Pack<>>,
      DeclContext<Pack<_ast3303, _ast3304, _ast3302>> {
}; // CXXRecordDecl ScriptStreamingTask
struct _ast3301 : StructOrClassRecordType<RecordType<_ast3300>> {
}; // RecordType v8::ScriptCompiler::ScriptStreamingTask
struct _ast3302
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3300>, _str263>, _ast3288>>> {
}; // FieldDecl data_
struct _ast3303
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3300>, _str262>, _ast3301>,
                     None>,
          None> {}; // CXXRecordDecl ScriptStreamingTask
struct _ast3304
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3300>, _str236>, _ast113>>,
              Pack<>>>,
          _ast3305> {}; // CXXMethodDecl Run
struct _ast3305 : PointerType<_ast3301> {
}; // PointerType v8::ScriptCompiler::ScriptStreamingTask *
struct _ast3326
    : DeclContext<Pack<_ast3327, _ast3328, _ast3329, _ast3331>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str266>, _ast3333>>,
          Pack<_ast3327, _ast3328, _ast3329, _ast3331>>> {
}; // CXXMethodDecl CompileUnboundScript
struct _ast3327
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3326>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3328
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3326>, _str134>, _ast3222>>>> {
}; // ParmVarDecl source
struct _ast3329
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3326>, _str264>, _ast3330>>>> {
}; // ParmVarDecl options
struct _ast3330 : EnumType<_ast3306, _ast1901> {
}; // EnumType v8::ScriptCompiler::CompileOptions
struct _ast3331
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3326>, _str265>, _ast3332>>>> {
}; // ParmVarDecl no_cache_reason
struct _ast3332 : EnumType<_ast3310, _ast1901> {
}; // EnumType v8::ScriptCompiler::NoCacheReason
struct _ast3333 : FunctionProtoType<_ast3334,
                                    Pack<_ast184, _ast3222, _ast3330, _ast3332>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::UnboundScript> (v8::Isolate *,
   // v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions,
   // v8::ScriptCompiler::NoCacheReason)
struct _ast3335
    : DeclContext<Pack<_ast3336, _ast3338, _ast3339, _ast3340>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str235>, _ast3341>>,
          Pack<_ast3336, _ast3338, _ast3339, _ast3340>>> {
}; // CXXMethodDecl Compile
struct _ast3336
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3335>, _str229>, _ast3337>>>> {
}; // ParmVarDecl context
struct _ast3338
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3335>, _str134>, _ast3222>>>> {
}; // ParmVarDecl source
struct _ast3339
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3335>, _str264>, _ast3330>>>> {
}; // ParmVarDecl options
struct _ast3340
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3335>, _str265>, _ast3332>>>> {
}; // ParmVarDecl no_cache_reason
struct _ast3341
    : FunctionProtoType<_ast3342,
                        Pack<_ast3337, _ast3222, _ast3330, _ast3332>,
                        UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>,
   // v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions,
   // v8::ScriptCompiler::NoCacheReason)
struct _ast3343
    : DeclContext<Pack<_ast3344, _ast3345, _ast3346>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str267>, _ast3347>>,
          Pack<_ast3344, _ast3345, _ast3346>>> {
}; // CXXMethodDecl StartStreamingScript
struct _ast3344
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3343>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3345
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3343>, _str134>, _ast3278>>>> {
}; // ParmVarDecl source
struct _ast3346
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3343>, _str264>, _ast3330>>>> {
}; // ParmVarDecl options
struct _ast3347 : FunctionProtoType<_ast3305,
                                    Pack<_ast184, _ast3278, _ast3330>,
                                    UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *,
   // v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _ast3348
    : DeclContext<Pack<_ast3349, _ast3351, _ast3352, _ast3354>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str235>, _ast3355>>,
          Pack<_ast3349, _ast3351, _ast3352, _ast3354>>> {
}; // CXXMethodDecl Compile
struct _ast3349
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3348>, _str229>, _ast3350>>>> {
}; // ParmVarDecl context
struct _ast3351
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3348>, _str134>, _ast3278>>>> {
}; // ParmVarDecl source
struct _ast3352
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3348>, _str268>, _ast3353>>>> {
}; // ParmVarDecl full_source_string
struct _ast3354
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3348>, _str234>, _ast3053>>>> {
}; // ParmVarDecl origin
struct _ast3355
    : FunctionProtoType<_ast3356,
                        Pack<_ast3350, _ast3278, _ast3353, _ast3053>,
                        UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>,
   // v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const
   // v8::ScriptOrigin &)
struct _ast3357
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str269>, _ast3358>>,
          Pack<>>> {}; // CXXMethodDecl CachedDataVersionTag
struct _ast3358 : FunctionProtoType<_ast3359, Pack<>, UnqualifiedType> {
}; // FunctionProtoType uint32_t ()
struct _ast3359 : ABIIndependentSizeType<UnsignedIntegerType, 4> {
}; // TypedefType uint32_t
struct _ast3360
    : DeclContext<Pack<_ast3361, _ast3362, _ast3363, _ast3364>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str270>, _ast3365>>,
          Pack<_ast3361, _ast3362, _ast3363, _ast3364>>> {
}; // CXXMethodDecl CompileModule
struct _ast3361
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3360>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3362
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3360>, _str134>, _ast3222>>>> {
}; // ParmVarDecl source
struct _ast3363
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3360>, _str264>, _ast3330>>>> {
}; // ParmVarDecl options
struct _ast3364
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3360>, _str265>, _ast3332>>>> {
}; // ParmVarDecl no_cache_reason
struct _ast3365 : FunctionProtoType<_ast3366,
                                    Pack<_ast184, _ast3222, _ast3330, _ast3332>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Module> (v8::Isolate *,
   // v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions,
   // v8::ScriptCompiler::NoCacheReason)
struct _ast3367
    : DeclContext<Pack<_ast3368,
                       _ast3370,
                       _ast3371,
                       _ast3372,
                       _ast3374,
                       _ast3375,
                       _ast3377,
                       _ast3378>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str275>, _ast3379>>,
          Pack<_ast3368,
               _ast3370,
               _ast3371,
               _ast3372,
               _ast3374,
               _ast3375,
               _ast3377,
               _ast3378>>> {}; // CXXMethodDecl CompileFunctionInContext
struct _ast3368
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str229>, _ast3369>>>> {
}; // ParmVarDecl context
struct _ast3370
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str134>, _ast3222>>>> {
}; // ParmVarDecl source
struct _ast3371
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str271>, _ast3254>>>> {
}; // ParmVarDecl arguments_count
struct _ast3372
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str272>, _ast3373>>>> {
}; // ParmVarDecl arguments
struct _ast3374
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str273>, _ast3254>>>> {
}; // ParmVarDecl context_extension_count
struct _ast3375
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str274>, _ast3376>>>> {
}; // ParmVarDecl context_extensions
struct _ast3377
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str264>, _ast3330>>>> {
}; // ParmVarDecl options
struct _ast3378
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3367>, _str265>, _ast3332>>>> {
}; // ParmVarDecl no_cache_reason
struct _ast3379 : FunctionProtoType<_ast3380,
                                    Pack<_ast3369,
                                         _ast3222,
                                         _ast3254,
                                         _ast3373,
                                         _ast3254,
                                         _ast3376,
                                         _ast3330,
                                         _ast3332>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>,
   // v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t,
   // Local<v8::Object> *, v8::ScriptCompiler::CompileOptions,
   // v8::ScriptCompiler::NoCacheReason)
struct _ast3381
    : DeclContext<Pack<_ast3382>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str277>, _ast3384>>,
          Pack<_ast3382>>> {}; // CXXMethodDecl CreateCodeCache
struct _ast3382
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3381>, _str276>, _ast3383>>>> {
}; // ParmVarDecl unbound_script
struct _ast3384 : FunctionProtoType<_ast3183, Pack<_ast3383>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::CachedData
   // *(Local<v8::UnboundScript>)
struct _ast3385
    : DeclContext<Pack<_ast3386>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str277>, _ast3388>>,
          Pack<_ast3386>>> {}; // CXXMethodDecl CreateCodeCache
struct _ast3386
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3385>, _str278>, _ast3387>>>> {
}; // ParmVarDecl unbound_module_script
struct _ast3388 : FunctionProtoType<_ast3183, Pack<_ast3387>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::CachedData
   // *(Local<v8::UnboundModuleScript>)
struct _ast3389
    : DeclContext<Pack<_ast3390>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3165>, _str280>, _ast3392>>,
          Pack<_ast3390>>> {}; // CXXMethodDecl CreateCodeCacheForFunction
struct _ast3390
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3389>, _str279>, _ast3391>>>> {
}; // ParmVarDecl function
struct _ast3392 : FunctionProtoType<_ast3183, Pack<_ast3391>, UnqualifiedType> {
}; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _ast3393
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str281>, _ast3394>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3395,
                       _ast3396,
                       _ast3401,
                       _ast3402,
                       _ast3407,
                       _ast3409,
                       _ast3412,
                       _ast3415,
                       _ast3420,
                       _ast3421,
                       _ast3422,
                       _ast3423,
                       _ast3424,
                       _ast3429,
                       _ast3430,
                       _ast3435,
                       _ast3436,
                       _ast3437,
                       _ast3445,
                       _ast3446,
                       _ast3447>> {}; // CXXRecordDecl Message
struct _ast3394 : StructOrClassRecordType<RecordType<_ast3393>> {
}; // RecordType v8::Message
struct _ast3395
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3393>, _str281>, _ast3394>,
                     None>,
          None> {}; // CXXRecordDecl Message
struct _ast3396
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str78>, _ast3397>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl Get
struct _ast3397 : FunctionProtoType<_ast3398, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> () const
struct _ast3399 : PointerType<_ast3400> {}; // PointerType const v8::Message *
struct _ast3400 : ConstQualifiedType<_ast3394> {
}; // RecordType const v8::Message
struct _ast3401
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetIsolate
struct _ast3402
    : DeclContext<Pack<_ast3403>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str282>, _ast3405>>,
              Pack<_ast3403>>>,
          _ast3399> {}; // CXXMethodDecl GetSourceLine
struct _ast3403
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3402>, _str229>, _ast3404>>>> {
}; // ParmVarDecl context
struct _ast3405
    : FunctionProtoType<_ast3406, Pack<_ast3404>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3407
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str283>, _ast3408>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetScriptOrigin
struct _ast3408 : FunctionProtoType<_ast2991, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::ScriptOrigin () const
struct _ast3409
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str284>, _ast3410>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetScriptResourceName
struct _ast3410 : FunctionProtoType<_ast3411, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast3412
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str285>, _ast3413>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetStackTrace
struct _ast3413 : FunctionProtoType<_ast3414, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::StackTrace> () const
struct _ast3415
    : DeclContext<Pack<_ast3416>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str211>, _ast3418>>,
              Pack<_ast3416>>>,
          _ast3399> {}; // CXXMethodDecl GetLineNumber
struct _ast3416
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3415>, _str229>, _ast3417>>>> {
}; // ParmVarDecl context
struct _ast3418
    : FunctionProtoType<_ast3419, Pack<_ast3417>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3420
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str286>, _ast2938>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetStartPosition
struct _ast3421
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str287>, _ast2938>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetEndPosition
struct _ast3422
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str288>, _ast2938>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl ErrorLevel
struct _ast3423
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str289>, _ast2938>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetStartColumn
struct _ast3424
    : DeclContext<Pack<_ast3425>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str289>, _ast3427>>,
              Pack<_ast3425>>>,
          _ast3399> {}; // CXXMethodDecl GetStartColumn
struct _ast3425
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3424>, _str229>, _ast3426>>>> {
}; // ParmVarDecl context
struct _ast3427
    : FunctionProtoType<_ast3428, Pack<_ast3426>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3429
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str290>, _ast2938>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl GetEndColumn
struct _ast3430
    : DeclContext<Pack<_ast3431>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str290>, _ast3433>>,
              Pack<_ast3431>>>,
          _ast3399> {}; // CXXMethodDecl GetEndColumn
struct _ast3431
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3430>, _str229>, _ast3432>>>> {
}; // ParmVarDecl context
struct _ast3433
    : FunctionProtoType<_ast3434, Pack<_ast3432>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3435
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str175>, _ast128>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl IsSharedCrossOrigin
struct _ast3436
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3393>, _str176>, _ast128>>,
              Pack<>>>,
          _ast3399> {}; // CXXMethodDecl IsOpaque
struct _ast3437
    : DeclContext<Pack<_ast3438, _ast3439>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3393>, _str292>, _ast3444>>,
          Pack<_ast3438, _ast3439>>> {}; // CXXMethodDecl PrintCurrentStackTrace
struct _ast3438
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3437>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3439
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3437>, _str66>, _ast3440>>>> {
};                                          // ParmVarDecl out
struct _ast3440 : PointerType<_ast3441> {}; // PointerType FILE *
struct _ast3441 : TypedefType<_ast3442> {}; // TypedefType FILE
struct _ast3442
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast3443>, _str291>, _ast3441>>> {
};                                                // TypedefDecl FILE
struct _ast3443 : DeclContext<Pack<_ast3442>> {}; // LinkageSpecDecl
struct _ast3444
    : FunctionProtoType<_ast114, Pack<_ast184, _ast3440>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, FILE *)
struct _ast3445
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3393>, _str293>, _ast2435>>> {
}; // VarDecl kNoLineNumberInfo
struct _ast3446
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3393>, _str294>, _ast2435>>> {
}; // VarDecl kNoColumnInfo
struct _ast3447
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3393>, _str295>, _ast2435>>> {
}; // VarDecl kNoScriptIdInfo
struct _ast3448
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast85>, _str39>, _ast86>,
                     None>,
          None> {}; // CXXRecordDecl StackTrace
struct _ast3461
    : DeclContext<Pack<_ast3462, _ast3463>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast85>, _str296>, _ast3464>>,
              Pack<_ast3462, _ast3463>>>,
          _ast3466> {}; // CXXMethodDecl GetFrame
struct _ast3462
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3461>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3463
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3461>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast3464
    : FunctionProtoType<_ast3465, Pack<_ast184, _ast3359>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _ast3466 : PointerType<_ast3467> {
}; // PointerType const v8::StackTrace *
struct _ast3467 : ConstQualifiedType<_ast86> {
}; // RecordType const v8::StackTrace
struct _ast3468
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast85>, _str297>, _ast2938>>,
              Pack<>>>,
          _ast3466> {}; // CXXMethodDecl GetFrameCount
struct _ast3469
    : DeclContext<Pack<_ast3470, _ast3471, _ast3472>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast85>, _str299>, _ast3474>>,
          Pack<_ast3470, _ast3471, _ast3472>>> {
}; // CXXMethodDecl CurrentStackTrace
struct _ast3470
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3469>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3471
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3469>, _str298>, _ast1901>>>> {
}; // ParmVarDecl frame_limit
struct _ast3472
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3469>, _str264>, _ast3473>>>> {
}; // ParmVarDecl options
struct _ast3473 : EnumType<_ast3449, _ast1901> {
}; // EnumType v8::StackTrace::StackTraceOptions
struct _ast3474 : FunctionProtoType<_ast3475,
                                    Pack<_ast184, _ast1901, _ast3473>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::StackTrace> (v8::Isolate *, int,
   // v8::StackTrace::StackTraceOptions)
struct _ast3476
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast83>, _str38>, _ast84>,
                     None>,
          None> {}; // CXXRecordDecl StackFrame
struct _ast3477
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str211>, _ast2938>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl GetLineNumber
struct _ast3478 : PointerType<_ast3479> {
}; // PointerType const v8::StackFrame *
struct _ast3479 : ConstQualifiedType<_ast84> {
}; // RecordType const v8::StackFrame
struct _ast3480
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str300>, _ast2938>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl GetColumn
struct _ast3481
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str301>, _ast2938>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl GetScriptId
struct _ast3482
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str207>, _ast3483>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl GetScriptName
struct _ast3483 : FunctionProtoType<_ast3484, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> () const
struct _ast3485
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str302>, _ast3486>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl GetScriptNameOrSourceURL
struct _ast3486 : FunctionProtoType<_ast3487, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> () const
struct _ast3488
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str303>, _ast3489>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl GetFunctionName
struct _ast3489 : FunctionProtoType<_ast3490, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> () const
struct _ast3491
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str304>, _ast128>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl IsEval
struct _ast3492
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str305>, _ast128>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl IsConstructor
struct _ast3493
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str177>, _ast128>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl IsWasm
struct _ast3494
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast83>, _str306>, _ast128>>,
              Pack<>>>,
          _ast3478> {}; // CXXMethodDecl IsUserJavaScript
struct _ast3504
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str307>, _ast3505>,
                     Pack<_ast3506, _ast3507, _ast3508, _ast3509>>,
          Pack<>>,
      DeclContext<
          Pack<_ast3510, _ast3511, _ast3506, _ast3507, _ast3508, _ast3509>> {
}; // CXXRecordDecl RegisterState
struct _ast3505 : StructOrClassRecordType<RecordType<_ast3504>> {
}; // RecordType v8::RegisterState
struct _ast3506
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3504>, _str308>, _ast2223>>> {
}; // FieldDecl pc
struct _ast3507
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3504>, _str309>, _ast2223>>> {
}; // FieldDecl sp
struct _ast3508
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3504>, _str310>, _ast2223>>> {
}; // FieldDecl fp
struct _ast3509
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3504>, _str311>, _ast2223>>> {
}; // FieldDecl lr
struct _ast3510
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3504>, _str307>, _ast3505>,
                     None>,
          None> {}; // CXXRecordDecl RegisterState
struct _ast3511
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3504>, _str307>, _ast113>>,
              Pack<>>>,
          _ast3512>> {};                    // CXXConstructorDecl RegisterState
struct _ast3512 : PointerType<_ast3505> {}; // PointerType v8::RegisterState *
struct _ast3513
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str312>, _ast3514>,
                     Pack<_ast3515, _ast3516, _ast3518>>,
          Pack<>>,
      DeclContext<Pack<_ast3519, _ast3515, _ast3516, _ast3518>> {
}; // CXXRecordDecl SampleInfo
struct _ast3514 : StructOrClassRecordType<RecordType<_ast3513>> {
}; // RecordType v8::SampleInfo
struct _ast3515
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3513>, _str313>, _ast3254>>> {
}; // FieldDecl frames_count
struct _ast3516
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3513>, _str314>, _ast3517>>> {
};                                                 // FieldDecl vm_state
struct _ast3517 : EnumType<_ast3495, _ast1901> {}; // EnumType v8::StateTag
struct _ast3518
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3513>, _str315>, _ast2223>>> {
}; // FieldDecl external_callback_entry
struct _ast3519
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3513>, _str312>, _ast3514>,
                     None>,
          None> {}; // CXXRecordDecl SampleInfo
struct _ast3520
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str316>, _ast3521>,
                     Pack<_ast3522, _ast3525>>,
          Pack<>>,
      DeclContext<Pack<_ast3526, _ast3522, _ast3525>> {
}; // CXXRecordDecl MemoryRange
struct _ast3521 : StructOrClassRecordType<RecordType<_ast3520>> {
}; // RecordType v8::MemoryRange
struct _ast3522
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3520>, _str317>, _ast3523>>> {
};                                                // FieldDecl start
struct _ast3523 : PointerType<_ast3524> {};       // PointerType const void *
struct _ast3524 : ConstQualifiedType<_ast114> {}; // BuiltinType const void
struct _ast3525
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3520>, _str318>, _ast3254>>> {
}; // FieldDecl length_in_bytes
struct _ast3526
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3520>, _str316>, _ast3521>,
                     None>,
          None> {}; // CXXRecordDecl MemoryRange
struct _ast3527
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str319>, _ast3528>,
                     Pack<_ast3529>>,
          Pack<>>,
      DeclContext<Pack<_ast3530, _ast3529>> {}; // CXXRecordDecl JSEntryStub
struct _ast3528 : StructOrClassRecordType<RecordType<_ast3527>> {
}; // RecordType v8::JSEntryStub
struct _ast3529
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3527>, _str320>, _ast3521>>> {
}; // FieldDecl code
struct _ast3530
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3527>, _str319>, _ast3528>,
                     None>,
          None> {}; // CXXRecordDecl JSEntryStub
struct _ast3531
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str321>, _ast3532>,
                     Pack<_ast3533, _ast3534, _ast3535>>,
          Pack<>>,
      DeclContext<Pack<_ast3536, _ast3533, _ast3534, _ast3535>> {
}; // CXXRecordDecl UnwindState
struct _ast3532 : StructOrClassRecordType<RecordType<_ast3531>> {
}; // RecordType v8::UnwindState
struct _ast3533
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3531>, _str322>, _ast3521>>> {
}; // FieldDecl code_range
struct _ast3534
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3531>, _str323>, _ast3521>>> {
}; // FieldDecl embedded_code_range
struct _ast3535
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3531>, _str324>, _ast3528>>> {
}; // FieldDecl js_entry_stub
struct _ast3536
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3531>, _str321>, _ast3532>,
                     None>,
          None> {}; // CXXRecordDecl UnwindState
struct _ast3537
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str325>, _ast3538>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3539, _ast3540, _ast3547>> {}; // CXXRecordDecl JSON
struct _ast3538 : StructOrClassRecordType<RecordType<_ast3537>> {
}; // RecordType v8::JSON
struct _ast3539
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3537>, _str325>, _ast3538>,
                     None>,
          None> {}; // CXXRecordDecl JSON
struct _ast3540
    : DeclContext<Pack<_ast3541, _ast3543>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3537>, _str327>, _ast3545>>,
          Pack<_ast3541, _ast3543>>> {}; // CXXMethodDecl Parse
struct _ast3541
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3540>, _str229>, _ast3542>>>> {
}; // ParmVarDecl context
struct _ast3543
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3540>, _str326>, _ast3544>>>> {
}; // ParmVarDecl json_string
struct _ast3545
    : FunctionProtoType<_ast3546, Pack<_ast3542, _ast3544>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::String>)
struct _ast3547
    : DeclContext<Pack<_ast3548, _ast3550, _ast3552>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3537>, _str330>, _ast3554>>,
          Pack<_ast3548, _ast3550, _ast3552>>> {}; // CXXMethodDecl Stringify
struct _ast3548
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3547>, _str229>, _ast3549>>>> {
}; // ParmVarDecl context
struct _ast3550
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3547>, _str328>, _ast3551>>>> {
}; // ParmVarDecl json_object
struct _ast3552
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3547>, _str329>, _ast3553>>>> {
}; // ParmVarDecl gap
struct _ast3554 : FunctionProtoType<_ast3555,
                                    Pack<_ast3549, _ast3551, _ast3553>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>,
   // Local<v8::Value>, Local<v8::String>)
struct _ast3556
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str331>, _ast3557>,
                     Pack<_ast3558>>,
          Pack<>>,
      DeclContext<Pack<_ast3562,
                       _ast3563,
                       _ast3606,
                       _ast3609,
                       _ast3613,
                       _ast3615,
                       _ast3616,
                       _ast3623,
                       _ast3626,
                       _ast3631,
                       _ast3634,
                       _ast3637,
                       _ast3641,
                       _ast3645,
                       _ast3649,
                       _ast3654,
                       _ast3561,
                       _ast3558>> {}; // CXXRecordDecl ValueSerializer
struct _ast3557 : StructOrClassRecordType<RecordType<_ast3556>> {
}; // RecordType v8::ValueSerializer
struct _ast3558
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3556>, _str333>, _ast3559>>> {
}; // FieldDecl private_
struct _ast3559 : PointerType<_ast3560> {
}; // PointerType v8::ValueSerializer::PrivateData *
struct _ast3560 : StructOrClassRecordType<RecordType<_ast3561>> {
}; // RecordType v8::ValueSerializer::PrivateData
struct _ast3561
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3556>, _str332>, _ast3560>,
                     None>,
          None> {}; // CXXRecordDecl PrivateData
struct _ast3562
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3556>, _str331>, _ast3557>,
                     None>,
          None> {}; // CXXRecordDecl ValueSerializer
struct _ast3563
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3556>, _str334>, _ast3564>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3565,
                       _ast3566,
                       _ast3569,
                       _ast3573,
                       _ast3579,
                       _ast3585,
                       _ast3591,
                       _ast3597,
                       _ast3600>> {}; // CXXRecordDecl Delegate
struct _ast3564 : StructOrClassRecordType<RecordType<_ast3563>> {
}; // RecordType v8::ValueSerializer::Delegate
struct _ast3565
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3563>, _str334>, _ast3564>,
                     None>,
          None> {}; // CXXRecordDecl Delegate
struct _ast3566
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str335>, _ast3567>>,
              Pack<>>>,
          _ast3568>>> {}; // CXXDestructorDecl ~Delegate
struct _ast3567 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast3568 : PointerType<_ast3564> {
}; // PointerType v8::ValueSerializer::Delegate *
struct _ast3569
    : DeclContext<Pack<_ast3570>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str337>, _ast3572>>,
              Pack<_ast3570>>>,
          _ast3568>> {}; // CXXMethodDecl ThrowDataCloneError
struct _ast3570
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3569>, _str336>, _ast3571>>>> {
}; // ParmVarDecl message
struct _ast3572 : FunctionProtoType<_ast114, Pack<_ast3571>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast3573
    : DeclContext<Pack<_ast3574, _ast3575>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str339>, _ast3577>>,
              Pack<_ast3574, _ast3575>>>,
          _ast3568>> {}; // CXXMethodDecl WriteHostObject
struct _ast3574
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3573>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3575
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3573>, _str338>, _ast3576>>>> {
}; // ParmVarDecl object
struct _ast3577
    : FunctionProtoType<_ast3578, Pack<_ast184, _ast3576>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _ast3579
    : DeclContext<Pack<_ast3580, _ast3581>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str341>, _ast3583>>,
              Pack<_ast3580, _ast3581>>>,
          _ast3568>> {}; // CXXMethodDecl GetSharedArrayBufferId
struct _ast3580
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3579>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3581
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3579>, _str340>, _ast3582>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast3583
    : FunctionProtoType<_ast3584, Pack<_ast184, _ast3582>, UnqualifiedType> {
}; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *,
   // Local<v8::SharedArrayBuffer>)
struct _ast3585
    : DeclContext<Pack<_ast3586, _ast3587>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str343>, _ast3589>>,
              Pack<_ast3586, _ast3587>>>,
          _ast3568>> {}; // CXXMethodDecl GetWasmModuleTransferId
struct _ast3586
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3585>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3587
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3585>, _str342>, _ast3588>>>> {
}; // ParmVarDecl module
struct _ast3589
    : FunctionProtoType<_ast3590, Pack<_ast184, _ast3588>, UnqualifiedType> {
}; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *,
   // Local<v8::WasmModuleObject>)
struct _ast3591
    : DeclContext<Pack<_ast3592, _ast3593, _ast3594>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str347>, _ast3596>>,
              Pack<_ast3592, _ast3593, _ast3594>>>,
          _ast3568>> {}; // CXXMethodDecl ReallocateBufferMemory
struct _ast3592
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3591>, _str344>, _ast2223>>>> {
}; // ParmVarDecl old_buffer
struct _ast3593
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3591>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast3594
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3591>, _str346>, _ast3595>>>> {
};                                          // ParmVarDecl actual_size
struct _ast3595 : PointerType<_ast3254> {}; // PointerType size_t *
struct _ast3596 : FunctionProtoType<_ast2223,
                                    Pack<_ast2223, _ast3254, _ast3595>,
                                    UnqualifiedType> {
}; // FunctionProtoType void *(void *, size_t, size_t *)
struct _ast3597
    : DeclContext<Pack<_ast3598>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str349>, _ast3599>>,
              Pack<_ast3598>>>,
          _ast3568>> {}; // CXXMethodDecl FreeBufferMemory
struct _ast3598
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3597>, _str348>, _ast2223>>>> {
}; // ParmVarDecl buffer
struct _ast3599 : FunctionProtoType<_ast114, Pack<_ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (void *)
struct _ast3600
    : DeclContext<Pack<_ast3601>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3563>, _str64>, _ast3604>>,
              Pack<_ast3601>>>,
          _ast3568> {}; // CXXMethodDecl operator=
struct _ast3601
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3600>, _str62>, _ast3602>>>> {
}; // ParmVarDecl
struct _ast3602 : LValueReferenceType<ReferenceType<_ast3603>> {
}; // LValueReferenceType const v8::ValueSerializer::Delegate &
struct _ast3603 : ConstQualifiedType<_ast3564> {
}; // RecordType const v8::ValueSerializer::Delegate
struct _ast3604 : FunctionProtoType<_ast3605, Pack<_ast3602>, UnqualifiedType> {
}; // FunctionProtoType v8::ValueSerializer::Delegate &(const
   // v8::ValueSerializer::Delegate &)
struct _ast3605 : LValueReferenceType<ReferenceType<_ast3564>> {
}; // LValueReferenceType v8::ValueSerializer::Delegate &
struct _ast3606
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str331>, _ast2846>>,
              Pack<_ast3607>>>,
          _ast3608>>,
      DeclContext<Pack<_ast3607>> {}; // CXXConstructorDecl ValueSerializer
struct _ast3607
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3606>, _str60>, _ast184>>>> {
};                                          // ParmVarDecl isolate
struct _ast3608 : PointerType<_ast3557> {}; // PointerType v8::ValueSerializer *
struct _ast3609
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str331>, _ast3612>>,
              Pack<_ast3610, _ast3611>>>,
          _ast3608>>,
      DeclContext<Pack<_ast3610, _ast3611>> {
}; // CXXConstructorDecl ValueSerializer
struct _ast3610
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3609>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3611
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3609>, _str350>, _ast3568>>>> {
}; // ParmVarDecl delegate
struct _ast3612
    : FunctionProtoType<_ast114, Pack<_ast184, _ast3568>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _ast3613
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str351>, _ast3614>>,
              Pack<>>>,
          _ast3608>> {}; // CXXDestructorDecl ~ValueSerializer
struct _ast3614 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast3615
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str352>, _ast113>>,
              Pack<>>>,
          _ast3608> {}; // CXXMethodDecl WriteHeader
struct _ast3616
    : DeclContext<Pack<_ast3617, _ast3619>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str353>, _ast3621>>,
              Pack<_ast3617, _ast3619>>>,
          _ast3608> {}; // CXXMethodDecl WriteValue
struct _ast3617
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3616>, _str229>, _ast3618>>>> {
}; // ParmVarDecl context
struct _ast3619
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3616>, _str153>, _ast3620>>>> {
}; // ParmVarDecl value
struct _ast3621
    : FunctionProtoType<_ast3622, Pack<_ast3618, _ast3620>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast3623
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str354>, _ast3624>>,
              Pack<>>>,
          _ast3608> {}; // CXXMethodDecl Release
struct _ast3624 : FunctionProtoType<_ast3625, Pack<>, UnqualifiedType> {
}; // FunctionProtoType std::pair<uint8_t *, size_t> ()
struct _ast3626
    : DeclContext<Pack<_ast3627, _ast3628>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str357>, _ast3630>>,
              Pack<_ast3627, _ast3628>>>,
          _ast3608> {}; // CXXMethodDecl TransferArrayBuffer
struct _ast3627
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3626>, _str355>, _ast3359>>>> {
}; // ParmVarDecl transfer_id
struct _ast3628
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3626>, _str356>, _ast3629>>>> {
}; // ParmVarDecl array_buffer
struct _ast3630
    : FunctionProtoType<_ast114, Pack<_ast3359, _ast3629>, UnqualifiedType> {
}; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3631
    : DeclContext<Pack<_ast3632>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str359>, _ast3633>>,
              Pack<_ast3632>>>,
          _ast3608> {}; // CXXMethodDecl SetTreatArrayBufferViewsAsHostObjects
struct _ast3632
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3631>, _str358>, _ast129>>>> {
}; // ParmVarDecl mode
struct _ast3633 : FunctionProtoType<_ast114, Pack<_ast129>, UnqualifiedType> {
}; // FunctionProtoType void (bool)
struct _ast3634
    : DeclContext<Pack<_ast3635>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str360>, _ast3636>>,
              Pack<_ast3635>>>,
          _ast3608> {}; // CXXMethodDecl WriteUint32
struct _ast3635
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3634>, _str153>, _ast3359>>>> {
}; // ParmVarDecl value
struct _ast3636 : FunctionProtoType<_ast114, Pack<_ast3359>, UnqualifiedType> {
}; // FunctionProtoType void (uint32_t)
struct _ast3637
    : DeclContext<Pack<_ast3638>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str361>, _ast3640>>,
              Pack<_ast3638>>>,
          _ast3608> {}; // CXXMethodDecl WriteUint64
struct _ast3638
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3637>, _str153>, _ast3639>>>> {
}; // ParmVarDecl value
struct _ast3639 : ABIIndependentSizeType<UnsignedIntegerType, 8> {
}; // TypedefType uint64_t
struct _ast3640 : FunctionProtoType<_ast114, Pack<_ast3639>, UnqualifiedType> {
}; // FunctionProtoType void (uint64_t)
struct _ast3641
    : DeclContext<Pack<_ast3642>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str362>, _ast3644>>,
              Pack<_ast3642>>>,
          _ast3608> {}; // CXXMethodDecl WriteDouble
struct _ast3642
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3641>, _str153>, _ast3643>>>> {
}; // ParmVarDecl value
struct _ast3643 : ABIIndependentSizeType<FloatingPointType, 8> {
}; // BuiltinType double
struct _ast3644 : FunctionProtoType<_ast114, Pack<_ast3643>, UnqualifiedType> {
}; // FunctionProtoType void (double)
struct _ast3645
    : DeclContext<Pack<_ast3646, _ast3647>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str363>, _ast3648>>,
              Pack<_ast3646, _ast3647>>>,
          _ast3608> {}; // CXXMethodDecl WriteRawBytes
struct _ast3646
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3645>, _str134>, _ast3523>>>> {
}; // ParmVarDecl source
struct _ast3647
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3645>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast3648
    : FunctionProtoType<_ast114, Pack<_ast3523, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (const void *, size_t)
struct _ast3649
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str331>, _ast3653>>,
              Pack<_ast3650>>>,
          _ast3608>>,
      DeclContext<Pack<_ast3650>> {}; // CXXConstructorDecl ValueSerializer
struct _ast3650
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3649>, _str62>, _ast3651>>>> {
}; // ParmVarDecl
struct _ast3651 : LValueReferenceType<ReferenceType<_ast3652>> {
}; // LValueReferenceType const v8::ValueSerializer &
struct _ast3652 : ConstQualifiedType<_ast3557> {
}; // RecordType const v8::ValueSerializer
struct _ast3653 : FunctionProtoType<_ast114, Pack<_ast3651>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ValueSerializer &)
struct _ast3654
    : DeclContext<Pack<_ast3655>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3556>, _str64>, _ast3653>>,
              Pack<_ast3655>>>,
          _ast3608> {}; // CXXMethodDecl operator=
struct _ast3655
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3654>, _str62>, _ast3651>>>> {
}; // ParmVarDecl
struct _ast3656
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str364>, _ast3657>,
                     Pack<_ast3658>>,
          Pack<>>,
      DeclContext<Pack<_ast3662,
                       _ast3663,
                       _ast3689,
                       _ast3695,
                       _ast3701,
                       _ast3703,
                       _ast3708,
                       _ast3713,
                       _ast3718,
                       _ast3723,
                       _ast3725,
                       _ast3727,
                       _ast3731,
                       _ast3735,
                       _ast3739,
                       _ast3743,
                       _ast3748,
                       _ast3752,
                       _ast3661,
                       _ast3658>> {}; // CXXRecordDecl ValueDeserializer
struct _ast3657 : StructOrClassRecordType<RecordType<_ast3656>> {
}; // RecordType v8::ValueDeserializer
struct _ast3658
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3656>, _str333>, _ast3659>>> {
}; // FieldDecl private_
struct _ast3659 : PointerType<_ast3660> {
}; // PointerType v8::ValueDeserializer::PrivateData *
struct _ast3660 : StructOrClassRecordType<RecordType<_ast3661>> {
}; // RecordType v8::ValueDeserializer::PrivateData
struct _ast3661
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3656>, _str332>, _ast3660>,
                     None>,
          None> {}; // CXXRecordDecl PrivateData
struct _ast3662
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3656>, _str364>, _ast3657>,
                     None>,
          None> {}; // CXXRecordDecl ValueDeserializer
struct _ast3663
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3656>, _str334>, _ast3664>,
                     Pack<>>,
          Pack<>>,
      DeclContext<
          Pack<_ast3665, _ast3666, _ast3669, _ast3673, _ast3678, _ast3683>> {
}; // CXXRecordDecl Delegate
struct _ast3664 : StructOrClassRecordType<RecordType<_ast3663>> {
}; // RecordType v8::ValueDeserializer::Delegate
struct _ast3665
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3663>, _str334>, _ast3664>,
                     None>,
          None> {}; // CXXRecordDecl Delegate
struct _ast3666
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3663>, _str335>, _ast3667>>,
              Pack<>>>,
          _ast3668>>> {}; // CXXDestructorDecl ~Delegate
struct _ast3667 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast3668 : PointerType<_ast3664> {
}; // PointerType v8::ValueDeserializer::Delegate *
struct _ast3669
    : DeclContext<Pack<_ast3670>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3663>, _str365>, _ast3671>>,
              Pack<_ast3670>>>,
          _ast3668>> {}; // CXXMethodDecl ReadHostObject
struct _ast3670
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3669>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3671 : FunctionProtoType<_ast3672, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *)
struct _ast3673
    : DeclContext<Pack<_ast3674, _ast3675>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3663>, _str366>, _ast3676>>,
              Pack<_ast3674, _ast3675>>>,
          _ast3668>> {}; // CXXMethodDecl GetWasmModuleFromId
struct _ast3674
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3673>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3675
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3673>, _str355>, _ast3359>>>> {
}; // ParmVarDecl transfer_id
struct _ast3676
    : FunctionProtoType<_ast3677, Pack<_ast184, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *,
   // uint32_t)
struct _ast3678
    : DeclContext<Pack<_ast3679, _ast3680>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3663>, _str368>, _ast3681>>,
              Pack<_ast3679, _ast3680>>>,
          _ast3668>> {}; // CXXMethodDecl GetSharedArrayBufferFromId
struct _ast3679
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3678>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3680
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3678>, _str367>, _ast3359>>>> {
}; // ParmVarDecl clone_id
struct _ast3681
    : FunctionProtoType<_ast3682, Pack<_ast184, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *,
   // uint32_t)
struct _ast3683
    : DeclContext<Pack<_ast3684>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3663>, _str64>, _ast3687>>,
              Pack<_ast3684>>>,
          _ast3668> {}; // CXXMethodDecl operator=
struct _ast3684
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3683>, _str62>, _ast3685>>>> {
}; // ParmVarDecl
struct _ast3685 : LValueReferenceType<ReferenceType<_ast3686>> {
}; // LValueReferenceType const v8::ValueDeserializer::Delegate &
struct _ast3686 : ConstQualifiedType<_ast3664> {
}; // RecordType const v8::ValueDeserializer::Delegate
struct _ast3687 : FunctionProtoType<_ast3688, Pack<_ast3685>, UnqualifiedType> {
}; // FunctionProtoType v8::ValueDeserializer::Delegate &(const
   // v8::ValueDeserializer::Delegate &)
struct _ast3688 : LValueReferenceType<ReferenceType<_ast3664>> {
}; // LValueReferenceType v8::ValueDeserializer::Delegate &
struct _ast3689
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str364>, _ast3693>>,
              Pack<_ast3690, _ast3691, _ast3692>>>,
          _ast3694>>,
      DeclContext<Pack<_ast3690, _ast3691, _ast3692>> {
}; // CXXConstructorDecl ValueDeserializer
struct _ast3690
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3689>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3691
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3689>, _str130>, _ast3171>>>> {
}; // ParmVarDecl data
struct _ast3692
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3689>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast3693 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast3171, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t)
struct _ast3694 : PointerType<_ast3657> {
}; // PointerType v8::ValueDeserializer *
struct _ast3695
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str364>, _ast3700>>,
              Pack<_ast3696, _ast3697, _ast3698, _ast3699>>>,
          _ast3694>>,
      DeclContext<Pack<_ast3696, _ast3697, _ast3698, _ast3699>> {
}; // CXXConstructorDecl ValueDeserializer
struct _ast3696
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3695>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3697
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3695>, _str130>, _ast3171>>>> {
}; // ParmVarDecl data
struct _ast3698
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3695>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast3699
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3695>, _str350>, _ast3668>>>> {
}; // ParmVarDecl delegate
struct _ast3700 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast3171, _ast3254, _ast3668>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t,
   // v8::ValueDeserializer::Delegate *)
struct _ast3701
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str369>, _ast3702>>,
              Pack<>>>,
          _ast3694>> {}; // CXXDestructorDecl ~ValueDeserializer
struct _ast3702 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast3703
    : DeclContext<Pack<_ast3704>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str370>, _ast3706>>,
              Pack<_ast3704>>>,
          _ast3694> {}; // CXXMethodDecl ReadHeader
struct _ast3704
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3703>, _str229>, _ast3705>>>> {
}; // ParmVarDecl context
struct _ast3706 : FunctionProtoType<_ast3707, Pack<_ast3705>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>)
struct _ast3708
    : DeclContext<Pack<_ast3709>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str371>, _ast3711>>,
              Pack<_ast3709>>>,
          _ast3694> {}; // CXXMethodDecl ReadValue
struct _ast3709
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3708>, _str229>, _ast3710>>>> {
}; // ParmVarDecl context
struct _ast3711 : FunctionProtoType<_ast3712, Pack<_ast3710>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3713
    : DeclContext<Pack<_ast3714, _ast3715>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str357>, _ast3717>>,
              Pack<_ast3714, _ast3715>>>,
          _ast3694> {}; // CXXMethodDecl TransferArrayBuffer
struct _ast3714
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3713>, _str355>, _ast3359>>>> {
}; // ParmVarDecl transfer_id
struct _ast3715
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3713>, _str356>, _ast3716>>>> {
}; // ParmVarDecl array_buffer
struct _ast3717
    : FunctionProtoType<_ast114, Pack<_ast3359, _ast3716>, UnqualifiedType> {
}; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3718
    : DeclContext<Pack<_ast3719, _ast3720>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str373>, _ast3722>>,
              Pack<_ast3719, _ast3720>>>,
          _ast3694> {}; // CXXMethodDecl TransferSharedArrayBuffer
struct _ast3719
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3718>, _str372>, _ast3359>>>> {
}; // ParmVarDecl id
struct _ast3720
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3718>, _str340>, _ast3721>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast3722
    : FunctionProtoType<_ast114, Pack<_ast3359, _ast3721>, UnqualifiedType> {
}; // FunctionProtoType void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _ast3723
    : DeclContext<Pack<_ast3724>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str375>, _ast3633>>,
              Pack<_ast3724>>>,
          _ast3694> {}; // CXXMethodDecl SetSupportsLegacyWireFormat
struct _ast3724
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3723>, _str374>, _ast129>>>> {
}; // ParmVarDecl supports_legacy_wire_format
struct _ast3725
    : DeclContext<Pack<_ast3726>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str377>, _ast3633>>,
              Pack<_ast3726>>>,
          _ast3694> {}; // CXXMethodDecl SetExpectInlineWasm
struct _ast3726
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3725>, _str376>, _ast129>>>> {
}; // ParmVarDecl allow_inline_wasm
struct _ast3727
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str378>, _ast3728>>,
              Pack<>>>,
          _ast3729> {}; // CXXMethodDecl GetWireFormatVersion
struct _ast3728 : FunctionProtoType<_ast3359, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType uint32_t () const
struct _ast3729 : PointerType<_ast3730> {
}; // PointerType const v8::ValueDeserializer *
struct _ast3730 : ConstQualifiedType<_ast3657> {
}; // RecordType const v8::ValueDeserializer
struct _ast3731
    : DeclContext<Pack<_ast3732>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str379>, _ast3734>>,
              Pack<_ast3732>>>,
          _ast3694> {}; // CXXMethodDecl ReadUint32
struct _ast3732
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3731>, _str153>, _ast3733>>>> {
};                                          // ParmVarDecl value
struct _ast3733 : PointerType<_ast3359> {}; // PointerType uint32_t *
struct _ast3734 : FunctionProtoType<_ast129, Pack<_ast3733>, UnqualifiedType> {
}; // FunctionProtoType bool (uint32_t *)
struct _ast3735
    : DeclContext<Pack<_ast3736>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str380>, _ast3738>>,
              Pack<_ast3736>>>,
          _ast3694> {}; // CXXMethodDecl ReadUint64
struct _ast3736
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3735>, _str153>, _ast3737>>>> {
};                                          // ParmVarDecl value
struct _ast3737 : PointerType<_ast3639> {}; // PointerType uint64_t *
struct _ast3738 : FunctionProtoType<_ast129, Pack<_ast3737>, UnqualifiedType> {
}; // FunctionProtoType bool (uint64_t *)
struct _ast3739
    : DeclContext<Pack<_ast3740>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str381>, _ast3742>>,
              Pack<_ast3740>>>,
          _ast3694> {}; // CXXMethodDecl ReadDouble
struct _ast3740
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3739>, _str153>, _ast3741>>>> {
};                                          // ParmVarDecl value
struct _ast3741 : PointerType<_ast3643> {}; // PointerType double *
struct _ast3742 : FunctionProtoType<_ast129, Pack<_ast3741>, UnqualifiedType> {
}; // FunctionProtoType bool (double *)
struct _ast3743
    : DeclContext<Pack<_ast3744, _ast3745>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str382>, _ast3747>>,
              Pack<_ast3744, _ast3745>>>,
          _ast3694> {}; // CXXMethodDecl ReadRawBytes
struct _ast3744
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3743>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast3745
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3743>, _str130>, _ast3746>>>> {
};                                          // ParmVarDecl data
struct _ast3746 : PointerType<_ast3523> {}; // PointerType const void **
struct _ast3747
    : FunctionProtoType<_ast129, Pack<_ast3254, _ast3746>, UnqualifiedType> {
}; // FunctionProtoType bool (size_t, const void **)
struct _ast3748
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str364>, _ast3751>>,
              Pack<_ast3749>>>,
          _ast3694>>,
      DeclContext<Pack<_ast3749>> {}; // CXXConstructorDecl ValueDeserializer
struct _ast3749
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3748>, _str62>, _ast3750>>>> {
}; // ParmVarDecl
struct _ast3750 : LValueReferenceType<ReferenceType<_ast3730>> {
}; // LValueReferenceType const v8::ValueDeserializer &
struct _ast3751 : FunctionProtoType<_ast114, Pack<_ast3750>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ValueDeserializer &)
struct _ast3752
    : DeclContext<Pack<_ast3753>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3656>, _str64>, _ast3751>>,
              Pack<_ast3753>>>,
          _ast3694> {}; // CXXMethodDecl operator=
struct _ast3753
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3752>, _str62>, _ast3750>>>> {
}; // ParmVarDecl
struct _ast3754
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast103>, _str48>, _ast104>,
                     None>,
          None> {}; // CXXRecordDecl Value
struct _ast3755
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str383>, _ast128>>,
              Pack<>>>,
          _ast3756> {};                     // CXXMethodDecl IsUndefined
struct _ast3756 : PointerType<_ast3757> {}; // PointerType const v8::Value *
struct _ast3757 : ConstQualifiedType<_ast104> {}; // RecordType const v8::Value
struct _ast3758
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str384>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsNull
struct _ast3759
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str385>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsNullOrUndefined
struct _ast3760
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str386>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsTrue
struct _ast3761
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str387>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsFalse
struct _ast3762
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str388>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsName
struct _ast3763
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str389>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsString
struct _ast3764
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str390>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsSymbol
struct _ast3765
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str391>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsFunction
struct _ast3766
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str392>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsArray
struct _ast3767
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str393>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsObject
struct _ast3768
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str394>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsBigInt
struct _ast3769
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str395>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsBoolean
struct _ast3770
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str396>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsNumber
struct _ast3771
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str397>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsExternal
struct _ast3772
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str398>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsInt32
struct _ast3773
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str399>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsUint32
struct _ast3774
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str400>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsDate
struct _ast3775
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str401>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsArgumentsObject
struct _ast3776
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str402>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsBigIntObject
struct _ast3777
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str403>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsBooleanObject
struct _ast3778
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str404>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsNumberObject
struct _ast3779
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str405>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsStringObject
struct _ast3780
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str406>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsSymbolObject
struct _ast3781
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str407>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsNativeError
struct _ast3782
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str408>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsRegExp
struct _ast3783
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str409>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsAsyncFunction
struct _ast3784
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str410>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsGeneratorFunction
struct _ast3785
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str411>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsGeneratorObject
struct _ast3786
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str412>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsPromise
struct _ast3787
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str413>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsMap
struct _ast3788
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str414>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsSet
struct _ast3789
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str415>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsMapIterator
struct _ast3790
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str416>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsSetIterator
struct _ast3791
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str417>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsWeakMap
struct _ast3792
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str418>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsWeakSet
struct _ast3793
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str419>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsArrayBuffer
struct _ast3794
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str420>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsArrayBufferView
struct _ast3795
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str421>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsTypedArray
struct _ast3796
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str422>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsUint8Array
struct _ast3797
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str423>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsUint8ClampedArray
struct _ast3798
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str424>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsInt8Array
struct _ast3799
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str425>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsUint16Array
struct _ast3800
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str426>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsInt16Array
struct _ast3801
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str427>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsUint32Array
struct _ast3802
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str428>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsInt32Array
struct _ast3803
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str429>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsFloat32Array
struct _ast3804
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str430>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsFloat64Array
struct _ast3805
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str431>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsBigInt64Array
struct _ast3806
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str432>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsBigUint64Array
struct _ast3807
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str433>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsDataView
struct _ast3808
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str434>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsSharedArrayBuffer
struct _ast3809
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str435>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsProxy
struct _ast3810
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str436>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsWebAssemblyCompiledModule
struct _ast3811
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str437>, _ast128>>,
              Pack<>>>,
          _ast3756> {}; // CXXMethodDecl IsModuleNamespaceObject
struct _ast3812
    : DeclContext<Pack<_ast3813>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str438>, _ast3815>>,
              Pack<_ast3813>>>,
          _ast3756> {}; // CXXMethodDecl ToBigInt
struct _ast3813
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3812>, _str229>, _ast3814>>>> {
}; // ParmVarDecl context
struct _ast3815
    : FunctionProtoType<_ast3816, Pack<_ast3814>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _ast3817
    : DeclContext<Pack<_ast3818>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str439>, _ast3820>>,
              Pack<_ast3818>>>,
          _ast3756> {}; // CXXMethodDecl ToNumber
struct _ast3818
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3817>, _str229>, _ast3819>>>> {
}; // ParmVarDecl context
struct _ast3820
    : FunctionProtoType<_ast3821, Pack<_ast3819>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _ast3822
    : DeclContext<Pack<_ast3823>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str440>, _ast3825>>,
              Pack<_ast3823>>>,
          _ast3756> {}; // CXXMethodDecl ToString
struct _ast3823
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3822>, _str229>, _ast3824>>>> {
}; // ParmVarDecl context
struct _ast3825
    : FunctionProtoType<_ast3826, Pack<_ast3824>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3827
    : DeclContext<Pack<_ast3828>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str441>, _ast3830>>,
              Pack<_ast3828>>>,
          _ast3756> {}; // CXXMethodDecl ToDetailString
struct _ast3828
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3827>, _str229>, _ast3829>>>> {
}; // ParmVarDecl context
struct _ast3830
    : FunctionProtoType<_ast3831, Pack<_ast3829>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3832
    : DeclContext<Pack<_ast3833>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str442>, _ast3835>>,
              Pack<_ast3833>>>,
          _ast3756> {}; // CXXMethodDecl ToObject
struct _ast3833
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3832>, _str229>, _ast3834>>>> {
}; // ParmVarDecl context
struct _ast3835
    : FunctionProtoType<_ast3836, Pack<_ast3834>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast3837
    : DeclContext<Pack<_ast3838>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str443>, _ast3840>>,
              Pack<_ast3838>>>,
          _ast3756> {}; // CXXMethodDecl ToInteger
struct _ast3838
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3837>, _str229>, _ast3839>>>> {
}; // ParmVarDecl context
struct _ast3840
    : FunctionProtoType<_ast3841, Pack<_ast3839>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _ast3842
    : DeclContext<Pack<_ast3843>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str444>, _ast3845>>,
              Pack<_ast3843>>>,
          _ast3756> {}; // CXXMethodDecl ToUint32
struct _ast3843
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3842>, _str229>, _ast3844>>>> {
}; // ParmVarDecl context
struct _ast3845
    : FunctionProtoType<_ast3846, Pack<_ast3844>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast3847
    : DeclContext<Pack<_ast3848>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str445>, _ast3850>>,
              Pack<_ast3848>>>,
          _ast3756> {}; // CXXMethodDecl ToInt32
struct _ast3848
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3847>, _str229>, _ast3849>>>> {
}; // ParmVarDecl context
struct _ast3850
    : FunctionProtoType<_ast3851, Pack<_ast3849>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _ast3852
    : DeclContext<Pack<_ast3853>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str446>, _ast3854>>,
              Pack<_ast3853>>>,
          _ast3756> {}; // CXXMethodDecl ToBoolean
struct _ast3853
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3852>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3854
    : FunctionProtoType<_ast3855, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *) const
struct _ast3856
    : DeclContext<Pack<_ast3857>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str447>, _ast3859>>,
              Pack<_ast3857>>>,
          _ast3756> {}; // CXXMethodDecl ToArrayIndex
struct _ast3857
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3856>, _str229>, _ast3858>>>> {
}; // ParmVarDecl context
struct _ast3859
    : FunctionProtoType<_ast3860, Pack<_ast3858>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast3861
    : DeclContext<Pack<_ast3862>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str448>, _ast3863>>,
              Pack<_ast3862>>>,
          _ast3756> {}; // CXXMethodDecl BooleanValue
struct _ast3862
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3861>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3863
    : FunctionProtoType<_ast129, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType bool (v8::Isolate *) const
struct _ast3864
    : DeclContext<Pack<_ast3865>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str449>, _ast3867>>,
              Pack<_ast3865>>>,
          _ast3756> {}; // CXXMethodDecl NumberValue
struct _ast3865
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3864>, _str229>, _ast3866>>>> {
}; // ParmVarDecl context
struct _ast3867
    : FunctionProtoType<_ast3868, Pack<_ast3866>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<double> (Local<v8::Context>) const
struct _ast3869
    : DeclContext<Pack<_ast3870>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str450>, _ast3872>>,
              Pack<_ast3870>>>,
          _ast3756> {}; // CXXMethodDecl IntegerValue
struct _ast3870
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3869>, _str229>, _ast3871>>>> {
}; // ParmVarDecl context
struct _ast3872
    : FunctionProtoType<_ast3873, Pack<_ast3871>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<int64_t> (Local<v8::Context>) const
struct _ast3874
    : DeclContext<Pack<_ast3875>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str451>, _ast3877>>,
              Pack<_ast3875>>>,
          _ast3756> {}; // CXXMethodDecl Uint32Value
struct _ast3875
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3874>, _str229>, _ast3876>>>> {
}; // ParmVarDecl context
struct _ast3877
    : FunctionProtoType<_ast3878, Pack<_ast3876>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<uint32_t> (Local<v8::Context>) const
struct _ast3879
    : DeclContext<Pack<_ast3880>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str452>, _ast3882>>,
              Pack<_ast3880>>>,
          _ast3756> {}; // CXXMethodDecl Int32Value
struct _ast3880
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3879>, _str229>, _ast3881>>>> {
}; // ParmVarDecl context
struct _ast3882
    : FunctionProtoType<_ast3883, Pack<_ast3881>, ConstQualifiedType> {
}; // FunctionProtoType Maybe<int32_t> (Local<v8::Context>) const
struct _ast3884
    : DeclContext<Pack<_ast3885, _ast3887>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str453>, _ast3889>>,
              Pack<_ast3885, _ast3887>>>,
          _ast3756> {}; // CXXMethodDecl Equals
struct _ast3885
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3884>, _str229>, _ast3886>>>> {
}; // ParmVarDecl context
struct _ast3887
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3884>, _str51>, _ast3888>>>> {
}; // ParmVarDecl that
struct _ast3889 : FunctionProtoType<_ast3890,
                                    Pack<_ast3886, _ast3888>,
                                    ConstQualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _ast3891
    : DeclContext<Pack<_ast3892>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str454>, _ast3894>>,
              Pack<_ast3892>>>,
          _ast3756> {}; // CXXMethodDecl StrictEquals
struct _ast3892
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3891>, _str51>, _ast3893>>>> {
}; // ParmVarDecl that
struct _ast3894
    : FunctionProtoType<_ast129, Pack<_ast3893>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3895
    : DeclContext<Pack<_ast3896>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str455>, _ast3898>>,
              Pack<_ast3896>>>,
          _ast3756> {}; // CXXMethodDecl SameValue
struct _ast3896
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3895>, _str51>, _ast3897>>>> {
}; // ParmVarDecl that
struct _ast3898
    : FunctionProtoType<_ast129, Pack<_ast3897>, ConstQualifiedType> {
}; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3901
    : DeclContext<Pack<_ast3902>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast103>, _str58>, _ast3905>>,
          Pack<_ast3902>>> {}; // CXXMethodDecl Cast
struct _ast3902
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3901>, _str153>, _ast3903>>>> {
};                                          // ParmVarDecl value
struct _ast3903 : PointerType<_ast3904> {}; // PointerType T *
struct _ast3905 : FunctionProtoType<_ast3906, Pack<_ast3903>, UnqualifiedType> {
};                                         // FunctionProtoType v8::Value *(T *)
struct _ast3906 : PointerType<_ast104> {}; // PointerType v8::Value *
struct _ast3907
    : DeclContext<Pack<_ast3908>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str456>, _ast3909>>,
              Pack<_ast3908>>>,
          _ast3906> {}; // CXXMethodDecl TypeOf
struct _ast3908
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast3907>, _str62>, _ast184>>>> {
}; // ParmVarDecl
struct _ast3909 : FunctionProtoType<_ast3910, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3911
    : DeclContext<Pack<_ast3912, _ast3914>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast103>, _str457>, _ast3916>>,
              Pack<_ast3912, _ast3914>>>,
          _ast3906> {}; // CXXMethodDecl InstanceOf
struct _ast3912
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3911>, _str229>, _ast3913>>>> {
}; // ParmVarDecl context
struct _ast3914
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3911>, _str338>, _ast3915>>>> {
}; // ParmVarDecl object
struct _ast3916
    : FunctionProtoType<_ast3917, Pack<_ast3913, _ast3915>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _ast3918
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast65>, _str29>, _ast66>,
                     None>,
          None> {}; // CXXRecordDecl Primitive
struct _ast3919
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast19>, _str10>, _ast20>,
                     None>,
          None> {}; // CXXRecordDecl Boolean
struct _ast3920
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast19>, _str48>, _ast128>>,
              Pack<>>>,
          _ast3921> {};                     // CXXMethodDecl Value
struct _ast3921 : PointerType<_ast3922> {}; // PointerType const v8::Boolean *
struct _ast3922 : ConstQualifiedType<_ast20> {}; // RecordType const v8::Boolean
struct _ast3923
    : DeclContext<Pack<_ast3924>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast19>, _str58>, _ast3927>>,
          Pack<_ast3924>>> {}; // CXXMethodDecl Cast
struct _ast3924
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3923>, _str458>, _ast3925>>>> {
};                                          // ParmVarDecl obj
struct _ast3925 : PointerType<_ast3926> {}; // PointerType v8::Value *
struct _ast3927 : FunctionProtoType<_ast3928, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::Boolean *(v8::Value *)
struct _ast3928 : PointerType<_ast20> {}; // PointerType v8::Boolean *
struct _ast3929
    : DeclContext<Pack<_ast3930, _ast3931>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast19>, _str61>, _ast3932>>,
          Pack<_ast3930, _ast3931>>> {}; // CXXMethodDecl New
struct _ast3930
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3929>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3931
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3929>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast3932
    : FunctionProtoType<_ast3933, Pack<_ast184, _ast129>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, bool)
struct _ast3934
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast51>, _str22>, _ast52>,
                     None>,
          None> {}; // CXXRecordDecl Name
struct _ast3935
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast51>, _str227>, _ast3071>>,
              Pack<>>>,
          _ast3936> {};                   // CXXMethodDecl GetIdentityHash
struct _ast3936 : PointerType<_ast52> {}; // PointerType v8::Name *
struct _ast3937
    : DeclContext<Pack<_ast3938>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast51>, _str58>, _ast3939>>,
          Pack<_ast3938>>> {}; // CXXMethodDecl Cast
struct _ast3938
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3937>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast3939 : FunctionProtoType<_ast3936, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Name *(v8::Value *)
struct _ast3943
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast87>, _str40>, _ast88>,
                     None>,
          None> {}; // CXXRecordDecl String
struct _ast3944
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast87>, _str459>, _ast2435>>> {
}; // VarDecl kMaxLength
struct _ast3949
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str166>, _ast2938>>,
              Pack<>>>,
          _ast3950> {};                     // CXXMethodDecl Length
struct _ast3950 : PointerType<_ast3951> {}; // PointerType const v8::String *
struct _ast3951 : ConstQualifiedType<_ast88> {}; // RecordType const v8::String
struct _ast3952
    : DeclContext<Pack<_ast3953>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str460>, _ast3954>>,
              Pack<_ast3953>>>,
          _ast3950> {}; // CXXMethodDecl Utf8Length
struct _ast3953
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3952>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3954
    : FunctionProtoType<_ast1901, Pack<_ast184>, ConstQualifiedType> {
}; // FunctionProtoType int (v8::Isolate *) const
struct _ast3955
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str461>, _ast128>>,
              Pack<>>>,
          _ast3950> {}; // CXXMethodDecl IsOneByte
struct _ast3956
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str462>, _ast128>>,
              Pack<>>>,
          _ast3950> {}; // CXXMethodDecl ContainsOnlyOneByte
struct _ast3963
    : DeclContext<Pack<_ast3964, _ast3965, _ast3967, _ast3968, _ast3969>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str463>, _ast3970>>,
              Pack<_ast3964, _ast3965, _ast3967, _ast3968, _ast3969>>>,
          _ast3950> {}; // CXXMethodDecl Write
struct _ast3964
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3963>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3965
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3963>, _str348>, _ast3966>>>> {
};                                          // ParmVarDecl buffer
struct _ast3966 : PointerType<_ast1921> {}; // PointerType uint16_t *
struct _ast3967
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3963>, _str317>, _ast1901>>>> {
}; // ParmVarDecl start
struct _ast3968
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3963>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast3969
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3963>, _str264>, _ast1901>>>> {
}; // ParmVarDecl options
struct _ast3970
    : FunctionProtoType<_ast1901,
                        Pack<_ast184, _ast3966, _ast1901, _ast1901, _ast1901>,
                        ConstQualifiedType> {
}; // FunctionProtoType int (v8::Isolate *, uint16_t *, int, int, int) const
struct _ast3971
    : DeclContext<Pack<_ast3972, _ast3973, _ast3975, _ast3976, _ast3977>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str464>, _ast3978>>,
              Pack<_ast3972, _ast3973, _ast3975, _ast3976, _ast3977>>>,
          _ast3950> {}; // CXXMethodDecl WriteOneByte
struct _ast3972
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3971>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3973
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3971>, _str348>, _ast3974>>>> {
};                                          // ParmVarDecl buffer
struct _ast3974 : PointerType<_ast3173> {}; // PointerType uint8_t *
struct _ast3975
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3971>, _str317>, _ast1901>>>> {
}; // ParmVarDecl start
struct _ast3976
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3971>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast3977
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3971>, _str264>, _ast1901>>>> {
}; // ParmVarDecl options
struct _ast3978
    : FunctionProtoType<_ast1901,
                        Pack<_ast184, _ast3974, _ast1901, _ast1901, _ast1901>,
                        ConstQualifiedType> {
}; // FunctionProtoType int (v8::Isolate *, uint8_t *, int, int, int) const
struct _ast3979
    : DeclContext<Pack<_ast3980, _ast3981, _ast3983, _ast3984, _ast3986>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str466>, _ast3987>>,
              Pack<_ast3980, _ast3981, _ast3983, _ast3984, _ast3986>>>,
          _ast3950> {}; // CXXMethodDecl WriteUtf8
struct _ast3980
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3979>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3981
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3979>, _str348>, _ast3982>>>> {
};                                          // ParmVarDecl buffer
struct _ast3982 : PointerType<_ast1916> {}; // PointerType char *
struct _ast3983
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3979>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast3984
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3979>, _str465>, _ast3985>>>> {
};                                          // ParmVarDecl nchars_ref
struct _ast3985 : PointerType<_ast1901> {}; // PointerType int *
struct _ast3986
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3979>, _str264>, _ast1901>>>> {
}; // ParmVarDecl options
struct _ast3987
    : FunctionProtoType<_ast1901,
                        Pack<_ast184, _ast3982, _ast1901, _ast3985, _ast1901>,
                        ConstQualifiedType> {
}; // FunctionProtoType int (v8::Isolate *, char *, int, int *, int) const
struct _ast3988
    : DeclContext<Pack<_ast3989>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str77>, _ast3990>>,
          Pack<_ast3989>>> {}; // CXXMethodDecl Empty
struct _ast3989
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3988>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast3990 : FunctionProtoType<_ast3991, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3992
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str397>, _ast128>>,
              Pack<>>>,
          _ast3950> {}; // CXXMethodDecl IsExternal
struct _ast3993
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str467>, _ast128>>,
              Pack<>>>,
          _ast3950> {}; // CXXMethodDecl IsExternalOneByte
struct _ast3994
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast87>, _str468>, _ast3995>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast3996,
                       _ast3997,
                       _ast3999,
                       _ast4002,
                       _ast4006,
                       _ast4008,
                       _ast4010,
                       _ast4011,
                       _ast4013>> {
}; // CXXRecordDecl ExternalStringResourceBase
struct _ast3995 : StructOrClassRecordType<RecordType<_ast3994>> {
}; // RecordType v8::String::ExternalStringResourceBase
struct _ast3996
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3994>, _str468>, _ast3995>,
                     None>,
          None> {}; // CXXRecordDecl ExternalStringResourceBase
struct _ast3997
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str469>, _ast214>>,
              Pack<>>>,
          _ast3998>>> {}; // CXXDestructorDecl ~ExternalStringResourceBase
struct _ast3998 : PointerType<_ast3995> {
}; // PointerType v8::String::ExternalStringResourceBase *
struct _ast3999
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str470>, _ast128>>,
              Pack<>>>,
          _ast4000>> {}; // CXXMethodDecl IsCacheable
struct _ast4000 : PointerType<_ast4001> {
}; // PointerType const v8::String::ExternalStringResourceBase *
struct _ast4001 : ConstQualifiedType<_ast3995> {
}; // RecordType const v8::String::ExternalStringResourceBase
struct _ast4002
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str468>, _ast4005>>,
              Pack<_ast4003>>>,
          _ast3998>>,
      DeclContext<Pack<_ast4003>> {
}; // CXXConstructorDecl ExternalStringResourceBase
struct _ast4003
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4002>, _str62>, _ast4004>>>> {
}; // ParmVarDecl
struct _ast4004 : LValueReferenceType<ReferenceType<_ast4001>> {
}; // LValueReferenceType const v8::String::ExternalStringResourceBase &
struct _ast4005 : FunctionProtoType<_ast114, Pack<_ast4004>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::String::ExternalStringResourceBase &)
struct _ast4006
    : DeclContext<Pack<_ast4007>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str64>, _ast4005>>,
              Pack<_ast4007>>>,
          _ast3998> {}; // CXXMethodDecl operator=
struct _ast4007
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4006>, _str62>, _ast4004>>>> {
}; // ParmVarDecl
struct _ast4008
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str468>, _ast4009>>,
              Pack<>>>,
          _ast3998>> {}; // CXXConstructorDecl ExternalStringResourceBase
struct _ast4009 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast4010
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str471>, _ast113>>,
              Pack<>>>,
          _ast3998>> {}; // CXXMethodDecl Dispose
struct _ast4011
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str472>, _ast4012>>,
              Pack<>>>,
          _ast4000>> {}; // CXXMethodDecl Lock
struct _ast4012 : FunctionProtoType<_ast114, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType void () const
struct _ast4013
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3994>, _str473>, _ast4012>>,
              Pack<>>>,
          _ast4000>> {}; // CXXMethodDecl Unlock
struct _ast4014
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast87>, _str474>, _ast4015>,
                     Pack<>>,
          Pack<_ast4016>>,
      DeclContext<Pack<_ast4017,
                       _ast4018,
                       _ast4020,
                       _ast4026,
                       _ast4028,
                       _ast4030,
                       _ast4034>> {}; // CXXRecordDecl ExternalStringResource
struct _ast4015 : StructOrClassRecordType<RecordType<_ast4014>> {
}; // RecordType v8::String::ExternalStringResource
struct _ast4016 : CXXBaseSpecifier<_ast3995> {
}; // CXXBaseSpecifier Record v8::String::ExternalStringResourceBase
struct _ast4017
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast4014>, _str474>, _ast4015>,
                     None>,
          None> {}; // CXXRecordDecl ExternalStringResource
struct _ast4018
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4014>, _str475>, _ast214>>,
              Pack<>>>,
          _ast4019>>> {}; // CXXDestructorDecl ~ExternalStringResource
struct _ast4019 : PointerType<_ast4015> {
}; // PointerType v8::String::ExternalStringResource *
struct _ast4020
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4014>, _str130>, _ast4021>>,
              Pack<>>>,
          _ast4024>> {}; // CXXMethodDecl data
struct _ast4021 : FunctionProtoType<_ast4022, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const uint16_t *() const
struct _ast4022 : PointerType<_ast4023> {}; // PointerType const uint16_t *
struct _ast4023 : ConstQualifiedType<_ast1921> {}; // TypedefType const uint16_t
struct _ast4024 : PointerType<_ast4025> {
}; // PointerType const v8::String::ExternalStringResource *
struct _ast4025 : ConstQualifiedType<_ast4015> {
}; // RecordType const v8::String::ExternalStringResource
struct _ast4026
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4014>, _str165>, _ast4027>>,
              Pack<>>>,
          _ast4024>> {}; // CXXMethodDecl length
struct _ast4027 : FunctionProtoType<_ast3254, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType size_t () const
struct _ast4028
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4014>, _str474>, _ast4029>>,
              Pack<>>>,
          _ast4019>> {}; // CXXConstructorDecl ExternalStringResource
struct _ast4029 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast4030
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4014>, _str474>, _ast4033>>,
              Pack<_ast4031>>>,
          _ast4019>>,
      DeclContext<Pack<_ast4031>> {
}; // CXXConstructorDecl ExternalStringResource
struct _ast4031
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4030>, _str62>, _ast4032>>>> {
}; // ParmVarDecl
struct _ast4032 : LValueReferenceType<ReferenceType<_ast4025>> {
}; // LValueReferenceType const v8::String::ExternalStringResource &
struct _ast4033 : FunctionProtoType<_ast114, Pack<_ast4032>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::String::ExternalStringResource &)
struct _ast4034
    : DeclContext<Pack<_ast4035>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4014>, _str64>, _ast4036>>,
              Pack<_ast4035>>>,
          _ast4019> {}; // CXXMethodDecl operator=
struct _ast4035
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4034>, _str62>, _ast4032>>>> {
}; // ParmVarDecl
struct _ast4036 : FunctionProtoType<_ast4037, Pack<_ast4032>, UnqualifiedType> {
}; // FunctionProtoType v8::String::ExternalStringResource &(const
   // v8::String::ExternalStringResource &)
struct _ast4037 : LValueReferenceType<ReferenceType<_ast4015>> {
}; // LValueReferenceType v8::String::ExternalStringResource &
struct _ast4038
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast87>, _str476>, _ast4039>,
                     Pack<>>,
          Pack<_ast4040>>,
      DeclContext<Pack<_ast4041,
                       _ast4042,
                       _ast4044,
                       _ast4048,
                       _ast4049,
                       _ast4051,
                       _ast4055>> {
}; // CXXRecordDecl ExternalOneByteStringResource
struct _ast4039 : StructOrClassRecordType<RecordType<_ast4038>> {
}; // RecordType v8::String::ExternalOneByteStringResource
struct _ast4040 : CXXBaseSpecifier<_ast3995> {
}; // CXXBaseSpecifier Record v8::String::ExternalStringResourceBase
struct _ast4041
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast4038>, _str476>, _ast4039>,
                     None>,
          None> {}; // CXXRecordDecl ExternalOneByteStringResource
struct _ast4042
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4038>, _str477>, _ast214>>,
              Pack<>>>,
          _ast4043>>> {}; // CXXDestructorDecl ~ExternalOneByteStringResource
struct _ast4043 : PointerType<_ast4039> {
}; // PointerType v8::String::ExternalOneByteStringResource *
struct _ast4044
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4038>, _str130>, _ast4045>>,
              Pack<>>>,
          _ast4046>> {}; // CXXMethodDecl data
struct _ast4045 : FunctionProtoType<_ast1914, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const char *() const
struct _ast4046 : PointerType<_ast4047> {
}; // PointerType const v8::String::ExternalOneByteStringResource *
struct _ast4047 : ConstQualifiedType<_ast4039> {
}; // RecordType const v8::String::ExternalOneByteStringResource
struct _ast4048
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4038>, _str165>, _ast4027>>,
              Pack<>>>,
          _ast4046>> {}; // CXXMethodDecl length
struct _ast4049
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4038>, _str476>, _ast4050>>,
              Pack<>>>,
          _ast4043>> {}; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast4050 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast4051
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4038>, _str476>, _ast4054>>,
              Pack<_ast4052>>>,
          _ast4043>>,
      DeclContext<Pack<_ast4052>> {
}; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast4052
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4051>, _str62>, _ast4053>>>> {
}; // ParmVarDecl
struct _ast4053 : LValueReferenceType<ReferenceType<_ast4047>> {
}; // LValueReferenceType const v8::String::ExternalOneByteStringResource &
struct _ast4054 : FunctionProtoType<_ast114, Pack<_ast4053>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::String::ExternalOneByteStringResource &)
struct _ast4055
    : DeclContext<Pack<_ast4056>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4038>, _str64>, _ast4057>>,
              Pack<_ast4056>>>,
          _ast4043> {}; // CXXMethodDecl operator=
struct _ast4056
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4055>, _str62>, _ast4053>>>> {
}; // ParmVarDecl
struct _ast4057 : FunctionProtoType<_ast4058, Pack<_ast4053>, UnqualifiedType> {
}; // FunctionProtoType v8::String::ExternalOneByteStringResource &(const
   // v8::String::ExternalOneByteStringResource &)
struct _ast4058 : LValueReferenceType<ReferenceType<_ast4039>> {
}; // LValueReferenceType v8::String::ExternalOneByteStringResource &
struct _ast4059
    : DeclContext<Pack<_ast4060>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str479>, _ast4063>>,
              Pack<_ast4060>>>,
          _ast3950> {}; // CXXMethodDecl GetExternalStringResourceBase
struct _ast4060
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4059>, _str478>, _ast4061>>>> {
}; // ParmVarDecl encoding_out
struct _ast4061 : PointerType<_ast4062> {
}; // PointerType v8::String::Encoding *
struct _ast4062 : EnumType<_ast3945, _ast1901> {
}; // EnumType v8::String::Encoding
struct _ast4063
    : FunctionProtoType<_ast3998, Pack<_ast4061>, ConstQualifiedType> {
}; // FunctionProtoType v8::String::ExternalStringResourceBase
   // *(v8::String::Encoding *) const
struct _ast4064
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str480>, _ast4065>>,
              Pack<>>>,
          _ast3950> {}; // CXXMethodDecl GetExternalStringResource
struct _ast4065 : FunctionProtoType<_ast4019, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::String::ExternalStringResource *() const
struct _ast4066
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str481>, _ast4067>>,
              Pack<>>>,
          _ast3950> {}; // CXXMethodDecl GetExternalOneByteStringResource
struct _ast4067 : FunctionProtoType<_ast4046, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const v8::String::ExternalOneByteStringResource *()
   // const
struct _ast4068
    : DeclContext<Pack<_ast4069>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str58>, _ast4070>>,
          Pack<_ast4069>>> {}; // CXXMethodDecl Cast
struct _ast4069
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4068>, _str458>, _ast3925>>>> {
}; // ParmVarDecl obj
struct _ast4070 : FunctionProtoType<_ast4071, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::String *(v8::Value *)
struct _ast4071 : PointerType<_ast88> {}; // PointerType v8::String *
struct _ast4072
    : DeclContext<Pack<_ast4073, _ast4074, _ast4075, _ast4077>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str482>, _ast4078>>,
          Pack<_ast4073, _ast4074, _ast4075, _ast4077>>> {
}; // CXXMethodDecl NewFromUtf8
struct _ast4073
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4072>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4074
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4072>, _str130>, _ast1914>>>> {
}; // ParmVarDecl data
struct _ast4075
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4072>, _str81>, _ast4076>>>> {
};                                                 // ParmVarDecl type
struct _ast4076 : EnumType<_ast3940, _ast1901> {}; // EnumType v8::NewStringType
struct _ast4077
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4072>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast4078 : FunctionProtoType<_ast4079,
                                    Pack<_ast184, _ast1914, _ast4076, _ast1901>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const char *,
   // v8::NewStringType, int)
struct _ast4080
    : DeclContext<Pack<_ast4081, _ast4082, _ast4083, _ast4084>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str483>, _ast4085>>,
          Pack<_ast4081, _ast4082, _ast4083, _ast4084>>> {
}; // CXXMethodDecl NewFromOneByte
struct _ast4081
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4080>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4082
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4080>, _str130>, _ast3171>>>> {
}; // ParmVarDecl data
struct _ast4083
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4080>, _str81>, _ast4076>>>> {
}; // ParmVarDecl type
struct _ast4084
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4080>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast4085 : FunctionProtoType<_ast4086,
                                    Pack<_ast184, _ast3171, _ast4076, _ast1901>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *,
   // v8::NewStringType, int)
struct _ast4087
    : DeclContext<Pack<_ast4088, _ast4089, _ast4090, _ast4091>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str484>, _ast4092>>,
          Pack<_ast4088, _ast4089, _ast4090, _ast4091>>> {
}; // CXXMethodDecl NewFromTwoByte
struct _ast4088
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4087>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4089
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4087>, _str130>, _ast4022>>>> {
}; // ParmVarDecl data
struct _ast4090
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4087>, _str81>, _ast4076>>>> {
}; // ParmVarDecl type
struct _ast4091
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4087>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast4092 : FunctionProtoType<_ast4093,
                                    Pack<_ast184, _ast4022, _ast4076, _ast1901>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *,
   // v8::NewStringType, int)
struct _ast4094
    : DeclContext<Pack<_ast4095, _ast4096, _ast4098>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str487>, _ast4100>>,
          Pack<_ast4095, _ast4096, _ast4098>>> {}; // CXXMethodDecl Concat
struct _ast4095
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4094>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4096
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4094>, _str485>, _ast4097>>>> {
}; // ParmVarDecl left
struct _ast4098
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4094>, _str486>, _ast4099>>>> {
}; // ParmVarDecl right
struct _ast4100 : FunctionProtoType<_ast4101,
                                    Pack<_ast184, _ast4097, _ast4099>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>,
   // Local<v8::String>)
struct _ast4102
    : DeclContext<Pack<_ast4103, _ast4104>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str489>, _ast4105>>,
          Pack<_ast4103, _ast4104>>> {}; // CXXMethodDecl NewExternalTwoByte
struct _ast4103
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4102>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4104
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4102>, _str488>, _ast4019>>>> {
}; // ParmVarDecl resource
struct _ast4105
    : FunctionProtoType<_ast4106, Pack<_ast184, _ast4019>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
   // v8::String::ExternalStringResource *)
struct _ast4107
    : DeclContext<Pack<_ast4108>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str490>, _ast4109>>,
              Pack<_ast4108>>>,
          _ast4071> {}; // CXXMethodDecl MakeExternal
struct _ast4108
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4107>, _str488>, _ast4019>>>> {
}; // ParmVarDecl resource
struct _ast4109 : FunctionProtoType<_ast129, Pack<_ast4019>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::String::ExternalStringResource *)
struct _ast4110
    : DeclContext<Pack<_ast4111, _ast4112>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast87>, _str491>, _ast4113>>,
          Pack<_ast4111, _ast4112>>> {}; // CXXMethodDecl NewExternalOneByte
struct _ast4111
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4110>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4112
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4110>, _str488>, _ast4043>>>> {
}; // ParmVarDecl resource
struct _ast4113
    : FunctionProtoType<_ast4114, Pack<_ast184, _ast4043>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
   // v8::String::ExternalOneByteStringResource *)
struct _ast4115
    : DeclContext<Pack<_ast4116>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str490>, _ast4117>>,
              Pack<_ast4116>>>,
          _ast4071> {}; // CXXMethodDecl MakeExternal
struct _ast4116
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4115>, _str488>, _ast4043>>>> {
}; // ParmVarDecl resource
struct _ast4117 : FunctionProtoType<_ast129, Pack<_ast4043>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::String::ExternalOneByteStringResource *)
struct _ast4118
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str492>, _ast3256>>,
              Pack<>>>,
          _ast4071> {}; // CXXMethodDecl CanMakeExternal
struct _ast4119
    : DeclContext<Pack<_ast4120>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast87>, _str494>, _ast4122>>,
              Pack<_ast4120>>>,
          _ast4071> {}; // CXXMethodDecl StringEquals
struct _ast4120
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4119>, _str493>, _ast4121>>>> {
}; // ParmVarDecl str
struct _ast4122 : FunctionProtoType<_ast129, Pack<_ast4121>, UnqualifiedType> {
}; // FunctionProtoType bool (Local<v8::String>)
struct _ast4123
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast87>, _str495>, _ast4124>,
                     Pack<_ast4125, _ast4126>>,
          Pack<>>,
      DeclContext<Pack<_ast4127,
                       _ast4128,
                       _ast4134,
                       _ast4136,
                       _ast4138,
                       _ast4141,
                       _ast4142,
                       _ast4146,
                       _ast4125,
                       _ast4126>> {}; // CXXRecordDecl Utf8Value
struct _ast4124 : StructOrClassRecordType<RecordType<_ast4123>> {
}; // RecordType v8::String::Utf8Value
struct _ast4125
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4123>, _str496>, _ast3982>>> {
}; // FieldDecl str_
struct _ast4126
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4123>, _str497>, _ast1901>>> {
}; // FieldDecl length_
struct _ast4127
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast4123>, _str495>, _ast4124>,
                     None>,
          None> {}; // CXXRecordDecl Utf8Value
struct _ast4128
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str495>, _ast4132>>,
              Pack<_ast4129, _ast4130>>>,
          _ast4133>>,
      DeclContext<Pack<_ast4129, _ast4130>> {}; // CXXConstructorDecl Utf8Value
struct _ast4129
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4128>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4130
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4128>, _str458>, _ast4131>>>> {
}; // ParmVarDecl obj
struct _ast4132
    : FunctionProtoType<_ast114, Pack<_ast184, _ast4131>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4133 : PointerType<_ast4124> {
}; // PointerType v8::String::Utf8Value *
struct _ast4134
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str498>, _ast4135>>,
              Pack<>>>,
          _ast4133>> {}; // CXXDestructorDecl ~Utf8Value
struct _ast4135 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast4136
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str55>, _ast4137>>,
              Pack<>>>,
          _ast4133> {}; // CXXMethodDecl operator*
struct _ast4137 : FunctionProtoType<_ast3982, Pack<>, UnqualifiedType> {
}; // FunctionProtoType char *()
struct _ast4138
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str55>, _ast4045>>,
              Pack<>>>,
          _ast4139> {}; // CXXMethodDecl operator*
struct _ast4139 : PointerType<_ast4140> {
}; // PointerType const v8::String::Utf8Value *
struct _ast4140 : ConstQualifiedType<_ast4124> {
}; // RecordType const v8::String::Utf8Value
struct _ast4141
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str165>, _ast2938>>,
              Pack<>>>,
          _ast4139> {}; // CXXMethodDecl length
struct _ast4142
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str495>, _ast4145>>,
              Pack<_ast4143>>>,
          _ast4133>>,
      DeclContext<Pack<_ast4143>> {}; // CXXConstructorDecl Utf8Value
struct _ast4143
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4142>, _str62>, _ast4144>>>> {
}; // ParmVarDecl
struct _ast4144 : LValueReferenceType<ReferenceType<_ast4140>> {
}; // LValueReferenceType const v8::String::Utf8Value &
struct _ast4145 : FunctionProtoType<_ast114, Pack<_ast4144>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::String::Utf8Value &)
struct _ast4146
    : DeclContext<Pack<_ast4147>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4123>, _str64>, _ast4145>>,
              Pack<_ast4147>>>,
          _ast4133> {}; // CXXMethodDecl operator=
struct _ast4147
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4146>, _str62>, _ast4144>>>> {
}; // ParmVarDecl
struct _ast4148
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast87>, _str48>, _ast4149>,
                     Pack<_ast4150, _ast4151>>,
          Pack<>>,
      DeclContext<Pack<_ast4152,
                       _ast4153,
                       _ast4159,
                       _ast4161,
                       _ast4163,
                       _ast4166,
                       _ast4167,
                       _ast4171,
                       _ast4150,
                       _ast4151>> {}; // CXXRecordDecl Value
struct _ast4149 : StructOrClassRecordType<RecordType<_ast4148>> {
}; // RecordType v8::String::Value
struct _ast4150
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4148>, _str496>, _ast3966>>> {
}; // FieldDecl str_
struct _ast4151
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4148>, _str497>, _ast1901>>> {
}; // FieldDecl length_
struct _ast4152
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast4148>, _str48>, _ast4149>,
                     None>,
          None> {}; // CXXRecordDecl Value
struct _ast4153
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str48>, _ast4157>>,
              Pack<_ast4154, _ast4155>>>,
          _ast4158>>,
      DeclContext<Pack<_ast4154, _ast4155>> {}; // CXXConstructorDecl Value
struct _ast4154
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4153>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4155
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4153>, _str458>, _ast4156>>>> {
}; // ParmVarDecl obj
struct _ast4157
    : FunctionProtoType<_ast114, Pack<_ast184, _ast4156>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4158 : PointerType<_ast4149> {}; // PointerType v8::String::Value *
struct _ast4159
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str499>, _ast4160>>,
              Pack<>>>,
          _ast4158>> {}; // CXXDestructorDecl ~Value
struct _ast4160 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast4161
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str55>, _ast4162>>,
              Pack<>>>,
          _ast4158> {}; // CXXMethodDecl operator*
struct _ast4162 : FunctionProtoType<_ast3966, Pack<>, UnqualifiedType> {
}; // FunctionProtoType uint16_t *()
struct _ast4163
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str55>, _ast4021>>,
              Pack<>>>,
          _ast4164> {}; // CXXMethodDecl operator*
struct _ast4164 : PointerType<_ast4165> {
}; // PointerType const v8::String::Value *
struct _ast4165 : ConstQualifiedType<_ast4149> {
}; // RecordType const v8::String::Value
struct _ast4166
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str165>, _ast2938>>,
              Pack<>>>,
          _ast4164> {}; // CXXMethodDecl length
struct _ast4167
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str48>, _ast4170>>,
              Pack<_ast4168>>>,
          _ast4158>>,
      DeclContext<Pack<_ast4168>> {}; // CXXConstructorDecl Value
struct _ast4168
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4167>, _str62>, _ast4169>>>> {
}; // ParmVarDecl
struct _ast4169 : LValueReferenceType<ReferenceType<_ast4165>> {
}; // LValueReferenceType const v8::String::Value &
struct _ast4170 : FunctionProtoType<_ast114, Pack<_ast4169>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::String::Value &)
struct _ast4171
    : DeclContext<Pack<_ast4172>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4148>, _str64>, _ast4170>>,
              Pack<_ast4172>>>,
          _ast4158> {}; // CXXMethodDecl operator=
struct _ast4172
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast4171>, _str62>, _ast4169>>>> {
}; // ParmVarDecl
struct _ast4173
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast91>, _str42>, _ast92>,
                     None>,
          None> {}; // CXXRecordDecl Symbol
struct _ast4174
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast91>, _str22>, _ast4175>>,
              Pack<>>>,
          _ast4177> {}; // CXXMethodDecl Name
struct _ast4175 : FunctionProtoType<_ast4176, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast4177 : PointerType<_ast4178> {}; // PointerType const v8::Symbol *
struct _ast4178 : ConstQualifiedType<_ast92> {}; // RecordType const v8::Symbol
struct _ast4179
    : DeclContext<Pack<_ast4180, _ast4181>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str61>, _ast4183>>,
          Pack<_ast4180, _ast4181>>> {}; // CXXMethodDecl New
struct _ast4180
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4179>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4181
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4179>, _str500>, _ast4182>>>> {
}; // ParmVarDecl name
struct _ast4183
    : FunctionProtoType<_ast4184, Pack<_ast184, _ast4182>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4185
    : DeclContext<Pack<_ast4186, _ast4187>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str501>, _ast4189>>,
          Pack<_ast4186, _ast4187>>> {}; // CXXMethodDecl For
struct _ast4186
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4185>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4187
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4185>, _str500>, _ast4188>>>> {
}; // ParmVarDecl name
struct _ast4189
    : FunctionProtoType<_ast4190, Pack<_ast184, _ast4188>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4191
    : DeclContext<Pack<_ast4192, _ast4193>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str502>, _ast4195>>,
          Pack<_ast4192, _ast4193>>> {}; // CXXMethodDecl ForApi
struct _ast4192
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4191>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4193
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4191>, _str500>, _ast4194>>>> {
}; // ParmVarDecl name
struct _ast4195
    : FunctionProtoType<_ast4196, Pack<_ast184, _ast4194>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4197
    : DeclContext<Pack<_ast4198>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str503>, _ast4199>>,
          Pack<_ast4198>>> {}; // CXXMethodDecl GetAsyncIterator
struct _ast4198
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4197>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4199 : FunctionProtoType<_ast4200, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4201
    : DeclContext<Pack<_ast4202>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str504>, _ast4203>>,
          Pack<_ast4202>>> {}; // CXXMethodDecl GetHasInstance
struct _ast4202
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4201>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4203 : FunctionProtoType<_ast4204, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4205
    : DeclContext<Pack<_ast4206>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str505>, _ast4207>>,
          Pack<_ast4206>>> {}; // CXXMethodDecl GetIsConcatSpreadable
struct _ast4206
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4205>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4207 : FunctionProtoType<_ast4208, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4209
    : DeclContext<Pack<_ast4210>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str506>, _ast4211>>,
          Pack<_ast4210>>> {}; // CXXMethodDecl GetIterator
struct _ast4210
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4209>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4211 : FunctionProtoType<_ast4212, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4213
    : DeclContext<Pack<_ast4214>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str507>, _ast4215>>,
          Pack<_ast4214>>> {}; // CXXMethodDecl GetMatch
struct _ast4214
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4213>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4215 : FunctionProtoType<_ast4216, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4217
    : DeclContext<Pack<_ast4218>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str508>, _ast4219>>,
          Pack<_ast4218>>> {}; // CXXMethodDecl GetReplace
struct _ast4218
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4217>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4219 : FunctionProtoType<_ast4220, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4221
    : DeclContext<Pack<_ast4222>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str509>, _ast4223>>,
          Pack<_ast4222>>> {}; // CXXMethodDecl GetSearch
struct _ast4222
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4221>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4223 : FunctionProtoType<_ast4224, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4225
    : DeclContext<Pack<_ast4226>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str510>, _ast4227>>,
          Pack<_ast4226>>> {}; // CXXMethodDecl GetSplit
struct _ast4226
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4225>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4227 : FunctionProtoType<_ast4228, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4229
    : DeclContext<Pack<_ast4230>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str511>, _ast4231>>,
          Pack<_ast4230>>> {}; // CXXMethodDecl GetToPrimitive
struct _ast4230
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4229>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4231 : FunctionProtoType<_ast4232, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4233
    : DeclContext<Pack<_ast4234>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str512>, _ast4235>>,
          Pack<_ast4234>>> {}; // CXXMethodDecl GetToStringTag
struct _ast4234
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4233>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4235 : FunctionProtoType<_ast4236, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4237
    : DeclContext<Pack<_ast4238>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str513>, _ast4239>>,
          Pack<_ast4238>>> {}; // CXXMethodDecl GetUnscopables
struct _ast4238
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4237>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4239 : FunctionProtoType<_ast4240, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4241
    : DeclContext<Pack<_ast4242>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast91>, _str58>, _ast4243>>,
          Pack<_ast4242>>> {}; // CXXMethodDecl Cast
struct _ast4242
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4241>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast4243 : FunctionProtoType<_ast4244, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Symbol *(v8::Value *)
struct _ast4244 : PointerType<_ast92> {}; // PointerType v8::Symbol *
struct _ast4245
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast97>, _str45>, _ast98>,
                     None>,
          None> {}; // CXXRecordDecl Private
struct _ast4246
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast97>, _str22>, _ast4247>>,
              Pack<>>>,
          _ast4249> {}; // CXXMethodDecl Name
struct _ast4247 : FunctionProtoType<_ast4248, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast4249 : PointerType<_ast4250> {}; // PointerType const v8::Private *
struct _ast4250 : ConstQualifiedType<_ast98> {}; // RecordType const v8::Private
struct _ast4251
    : DeclContext<Pack<_ast4252, _ast4253>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast97>, _str61>, _ast4255>>,
          Pack<_ast4252, _ast4253>>> {}; // CXXMethodDecl New
struct _ast4252
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4251>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4253
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4251>, _str500>, _ast4254>>>> {
}; // ParmVarDecl name
struct _ast4255
    : FunctionProtoType<_ast4256, Pack<_ast184, _ast4254>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4257
    : DeclContext<Pack<_ast4258, _ast4259>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast97>, _str502>, _ast4261>>,
          Pack<_ast4258, _ast4259>>> {}; // CXXMethodDecl ForApi
struct _ast4258
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4257>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4259
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4257>, _str500>, _ast4260>>>> {
}; // ParmVarDecl name
struct _ast4261
    : FunctionProtoType<_ast4262, Pack<_ast184, _ast4260>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4263
    : DeclContext<Pack<_ast4264>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast97>, _str58>, _ast4266>>,
          Pack<_ast4264>>> {}; // CXXMethodDecl Cast
struct _ast4264
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4263>, _str130>, _ast4265>>>> {
};                                       // ParmVarDecl data
struct _ast4265 : PointerType<_ast6> {}; // PointerType v8::Data *
struct _ast4266 : FunctionProtoType<_ast4267, Pack<_ast4265>, UnqualifiedType> {
}; // FunctionProtoType v8::Private *(v8::Data *)
struct _ast4267 : PointerType<_ast98> {}; // PointerType v8::Private *
struct _ast4268
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast53>, _str23>, _ast54>,
                     None>,
          None> {}; // CXXRecordDecl Number
struct _ast4269
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast53>, _str48>, _ast4270>>,
              Pack<>>>,
          _ast4271> {}; // CXXMethodDecl Value
struct _ast4270 : FunctionProtoType<_ast3643, Pack<>, ConstQualifiedType> {
};                                          // FunctionProtoType double () const
struct _ast4271 : PointerType<_ast4272> {}; // PointerType const v8::Number *
struct _ast4272 : ConstQualifiedType<_ast54> {}; // RecordType const v8::Number
struct _ast4273
    : DeclContext<Pack<_ast4274, _ast4275>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast53>, _str61>, _ast4276>>,
          Pack<_ast4274, _ast4275>>> {}; // CXXMethodDecl New
struct _ast4274
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4273>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4275
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4273>, _str153>, _ast3643>>>> {
}; // ParmVarDecl value
struct _ast4276
    : FunctionProtoType<_ast4277, Pack<_ast184, _ast3643>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Number> (v8::Isolate *, double)
struct _ast4278
    : DeclContext<Pack<_ast4279>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast53>, _str58>, _ast4280>>,
          Pack<_ast4279>>> {}; // CXXMethodDecl Cast
struct _ast4279
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4278>, _str458>, _ast3925>>>> {
}; // ParmVarDecl obj
struct _ast4280 : FunctionProtoType<_ast4281, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::Number *(v8::Value *)
struct _ast4281 : PointerType<_ast54> {}; // PointerType v8::Number *
struct _ast4282
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast37>, _str19>, _ast38>,
                     None>,
          None> {}; // CXXRecordDecl Integer
struct _ast4283
    : DeclContext<Pack<_ast4284, _ast4285>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast37>, _str61>, _ast4287>>,
          Pack<_ast4284, _ast4285>>> {}; // CXXMethodDecl New
struct _ast4284
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4283>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4285
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4283>, _str153>, _ast4286>>>> {
}; // ParmVarDecl value
struct _ast4286 : ABIIndependentSizeType<SignedIntegerType, 4> {
}; // TypedefType int32_t
struct _ast4287
    : FunctionProtoType<_ast4288, Pack<_ast184, _ast4286>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, int32_t)
struct _ast4289
    : DeclContext<Pack<_ast4290, _ast4291>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast37>, _str514>, _ast4292>>,
          Pack<_ast4290, _ast4291>>> {}; // CXXMethodDecl NewFromUnsigned
struct _ast4290
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4289>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4291
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4289>, _str153>, _ast3359>>>> {
}; // ParmVarDecl value
struct _ast4292
    : FunctionProtoType<_ast4293, Pack<_ast184, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _ast4294
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast37>, _str48>, _ast4295>>,
              Pack<>>>,
          _ast4297> {}; // CXXMethodDecl Value
struct _ast4295 : FunctionProtoType<_ast4296, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType int64_t () const
struct _ast4296 : ABIIndependentSizeType<SignedIntegerType, 8> {
};                                          // TypedefType int64_t
struct _ast4297 : PointerType<_ast4298> {}; // PointerType const v8::Integer *
struct _ast4298 : ConstQualifiedType<_ast38> {}; // RecordType const v8::Integer
struct _ast4299
    : DeclContext<Pack<_ast4300>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast37>, _str58>, _ast4301>>,
          Pack<_ast4300>>> {}; // CXXMethodDecl Cast
struct _ast4300
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4299>, _str458>, _ast3925>>>> {
}; // ParmVarDecl obj
struct _ast4301 : FunctionProtoType<_ast4302, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::Integer *(v8::Value *)
struct _ast4302 : PointerType<_ast38> {}; // PointerType v8::Integer *
struct _ast4303
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast35>, _str18>, _ast36>,
                     None>,
          None> {}; // CXXRecordDecl Int32
struct _ast4304
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast35>, _str48>, _ast4305>>,
              Pack<>>>,
          _ast4306> {}; // CXXMethodDecl Value
struct _ast4305 : FunctionProtoType<_ast4286, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType int32_t () const
struct _ast4306 : PointerType<_ast4307> {}; // PointerType const v8::Int32 *
struct _ast4307 : ConstQualifiedType<_ast36> {}; // RecordType const v8::Int32
struct _ast4308
    : DeclContext<Pack<_ast4309>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast35>, _str58>, _ast4310>>,
          Pack<_ast4309>>> {}; // CXXMethodDecl Cast
struct _ast4309
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4308>, _str458>, _ast3925>>>> {
}; // ParmVarDecl obj
struct _ast4310 : FunctionProtoType<_ast4311, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::Int32 *(v8::Value *)
struct _ast4311 : PointerType<_ast36> {}; // PointerType v8::Int32 *
struct _ast4312
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast99>, _str46>, _ast100>,
                     None>,
          None> {}; // CXXRecordDecl Uint32
struct _ast4313
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast99>, _str48>, _ast3728>>,
              Pack<>>>,
          _ast4314> {};                     // CXXMethodDecl Value
struct _ast4314 : PointerType<_ast4315> {}; // PointerType const v8::Uint32 *
struct _ast4315 : ConstQualifiedType<_ast100> {}; // RecordType const v8::Uint32
struct _ast4316
    : DeclContext<Pack<_ast4317>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast99>, _str58>, _ast4318>>,
          Pack<_ast4317>>> {}; // CXXMethodDecl Cast
struct _ast4317
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4316>, _str458>, _ast3925>>>> {
}; // ParmVarDecl obj
struct _ast4318 : FunctionProtoType<_ast4319, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::Uint32 *(v8::Value *)
struct _ast4319 : PointerType<_ast100> {}; // PointerType v8::Uint32 *
struct _ast4320
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast15>, _str8>, _ast16>,
                     None>,
          None> {}; // CXXRecordDecl BigInt
struct _ast4321
    : DeclContext<Pack<_ast4322, _ast4323>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast15>, _str61>, _ast4324>>,
          Pack<_ast4322, _ast4323>>> {}; // CXXMethodDecl New
struct _ast4322
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4321>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4323
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4321>, _str153>, _ast4296>>>> {
}; // ParmVarDecl value
struct _ast4324
    : FunctionProtoType<_ast4325, Pack<_ast184, _ast4296>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ast4326
    : DeclContext<Pack<_ast4327, _ast4328>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast15>, _str514>, _ast4329>>,
          Pack<_ast4327, _ast4328>>> {}; // CXXMethodDecl NewFromUnsigned
struct _ast4327
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4326>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4328
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4326>, _str153>, _ast3639>>>> {
}; // ParmVarDecl value
struct _ast4329
    : FunctionProtoType<_ast4330, Pack<_ast184, _ast3639>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _ast4331
    : DeclContext<Pack<_ast4332, _ast4334, _ast4335, _ast4336>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast15>, _str518>, _ast4339>>,
          Pack<_ast4332, _ast4334, _ast4335, _ast4336>>> {
}; // CXXMethodDecl NewFromWords
struct _ast4332
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4331>, _str229>, _ast4333>>>> {
}; // ParmVarDecl context
struct _ast4334
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4331>, _str515>, _ast1901>>>> {
}; // ParmVarDecl sign_bit
struct _ast4335
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4331>, _str516>, _ast1901>>>> {
}; // ParmVarDecl word_count
struct _ast4336
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4331>, _str517>, _ast4337>>>> {
};                                          // ParmVarDecl words
struct _ast4337 : PointerType<_ast4338> {}; // PointerType const uint64_t *
struct _ast4338 : ConstQualifiedType<_ast3639> {}; // TypedefType const uint64_t
struct _ast4339
    : FunctionProtoType<_ast4340,
                        Pack<_ast4333, _ast1901, _ast1901, _ast4337>,
                        UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int,
   // const uint64_t *)
struct _ast4341
    : DeclContext<Pack<_ast4342>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast15>, _str520>, _ast4344>>,
              Pack<_ast4342>>>,
          _ast4345> {}; // CXXMethodDecl Uint64Value
struct _ast4342
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4341>, _str519>, _ast4343>>>> {
};                                         // ParmVarDecl lossless
struct _ast4343 : PointerType<_ast129> {}; // PointerType bool *
struct _ast4344
    : FunctionProtoType<_ast3639, Pack<_ast4343>, ConstQualifiedType> {
}; // FunctionProtoType uint64_t (bool *) const
struct _ast4345 : PointerType<_ast4346> {}; // PointerType const v8::BigInt *
struct _ast4346 : ConstQualifiedType<_ast16> {}; // RecordType const v8::BigInt
struct _ast4347
    : DeclContext<Pack<_ast4348>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast15>, _str521>, _ast4349>>,
              Pack<_ast4348>>>,
          _ast4345> {}; // CXXMethodDecl Int64Value
struct _ast4348
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4347>, _str519>, _ast4343>>>> {
}; // ParmVarDecl lossless
struct _ast4349
    : FunctionProtoType<_ast4296, Pack<_ast4343>, ConstQualifiedType> {
}; // FunctionProtoType int64_t (bool *) const
struct _ast4350
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast15>, _str522>, _ast2938>>,
              Pack<>>>,
          _ast4345> {}; // CXXMethodDecl WordCount
struct _ast4351
    : DeclContext<Pack<_ast4352, _ast4353, _ast4354>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast15>, _str523>, _ast4355>>,
              Pack<_ast4352, _ast4353, _ast4354>>>,
          _ast4345> {}; // CXXMethodDecl ToWordsArray
struct _ast4352
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4351>, _str515>, _ast3985>>>> {
}; // ParmVarDecl sign_bit
struct _ast4353
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4351>, _str516>, _ast3985>>>> {
}; // ParmVarDecl word_count
struct _ast4354
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4351>, _str517>, _ast3737>>>> {
}; // ParmVarDecl words
struct _ast4355 : FunctionProtoType<_ast114,
                                    Pack<_ast3985, _ast3985, _ast3737>,
                                    ConstQualifiedType> {
}; // FunctionProtoType void (int *, int *, uint64_t *) const
struct _ast4356
    : DeclContext<Pack<_ast4357>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast15>, _str58>, _ast4358>>,
          Pack<_ast4357>>> {}; // CXXMethodDecl Cast
struct _ast4357
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4356>, _str458>, _ast3925>>>> {
}; // ParmVarDecl obj
struct _ast4358 : FunctionProtoType<_ast4359, Pack<_ast3925>, UnqualifiedType> {
}; // FunctionProtoType v8::BigInt *(v8::Value *)
struct _ast4359 : PointerType<_ast16> {}; // PointerType v8::BigInt *
struct _ast4365
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str524>, _ast4366>>> {
}; // TypedefDecl AccessorGetterCallback
struct _ast4366 : TypedefType<_ast4365> {
}; // TypedefType v8::AccessorGetterCallback
struct _ast4367
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str525>, _ast4368>>> {
}; // TypedefDecl AccessorNameGetterCallback
struct _ast4368 : TypedefType<_ast4367> {
}; // TypedefType v8::AccessorNameGetterCallback
struct _ast4369
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str526>, _ast4370>>> {
}; // TypedefDecl AccessorSetterCallback
struct _ast4370 : TypedefType<_ast4369> {
}; // TypedefType v8::AccessorSetterCallback
struct _ast4371
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str527>, _ast4372>>> {
}; // TypedefDecl AccessorNameSetterCallback
struct _ast4372 : TypedefType<_ast4371> {
}; // TypedefType v8::AccessorNameSetterCallback
struct _ast4401
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast57>, _str25>, _ast58>,
                     None>,
          None> {}; // CXXRecordDecl Object
struct _ast4402
    : DeclContext<Pack<_ast4403, _ast4405>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str114>, _ast4407>>,
              Pack<_ast4403, _ast4405>>>,
          _ast4408> {}; // CXXMethodDecl Set
struct _ast4403
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4402>, _str528>, _ast4404>>>> {
}; // ParmVarDecl key
struct _ast4405
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4402>, _str153>, _ast4406>>>> {
}; // ParmVarDecl value
struct _ast4407
    : FunctionProtoType<_ast129, Pack<_ast4404, _ast4406>, UnqualifiedType> {
}; // FunctionProtoType bool (Local<v8::Value>, Local<v8::Value>)
struct _ast4408 : PointerType<_ast58> {}; // PointerType v8::Object *
struct _ast4409
    : DeclContext<Pack<_ast4410, _ast4412, _ast4414>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str114>, _ast4416>>,
              Pack<_ast4410, _ast4412, _ast4414>>>,
          _ast4408> {}; // CXXMethodDecl Set
struct _ast4410
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4409>, _str229>, _ast4411>>>> {
}; // ParmVarDecl context
struct _ast4412
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4409>, _str528>, _ast4413>>>> {
}; // ParmVarDecl key
struct _ast4414
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4409>, _str153>, _ast4415>>>> {
}; // ParmVarDecl value
struct _ast4416 : FunctionProtoType<_ast4417,
                                    Pack<_ast4411, _ast4413, _ast4415>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>,
   // Local<v8::Value>)
struct _ast4418
    : DeclContext<Pack<_ast4419, _ast4420>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str114>, _ast4422>>,
              Pack<_ast4419, _ast4420>>>,
          _ast4408> {}; // CXXMethodDecl Set
struct _ast4419
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4418>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4420
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4418>, _str153>, _ast4421>>>> {
}; // ParmVarDecl value
struct _ast4422
    : FunctionProtoType<_ast129, Pack<_ast3359, _ast4421>, UnqualifiedType> {
}; // FunctionProtoType bool (uint32_t, Local<v8::Value>)
struct _ast4423
    : DeclContext<Pack<_ast4424, _ast4426, _ast4427>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str114>, _ast4429>>,
              Pack<_ast4424, _ast4426, _ast4427>>>,
          _ast4408> {}; // CXXMethodDecl Set
struct _ast4424
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4423>, _str229>, _ast4425>>>> {
}; // ParmVarDecl context
struct _ast4426
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4423>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4427
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4423>, _str153>, _ast4428>>>> {
}; // ParmVarDecl value
struct _ast4429 : FunctionProtoType<_ast4430,
                                    Pack<_ast4425, _ast3359, _ast4428>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t,
   // Local<v8::Value>)
struct _ast4431
    : DeclContext<Pack<_ast4432, _ast4434, _ast4436>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str529>, _ast4438>>,
              Pack<_ast4432, _ast4434, _ast4436>>>,
          _ast4408> {}; // CXXMethodDecl CreateDataProperty
struct _ast4432
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4431>, _str229>, _ast4433>>>> {
}; // ParmVarDecl context
struct _ast4434
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4431>, _str528>, _ast4435>>>> {
}; // ParmVarDecl key
struct _ast4436
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4431>, _str153>, _ast4437>>>> {
}; // ParmVarDecl value
struct _ast4438 : FunctionProtoType<_ast4439,
                                    Pack<_ast4433, _ast4435, _ast4437>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>,
   // Local<v8::Value>)
struct _ast4440
    : DeclContext<Pack<_ast4441, _ast4443, _ast4444>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str529>, _ast4446>>,
              Pack<_ast4441, _ast4443, _ast4444>>>,
          _ast4408> {}; // CXXMethodDecl CreateDataProperty
struct _ast4441
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4440>, _str229>, _ast4442>>>> {
}; // ParmVarDecl context
struct _ast4443
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4440>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4444
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4440>, _str153>, _ast4445>>>> {
}; // ParmVarDecl value
struct _ast4446 : FunctionProtoType<_ast4447,
                                    Pack<_ast4442, _ast3359, _ast4445>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t,
   // Local<v8::Value>)
struct _ast4448
    : DeclContext<Pack<_ast4449, _ast4451, _ast4453, _ast4455>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str531>, _ast4457>>,
              Pack<_ast4449, _ast4451, _ast4453, _ast4455>>>,
          _ast4408> {}; // CXXMethodDecl DefineOwnProperty
struct _ast4449
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4448>, _str229>, _ast4450>>>> {
}; // ParmVarDecl context
struct _ast4451
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4448>, _str528>, _ast4452>>>> {
}; // ParmVarDecl key
struct _ast4453
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4448>, _str153>, _ast4454>>>> {
}; // ParmVarDecl value
struct _ast4455
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4448>, _str530>, _ast4456>>>> {
}; // ParmVarDecl attributes
struct _ast4456 : EnumType<_ast4360, _ast1901> {
}; // EnumType v8::PropertyAttribute
struct _ast4457
    : FunctionProtoType<_ast4458,
                        Pack<_ast4450, _ast4452, _ast4454, _ast4456>,
                        UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>,
   // Local<v8::Value>, v8::PropertyAttribute)
struct _ast4459
    : DeclContext<Pack<_ast4460, _ast4462, _ast4464>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str533>, _ast4466>>,
              Pack<_ast4460, _ast4462, _ast4464>>>,
          _ast4408> {}; // CXXMethodDecl DefineProperty
struct _ast4460
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4459>, _str229>, _ast4461>>>> {
}; // ParmVarDecl context
struct _ast4462
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4459>, _str528>, _ast4463>>>> {
}; // ParmVarDecl key
struct _ast4464
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4459>, _str532>, _ast4465>>>> {
}; // ParmVarDecl descriptor
struct _ast4465 : LValueReferenceType<ReferenceType<_ast70>> {
}; // LValueReferenceType v8::PropertyDescriptor &
struct _ast4466 : FunctionProtoType<_ast4467,
                                    Pack<_ast4461, _ast4463, _ast4465>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>,
   // v8::PropertyDescriptor &)
struct _ast4468
    : DeclContext<Pack<_ast4469>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str78>, _ast4471>>,
              Pack<_ast4469>>>,
          _ast4408> {}; // CXXMethodDecl Get
struct _ast4469
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4468>, _str528>, _ast4470>>>> {
}; // ParmVarDecl key
struct _ast4471 : FunctionProtoType<_ast4472, Pack<_ast4470>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast4473
    : DeclContext<Pack<_ast4474, _ast4476>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str78>, _ast4478>>,
              Pack<_ast4474, _ast4476>>>,
          _ast4408> {}; // CXXMethodDecl Get
struct _ast4474
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4473>, _str229>, _ast4475>>>> {
}; // ParmVarDecl context
struct _ast4476
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4473>, _str528>, _ast4477>>>> {
}; // ParmVarDecl key
struct _ast4478
    : FunctionProtoType<_ast4479, Pack<_ast4475, _ast4477>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Value>)
struct _ast4480
    : DeclContext<Pack<_ast4481>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str78>, _ast4482>>,
              Pack<_ast4481>>>,
          _ast4408> {}; // CXXMethodDecl Get
struct _ast4481
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4480>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4482 : FunctionProtoType<_ast4483, Pack<_ast3359>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (uint32_t)
struct _ast4484
    : DeclContext<Pack<_ast4485, _ast4487>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str78>, _ast4488>>,
              Pack<_ast4485, _ast4487>>>,
          _ast4408> {}; // CXXMethodDecl Get
struct _ast4485
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4484>, _str229>, _ast4486>>>> {
}; // ParmVarDecl context
struct _ast4487
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4484>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4488
    : FunctionProtoType<_ast4489, Pack<_ast4486, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _ast4490
    : DeclContext<Pack<_ast4491, _ast4493>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str534>, _ast4495>>,
              Pack<_ast4491, _ast4493>>>,
          _ast4408> {}; // CXXMethodDecl GetPropertyAttributes
struct _ast4491
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4490>, _str229>, _ast4492>>>> {
}; // ParmVarDecl context
struct _ast4493
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4490>, _str528>, _ast4494>>>> {
}; // ParmVarDecl key
struct _ast4495
    : FunctionProtoType<_ast4496, Pack<_ast4492, _ast4494>, UnqualifiedType> {
}; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>,
   // Local<v8::Value>)
struct _ast4497
    : DeclContext<Pack<_ast4498, _ast4500>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str535>, _ast4502>>,
              Pack<_ast4498, _ast4500>>>,
          _ast4408> {}; // CXXMethodDecl GetOwnPropertyDescriptor
struct _ast4498
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4497>, _str229>, _ast4499>>>> {
}; // ParmVarDecl context
struct _ast4500
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4497>, _str528>, _ast4501>>>> {
}; // ParmVarDecl key
struct _ast4502
    : FunctionProtoType<_ast4503, Pack<_ast4499, _ast4501>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Name>)
struct _ast4504
    : DeclContext<Pack<_ast4505, _ast4507>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str536>, _ast4509>>,
              Pack<_ast4505, _ast4507>>>,
          _ast4408> {}; // CXXMethodDecl Has
struct _ast4505
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4504>, _str229>, _ast4506>>>> {
}; // ParmVarDecl context
struct _ast4507
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4504>, _str528>, _ast4508>>>> {
}; // ParmVarDecl key
struct _ast4509
    : FunctionProtoType<_ast4510, Pack<_ast4506, _ast4508>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4511
    : DeclContext<Pack<_ast4512, _ast4514>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str537>, _ast4516>>,
              Pack<_ast4512, _ast4514>>>,
          _ast4408> {}; // CXXMethodDecl Delete
struct _ast4512
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4511>, _str229>, _ast4513>>>> {
}; // ParmVarDecl context
struct _ast4514
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4511>, _str528>, _ast4515>>>> {
}; // ParmVarDecl key
struct _ast4516
    : FunctionProtoType<_ast4517, Pack<_ast4513, _ast4515>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4518
    : DeclContext<Pack<_ast4519, _ast4521>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str536>, _ast4522>>,
              Pack<_ast4519, _ast4521>>>,
          _ast4408> {}; // CXXMethodDecl Has
struct _ast4519
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4518>, _str229>, _ast4520>>>> {
}; // ParmVarDecl context
struct _ast4521
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4518>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4522
    : FunctionProtoType<_ast4523, Pack<_ast4520, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4524
    : DeclContext<Pack<_ast4525, _ast4527>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str537>, _ast4528>>,
              Pack<_ast4525, _ast4527>>>,
          _ast4408> {}; // CXXMethodDecl Delete
struct _ast4525
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4524>, _str229>, _ast4526>>>> {
}; // ParmVarDecl context
struct _ast4527
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4524>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4528
    : FunctionProtoType<_ast4529, Pack<_ast4526, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4530
    : DeclContext<Pack<_ast4531,
                       _ast4533,
                       _ast4535,
                       _ast4536,
                       _ast4537,
                       _ast4539,
                       _ast4541,
                       _ast4542,
                       _ast4544>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str544>, _ast4545>>,
              Pack<_ast4531,
                   _ast4533,
                   _ast4535,
                   _ast4536,
                   _ast4537,
                   _ast4539,
                   _ast4541,
                   _ast4542,
                   _ast4544>>>,
          _ast4408> {}; // CXXMethodDecl SetAccessor
struct _ast4531
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str229>, _ast4532>>>> {
}; // ParmVarDecl context
struct _ast4533
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str500>, _ast4534>>>> {
}; // ParmVarDecl name
struct _ast4535
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str538>, _ast4368>>>> {
}; // ParmVarDecl getter
struct _ast4536
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str539>, _ast4372>>>> {
}; // ParmVarDecl setter
struct _ast4537
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str130>, _ast4538>>>> {
}; // ParmVarDecl data
struct _ast4539
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str540>, _ast4540>>>> {
};                                                 // ParmVarDecl settings
struct _ast4540 : EnumType<_ast4373, _ast1901> {}; // EnumType v8::AccessControl
struct _ast4541
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast4542
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast4543 : EnumType<_ast4385, _ast1901> {
}; // EnumType v8::SideEffectType
struct _ast4544
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4530>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast4545 : FunctionProtoType<_ast4546,
                                    Pack<_ast4532,
                                         _ast4534,
                                         _ast4368,
                                         _ast4372,
                                         _ast4538,
                                         _ast4540,
                                         _ast4456,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>,
   // v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback,
   // MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute,
   // v8::SideEffectType, v8::SideEffectType)
struct _ast4547
    : DeclContext<Pack<_ast4548, _ast4550, _ast4552, _ast4554, _ast4555>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str545>, _ast4556>>,
              Pack<_ast4548, _ast4550, _ast4552, _ast4554, _ast4555>>>,
          _ast4408> {}; // CXXMethodDecl SetAccessorProperty
struct _ast4548
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4547>, _str500>, _ast4549>>>> {
}; // ParmVarDecl name
struct _ast4550
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4547>, _str538>, _ast4551>>>> {
}; // ParmVarDecl getter
struct _ast4552
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4547>, _str539>, _ast4553>>>> {
}; // ParmVarDecl setter
struct _ast4554
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4547>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast4555
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4547>, _str540>, _ast4540>>>> {
}; // ParmVarDecl settings
struct _ast4556
    : FunctionProtoType<_ast114,
                        Pack<_ast4549, _ast4551, _ast4553, _ast4456, _ast4540>,
                        UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, Local<v8::Function>,
   // Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _ast4557
    : DeclContext<Pack<_ast4558,
                       _ast4560,
                       _ast4562,
                       _ast4563,
                       _ast4564,
                       _ast4566,
                       _ast4567,
                       _ast4568>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str546>, _ast4569>>,
              Pack<_ast4558,
                   _ast4560,
                   _ast4562,
                   _ast4563,
                   _ast4564,
                   _ast4566,
                   _ast4567,
                   _ast4568>>>,
          _ast4408> {}; // CXXMethodDecl SetNativeDataProperty
struct _ast4558
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str229>, _ast4559>>>> {
}; // ParmVarDecl context
struct _ast4560
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str500>, _ast4561>>>> {
}; // ParmVarDecl name
struct _ast4562
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str538>, _ast4368>>>> {
}; // ParmVarDecl getter
struct _ast4563
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str539>, _ast4372>>>> {
}; // ParmVarDecl setter
struct _ast4564
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str130>, _ast4565>>>> {
}; // ParmVarDecl data
struct _ast4566
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str530>, _ast4456>>>> {
}; // ParmVarDecl attributes
struct _ast4567
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast4568
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4557>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast4569 : FunctionProtoType<_ast4570,
                                    Pack<_ast4559,
                                         _ast4561,
                                         _ast4368,
                                         _ast4372,
                                         _ast4565,
                                         _ast4456,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>,
   // v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback,
   // Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType,
   // v8::SideEffectType)
struct _ast4571
    : DeclContext<Pack<_ast4572,
                       _ast4574,
                       _ast4576,
                       _ast4577,
                       _ast4579,
                       _ast4580,
                       _ast4581>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str547>, _ast4582>>,
              Pack<_ast4572,
                   _ast4574,
                   _ast4576,
                   _ast4577,
                   _ast4579,
                   _ast4580,
                   _ast4581>>>,
          _ast4408> {}; // CXXMethodDecl SetLazyDataProperty
struct _ast4572
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str229>, _ast4573>>>> {
}; // ParmVarDecl context
struct _ast4574
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str500>, _ast4575>>>> {
}; // ParmVarDecl name
struct _ast4576
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str538>, _ast4368>>>> {
}; // ParmVarDecl getter
struct _ast4577
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str130>, _ast4578>>>> {
}; // ParmVarDecl data
struct _ast4579
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str530>, _ast4456>>>> {
}; // ParmVarDecl attributes
struct _ast4580
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast4581
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4571>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast4582 : FunctionProtoType<_ast4583,
                                    Pack<_ast4573,
                                         _ast4575,
                                         _ast4368,
                                         _ast4578,
                                         _ast4456,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>,
   // v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute,
   // v8::SideEffectType, v8::SideEffectType)
struct _ast4584
    : DeclContext<Pack<_ast4585, _ast4587>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str548>, _ast4589>>,
              Pack<_ast4585, _ast4587>>>,
          _ast4408> {}; // CXXMethodDecl HasPrivate
struct _ast4585
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4584>, _str229>, _ast4586>>>> {
}; // ParmVarDecl context
struct _ast4587
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4584>, _str528>, _ast4588>>>> {
}; // ParmVarDecl key
struct _ast4589
    : FunctionProtoType<_ast4590, Pack<_ast4586, _ast4588>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4591
    : DeclContext<Pack<_ast4592, _ast4594, _ast4596>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str549>, _ast4598>>,
              Pack<_ast4592, _ast4594, _ast4596>>>,
          _ast4408> {}; // CXXMethodDecl SetPrivate
struct _ast4592
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4591>, _str229>, _ast4593>>>> {
}; // ParmVarDecl context
struct _ast4594
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4591>, _str528>, _ast4595>>>> {
}; // ParmVarDecl key
struct _ast4596
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4591>, _str153>, _ast4597>>>> {
}; // ParmVarDecl value
struct _ast4598 : FunctionProtoType<_ast4599,
                                    Pack<_ast4593, _ast4595, _ast4597>,
                                    UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>,
   // Local<v8::Value>)
struct _ast4600
    : DeclContext<Pack<_ast4601, _ast4603>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str550>, _ast4605>>,
              Pack<_ast4601, _ast4603>>>,
          _ast4408> {}; // CXXMethodDecl DeletePrivate
struct _ast4601
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4600>, _str229>, _ast4602>>>> {
}; // ParmVarDecl context
struct _ast4603
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4600>, _str528>, _ast4604>>>> {
}; // ParmVarDecl key
struct _ast4605
    : FunctionProtoType<_ast4606, Pack<_ast4602, _ast4604>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4607
    : DeclContext<Pack<_ast4608, _ast4610>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str551>, _ast4612>>,
              Pack<_ast4608, _ast4610>>>,
          _ast4408> {}; // CXXMethodDecl GetPrivate
struct _ast4608
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4607>, _str229>, _ast4609>>>> {
}; // ParmVarDecl context
struct _ast4610
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4607>, _str528>, _ast4611>>>> {
}; // ParmVarDecl key
struct _ast4612
    : FunctionProtoType<_ast4613, Pack<_ast4609, _ast4611>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Private>)
struct _ast4614
    : DeclContext<Pack<_ast4615>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str552>, _ast4617>>,
              Pack<_ast4615>>>,
          _ast4408> {}; // CXXMethodDecl GetPropertyNames
struct _ast4615
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4614>, _str229>, _ast4616>>>> {
}; // ParmVarDecl context
struct _ast4617 : FunctionProtoType<_ast4618, Pack<_ast4616>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4619
    : DeclContext<Pack<_ast4620, _ast4622, _ast4624, _ast4626, _ast4628>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str552>, _ast4630>>,
              Pack<_ast4620, _ast4622, _ast4624, _ast4626, _ast4628>>>,
          _ast4408> {}; // CXXMethodDecl GetPropertyNames
struct _ast4620
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4619>, _str229>, _ast4621>>>> {
}; // ParmVarDecl context
struct _ast4622
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4619>, _str358>, _ast4623>>>> {
}; // ParmVarDecl mode
struct _ast4623 : EnumType<_ast4389, _ast1901> {
}; // EnumType v8::KeyCollectionMode
struct _ast4624
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4619>, _str553>, _ast4625>>>> {
}; // ParmVarDecl property_filter
struct _ast4625 : EnumType<_ast4378, _ast1901> {
}; // EnumType v8::PropertyFilter
struct _ast4626
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4619>, _str554>, _ast4627>>>> {
};                                                 // ParmVarDecl index_filter
struct _ast4627 : EnumType<_ast4392, _ast1901> {}; // EnumType v8::IndexFilter
struct _ast4628
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4619>, _str555>, _ast4629>>>> {
}; // ParmVarDecl key_conversion
struct _ast4629 : EnumType<_ast4395, _ast1901> {
}; // EnumType v8::KeyConversionMode
struct _ast4630
    : FunctionProtoType<_ast4631,
                        Pack<_ast4621, _ast4623, _ast4625, _ast4627, _ast4629>,
                        UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>,
   // v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter,
   // v8::KeyConversionMode)
struct _ast4632
    : DeclContext<Pack<_ast4633>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str556>, _ast4635>>,
              Pack<_ast4633>>>,
          _ast4408> {}; // CXXMethodDecl GetOwnPropertyNames
struct _ast4633
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4632>, _str229>, _ast4634>>>> {
}; // ParmVarDecl context
struct _ast4635 : FunctionProtoType<_ast4636, Pack<_ast4634>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4637
    : DeclContext<Pack<_ast4638, _ast4640, _ast4641>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str556>, _ast4642>>,
              Pack<_ast4638, _ast4640, _ast4641>>>,
          _ast4408> {}; // CXXMethodDecl GetOwnPropertyNames
struct _ast4638
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4637>, _str229>, _ast4639>>>> {
}; // ParmVarDecl context
struct _ast4640
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4637>, _str557>, _ast4625>>>> {
}; // ParmVarDecl filter
struct _ast4641
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4637>, _str555>, _ast4629>>>> {
}; // ParmVarDecl key_conversion
struct _ast4642 : FunctionProtoType<_ast4643,
                                    Pack<_ast4639, _ast4625, _ast4629>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>,
   // v8::PropertyFilter, v8::KeyConversionMode)
struct _ast4644
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str558>, _ast4645>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl GetPrototype
struct _ast4645 : FunctionProtoType<_ast4646, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast4647
    : DeclContext<Pack<_ast4648, _ast4650>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str560>, _ast4652>>,
              Pack<_ast4648, _ast4650>>>,
          _ast4408> {}; // CXXMethodDecl SetPrototype
struct _ast4648
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4647>, _str229>, _ast4649>>>> {
}; // ParmVarDecl context
struct _ast4650
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4647>, _str559>, _ast4651>>>> {
}; // ParmVarDecl prototype
struct _ast4652
    : FunctionProtoType<_ast4653, Pack<_ast4649, _ast4651>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4654
    : DeclContext<Pack<_ast4655>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str562>, _ast4657>>,
              Pack<_ast4655>>>,
          _ast4408> {}; // CXXMethodDecl FindInstanceInPrototypeChain
struct _ast4655
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4654>, _str561>, _ast4656>>>> {
}; // ParmVarDecl tmpl
struct _ast4657 : FunctionProtoType<_ast4658, Pack<_ast4656>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _ast4659
    : DeclContext<Pack<_ast4660>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str563>, _ast4662>>,
              Pack<_ast4660>>>,
          _ast4408> {}; // CXXMethodDecl ObjectProtoToString
struct _ast4660
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4659>, _str229>, _ast4661>>>> {
}; // ParmVarDecl context
struct _ast4662 : FunctionProtoType<_ast4663, Pack<_ast4661>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>)
struct _ast4664
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str564>, _ast4665>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl GetConstructorName
struct _ast4665 : FunctionProtoType<_ast4666, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::String> ()
struct _ast4667
    : DeclContext<Pack<_ast4668, _ast4670>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str566>, _ast4672>>,
              Pack<_ast4668, _ast4670>>>,
          _ast4408> {}; // CXXMethodDecl SetIntegrityLevel
struct _ast4668
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4667>, _str229>, _ast4669>>>> {
}; // ParmVarDecl context
struct _ast4670
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4667>, _str565>, _ast4671>>>> {
}; // ParmVarDecl level
struct _ast4671 : EnumType<_ast4398, _ast1901> {
}; // EnumType v8::IntegrityLevel
struct _ast4672
    : FunctionProtoType<_ast4673, Pack<_ast4669, _ast4671>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _ast4674
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str567>, _ast3071>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl InternalFieldCount
struct _ast4675
    : DeclContext<Pack<_ast4676>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str567>, _ast4680>>,
          Pack<_ast4676>>> {}; // CXXMethodDecl InternalFieldCount
struct _ast4676
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4675>, _str338>, _ast4677>>>> {
}; // ParmVarDecl object
struct _ast4677 : LValueReferenceType<ReferenceType<_ast4678>> {
}; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4678 : ConstQualifiedType<_ast4679> {
}; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4680 : FunctionProtoType<_ast1901, Pack<_ast4677>, UnqualifiedType> {
}; // FunctionProtoType int (const PersistentBase<v8::Object> &)
struct _ast4681
    : DeclContext<Pack<_ast4682>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str567>, _ast4686>>,
          Pack<_ast4682>>> {}; // CXXMethodDecl InternalFieldCount
struct _ast4682
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4681>, _str338>, _ast4683>>>> {
}; // ParmVarDecl object
struct _ast4683 : LValueReferenceType<ReferenceType<_ast4684>> {
}; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4684 : ConstQualifiedType<_ast4685> {
}; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4686 : FunctionProtoType<_ast1901, Pack<_ast4683>, UnqualifiedType> {
}; // FunctionProtoType int (const TracedGlobal<v8::Object> &)
struct _ast4687
    : DeclContext<Pack<_ast4688>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str128>, _ast4689>>,
              Pack<_ast4688>>>,
          _ast4408> {}; // CXXMethodDecl GetInternalField
struct _ast4688
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4687>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast4689 : FunctionProtoType<_ast4690, Pack<_ast1901>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (int)
struct _ast4691
    : DeclContext<Pack<_ast4692, _ast4693>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str568>, _ast4695>>,
              Pack<_ast4692, _ast4693>>>,
          _ast4408> {}; // CXXMethodDecl SetInternalField
struct _ast4692
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4691>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast4693
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4691>, _str153>, _ast4694>>>> {
}; // ParmVarDecl value
struct _ast4695
    : FunctionProtoType<_ast114, Pack<_ast1901, _ast4694>, UnqualifiedType> {
}; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast4696
    : DeclContext<Pack<_ast4697>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str569>, _ast4698>>,
              Pack<_ast4697>>>,
          _ast4408> {}; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4697
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4696>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast4698 : FunctionProtoType<_ast2223, Pack<_ast1901>, UnqualifiedType> {
}; // FunctionProtoType void *(int)
struct _ast4699
    : DeclContext<Pack<_ast4700, _ast4704>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str569>, _ast4705>>,
          Pack<_ast4700, _ast4704>>> {
}; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4700
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4699>, _str338>, _ast4701>>>> {
}; // ParmVarDecl object
struct _ast4701 : LValueReferenceType<ReferenceType<_ast4702>> {
}; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4702 : ConstQualifiedType<_ast4703> {
}; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4704
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4699>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast4705
    : FunctionProtoType<_ast2223, Pack<_ast4701, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType void *(const PersistentBase<v8::Object> &, int)
struct _ast4706
    : DeclContext<Pack<_ast4707, _ast4711>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str569>, _ast4712>>,
          Pack<_ast4707, _ast4711>>> {
}; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4707
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4706>, _str338>, _ast4708>>>> {
}; // ParmVarDecl object
struct _ast4708 : LValueReferenceType<ReferenceType<_ast4709>> {
}; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4709 : ConstQualifiedType<_ast4710> {
}; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4711
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4706>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast4712
    : FunctionProtoType<_ast2223, Pack<_ast4708, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType void *(const TracedGlobal<v8::Object> &, int)
struct _ast4713
    : DeclContext<Pack<_ast4714, _ast4715>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str570>, _ast4716>>,
              Pack<_ast4714, _ast4715>>>,
          _ast4408> {}; // CXXMethodDecl SetAlignedPointerInInternalField
struct _ast4714
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4713>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast4715
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4713>, _str153>, _ast2223>>>> {
}; // ParmVarDecl value
struct _ast4716
    : FunctionProtoType<_ast114, Pack<_ast1901, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (int, void *)
struct _ast4717
    : DeclContext<Pack<_ast4718, _ast4719, _ast4721>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str574>, _ast4723>>,
              Pack<_ast4718, _ast4719, _ast4721>>>,
          _ast4408> {}; // CXXMethodDecl SetAlignedPointerInInternalFields
struct _ast4718
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4717>, _str571>, _ast1901>>>> {
}; // ParmVarDecl argc
struct _ast4719
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4717>, _str572>, _ast4720>>>> {
}; // ParmVarDecl indices
struct _ast4721
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4717>, _str573>, _ast4722>>>> {
}; // ParmVarDecl values
struct _ast4723 : FunctionProtoType<_ast114,
                                    Pack<_ast1901, _ast4720, _ast4722>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (int, int *, void **)
struct _ast4724
    : DeclContext<Pack<_ast4725, _ast4727>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str575>, _ast4729>>,
              Pack<_ast4725, _ast4727>>>,
          _ast4408> {}; // CXXMethodDecl HasOwnProperty
struct _ast4725
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4724>, _str229>, _ast4726>>>> {
}; // ParmVarDecl context
struct _ast4727
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4724>, _str528>, _ast4728>>>> {
}; // ParmVarDecl key
struct _ast4729
    : FunctionProtoType<_ast4730, Pack<_ast4726, _ast4728>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4731
    : DeclContext<Pack<_ast4732, _ast4734>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str575>, _ast4735>>,
              Pack<_ast4732, _ast4734>>>,
          _ast4408> {}; // CXXMethodDecl HasOwnProperty
struct _ast4732
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4731>, _str229>, _ast4733>>>> {
}; // ParmVarDecl context
struct _ast4734
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4731>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4735
    : FunctionProtoType<_ast4736, Pack<_ast4733, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4737
    : DeclContext<Pack<_ast4738, _ast4740>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str576>, _ast4742>>,
              Pack<_ast4738, _ast4740>>>,
          _ast4408> {}; // CXXMethodDecl HasRealNamedProperty
struct _ast4738
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4737>, _str229>, _ast4739>>>> {
}; // ParmVarDecl context
struct _ast4740
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4737>, _str528>, _ast4741>>>> {
}; // ParmVarDecl key
struct _ast4742
    : FunctionProtoType<_ast4743, Pack<_ast4739, _ast4741>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4744
    : DeclContext<Pack<_ast4745, _ast4747>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str577>, _ast4748>>,
              Pack<_ast4745, _ast4747>>>,
          _ast4408> {}; // CXXMethodDecl HasRealIndexedProperty
struct _ast4745
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4744>, _str229>, _ast4746>>>> {
}; // ParmVarDecl context
struct _ast4747
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4744>, _str127>, _ast3359>>>> {
}; // ParmVarDecl index
struct _ast4748
    : FunctionProtoType<_ast4749, Pack<_ast4746, _ast3359>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4750
    : DeclContext<Pack<_ast4751, _ast4753>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str578>, _ast4755>>,
              Pack<_ast4751, _ast4753>>>,
          _ast4408> {}; // CXXMethodDecl HasRealNamedCallbackProperty
struct _ast4751
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4750>, _str229>, _ast4752>>>> {
}; // ParmVarDecl context
struct _ast4753
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4750>, _str528>, _ast4754>>>> {
}; // ParmVarDecl key
struct _ast4755
    : FunctionProtoType<_ast4756, Pack<_ast4752, _ast4754>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4757
    : DeclContext<Pack<_ast4758, _ast4760>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str579>, _ast4762>>,
              Pack<_ast4758, _ast4760>>>,
          _ast4408> {}; // CXXMethodDecl GetRealNamedPropertyInPrototypeChain
struct _ast4758
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4757>, _str229>, _ast4759>>>> {
}; // ParmVarDecl context
struct _ast4760
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4757>, _str528>, _ast4761>>>> {
}; // ParmVarDecl key
struct _ast4762
    : FunctionProtoType<_ast4763, Pack<_ast4759, _ast4761>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Name>)
struct _ast4764
    : DeclContext<Pack<_ast4765, _ast4767>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str580>, _ast4769>>,
              Pack<_ast4765, _ast4767>>>,
          _ast4408> {
}; // CXXMethodDecl GetRealNamedPropertyAttributesInPrototypeChain
struct _ast4765
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4764>, _str229>, _ast4766>>>> {
}; // ParmVarDecl context
struct _ast4767
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4764>, _str528>, _ast4768>>>> {
}; // ParmVarDecl key
struct _ast4769
    : FunctionProtoType<_ast4770, Pack<_ast4766, _ast4768>, UnqualifiedType> {
}; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>,
   // Local<v8::Name>)
struct _ast4771
    : DeclContext<Pack<_ast4772, _ast4774>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str581>, _ast4776>>,
              Pack<_ast4772, _ast4774>>>,
          _ast4408> {}; // CXXMethodDecl GetRealNamedProperty
struct _ast4772
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4771>, _str229>, _ast4773>>>> {
}; // ParmVarDecl context
struct _ast4774
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4771>, _str528>, _ast4775>>>> {
}; // ParmVarDecl key
struct _ast4776
    : FunctionProtoType<_ast4777, Pack<_ast4773, _ast4775>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Name>)
struct _ast4778
    : DeclContext<Pack<_ast4779, _ast4781>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str582>, _ast4783>>,
              Pack<_ast4779, _ast4781>>>,
          _ast4408> {}; // CXXMethodDecl GetRealNamedPropertyAttributes
struct _ast4779
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4778>, _str229>, _ast4780>>>> {
}; // ParmVarDecl context
struct _ast4781
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4778>, _str528>, _ast4782>>>> {
}; // ParmVarDecl key
struct _ast4783
    : FunctionProtoType<_ast4784, Pack<_ast4780, _ast4782>, UnqualifiedType> {
}; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>,
   // Local<v8::Name>)
struct _ast4785
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str583>, _ast3256>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl HasNamedLookupInterceptor
struct _ast4786
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str584>, _ast3256>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl HasIndexedLookupInterceptor
struct _ast4787
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str227>, _ast3071>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl GetIdentityHash
struct _ast4788
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str585>, _ast4789>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl Clone
struct _ast4789 : FunctionProtoType<_ast4790, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> ()
struct _ast4791
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str586>, _ast4792>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl CreationContext
struct _ast4792 : FunctionProtoType<_ast4793, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> ()
struct _ast4794
    : DeclContext<Pack<_ast4795>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str586>, _ast4799>>,
          Pack<_ast4795>>> {}; // CXXMethodDecl CreationContext
struct _ast4795
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4794>, _str338>, _ast4796>>>> {
}; // ParmVarDecl object
struct _ast4796 : LValueReferenceType<ReferenceType<_ast4797>> {
}; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4797 : ConstQualifiedType<_ast4798> {
}; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4799 : FunctionProtoType<_ast4800, Pack<_ast4796>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _ast4801
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str587>, _ast3256>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl IsCallable
struct _ast4802
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str305>, _ast3256>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl IsConstructor
struct _ast4803
    : DeclContext<Pack<_ast4804, _ast4806, _ast4808, _ast4809>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str590>, _ast4811>>,
              Pack<_ast4804, _ast4806, _ast4808, _ast4809>>>,
          _ast4408> {}; // CXXMethodDecl CallAsFunction
struct _ast4804
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4803>, _str229>, _ast4805>>>> {
}; // ParmVarDecl context
struct _ast4806
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4803>, _str588>, _ast4807>>>> {
}; // ParmVarDecl recv
struct _ast4808
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4803>, _str571>, _ast1901>>>> {
}; // ParmVarDecl argc
struct _ast4809
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4803>, _str589>, _ast4810>>>> {
}; // ParmVarDecl argv
struct _ast4811
    : FunctionProtoType<_ast4812,
                        Pack<_ast4805, _ast4807, _ast1901, _ast4810>,
                        UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Value>, int, Local<v8::Value> *)
struct _ast4813
    : DeclContext<Pack<_ast4814, _ast4816, _ast4817>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str591>, _ast4819>>,
              Pack<_ast4814, _ast4816, _ast4817>>>,
          _ast4408> {}; // CXXMethodDecl CallAsConstructor
struct _ast4814
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4813>, _str229>, _ast4815>>>> {
}; // ParmVarDecl context
struct _ast4816
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4813>, _str571>, _ast1901>>>> {
}; // ParmVarDecl argc
struct _ast4817
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4813>, _str589>, _ast4818>>>> {
}; // ParmVarDecl argv
struct _ast4819 : FunctionProtoType<_ast4820,
                                    Pack<_ast4815, _ast1901, _ast4818>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, int,
   // Local<v8::Value> *)
struct _ast4821
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str125>, _ast4822>>,
              Pack<>>>,
          _ast4408> {}; // CXXMethodDecl GetIsolate
struct _ast4822 : FunctionProtoType<_ast184, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate *()
struct _ast4823
    : DeclContext<Pack<_ast4824>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast57>, _str593>, _ast4825>>,
              Pack<_ast4824>>>,
          _ast4408> {}; // CXXMethodDecl PreviewEntries
struct _ast4824
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4823>, _str592>, _ast4343>>>> {
}; // ParmVarDecl is_key_value
struct _ast4825 : FunctionProtoType<_ast4826, Pack<_ast4343>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Array> (bool *)
struct _ast4827
    : DeclContext<Pack<_ast4828>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str61>, _ast4829>>,
          Pack<_ast4828>>> {}; // CXXMethodDecl New
struct _ast4828
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4827>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4829 : FunctionProtoType<_ast4830, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> (v8::Isolate *)
struct _ast4831
    : DeclContext<Pack<_ast4832, _ast4833, _ast4835, _ast4838, _ast4841>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str61>, _ast4842>>,
          Pack<_ast4832, _ast4833, _ast4835, _ast4838, _ast4841>>> {
}; // CXXMethodDecl New
struct _ast4832
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4831>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4833
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4831>, _str594>, _ast4834>>>> {
}; // ParmVarDecl prototype_or_null
struct _ast4835
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4831>, _str595>, _ast4836>>>> {
};                                          // ParmVarDecl names
struct _ast4836 : PointerType<_ast4837> {}; // PointerType Local<v8::Name> *
struct _ast4838
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4831>, _str573>, _ast4839>>>> {
};                                          // ParmVarDecl values
struct _ast4839 : PointerType<_ast4840> {}; // PointerType Local<v8::Value> *
struct _ast4841
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4831>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast4842
    : FunctionProtoType<_ast4843,
                        Pack<_ast184, _ast4834, _ast4836, _ast4839, _ast3254>,
                        UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> (v8::Isolate *, Local<v8::Value>,
   // Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _ast4844
    : DeclContext<Pack<_ast4845>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast57>, _str58>, _ast4846>>,
          Pack<_ast4845>>> {}; // CXXMethodDecl Cast
struct _ast4845
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4844>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast4846 : FunctionProtoType<_ast4408, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Object *(v8::Value *)
struct _ast4847
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast11>, _str6>, _ast12>,
                     None>,
          None> {}; // CXXRecordDecl Array
struct _ast4848
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast11>, _str166>, _ast3728>>,
              Pack<>>>,
          _ast4849> {};                     // CXXMethodDecl Length
struct _ast4849 : PointerType<_ast4850> {}; // PointerType const v8::Array *
struct _ast4850 : ConstQualifiedType<_ast12> {}; // RecordType const v8::Array
struct _ast4851
    : DeclContext<Pack<_ast4852, _ast4853>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast11>, _str61>, _ast4854>>,
          Pack<_ast4852, _ast4853>>> {}; // CXXMethodDecl New
struct _ast4852
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4851>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4853
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4851>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast4854
    : FunctionProtoType<_ast4855, Pack<_ast184, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Array> (v8::Isolate *, int)
struct _ast4856
    : DeclContext<Pack<_ast4857, _ast4858, _ast4861>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast11>, _str61>, _ast4862>>,
          Pack<_ast4857, _ast4858, _ast4861>>> {}; // CXXMethodDecl New
struct _ast4857
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4856>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4858
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4856>, _str596>, _ast4859>>>> {
};                                          // ParmVarDecl elements
struct _ast4859 : PointerType<_ast4860> {}; // PointerType Local<v8::Value> *
struct _ast4861
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4856>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast4862 : FunctionProtoType<_ast4863,
                                    Pack<_ast184, _ast4859, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Array> (v8::Isolate *, Local<v8::Value> *,
   // size_t)
struct _ast4864
    : DeclContext<Pack<_ast4865>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast11>, _str58>, _ast4866>>,
          Pack<_ast4865>>> {}; // CXXMethodDecl Cast
struct _ast4865
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4864>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast4866 : FunctionProtoType<_ast4867, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Array *(v8::Value *)
struct _ast4867 : PointerType<_ast12> {}; // PointerType v8::Array *
struct _ast4868
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str597>, _ast4869>,
                     Pack<>>,
          Pack<_ast4870>>,
      DeclContext<Pack<_ast4871,
                       _ast4872,
                       _ast4875,
                       _ast4877,
                       _ast4884,
                       _ast4893,
                       _ast4900,
                       _ast4907,
                       _ast4910,
                       _ast4914>> {}; // CXXRecordDecl Map
struct _ast4869 : StructOrClassRecordType<RecordType<_ast4868>> {
}; // RecordType v8::Map
struct _ast4870 : CXXBaseSpecifier<_ast58> {
}; // CXXBaseSpecifier Record v8::Object
struct _ast4871
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast4868>, _str597>, _ast4869>,
                     None>,
          None> {}; // CXXRecordDecl Map
struct _ast4872
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str598>, _ast4027>>,
              Pack<>>>,
          _ast4873> {};                     // CXXMethodDecl Size
struct _ast4873 : PointerType<_ast4874> {}; // PointerType const v8::Map *
struct _ast4874 : ConstQualifiedType<_ast4869> {}; // RecordType const v8::Map
struct _ast4875
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str53>, _ast113>>,
              Pack<>>>,
          _ast4876> {};                     // CXXMethodDecl Clear
struct _ast4876 : PointerType<_ast4869> {}; // PointerType v8::Map *
struct _ast4877
    : DeclContext<Pack<_ast4878, _ast4880>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str78>, _ast4882>>,
              Pack<_ast4878, _ast4880>>>,
          _ast4876> {}; // CXXMethodDecl Get
struct _ast4878
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4877>, _str229>, _ast4879>>>> {
}; // ParmVarDecl context
struct _ast4880
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4877>, _str528>, _ast4881>>>> {
}; // ParmVarDecl key
struct _ast4882
    : FunctionProtoType<_ast4883, Pack<_ast4879, _ast4881>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Value>)
struct _ast4884
    : DeclContext<Pack<_ast4885, _ast4887, _ast4889>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str114>, _ast4891>>,
              Pack<_ast4885, _ast4887, _ast4889>>>,
          _ast4876> {}; // CXXMethodDecl Set
struct _ast4885
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4884>, _str229>, _ast4886>>>> {
}; // ParmVarDecl context
struct _ast4887
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4884>, _str528>, _ast4888>>>> {
}; // ParmVarDecl key
struct _ast4889
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4884>, _str153>, _ast4890>>>> {
}; // ParmVarDecl value
struct _ast4891 : FunctionProtoType<_ast4892,
                                    Pack<_ast4886, _ast4888, _ast4890>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Map> (Local<v8::Context>,
   // Local<v8::Value>, Local<v8::Value>)
struct _ast4893
    : DeclContext<Pack<_ast4894, _ast4896>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str536>, _ast4898>>,
              Pack<_ast4894, _ast4896>>>,
          _ast4876> {}; // CXXMethodDecl Has
struct _ast4894
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4893>, _str229>, _ast4895>>>> {
}; // ParmVarDecl context
struct _ast4896
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4893>, _str528>, _ast4897>>>> {
}; // ParmVarDecl key
struct _ast4898
    : FunctionProtoType<_ast4899, Pack<_ast4895, _ast4897>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4900
    : DeclContext<Pack<_ast4901, _ast4903>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str537>, _ast4905>>,
              Pack<_ast4901, _ast4903>>>,
          _ast4876> {}; // CXXMethodDecl Delete
struct _ast4901
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4900>, _str229>, _ast4902>>>> {
}; // ParmVarDecl context
struct _ast4903
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4900>, _str528>, _ast4904>>>> {
}; // ParmVarDecl key
struct _ast4905
    : FunctionProtoType<_ast4906, Pack<_ast4902, _ast4904>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4907
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4868>, _str599>, _ast4908>>,
              Pack<>>>,
          _ast4873> {}; // CXXMethodDecl AsArray
struct _ast4908 : FunctionProtoType<_ast4909, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Array> () const
struct _ast4910
    : DeclContext<Pack<_ast4911>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast4868>, _str61>, _ast4912>>,
          Pack<_ast4911>>> {}; // CXXMethodDecl New
struct _ast4911
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4910>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4912 : FunctionProtoType<_ast4913, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Map> (v8::Isolate *)
struct _ast4914
    : DeclContext<Pack<_ast4915>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast4868>, _str58>, _ast4916>>,
          Pack<_ast4915>>> {}; // CXXMethodDecl Cast
struct _ast4915
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4914>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast4916 : FunctionProtoType<_ast4876, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Map *(v8::Value *)
struct _ast4917
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str114>, _ast4918>,
                     Pack<>>,
          Pack<_ast4919>>,
      DeclContext<Pack<_ast4920,
                       _ast4921,
                       _ast4924,
                       _ast4926,
                       _ast4933,
                       _ast4940,
                       _ast4947,
                       _ast4950,
                       _ast4954>> {}; // CXXRecordDecl Set
struct _ast4918 : StructOrClassRecordType<RecordType<_ast4917>> {
}; // RecordType v8::Set
struct _ast4919 : CXXBaseSpecifier<_ast58> {
}; // CXXBaseSpecifier Record v8::Object
struct _ast4920
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast4917>, _str114>, _ast4918>,
                     None>,
          None> {}; // CXXRecordDecl Set
struct _ast4921
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4917>, _str598>, _ast4027>>,
              Pack<>>>,
          _ast4922> {};                     // CXXMethodDecl Size
struct _ast4922 : PointerType<_ast4923> {}; // PointerType const v8::Set *
struct _ast4923 : ConstQualifiedType<_ast4918> {}; // RecordType const v8::Set
struct _ast4924
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4917>, _str53>, _ast113>>,
              Pack<>>>,
          _ast4925> {};                     // CXXMethodDecl Clear
struct _ast4925 : PointerType<_ast4918> {}; // PointerType v8::Set *
struct _ast4926
    : DeclContext<Pack<_ast4927, _ast4929>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4917>, _str600>, _ast4931>>,
              Pack<_ast4927, _ast4929>>>,
          _ast4925> {}; // CXXMethodDecl Add
struct _ast4927
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4926>, _str229>, _ast4928>>>> {
}; // ParmVarDecl context
struct _ast4929
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4926>, _str528>, _ast4930>>>> {
}; // ParmVarDecl key
struct _ast4931
    : FunctionProtoType<_ast4932, Pack<_ast4928, _ast4930>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Set> (Local<v8::Context>,
   // Local<v8::Value>)
struct _ast4933
    : DeclContext<Pack<_ast4934, _ast4936>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4917>, _str536>, _ast4938>>,
              Pack<_ast4934, _ast4936>>>,
          _ast4925> {}; // CXXMethodDecl Has
struct _ast4934
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4933>, _str229>, _ast4935>>>> {
}; // ParmVarDecl context
struct _ast4936
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4933>, _str528>, _ast4937>>>> {
}; // ParmVarDecl key
struct _ast4938
    : FunctionProtoType<_ast4939, Pack<_ast4935, _ast4937>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4940
    : DeclContext<Pack<_ast4941, _ast4943>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4917>, _str537>, _ast4945>>,
              Pack<_ast4941, _ast4943>>>,
          _ast4925> {}; // CXXMethodDecl Delete
struct _ast4941
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4940>, _str229>, _ast4942>>>> {
}; // ParmVarDecl context
struct _ast4943
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4940>, _str528>, _ast4944>>>> {
}; // ParmVarDecl key
struct _ast4945
    : FunctionProtoType<_ast4946, Pack<_ast4942, _ast4944>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4947
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast4917>, _str599>, _ast4948>>,
              Pack<>>>,
          _ast4922> {}; // CXXMethodDecl AsArray
struct _ast4948 : FunctionProtoType<_ast4949, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Array> () const
struct _ast4950
    : DeclContext<Pack<_ast4951>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast4917>, _str61>, _ast4952>>,
          Pack<_ast4951>>> {}; // CXXMethodDecl New
struct _ast4951
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4950>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast4952 : FunctionProtoType<_ast4953, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Set> (v8::Isolate *)
struct _ast4954
    : DeclContext<Pack<_ast4955>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast4917>, _str58>, _ast4956>>,
          Pack<_ast4955>>> {}; // CXXMethodDecl Cast
struct _ast4955
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4954>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast4956 : FunctionProtoType<_ast4925, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Set *(v8::Value *)
struct _ast4958
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2285>, _str106>, _ast2286>,
                     None>,
          None> {}; // CXXRecordDecl ReturnValue
struct _ast4961
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str601>, _ast4966>>,
              Pack<_ast4962>>>,
          _ast4967>>,
      DeclContext<Pack<_ast4962>> {}; // CXXConstructorDecl ReturnValue<T>
struct _ast4962
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4961>, _str51>, _ast4963>>>> {
}; // ParmVarDecl that
struct _ast4963 : LValueReferenceType<ReferenceType<_ast4964>> {
}; // LValueReferenceType const ReturnValue<S> &
struct _ast4964 : ConstQualifiedType<_ast4965> {
}; // TemplateSpecializationType const ReturnValue<S>
struct _ast4966 : FunctionProtoType<_ast114, Pack<_ast4963>, UnqualifiedType> {
}; // FunctionProtoType void (const ReturnValue<S> &)
struct _ast4967 : PointerType<_ast2286> {}; // PointerType ReturnValue<T> *
struct _ast4970
    : DeclContext<Pack<_ast4971>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast4975>>,
              Pack<_ast4971>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4971
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4970>, _str113>, _ast4972>>>> {
}; // ParmVarDecl handle
struct _ast4972 : LValueReferenceType<ReferenceType<_ast4973>> {
}; // LValueReferenceType const Global<S> &
struct _ast4973 : ConstQualifiedType<_ast4974> {
}; // TemplateSpecializationType const Global<S>
struct _ast4975 : FunctionProtoType<_ast114, Pack<_ast4972>, UnqualifiedType> {
}; // FunctionProtoType void (const Global<S> &)
struct _ast4978
    : DeclContext<Pack<_ast4979>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast4983>>,
              Pack<_ast4979>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4979
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4978>, _str113>, _ast4980>>>> {
}; // ParmVarDecl handle
struct _ast4980 : LValueReferenceType<ReferenceType<_ast4981>> {
}; // LValueReferenceType const TracedGlobal<S> &
struct _ast4981 : ConstQualifiedType<_ast4982> {
}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast4983 : FunctionProtoType<_ast114, Pack<_ast4980>, UnqualifiedType> {
}; // FunctionProtoType void (const TracedGlobal<S> &)
struct _ast4986
    : DeclContext<Pack<_ast4987>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast4990>>,
              Pack<_ast4987>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4987
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4986>, _str113>, _ast4988>>>> {
}; // ParmVarDecl handle
struct _ast4988 : ConstQualifiedType<_ast4989> {
}; // TemplateSpecializationType const Local<S>
struct _ast4990 : FunctionProtoType<_ast114, Pack<_ast4988>, UnqualifiedType> {
}; // FunctionProtoType void (const Local<S>)
struct _ast4991
    : DeclContext<Pack<_ast4992>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast3633>>,
              Pack<_ast4992>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4992
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4991>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast4993
    : DeclContext<Pack<_ast4994>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast3644>>,
              Pack<_ast4994>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4994
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4993>, _str224>, _ast3643>>>> {
}; // ParmVarDecl i
struct _ast4995
    : DeclContext<Pack<_ast4996>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast4997>>,
              Pack<_ast4996>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4996
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4995>, _str224>, _ast4286>>>> {
}; // ParmVarDecl i
struct _ast4997 : FunctionProtoType<_ast114, Pack<_ast4286>, UnqualifiedType> {
}; // FunctionProtoType void (int32_t)
struct _ast4998
    : DeclContext<Pack<_ast4999>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast3636>>,
              Pack<_ast4999>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast4999
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4998>, _str224>, _ast3359>>>> {
}; // ParmVarDecl i
struct _ast5000
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str602>, _ast113>>,
              Pack<>>>,
          _ast4967> {}; // CXXMethodDecl SetNull
struct _ast5001
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str603>, _ast113>>,
              Pack<>>>,
          _ast4967> {}; // CXXMethodDecl SetUndefined
struct _ast5002
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str604>, _ast113>>,
              Pack<>>>,
          _ast4967> {}; // CXXMethodDecl SetEmptyString
struct _ast5003
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast5004> {}; // CXXMethodDecl GetIsolate
struct _ast5004 : PointerType<_ast5005> {
}; // PointerType const ReturnValue<T> *
struct _ast5005 : ConstQualifiedType<_ast2286> {
}; // InjectedClassNameType const ReturnValue<T>
struct _ast5008
    : DeclContext<Pack<_ast5009>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str114>, _ast5012>>,
              Pack<_ast5009>>>,
          _ast4967> {}; // CXXMethodDecl Set
struct _ast5009
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5008>, _str605>, _ast5010>>>> {
};                                          // ParmVarDecl whatever
struct _ast5010 : PointerType<_ast5011> {}; // PointerType S *
struct _ast5012 : FunctionProtoType<_ast114, Pack<_ast5010>, UnqualifiedType> {
}; // FunctionProtoType void (S *)
struct _ast5013
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2285>, _str78>, _ast5014>>,
              Pack<>>>,
          _ast5004> {}; // CXXMethodDecl Get
struct _ast5014 : FunctionProtoType<_ast5015, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5017
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2267>, _str102>, _ast2268>,
                     None>,
          None> {}; // CXXRecordDecl FunctionCallbackInfo
struct _ast5018
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str166>, _ast2938>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl Length
struct _ast5019 : PointerType<_ast5020> {
}; // PointerType const FunctionCallbackInfo<T> *
struct _ast5020 : ConstQualifiedType<_ast2268> {
}; // InjectedClassNameType const FunctionCallbackInfo<T>
struct _ast5021
    : DeclContext<Pack<_ast5022>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str606>, _ast5023>>,
              Pack<_ast5022>>>,
          _ast5019> {}; // CXXMethodDecl operator[]
struct _ast5022
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5021>, _str224>, _ast1901>>>> {
}; // ParmVarDecl i
struct _ast5023
    : FunctionProtoType<_ast5024, Pack<_ast1901>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> (int) const
struct _ast5025
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str607>, _ast5026>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl This
struct _ast5026 : FunctionProtoType<_ast5027, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Object> () const
struct _ast5028
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str608>, _ast5029>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl Holder
struct _ast5029 : FunctionProtoType<_ast5030, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Object> () const
struct _ast5031
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str609>, _ast5032>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl NewTarget
struct _ast5032 : FunctionProtoType<_ast5033, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5034
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str610>, _ast128>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl IsConstructCall
struct _ast5035
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str3>, _ast5036>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl Data
struct _ast5036 : FunctionProtoType<_ast5037, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5038
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl GetIsolate
struct _ast5039
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str611>, _ast5040>>,
              Pack<>>>,
          _ast5019> {}; // CXXMethodDecl GetReturnValue
struct _ast5040 : FunctionProtoType<_ast5041, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType ReturnValue<T> () const
struct _ast5042
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str612>, _ast2435>>> {
}; // VarDecl kArgsLength
struct _ast5043
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str613>, _ast2435>>> {
}; // VarDecl kHolderIndex
struct _ast5044
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str614>, _ast2435>>> {
}; // VarDecl kIsolateIndex
struct _ast5045
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str615>, _ast2435>>> {
}; // VarDecl kReturnValueDefaultValueIndex
struct _ast5046
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str616>, _ast2435>>> {
}; // VarDecl kReturnValueIndex
struct _ast5047
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str617>, _ast2435>>> {
}; // VarDecl kDataIndex
struct _ast5048
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str618>, _ast2435>>> {
}; // VarDecl kNewTargetIndex
struct _ast5049
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2267>, _str620>, _ast5053>>,
              Pack<_ast5050, _ast5051, _ast5052>>>,
          _ast5054>>,
      DeclContext<Pack<_ast5050, _ast5051, _ast5052>> {
}; // CXXConstructorDecl FunctionCallbackInfo<T>
struct _ast5050
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5049>, _str619>, _ast2873>>>> {
}; // ParmVarDecl implicit_args
struct _ast5051
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5049>, _str573>, _ast2873>>>> {
}; // ParmVarDecl values
struct _ast5052
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5049>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast5053 : FunctionProtoType<_ast114,
                                    Pack<_ast2873, _ast2873, _ast1901>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (internal::Address *, internal::Address *, int)
struct _ast5054 : PointerType<_ast2268> {
}; // PointerType FunctionCallbackInfo<T> *
struct _ast5055
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str621>, _ast2873>>> {
}; // FieldDecl implicit_args_
struct _ast5056
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str622>, _ast2873>>> {
}; // FieldDecl values_
struct _ast5057
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2267>, _str497>, _ast1901>>> {
}; // FieldDecl length_
struct _ast5059
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast2272>, _str103>, _ast2273>,
                     None>,
          None> {}; // CXXRecordDecl PropertyCallbackInfo
struct _ast5060
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str125>, _ast2461>>,
              Pack<>>>,
          _ast5061> {}; // CXXMethodDecl GetIsolate
struct _ast5061 : PointerType<_ast5062> {
}; // PointerType const PropertyCallbackInfo<T> *
struct _ast5062 : ConstQualifiedType<_ast2273> {
}; // InjectedClassNameType const PropertyCallbackInfo<T>
struct _ast5063
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str3>, _ast5064>>,
              Pack<>>>,
          _ast5061> {}; // CXXMethodDecl Data
struct _ast5064 : FunctionProtoType<_ast5065, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5066
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str607>, _ast5067>>,
              Pack<>>>,
          _ast5061> {}; // CXXMethodDecl This
struct _ast5067 : FunctionProtoType<_ast5068, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Object> () const
struct _ast5069
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str608>, _ast5070>>,
              Pack<>>>,
          _ast5061> {}; // CXXMethodDecl Holder
struct _ast5070 : FunctionProtoType<_ast5071, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Object> () const
struct _ast5072
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str611>, _ast5073>>,
              Pack<>>>,
          _ast5061> {}; // CXXMethodDecl GetReturnValue
struct _ast5073 : FunctionProtoType<_ast5074, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType ReturnValue<T> () const
struct _ast5075
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str623>, _ast128>>,
              Pack<>>>,
          _ast5061> {}; // CXXMethodDecl ShouldThrowOnError
struct _ast5076
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str612>, _ast2435>>> {
}; // VarDecl kArgsLength
struct _ast5077
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str624>, _ast2435>>> {
}; // VarDecl kShouldThrowOnErrorIndex
struct _ast5078
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str613>, _ast2435>>> {
}; // VarDecl kHolderIndex
struct _ast5079
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str614>, _ast2435>>> {
}; // VarDecl kIsolateIndex
struct _ast5080
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str615>, _ast2435>>> {
}; // VarDecl kReturnValueDefaultValueIndex
struct _ast5081
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str616>, _ast2435>>> {
}; // VarDecl kReturnValueIndex
struct _ast5082
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str617>, _ast2435>>> {
}; // VarDecl kDataIndex
struct _ast5083
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str625>, _ast2435>>> {
}; // VarDecl kThisIndex
struct _ast5084
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast2272>, _str627>, _ast5086>>,
              Pack<_ast5085>>>,
          _ast5087>>,
      DeclContext<Pack<_ast5085>> {
}; // CXXConstructorDecl PropertyCallbackInfo<T>
struct _ast5085
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5084>, _str626>, _ast2873>>>> {
}; // ParmVarDecl args
struct _ast5086 : FunctionProtoType<_ast114, Pack<_ast2873>, UnqualifiedType> {
}; // FunctionProtoType void (internal::Address *)
struct _ast5087 : PointerType<_ast2273> {
}; // PointerType PropertyCallbackInfo<T> *
struct _ast5088
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2272>, _str628>, _ast2873>>> {
}; // FieldDecl args_
struct _ast5089
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str629>, _ast5090>>> {
};                                          // TypedefDecl FunctionCallback
struct _ast5090 : TypedefType<_ast5089> {}; // TypedefType v8::FunctionCallback
struct _ast5094
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast27>, _str14>, _ast28>,
                     None>,
          None> {}; // CXXRecordDecl Function
struct _ast5095
    : DeclContext<
          Pack<_ast5096, _ast5098, _ast5099, _ast5101, _ast5102, _ast5104>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast27>, _str61>, _ast5105>>,
          Pack<_ast5096, _ast5098, _ast5099, _ast5101, _ast5102, _ast5104>>> {
}; // CXXMethodDecl New
struct _ast5096
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5095>, _str229>, _ast5097>>>> {
}; // ParmVarDecl context
struct _ast5098
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5095>, _str80>, _ast5090>>>> {
}; // ParmVarDecl callback
struct _ast5099
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5095>, _str130>, _ast5100>>>> {
}; // ParmVarDecl data
struct _ast5101
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5095>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast5102
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5095>, _str630>, _ast5103>>>> {
}; // ParmVarDecl behavior
struct _ast5103 : EnumType<_ast5091, _ast1901> {
}; // EnumType v8::ConstructorBehavior
struct _ast5104
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5095>, _str631>, _ast4543>>>> {
}; // ParmVarDecl side_effect_type
struct _ast5105
    : FunctionProtoType<
          _ast5106,
          Pack<_ast5097, _ast5090, _ast5100, _ast1901, _ast5103, _ast4543>,
          UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>,
   // v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior,
   // v8::SideEffectType)
struct _ast5107
    : DeclContext<Pack<_ast5108, _ast5110, _ast5111>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str632>, _ast5113>>,
              Pack<_ast5108, _ast5110, _ast5111>>>,
          _ast5115> {}; // CXXMethodDecl NewInstance
struct _ast5108
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5107>, _str229>, _ast5109>>>> {
}; // ParmVarDecl context
struct _ast5110
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5107>, _str571>, _ast1901>>>> {
}; // ParmVarDecl argc
struct _ast5111
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5107>, _str589>, _ast5112>>>> {
}; // ParmVarDecl argv
struct _ast5113 : FunctionProtoType<_ast5114,
                                    Pack<_ast5109, _ast1901, _ast5112>,
                                    ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int,
   // Local<v8::Value> *) const
struct _ast5115 : PointerType<_ast5116> {}; // PointerType const v8::Function *
struct _ast5116 : ConstQualifiedType<_ast28> {
}; // RecordType const v8::Function
struct _ast5117
    : DeclContext<Pack<_ast5118>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str632>, _ast5120>>,
              Pack<_ast5118>>>,
          _ast5115> {}; // CXXMethodDecl NewInstance
struct _ast5118
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5117>, _str229>, _ast5119>>>> {
}; // ParmVarDecl context
struct _ast5120
    : FunctionProtoType<_ast5121, Pack<_ast5119>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast5122
    : DeclContext<Pack<_ast5123, _ast5125, _ast5126, _ast5128>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str633>, _ast5129>>,
              Pack<_ast5123, _ast5125, _ast5126, _ast5128>>>,
          _ast5115> {}; // CXXMethodDecl NewInstanceWithSideEffectType
struct _ast5123
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5122>, _str229>, _ast5124>>>> {
}; // ParmVarDecl context
struct _ast5125
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5122>, _str571>, _ast1901>>>> {
}; // ParmVarDecl argc
struct _ast5126
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5122>, _str589>, _ast5127>>>> {
}; // ParmVarDecl argv
struct _ast5128
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5122>, _str631>, _ast4543>>>> {
}; // ParmVarDecl side_effect_type
struct _ast5129
    : FunctionProtoType<_ast5130,
                        Pack<_ast5124, _ast1901, _ast5127, _ast4543>,
                        ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int,
   // Local<v8::Value> *, v8::SideEffectType) const
struct _ast5131
    : DeclContext<Pack<_ast5132, _ast5134, _ast5136, _ast5137>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str634>, _ast5139>>,
              Pack<_ast5132, _ast5134, _ast5136, _ast5137>>>,
          _ast5141> {}; // CXXMethodDecl Call
struct _ast5132
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5131>, _str229>, _ast5133>>>> {
}; // ParmVarDecl context
struct _ast5134
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5131>, _str588>, _ast5135>>>> {
}; // ParmVarDecl recv
struct _ast5136
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5131>, _str571>, _ast1901>>>> {
}; // ParmVarDecl argc
struct _ast5137
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5131>, _str589>, _ast5138>>>> {
}; // ParmVarDecl argv
struct _ast5139
    : FunctionProtoType<_ast5140,
                        Pack<_ast5133, _ast5135, _ast1901, _ast5138>,
                        UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>,
   // Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5141 : PointerType<_ast28> {}; // PointerType v8::Function *
struct _ast5142
    : DeclContext<Pack<_ast5143>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str635>, _ast5145>>,
              Pack<_ast5143>>>,
          _ast5141> {}; // CXXMethodDecl SetName
struct _ast5143
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5142>, _str500>, _ast5144>>>> {
}; // ParmVarDecl name
struct _ast5145 : FunctionProtoType<_ast114, Pack<_ast5144>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast5146
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str636>, _ast5147>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetName
struct _ast5147 : FunctionProtoType<_ast5148, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5149
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str637>, _ast5150>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetInferredName
struct _ast5150 : FunctionProtoType<_ast5151, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5152
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str638>, _ast5153>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetDebugName
struct _ast5153 : FunctionProtoType<_ast5154, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5155
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str639>, _ast5156>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetDisplayName
struct _ast5156 : FunctionProtoType<_ast5157, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5158
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str640>, _ast2938>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetScriptLineNumber
struct _ast5159
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str641>, _ast2938>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetScriptColumnNumber
struct _ast5160
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str642>, _ast2938>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl ScriptId
struct _ast5161
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str643>, _ast5162>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetBoundFunction
struct _ast5162 : FunctionProtoType<_ast5163, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5164
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast27>, _str283>, _ast3408>>,
              Pack<>>>,
          _ast5115> {}; // CXXMethodDecl GetScriptOrigin
struct _ast5165
    : DeclContext<Pack<_ast5166>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast27>, _str58>, _ast5167>>,
          Pack<_ast5166>>> {}; // CXXMethodDecl Cast
struct _ast5166
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5165>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5167 : FunctionProtoType<_ast5141, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Function *(v8::Value *)
struct _ast5168
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast27>, _str644>, _ast2435>>> {
}; // VarDecl kLineOffsetNotFound
struct _ast5169
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast67>, _str30>, _ast68>,
                     None>,
          None> {}; // CXXRecordDecl Promise
struct _ast5174
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast67>, _str645>, _ast5175>,
                     Pack<>>,
          Pack<_ast5176>>,
      DeclContext<
          Pack<_ast5177, _ast5178, _ast5183, _ast5187, _ast5194, _ast5201>> {
}; // CXXRecordDecl Resolver
struct _ast5175 : StructOrClassRecordType<RecordType<_ast5174>> {
}; // RecordType v8::Promise::Resolver
struct _ast5176 : CXXBaseSpecifier<_ast58> {
}; // CXXBaseSpecifier Record v8::Object
struct _ast5177
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5174>, _str645>, _ast5175>,
                     None>,
          None> {}; // CXXRecordDecl Resolver
struct _ast5178
    : DeclContext<Pack<_ast5179>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5174>, _str61>, _ast5181>>,
          Pack<_ast5179>>> {}; // CXXMethodDecl New
struct _ast5179
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5178>, _str229>, _ast5180>>>> {
}; // ParmVarDecl context
struct _ast5181 : FunctionProtoType<_ast5182, Pack<_ast5180>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _ast5183
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5174>, _str646>, _ast5184>>,
              Pack<>>>,
          _ast5186> {}; // CXXMethodDecl GetPromise
struct _ast5184 : FunctionProtoType<_ast5185, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Promise> ()
struct _ast5186 : PointerType<_ast5175> {
}; // PointerType v8::Promise::Resolver *
struct _ast5187
    : DeclContext<Pack<_ast5188, _ast5190>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5174>, _str647>, _ast5192>>,
              Pack<_ast5188, _ast5190>>>,
          _ast5186> {}; // CXXMethodDecl Resolve
struct _ast5188
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5187>, _str229>, _ast5189>>>> {
}; // ParmVarDecl context
struct _ast5190
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5187>, _str153>, _ast5191>>>> {
}; // ParmVarDecl value
struct _ast5192
    : FunctionProtoType<_ast5193, Pack<_ast5189, _ast5191>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5194
    : DeclContext<Pack<_ast5195, _ast5197>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5174>, _str648>, _ast5199>>,
              Pack<_ast5195, _ast5197>>>,
          _ast5186> {}; // CXXMethodDecl Reject
struct _ast5195
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5194>, _str229>, _ast5196>>>> {
}; // ParmVarDecl context
struct _ast5197
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5194>, _str153>, _ast5198>>>> {
}; // ParmVarDecl value
struct _ast5199
    : FunctionProtoType<_ast5200, Pack<_ast5196, _ast5198>, UnqualifiedType> {
}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5201
    : DeclContext<Pack<_ast5202>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5174>, _str58>, _ast5203>>,
          Pack<_ast5202>>> {}; // CXXMethodDecl Cast
struct _ast5202
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5201>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5203 : FunctionProtoType<_ast5186, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Promise::Resolver *(v8::Value *)
struct _ast5204
    : DeclContext<Pack<_ast5205, _ast5207>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str650>, _ast5209>>,
              Pack<_ast5205, _ast5207>>>,
          _ast5211> {}; // CXXMethodDecl Catch
struct _ast5205
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5204>, _str229>, _ast5206>>>> {
}; // ParmVarDecl context
struct _ast5207
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5204>, _str649>, _ast5208>>>> {
}; // ParmVarDecl handler
struct _ast5209
    : FunctionProtoType<_ast5210, Pack<_ast5206, _ast5208>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>,
   // Local<v8::Function>)
struct _ast5211 : PointerType<_ast68> {}; // PointerType v8::Promise *
struct _ast5212
    : DeclContext<Pack<_ast5213, _ast5215>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str651>, _ast5217>>,
              Pack<_ast5213, _ast5215>>>,
          _ast5211> {}; // CXXMethodDecl Then
struct _ast5213
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5212>, _str229>, _ast5214>>>> {
}; // ParmVarDecl context
struct _ast5215
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5212>, _str649>, _ast5216>>>> {
}; // ParmVarDecl handler
struct _ast5217
    : FunctionProtoType<_ast5218, Pack<_ast5214, _ast5216>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>,
   // Local<v8::Function>)
struct _ast5219
    : DeclContext<Pack<_ast5220, _ast5222, _ast5224>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str651>, _ast5226>>,
              Pack<_ast5220, _ast5222, _ast5224>>>,
          _ast5211> {}; // CXXMethodDecl Then
struct _ast5220
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5219>, _str229>, _ast5221>>>> {
}; // ParmVarDecl context
struct _ast5222
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5219>, _str652>, _ast5223>>>> {
}; // ParmVarDecl on_fulfilled
struct _ast5224
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5219>, _str653>, _ast5225>>>> {
}; // ParmVarDecl on_rejected
struct _ast5226 : FunctionProtoType<_ast5227,
                                    Pack<_ast5221, _ast5223, _ast5225>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>,
   // Local<v8::Function>, Local<v8::Function>)
struct _ast5228
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str654>, _ast3256>>,
              Pack<>>>,
          _ast5211> {}; // CXXMethodDecl HasHandler
struct _ast5229
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str655>, _ast5230>>,
              Pack<>>>,
          _ast5211> {}; // CXXMethodDecl Result
struct _ast5230 : FunctionProtoType<_ast5231, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast5232
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str656>, _ast5233>>,
              Pack<>>>,
          _ast5211> {}; // CXXMethodDecl State
struct _ast5233 : FunctionProtoType<_ast5234, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::Promise::PromiseState ()
struct _ast5234 : EnumType<_ast5170, _ast1901> {
}; // EnumType v8::Promise::PromiseState
struct _ast5235
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast67>, _str657>, _ast113>>,
              Pack<>>>,
          _ast5211> {}; // CXXMethodDecl MarkAsHandled
struct _ast5236
    : DeclContext<Pack<_ast5237>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast67>, _str58>, _ast5238>>,
          Pack<_ast5237>>> {}; // CXXMethodDecl Cast
struct _ast5237
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5236>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5238 : FunctionProtoType<_ast5211, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Promise *(v8::Value *)
struct _ast5239
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast67>, _str658>, _ast2435>>> {
}; // VarDecl kEmbedderFieldCount
struct _ast5240
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast69>, _str31>, _ast70>,
                     None>,
          None> {}; // CXXRecordDecl PropertyDescriptor
struct _ast5241
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str31>, _ast113>>,
              Pack<>>>,
          _ast5242>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5242 : PointerType<_ast70> {
}; // PointerType v8::PropertyDescriptor *
struct _ast5243
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str31>, _ast5246>>,
              Pack<_ast5244>>>,
          _ast5242>>,
      DeclContext<Pack<_ast5244>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5244
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5243>, _str153>, _ast5245>>>> {
}; // ParmVarDecl value
struct _ast5246 : FunctionProtoType<_ast114, Pack<_ast5245>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Value>)
struct _ast5247
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str31>, _ast5251>>,
              Pack<_ast5248, _ast5250>>>,
          _ast5242>>,
      DeclContext<Pack<_ast5248, _ast5250>> {
}; // CXXConstructorDecl PropertyDescriptor
struct _ast5248
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5247>, _str153>, _ast5249>>>> {
}; // ParmVarDecl value
struct _ast5250
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5247>, _str659>, _ast129>>>> {
}; // ParmVarDecl writable
struct _ast5251
    : FunctionProtoType<_ast114, Pack<_ast5249, _ast129>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Value>, bool)
struct _ast5252
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str31>, _ast5257>>,
              Pack<_ast5253, _ast5255>>>,
          _ast5242>>,
      DeclContext<Pack<_ast5253, _ast5255>> {
}; // CXXConstructorDecl PropertyDescriptor
struct _ast5253
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5252>, _str660>, _ast5254>>>> {
}; // ParmVarDecl get
struct _ast5255
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5252>, _str661>, _ast5256>>>> {
}; // ParmVarDecl set
struct _ast5257
    : FunctionProtoType<_ast114, Pack<_ast5254, _ast5256>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Value>, Local<v8::Value>)
struct _ast5258
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str662>, _ast5259>>,
              Pack<>>>,
          _ast5242>> {}; // CXXDestructorDecl ~PropertyDescriptor
struct _ast5259 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5260
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str153>, _ast5261>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl value
struct _ast5261 : FunctionProtoType<_ast5262, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5263 : PointerType<_ast5264> {
}; // PointerType const v8::PropertyDescriptor *
struct _ast5264 : ConstQualifiedType<_ast70> {
}; // RecordType const v8::PropertyDescriptor
struct _ast5265
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str663>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl has_value
struct _ast5266
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str660>, _ast5267>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl get
struct _ast5267 : FunctionProtoType<_ast5268, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5269
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str664>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl has_get
struct _ast5270
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str661>, _ast5271>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl set
struct _ast5271 : FunctionProtoType<_ast5272, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast5273
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str665>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl has_set
struct _ast5274
    : DeclContext<Pack<_ast5275>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str667>, _ast3633>>,
              Pack<_ast5275>>>,
          _ast5242> {}; // CXXMethodDecl set_enumerable
struct _ast5275
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5274>, _str666>, _ast129>>>> {
}; // ParmVarDecl enumerable
struct _ast5276
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str666>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl enumerable
struct _ast5277
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str668>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl has_enumerable
struct _ast5278
    : DeclContext<Pack<_ast5279>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str670>, _ast3633>>,
              Pack<_ast5279>>>,
          _ast5242> {}; // CXXMethodDecl set_configurable
struct _ast5279
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5278>, _str669>, _ast129>>>> {
}; // ParmVarDecl configurable
struct _ast5280
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str669>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl configurable
struct _ast5281
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str671>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl has_configurable
struct _ast5282
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str659>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl writable
struct _ast5283
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str672>, _ast128>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl has_writable
struct _ast5284
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast69>, _str332>, _ast5285>,
                     None>,
          None> {}; // CXXRecordDecl PrivateData
struct _ast5285 : StructOrClassRecordType<RecordType<_ast5284>> {
}; // RecordType v8::PropertyDescriptor::PrivateData
struct _ast5286
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str673>, _ast5287>>,
              Pack<>>>,
          _ast5263> {}; // CXXMethodDecl get_private
struct _ast5287 : FunctionProtoType<_ast5288, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::PropertyDescriptor::PrivateData *() const
struct _ast5288 : PointerType<_ast5285> {
}; // PointerType v8::PropertyDescriptor::PrivateData *
struct _ast5289
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str31>, _ast5292>>,
              Pack<_ast5290>>>,
          _ast5242>>,
      DeclContext<Pack<_ast5290>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5290
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5289>, _str62>, _ast5291>>>> {
}; // ParmVarDecl
struct _ast5291 : LValueReferenceType<ReferenceType<_ast5264>> {
}; // LValueReferenceType const v8::PropertyDescriptor &
struct _ast5292 : FunctionProtoType<_ast114, Pack<_ast5291>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::PropertyDescriptor &)
struct _ast5293
    : DeclContext<Pack<_ast5294>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast69>, _str64>, _ast5292>>,
              Pack<_ast5294>>>,
          _ast5242> {}; // CXXMethodDecl operator=
struct _ast5294
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5293>, _str62>, _ast5291>>>> {
}; // ParmVarDecl
struct _ast5295
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast71>, _str32>, _ast72>,
                     None>,
          None> {}; // CXXRecordDecl Proxy
struct _ast5296
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast71>, _str674>, _ast5297>>,
              Pack<>>>,
          _ast5299> {}; // CXXMethodDecl GetTarget
struct _ast5297 : FunctionProtoType<_ast5298, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast5299 : PointerType<_ast72> {}; // PointerType v8::Proxy *
struct _ast5300
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast71>, _str675>, _ast5301>>,
              Pack<>>>,
          _ast5299> {}; // CXXMethodDecl GetHandler
struct _ast5301 : FunctionProtoType<_ast5302, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast5303
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast71>, _str676>, _ast3256>>,
              Pack<>>>,
          _ast5299> {}; // CXXMethodDecl IsRevoked
struct _ast5304
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast71>, _str677>, _ast113>>,
              Pack<>>>,
          _ast5299> {}; // CXXMethodDecl Revoke
struct _ast5305
    : DeclContext<Pack<_ast5306, _ast5308, _ast5310>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast71>, _str61>, _ast5312>>,
          Pack<_ast5306, _ast5308, _ast5310>>> {}; // CXXMethodDecl New
struct _ast5306
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5305>, _str229>, _ast5307>>>> {
}; // ParmVarDecl context
struct _ast5308
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5305>, _str678>, _ast5309>>>> {
}; // ParmVarDecl local_target
struct _ast5310
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5305>, _str679>, _ast5311>>>> {
}; // ParmVarDecl local_handler
struct _ast5312 : FunctionProtoType<_ast5313,
                                    Pack<_ast5307, _ast5309, _ast5311>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Proxy> (Local<v8::Context>,
   // Local<v8::Object>, Local<v8::Object>)
struct _ast5314
    : DeclContext<Pack<_ast5315>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast71>, _str58>, _ast5316>>,
          Pack<_ast5315>>> {}; // CXXMethodDecl Cast
struct _ast5315
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5314>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5316 : FunctionProtoType<_ast5299, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Proxy *(v8::Value *)
struct _ast5319
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str680>, _ast5320>,
                     Pack<_ast5321, _ast5324>>,
          Pack<>>,
      DeclContext<Pack<_ast5325,
                       _ast5326,
                       _ast5328,
                       _ast5332,
                       _ast5336,
                       _ast5321,
                       _ast5324>> {}; // CXXRecordDecl MemorySpan
struct _ast5321
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5319>, _str263>, _ast5322>>> {
};                                          // FieldDecl data_
struct _ast5322 : PointerType<_ast5323> {}; // PointerType T *
struct _ast5324
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5319>, _str681>, _ast3254>>> {
}; // FieldDecl size_
struct _ast5325
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5319>, _str680>, _ast5320>,
                     None>,
          None> {}; // CXXRecordDecl MemorySpan
struct _ast5326
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5319>, _str682>, _ast113>>,
              Pack<>>>,
          _ast5327>> {};                    // CXXConstructorDecl MemorySpan<T>
struct _ast5327 : PointerType<_ast5320> {}; // PointerType MemorySpan<T> *
struct _ast5328
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5319>, _str682>, _ast5331>>,
              Pack<_ast5329, _ast5330>>>,
          _ast5327>>,
      DeclContext<Pack<_ast5329, _ast5330>> {
}; // CXXConstructorDecl MemorySpan<T>
struct _ast5329
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5328>, _str130>, _ast5322>>>> {
}; // ParmVarDecl data
struct _ast5330
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5328>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast5331
    : FunctionProtoType<_ast114, Pack<_ast5322, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (T *, size_t)
struct _ast5332
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5319>, _str130>, _ast5333>>,
              Pack<>>>,
          _ast5334> {}; // CXXMethodDecl data
struct _ast5333 : FunctionProtoType<_ast5322, Pack<>, ConstQualifiedType> {
};                                          // FunctionProtoType T *() const
struct _ast5334 : PointerType<_ast5335> {}; // PointerType const MemorySpan<T> *
struct _ast5335 : ConstQualifiedType<_ast5320> {
}; // InjectedClassNameType const MemorySpan<T>
struct _ast5336
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5319>, _str345>, _ast4027>>,
              Pack<>>>,
          _ast5334> {}; // CXXMethodDecl size
struct _ast5337
    : DeclContext<
          Pack<_ast5338, _ast5342, _ast5348, _ast5352, _ast5353, _ast5357>> {
}; // ClassTemplateSpecializationDecl MemorySpan
struct _ast5338
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5337>, _str680>, _ast5339>>,
              Pack<>>>,
          _ast5340>> {}; // CXXConstructorDecl MemorySpan
struct _ast5339 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5340 : PointerType<_ast5341> {
}; // PointerType v8::MemorySpan<const unsigned char> *
struct _ast5341 : StructOrClassRecordType<RecordType<_ast5337>> {
}; // RecordType v8::MemorySpan<const unsigned char>
struct _ast5342
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5337>, _str680>, _ast5347>>,
              Pack<_ast5343, _ast5346>>>,
          _ast5340>>,
      DeclContext<Pack<_ast5343, _ast5346>> {}; // CXXConstructorDecl MemorySpan
struct _ast5343
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5342>, _str130>, _ast5344>>>> {
};                                          // ParmVarDecl data
struct _ast5344 : PointerType<_ast5345> {}; // PointerType const unsigned char *
struct _ast5346
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5342>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast5347
    : FunctionProtoType<_ast114, Pack<_ast5344, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (const unsigned char *, size_t)
struct _ast5348
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5337>, _str130>, _ast5349>>,
              Pack<>>>,
          _ast5350> {}; // CXXMethodDecl data
struct _ast5349 : FunctionProtoType<_ast5344, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const unsigned char *() const
struct _ast5350 : PointerType<_ast5351> {
}; // PointerType const v8::MemorySpan<const unsigned char> *
struct _ast5351 : ConstQualifiedType<_ast5341> {
}; // RecordType const v8::MemorySpan<const unsigned char>
struct _ast5352
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5337>, _str345>, _ast4027>>,
              Pack<>>>,
          _ast5350> {}; // CXXMethodDecl size
struct _ast5353
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5337>, _str680>, _ast5356>>,
              Pack<_ast5354>>>,
          _ast5340>>,
      DeclContext<Pack<_ast5354>> {}; // CXXConstructorDecl MemorySpan
struct _ast5354
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5353>, _str62>, _ast5355>>>> {
}; // ParmVarDecl
struct _ast5355 : LValueReferenceType<ReferenceType<_ast5351>> {
}; // LValueReferenceType const v8::MemorySpan<const unsigned char> &
struct _ast5356 : FunctionProtoType<_ast114, Pack<_ast5355>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::MemorySpan<const unsigned char> &)
struct _ast5357
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5337>, _str680>, _ast5360>>,
              Pack<_ast5358>>>,
          _ast5340>>,
      DeclContext<Pack<_ast5358>> {}; // CXXConstructorDecl MemorySpan
struct _ast5358
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5357>, _str62>, _ast5359>>>> {
}; // ParmVarDecl
struct _ast5359 : RValueReferenceType<ReferenceType<_ast5341>> {
}; // RValueReferenceType v8::MemorySpan<const unsigned char> &&
struct _ast5360 : FunctionProtoType<_ast114, Pack<_ast5359>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MemorySpan<const unsigned char> &&)
struct _ast5361
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str683>, _ast5362>,
                     Pack<_ast5363, _ast5365>>,
          Pack<>>,
      DeclContext<Pack<_ast5366,
                       _ast5363,
                       _ast5365,
                       _ast5367,
                       _ast5373,
                       _ast5375,
                       _ast5380,
                       _ast5384,
                       _ast5388,
                       _ast5389>> {}; // CXXRecordDecl OwnedBuffer
struct _ast5362 : StructOrClassRecordType<RecordType<_ast5361>> {
}; // RecordType v8::OwnedBuffer
struct _ast5363
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5361>, _str348>, _ast5364>>> {
}; // FieldDecl buffer
struct _ast5365
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5361>, _str345>, _ast3254>>> {
}; // FieldDecl size
struct _ast5366
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5361>, _str683>, _ast5362>,
                     None>,
          None> {}; // CXXRecordDecl OwnedBuffer
struct _ast5367
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str683>, _ast5371>>,
              Pack<_ast5368, _ast5370>>>,
          _ast5372>>,
      DeclContext<Pack<_ast5368, _ast5370>> {
}; // CXXConstructorDecl OwnedBuffer
struct _ast5368
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5367>, _str348>, _ast5369>>>> {
}; // ParmVarDecl buffer
struct _ast5370
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5367>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast5371
    : FunctionProtoType<_ast114, Pack<_ast5369, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (std::unique_ptr<const uint8_t []>, size_t)
struct _ast5372 : PointerType<_ast5362> {}; // PointerType v8::OwnedBuffer *
struct _ast5373
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str683>, _ast5374>>,
              Pack<>>>,
          _ast5372>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5374 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5375
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str683>, _ast5379>>,
              Pack<_ast5376>>>,
          _ast5372>>,
      DeclContext<Pack<_ast5376>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5376
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5375>, _str62>, _ast5377>>>> {
}; // ParmVarDecl
struct _ast5377 : LValueReferenceType<ReferenceType<_ast5378>> {
}; // LValueReferenceType const v8::OwnedBuffer &
struct _ast5378 : ConstQualifiedType<_ast5362> {
}; // RecordType const v8::OwnedBuffer
struct _ast5379 : FunctionProtoType<_ast114, Pack<_ast5377>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::OwnedBuffer &)
struct _ast5380
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str683>, _ast5383>>,
              Pack<_ast5381>>>,
          _ast5372>>,
      DeclContext<Pack<_ast5381>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5381
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5380>, _str62>, _ast5382>>>> {
}; // ParmVarDecl
struct _ast5382 : RValueReferenceType<ReferenceType<_ast5362>> {
}; // RValueReferenceType v8::OwnedBuffer &&
struct _ast5383 : FunctionProtoType<_ast114, Pack<_ast5382>, UnqualifiedType> {
}; // FunctionProtoType void (v8::OwnedBuffer &&) noexcept
struct _ast5384
    : DeclContext<Pack<_ast5385>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str64>, _ast5386>>,
              Pack<_ast5385>>>,
          _ast5372> {}; // CXXMethodDecl operator=
struct _ast5385
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5384>, _str62>, _ast5382>>>> {
}; // ParmVarDecl
struct _ast5386 : FunctionProtoType<_ast5387, Pack<_ast5382>, UnqualifiedType> {
}; // FunctionProtoType v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ast5387 : LValueReferenceType<ReferenceType<_ast5362>> {
}; // LValueReferenceType v8::OwnedBuffer &
struct _ast5388
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str684>, _ast214>>,
              Pack<>>>,
          _ast5372>> {}; // CXXDestructorDecl ~OwnedBuffer
struct _ast5389
    : DeclContext<Pack<_ast5390>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5361>, _str64>, _ast5391>>,
              Pack<_ast5390>>>,
          _ast5372> {}; // CXXMethodDecl operator=
struct _ast5390
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5389>, _str62>, _ast5377>>>> {
}; // ParmVarDecl
struct _ast5391 : FunctionProtoType<_ast5387, Pack<_ast5377>, UnqualifiedType> {
}; // FunctionProtoType v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ast5392
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str685>, _ast5393>,
                     Pack<_ast5394>>,
          Pack<>>,
      DeclContext<Pack<_ast5397,
                       _ast5398,
                       _ast5401,
                       _ast5394,
                       _ast5404,
                       _ast5409,
                       _ast5413,
                       _ast5417>> {}; // CXXRecordDecl CompiledWasmModule
struct _ast5393 : StructOrClassRecordType<RecordType<_ast5392>> {
}; // RecordType v8::CompiledWasmModule
struct _ast5394
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5392>, _str686>, _ast5395>>> {
}; // FieldDecl native_module_
struct _ast5395 : ConstQualifiedType<_ast5396> {
}; // ElaboratedType const std::shared_ptr<internal::wasm::NativeModule>
struct _ast5397
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5392>, _str685>, _ast5393>,
                     None>,
          None> {}; // CXXRecordDecl CompiledWasmModule
struct _ast5398
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5392>, _str687>, _ast5399>>,
              Pack<>>>,
          _ast5400> {}; // CXXMethodDecl Serialize
struct _ast5399 : FunctionProtoType<_ast5362, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::OwnedBuffer ()
struct _ast5400 : PointerType<_ast5393> {
}; // PointerType v8::CompiledWasmModule *
struct _ast5401
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5392>, _str688>, _ast5402>>,
              Pack<>>>,
          _ast5400> {}; // CXXMethodDecl GetWireBytesRef
struct _ast5402 : FunctionProtoType<_ast5403, Pack<>, UnqualifiedType> {
}; // FunctionProtoType MemorySpan<const uint8_t> ()
struct _ast5404
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5392>, _str685>, _ast5408>>,
              Pack<_ast5405>>>,
          _ast5400>>,
      DeclContext<Pack<_ast5405>> {}; // CXXConstructorDecl CompiledWasmModule
struct _ast5405
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5404>, _str62>, _ast5406>>>> {
}; // ParmVarDecl
struct _ast5406 : LValueReferenceType<ReferenceType<_ast5407>> {
}; // LValueReferenceType const v8::CompiledWasmModule &
struct _ast5407 : ConstQualifiedType<_ast5393> {
}; // RecordType const v8::CompiledWasmModule
struct _ast5408 : FunctionProtoType<_ast114, Pack<_ast5406>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::CompiledWasmModule &)
struct _ast5409
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5392>, _str685>, _ast5412>>,
              Pack<_ast5410>>>,
          _ast5400>>,
      DeclContext<Pack<_ast5410>> {}; // CXXConstructorDecl CompiledWasmModule
struct _ast5410
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5409>, _str62>, _ast5411>>>> {
}; // ParmVarDecl
struct _ast5411 : RValueReferenceType<ReferenceType<_ast5393>> {
}; // RValueReferenceType v8::CompiledWasmModule &&
struct _ast5412 : FunctionProtoType<_ast114, Pack<_ast5411>, UnqualifiedType> {
}; // FunctionProtoType void (v8::CompiledWasmModule &&)
struct _ast5413
    : DeclContext<Pack<_ast5414>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5392>, _str64>, _ast5415>>,
              Pack<_ast5414>>>,
          _ast5400> {}; // CXXMethodDecl operator=
struct _ast5414
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5413>, _str62>, _ast5411>>>> {
}; // ParmVarDecl
struct _ast5415 : FunctionProtoType<_ast5416, Pack<_ast5411>, UnqualifiedType> {
}; // FunctionProtoType v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _ast5416 : LValueReferenceType<ReferenceType<_ast5393>> {
}; // LValueReferenceType v8::CompiledWasmModule &
struct _ast5417
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5392>, _str689>, _ast5418>>,
              Pack<>>>,
          _ast5400>> {}; // CXXDestructorDecl ~CompiledWasmModule
struct _ast5418 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5419
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast105>, _str49>, _ast106>,
                     None>,
          None> {}; // CXXRecordDecl WasmModuleObject
struct _ast5420
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast105>, _str690>, _ast5421>,
                     Pack<_ast5422, _ast5425, _ast5426>>,
          Pack<>>,
      DeclContext<Pack<_ast5427,
                       _ast5428,
                       _ast5433,
                       _ast5438,
                       _ast5442,
                       _ast5424,
                       _ast5422,
                       _ast5425,
                       _ast5426,
                       _ast5445>> {}; // CXXRecordDecl TransferrableModule
struct _ast5421 : StructOrClassRecordType<RecordType<_ast5420>> {
}; // RecordType v8::WasmModuleObject::TransferrableModule
struct _ast5422
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5420>, _str692>, _ast5423>>> {
}; // FieldDecl shared_module_
struct _ast5423 : TypedefType<_ast5424> {
}; // TypedefType v8::WasmModuleObject::TransferrableModule::SharedModule
struct _ast5424
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast5420>, _str691>, _ast5423>>> {
}; // TypedefDecl SharedModule
struct _ast5425
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5420>, _str693>, _ast5362>>> {
}; // FieldDecl serialized_
struct _ast5426
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5420>, _str694>, _ast5362>>> {
}; // FieldDecl wire_bytes_
struct _ast5427
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5420>, _str690>, _ast5421>,
                     None>,
          None> {}; // CXXRecordDecl TransferrableModule
struct _ast5428
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5420>, _str690>, _ast5431>>,
              Pack<_ast5429>>>,
          _ast5432>>,
      DeclContext<Pack<_ast5429>> {}; // CXXConstructorDecl TransferrableModule
struct _ast5429
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5428>, _str252>, _ast5430>>>> {
}; // ParmVarDecl src
struct _ast5430 : RValueReferenceType<ReferenceType<_ast5421>> {
}; // RValueReferenceType v8::WasmModuleObject::TransferrableModule &&
struct _ast5431 : FunctionProtoType<_ast114, Pack<_ast5430>, UnqualifiedType> {
}; // FunctionProtoType void (v8::WasmModuleObject::TransferrableModule &&)
struct _ast5432 : PointerType<_ast5421> {
}; // PointerType v8::WasmModuleObject::TransferrableModule *
struct _ast5433
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5420>, _str690>, _ast5437>>,
              Pack<_ast5434>>>,
          _ast5432>>,
      DeclContext<Pack<_ast5434>> {}; // CXXConstructorDecl TransferrableModule
struct _ast5434
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5433>, _str252>, _ast5435>>>> {
}; // ParmVarDecl src
struct _ast5435 : LValueReferenceType<ReferenceType<_ast5436>> {
}; // LValueReferenceType const v8::WasmModuleObject::TransferrableModule &
struct _ast5436 : ConstQualifiedType<_ast5421> {
}; // RecordType const v8::WasmModuleObject::TransferrableModule
struct _ast5437 : FunctionProtoType<_ast114, Pack<_ast5435>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::WasmModuleObject::TransferrableModule &)
struct _ast5438
    : DeclContext<Pack<_ast5439>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5420>, _str64>, _ast5440>>,
              Pack<_ast5439>>>,
          _ast5432> {}; // CXXMethodDecl operator=
struct _ast5439
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5438>, _str252>, _ast5430>>>> {
}; // ParmVarDecl src
struct _ast5440 : FunctionProtoType<_ast5441, Pack<_ast5430>, UnqualifiedType> {
}; // FunctionProtoType v8::WasmModuleObject::TransferrableModule
   // &(v8::WasmModuleObject::TransferrableModule &&)
struct _ast5441 : LValueReferenceType<ReferenceType<_ast5421>> {
}; // LValueReferenceType v8::WasmModuleObject::TransferrableModule &
struct _ast5442
    : DeclContext<Pack<_ast5443>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5420>, _str64>, _ast5444>>,
              Pack<_ast5443>>>,
          _ast5432> {}; // CXXMethodDecl operator=
struct _ast5443
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5442>, _str252>, _ast5435>>>> {
}; // ParmVarDecl src
struct _ast5444 : FunctionProtoType<_ast5441, Pack<_ast5435>, UnqualifiedType> {
}; // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(const
   // v8::WasmModuleObject::TransferrableModule &)
struct _ast5445
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5420>, _str695>, _ast5446>>,
              Pack<>>>,
          _ast5432>> {}; // CXXDestructorDecl ~TransferrableModule
struct _ast5446 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5447
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast105>, _str696>, _ast5448>>,
              Pack<>>>,
          _ast5449> {}; // CXXMethodDecl GetTransferrableModule
struct _ast5448 : FunctionProtoType<_ast5421, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::WasmModuleObject::TransferrableModule ()
struct _ast5449 : PointerType<_ast106> {}; // PointerType v8::WasmModuleObject *
struct _ast5450
    : DeclContext<Pack<_ast5451, _ast5452>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast105>, _str697>, _ast5453>>,
          Pack<_ast5451, _ast5452>>> {
}; // CXXMethodDecl FromTransferrableModule
struct _ast5451
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5450>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5452
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5450>, _str62>, _ast5435>>>> {
}; // ParmVarDecl
struct _ast5453
    : FunctionProtoType<_ast5454, Pack<_ast184, _ast5435>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const
   // v8::WasmModuleObject::TransferrableModule &)
struct _ast5455
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast105>, _str698>, _ast5456>>,
              Pack<>>>,
          _ast5449> {}; // CXXMethodDecl GetCompiledModule
struct _ast5456 : FunctionProtoType<_ast5393, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::CompiledWasmModule ()
struct _ast5457
    : DeclContext<Pack<_ast5458, _ast5459, _ast5461>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast105>, _str701>, _ast5463>>,
          Pack<_ast5458, _ast5459, _ast5461>>> {
}; // CXXMethodDecl DeserializeOrCompile
struct _ast5458
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5457>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5459
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5457>, _str699>, _ast5460>>>> {
}; // ParmVarDecl serialized_module
struct _ast5461
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5457>, _str700>, _ast5462>>>> {
}; // ParmVarDecl wire_bytes
struct _ast5463 : FunctionProtoType<_ast5464,
                                    Pack<_ast184, _ast5460, _ast5462>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *,
   // MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _ast5465
    : DeclContext<Pack<_ast5466>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast105>, _str58>, _ast5467>>,
          Pack<_ast5466>>> {}; // CXXMethodDecl Cast
struct _ast5466
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5465>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5467 : FunctionProtoType<_ast5449, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::WasmModuleObject *(v8::Value *)
struct _ast5468
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str702>, _ast5469>,
                     Pack<_ast5470>>,
          Pack<>>,
      DeclContext<Pack<_ast5472,
                       _ast5473,
                       _ast5475,
                       _ast5490,
                       _ast5495,
                       _ast5497,
                       _ast5501,
                       _ast5502,
                       _ast5506,
                       _ast5510,
                       _ast5514,
                       _ast5470,
                       _ast5520>> {}; // CXXRecordDecl WasmStreaming
struct _ast5469 : StructOrClassRecordType<RecordType<_ast5468>> {
}; // RecordType v8::WasmStreaming
struct _ast5470
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5468>, _str257>, _ast5471>>> {
}; // FieldDecl impl_
struct _ast5472
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5468>, _str702>, _ast5469>,
                     None>,
          None> {}; // CXXRecordDecl WasmStreaming
struct _ast5473
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5468>, _str703>, _ast5474>,
                     None>,
          None> {}; // CXXRecordDecl WasmStreamingImpl
struct _ast5474 : StructOrClassRecordType<RecordType<_ast5473>> {
}; // RecordType v8::WasmStreaming::WasmStreamingImpl
struct _ast5475
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5468>, _str704>, _ast5476>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast5477, _ast5478, _ast5481, _ast5484>> {
}; // CXXRecordDecl Client
struct _ast5476 : StructOrClassRecordType<RecordType<_ast5475>> {
}; // RecordType v8::WasmStreaming::Client
struct _ast5477
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5475>, _str704>, _ast5476>,
                     None>,
          None> {}; // CXXRecordDecl Client
struct _ast5478
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5475>, _str705>, _ast5479>>,
              Pack<>>>,
          _ast5480>>> {}; // CXXDestructorDecl ~Client
struct _ast5479 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5480 : PointerType<_ast5476> {
}; // PointerType v8::WasmStreaming::Client *
struct _ast5481
    : DeclContext<Pack<_ast5482>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5475>, _str707>, _ast5483>>,
              Pack<_ast5482>>>,
          _ast5480>> {}; // CXXMethodDecl OnModuleCompiled
struct _ast5482
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5481>, _str706>, _ast5393>>>> {
}; // ParmVarDecl compiled_module
struct _ast5483 : FunctionProtoType<_ast114, Pack<_ast5393>, UnqualifiedType> {
}; // FunctionProtoType void (v8::CompiledWasmModule)
struct _ast5484
    : DeclContext<Pack<_ast5485>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5475>, _str64>, _ast5488>>,
              Pack<_ast5485>>>,
          _ast5480> {}; // CXXMethodDecl operator=
struct _ast5485
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5484>, _str62>, _ast5486>>>> {
}; // ParmVarDecl
struct _ast5486 : LValueReferenceType<ReferenceType<_ast5487>> {
}; // LValueReferenceType const v8::WasmStreaming::Client &
struct _ast5487 : ConstQualifiedType<_ast5476> {
}; // RecordType const v8::WasmStreaming::Client
struct _ast5488 : FunctionProtoType<_ast5489, Pack<_ast5486>, UnqualifiedType> {
}; // FunctionProtoType v8::WasmStreaming::Client &(const
   // v8::WasmStreaming::Client &)
struct _ast5489 : LValueReferenceType<ReferenceType<_ast5476>> {
}; // LValueReferenceType v8::WasmStreaming::Client &
struct _ast5490
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str702>, _ast5493>>,
              Pack<_ast5491>>>,
          _ast5494>>,
      DeclContext<Pack<_ast5491>> {}; // CXXConstructorDecl WasmStreaming
struct _ast5491
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5490>, _str261>, _ast5492>>>> {
}; // ParmVarDecl impl
struct _ast5493 : FunctionProtoType<_ast114, Pack<_ast5492>, UnqualifiedType> {
}; // FunctionProtoType void (std::unique_ptr<WasmStreamingImpl>)
struct _ast5494 : PointerType<_ast5469> {}; // PointerType v8::WasmStreaming *
struct _ast5495
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str708>, _ast5496>>,
              Pack<>>>,
          _ast5494>> {}; // CXXDestructorDecl ~WasmStreaming
struct _ast5496 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5497
    : DeclContext<Pack<_ast5498, _ast5499>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str710>, _ast5500>>,
              Pack<_ast5498, _ast5499>>>,
          _ast5494> {}; // CXXMethodDecl OnBytesReceived
struct _ast5498
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5497>, _str709>, _ast3171>>>> {
}; // ParmVarDecl bytes
struct _ast5499
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5497>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast5500
    : FunctionProtoType<_ast114, Pack<_ast3171, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (const uint8_t *, size_t)
struct _ast5501
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str711>, _ast113>>,
              Pack<>>>,
          _ast5494> {}; // CXXMethodDecl Finish
struct _ast5502
    : DeclContext<Pack<_ast5503>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str713>, _ast5505>>,
              Pack<_ast5503>>>,
          _ast5494> {}; // CXXMethodDecl Abort
struct _ast5503
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5502>, _str712>, _ast5504>>>> {
}; // ParmVarDecl exception
struct _ast5505 : FunctionProtoType<_ast114, Pack<_ast5504>, UnqualifiedType> {
}; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5506
    : DeclContext<Pack<_ast5507, _ast5508>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str714>, _ast5509>>,
              Pack<_ast5507, _ast5508>>>,
          _ast5494> {}; // CXXMethodDecl SetCompiledModuleBytes
struct _ast5507
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5506>, _str709>, _ast3171>>>> {
}; // ParmVarDecl bytes
struct _ast5508
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5506>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast5509
    : FunctionProtoType<_ast129, Pack<_ast3171, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType bool (const uint8_t *, size_t)
struct _ast5510
    : DeclContext<Pack<_ast5511>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str716>, _ast5513>>,
              Pack<_ast5511>>>,
          _ast5494> {}; // CXXMethodDecl SetClient
struct _ast5511
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5510>, _str715>, _ast5512>>>> {
}; // ParmVarDecl client
struct _ast5513 : FunctionProtoType<_ast114, Pack<_ast5512>, UnqualifiedType> {
}; // FunctionProtoType void (std::shared_ptr<Client>)
struct _ast5514
    : DeclContext<Pack<_ast5515, _ast5516>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5468>, _str717>, _ast5518>>,
          Pack<_ast5515, _ast5516>>> {}; // CXXMethodDecl Unpack
struct _ast5515
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5514>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5516
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5514>, _str153>, _ast5517>>>> {
}; // ParmVarDecl value
struct _ast5518
    : FunctionProtoType<_ast5519, Pack<_ast184, _ast5517>, UnqualifiedType> {
}; // FunctionProtoType std::shared_ptr<WasmStreaming> (v8::Isolate *,
   // Local<v8::Value>)
struct _ast5520
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5468>, _str702>, _ast5524>>,
              Pack<_ast5521>>>,
          _ast5494>>,
      DeclContext<Pack<_ast5521>> {}; // CXXConstructorDecl WasmStreaming
struct _ast5521
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5520>, _str62>, _ast5522>>>> {
}; // ParmVarDecl
struct _ast5522 : LValueReferenceType<ReferenceType<_ast5523>> {
}; // LValueReferenceType const v8::WasmStreaming &
struct _ast5523 : ConstQualifiedType<_ast5469> {
}; // RecordType const v8::WasmStreaming
struct _ast5524 : FunctionProtoType<_ast114, Pack<_ast5522>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::WasmStreaming &)
struct _ast5525
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str718>, _ast5526>,
                     Pack<_ast5527, _ast5528, _ast5530>>,
          Pack<>>,
      DeclContext<Pack<_ast5532,
                       _ast5533,
                       _ast5536,
                       _ast5539,
                       _ast5540,
                       _ast5544,
                       _ast5547,
                       _ast5527,
                       _ast5528,
                       _ast5530>> {
}; // CXXRecordDecl WasmModuleObjectBuilderStreaming
struct _ast5526 : StructOrClassRecordType<RecordType<_ast5525>> {
}; // RecordType v8::WasmModuleObjectBuilderStreaming
struct _ast5527
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5525>, _str118>, _ast184>>> {
}; // FieldDecl isolate_
struct _ast5528
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5525>, _str719>, _ast5529>>> {
}; // FieldDecl promise_
struct _ast5530
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5525>, _str720>, _ast5531>>> {
}; // FieldDecl streaming_decoder_
struct _ast5532
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5525>, _str718>, _ast5526>,
                     None>,
          None> {}; // CXXRecordDecl WasmModuleObjectBuilderStreaming
struct _ast5533
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5525>, _str718>, _ast2846>>,
              Pack<_ast5534>>>,
          _ast5535>>,
      DeclContext<Pack<_ast5534>> {
}; // CXXConstructorDecl WasmModuleObjectBuilderStreaming
struct _ast5534
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5533>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5535 : PointerType<_ast5526> {
}; // PointerType v8::WasmModuleObjectBuilderStreaming *
struct _ast5536
    : DeclContext<Pack<_ast5537, _ast5538>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5525>, _str710>, _ast5500>>,
              Pack<_ast5537, _ast5538>>>,
          _ast5535> {}; // CXXMethodDecl OnBytesReceived
struct _ast5537
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5536>, _str62>, _ast3171>>>> {
}; // ParmVarDecl
struct _ast5538
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5536>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast5539
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5525>, _str711>, _ast113>>,
              Pack<>>>,
          _ast5535> {}; // CXXMethodDecl Finish
struct _ast5540
    : DeclContext<Pack<_ast5541>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5525>, _str713>, _ast5543>>,
              Pack<_ast5541>>>,
          _ast5535> {}; // CXXMethodDecl Abort
struct _ast5541
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5540>, _str712>, _ast5542>>>> {
}; // ParmVarDecl exception
struct _ast5543 : FunctionProtoType<_ast114, Pack<_ast5542>, UnqualifiedType> {
}; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5544
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5525>, _str646>, _ast5545>>,
              Pack<>>>,
          _ast5535> {}; // CXXMethodDecl GetPromise
struct _ast5545 : FunctionProtoType<_ast5546, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Promise> ()
struct _ast5547
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5525>, _str721>, _ast5548>>,
              Pack<>>>,
          _ast5535>> {}; // CXXDestructorDecl ~WasmModuleObjectBuilderStreaming
struct _ast5548 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5552
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast13>, _str7>, _ast14>,
                     None>,
          None> {}; // CXXRecordDecl ArrayBuffer
struct _ast5553
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast13>, _str722>, _ast5554>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast5555,
                       _ast5556,
                       _ast5559,
                       _ast5562,
                       _ast5564,
                       _ast5571,
                       _ast5573>> {}; // CXXRecordDecl Allocator
struct _ast5554 : StructOrClassRecordType<RecordType<_ast5553>> {
}; // RecordType v8::ArrayBuffer::Allocator
struct _ast5555
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5553>, _str722>, _ast5554>,
                     None>,
          None> {}; // CXXRecordDecl Allocator
struct _ast5556
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5553>, _str723>, _ast5557>>,
              Pack<>>>,
          _ast5558>>> {}; // CXXDestructorDecl ~Allocator
struct _ast5557 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast5558 : PointerType<_ast5554> {
}; // PointerType v8::ArrayBuffer::Allocator *
struct _ast5559
    : DeclContext<Pack<_ast5560>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5553>, _str724>, _ast5561>>,
              Pack<_ast5560>>>,
          _ast5558>> {}; // CXXMethodDecl Allocate
struct _ast5560
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5559>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5561 : FunctionProtoType<_ast2223, Pack<_ast3254>, UnqualifiedType> {
}; // FunctionProtoType void *(size_t)
struct _ast5562
    : DeclContext<Pack<_ast5563>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5553>, _str725>, _ast5561>>,
              Pack<_ast5563>>>,
          _ast5558>> {}; // CXXMethodDecl AllocateUninitialized
struct _ast5563
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5562>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5564
    : DeclContext<Pack<_ast5565, _ast5566>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5553>, _str726>, _ast5567>>,
              Pack<_ast5565, _ast5566>>>,
          _ast5558>> {}; // CXXMethodDecl Free
struct _ast5565
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5564>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast5566
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5564>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5567
    : FunctionProtoType<_ast114, Pack<_ast2223, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (void *, size_t)
struct _ast5571
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5553>, _str727>, _ast5572>>,
          Pack<>>> {}; // CXXMethodDecl NewDefaultAllocator
struct _ast5572 : FunctionProtoType<_ast5558, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::ArrayBuffer::Allocator *()
struct _ast5573
    : DeclContext<Pack<_ast5574>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5553>, _str64>, _ast5577>>,
              Pack<_ast5574>>>,
          _ast5558> {}; // CXXMethodDecl operator=
struct _ast5574
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5573>, _str62>, _ast5575>>>> {
}; // ParmVarDecl
struct _ast5575 : LValueReferenceType<ReferenceType<_ast5576>> {
}; // LValueReferenceType const v8::ArrayBuffer::Allocator &
struct _ast5576 : ConstQualifiedType<_ast5554> {
}; // RecordType const v8::ArrayBuffer::Allocator
struct _ast5577 : FunctionProtoType<_ast5578, Pack<_ast5575>, UnqualifiedType> {
}; // FunctionProtoType v8::ArrayBuffer::Allocator &(const
   // v8::ArrayBuffer::Allocator &)
struct _ast5578 : LValueReferenceType<ReferenceType<_ast5554>> {
}; // LValueReferenceType v8::ArrayBuffer::Allocator &
struct _ast5579
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast13>, _str728>, _ast5580>,
                     Pack<_ast5581,
                          _ast5582,
                          _ast5583,
                          _ast5584,
                          _ast5585,
                          _ast5587,
                          _ast5590>>,
          Pack<>>,
      DeclContext<Pack<_ast5591,
                       _ast5589,
                       _ast5592,
                       _ast5594,
                       _ast5598,
                       _ast5599,
                       _ast5601,
                       _ast5602,
                       _ast5603,
                       _ast5605,
                       _ast5581,
                       _ast5582,
                       _ast5583,
                       _ast5584,
                       _ast5585,
                       _ast5587,
                       _ast5590>> {}; // CXXRecordDecl Contents
struct _ast5580 : StructOrClassRecordType<RecordType<_ast5579>> {
}; // RecordType v8::ArrayBuffer::Contents
struct _ast5581
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str263>, _ast2223>>> {
}; // FieldDecl data_
struct _ast5582
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str729>, _ast3254>>> {
}; // FieldDecl byte_length_
struct _ast5583
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str730>, _ast2223>>> {
}; // FieldDecl allocation_base_
struct _ast5584
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str731>, _ast3254>>> {
}; // FieldDecl allocation_length_
struct _ast5585
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str732>, _ast5586>>> {
}; // FieldDecl allocation_mode_
struct _ast5587
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str734>, _ast5588>>> {
}; // FieldDecl deleter_
struct _ast5588 : TypedefType<_ast5589> {
}; // TypedefType v8::ArrayBuffer::Contents::DeleterCallback
struct _ast5589
    : TypeAliasDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast5579>, _str733>, _ast5588>>> {
}; // TypeAliasDecl DeleterCallback
struct _ast5590
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5579>, _str735>, _ast2223>>> {
}; // FieldDecl deleter_data_
struct _ast5591
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5579>, _str728>, _ast5580>,
                     None>,
          None> {}; // CXXRecordDecl Contents
struct _ast5592
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str728>, _ast113>>,
              Pack<>>>,
          _ast5593>> {}; // CXXConstructorDecl Contents
struct _ast5593 : PointerType<_ast5580> {
}; // PointerType v8::ArrayBuffer::Contents *
struct _ast5594
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str736>, _ast5595>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl AllocationBase
struct _ast5595 : FunctionProtoType<_ast2223, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType void *() const
struct _ast5596 : PointerType<_ast5597> {
}; // PointerType const v8::ArrayBuffer::Contents *
struct _ast5597 : ConstQualifiedType<_ast5580> {
}; // RecordType const v8::ArrayBuffer::Contents
struct _ast5598
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str737>, _ast4027>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl AllocationLength
struct _ast5599
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str738>, _ast5600>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl AllocationMode
struct _ast5600 : FunctionProtoType<_ast5586, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5601
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str3>, _ast5595>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl Data
struct _ast5602
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str739>, _ast4027>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl ByteLength
struct _ast5603
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str740>, _ast5604>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl Deleter
struct _ast5604 : FunctionProtoType<_ast5588, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::ArrayBuffer::Contents::DeleterCallback () const
struct _ast5605
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5579>, _str741>, _ast5595>>,
              Pack<>>>,
          _ast5596> {}; // CXXMethodDecl DeleterData
struct _ast5606
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str739>, _ast4027>>,
              Pack<>>>,
          _ast5607> {}; // CXXMethodDecl ByteLength
struct _ast5607 : PointerType<_ast5608> {
}; // PointerType const v8::ArrayBuffer *
struct _ast5608 : ConstQualifiedType<_ast14> {
}; // RecordType const v8::ArrayBuffer
struct _ast5609
    : DeclContext<Pack<_ast5610, _ast5611>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast13>, _str61>, _ast5612>>,
          Pack<_ast5610, _ast5611>>> {}; // CXXMethodDecl New
struct _ast5610
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5609>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5611
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5609>, _str742>, _ast3254>>>> {
}; // ParmVarDecl byte_length
struct _ast5612
    : FunctionProtoType<_ast5613, Pack<_ast184, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _ast5614
    : DeclContext<Pack<_ast5615, _ast5616, _ast5617, _ast5618>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast13>, _str61>, _ast5620>>,
          Pack<_ast5615, _ast5616, _ast5617, _ast5618>>> {
}; // CXXMethodDecl New
struct _ast5615
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5614>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5616
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5614>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast5617
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5614>, _str742>, _ast3254>>>> {
}; // ParmVarDecl byte_length
struct _ast5618
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5614>, _str358>, _ast5619>>>> {
}; // ParmVarDecl mode
struct _ast5619 : EnumType<_ast5549, _ast1901> {
}; // EnumType v8::ArrayBufferCreationMode
struct _ast5620 : FunctionProtoType<_ast5621,
                                    Pack<_ast184, _ast2223, _ast3254, _ast5619>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t,
   // v8::ArrayBufferCreationMode)
struct _ast5622
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str397>, _ast128>>,
              Pack<>>>,
          _ast5607> {}; // CXXMethodDecl IsExternal
struct _ast5623
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str743>, _ast128>>,
              Pack<>>>,
          _ast5607> {}; // CXXMethodDecl IsDetachable
struct _ast5624
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str744>, _ast128>>,
              Pack<>>>,
          _ast5607> {}; // CXXMethodDecl IsNeuterable
struct _ast5625
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str745>, _ast113>>,
              Pack<>>>,
          _ast5626> {};                   // CXXMethodDecl Detach
struct _ast5626 : PointerType<_ast14> {}; // PointerType v8::ArrayBuffer *
struct _ast5627
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str746>, _ast113>>,
              Pack<>>>,
          _ast5626> {}; // CXXMethodDecl Neuter
struct _ast5628
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str747>, _ast5629>>,
              Pack<>>>,
          _ast5626> {}; // CXXMethodDecl Externalize
struct _ast5629 : FunctionProtoType<_ast5580, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::ArrayBuffer::Contents ()
struct _ast5630
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast13>, _str748>, _ast5629>>,
              Pack<>>>,
          _ast5626> {}; // CXXMethodDecl GetContents
struct _ast5631
    : DeclContext<Pack<_ast5632>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast13>, _str58>, _ast5633>>,
          Pack<_ast5632>>> {}; // CXXMethodDecl Cast
struct _ast5632
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5631>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5633 : FunctionProtoType<_ast5626, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::ArrayBuffer *(v8::Value *)
struct _ast5634
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast13>, _str749>, _ast2435>>> {
}; // VarDecl kInternalFieldCount
struct _ast5635
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast13>, _str658>, _ast2435>>> {
}; // VarDecl kEmbedderFieldCount
struct _ast5636
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str750>, _ast5637>,
                     Pack<>>,
          Pack<_ast5638>>,
      DeclContext<Pack<_ast5639,
                       _ast5640,
                       _ast5644,
                       _ast5646,
                       _ast5647,
                       _ast5651,
                       _ast5654,
                       _ast5657,
                       _ast5658>> {}; // CXXRecordDecl ArrayBufferView
struct _ast5637 : StructOrClassRecordType<RecordType<_ast5636>> {
}; // RecordType v8::ArrayBufferView
struct _ast5638 : CXXBaseSpecifier<_ast58> {
}; // CXXBaseSpecifier Record v8::Object
struct _ast5639
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5636>, _str750>, _ast5637>,
                     None>,
          None> {}; // CXXRecordDecl ArrayBufferView
struct _ast5640
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5636>, _str751>, _ast5641>>,
              Pack<>>>,
          _ast5643> {}; // CXXMethodDecl Buffer
struct _ast5641 : FunctionProtoType<_ast5642, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::ArrayBuffer> ()
struct _ast5643 : PointerType<_ast5637> {}; // PointerType v8::ArrayBufferView *
struct _ast5644
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5636>, _str752>, _ast5645>>,
              Pack<>>>,
          _ast5643> {}; // CXXMethodDecl ByteOffset
struct _ast5645 : FunctionProtoType<_ast3254, Pack<>, UnqualifiedType> {
}; // FunctionProtoType size_t ()
struct _ast5646
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5636>, _str739>, _ast5645>>,
              Pack<>>>,
          _ast5643> {}; // CXXMethodDecl ByteLength
struct _ast5647
    : DeclContext<Pack<_ast5648, _ast5649>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5636>, _str753>, _ast5650>>,
              Pack<_ast5648, _ast5649>>>,
          _ast5643> {}; // CXXMethodDecl CopyContents
struct _ast5648
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5647>, _str135>, _ast2223>>>> {
}; // ParmVarDecl dest
struct _ast5649
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5647>, _str742>, _ast3254>>>> {
}; // ParmVarDecl byte_length
struct _ast5650
    : FunctionProtoType<_ast3254, Pack<_ast2223, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType size_t (void *, size_t)
struct _ast5651
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5636>, _str754>, _ast128>>,
              Pack<>>>,
          _ast5652> {}; // CXXMethodDecl HasBuffer
struct _ast5652 : PointerType<_ast5653> {
}; // PointerType const v8::ArrayBufferView *
struct _ast5653 : ConstQualifiedType<_ast5637> {
}; // RecordType const v8::ArrayBufferView
struct _ast5654
    : DeclContext<Pack<_ast5655>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5636>, _str58>, _ast5656>>,
          Pack<_ast5655>>> {}; // CXXMethodDecl Cast
struct _ast5655
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5654>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5656 : FunctionProtoType<_ast5643, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::ArrayBufferView *(v8::Value *)
struct _ast5657
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5636>, _str749>, _ast2435>>> {
}; // VarDecl kInternalFieldCount
struct _ast5658
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5636>, _str658>, _ast2435>>> {
}; // VarDecl kEmbedderFieldCount
struct _ast5659
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str755>, _ast5660>,
                     Pack<>>,
          Pack<_ast5661>>,
      DeclContext<Pack<_ast5662, _ast5663, _ast5665, _ast5667>> {
}; // CXXRecordDecl TypedArray
struct _ast5660 : StructOrClassRecordType<RecordType<_ast5659>> {
}; // RecordType v8::TypedArray
struct _ast5661 : CXXBaseSpecifier<_ast5637> {
}; // CXXBaseSpecifier Record v8::ArrayBufferView
struct _ast5662
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5659>, _str755>, _ast5660>,
                     None>,
          None> {}; // CXXRecordDecl TypedArray
struct _ast5663
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5659>, _str459>, _ast5664>>> {
};                                                 // VarDecl kMaxLength
struct _ast5664 : ConstQualifiedType<_ast3254> {}; // TypedefType const size_t
struct _ast5665
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5659>, _str166>, _ast5645>>,
              Pack<>>>,
          _ast5666> {};                     // CXXMethodDecl Length
struct _ast5666 : PointerType<_ast5660> {}; // PointerType v8::TypedArray *
struct _ast5667
    : DeclContext<Pack<_ast5668>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5659>, _str58>, _ast5669>>,
          Pack<_ast5668>>> {}; // CXXMethodDecl Cast
struct _ast5668
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5667>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5669 : FunctionProtoType<_ast5666, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::TypedArray *(v8::Value *)
struct _ast5670
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str756>, _ast5671>,
                     Pack<>>,
          Pack<_ast5672>>,
      DeclContext<Pack<_ast5673, _ast5674, _ast5681, _ast5688>> {
}; // CXXRecordDecl Uint8Array
struct _ast5671 : StructOrClassRecordType<RecordType<_ast5670>> {
}; // RecordType v8::Uint8Array
struct _ast5672 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5673
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5670>, _str756>, _ast5671>,
                     None>,
          None> {}; // CXXRecordDecl Uint8Array
struct _ast5674
    : DeclContext<Pack<_ast5675, _ast5677, _ast5678>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5670>, _str61>, _ast5679>>,
          Pack<_ast5675, _ast5677, _ast5678>>> {}; // CXXMethodDecl New
struct _ast5675
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5674>, _str356>, _ast5676>>>> {
}; // ParmVarDecl array_buffer
struct _ast5677
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5674>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5678
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5674>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5679 : FunctionProtoType<_ast5680,
                                    Pack<_ast5676, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5681
    : DeclContext<Pack<_ast5682, _ast5684, _ast5685>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5670>, _str61>, _ast5686>>,
          Pack<_ast5682, _ast5684, _ast5685>>> {}; // CXXMethodDecl New
struct _ast5682
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5681>, _str340>, _ast5683>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5684
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5681>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5685
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5681>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5686 : FunctionProtoType<_ast5687,
                                    Pack<_ast5683, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5688
    : DeclContext<Pack<_ast5689>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5670>, _str58>, _ast5690>>,
          Pack<_ast5689>>> {}; // CXXMethodDecl Cast
struct _ast5689
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5688>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5690 : FunctionProtoType<_ast5691, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Uint8Array *(v8::Value *)
struct _ast5691 : PointerType<_ast5671> {}; // PointerType v8::Uint8Array *
struct _ast5692
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str758>, _ast5693>,
                     Pack<>>,
          Pack<_ast5694>>,
      DeclContext<Pack<_ast5695, _ast5696, _ast5703, _ast5710>> {
}; // CXXRecordDecl Uint8ClampedArray
struct _ast5693 : StructOrClassRecordType<RecordType<_ast5692>> {
}; // RecordType v8::Uint8ClampedArray
struct _ast5694 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5695
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5692>, _str758>, _ast5693>,
                     None>,
          None> {}; // CXXRecordDecl Uint8ClampedArray
struct _ast5696
    : DeclContext<Pack<_ast5697, _ast5699, _ast5700>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5692>, _str61>, _ast5701>>,
          Pack<_ast5697, _ast5699, _ast5700>>> {}; // CXXMethodDecl New
struct _ast5697
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5696>, _str356>, _ast5698>>>> {
}; // ParmVarDecl array_buffer
struct _ast5699
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5696>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5700
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5696>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5701 : FunctionProtoType<_ast5702,
                                    Pack<_ast5698, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>,
   // size_t, size_t)
struct _ast5703
    : DeclContext<Pack<_ast5704, _ast5706, _ast5707>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5692>, _str61>, _ast5708>>,
          Pack<_ast5704, _ast5706, _ast5707>>> {}; // CXXMethodDecl New
struct _ast5704
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5703>, _str340>, _ast5705>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5706
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5703>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5707
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5703>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5708 : FunctionProtoType<_ast5709,
                                    Pack<_ast5705, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint8ClampedArray>
   // (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5710
    : DeclContext<Pack<_ast5711>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5692>, _str58>, _ast5712>>,
          Pack<_ast5711>>> {}; // CXXMethodDecl Cast
struct _ast5711
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5710>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5712 : FunctionProtoType<_ast5713, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Uint8ClampedArray *(v8::Value *)
struct _ast5713 : PointerType<_ast5693> {
}; // PointerType v8::Uint8ClampedArray *
struct _ast5714
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str759>, _ast5715>,
                     Pack<>>,
          Pack<_ast5716>>,
      DeclContext<Pack<_ast5717, _ast5718, _ast5725, _ast5732>> {
}; // CXXRecordDecl Int8Array
struct _ast5715 : StructOrClassRecordType<RecordType<_ast5714>> {
}; // RecordType v8::Int8Array
struct _ast5716 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5717
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5714>, _str759>, _ast5715>,
                     None>,
          None> {}; // CXXRecordDecl Int8Array
struct _ast5718
    : DeclContext<Pack<_ast5719, _ast5721, _ast5722>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5714>, _str61>, _ast5723>>,
          Pack<_ast5719, _ast5721, _ast5722>>> {}; // CXXMethodDecl New
struct _ast5719
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5718>, _str356>, _ast5720>>>> {
}; // ParmVarDecl array_buffer
struct _ast5721
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5718>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5722
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5718>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5723 : FunctionProtoType<_ast5724,
                                    Pack<_ast5720, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5725
    : DeclContext<Pack<_ast5726, _ast5728, _ast5729>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5714>, _str61>, _ast5730>>,
          Pack<_ast5726, _ast5728, _ast5729>>> {}; // CXXMethodDecl New
struct _ast5726
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5725>, _str340>, _ast5727>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5728
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5725>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5729
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5725>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5730 : FunctionProtoType<_ast5731,
                                    Pack<_ast5727, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5732
    : DeclContext<Pack<_ast5733>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5714>, _str58>, _ast5734>>,
          Pack<_ast5733>>> {}; // CXXMethodDecl Cast
struct _ast5733
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5732>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5734 : FunctionProtoType<_ast5735, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Int8Array *(v8::Value *)
struct _ast5735 : PointerType<_ast5715> {}; // PointerType v8::Int8Array *
struct _ast5736
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str760>, _ast5737>,
                     Pack<>>,
          Pack<_ast5738>>,
      DeclContext<Pack<_ast5739, _ast5740, _ast5747, _ast5754>> {
}; // CXXRecordDecl Uint16Array
struct _ast5737 : StructOrClassRecordType<RecordType<_ast5736>> {
}; // RecordType v8::Uint16Array
struct _ast5738 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5739
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5736>, _str760>, _ast5737>,
                     None>,
          None> {}; // CXXRecordDecl Uint16Array
struct _ast5740
    : DeclContext<Pack<_ast5741, _ast5743, _ast5744>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5736>, _str61>, _ast5745>>,
          Pack<_ast5741, _ast5743, _ast5744>>> {}; // CXXMethodDecl New
struct _ast5741
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5740>, _str356>, _ast5742>>>> {
}; // ParmVarDecl array_buffer
struct _ast5743
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5740>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5744
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5740>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5745 : FunctionProtoType<_ast5746,
                                    Pack<_ast5742, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5747
    : DeclContext<Pack<_ast5748, _ast5750, _ast5751>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5736>, _str61>, _ast5752>>,
          Pack<_ast5748, _ast5750, _ast5751>>> {}; // CXXMethodDecl New
struct _ast5748
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5747>, _str340>, _ast5749>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5750
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5747>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5751
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5747>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5752 : FunctionProtoType<_ast5753,
                                    Pack<_ast5749, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5754
    : DeclContext<Pack<_ast5755>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5736>, _str58>, _ast5756>>,
          Pack<_ast5755>>> {}; // CXXMethodDecl Cast
struct _ast5755
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5754>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5756 : FunctionProtoType<_ast5757, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Uint16Array *(v8::Value *)
struct _ast5757 : PointerType<_ast5737> {}; // PointerType v8::Uint16Array *
struct _ast5758
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str761>, _ast5759>,
                     Pack<>>,
          Pack<_ast5760>>,
      DeclContext<Pack<_ast5761, _ast5762, _ast5769, _ast5776>> {
}; // CXXRecordDecl Int16Array
struct _ast5759 : StructOrClassRecordType<RecordType<_ast5758>> {
}; // RecordType v8::Int16Array
struct _ast5760 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5761
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5758>, _str761>, _ast5759>,
                     None>,
          None> {}; // CXXRecordDecl Int16Array
struct _ast5762
    : DeclContext<Pack<_ast5763, _ast5765, _ast5766>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5758>, _str61>, _ast5767>>,
          Pack<_ast5763, _ast5765, _ast5766>>> {}; // CXXMethodDecl New
struct _ast5763
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5762>, _str356>, _ast5764>>>> {
}; // ParmVarDecl array_buffer
struct _ast5765
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5762>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5766
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5762>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5767 : FunctionProtoType<_ast5768,
                                    Pack<_ast5764, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5769
    : DeclContext<Pack<_ast5770, _ast5772, _ast5773>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5758>, _str61>, _ast5774>>,
          Pack<_ast5770, _ast5772, _ast5773>>> {}; // CXXMethodDecl New
struct _ast5770
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5769>, _str340>, _ast5771>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5772
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5769>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5773
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5769>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5774 : FunctionProtoType<_ast5775,
                                    Pack<_ast5771, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5776
    : DeclContext<Pack<_ast5777>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5758>, _str58>, _ast5778>>,
          Pack<_ast5777>>> {}; // CXXMethodDecl Cast
struct _ast5777
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5776>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5778 : FunctionProtoType<_ast5779, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Int16Array *(v8::Value *)
struct _ast5779 : PointerType<_ast5759> {}; // PointerType v8::Int16Array *
struct _ast5780
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str762>, _ast5781>,
                     Pack<>>,
          Pack<_ast5782>>,
      DeclContext<Pack<_ast5783, _ast5784, _ast5791, _ast5798>> {
}; // CXXRecordDecl Uint32Array
struct _ast5781 : StructOrClassRecordType<RecordType<_ast5780>> {
}; // RecordType v8::Uint32Array
struct _ast5782 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5783
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5780>, _str762>, _ast5781>,
                     None>,
          None> {}; // CXXRecordDecl Uint32Array
struct _ast5784
    : DeclContext<Pack<_ast5785, _ast5787, _ast5788>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5780>, _str61>, _ast5789>>,
          Pack<_ast5785, _ast5787, _ast5788>>> {}; // CXXMethodDecl New
struct _ast5785
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5784>, _str356>, _ast5786>>>> {
}; // ParmVarDecl array_buffer
struct _ast5787
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5784>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5788
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5784>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5789 : FunctionProtoType<_ast5790,
                                    Pack<_ast5786, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5791
    : DeclContext<Pack<_ast5792, _ast5794, _ast5795>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5780>, _str61>, _ast5796>>,
          Pack<_ast5792, _ast5794, _ast5795>>> {}; // CXXMethodDecl New
struct _ast5792
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5791>, _str340>, _ast5793>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5794
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5791>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5795
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5791>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5796 : FunctionProtoType<_ast5797,
                                    Pack<_ast5793, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5798
    : DeclContext<Pack<_ast5799>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5780>, _str58>, _ast5800>>,
          Pack<_ast5799>>> {}; // CXXMethodDecl Cast
struct _ast5799
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5798>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5800 : FunctionProtoType<_ast5801, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Uint32Array *(v8::Value *)
struct _ast5801 : PointerType<_ast5781> {}; // PointerType v8::Uint32Array *
struct _ast5802
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str763>, _ast5803>,
                     Pack<>>,
          Pack<_ast5804>>,
      DeclContext<Pack<_ast5805, _ast5806, _ast5813, _ast5820>> {
}; // CXXRecordDecl Int32Array
struct _ast5803 : StructOrClassRecordType<RecordType<_ast5802>> {
}; // RecordType v8::Int32Array
struct _ast5804 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5805
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5802>, _str763>, _ast5803>,
                     None>,
          None> {}; // CXXRecordDecl Int32Array
struct _ast5806
    : DeclContext<Pack<_ast5807, _ast5809, _ast5810>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5802>, _str61>, _ast5811>>,
          Pack<_ast5807, _ast5809, _ast5810>>> {}; // CXXMethodDecl New
struct _ast5807
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5806>, _str356>, _ast5808>>>> {
}; // ParmVarDecl array_buffer
struct _ast5809
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5806>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5810
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5806>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5811 : FunctionProtoType<_ast5812,
                                    Pack<_ast5808, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5813
    : DeclContext<Pack<_ast5814, _ast5816, _ast5817>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5802>, _str61>, _ast5818>>,
          Pack<_ast5814, _ast5816, _ast5817>>> {}; // CXXMethodDecl New
struct _ast5814
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5813>, _str340>, _ast5815>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5816
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5813>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5817
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5813>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5818 : FunctionProtoType<_ast5819,
                                    Pack<_ast5815, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5820
    : DeclContext<Pack<_ast5821>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5802>, _str58>, _ast5822>>,
          Pack<_ast5821>>> {}; // CXXMethodDecl Cast
struct _ast5821
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5820>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5822 : FunctionProtoType<_ast5823, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Int32Array *(v8::Value *)
struct _ast5823 : PointerType<_ast5803> {}; // PointerType v8::Int32Array *
struct _ast5824
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str764>, _ast5825>,
                     Pack<>>,
          Pack<_ast5826>>,
      DeclContext<Pack<_ast5827, _ast5828, _ast5835, _ast5842>> {
}; // CXXRecordDecl Float32Array
struct _ast5825 : StructOrClassRecordType<RecordType<_ast5824>> {
}; // RecordType v8::Float32Array
struct _ast5826 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5827
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5824>, _str764>, _ast5825>,
                     None>,
          None> {}; // CXXRecordDecl Float32Array
struct _ast5828
    : DeclContext<Pack<_ast5829, _ast5831, _ast5832>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5824>, _str61>, _ast5833>>,
          Pack<_ast5829, _ast5831, _ast5832>>> {}; // CXXMethodDecl New
struct _ast5829
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5828>, _str356>, _ast5830>>>> {
}; // ParmVarDecl array_buffer
struct _ast5831
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5828>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5832
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5828>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5833 : FunctionProtoType<_ast5834,
                                    Pack<_ast5830, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5835
    : DeclContext<Pack<_ast5836, _ast5838, _ast5839>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5824>, _str61>, _ast5840>>,
          Pack<_ast5836, _ast5838, _ast5839>>> {}; // CXXMethodDecl New
struct _ast5836
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5835>, _str340>, _ast5837>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5838
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5835>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5839
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5835>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5840 : FunctionProtoType<_ast5841,
                                    Pack<_ast5837, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5842
    : DeclContext<Pack<_ast5843>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5824>, _str58>, _ast5844>>,
          Pack<_ast5843>>> {}; // CXXMethodDecl Cast
struct _ast5843
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5842>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5844 : FunctionProtoType<_ast5845, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Float32Array *(v8::Value *)
struct _ast5845 : PointerType<_ast5825> {}; // PointerType v8::Float32Array *
struct _ast5846
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str765>, _ast5847>,
                     Pack<>>,
          Pack<_ast5848>>,
      DeclContext<Pack<_ast5849, _ast5850, _ast5857, _ast5864>> {
}; // CXXRecordDecl Float64Array
struct _ast5847 : StructOrClassRecordType<RecordType<_ast5846>> {
}; // RecordType v8::Float64Array
struct _ast5848 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5849
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5846>, _str765>, _ast5847>,
                     None>,
          None> {}; // CXXRecordDecl Float64Array
struct _ast5850
    : DeclContext<Pack<_ast5851, _ast5853, _ast5854>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5846>, _str61>, _ast5855>>,
          Pack<_ast5851, _ast5853, _ast5854>>> {}; // CXXMethodDecl New
struct _ast5851
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5850>, _str356>, _ast5852>>>> {
}; // ParmVarDecl array_buffer
struct _ast5853
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5850>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5854
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5850>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5855 : FunctionProtoType<_ast5856,
                                    Pack<_ast5852, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5857
    : DeclContext<Pack<_ast5858, _ast5860, _ast5861>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5846>, _str61>, _ast5862>>,
          Pack<_ast5858, _ast5860, _ast5861>>> {}; // CXXMethodDecl New
struct _ast5858
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5857>, _str340>, _ast5859>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5860
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5857>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5861
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5857>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5862 : FunctionProtoType<_ast5863,
                                    Pack<_ast5859, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5864
    : DeclContext<Pack<_ast5865>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5846>, _str58>, _ast5866>>,
          Pack<_ast5865>>> {}; // CXXMethodDecl Cast
struct _ast5865
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5864>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5866 : FunctionProtoType<_ast5867, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Float64Array *(v8::Value *)
struct _ast5867 : PointerType<_ast5847> {}; // PointerType v8::Float64Array *
struct _ast5868
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str766>, _ast5869>,
                     Pack<>>,
          Pack<_ast5870>>,
      DeclContext<Pack<_ast5871, _ast5872, _ast5879, _ast5886>> {
}; // CXXRecordDecl BigInt64Array
struct _ast5869 : StructOrClassRecordType<RecordType<_ast5868>> {
}; // RecordType v8::BigInt64Array
struct _ast5870 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5871
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5868>, _str766>, _ast5869>,
                     None>,
          None> {}; // CXXRecordDecl BigInt64Array
struct _ast5872
    : DeclContext<Pack<_ast5873, _ast5875, _ast5876>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5868>, _str61>, _ast5877>>,
          Pack<_ast5873, _ast5875, _ast5876>>> {}; // CXXMethodDecl New
struct _ast5873
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5872>, _str356>, _ast5874>>>> {
}; // ParmVarDecl array_buffer
struct _ast5875
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5872>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5876
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5872>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5877 : FunctionProtoType<_ast5878,
                                    Pack<_ast5874, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>,
   // size_t, size_t)
struct _ast5879
    : DeclContext<Pack<_ast5880, _ast5882, _ast5883>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5868>, _str61>, _ast5884>>,
          Pack<_ast5880, _ast5882, _ast5883>>> {}; // CXXMethodDecl New
struct _ast5880
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5879>, _str340>, _ast5881>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5882
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5879>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5883
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5879>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5884 : FunctionProtoType<_ast5885,
                                    Pack<_ast5881, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5886
    : DeclContext<Pack<_ast5887>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5868>, _str58>, _ast5888>>,
          Pack<_ast5887>>> {}; // CXXMethodDecl Cast
struct _ast5887
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5886>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5888 : FunctionProtoType<_ast5889, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::BigInt64Array *(v8::Value *)
struct _ast5889 : PointerType<_ast5869> {}; // PointerType v8::BigInt64Array *
struct _ast5890
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str767>, _ast5891>,
                     Pack<>>,
          Pack<_ast5892>>,
      DeclContext<Pack<_ast5893, _ast5894, _ast5901, _ast5908>> {
}; // CXXRecordDecl BigUint64Array
struct _ast5891 : StructOrClassRecordType<RecordType<_ast5890>> {
}; // RecordType v8::BigUint64Array
struct _ast5892 : CXXBaseSpecifier<_ast5660> {
}; // CXXBaseSpecifier Record v8::TypedArray
struct _ast5893
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5890>, _str767>, _ast5891>,
                     None>,
          None> {}; // CXXRecordDecl BigUint64Array
struct _ast5894
    : DeclContext<Pack<_ast5895, _ast5897, _ast5898>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5890>, _str61>, _ast5899>>,
          Pack<_ast5895, _ast5897, _ast5898>>> {}; // CXXMethodDecl New
struct _ast5895
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5894>, _str356>, _ast5896>>>> {
}; // ParmVarDecl array_buffer
struct _ast5897
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5894>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5898
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5894>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5899 : FunctionProtoType<_ast5900,
                                    Pack<_ast5896, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>,
   // size_t, size_t)
struct _ast5901
    : DeclContext<Pack<_ast5902, _ast5904, _ast5905>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5890>, _str61>, _ast5906>>,
          Pack<_ast5902, _ast5904, _ast5905>>> {}; // CXXMethodDecl New
struct _ast5902
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5901>, _str340>, _ast5903>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5904
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5901>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5905
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5901>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5906 : FunctionProtoType<_ast5907,
                                    Pack<_ast5903, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5908
    : DeclContext<Pack<_ast5909>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5890>, _str58>, _ast5910>>,
          Pack<_ast5909>>> {}; // CXXMethodDecl Cast
struct _ast5909
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5908>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5910 : FunctionProtoType<_ast5911, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::BigUint64Array *(v8::Value *)
struct _ast5911 : PointerType<_ast5891> {}; // PointerType v8::BigUint64Array *
struct _ast5912
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str768>, _ast5913>,
                     Pack<>>,
          Pack<_ast5914>>,
      DeclContext<Pack<_ast5915, _ast5916, _ast5923, _ast5930>> {
}; // CXXRecordDecl DataView
struct _ast5913 : StructOrClassRecordType<RecordType<_ast5912>> {
}; // RecordType v8::DataView
struct _ast5914 : CXXBaseSpecifier<_ast5637> {
}; // CXXBaseSpecifier Record v8::ArrayBufferView
struct _ast5915
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5912>, _str768>, _ast5913>,
                     None>,
          None> {}; // CXXRecordDecl DataView
struct _ast5916
    : DeclContext<Pack<_ast5917, _ast5919, _ast5920>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5912>, _str61>, _ast5921>>,
          Pack<_ast5917, _ast5919, _ast5920>>> {}; // CXXMethodDecl New
struct _ast5917
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5916>, _str356>, _ast5918>>>> {
}; // ParmVarDecl array_buffer
struct _ast5919
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5916>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5920
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5916>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5921 : FunctionProtoType<_ast5922,
                                    Pack<_ast5918, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t,
   // size_t)
struct _ast5923
    : DeclContext<Pack<_ast5924, _ast5926, _ast5927>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5912>, _str61>, _ast5928>>,
          Pack<_ast5924, _ast5926, _ast5927>>> {}; // CXXMethodDecl New
struct _ast5924
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5923>, _str340>, _ast5925>>>> {
}; // ParmVarDecl shared_array_buffer
struct _ast5926
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5923>, _str757>, _ast3254>>>> {
}; // ParmVarDecl byte_offset
struct _ast5927
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5923>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast5928 : FunctionProtoType<_ast5929,
                                    Pack<_ast5925, _ast3254, _ast3254>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::DataView> (Local<v8::SharedArrayBuffer>,
   // size_t, size_t)
struct _ast5930
    : DeclContext<Pack<_ast5931>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast5912>, _str58>, _ast5932>>,
          Pack<_ast5931>>> {}; // CXXMethodDecl Cast
struct _ast5931
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5930>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5932 : FunctionProtoType<_ast5933, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::DataView *(v8::Value *)
struct _ast5933 : PointerType<_ast5913> {}; // PointerType v8::DataView *
struct _ast5934
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast77>, _str35>, _ast78>,
                     None>,
          None> {}; // CXXRecordDecl SharedArrayBuffer
struct _ast5935
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast77>, _str728>, _ast5936>,
                     Pack<_ast5937,
                          _ast5938,
                          _ast5939,
                          _ast5940,
                          _ast5941,
                          _ast5943,
                          _ast5946>>,
          Pack<>>,
      DeclContext<Pack<_ast5947,
                       _ast5948,
                       _ast5945,
                       _ast5950,
                       _ast5952,
                       _ast5955,
                       _ast5956,
                       _ast5958,
                       _ast5959,
                       _ast5960,
                       _ast5962,
                       _ast5937,
                       _ast5938,
                       _ast5939,
                       _ast5940,
                       _ast5941,
                       _ast5943,
                       _ast5946>> {}; // CXXRecordDecl Contents
struct _ast5936 : StructOrClassRecordType<RecordType<_ast5935>> {
}; // RecordType v8::SharedArrayBuffer::Contents
struct _ast5937
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str263>, _ast2223>>> {
}; // FieldDecl data_
struct _ast5938
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str729>, _ast3254>>> {
}; // FieldDecl byte_length_
struct _ast5939
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str730>, _ast2223>>> {
}; // FieldDecl allocation_base_
struct _ast5940
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str731>, _ast3254>>> {
}; // FieldDecl allocation_length_
struct _ast5941
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str732>, _ast5942>>> {
}; // FieldDecl allocation_mode_
struct _ast5943
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str734>, _ast5944>>> {
}; // FieldDecl deleter_
struct _ast5944 : TypedefType<_ast5945> {
}; // TypedefType v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ast5945
    : TypeAliasDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast5935>, _str733>, _ast5944>>> {
}; // TypeAliasDecl DeleterCallback
struct _ast5946
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5935>, _str735>, _ast2223>>> {
}; // FieldDecl deleter_data_
struct _ast5947
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast5935>, _str728>, _ast5936>,
                     None>,
          None> {}; // CXXRecordDecl Contents
struct _ast5948
    : TypeAliasDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast5935>, _str722>, _ast5949>>> {
}; // TypeAliasDecl Allocator
struct _ast5949 : TypedefType<_ast5948> {
}; // TypedefType v8::SharedArrayBuffer::Contents::Allocator
struct _ast5950
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str728>, _ast113>>,
              Pack<>>>,
          _ast5951>> {}; // CXXConstructorDecl Contents
struct _ast5951 : PointerType<_ast5936> {
}; // PointerType v8::SharedArrayBuffer::Contents *
struct _ast5952
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str736>, _ast5595>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl AllocationBase
struct _ast5953 : PointerType<_ast5954> {
}; // PointerType const v8::SharedArrayBuffer::Contents *
struct _ast5954 : ConstQualifiedType<_ast5936> {
}; // RecordType const v8::SharedArrayBuffer::Contents
struct _ast5955
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str737>, _ast4027>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl AllocationLength
struct _ast5956
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str738>, _ast5957>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl AllocationMode
struct _ast5957 : FunctionProtoType<_ast5942, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5958
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str3>, _ast5595>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl Data
struct _ast5959
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str739>, _ast4027>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl ByteLength
struct _ast5960
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str740>, _ast5961>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl Deleter
struct _ast5961 : FunctionProtoType<_ast5944, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::SharedArrayBuffer::Contents::DeleterCallback ()
   // const
struct _ast5962
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast5935>, _str741>, _ast5595>>,
              Pack<>>>,
          _ast5953> {}; // CXXMethodDecl DeleterData
struct _ast5963
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast77>, _str739>, _ast4027>>,
              Pack<>>>,
          _ast5964> {}; // CXXMethodDecl ByteLength
struct _ast5964 : PointerType<_ast5965> {
}; // PointerType const v8::SharedArrayBuffer *
struct _ast5965 : ConstQualifiedType<_ast78> {
}; // RecordType const v8::SharedArrayBuffer
struct _ast5966
    : DeclContext<Pack<_ast5967, _ast5968>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast77>, _str61>, _ast5969>>,
          Pack<_ast5967, _ast5968>>> {}; // CXXMethodDecl New
struct _ast5967
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5966>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5968
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5966>, _str742>, _ast3254>>>> {
}; // ParmVarDecl byte_length
struct _ast5969
    : FunctionProtoType<_ast5970, Pack<_ast184, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _ast5971
    : DeclContext<Pack<_ast5972, _ast5973, _ast5974, _ast5975>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast77>, _str61>, _ast5976>>,
          Pack<_ast5972, _ast5973, _ast5974, _ast5975>>> {
}; // CXXMethodDecl New
struct _ast5972
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5971>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5973
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5971>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast5974
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5971>, _str742>, _ast3254>>>> {
}; // ParmVarDecl byte_length
struct _ast5975
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5971>, _str358>, _ast5619>>>> {
}; // ParmVarDecl mode
struct _ast5976 : FunctionProtoType<_ast5977,
                                    Pack<_ast184, _ast2223, _ast3254, _ast5619>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, void *,
   // size_t, v8::ArrayBufferCreationMode)
struct _ast5978
    : DeclContext<Pack<_ast5979, _ast5980, _ast5984>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast77>, _str61>, _ast5985>>,
          Pack<_ast5979, _ast5980, _ast5984>>> {}; // CXXMethodDecl New
struct _ast5979
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5978>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast5980
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast5978>, _str62>, _ast5981>>>> {
}; // ParmVarDecl
struct _ast5981 : LValueReferenceType<ReferenceType<_ast5982>> {
}; // LValueReferenceType const SharedArrayBuffer::Contents &
struct _ast5982 : ConstQualifiedType<_ast5983> {
}; // ElaboratedType const SharedArrayBuffer::Contents
struct _ast5984
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5978>, _str358>, _ast5619>>>> {
}; // ParmVarDecl mode
struct _ast5985 : FunctionProtoType<_ast5986,
                                    Pack<_ast184, _ast5981, _ast5619>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, const
   // SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _ast5987
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast77>, _str397>, _ast128>>,
              Pack<>>>,
          _ast5964> {}; // CXXMethodDecl IsExternal
struct _ast5988
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast77>, _str747>, _ast5989>>,
              Pack<>>>,
          _ast5990> {}; // CXXMethodDecl Externalize
struct _ast5989 : FunctionProtoType<_ast5936, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::SharedArrayBuffer::Contents ()
struct _ast5990 : PointerType<_ast78> {}; // PointerType v8::SharedArrayBuffer *
struct _ast5991
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast77>, _str748>, _ast5989>>,
              Pack<>>>,
          _ast5990> {}; // CXXMethodDecl GetContents
struct _ast5992
    : DeclContext<Pack<_ast5993>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast77>, _str58>, _ast5994>>,
          Pack<_ast5993>>> {}; // CXXMethodDecl Cast
struct _ast5993
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5992>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast5994 : FunctionProtoType<_ast5990, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::SharedArrayBuffer *(v8::Value *)
struct _ast5995
    : VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast77>, _str749>, _ast2435>>> {
}; // VarDecl kInternalFieldCount
struct _ast5996
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast23>, _str12>, _ast24>,
                     None>,
          None> {}; // CXXRecordDecl Date
struct _ast5997
    : DeclContext<Pack<_ast5998, _ast6000>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast23>, _str61>, _ast6001>>,
          Pack<_ast5998, _ast6000>>> {}; // CXXMethodDecl New
struct _ast5998
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5997>, _str229>, _ast5999>>>> {
}; // ParmVarDecl context
struct _ast6000
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5997>, _str769>, _ast3643>>>> {
}; // ParmVarDecl time
struct _ast6001
    : FunctionProtoType<_ast6002, Pack<_ast5999, _ast3643>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _ast6003
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast23>, _str770>, _ast4270>>,
              Pack<>>>,
          _ast6004> {};                          // CXXMethodDecl ValueOf
struct _ast6004 : PointerType<_ast6005> {};      // PointerType const v8::Date *
struct _ast6005 : ConstQualifiedType<_ast24> {}; // RecordType const v8::Date
struct _ast6006
    : DeclContext<Pack<_ast6007>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast23>, _str58>, _ast6008>>,
          Pack<_ast6007>>> {}; // CXXMethodDecl Cast
struct _ast6007
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6006>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6008 : FunctionProtoType<_ast6009, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::Date *(v8::Value *)
struct _ast6009 : PointerType<_ast24> {}; // PointerType v8::Date *
struct _ast6010
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast55>, _str24>, _ast56>,
                     None>,
          None> {}; // CXXRecordDecl NumberObject
struct _ast6011
    : DeclContext<Pack<_ast6012, _ast6013>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast55>, _str61>, _ast6014>>,
          Pack<_ast6012, _ast6013>>> {}; // CXXMethodDecl New
struct _ast6012
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6011>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6013
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6011>, _str153>, _ast3643>>>> {
}; // ParmVarDecl value
struct _ast6014
    : FunctionProtoType<_ast6015, Pack<_ast184, _ast3643>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, double)
struct _ast6016
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast55>, _str770>, _ast4270>>,
              Pack<>>>,
          _ast6017> {}; // CXXMethodDecl ValueOf
struct _ast6017 : PointerType<_ast6018> {
}; // PointerType const v8::NumberObject *
struct _ast6018 : ConstQualifiedType<_ast56> {
}; // RecordType const v8::NumberObject
struct _ast6019
    : DeclContext<Pack<_ast6020>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast55>, _str58>, _ast6021>>,
          Pack<_ast6020>>> {}; // CXXMethodDecl Cast
struct _ast6020
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6019>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6021 : FunctionProtoType<_ast6022, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::NumberObject *(v8::Value *)
struct _ast6022 : PointerType<_ast56> {}; // PointerType v8::NumberObject *
struct _ast6023
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast17>, _str9>, _ast18>,
                     None>,
          None> {}; // CXXRecordDecl BigIntObject
struct _ast6024
    : DeclContext<Pack<_ast6025, _ast6026>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast17>, _str61>, _ast6027>>,
          Pack<_ast6025, _ast6026>>> {}; // CXXMethodDecl New
struct _ast6025
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6024>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6026
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6024>, _str153>, _ast4296>>>> {
}; // ParmVarDecl value
struct _ast6027
    : FunctionProtoType<_ast6028, Pack<_ast184, _ast4296>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, int64_t)
struct _ast6029
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast17>, _str770>, _ast6030>>,
              Pack<>>>,
          _ast6032> {}; // CXXMethodDecl ValueOf
struct _ast6030 : FunctionProtoType<_ast6031, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::BigInt> () const
struct _ast6032 : PointerType<_ast6033> {
}; // PointerType const v8::BigIntObject *
struct _ast6033 : ConstQualifiedType<_ast18> {
}; // RecordType const v8::BigIntObject
struct _ast6034
    : DeclContext<Pack<_ast6035>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast17>, _str58>, _ast6036>>,
          Pack<_ast6035>>> {}; // CXXMethodDecl Cast
struct _ast6035
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6034>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6036 : FunctionProtoType<_ast6037, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::BigIntObject *(v8::Value *)
struct _ast6037 : PointerType<_ast18> {}; // PointerType v8::BigIntObject *
struct _ast6038
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast21>, _str11>, _ast22>,
                     None>,
          None> {}; // CXXRecordDecl BooleanObject
struct _ast6039
    : DeclContext<Pack<_ast6040, _ast6041>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast21>, _str61>, _ast6042>>,
          Pack<_ast6040, _ast6041>>> {}; // CXXMethodDecl New
struct _ast6040
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6039>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6041
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6039>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast6042
    : FunctionProtoType<_ast6043, Pack<_ast184, _ast129>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, bool)
struct _ast6044
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast21>, _str770>, _ast128>>,
              Pack<>>>,
          _ast6045> {}; // CXXMethodDecl ValueOf
struct _ast6045 : PointerType<_ast6046> {
}; // PointerType const v8::BooleanObject *
struct _ast6046 : ConstQualifiedType<_ast22> {
}; // RecordType const v8::BooleanObject
struct _ast6047
    : DeclContext<Pack<_ast6048>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast21>, _str58>, _ast6049>>,
          Pack<_ast6048>>> {}; // CXXMethodDecl Cast
struct _ast6048
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6047>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6049 : FunctionProtoType<_ast6050, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::BooleanObject *(v8::Value *)
struct _ast6050 : PointerType<_ast22> {}; // PointerType v8::BooleanObject *
struct _ast6051
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast89>, _str41>, _ast90>,
                     None>,
          None> {}; // CXXRecordDecl StringObject
struct _ast6052
    : DeclContext<Pack<_ast6053, _ast6054>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast89>, _str61>, _ast6056>>,
          Pack<_ast6053, _ast6054>>> {}; // CXXMethodDecl New
struct _ast6053
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6052>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6054
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6052>, _str153>, _ast6055>>>> {
}; // ParmVarDecl value
struct _ast6056
    : FunctionProtoType<_ast6057, Pack<_ast184, _ast6055>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _ast6058
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast89>, _str770>, _ast6059>>,
              Pack<>>>,
          _ast6061> {}; // CXXMethodDecl ValueOf
struct _ast6059 : FunctionProtoType<_ast6060, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> () const
struct _ast6061 : PointerType<_ast6062> {
}; // PointerType const v8::StringObject *
struct _ast6062 : ConstQualifiedType<_ast90> {
}; // RecordType const v8::StringObject
struct _ast6063
    : DeclContext<Pack<_ast6064>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast89>, _str58>, _ast6065>>,
          Pack<_ast6064>>> {}; // CXXMethodDecl Cast
struct _ast6064
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6063>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6065 : FunctionProtoType<_ast6066, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::StringObject *(v8::Value *)
struct _ast6066 : PointerType<_ast90> {}; // PointerType v8::StringObject *
struct _ast6067
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast93>, _str43>, _ast94>,
                     None>,
          None> {}; // CXXRecordDecl SymbolObject
struct _ast6068
    : DeclContext<Pack<_ast6069, _ast6070>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast93>, _str61>, _ast6072>>,
          Pack<_ast6069, _ast6070>>> {}; // CXXMethodDecl New
struct _ast6069
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6068>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6070
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6068>, _str153>, _ast6071>>>> {
}; // ParmVarDecl value
struct _ast6072
    : FunctionProtoType<_ast6073, Pack<_ast184, _ast6071>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _ast6074
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast93>, _str770>, _ast6075>>,
              Pack<>>>,
          _ast6077> {}; // CXXMethodDecl ValueOf
struct _ast6075 : FunctionProtoType<_ast6076, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Symbol> () const
struct _ast6077 : PointerType<_ast6078> {
}; // PointerType const v8::SymbolObject *
struct _ast6078 : ConstQualifiedType<_ast94> {
}; // RecordType const v8::SymbolObject
struct _ast6079
    : DeclContext<Pack<_ast6080>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast93>, _str58>, _ast6081>>,
          Pack<_ast6080>>> {}; // CXXMethodDecl Cast
struct _ast6080
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6079>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6081 : FunctionProtoType<_ast6082, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::SymbolObject *(v8::Value *)
struct _ast6082 : PointerType<_ast94> {}; // PointerType v8::SymbolObject *
struct _ast6083
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str771>, _ast6084>,
                     Pack<>>,
          Pack<_ast6085>>,
      DeclContext<Pack<_ast6086, _ast6095, _ast6104, _ast6109, _ast6111>> {
}; // CXXRecordDecl RegExp
struct _ast6084 : StructOrClassRecordType<RecordType<_ast6083>> {
}; // RecordType v8::RegExp
struct _ast6085 : CXXBaseSpecifier<_ast58> {
}; // CXXBaseSpecifier Record v8::Object
struct _ast6086
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6083>, _str771>, _ast6084>,
                     None>,
          None> {}; // CXXRecordDecl RegExp
struct _ast6095
    : DeclContext<Pack<_ast6096, _ast6098, _ast6100>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6083>, _str61>, _ast6102>>,
          Pack<_ast6096, _ast6098, _ast6100>>> {}; // CXXMethodDecl New
struct _ast6096
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6095>, _str229>, _ast6097>>>> {
}; // ParmVarDecl context
struct _ast6098
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6095>, _str772>, _ast6099>>>> {
}; // ParmVarDecl pattern
struct _ast6100
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6095>, _str174>, _ast6101>>>> {
};                                                 // ParmVarDecl flags
struct _ast6101 : EnumType<_ast6087, _ast1901> {}; // EnumType v8::RegExp::Flags
struct _ast6102 : FunctionProtoType<_ast6103,
                                    Pack<_ast6097, _ast6099, _ast6101>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::RegExp> (Local<v8::Context>,
   // Local<v8::String>, v8::RegExp::Flags)
struct _ast6104
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6083>, _str773>, _ast6105>>,
              Pack<>>>,
          _ast6107> {}; // CXXMethodDecl GetSource
struct _ast6105 : FunctionProtoType<_ast6106, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::String> () const
struct _ast6107 : PointerType<_ast6108> {}; // PointerType const v8::RegExp *
struct _ast6108 : ConstQualifiedType<_ast6084> {
}; // RecordType const v8::RegExp
struct _ast6109
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6083>, _str774>, _ast6110>>,
              Pack<>>>,
          _ast6107> {}; // CXXMethodDecl GetFlags
struct _ast6110 : FunctionProtoType<_ast6101, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::RegExp::Flags () const
struct _ast6111
    : DeclContext<Pack<_ast6112>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6083>, _str58>, _ast6113>>,
          Pack<_ast6112>>> {}; // CXXMethodDecl Cast
struct _ast6112
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6111>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6113 : FunctionProtoType<_ast6114, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::RegExp *(v8::Value *)
struct _ast6114 : PointerType<_ast6084> {}; // PointerType v8::RegExp *
struct _ast6115
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast25>, _str13>, _ast26>,
                     None>,
          None> {}; // CXXRecordDecl External
struct _ast6116
    : DeclContext<Pack<_ast6117, _ast6118>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast25>, _str61>, _ast6119>>,
          Pack<_ast6117, _ast6118>>> {}; // CXXMethodDecl New
struct _ast6117
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6116>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6118
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6116>, _str153>, _ast2223>>>> {
}; // ParmVarDecl value
struct _ast6119
    : FunctionProtoType<_ast6120, Pack<_ast184, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::External> (v8::Isolate *, void *)
struct _ast6121
    : DeclContext<Pack<_ast6122>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast25>, _str58>, _ast6123>>,
          Pack<_ast6122>>> {}; // CXXMethodDecl Cast
struct _ast6122
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6121>, _str458>, _ast3906>>>> {
}; // ParmVarDecl obj
struct _ast6123 : FunctionProtoType<_ast6124, Pack<_ast3906>, UnqualifiedType> {
}; // FunctionProtoType v8::External *(v8::Value *)
struct _ast6124 : PointerType<_ast26> {}; // PointerType v8::External *
struct _ast6125
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast25>, _str48>, _ast5595>>,
              Pack<>>>,
          _ast6126> {};                     // CXXMethodDecl Value
struct _ast6126 : PointerType<_ast6127> {}; // PointerType const v8::External *
struct _ast6127 : ConstQualifiedType<_ast26> {
}; // RecordType const v8::External
struct _ast6135
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str775>, _ast6136>,
                     Pack<>>,
          Pack<_ast6137>>,
      DeclContext<Pack<_ast6138,
                       _ast6139,
                       _ast6147,
                       _ast6154,
                       _ast6160,
                       _ast6170,
                       _ast6184,
                       _ast6198,
                       _ast6208>> {}; // CXXRecordDecl Template
struct _ast6136 : StructOrClassRecordType<RecordType<_ast6135>> {
}; // RecordType v8::Template
struct _ast6137 : CXXBaseSpecifier<_ast6> {
}; // CXXBaseSpecifier Record v8::Data
struct _ast6138
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6135>, _str775>, _ast6136>,
                     None>,
          None> {}; // CXXRecordDecl Template
struct _ast6139
    : DeclContext<Pack<_ast6140, _ast6142, _ast6144>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str114>, _ast6145>>,
              Pack<_ast6140, _ast6142, _ast6144>>>,
          _ast6146> {}; // CXXMethodDecl Set
struct _ast6140
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6139>, _str500>, _ast6141>>>> {
}; // ParmVarDecl name
struct _ast6142
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6139>, _str153>, _ast6143>>>> {
}; // ParmVarDecl value
struct _ast6144
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6139>, _str530>, _ast4456>>>> {
}; // ParmVarDecl attributes
struct _ast6145 : FunctionProtoType<_ast114,
                                    Pack<_ast6141, _ast6143, _ast4456>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, Local<v8::Data>,
   // v8::PropertyAttribute)
struct _ast6146 : PointerType<_ast6136> {}; // PointerType v8::Template *
struct _ast6147
    : DeclContext<Pack<_ast6148, _ast6150, _ast6152>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str549>, _ast6153>>,
              Pack<_ast6148, _ast6150, _ast6152>>>,
          _ast6146> {}; // CXXMethodDecl SetPrivate
struct _ast6148
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6147>, _str500>, _ast6149>>>> {
}; // ParmVarDecl name
struct _ast6150
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6147>, _str153>, _ast6151>>>> {
}; // ParmVarDecl value
struct _ast6152
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6147>, _str530>, _ast4456>>>> {
}; // ParmVarDecl attributes
struct _ast6153 : FunctionProtoType<_ast114,
                                    Pack<_ast6149, _ast6151, _ast4456>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Private>, Local<v8::Data>,
   // v8::PropertyAttribute)
struct _ast6154
    : DeclContext<Pack<_ast6155, _ast6156, _ast6157>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str114>, _ast6159>>,
              Pack<_ast6155, _ast6156, _ast6157>>>,
          _ast6146> {}; // CXXMethodDecl Set
struct _ast6155
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6154>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6156
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6154>, _str500>, _ast1914>>>> {
}; // ParmVarDecl name
struct _ast6157
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6154>, _str153>, _ast6158>>>> {
}; // ParmVarDecl value
struct _ast6159 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast1914, _ast6158>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const char *, Local<v8::Data>)
struct _ast6160
    : DeclContext<Pack<_ast6161, _ast6163, _ast6165, _ast6167, _ast6168>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str545>, _ast6169>>,
              Pack<_ast6161, _ast6163, _ast6165, _ast6167, _ast6168>>>,
          _ast6146> {}; // CXXMethodDecl SetAccessorProperty
struct _ast6161
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6160>, _str500>, _ast6162>>>> {
}; // ParmVarDecl name
struct _ast6163
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6160>, _str538>, _ast6164>>>> {
}; // ParmVarDecl getter
struct _ast6165
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6160>, _str539>, _ast6166>>>> {
}; // ParmVarDecl setter
struct _ast6167
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6160>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6168
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6160>, _str540>, _ast4540>>>> {
}; // ParmVarDecl settings
struct _ast6169
    : FunctionProtoType<_ast114,
                        Pack<_ast6162, _ast6164, _ast6166, _ast4456, _ast4540>,
                        UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, Local<v8::FunctionTemplate>,
   // Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _ast6170
    : DeclContext<Pack<_ast6171,
                       _ast6173,
                       _ast6174,
                       _ast6175,
                       _ast6177,
                       _ast6178,
                       _ast6180,
                       _ast6181,
                       _ast6182>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str546>, _ast6183>>,
              Pack<_ast6171,
                   _ast6173,
                   _ast6174,
                   _ast6175,
                   _ast6177,
                   _ast6178,
                   _ast6180,
                   _ast6181,
                   _ast6182>>>,
          _ast6146> {}; // CXXMethodDecl SetNativeDataProperty
struct _ast6171
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str500>, _ast6172>>>> {
}; // ParmVarDecl name
struct _ast6173
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str538>, _ast4366>>>> {
}; // ParmVarDecl getter
struct _ast6174
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str539>, _ast4370>>>> {
}; // ParmVarDecl setter
struct _ast6175
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str130>, _ast6176>>>> {
}; // ParmVarDecl data
struct _ast6177
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6178
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str776>, _ast6179>>>> {
}; // ParmVarDecl signature
struct _ast6180
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str540>, _ast4540>>>> {
}; // ParmVarDecl settings
struct _ast6181
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast6182
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6170>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast6183 : FunctionProtoType<_ast114,
                                    Pack<_ast6172,
                                         _ast4366,
                                         _ast4370,
                                         _ast6176,
                                         _ast4456,
                                         _ast6179,
                                         _ast4540,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback,
   // v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute,
   // Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType,
   // v8::SideEffectType)
struct _ast6184
    : DeclContext<Pack<_ast6185,
                       _ast6187,
                       _ast6188,
                       _ast6189,
                       _ast6191,
                       _ast6192,
                       _ast6194,
                       _ast6195,
                       _ast6196>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str546>, _ast6197>>,
              Pack<_ast6185,
                   _ast6187,
                   _ast6188,
                   _ast6189,
                   _ast6191,
                   _ast6192,
                   _ast6194,
                   _ast6195,
                   _ast6196>>>,
          _ast6146> {}; // CXXMethodDecl SetNativeDataProperty
struct _ast6185
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str500>, _ast6186>>>> {
}; // ParmVarDecl name
struct _ast6187
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str538>, _ast4368>>>> {
}; // ParmVarDecl getter
struct _ast6188
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str539>, _ast4372>>>> {
}; // ParmVarDecl setter
struct _ast6189
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str130>, _ast6190>>>> {
}; // ParmVarDecl data
struct _ast6191
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6192
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str776>, _ast6193>>>> {
}; // ParmVarDecl signature
struct _ast6194
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str540>, _ast4540>>>> {
}; // ParmVarDecl settings
struct _ast6195
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast6196
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6184>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast6197 : FunctionProtoType<_ast114,
                                    Pack<_ast6186,
                                         _ast4368,
                                         _ast4372,
                                         _ast6190,
                                         _ast4456,
                                         _ast6193,
                                         _ast4540,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback,
   // v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute,
   // Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType,
   // v8::SideEffectType)
struct _ast6198
    : DeclContext<
          Pack<_ast6199, _ast6201, _ast6202, _ast6204, _ast6205, _ast6206>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str547>, _ast6207>>,
              Pack<_ast6199,
                   _ast6201,
                   _ast6202,
                   _ast6204,
                   _ast6205,
                   _ast6206>>>,
          _ast6146> {}; // CXXMethodDecl SetLazyDataProperty
struct _ast6199
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6198>, _str500>, _ast6200>>>> {
}; // ParmVarDecl name
struct _ast6201
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6198>, _str538>, _ast4368>>>> {
}; // ParmVarDecl getter
struct _ast6202
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6198>, _str130>, _ast6203>>>> {
}; // ParmVarDecl data
struct _ast6204
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6198>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6205
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6198>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast6206
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6198>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast6207
    : FunctionProtoType<
          _ast114,
          Pack<_ast6200, _ast4368, _ast6203, _ast4456, _ast4543, _ast4543>,
          UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback,
   // Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType,
   // v8::SideEffectType)
struct _ast6208
    : DeclContext<Pack<_ast6209, _ast6211, _ast6213>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6135>, _str778>, _ast6214>>,
              Pack<_ast6209, _ast6211, _ast6213>>>,
          _ast6146> {}; // CXXMethodDecl SetIntrinsicDataProperty
struct _ast6209
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6208>, _str500>, _ast6210>>>> {
}; // ParmVarDecl name
struct _ast6211
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6208>, _str777>, _ast6212>>>> {
};                                                 // ParmVarDecl intrinsic
struct _ast6212 : EnumType<_ast6128, _ast1901> {}; // EnumType v8::Intrinsic
struct _ast6213
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6208>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6214 : FunctionProtoType<_ast114,
                                    Pack<_ast6210, _ast6212, _ast4456>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, v8::Intrinsic,
   // v8::PropertyAttribute)
struct _ast6215
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str779>, _ast6216>>> {
}; // TypedefDecl GenericNamedPropertyGetterCallback
struct _ast6216 : TypedefType<_ast6215> {
}; // TypedefType v8::GenericNamedPropertyGetterCallback
struct _ast6217
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str780>, _ast6218>>> {
}; // TypedefDecl GenericNamedPropertySetterCallback
struct _ast6218 : TypedefType<_ast6217> {
}; // TypedefType v8::GenericNamedPropertySetterCallback
struct _ast6219
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str781>, _ast6220>>> {
}; // TypedefDecl GenericNamedPropertyQueryCallback
struct _ast6220 : TypedefType<_ast6219> {
}; // TypedefType v8::GenericNamedPropertyQueryCallback
struct _ast6221
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str782>, _ast6222>>> {
}; // TypedefDecl GenericNamedPropertyDeleterCallback
struct _ast6222 : TypedefType<_ast6221> {
}; // TypedefType v8::GenericNamedPropertyDeleterCallback
struct _ast6223
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str783>, _ast6224>>> {
}; // TypedefDecl GenericNamedPropertyEnumeratorCallback
struct _ast6224 : TypedefType<_ast6223> {
}; // TypedefType v8::GenericNamedPropertyEnumeratorCallback
struct _ast6225
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str784>, _ast6226>>> {
}; // TypedefDecl GenericNamedPropertyDefinerCallback
struct _ast6226 : TypedefType<_ast6225> {
}; // TypedefType v8::GenericNamedPropertyDefinerCallback
struct _ast6227
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str785>, _ast6228>>> {
}; // TypedefDecl GenericNamedPropertyDescriptorCallback
struct _ast6228 : TypedefType<_ast6227> {
}; // TypedefType v8::GenericNamedPropertyDescriptorCallback
struct _ast6229
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str786>, _ast6230>>> {
}; // TypedefDecl IndexedPropertyGetterCallback
struct _ast6230 : TypedefType<_ast6229> {
}; // TypedefType v8::IndexedPropertyGetterCallback
struct _ast6231
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str787>, _ast6232>>> {
}; // TypedefDecl IndexedPropertySetterCallback
struct _ast6232 : TypedefType<_ast6231> {
}; // TypedefType v8::IndexedPropertySetterCallback
struct _ast6233
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str788>, _ast6234>>> {
}; // TypedefDecl IndexedPropertyQueryCallback
struct _ast6234 : TypedefType<_ast6233> {
}; // TypedefType v8::IndexedPropertyQueryCallback
struct _ast6235
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str789>, _ast6236>>> {
}; // TypedefDecl IndexedPropertyDeleterCallback
struct _ast6236 : TypedefType<_ast6235> {
}; // TypedefType v8::IndexedPropertyDeleterCallback
struct _ast6237
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str790>, _ast6238>>> {
}; // TypedefDecl IndexedPropertyEnumeratorCallback
struct _ast6238 : TypedefType<_ast6237> {
}; // TypedefType v8::IndexedPropertyEnumeratorCallback
struct _ast6239
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str791>, _ast6240>>> {
}; // TypedefDecl IndexedPropertyDefinerCallback
struct _ast6240 : TypedefType<_ast6239> {
}; // TypedefType v8::IndexedPropertyDefinerCallback
struct _ast6241
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str792>, _ast6242>>> {
}; // TypedefDecl IndexedPropertyDescriptorCallback
struct _ast6242 : TypedefType<_ast6241> {
}; // TypedefType v8::IndexedPropertyDescriptorCallback
struct _ast6249
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str793>, _ast6250>>> {
}; // TypedefDecl AccessCheckCallback
struct _ast6250 : TypedefType<_ast6249> {
}; // TypedefType v8::AccessCheckCallback
struct _ast6251
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast29>, _str15>, _ast30>,
                     None>,
          None> {}; // CXXRecordDecl FunctionTemplate
struct _ast6252
    : DeclContext<Pack<_ast6253,
                       _ast6254,
                       _ast6255,
                       _ast6257,
                       _ast6259,
                       _ast6260,
                       _ast6261>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast29>, _str61>, _ast6262>>,
          Pack<_ast6253,
               _ast6254,
               _ast6255,
               _ast6257,
               _ast6259,
               _ast6260,
               _ast6261>>> {}; // CXXMethodDecl New
struct _ast6253
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6254
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str80>, _ast5090>>>> {
}; // ParmVarDecl callback
struct _ast6255
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str130>, _ast6256>>>> {
}; // ParmVarDecl data
struct _ast6257
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str776>, _ast6258>>>> {
}; // ParmVarDecl signature
struct _ast6259
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast6260
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str630>, _ast5103>>>> {
}; // ParmVarDecl behavior
struct _ast6261
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6252>, _str631>, _ast4543>>>> {
}; // ParmVarDecl side_effect_type
struct _ast6262 : FunctionProtoType<_ast6263,
                                    Pack<_ast184,
                                         _ast5090,
                                         _ast6256,
                                         _ast6258,
                                         _ast1901,
                                         _ast5103,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *,
   // v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int,
   // v8::ConstructorBehavior, v8::SideEffectType)
struct _ast6264
    : DeclContext<Pack<_ast6265, _ast6266>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast29>, _str794>, _ast6267>>,
          Pack<_ast6265, _ast6266>>> {}; // CXXMethodDecl FromSnapshot
struct _ast6265
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6264>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6266
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6264>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast6267
    : FunctionProtoType<_ast6268, Pack<_ast184, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _ast6269
    : DeclContext<Pack<_ast6270,
                       _ast6271,
                       _ast6272,
                       _ast6274,
                       _ast6276,
                       _ast6278,
                       _ast6279>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast29>, _str796>, _ast6280>>,
          Pack<_ast6270,
               _ast6271,
               _ast6272,
               _ast6274,
               _ast6276,
               _ast6278,
               _ast6279>>> {}; // CXXMethodDecl NewWithCache
struct _ast6270
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6271
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str80>, _ast5090>>>> {
}; // ParmVarDecl callback
struct _ast6272
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str795>, _ast6273>>>> {
}; // ParmVarDecl cache_property
struct _ast6274
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str130>, _ast6275>>>> {
}; // ParmVarDecl data
struct _ast6276
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str776>, _ast6277>>>> {
}; // ParmVarDecl signature
struct _ast6278
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast6279
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6269>, _str631>, _ast4543>>>> {
}; // ParmVarDecl side_effect_type
struct _ast6280 : FunctionProtoType<_ast6281,
                                    Pack<_ast184,
                                         _ast5090,
                                         _ast6273,
                                         _ast6275,
                                         _ast6277,
                                         _ast1901,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *,
   // v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>,
   // Local<v8::Signature>, int, v8::SideEffectType)
struct _ast6282
    : DeclContext<Pack<_ast6283>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str797>, _ast6285>>,
              Pack<_ast6283>>>,
          _ast6287> {}; // CXXMethodDecl GetFunction
struct _ast6283
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6282>, _str229>, _ast6284>>>> {
}; // ParmVarDecl context
struct _ast6285 : FunctionProtoType<_ast6286, Pack<_ast6284>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>)
struct _ast6287 : PointerType<_ast30> {}; // PointerType v8::FunctionTemplate *
struct _ast6288
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str798>, _ast6289>>,
              Pack<>>>,
          _ast6287> {}; // CXXMethodDecl NewRemoteInstance
struct _ast6289 : FunctionProtoType<_ast6290, Pack<>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> ()
struct _ast6291
    : DeclContext<Pack<_ast6292, _ast6293, _ast6295>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str799>, _ast6296>>,
              Pack<_ast6292, _ast6293, _ast6295>>>,
          _ast6287> {}; // CXXMethodDecl SetCallHandler
struct _ast6292
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6291>, _str80>, _ast5090>>>> {
}; // ParmVarDecl callback
struct _ast6293
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6291>, _str130>, _ast6294>>>> {
}; // ParmVarDecl data
struct _ast6295
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6291>, _str631>, _ast4543>>>> {
}; // ParmVarDecl side_effect_type
struct _ast6296 : FunctionProtoType<_ast114,
                                    Pack<_ast5090, _ast6294, _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>,
   // v8::SideEffectType)
struct _ast6297
    : DeclContext<Pack<_ast6298>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str800>, _ast2966>>,
              Pack<_ast6298>>>,
          _ast6287> {}; // CXXMethodDecl SetLength
struct _ast6298
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6297>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast6299
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str801>, _ast6300>>,
              Pack<>>>,
          _ast6287> {}; // CXXMethodDecl InstanceTemplate
struct _ast6300 : FunctionProtoType<_ast6301, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6302
    : DeclContext<Pack<_ast6303>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str803>, _ast6305>>,
              Pack<_ast6303>>>,
          _ast6287> {}; // CXXMethodDecl Inherit
struct _ast6303
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6302>, _str802>, _ast6304>>>> {
}; // ParmVarDecl parent
struct _ast6305 : FunctionProtoType<_ast114, Pack<_ast6304>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6306
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str804>, _ast6307>>,
              Pack<>>>,
          _ast6287> {}; // CXXMethodDecl PrototypeTemplate
struct _ast6307 : FunctionProtoType<_ast6308, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6309
    : DeclContext<Pack<_ast6310>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str806>, _ast6312>>,
              Pack<_ast6310>>>,
          _ast6287> {}; // CXXMethodDecl SetPrototypeProviderTemplate
struct _ast6310
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6309>, _str805>, _ast6311>>>> {
}; // ParmVarDecl prototype_provider
struct _ast6312 : FunctionProtoType<_ast114, Pack<_ast6311>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6313
    : DeclContext<Pack<_ast6314>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str807>, _ast6316>>,
              Pack<_ast6314>>>,
          _ast6287> {}; // CXXMethodDecl SetClassName
struct _ast6314
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6313>, _str500>, _ast6315>>>> {
}; // ParmVarDecl name
struct _ast6316 : FunctionProtoType<_ast114, Pack<_ast6315>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast6317
    : DeclContext<Pack<_ast6318>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str808>, _ast3633>>,
              Pack<_ast6318>>>,
          _ast6287> {}; // CXXMethodDecl SetAcceptAnyReceiver
struct _ast6318
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6317>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast6319
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str809>, _ast113>>,
              Pack<>>>,
          _ast6287> {}; // CXXMethodDecl ReadOnlyPrototype
struct _ast6320
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str810>, _ast113>>,
              Pack<>>>,
          _ast6287> {}; // CXXMethodDecl RemovePrototype
struct _ast6321
    : DeclContext<Pack<_ast6322>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast29>, _str811>, _ast6324>>,
              Pack<_ast6322>>>,
          _ast6287> {}; // CXXMethodDecl HasInstance
struct _ast6322
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6321>, _str338>, _ast6323>>>> {
}; // ParmVarDecl object
struct _ast6324 : FunctionProtoType<_ast129, Pack<_ast6323>, UnqualifiedType> {
}; // FunctionProtoType bool (Local<v8::Value>)
struct _ast6325
    : DeclContext<Pack<_ast6326>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast29>, _str58>, _ast6327>>,
          Pack<_ast6326>>> {}; // CXXMethodDecl Cast
struct _ast6326
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6325>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast6327 : FunctionProtoType<_ast6287, Pack<_ast4265>, UnqualifiedType> {
}; // FunctionProtoType v8::FunctionTemplate *(v8::Data *)
struct _ast6334
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str812>, _ast6335>,
                     Pack<_ast6336,
                          _ast6337,
                          _ast6338,
                          _ast6339,
                          _ast6340,
                          _ast6341,
                          _ast6342,
                          _ast6343,
                          _ast6345>>,
          Pack<>>,
      DeclContext<Pack<_ast6347,
                       _ast6348,
                       _ast6361,
                       _ast6371,
                       _ast6336,
                       _ast6337,
                       _ast6338,
                       _ast6339,
                       _ast6340,
                       _ast6341,
                       _ast6342,
                       _ast6343,
                       _ast6345,
                       _ast6382,
                       _ast6387>> {
}; // CXXRecordDecl NamedPropertyHandlerConfiguration
struct _ast6335 : StructOrClassRecordType<RecordType<_ast6334>> {
}; // RecordType v8::NamedPropertyHandlerConfiguration
struct _ast6336
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str538>, _ast6216>>> {
}; // FieldDecl getter
struct _ast6337
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str539>, _ast6218>>> {
}; // FieldDecl setter
struct _ast6338
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str813>, _ast6220>>> {
}; // FieldDecl query
struct _ast6339
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str814>, _ast6222>>> {
}; // FieldDecl deleter
struct _ast6340
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str815>, _ast6224>>> {
}; // FieldDecl enumerator
struct _ast6341
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str816>, _ast6226>>> {
}; // FieldDecl definer
struct _ast6342
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str532>, _ast6228>>> {
}; // FieldDecl descriptor
struct _ast6343
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str130>, _ast6344>>> {
}; // FieldDecl data
struct _ast6345
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6334>, _str174>, _ast6346>>> {
}; // FieldDecl flags
struct _ast6346 : EnumType<_ast6328, _ast1901> {
}; // EnumType v8::PropertyHandlerFlags
struct _ast6347
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6334>, _str812>, _ast6335>,
                     None>,
          None> {}; // CXXRecordDecl NamedPropertyHandlerConfiguration
struct _ast6348
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6334>, _str812>, _ast6359>>,
              Pack<_ast6349,
                   _ast6350,
                   _ast6351,
                   _ast6352,
                   _ast6353,
                   _ast6354,
                   _ast6355,
                   _ast6356,
                   _ast6358>>>,
          _ast6360>>,
      DeclContext<Pack<_ast6349,
                       _ast6350,
                       _ast6351,
                       _ast6352,
                       _ast6353,
                       _ast6354,
                       _ast6355,
                       _ast6356,
                       _ast6358>> {
}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6349
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str538>, _ast6216>>>> {
}; // ParmVarDecl getter
struct _ast6350
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str539>, _ast6218>>>> {
}; // ParmVarDecl setter
struct _ast6351
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str813>, _ast6220>>>> {
}; // ParmVarDecl query
struct _ast6352
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str814>, _ast6222>>>> {
}; // ParmVarDecl deleter
struct _ast6353
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str815>, _ast6224>>>> {
}; // ParmVarDecl enumerator
struct _ast6354
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str816>, _ast6226>>>> {
}; // ParmVarDecl definer
struct _ast6355
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str532>, _ast6228>>>> {
}; // ParmVarDecl descriptor
struct _ast6356
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str130>, _ast6357>>>> {
}; // ParmVarDecl data
struct _ast6358
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6348>, _str174>, _ast6346>>>> {
}; // ParmVarDecl flags
struct _ast6359 : FunctionProtoType<_ast114,
                                    Pack<_ast6216,
                                         _ast6218,
                                         _ast6220,
                                         _ast6222,
                                         _ast6224,
                                         _ast6226,
                                         _ast6228,
                                         _ast6357,
                                         _ast6346>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback,
   // v8::GenericNamedPropertySetterCallback,
   // v8::GenericNamedPropertyQueryCallback,
   // v8::GenericNamedPropertyDeleterCallback,
   // v8::GenericNamedPropertyEnumeratorCallback,
   // v8::GenericNamedPropertyDefinerCallback,
   // v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>,
   // v8::PropertyHandlerFlags)
struct _ast6360 : PointerType<_ast6335> {
}; // PointerType v8::NamedPropertyHandlerConfiguration *
struct _ast6361
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6334>, _str812>, _ast6370>>,
              Pack<_ast6362,
                   _ast6363,
                   _ast6364,
                   _ast6365,
                   _ast6366,
                   _ast6367,
                   _ast6369>>>,
          _ast6360>>,
      DeclContext<Pack<_ast6362,
                       _ast6363,
                       _ast6364,
                       _ast6365,
                       _ast6366,
                       _ast6367,
                       _ast6369>> {
}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6362
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str538>, _ast6216>>>> {
}; // ParmVarDecl getter
struct _ast6363
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str539>, _ast6218>>>> {
}; // ParmVarDecl setter
struct _ast6364
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str813>, _ast6220>>>> {
}; // ParmVarDecl query
struct _ast6365
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str814>, _ast6222>>>> {
}; // ParmVarDecl deleter
struct _ast6366
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str815>, _ast6224>>>> {
}; // ParmVarDecl enumerator
struct _ast6367
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str130>, _ast6368>>>> {
}; // ParmVarDecl data
struct _ast6369
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6361>, _str174>, _ast6346>>>> {
}; // ParmVarDecl flags
struct _ast6370 : FunctionProtoType<_ast114,
                                    Pack<_ast6216,
                                         _ast6218,
                                         _ast6220,
                                         _ast6222,
                                         _ast6224,
                                         _ast6368,
                                         _ast6346>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback,
   // v8::GenericNamedPropertySetterCallback,
   // v8::GenericNamedPropertyQueryCallback,
   // v8::GenericNamedPropertyDeleterCallback,
   // v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>,
   // v8::PropertyHandlerFlags)
struct _ast6371
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6334>, _str812>, _ast6381>>,
              Pack<_ast6372,
                   _ast6373,
                   _ast6374,
                   _ast6375,
                   _ast6376,
                   _ast6377,
                   _ast6378,
                   _ast6380>>>,
          _ast6360>>,
      DeclContext<Pack<_ast6372,
                       _ast6373,
                       _ast6374,
                       _ast6375,
                       _ast6376,
                       _ast6377,
                       _ast6378,
                       _ast6380>> {
}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6372
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str538>, _ast6216>>>> {
}; // ParmVarDecl getter
struct _ast6373
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str539>, _ast6218>>>> {
}; // ParmVarDecl setter
struct _ast6374
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str532>, _ast6228>>>> {
}; // ParmVarDecl descriptor
struct _ast6375
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str814>, _ast6222>>>> {
}; // ParmVarDecl deleter
struct _ast6376
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str815>, _ast6224>>>> {
}; // ParmVarDecl enumerator
struct _ast6377
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str816>, _ast6226>>>> {
}; // ParmVarDecl definer
struct _ast6378
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str130>, _ast6379>>>> {
}; // ParmVarDecl data
struct _ast6380
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6371>, _str174>, _ast6346>>>> {
}; // ParmVarDecl flags
struct _ast6381 : FunctionProtoType<_ast114,
                                    Pack<_ast6216,
                                         _ast6218,
                                         _ast6228,
                                         _ast6222,
                                         _ast6224,
                                         _ast6226,
                                         _ast6379,
                                         _ast6346>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback,
   // v8::GenericNamedPropertySetterCallback,
   // v8::GenericNamedPropertyDescriptorCallback,
   // v8::GenericNamedPropertyDeleterCallback,
   // v8::GenericNamedPropertyEnumeratorCallback,
   // v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>,
   // v8::PropertyHandlerFlags)
struct _ast6382
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6334>, _str812>, _ast6386>>,
              Pack<_ast6383>>>,
          _ast6360>>,
      DeclContext<Pack<_ast6383>> {
}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6383
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6382>, _str62>, _ast6384>>>> {
}; // ParmVarDecl
struct _ast6384 : LValueReferenceType<ReferenceType<_ast6385>> {
}; // LValueReferenceType const v8::NamedPropertyHandlerConfiguration &
struct _ast6385 : ConstQualifiedType<_ast6335> {
}; // RecordType const v8::NamedPropertyHandlerConfiguration
struct _ast6386 : FunctionProtoType<_ast114, Pack<_ast6384>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6387
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6334>, _str812>, _ast6390>>,
              Pack<_ast6388>>>,
          _ast6360>>,
      DeclContext<Pack<_ast6388>> {
}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6388
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6387>, _str62>, _ast6389>>>> {
}; // ParmVarDecl
struct _ast6389 : RValueReferenceType<ReferenceType<_ast6335>> {
}; // RValueReferenceType v8::NamedPropertyHandlerConfiguration &&
struct _ast6390 : FunctionProtoType<_ast114, Pack<_ast6389>, UnqualifiedType> {
}; // FunctionProtoType void (v8::NamedPropertyHandlerConfiguration &&)
struct _ast6391
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str817>, _ast6392>,
                     Pack<_ast6393,
                          _ast6394,
                          _ast6395,
                          _ast6396,
                          _ast6397,
                          _ast6398,
                          _ast6399,
                          _ast6400,
                          _ast6402>>,
          Pack<>>,
      DeclContext<Pack<_ast6403,
                       _ast6404,
                       _ast6417,
                       _ast6427,
                       _ast6393,
                       _ast6394,
                       _ast6395,
                       _ast6396,
                       _ast6397,
                       _ast6398,
                       _ast6399,
                       _ast6400,
                       _ast6402,
                       _ast6438,
                       _ast6443,
                       _ast6447>> {
}; // CXXRecordDecl IndexedPropertyHandlerConfiguration
struct _ast6392 : StructOrClassRecordType<RecordType<_ast6391>> {
}; // RecordType v8::IndexedPropertyHandlerConfiguration
struct _ast6393
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str538>, _ast6230>>> {
}; // FieldDecl getter
struct _ast6394
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str539>, _ast6232>>> {
}; // FieldDecl setter
struct _ast6395
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str813>, _ast6234>>> {
}; // FieldDecl query
struct _ast6396
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str814>, _ast6236>>> {
}; // FieldDecl deleter
struct _ast6397
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str815>, _ast6238>>> {
}; // FieldDecl enumerator
struct _ast6398
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str816>, _ast6240>>> {
}; // FieldDecl definer
struct _ast6399
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str532>, _ast6242>>> {
}; // FieldDecl descriptor
struct _ast6400
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str130>, _ast6401>>> {
}; // FieldDecl data
struct _ast6402
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6391>, _str174>, _ast6346>>> {
}; // FieldDecl flags
struct _ast6403
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6391>, _str817>, _ast6392>,
                     None>,
          None> {}; // CXXRecordDecl IndexedPropertyHandlerConfiguration
struct _ast6404
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6391>, _str817>, _ast6415>>,
              Pack<_ast6405,
                   _ast6406,
                   _ast6407,
                   _ast6408,
                   _ast6409,
                   _ast6410,
                   _ast6411,
                   _ast6412,
                   _ast6414>>>,
          _ast6416>>,
      DeclContext<Pack<_ast6405,
                       _ast6406,
                       _ast6407,
                       _ast6408,
                       _ast6409,
                       _ast6410,
                       _ast6411,
                       _ast6412,
                       _ast6414>> {
}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6405
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str538>, _ast6230>>>> {
}; // ParmVarDecl getter
struct _ast6406
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str539>, _ast6232>>>> {
}; // ParmVarDecl setter
struct _ast6407
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str813>, _ast6234>>>> {
}; // ParmVarDecl query
struct _ast6408
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str814>, _ast6236>>>> {
}; // ParmVarDecl deleter
struct _ast6409
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str815>, _ast6238>>>> {
}; // ParmVarDecl enumerator
struct _ast6410
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str816>, _ast6240>>>> {
}; // ParmVarDecl definer
struct _ast6411
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str532>, _ast6242>>>> {
}; // ParmVarDecl descriptor
struct _ast6412
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str130>, _ast6413>>>> {
}; // ParmVarDecl data
struct _ast6414
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6404>, _str174>, _ast6346>>>> {
}; // ParmVarDecl flags
struct _ast6415 : FunctionProtoType<_ast114,
                                    Pack<_ast6230,
                                         _ast6232,
                                         _ast6234,
                                         _ast6236,
                                         _ast6238,
                                         _ast6240,
                                         _ast6242,
                                         _ast6413,
                                         _ast6346>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
   // v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback,
   // v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback,
   // v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback,
   // Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6416 : PointerType<_ast6392> {
}; // PointerType v8::IndexedPropertyHandlerConfiguration *
struct _ast6417
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6391>, _str817>, _ast6426>>,
              Pack<_ast6418,
                   _ast6419,
                   _ast6420,
                   _ast6421,
                   _ast6422,
                   _ast6423,
                   _ast6425>>>,
          _ast6416>>,
      DeclContext<Pack<_ast6418,
                       _ast6419,
                       _ast6420,
                       _ast6421,
                       _ast6422,
                       _ast6423,
                       _ast6425>> {
}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6418
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str538>, _ast6230>>>> {
}; // ParmVarDecl getter
struct _ast6419
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str539>, _ast6232>>>> {
}; // ParmVarDecl setter
struct _ast6420
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str813>, _ast6234>>>> {
}; // ParmVarDecl query
struct _ast6421
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str814>, _ast6236>>>> {
}; // ParmVarDecl deleter
struct _ast6422
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str815>, _ast6238>>>> {
}; // ParmVarDecl enumerator
struct _ast6423
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str130>, _ast6424>>>> {
}; // ParmVarDecl data
struct _ast6425
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6417>, _str174>, _ast6346>>>> {
}; // ParmVarDecl flags
struct _ast6426 : FunctionProtoType<_ast114,
                                    Pack<_ast6230,
                                         _ast6232,
                                         _ast6234,
                                         _ast6236,
                                         _ast6238,
                                         _ast6424,
                                         _ast6346>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
   // v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback,
   // v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback,
   // Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6427
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6391>, _str817>, _ast6437>>,
              Pack<_ast6428,
                   _ast6429,
                   _ast6430,
                   _ast6431,
                   _ast6432,
                   _ast6433,
                   _ast6434,
                   _ast6436>>>,
          _ast6416>>,
      DeclContext<Pack<_ast6428,
                       _ast6429,
                       _ast6430,
                       _ast6431,
                       _ast6432,
                       _ast6433,
                       _ast6434,
                       _ast6436>> {
}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6428
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str538>, _ast6230>>>> {
}; // ParmVarDecl getter
struct _ast6429
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str539>, _ast6232>>>> {
}; // ParmVarDecl setter
struct _ast6430
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str532>, _ast6242>>>> {
}; // ParmVarDecl descriptor
struct _ast6431
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str814>, _ast6236>>>> {
}; // ParmVarDecl deleter
struct _ast6432
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str815>, _ast6238>>>> {
}; // ParmVarDecl enumerator
struct _ast6433
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str816>, _ast6240>>>> {
}; // ParmVarDecl definer
struct _ast6434
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str130>, _ast6435>>>> {
}; // ParmVarDecl data
struct _ast6436
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6427>, _str174>, _ast6346>>>> {
}; // ParmVarDecl flags
struct _ast6437 : FunctionProtoType<_ast114,
                                    Pack<_ast6230,
                                         _ast6232,
                                         _ast6242,
                                         _ast6236,
                                         _ast6238,
                                         _ast6240,
                                         _ast6435,
                                         _ast6346>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
   // v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback,
   // v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback,
   // v8::IndexedPropertyDefinerCallback, Local<v8::Value>,
   // v8::PropertyHandlerFlags)
struct _ast6438
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6391>, _str817>, _ast6442>>,
              Pack<_ast6439>>>,
          _ast6416>>,
      DeclContext<Pack<_ast6439>> {
}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6439
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6438>, _str62>, _ast6440>>>> {
}; // ParmVarDecl
struct _ast6440 : LValueReferenceType<ReferenceType<_ast6441>> {
}; // LValueReferenceType const v8::IndexedPropertyHandlerConfiguration &
struct _ast6441 : ConstQualifiedType<_ast6392> {
}; // RecordType const v8::IndexedPropertyHandlerConfiguration
struct _ast6442 : FunctionProtoType<_ast114, Pack<_ast6440>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6443
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6391>, _str817>, _ast6446>>,
              Pack<_ast6444>>>,
          _ast6416>>,
      DeclContext<Pack<_ast6444>> {
}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6444
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6443>, _str62>, _ast6445>>>> {
}; // ParmVarDecl
struct _ast6445 : RValueReferenceType<ReferenceType<_ast6392>> {
}; // RValueReferenceType v8::IndexedPropertyHandlerConfiguration &&
struct _ast6446 : FunctionProtoType<_ast114, Pack<_ast6445>, UnqualifiedType> {
}; // FunctionProtoType void (v8::IndexedPropertyHandlerConfiguration &&)
struct _ast6447
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6391>, _str818>, _ast214>>,
              Pack<>>>,
          _ast6416>> {
}; // CXXDestructorDecl ~IndexedPropertyHandlerConfiguration
struct _ast6448
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast61>, _str27>, _ast62>,
                     None>,
          None> {}; // CXXRecordDecl ObjectTemplate
struct _ast6449
    : DeclContext<Pack<_ast6450, _ast6451>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast61>, _str61>, _ast6453>>,
          Pack<_ast6450, _ast6451>>> {}; // CXXMethodDecl New
struct _ast6450
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6449>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6451
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6449>, _str819>, _ast6452>>>> {
}; // ParmVarDecl constructor
struct _ast6453
    : FunctionProtoType<_ast6454, Pack<_ast184, _ast6452>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::ObjectTemplate> (v8::Isolate *,
   // Local<v8::FunctionTemplate>)
struct _ast6455
    : DeclContext<Pack<_ast6456, _ast6457>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast61>, _str794>, _ast6458>>,
          Pack<_ast6456, _ast6457>>> {}; // CXXMethodDecl FromSnapshot
struct _ast6456
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6455>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6457
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6455>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast6458
    : FunctionProtoType<_ast6459, Pack<_ast184, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _ast6460
    : DeclContext<Pack<_ast6461>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str632>, _ast6463>>,
              Pack<_ast6461>>>,
          _ast6465> {}; // CXXMethodDecl NewInstance
struct _ast6461
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6460>, _str229>, _ast6462>>>> {
}; // ParmVarDecl context
struct _ast6463 : FunctionProtoType<_ast6464, Pack<_ast6462>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>)
struct _ast6465 : PointerType<_ast62> {}; // PointerType v8::ObjectTemplate *
struct _ast6466
    : DeclContext<Pack<_ast6467,
                       _ast6469,
                       _ast6470,
                       _ast6471,
                       _ast6473,
                       _ast6474,
                       _ast6475,
                       _ast6477,
                       _ast6478>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str544>, _ast6479>>,
              Pack<_ast6467,
                   _ast6469,
                   _ast6470,
                   _ast6471,
                   _ast6473,
                   _ast6474,
                   _ast6475,
                   _ast6477,
                   _ast6478>>>,
          _ast6465> {}; // CXXMethodDecl SetAccessor
struct _ast6467
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str500>, _ast6468>>>> {
}; // ParmVarDecl name
struct _ast6469
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str538>, _ast4366>>>> {
}; // ParmVarDecl getter
struct _ast6470
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str539>, _ast4370>>>> {
}; // ParmVarDecl setter
struct _ast6471
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str130>, _ast6472>>>> {
}; // ParmVarDecl data
struct _ast6473
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str540>, _ast4540>>>> {
}; // ParmVarDecl settings
struct _ast6474
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6475
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str776>, _ast6476>>>> {
}; // ParmVarDecl signature
struct _ast6477
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast6478
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6466>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast6479 : FunctionProtoType<_ast114,
                                    Pack<_ast6468,
                                         _ast4366,
                                         _ast4370,
                                         _ast6472,
                                         _ast4540,
                                         _ast4456,
                                         _ast6476,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback,
   // v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl,
   // v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType,
   // v8::SideEffectType)
struct _ast6480
    : DeclContext<Pack<_ast6481,
                       _ast6483,
                       _ast6484,
                       _ast6485,
                       _ast6487,
                       _ast6488,
                       _ast6489,
                       _ast6491,
                       _ast6492>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str544>, _ast6493>>,
              Pack<_ast6481,
                   _ast6483,
                   _ast6484,
                   _ast6485,
                   _ast6487,
                   _ast6488,
                   _ast6489,
                   _ast6491,
                   _ast6492>>>,
          _ast6465> {}; // CXXMethodDecl SetAccessor
struct _ast6481
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str500>, _ast6482>>>> {
}; // ParmVarDecl name
struct _ast6483
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str538>, _ast4368>>>> {
}; // ParmVarDecl getter
struct _ast6484
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str539>, _ast4372>>>> {
}; // ParmVarDecl setter
struct _ast6485
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str130>, _ast6486>>>> {
}; // ParmVarDecl data
struct _ast6487
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str540>, _ast4540>>>> {
}; // ParmVarDecl settings
struct _ast6488
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str541>, _ast4456>>>> {
}; // ParmVarDecl attribute
struct _ast6489
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str776>, _ast6490>>>> {
}; // ParmVarDecl signature
struct _ast6491
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str542>, _ast4543>>>> {
}; // ParmVarDecl getter_side_effect_type
struct _ast6492
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6480>, _str543>, _ast4543>>>> {
}; // ParmVarDecl setter_side_effect_type
struct _ast6493 : FunctionProtoType<_ast114,
                                    Pack<_ast6482,
                                         _ast4368,
                                         _ast4372,
                                         _ast6486,
                                         _ast4540,
                                         _ast4456,
                                         _ast6490,
                                         _ast4543,
                                         _ast4543>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback,
   // v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl,
   // v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType,
   // v8::SideEffectType)
struct _ast6494
    : DeclContext<Pack<_ast6495>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str821>, _ast6496>>,
              Pack<_ast6495>>>,
          _ast6465> {}; // CXXMethodDecl SetHandler
struct _ast6495
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6494>, _str820>, _ast6384>>>> {
}; // ParmVarDecl configuration
struct _ast6496 : FunctionProtoType<_ast114, Pack<_ast6384>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6497
    : DeclContext<
          Pack<_ast6498, _ast6499, _ast6500, _ast6501, _ast6502, _ast6503>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str822>, _ast6505>>,
              Pack<_ast6498,
                   _ast6499,
                   _ast6500,
                   _ast6501,
                   _ast6502,
                   _ast6503>>>,
          _ast6465> {}; // CXXMethodDecl SetIndexedPropertyHandler
struct _ast6498
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6497>, _str538>, _ast6230>>>> {
}; // ParmVarDecl getter
struct _ast6499
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6497>, _str539>, _ast6232>>>> {
}; // ParmVarDecl setter
struct _ast6500
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6497>, _str813>, _ast6234>>>> {
}; // ParmVarDecl query
struct _ast6501
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6497>, _str814>, _ast6236>>>> {
}; // ParmVarDecl deleter
struct _ast6502
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6497>, _str815>, _ast6238>>>> {
}; // ParmVarDecl enumerator
struct _ast6503
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6497>, _str130>, _ast6504>>>> {
}; // ParmVarDecl data
struct _ast6505
    : FunctionProtoType<
          _ast114,
          Pack<_ast6230, _ast6232, _ast6234, _ast6236, _ast6238, _ast6504>,
          UnqualifiedType> {
}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback,
   // v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback,
   // v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback,
   // Local<v8::Value>)
struct _ast6506
    : DeclContext<Pack<_ast6507>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str821>, _ast6508>>,
              Pack<_ast6507>>>,
          _ast6465> {}; // CXXMethodDecl SetHandler
struct _ast6507
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6506>, _str820>, _ast6440>>>> {
}; // ParmVarDecl configuration
struct _ast6508 : FunctionProtoType<_ast114, Pack<_ast6440>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6509
    : DeclContext<Pack<_ast6510, _ast6511>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str823>, _ast6513>>,
              Pack<_ast6510, _ast6511>>>,
          _ast6465> {}; // CXXMethodDecl SetCallAsFunctionHandler
struct _ast6510
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6509>, _str80>, _ast5090>>>> {
}; // ParmVarDecl callback
struct _ast6511
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6509>, _str130>, _ast6512>>>> {
}; // ParmVarDecl data
struct _ast6513
    : FunctionProtoType<_ast114, Pack<_ast5090, _ast6512>, UnqualifiedType> {
}; // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>)
struct _ast6514
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str824>, _ast113>>,
              Pack<>>>,
          _ast6465> {}; // CXXMethodDecl MarkAsUndetectable
struct _ast6515
    : DeclContext<Pack<_ast6516, _ast6517>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str825>, _ast6519>>,
              Pack<_ast6516, _ast6517>>>,
          _ast6465> {}; // CXXMethodDecl SetAccessCheckCallback
struct _ast6516
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6515>, _str80>, _ast6250>>>> {
}; // ParmVarDecl callback
struct _ast6517
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6515>, _str130>, _ast6518>>>> {
}; // ParmVarDecl data
struct _ast6519
    : FunctionProtoType<_ast114, Pack<_ast6250, _ast6518>, UnqualifiedType> {
}; // FunctionProtoType void (v8::AccessCheckCallback, Local<v8::Value>)
struct _ast6520
    : DeclContext<Pack<_ast6521, _ast6522, _ast6523, _ast6524>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str828>, _ast6526>>,
              Pack<_ast6521, _ast6522, _ast6523, _ast6524>>>,
          _ast6465> {}; // CXXMethodDecl SetAccessCheckCallbackAndHandler
struct _ast6521
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6520>, _str80>, _ast6250>>>> {
}; // ParmVarDecl callback
struct _ast6522
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6520>, _str826>, _ast6384>>>> {
}; // ParmVarDecl named_handler
struct _ast6523
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6520>, _str827>, _ast6440>>>> {
}; // ParmVarDecl indexed_handler
struct _ast6524
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6520>, _str130>, _ast6525>>>> {
}; // ParmVarDecl data
struct _ast6526
    : FunctionProtoType<_ast114,
                        Pack<_ast6250, _ast6384, _ast6440, _ast6525>,
                        UnqualifiedType> {
}; // FunctionProtoType void (v8::AccessCheckCallback, const
   // v8::NamedPropertyHandlerConfiguration &, const
   // v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ast6527
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str567>, _ast3071>>,
              Pack<>>>,
          _ast6465> {}; // CXXMethodDecl InternalFieldCount
struct _ast6528
    : DeclContext<Pack<_ast6529>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str829>, _ast2966>>,
              Pack<_ast6529>>>,
          _ast6465> {}; // CXXMethodDecl SetInternalFieldCount
struct _ast6529
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6528>, _str153>, _ast1901>>>> {
}; // ParmVarDecl value
struct _ast6530
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str830>, _ast3256>>,
              Pack<>>>,
          _ast6465> {}; // CXXMethodDecl IsImmutableProto
struct _ast6531
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast61>, _str831>, _ast113>>,
              Pack<>>>,
          _ast6465> {}; // CXXMethodDecl SetImmutableProto
struct _ast6532
    : DeclContext<Pack<_ast6533>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast61>, _str58>, _ast6534>>,
          Pack<_ast6533>>> {}; // CXXMethodDecl Cast
struct _ast6533
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6532>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast6534 : FunctionProtoType<_ast6465, Pack<_ast4265>, UnqualifiedType> {
}; // FunctionProtoType v8::ObjectTemplate *(v8::Data *)
struct _ast6535
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast79>, _str36>, _ast80>,
                     None>,
          None> {}; // CXXRecordDecl Signature
struct _ast6536
    : DeclContext<Pack<_ast6537, _ast6538>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast79>, _str61>, _ast6540>>,
          Pack<_ast6537, _ast6538>>> {}; // CXXMethodDecl New
struct _ast6537
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6536>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6538
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6536>, _str832>, _ast6539>>>> {
}; // ParmVarDecl receiver
struct _ast6540
    : FunctionProtoType<_ast6541, Pack<_ast184, _ast6539>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
   // Local<v8::FunctionTemplate>)
struct _ast6542
    : DeclContext<Pack<_ast6543>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast79>, _str58>, _ast6544>>,
          Pack<_ast6543>>> {}; // CXXMethodDecl Cast
struct _ast6543
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6542>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast6544 : FunctionProtoType<_ast6545, Pack<_ast4265>, UnqualifiedType> {
}; // FunctionProtoType v8::Signature *(v8::Data *)
struct _ast6545 : PointerType<_ast80> {}; // PointerType v8::Signature *
struct _ast6546
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast9>, _str5>, _ast10>, None>,
          None> {}; // CXXRecordDecl AccessorSignature
struct _ast6547
    : DeclContext<Pack<_ast6548, _ast6549>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast9>, _str61>, _ast6551>>,
          Pack<_ast6548, _ast6549>>> {}; // CXXMethodDecl New
struct _ast6548
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6547>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6549
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6547>, _str832>, _ast6550>>>> {
}; // ParmVarDecl receiver
struct _ast6551
    : FunctionProtoType<_ast6552, Pack<_ast184, _ast6550>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *,
   // Local<v8::FunctionTemplate>)
struct _ast6553
    : DeclContext<Pack<_ast6554>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast9>, _str58>, _ast6555>>,
          Pack<_ast6554>>> {}; // CXXMethodDecl Cast
struct _ast6554
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6553>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast6555 : FunctionProtoType<_ast6556, Pack<_ast4265>, UnqualifiedType> {
}; // FunctionProtoType v8::AccessorSignature *(v8::Data *)
struct _ast6556 : PointerType<_ast10> {}; // PointerType v8::AccessorSignature *
struct _ast6557
    : CXXRecordDecl<
          RecordDecl<
              TypeDecl<NamedDeclName<Decl<_ast1>, _str833>, _ast6558>,
              Pack<_ast6559, _ast6560, _ast6561, _ast6564, _ast6565, _ast6567>>,
          Pack<>>,
      DeclContext<Pack<_ast6568,
                       _ast6569,
                       _ast6577,
                       _ast6578,
                       _ast6584,
                       _ast6587,
                       _ast6588,
                       _ast6592,
                       _ast6593,
                       _ast6595,
                       _ast6597,
                       _ast6598,
                       _ast6602,
                       _ast6559,
                       _ast6560,
                       _ast6561,
                       _ast6564,
                       _ast6565,
                       _ast6567>> {}; // CXXRecordDecl Extension
struct _ast6558 : StructOrClassRecordType<RecordType<_ast6557>> {
}; // RecordType v8::Extension
struct _ast6559
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6557>, _str834>, _ast1914>>> {
}; // FieldDecl name_
struct _ast6560
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6557>, _str835>, _ast3254>>> {
}; // FieldDecl source_length_
struct _ast6561
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6557>, _str836>, _ast6562>>> {
}; // FieldDecl source_
struct _ast6562 : PointerType<_ast6563> {
}; // PointerType String::ExternalOneByteStringResource *
struct _ast6564
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6557>, _str837>, _ast1901>>> {
}; // FieldDecl dep_count_
struct _ast6565
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6557>, _str838>, _ast6566>>> {
};                                          // FieldDecl deps_
struct _ast6566 : PointerType<_ast1914> {}; // PointerType const char **
struct _ast6567
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6557>, _str839>, _ast129>>> {
}; // FieldDecl auto_enable_
struct _ast6568
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6557>, _str833>, _ast6558>,
                     None>,
          None> {}; // CXXRecordDecl Extension
struct _ast6569
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str833>, _ast6575>>,
              Pack<_ast6570, _ast6571, _ast6572, _ast6573, _ast6574>>>,
          _ast6576>>,
      DeclContext<Pack<_ast6570, _ast6571, _ast6572, _ast6573, _ast6574>> {
}; // CXXConstructorDecl Extension
struct _ast6570
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6569>, _str500>, _ast1914>>>> {
}; // ParmVarDecl name
struct _ast6571
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6569>, _str134>, _ast1914>>>> {
}; // ParmVarDecl source
struct _ast6572
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6569>, _str840>, _ast1901>>>> {
}; // ParmVarDecl dep_count
struct _ast6573
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6569>, _str841>, _ast6566>>>> {
}; // ParmVarDecl deps
struct _ast6574
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6569>, _str842>, _ast1901>>>> {
}; // ParmVarDecl source_length
struct _ast6575
    : FunctionProtoType<_ast114,
                        Pack<_ast1914, _ast1914, _ast1901, _ast6566, _ast1901>,
                        UnqualifiedType> {
}; // FunctionProtoType void (const char *, const char *, int, const char **,
   // int)
struct _ast6576 : PointerType<_ast6558> {}; // PointerType v8::Extension *
struct _ast6577
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str843>, _ast214>>,
              Pack<>>>,
          _ast6576>>> {}; // CXXDestructorDecl ~Extension
struct _ast6578
    : DeclContext<Pack<_ast6579, _ast6580>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str844>, _ast6582>>,
              Pack<_ast6579, _ast6580>>>,
          _ast6576>> {}; // CXXMethodDecl GetNativeFunctionTemplate
struct _ast6579
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6578>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6580
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6578>, _str500>, _ast6581>>>> {
}; // ParmVarDecl name
struct _ast6582
    : FunctionProtoType<_ast6583, Pack<_ast184, _ast6581>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *,
   // Local<v8::String>)
struct _ast6584
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str500>, _ast4045>>,
              Pack<>>>,
          _ast6585> {};                     // CXXMethodDecl name
struct _ast6585 : PointerType<_ast6586> {}; // PointerType const v8::Extension *
struct _ast6586 : ConstQualifiedType<_ast6558> {
}; // RecordType const v8::Extension
struct _ast6587
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str842>, _ast4027>>,
              Pack<>>>,
          _ast6585> {}; // CXXMethodDecl source_length
struct _ast6588
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str134>, _ast6589>>,
              Pack<>>>,
          _ast6585> {}; // CXXMethodDecl source
struct _ast6589 : FunctionProtoType<_ast6590, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const String::ExternalOneByteStringResource *() const
struct _ast6590 : PointerType<_ast6591> {
}; // PointerType const String::ExternalOneByteStringResource *
struct _ast6591 : ConstQualifiedType<_ast6563> {
}; // ElaboratedType const String::ExternalOneByteStringResource
struct _ast6592
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str845>, _ast2938>>,
              Pack<>>>,
          _ast6585> {}; // CXXMethodDecl dependency_count
struct _ast6593
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str846>, _ast6594>>,
              Pack<>>>,
          _ast6585> {}; // CXXMethodDecl dependencies
struct _ast6594 : FunctionProtoType<_ast6566, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType const char **() const
struct _ast6595
    : DeclContext<Pack<_ast6596>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str847>, _ast3633>>,
              Pack<_ast6596>>>,
          _ast6576> {}; // CXXMethodDecl set_auto_enable
struct _ast6596
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6595>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast6597
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str848>, _ast3256>>,
              Pack<>>>,
          _ast6576> {}; // CXXMethodDecl auto_enable
struct _ast6598
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str833>, _ast6601>>,
              Pack<_ast6599>>>,
          _ast6576>>,
      DeclContext<Pack<_ast6599>> {}; // CXXConstructorDecl Extension
struct _ast6599
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6598>, _str62>, _ast6600>>>> {
}; // ParmVarDecl
struct _ast6600 : LValueReferenceType<ReferenceType<_ast6586>> {
}; // LValueReferenceType const v8::Extension &
struct _ast6601 : FunctionProtoType<_ast114, Pack<_ast6600>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Extension &)
struct _ast6602
    : DeclContext<Pack<_ast6603>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6557>, _str64>, _ast6601>>,
              Pack<_ast6603>>>,
          _ast6576> {}; // CXXMethodDecl operator=
struct _ast6603
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6602>, _str62>, _ast6600>>>> {
}; // ParmVarDecl
struct _ast6604
    : DeclContext<Pack<_ast6605>>,
      FunctionDecl<DeclaratorDecl<ValueDecl<NamedDeclName<Decl<_ast1>, _str849>,
                                            _ast6607>>,
                   Pack<_ast6605>> {}; // FunctionDecl RegisterExtension
struct _ast6605
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6604>, _str62>, _ast6606>>>> {
}; // ParmVarDecl
struct _ast6607 : FunctionProtoType<_ast114, Pack<_ast6606>, UnqualifiedType> {
}; // FunctionProtoType void (std::unique_ptr<Extension>)
struct _ast6608
    : DeclContext<Pack<_ast6609>>,
      FunctionDecl<DeclaratorDecl<ValueDecl<NamedDeclName<Decl<_ast1>, _str850>,
                                            _ast6610>>,
                   Pack<_ast6609>> {}; // FunctionDecl Undefined
struct _ast6609
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6608>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6610 : FunctionProtoType<_ast6611, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6612
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6608>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6613
    : DeclContext<Pack<_ast6614>>,
      FunctionDecl<DeclaratorDecl<ValueDecl<NamedDeclName<Decl<_ast1>, _str851>,
                                            _ast6615>>,
                   Pack<_ast6614>> {}; // FunctionDecl Null
struct _ast6614
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6613>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6615 : FunctionProtoType<_ast6616, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6617
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6613>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6618
    : DeclContext<Pack<_ast6619>>,
      FunctionDecl<DeclaratorDecl<ValueDecl<NamedDeclName<Decl<_ast1>, _str852>,
                                            _ast6620>>,
                   Pack<_ast6619>> {}; // FunctionDecl True
struct _ast6619
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6618>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6620 : FunctionProtoType<_ast6621, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6622
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6618>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6623
    : DeclContext<Pack<_ast6624>>,
      FunctionDecl<DeclaratorDecl<ValueDecl<NamedDeclName<Decl<_ast1>, _str853>,
                                            _ast6625>>,
                   Pack<_ast6624>> {}; // FunctionDecl False
struct _ast6624
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6623>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6625 : FunctionProtoType<_ast6626, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6627
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6623>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6628
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str854>, _ast6629>,
                     Pack<_ast6630,
                          _ast6631,
                          _ast6632,
                          _ast6633,
                          _ast6634,
                          _ast6635,
                          _ast6636>>,
          Pack<>>,
      DeclContext<Pack<_ast6637,
                       _ast6638,
                       _ast6643,
                       _ast6647,
                       _ast6651,
                       _ast6654,
                       _ast6655,
                       _ast6658,
                       _ast6659,
                       _ast6661,
                       _ast6662,
                       _ast6664,
                       _ast6665,
                       _ast6667,
                       _ast6668,
                       _ast6670,
                       _ast6671,
                       _ast6673,
                       _ast6674,
                       _ast6676,
                       _ast6677,
                       _ast6679,
                       _ast6680,
                       _ast6630,
                       _ast6631,
                       _ast6632,
                       _ast6633,
                       _ast6634,
                       _ast6635,
                       _ast6636,
                       _ast6682,
                       _ast6683,
                       _ast6687>> {}; // CXXRecordDecl ResourceConstraints
struct _ast6629 : StructOrClassRecordType<RecordType<_ast6628>> {
}; // RecordType v8::ResourceConstraints
struct _ast6630
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str855>, _ast3254>>> {
}; // FieldDecl code_range_size_
struct _ast6631
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str856>, _ast3254>>> {
}; // FieldDecl max_old_generation_size_
struct _ast6632
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str857>, _ast3254>>> {
}; // FieldDecl max_young_generation_size_
struct _ast6633
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str858>, _ast3254>>> {
}; // FieldDecl max_zone_pool_size_
struct _ast6634
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str859>, _ast3254>>> {
}; // FieldDecl initial_old_generation_size_
struct _ast6635
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str860>, _ast3254>>> {
}; // FieldDecl initial_young_generation_size_
struct _ast6636
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6628>, _str861>, _ast3733>>> {
}; // FieldDecl stack_limit_
struct _ast6637
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6628>, _str854>, _ast6629>,
                     None>,
          None> {}; // CXXRecordDecl ResourceConstraints
struct _ast6638
    : DeclContext<Pack<_ast6639, _ast6640>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str864>, _ast6641>>,
              Pack<_ast6639, _ast6640>>>,
          _ast6642> {}; // CXXMethodDecl ConfigureDefaultsFromHeapSize
struct _ast6639
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6638>, _str862>, _ast3254>>>> {
}; // ParmVarDecl initial_heap_size_in_bytes
struct _ast6640
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6638>, _str863>, _ast3254>>>> {
}; // ParmVarDecl maximum_heap_size_in_bytes
struct _ast6641
    : FunctionProtoType<_ast114, Pack<_ast3254, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (size_t, size_t)
struct _ast6642 : PointerType<_ast6629> {
}; // PointerType v8::ResourceConstraints *
struct _ast6643
    : DeclContext<Pack<_ast6644, _ast6645>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str867>, _ast6646>>,
              Pack<_ast6644, _ast6645>>>,
          _ast6642> {}; // CXXMethodDecl ConfigureDefaults
struct _ast6644
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6643>, _str865>, _ast3639>>>> {
}; // ParmVarDecl physical_memory
struct _ast6645
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6643>, _str866>, _ast3639>>>> {
}; // ParmVarDecl virtual_memory_limit
struct _ast6646
    : FunctionProtoType<_ast114, Pack<_ast3639, _ast3639>, UnqualifiedType> {
}; // FunctionProtoType void (uint64_t, uint64_t)
struct _ast6647
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str868>, _ast6648>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl stack_limit
struct _ast6648 : FunctionProtoType<_ast3733, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType uint32_t *() const
struct _ast6649 : PointerType<_ast6650> {
}; // PointerType const v8::ResourceConstraints *
struct _ast6650 : ConstQualifiedType<_ast6629> {
}; // RecordType const v8::ResourceConstraints
struct _ast6651
    : DeclContext<Pack<_ast6652>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str869>, _ast6653>>,
              Pack<_ast6652>>>,
          _ast6642> {}; // CXXMethodDecl set_stack_limit
struct _ast6652
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6651>, _str153>, _ast3733>>>> {
}; // ParmVarDecl value
struct _ast6653 : FunctionProtoType<_ast114, Pack<_ast3733>, UnqualifiedType> {
}; // FunctionProtoType void (uint32_t *)
struct _ast6654
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str870>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl code_range_size_in_bytes
struct _ast6655
    : DeclContext<Pack<_ast6656>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str872>, _ast6657>>,
              Pack<_ast6656>>>,
          _ast6642> {}; // CXXMethodDecl set_code_range_size_in_bytes
struct _ast6656
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6655>, _str871>, _ast3254>>>> {
}; // ParmVarDecl limit
struct _ast6657 : FunctionProtoType<_ast114, Pack<_ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (size_t)
struct _ast6658
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str873>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl max_old_generation_size_in_bytes
struct _ast6659
    : DeclContext<Pack<_ast6660>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str874>, _ast6657>>,
              Pack<_ast6660>>>,
          _ast6642> {}; // CXXMethodDecl set_max_old_generation_size_in_bytes
struct _ast6660
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6659>, _str871>, _ast3254>>>> {
}; // ParmVarDecl limit
struct _ast6661
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str875>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl max_young_generation_size_in_bytes
struct _ast6662
    : DeclContext<Pack<_ast6663>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str876>, _ast6657>>,
              Pack<_ast6663>>>,
          _ast6642> {}; // CXXMethodDecl set_max_young_generation_size_in_bytes
struct _ast6663
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6662>, _str871>, _ast3254>>>> {
}; // ParmVarDecl limit
struct _ast6664
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str877>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl initial_old_generation_size_in_bytes
struct _ast6665
    : DeclContext<Pack<_ast6666>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str879>, _ast6657>>,
              Pack<_ast6666>>>,
          _ast6642> {
}; // CXXMethodDecl set_initial_old_generation_size_in_bytes
struct _ast6666
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6665>, _str878>, _ast3254>>>> {
}; // ParmVarDecl initial_size
struct _ast6667
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str880>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl initial_young_generation_size_in_bytes
struct _ast6668
    : DeclContext<Pack<_ast6669>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str881>, _ast6657>>,
              Pack<_ast6669>>>,
          _ast6642> {
}; // CXXMethodDecl set_initial_young_generation_size_in_bytes
struct _ast6669
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6668>, _str878>, _ast3254>>>> {
}; // ParmVarDecl initial_size
struct _ast6670
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str882>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl code_range_size
struct _ast6671
    : DeclContext<Pack<_ast6672>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str884>, _ast6657>>,
              Pack<_ast6672>>>,
          _ast6642> {}; // CXXMethodDecl set_code_range_size
struct _ast6672
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6671>, _str883>, _ast3254>>>> {
}; // ParmVarDecl limit_in_mb
struct _ast6673
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str885>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl max_semi_space_size_in_kb
struct _ast6674
    : DeclContext<Pack<_ast6675>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str887>, _ast6657>>,
              Pack<_ast6675>>>,
          _ast6642> {}; // CXXMethodDecl set_max_semi_space_size_in_kb
struct _ast6675
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6674>, _str886>, _ast3254>>>> {
}; // ParmVarDecl limit_in_kb
struct _ast6676
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str888>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl max_old_space_size
struct _ast6677
    : DeclContext<Pack<_ast6678>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str889>, _ast6657>>,
              Pack<_ast6678>>>,
          _ast6642> {}; // CXXMethodDecl set_max_old_space_size
struct _ast6678
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6677>, _str883>, _ast3254>>>> {
}; // ParmVarDecl limit_in_mb
struct _ast6679
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str890>, _ast4027>>,
              Pack<>>>,
          _ast6649> {}; // CXXMethodDecl max_zone_pool_size
struct _ast6680
    : DeclContext<Pack<_ast6681>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str891>, _ast6657>>,
              Pack<_ast6681>>>,
          _ast6642> {}; // CXXMethodDecl set_max_zone_pool_size
struct _ast6681
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6680>, _str709>, _ast3254>>>> {
}; // ParmVarDecl bytes
struct _ast6682
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str854>, _ast214>>,
              Pack<>>>,
          _ast6642>> {}; // CXXConstructorDecl ResourceConstraints
struct _ast6683
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str854>, _ast6686>>,
              Pack<_ast6684>>>,
          _ast6642>>,
      DeclContext<Pack<_ast6684>> {}; // CXXConstructorDecl ResourceConstraints
struct _ast6684
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6683>, _str62>, _ast6685>>>> {
}; // ParmVarDecl
struct _ast6685 : LValueReferenceType<ReferenceType<_ast6650>> {
}; // LValueReferenceType const v8::ResourceConstraints &
struct _ast6686 : FunctionProtoType<_ast114, Pack<_ast6685>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::ResourceConstraints &)
struct _ast6687
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6628>, _str854>, _ast6690>>,
              Pack<_ast6688>>>,
          _ast6642>>,
      DeclContext<Pack<_ast6688>> {}; // CXXConstructorDecl ResourceConstraints
struct _ast6688
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6687>, _str62>, _ast6689>>>> {
}; // ParmVarDecl
struct _ast6689 : RValueReferenceType<ReferenceType<_ast6629>> {
}; // RValueReferenceType v8::ResourceConstraints &&
struct _ast6690 : FunctionProtoType<_ast114, Pack<_ast6689>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ResourceConstraints &&)
struct _ast6691
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str892>, _ast6692>>> {
}; // TypedefDecl FatalErrorCallback
struct _ast6692 : TypedefType<_ast6691> {
}; // TypedefType v8::FatalErrorCallback
struct _ast6693
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str893>, _ast6694>>> {
};                                          // TypedefDecl OOMErrorCallback
struct _ast6694 : TypedefType<_ast6693> {}; // TypedefType v8::OOMErrorCallback
struct _ast6695
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str894>, _ast6696>>> {
}; // TypedefDecl DcheckErrorCallback
struct _ast6696 : TypedefType<_ast6695> {
}; // TypedefType v8::DcheckErrorCallback
struct _ast6697
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str895>, _ast6698>>> {
};                                          // TypedefDecl MessageCallback
struct _ast6698 : TypedefType<_ast6697> {}; // TypedefType v8::MessageCallback
struct _ast6699
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str896>, _ast6700>>> {
};                                          // TypedefDecl LogEventCallback
struct _ast6700 : TypedefType<_ast6699> {}; // TypedefType v8::LogEventCallback
struct _ast6701
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str897>, _ast6702>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast6703,
                       _ast6704,
                       _ast6709,
                       _ast6714,
                       _ast6719,
                       _ast6724,
                       _ast6729,
                       _ast6735>> {}; // CXXRecordDecl Exception
struct _ast6702 : StructOrClassRecordType<RecordType<_ast6701>> {
}; // RecordType v8::Exception
struct _ast6703
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6701>, _str897>, _ast6702>,
                     None>,
          None> {}; // CXXRecordDecl Exception
struct _ast6704
    : DeclContext<Pack<_ast6705>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str898>, _ast6707>>,
          Pack<_ast6705>>> {}; // CXXMethodDecl RangeError
struct _ast6705
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6704>, _str336>, _ast6706>>>> {
}; // ParmVarDecl message
struct _ast6707 : FunctionProtoType<_ast6708, Pack<_ast6706>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6709
    : DeclContext<Pack<_ast6710>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str899>, _ast6712>>,
          Pack<_ast6710>>> {}; // CXXMethodDecl ReferenceError
struct _ast6710
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6709>, _str336>, _ast6711>>>> {
}; // ParmVarDecl message
struct _ast6712 : FunctionProtoType<_ast6713, Pack<_ast6711>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6714
    : DeclContext<Pack<_ast6715>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str900>, _ast6717>>,
          Pack<_ast6715>>> {}; // CXXMethodDecl SyntaxError
struct _ast6715
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6714>, _str336>, _ast6716>>>> {
}; // ParmVarDecl message
struct _ast6717 : FunctionProtoType<_ast6718, Pack<_ast6716>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6719
    : DeclContext<Pack<_ast6720>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str901>, _ast6722>>,
          Pack<_ast6720>>> {}; // CXXMethodDecl TypeError
struct _ast6720
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6719>, _str336>, _ast6721>>>> {
}; // ParmVarDecl message
struct _ast6722 : FunctionProtoType<_ast6723, Pack<_ast6721>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6724
    : DeclContext<Pack<_ast6725>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str902>, _ast6727>>,
          Pack<_ast6725>>> {}; // CXXMethodDecl Error
struct _ast6725
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6724>, _str336>, _ast6726>>>> {
}; // ParmVarDecl message
struct _ast6727 : FunctionProtoType<_ast6728, Pack<_ast6726>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6729
    : DeclContext<Pack<_ast6730, _ast6731>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str903>, _ast6733>>,
          Pack<_ast6730, _ast6731>>> {}; // CXXMethodDecl CreateMessage
struct _ast6730
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6729>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6731
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6729>, _str712>, _ast6732>>>> {
}; // ParmVarDecl exception
struct _ast6733
    : FunctionProtoType<_ast6734, Pack<_ast184, _ast6732>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _ast6735
    : DeclContext<Pack<_ast6736>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6701>, _str285>, _ast6738>>,
          Pack<_ast6736>>> {}; // CXXMethodDecl GetStackTrace
struct _ast6736
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6735>, _str712>, _ast6737>>>> {
}; // ParmVarDecl exception
struct _ast6738 : FunctionProtoType<_ast6739, Pack<_ast6737>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::StackTrace> (Local<v8::Value>)
struct _ast6740
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str904>, _ast6741>>> {
}; // TypedefDecl CounterLookupCallback
struct _ast6741 : TypedefType<_ast6740> {
}; // TypedefType v8::CounterLookupCallback
struct _ast6742
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str905>, _ast6743>>> {
}; // TypedefDecl CreateHistogramCallback
struct _ast6743 : TypedefType<_ast6742> {
}; // TypedefType v8::CreateHistogramCallback
struct _ast6744
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str906>, _ast6745>>> {
}; // TypedefDecl AddHistogramSampleCallback
struct _ast6745 : TypedefType<_ast6744> {
}; // TypedefType v8::AddHistogramSampleCallback
struct _ast6746
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str907>, _ast6747>>> {
}; // TypedefDecl BeforeCallEnteredCallback
struct _ast6747 : TypedefType<_ast6746> {
}; // TypedefType v8::BeforeCallEnteredCallback
struct _ast6748
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str908>, _ast6749>>> {
}; // TypedefDecl CallCompletedCallback
struct _ast6749 : TypedefType<_ast6748> {
}; // TypedefType v8::CallCompletedCallback
struct _ast6750
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str909>, _ast6751>>> {
}; // TypedefDecl HostImportModuleDynamicallyCallback
struct _ast6751 : TypedefType<_ast6750> {
}; // TypedefType v8::HostImportModuleDynamicallyCallback
struct _ast6752
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str910>, _ast6753>>> {
}; // TypedefDecl HostInitializeImportMetaObjectCallback
struct _ast6753 : TypedefType<_ast6752> {
}; // TypedefType v8::HostInitializeImportMetaObjectCallback
struct _ast6754
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str911>, _ast6755>>> {
}; // TypedefDecl PrepareStackTraceCallback
struct _ast6755 : TypedefType<_ast6754> {
}; // TypedefType v8::PrepareStackTraceCallback
struct _ast6761
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str912>, _ast6762>>> {
};                                          // TypedefDecl PromiseHook
struct _ast6762 : TypedefType<_ast6761> {}; // TypedefType v8::PromiseHook
struct _ast6768
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str913>, _ast6769>,
                     Pack<_ast6770, _ast6772, _ast6774>>,
          Pack<>>,
      DeclContext<Pack<_ast6776,
                       _ast6777,
                       _ast6785,
                       _ast6790,
                       _ast6792,
                       _ast6770,
                       _ast6772,
                       _ast6774>> {}; // CXXRecordDecl PromiseRejectMessage
struct _ast6769 : StructOrClassRecordType<RecordType<_ast6768>> {
}; // RecordType v8::PromiseRejectMessage
struct _ast6770
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6768>, _str719>, _ast6771>>> {
}; // FieldDecl promise_
struct _ast6772
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6768>, _str914>, _ast6773>>> {
}; // FieldDecl event_
struct _ast6773 : EnumType<_ast6763, _ast1901> {
}; // EnumType v8::PromiseRejectEvent
struct _ast6774
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6768>, _str915>, _ast6775>>> {
}; // FieldDecl value_
struct _ast6776
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6768>, _str913>, _ast6769>,
                     None>,
          None> {}; // CXXRecordDecl PromiseRejectMessage
struct _ast6777
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6768>, _str913>, _ast6783>>,
              Pack<_ast6778, _ast6780, _ast6781>>>,
          _ast6784>>,
      DeclContext<Pack<_ast6778, _ast6780, _ast6781>> {
}; // CXXConstructorDecl PromiseRejectMessage
struct _ast6778
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6777>, _str916>, _ast6779>>>> {
}; // ParmVarDecl promise
struct _ast6780
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6777>, _str917>, _ast6773>>>> {
}; // ParmVarDecl event
struct _ast6781
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6777>, _str153>, _ast6782>>>> {
}; // ParmVarDecl value
struct _ast6783 : FunctionProtoType<_ast114,
                                    Pack<_ast6779, _ast6773, _ast6782>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Promise>, v8::PromiseRejectEvent,
   // Local<v8::Value>)
struct _ast6784 : PointerType<_ast6769> {
}; // PointerType v8::PromiseRejectMessage *
struct _ast6785
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6768>, _str646>, _ast6786>>,
              Pack<>>>,
          _ast6788> {}; // CXXMethodDecl GetPromise
struct _ast6786 : FunctionProtoType<_ast6787, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Promise> () const
struct _ast6788 : PointerType<_ast6789> {
}; // PointerType const v8::PromiseRejectMessage *
struct _ast6789 : ConstQualifiedType<_ast6769> {
}; // RecordType const v8::PromiseRejectMessage
struct _ast6790
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6768>, _str918>, _ast6791>>,
              Pack<>>>,
          _ast6788> {}; // CXXMethodDecl GetEvent
struct _ast6791 : FunctionProtoType<_ast6773, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::PromiseRejectEvent () const
struct _ast6792
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6768>, _str919>, _ast6793>>,
              Pack<>>>,
          _ast6788> {}; // CXXMethodDecl GetValue
struct _ast6793 : FunctionProtoType<_ast6794, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast6795
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str920>, _ast6796>>> {
}; // TypedefDecl PromiseRejectCallback
struct _ast6796 : TypedefType<_ast6795> {
}; // TypedefType v8::PromiseRejectCallback
struct _ast6797
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str921>, _ast6798>>> {
}; // TypedefDecl MicrotasksCompletedCallback
struct _ast6798 : TypedefType<_ast6797> {
}; // TypedefType v8::MicrotasksCompletedCallback
struct _ast6799
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str922>, _ast6800>>> {
}; // TypedefDecl MicrotasksCompletedCallbackWithData
struct _ast6800 : TypedefType<_ast6799> {
}; // TypedefType v8::MicrotasksCompletedCallbackWithData
struct _ast6801
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str923>, _ast6802>>> {
};                                          // TypedefDecl MicrotaskCallback
struct _ast6802 : TypedefType<_ast6801> {}; // TypedefType v8::MicrotaskCallback
struct _ast6807
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast49>, _str21>, _ast50>,
                     None>,
          None> {}; // CXXRecordDecl MicrotaskQueue
struct _ast6808
    : DeclContext<Pack<_ast6809, _ast6810>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast49>, _str61>, _ast6812>>,
          Pack<_ast6809, _ast6810>>> {}; // CXXMethodDecl New
struct _ast6809
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6808>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6810
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6808>, _str924>, _ast6811>>>> {
}; // ParmVarDecl policy
struct _ast6811 : EnumType<_ast6803, _ast1901> {
}; // EnumType v8::MicrotasksPolicy
struct _ast6812
    : FunctionProtoType<_ast6813, Pack<_ast184, _ast6811>, UnqualifiedType> {
}; // FunctionProtoType std::unique_ptr<MicrotaskQueue> (v8::Isolate *,
   // v8::MicrotasksPolicy)
struct _ast6814
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str925>, _ast6815>>,
              Pack<>>>,
          _ast6816>>> {}; // CXXDestructorDecl ~MicrotaskQueue
struct _ast6815 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
};                                        // FunctionProtoType void ()
struct _ast6816 : PointerType<_ast50> {}; // PointerType v8::MicrotaskQueue *
struct _ast6817
    : DeclContext<Pack<_ast6818, _ast6819>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str927>, _ast6821>>,
              Pack<_ast6818, _ast6819>>>,
          _ast6816>> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast6818
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6817>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6819
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6817>, _str926>, _ast6820>>>> {
}; // ParmVarDecl microtask
struct _ast6821
    : FunctionProtoType<_ast114, Pack<_ast184, _ast6820>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, Local<v8::Function>)
struct _ast6822
    : DeclContext<Pack<_ast6823, _ast6826, _ast6827>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str927>, _ast6828>>,
              Pack<_ast6823, _ast6826, _ast6827>>>,
          _ast6816>> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast6823
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6822>, _str60>, _ast6824>>>> {
};                                          // ParmVarDecl isolate
struct _ast6824 : PointerType<_ast6825> {}; // PointerType v8::Isolate *
struct _ast6826
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6822>, _str80>, _ast6802>>>> {
}; // ParmVarDecl callback
struct _ast6827
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6822>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast6828 : FunctionProtoType<_ast114,
                                    Pack<_ast6824, _ast6802, _ast2223>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _ast6829
    : DeclContext<Pack<_ast6830, _ast6831>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str928>, _ast6832>>,
              Pack<_ast6830, _ast6831>>>,
          _ast6816>> {}; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast6830
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6829>, _str80>, _ast6800>>>> {
}; // ParmVarDecl callback
struct _ast6831
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6829>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast6832
    : FunctionProtoType<_ast114, Pack<_ast6800, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ast6833
    : DeclContext<Pack<_ast6834, _ast6835>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str929>, _ast6832>>,
              Pack<_ast6834, _ast6835>>>,
          _ast6816>> {}; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast6834
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6833>, _str80>, _ast6800>>>> {
}; // ParmVarDecl callback
struct _ast6835
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6833>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast6836
    : DeclContext<Pack<_ast6837>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str930>, _ast2846>>,
              Pack<_ast6837>>>,
          _ast6816>> {}; // CXXMethodDecl PerformCheckpoint
struct _ast6837
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6836>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6838
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str931>, _ast128>>,
              Pack<>>>,
          _ast6839>> {}; // CXXMethodDecl IsRunningMicrotasks
struct _ast6839 : PointerType<_ast6840> {
}; // PointerType const v8::MicrotaskQueue *
struct _ast6840 : ConstQualifiedType<_ast50> {
}; // RecordType const v8::MicrotaskQueue
struct _ast6841
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str932>, _ast2938>>,
              Pack<>>>,
          _ast6839>> {}; // CXXMethodDecl GetMicrotasksScopeDepth
struct _ast6842
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str21>, _ast6845>>,
              Pack<_ast6843>>>,
          _ast6816>>,
      DeclContext<Pack<_ast6843>> {}; // CXXConstructorDecl MicrotaskQueue
struct _ast6843
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6842>, _str62>, _ast6844>>>> {
}; // ParmVarDecl
struct _ast6844 : LValueReferenceType<ReferenceType<_ast6840>> {
}; // LValueReferenceType const v8::MicrotaskQueue &
struct _ast6845 : FunctionProtoType<_ast114, Pack<_ast6844>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::MicrotaskQueue &)
struct _ast6846
    : DeclContext<Pack<_ast6847>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast49>, _str64>, _ast6848>>,
              Pack<_ast6847>>>,
          _ast6816> {}; // CXXMethodDecl operator=
struct _ast6847
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6846>, _str62>, _ast6844>>>> {
}; // ParmVarDecl
struct _ast6848 : FunctionProtoType<_ast6849, Pack<_ast6844>, UnqualifiedType> {
}; // FunctionProtoType v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _ast6849 : LValueReferenceType<ReferenceType<_ast50>> {
}; // LValueReferenceType v8::MicrotaskQueue &
struct _ast6850
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str933>, _ast6851>,
                     Pack<_ast6852, _ast6853, _ast6857>>,
          Pack<>>,
      DeclContext<Pack<_ast6858,
                       _ast6862,
                       _ast6868,
                       _ast6873,
                       _ast6875,
                       _ast6877,
                       _ast6879,
                       _ast6882,
                       _ast6887,
                       _ast6852,
                       _ast6853,
                       _ast6857>> {}; // CXXRecordDecl MicrotasksScope
struct _ast6851 : StructOrClassRecordType<RecordType<_ast6850>> {
}; // RecordType v8::MicrotasksScope
struct _ast6852
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6850>, _str118>, _ast2904>>> {
}; // FieldDecl isolate_
struct _ast6853
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6850>, _str934>, _ast6854>>> {
}; // FieldDecl microtask_queue_
struct _ast6854 : ConstQualifiedType<_ast6855> {
}; // PointerType internal::MicrotaskQueue *const
struct _ast6855 : PointerType<_ast6856> {
}; // PointerType internal::MicrotaskQueue *
struct _ast6857
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6850>, _str935>, _ast129>>> {
}; // FieldDecl run_
struct _ast6858
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6850>, _str933>, _ast6851>,
                     None>,
          None> {}; // CXXRecordDecl MicrotasksScope
struct _ast6862
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6850>, _str933>, _ast6866>>,
              Pack<_ast6863, _ast6864>>>,
          _ast6867>>,
      DeclContext<Pack<_ast6863, _ast6864>> {
}; // CXXConstructorDecl MicrotasksScope
struct _ast6863
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6862>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6864
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6862>, _str81>, _ast6865>>>> {
}; // ParmVarDecl type
struct _ast6865 : EnumType<_ast6859, _ast1901> {
}; // EnumType v8::MicrotasksScope::Type
struct _ast6866
    : FunctionProtoType<_ast114, Pack<_ast184, _ast6865>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _ast6867 : PointerType<_ast6851> {}; // PointerType v8::MicrotasksScope *
struct _ast6868
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6850>, _str933>, _ast6872>>,
              Pack<_ast6869, _ast6870, _ast6871>>>,
          _ast6867>>,
      DeclContext<Pack<_ast6869, _ast6870, _ast6871>> {
}; // CXXConstructorDecl MicrotasksScope
struct _ast6869
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6868>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6870
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6868>, _str936>, _ast6816>>>> {
}; // ParmVarDecl microtask_queue
struct _ast6871
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6868>, _str81>, _ast6865>>>> {
}; // ParmVarDecl type
struct _ast6872 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast6816, _ast6865>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskQueue *,
   // v8::MicrotasksScope::Type)
struct _ast6873
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6850>, _str937>, _ast6874>>,
              Pack<>>>,
          _ast6867>> {}; // CXXDestructorDecl ~MicrotasksScope
struct _ast6874 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast6875
    : DeclContext<Pack<_ast6876>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6850>, _str930>, _ast2846>>,
          Pack<_ast6876>>> {}; // CXXMethodDecl PerformCheckpoint
struct _ast6876
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6875>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6877
    : DeclContext<Pack<_ast6878>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6850>, _str938>, _ast2852>>,
          Pack<_ast6878>>> {}; // CXXMethodDecl GetCurrentDepth
struct _ast6878
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6877>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6879
    : DeclContext<Pack<_ast6880>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast6850>, _str931>, _ast6881>>,
          Pack<_ast6880>>> {}; // CXXMethodDecl IsRunningMicrotasks
struct _ast6880
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6879>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast6881 : FunctionProtoType<_ast129, Pack<_ast184>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::Isolate *)
struct _ast6882
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6850>, _str933>, _ast6886>>,
              Pack<_ast6883>>>,
          _ast6867>>,
      DeclContext<Pack<_ast6883>> {}; // CXXConstructorDecl MicrotasksScope
struct _ast6883
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6882>, _str62>, _ast6884>>>> {
}; // ParmVarDecl
struct _ast6884 : LValueReferenceType<ReferenceType<_ast6885>> {
}; // LValueReferenceType const v8::MicrotasksScope &
struct _ast6885 : ConstQualifiedType<_ast6851> {
}; // RecordType const v8::MicrotasksScope
struct _ast6886 : FunctionProtoType<_ast114, Pack<_ast6884>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::MicrotasksScope &)
struct _ast6887
    : DeclContext<Pack<_ast6888>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6850>, _str64>, _ast6889>>,
              Pack<_ast6888>>>,
          _ast6867> {}; // CXXMethodDecl operator=
struct _ast6888
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6887>, _str62>, _ast6884>>>> {
}; // ParmVarDecl
struct _ast6889 : FunctionProtoType<_ast6890, Pack<_ast6884>, UnqualifiedType> {
}; // FunctionProtoType v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _ast6890 : LValueReferenceType<ReferenceType<_ast6851>> {
}; // LValueReferenceType v8::MicrotasksScope &
struct _ast6891
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str939>, _ast6892>>> {
}; // TypedefDecl FailedAccessCheckCallback
struct _ast6892 : TypedefType<_ast6891> {
}; // TypedefType v8::FailedAccessCheckCallback
struct _ast6893
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str940>, _ast6894>>> {
}; // TypedefDecl AllowCodeGenerationFromStringsCallback
struct _ast6894 : TypedefType<_ast6893> {
}; // TypedefType v8::AllowCodeGenerationFromStringsCallback
struct _ast6895
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str941>, _ast6896>>> {
};                                          // TypedefDecl ExtensionCallback
struct _ast6896 : TypedefType<_ast6895> {}; // TypedefType v8::ExtensionCallback
struct _ast6897
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str942>, _ast6898>>> {
}; // TypedefDecl AllowWasmCodeGenerationCallback
struct _ast6898 : TypedefType<_ast6897> {
}; // TypedefType v8::AllowWasmCodeGenerationCallback
struct _ast6899
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str943>, _ast6900>>> {
}; // TypedefDecl ApiImplementationCallback
struct _ast6900 : TypedefType<_ast6899> {
}; // TypedefType v8::ApiImplementationCallback
struct _ast6901
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str944>, _ast6902>>> {
}; // TypedefDecl WasmStreamingCallback
struct _ast6902 : TypedefType<_ast6901> {
}; // TypedefType v8::WasmStreamingCallback
struct _ast6903
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str945>, _ast6904>>> {
}; // TypedefDecl WasmThreadsEnabledCallback
struct _ast6904 : TypedefType<_ast6903> {
}; // TypedefType v8::WasmThreadsEnabledCallback
struct _ast6919
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str946>, _ast6920>>> {
};                                          // TypedefDecl GCCallback
struct _ast6920 : TypedefType<_ast6919> {}; // TypedefType v8::GCCallback
struct _ast6921
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str947>, _ast6922>>> {
};                                          // TypedefDecl InterruptCallback
struct _ast6922 : TypedefType<_ast6921> {}; // TypedefType v8::InterruptCallback
struct _ast6923
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str948>, _ast6924>>> {
}; // TypedefDecl NearHeapLimitCallback
struct _ast6924 : TypedefType<_ast6923> {
}; // TypedefType v8::NearHeapLimitCallback
struct _ast6925
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str949>, _ast6926>,
                     Pack<_ast6927,
                          _ast6928,
                          _ast6929,
                          _ast6930,
                          _ast6931,
                          _ast6932,
                          _ast6933,
                          _ast6934,
                          _ast6935,
                          _ast6936,
                          _ast6937,
                          _ast6938>>,
          Pack<>>,
      DeclContext<Pack<_ast6939,
                       _ast6940,
                       _ast6942,
                       _ast6943,
                       _ast6944,
                       _ast6945,
                       _ast6946,
                       _ast6947,
                       _ast6948,
                       _ast6949,
                       _ast6950,
                       _ast6951,
                       _ast6952,
                       _ast6953,
                       _ast6927,
                       _ast6928,
                       _ast6929,
                       _ast6930,
                       _ast6931,
                       _ast6932,
                       _ast6933,
                       _ast6934,
                       _ast6935,
                       _ast6936,
                       _ast6937,
                       _ast6938>> {}; // CXXRecordDecl HeapStatistics
struct _ast6926 : StructOrClassRecordType<RecordType<_ast6925>> {
}; // RecordType v8::HeapStatistics
struct _ast6927
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str950>, _ast3254>>> {
}; // FieldDecl total_heap_size_
struct _ast6928
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str951>, _ast3254>>> {
}; // FieldDecl total_heap_size_executable_
struct _ast6929
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str952>, _ast3254>>> {
}; // FieldDecl total_physical_size_
struct _ast6930
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str953>, _ast3254>>> {
}; // FieldDecl total_available_size_
struct _ast6931
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str954>, _ast3254>>> {
}; // FieldDecl used_heap_size_
struct _ast6932
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str955>, _ast3254>>> {
}; // FieldDecl heap_size_limit_
struct _ast6933
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str956>, _ast3254>>> {
}; // FieldDecl malloced_memory_
struct _ast6934
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str957>, _ast3254>>> {
}; // FieldDecl external_memory_
struct _ast6935
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str958>, _ast3254>>> {
}; // FieldDecl peak_malloced_memory_
struct _ast6936
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str959>, _ast129>>> {
}; // FieldDecl does_zap_garbage_
struct _ast6937
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str960>, _ast3254>>> {
}; // FieldDecl number_of_native_contexts_
struct _ast6938
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6925>, _str961>, _ast3254>>> {
}; // FieldDecl number_of_detached_contexts_
struct _ast6939
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6925>, _str949>, _ast6926>,
                     None>,
          None> {}; // CXXRecordDecl HeapStatistics
struct _ast6940
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str949>, _ast113>>,
              Pack<>>>,
          _ast6941>> {};                    // CXXConstructorDecl HeapStatistics
struct _ast6941 : PointerType<_ast6926> {}; // PointerType v8::HeapStatistics *
struct _ast6942
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str962>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl total_heap_size
struct _ast6943
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str963>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl total_heap_size_executable
struct _ast6944
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str964>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl total_physical_size
struct _ast6945
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str965>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl total_available_size
struct _ast6946
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str966>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl used_heap_size
struct _ast6947
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str967>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl heap_size_limit
struct _ast6948
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str968>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl malloced_memory
struct _ast6949
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str969>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl external_memory
struct _ast6950
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str970>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl peak_malloced_memory
struct _ast6951
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str971>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl number_of_native_contexts
struct _ast6952
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str972>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl number_of_detached_contexts
struct _ast6953
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6925>, _str973>, _ast5645>>,
              Pack<>>>,
          _ast6941> {}; // CXXMethodDecl does_zap_garbage
struct _ast6954
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str974>, _ast6955>,
                     Pack<_ast6956, _ast6957, _ast6958, _ast6959, _ast6960>>,
          Pack<>>,
      DeclContext<Pack<_ast6961,
                       _ast6962,
                       _ast6964,
                       _ast6966,
                       _ast6967,
                       _ast6968,
                       _ast6969,
                       _ast6956,
                       _ast6957,
                       _ast6958,
                       _ast6959,
                       _ast6960>> {}; // CXXRecordDecl HeapSpaceStatistics
struct _ast6955 : StructOrClassRecordType<RecordType<_ast6954>> {
}; // RecordType v8::HeapSpaceStatistics
struct _ast6956
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6954>, _str975>, _ast1914>>> {
}; // FieldDecl space_name_
struct _ast6957
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6954>, _str976>, _ast3254>>> {
}; // FieldDecl space_size_
struct _ast6958
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6954>, _str977>, _ast3254>>> {
}; // FieldDecl space_used_size_
struct _ast6959
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6954>, _str978>, _ast3254>>> {
}; // FieldDecl space_available_size_
struct _ast6960
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6954>, _str979>, _ast3254>>> {
}; // FieldDecl physical_space_size_
struct _ast6961
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6954>, _str974>, _ast6955>,
                     None>,
          None> {}; // CXXRecordDecl HeapSpaceStatistics
struct _ast6962
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6954>, _str974>, _ast113>>,
              Pack<>>>,
          _ast6963>> {}; // CXXConstructorDecl HeapSpaceStatistics
struct _ast6963 : PointerType<_ast6955> {
}; // PointerType v8::HeapSpaceStatistics *
struct _ast6964
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6954>, _str980>, _ast6965>>,
              Pack<>>>,
          _ast6963> {}; // CXXMethodDecl space_name
struct _ast6965 : FunctionProtoType<_ast1914, Pack<>, UnqualifiedType> {
}; // FunctionProtoType const char *()
struct _ast6966
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6954>, _str981>, _ast5645>>,
              Pack<>>>,
          _ast6963> {}; // CXXMethodDecl space_size
struct _ast6967
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6954>, _str982>, _ast5645>>,
              Pack<>>>,
          _ast6963> {}; // CXXMethodDecl space_used_size
struct _ast6968
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6954>, _str983>, _ast5645>>,
              Pack<>>>,
          _ast6963> {}; // CXXMethodDecl space_available_size
struct _ast6969
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6954>, _str984>, _ast5645>>,
              Pack<>>>,
          _ast6963> {}; // CXXMethodDecl physical_space_size
struct _ast6970
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str985>, _ast6971>,
                     Pack<_ast6972, _ast6973, _ast6974, _ast6975>>,
          Pack<>>,
      DeclContext<Pack<_ast6976,
                       _ast6977,
                       _ast6979,
                       _ast6980,
                       _ast6981,
                       _ast6982,
                       _ast6972,
                       _ast6973,
                       _ast6974,
                       _ast6975>> {}; // CXXRecordDecl HeapObjectStatistics
struct _ast6971 : StructOrClassRecordType<RecordType<_ast6970>> {
}; // RecordType v8::HeapObjectStatistics
struct _ast6972
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6970>, _str986>, _ast1914>>> {
}; // FieldDecl object_type_
struct _ast6973
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6970>, _str987>, _ast1914>>> {
}; // FieldDecl object_sub_type_
struct _ast6974
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6970>, _str988>, _ast3254>>> {
}; // FieldDecl object_count_
struct _ast6975
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6970>, _str989>, _ast3254>>> {
}; // FieldDecl object_size_
struct _ast6976
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6970>, _str985>, _ast6971>,
                     None>,
          None> {}; // CXXRecordDecl HeapObjectStatistics
struct _ast6977
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6970>, _str985>, _ast113>>,
              Pack<>>>,
          _ast6978>> {}; // CXXConstructorDecl HeapObjectStatistics
struct _ast6978 : PointerType<_ast6971> {
}; // PointerType v8::HeapObjectStatistics *
struct _ast6979
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6970>, _str990>, _ast6965>>,
              Pack<>>>,
          _ast6978> {}; // CXXMethodDecl object_type
struct _ast6980
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6970>, _str991>, _ast6965>>,
              Pack<>>>,
          _ast6978> {}; // CXXMethodDecl object_sub_type
struct _ast6981
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6970>, _str992>, _ast5645>>,
              Pack<>>>,
          _ast6978> {}; // CXXMethodDecl object_count
struct _ast6982
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6970>, _str993>, _ast5645>>,
              Pack<>>>,
          _ast6978> {}; // CXXMethodDecl object_size
struct _ast6983
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str994>, _ast6984>,
                     Pack<_ast6985, _ast6986, _ast6987>>,
          Pack<>>,
      DeclContext<Pack<_ast6988,
                       _ast6989,
                       _ast6991,
                       _ast6992,
                       _ast6993,
                       _ast6985,
                       _ast6986,
                       _ast6987>> {}; // CXXRecordDecl HeapCodeStatistics
struct _ast6984 : StructOrClassRecordType<RecordType<_ast6983>> {
}; // RecordType v8::HeapCodeStatistics
struct _ast6985
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6983>, _str995>, _ast3254>>> {
}; // FieldDecl code_and_metadata_size_
struct _ast6986
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6983>, _str996>, _ast3254>>> {
}; // FieldDecl bytecode_and_metadata_size_
struct _ast6987
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6983>, _str997>, _ast3254>>> {
}; // FieldDecl external_script_source_size_
struct _ast6988
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6983>, _str994>, _ast6984>,
                     None>,
          None> {}; // CXXRecordDecl HeapCodeStatistics
struct _ast6989
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6983>, _str994>, _ast113>>,
              Pack<>>>,
          _ast6990>> {}; // CXXConstructorDecl HeapCodeStatistics
struct _ast6990 : PointerType<_ast6984> {
}; // PointerType v8::HeapCodeStatistics *
struct _ast6991
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6983>, _str998>, _ast5645>>,
              Pack<>>>,
          _ast6990> {}; // CXXMethodDecl code_and_metadata_size
struct _ast6992
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6983>, _str999>, _ast5645>>,
              Pack<>>>,
          _ast6990> {}; // CXXMethodDecl bytecode_and_metadata_size
struct _ast6993
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast6983>, _str1000>, _ast5645>>,
              Pack<>>>,
          _ast6990> {}; // CXXMethodDecl external_script_source_size
struct _ast6994
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1001>, _ast6995>,
                     Pack<_ast6996,
                          _ast6999,
                          _ast7002,
                          _ast7003,
                          _ast7004,
                          _ast7006,
                          _ast7007,
                          _ast7015>>,
          Pack<>>,
      DeclContext<Pack<_ast7016,
                       _ast6996,
                       _ast6999,
                       _ast7002,
                       _ast7003,
                       _ast7004,
                       _ast7006,
                       _ast7028,
                       _ast7033,
                       _ast7009,
                       _ast7007,
                       _ast7015>> {}; // CXXRecordDecl JitCodeEvent
struct _ast6995 : StructOrClassRecordType<RecordType<_ast6994>> {
}; // RecordType v8::JitCodeEvent
struct _ast6996
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str81>, _ast6997>>> {
}; // FieldDecl type
struct _ast6997 : EnumType<_ast6998, _ast1901> {
}; // EnumType v8::JitCodeEvent::EventType
struct _ast6999
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str1002>, _ast7000>>> {
}; // FieldDecl code_type
struct _ast7000 : EnumType<_ast7001, _ast1901> {
}; // EnumType v8::JitCodeEvent::CodeType
struct _ast7002
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str1003>, _ast2223>>> {
}; // FieldDecl code_start
struct _ast7003
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str1004>, _ast3254>>> {
}; // FieldDecl code_len
struct _ast7004
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str1005>, _ast7005>>> {
}; // FieldDecl script
struct _ast7006
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str1006>, _ast2223>>> {
}; // FieldDecl user_data
struct _ast7007
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast6994>, _str62>, _ast7008>>> {
}; // FieldDecl
struct _ast7008 : UnionRecordType<RecordType<_ast7009>> {
}; // RecordType v8::JitCodeEvent::(anonymous union at
   // D:\gen8/v8/include/v8.h:7072:3)
struct _ast7009
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclAnon<Decl<_ast6994>, _str62>, _ast7008>,
                     Pack<_ast7010, _ast7012, _ast7014>>,
          Pack<>>,
      DeclContext<Pack<_ast7010, _ast7012, _ast7014>> {}; // CXXRecordDecl
struct _ast7010
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7009>, _str500>, _ast7011>>> {
}; // FieldDecl name
struct _ast7012
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7009>, _str1007>, _ast7013>>> {
}; // FieldDecl line_info
struct _ast7014
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7009>, _str1008>, _ast2223>>> {
}; // FieldDecl new_code_start
struct _ast7015
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6994>, _str60>, _ast184>>> {
}; // FieldDecl isolate
struct _ast7016
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6994>, _str1001>,
                                        _ast6995>,
                               None>,
                    None> {}; // CXXRecordDecl JitCodeEvent
struct _ast7028
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6994>, _str1009>,
                                        _ast7029>,
                               Pack<_ast7030, _ast7031>>,
                    Pack<>>,
      DeclContext<Pack<_ast7032, _ast7030, _ast7031>> {
}; // CXXRecordDecl name_t
struct _ast7029 : StructOrClassRecordType<RecordType<_ast7028>> {
}; // RecordType v8::JitCodeEvent::name_t
struct _ast7030
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7028>, _str493>, _ast1914>>> {
}; // FieldDecl str
struct _ast7031
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7028>, _str1010>, _ast3254>>> {
}; // FieldDecl len
struct _ast7032
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7028>, _str1009>,
                                        _ast7029>,
                               None>,
                    None> {}; // CXXRecordDecl name_t
struct _ast7033
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast6994>, _str1011>,
                                        _ast7034>,
                               Pack<_ast7035, _ast7036, _ast7037>>,
                    Pack<>>,
      DeclContext<Pack<_ast7039, _ast7035, _ast7036, _ast7037>> {
}; // CXXRecordDecl line_info_t
struct _ast7034 : StructOrClassRecordType<RecordType<_ast7033>> {
}; // RecordType v8::JitCodeEvent::line_info_t
struct _ast7035
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7033>, _str1012>, _ast3254>>> {
}; // FieldDecl offset
struct _ast7036
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7033>, _str1013>, _ast3254>>> {
}; // FieldDecl pos
struct _ast7037
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7033>, _str1014>, _ast7038>>> {
}; // FieldDecl position_type
struct _ast7038 : EnumType<_ast7023, _ast1901> {
}; // EnumType v8::JitCodeEvent::PositionType
struct _ast7039
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7033>, _str1011>,
                                        _ast7034>,
                               None>,
                    None> {}; // CXXRecordDecl line_info_t
struct _ast7051
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str1015>, _ast7052>>> {
}; // TypedefDecl JitCodeEventHandler
struct _ast7052 : TypedefType<_ast7051> {
}; // TypedefType v8::JitCodeEventHandler
struct _ast7053
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str1016>, _ast7054>>> {
}; // TypedefDecl UnhandledExceptionCallback
struct _ast7054 : TypedefType<_ast7053> {
}; // TypedefType v8::UnhandledExceptionCallback
struct _ast7055
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1017>, _ast7056>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast7057, _ast7058, _ast7061, _ast7065>> {
}; // CXXRecordDecl ExternalResourceVisitor
struct _ast7056 : StructOrClassRecordType<RecordType<_ast7055>> {
}; // RecordType v8::ExternalResourceVisitor
struct _ast7057
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7055>, _str1017>,
                                        _ast7056>,
                               None>,
                    None> {}; // CXXRecordDecl ExternalResourceVisitor
struct _ast7058
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7055>, _str1018>, _ast7059>>,
              Pack<>>>,
          _ast7060>>> {}; // CXXDestructorDecl ~ExternalResourceVisitor
struct _ast7059 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7060 : PointerType<_ast7056> {
}; // PointerType v8::ExternalResourceVisitor *
struct _ast7061
    : DeclContext<Pack<_ast7062>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7055>, _str1020>, _ast7064>>,
              Pack<_ast7062>>>,
          _ast7060>> {}; // CXXMethodDecl VisitExternalString
struct _ast7062
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7061>, _str1019>, _ast7063>>>> {
}; // ParmVarDecl string
struct _ast7064 : FunctionProtoType<_ast114, Pack<_ast7063>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast7065
    : DeclContext<Pack<_ast7066>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7055>, _str64>, _ast7069>>,
              Pack<_ast7066>>>,
          _ast7060> {}; // CXXMethodDecl operator=
struct _ast7066
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7065>, _str62>, _ast7067>>>> {
}; // ParmVarDecl
struct _ast7067 : LValueReferenceType<ReferenceType<_ast7068>> {
}; // LValueReferenceType const v8::ExternalResourceVisitor &
struct _ast7068 : ConstQualifiedType<_ast7056> {
}; // RecordType const v8::ExternalResourceVisitor
struct _ast7069 : FunctionProtoType<_ast7070, Pack<_ast7067>, UnqualifiedType> {
}; // FunctionProtoType v8::ExternalResourceVisitor &(const
   // v8::ExternalResourceVisitor &)
struct _ast7070 : LValueReferenceType<ReferenceType<_ast7056>> {
}; // LValueReferenceType v8::ExternalResourceVisitor &
struct _ast7071
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1021>, _ast7072>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast7073, _ast7074, _ast7077, _ast7083>> {
}; // CXXRecordDecl PersistentHandleVisitor
struct _ast7072 : StructOrClassRecordType<RecordType<_ast7071>> {
}; // RecordType v8::PersistentHandleVisitor
struct _ast7073
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7071>, _str1021>,
                                        _ast7072>,
                               None>,
                    None> {}; // CXXRecordDecl PersistentHandleVisitor
struct _ast7074
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7071>, _str1022>, _ast7075>>,
              Pack<>>>,
          _ast7076>>> {}; // CXXDestructorDecl ~PersistentHandleVisitor
struct _ast7075 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7076 : PointerType<_ast7072> {
}; // PointerType v8::PersistentHandleVisitor *
struct _ast7077
    : DeclContext<Pack<_ast7078, _ast7081>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7071>, _str1023>, _ast7082>>,
              Pack<_ast7078, _ast7081>>>,
          _ast7076>> {}; // CXXMethodDecl VisitPersistentHandle
struct _ast7078
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7077>, _str153>, _ast7079>>>> {
}; // ParmVarDecl value
struct _ast7079 : PointerType<_ast7080> {
}; // PointerType Persistent<v8::Value> *
struct _ast7081
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7077>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast7082
    : FunctionProtoType<_ast114, Pack<_ast7079, _ast1921>, UnqualifiedType> {
}; // FunctionProtoType void (Persistent<v8::Value> *, uint16_t)
struct _ast7083
    : DeclContext<Pack<_ast7084>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7071>, _str64>, _ast7087>>,
              Pack<_ast7084>>>,
          _ast7076> {}; // CXXMethodDecl operator=
struct _ast7084
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7083>, _str62>, _ast7085>>>> {
}; // ParmVarDecl
struct _ast7085 : LValueReferenceType<ReferenceType<_ast7086>> {
}; // LValueReferenceType const v8::PersistentHandleVisitor &
struct _ast7086 : ConstQualifiedType<_ast7072> {
}; // RecordType const v8::PersistentHandleVisitor
struct _ast7087 : FunctionProtoType<_ast7088, Pack<_ast7085>, UnqualifiedType> {
}; // FunctionProtoType v8::PersistentHandleVisitor &(const
   // v8::PersistentHandleVisitor &)
struct _ast7088 : LValueReferenceType<ReferenceType<_ast7072>> {
}; // LValueReferenceType v8::PersistentHandleVisitor &
struct _ast7093
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1024>, _ast7094>,
                     None>,
          None> {}; // CXXRecordDecl EmbedderHeapTracer
struct _ast7094 : StructOrClassRecordType<RecordType<_ast7093>> {
}; // RecordType v8::EmbedderHeapTracer
struct _ast7095
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7093>, _str1024>,
                                        _ast7094>,
                               None>,
                    None> {}; // CXXRecordDecl EmbedderHeapTracer
struct _ast7103
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7093>, _str1025>,
                                        _ast7104>,
                               Pack<>>,
                    Pack<>>,
      DeclContext<Pack<_ast7105, _ast7106, _ast7109, _ast7115>> {
}; // CXXRecordDecl TracedGlobalHandleVisitor
struct _ast7104 : StructOrClassRecordType<RecordType<_ast7103>> {
}; // RecordType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7105
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7103>, _str1025>,
                                        _ast7104>,
                               None>,
                    None> {}; // CXXRecordDecl TracedGlobalHandleVisitor
struct _ast7106
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7103>, _str1026>, _ast7107>>,
              Pack<>>>,
          _ast7108>>> {}; // CXXDestructorDecl ~TracedGlobalHandleVisitor
struct _ast7107 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7108 : PointerType<_ast7104> {
}; // PointerType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ast7109
    : DeclContext<Pack<_ast7110>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7103>, _str1027>, _ast7114>>,
              Pack<_ast7110>>>,
          _ast7108>> {}; // CXXMethodDecl VisitTracedGlobalHandle
struct _ast7110
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7109>, _str153>, _ast7111>>>> {
}; // ParmVarDecl value
struct _ast7111 : LValueReferenceType<ReferenceType<_ast7112>> {
}; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7112 : ConstQualifiedType<_ast7113> {
}; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7114 : FunctionProtoType<_ast114, Pack<_ast7111>, UnqualifiedType> {
}; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7115
    : DeclContext<Pack<_ast7116>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7103>, _str64>, _ast7119>>,
              Pack<_ast7116>>>,
          _ast7108> {}; // CXXMethodDecl operator=
struct _ast7116
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7115>, _str62>, _ast7117>>>> {
}; // ParmVarDecl
struct _ast7117 : LValueReferenceType<ReferenceType<_ast7118>> {
}; // LValueReferenceType const
   // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7118 : ConstQualifiedType<_ast7104> {
}; // RecordType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7119 : FunctionProtoType<_ast7120, Pack<_ast7117>, UnqualifiedType> {
}; // FunctionProtoType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
   // &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ast7120 : LValueReferenceType<ReferenceType<_ast7104>> {
}; // LValueReferenceType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7121
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7093>, _str1028>,
                                        _ast7122>,
                               Pack<_ast7123, _ast7124>>,
                    Pack<>>,
      DeclContext<Pack<_ast7125, _ast7123, _ast7124>> {
}; // CXXRecordDecl TraceSummary
struct _ast7122 : StructOrClassRecordType<RecordType<_ast7121>> {
}; // RecordType v8::EmbedderHeapTracer::TraceSummary
struct _ast7123
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7121>, _str769>, _ast3643>>> {
}; // FieldDecl time
struct _ast7124
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7121>, _str1029>, _ast3254>>> {
}; // FieldDecl allocated_size
struct _ast7125
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7121>, _str1028>,
                                        _ast7122>,
                               None>,
                    None> {}; // CXXRecordDecl TraceSummary
struct _ast7126
    : CXXDestructorDecl<VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1030>, _ast7127>>,
              Pack<>>>,
          _ast7128>>> {}; // CXXDestructorDecl ~EmbedderHeapTracer
struct _ast7127 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7128 : PointerType<_ast7094> {
}; // PointerType v8::EmbedderHeapTracer *
struct _ast7129
    : DeclContext<Pack<_ast7130>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1032>, _ast7131>>,
              Pack<_ast7130>>>,
          _ast7128> {}; // CXXMethodDecl IterateTracedGlobalHandles
struct _ast7130
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7129>, _str1031>, _ast7108>>>> {
}; // ParmVarDecl visitor
struct _ast7131 : FunctionProtoType<_ast114, Pack<_ast7108>, UnqualifiedType> {
}; // FunctionProtoType void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
   // *)
struct _ast7132
    : DeclContext<Pack<_ast7133>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1033>, _ast7137>>,
              Pack<_ast7133>>>,
          _ast7128>> {}; // CXXMethodDecl RegisterV8References
struct _ast7133
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7132>, _str123>, _ast7134>>>> {
}; // ParmVarDecl embedder_fields
struct _ast7134 : LValueReferenceType<ReferenceType<_ast7135>> {
}; // LValueReferenceType const std::vector<std::pair<void *, void *> > &
struct _ast7135 : ConstQualifiedType<_ast7136> {
}; // ElaboratedType const std::vector<std::pair<void *, void *> >
struct _ast7137 : FunctionProtoType<_ast114, Pack<_ast7134>, UnqualifiedType> {
}; // FunctionProtoType void (const std::vector<std::pair<void *, void *> > &)
struct _ast7138
    : DeclContext<Pack<_ast7139>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1035>, _ast7143>>,
              Pack<_ast7139>>>,
          _ast7128> {}; // CXXMethodDecl RegisterEmbedderReference
struct _ast7139
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7138>, _str1034>, _ast7140>>>> {
}; // ParmVarDecl ref
struct _ast7140 : LValueReferenceType<ReferenceType<_ast7141>> {
}; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7141 : ConstQualifiedType<_ast7142> {
}; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7143 : FunctionProtoType<_ast114, Pack<_ast7140>, UnqualifiedType> {
}; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7144
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1036>, _ast113>>,
              Pack<>>>,
          _ast7128>> {}; // CXXMethodDecl TracePrologue
struct _ast7145
    : DeclContext<Pack<_ast7146>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1036>, _ast7148>>,
              Pack<_ast7146>>>,
          _ast7128>> {}; // CXXMethodDecl TracePrologue
struct _ast7146
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7145>, _str174>, _ast7147>>>> {
}; // ParmVarDecl flags
struct _ast7147 : EnumType<_ast7096, _ast3639> {
}; // EnumType v8::EmbedderHeapTracer::TraceFlags
struct _ast7148 : FunctionProtoType<_ast114, Pack<_ast7147>, UnqualifiedType> {
}; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceFlags)
struct _ast7149
    : DeclContext<Pack<_ast7150>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1038>, _ast7151>>,
              Pack<_ast7150>>>,
          _ast7128>> {}; // CXXMethodDecl AdvanceTracing
struct _ast7150
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7149>, _str1037>, _ast3643>>>> {
}; // ParmVarDecl deadline_in_ms
struct _ast7151 : FunctionProtoType<_ast129, Pack<_ast3643>, UnqualifiedType> {
}; // FunctionProtoType bool (double)
struct _ast7152
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1039>, _ast3256>>,
              Pack<>>>,
          _ast7128>> {}; // CXXMethodDecl IsTracingDone
struct _ast7153
    : VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1040>, _ast113>>,
              Pack<>>>,
          _ast7128>> {}; // CXXMethodDecl TraceEpilogue
struct _ast7154
    : DeclContext<Pack<_ast7155>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1040>, _ast7157>>,
              Pack<_ast7155>>>,
          _ast7128>> {}; // CXXMethodDecl TraceEpilogue
struct _ast7155
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7154>, _str1041>, _ast7156>>>> {
}; // ParmVarDecl trace_summary
struct _ast7156 : PointerType<_ast7122> {
}; // PointerType v8::EmbedderHeapTracer::TraceSummary *
struct _ast7157 : FunctionProtoType<_ast114, Pack<_ast7156>, UnqualifiedType> {
}; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceSummary *)
struct _ast7158
    : DeclContext<Pack<_ast7159>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1043>, _ast7161>>,
              Pack<_ast7159>>>,
          _ast7128>> {}; // CXXMethodDecl EnterFinalPause
struct _ast7159
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7158>, _str1042>, _ast7160>>>> {
}; // ParmVarDecl stack_state
struct _ast7160 : EnumType<_ast7099, _ast1901> {
}; // EnumType v8::EmbedderHeapTracer::EmbedderStackState
struct _ast7161 : FunctionProtoType<_ast114, Pack<_ast7160>, UnqualifiedType> {
}; // FunctionProtoType void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ast7162
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1044>, _ast113>>,
              Pack<>>>,
          _ast7128> {}; // CXXMethodDecl FinalizeTracing
struct _ast7163
    : DeclContext<Pack<_ast7164>>,
      VirtualMethodDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1045>, _ast7168>>,
              Pack<_ast7164>>>,
          _ast7128>> {}; // CXXMethodDecl IsRootForNonTracingGC
struct _ast7164
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7163>, _str113>, _ast7165>>>> {
}; // ParmVarDecl handle
struct _ast7165 : LValueReferenceType<ReferenceType<_ast7166>> {
}; // LValueReferenceType const v8::TracedGlobal<v8::Value> &
struct _ast7166 : ConstQualifiedType<_ast7167> {
}; // ElaboratedType const v8::TracedGlobal<v8::Value>
struct _ast7168 : FunctionProtoType<_ast129, Pack<_ast7165>, UnqualifiedType> {
}; // FunctionProtoType bool (const v8::TracedGlobal<v8::Value> &)
struct _ast7169
    : DeclContext<Pack<_ast7170>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1046>, _ast7161>>,
              Pack<_ast7170>>>,
          _ast7128> {}; // CXXMethodDecl GarbageCollectionForTesting
struct _ast7170
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7169>, _str1042>, _ast7160>>>> {
}; // ParmVarDecl stack_state
struct _ast7171
    : DeclContext<Pack<_ast7172>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1047>, _ast6657>>,
              Pack<_ast7172>>>,
          _ast7128> {}; // CXXMethodDecl IncreaseAllocatedSize
struct _ast7172
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7171>, _str709>, _ast3254>>>> {
}; // ParmVarDecl bytes
struct _ast7173
    : DeclContext<Pack<_ast7174>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str1048>, _ast6657>>,
              Pack<_ast7174>>>,
          _ast7128> {}; // CXXMethodDecl DecreaseAllocatedSize
struct _ast7174
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7173>, _str709>, _ast3254>>>> {
}; // ParmVarDecl bytes
struct _ast7175
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str60>, _ast7176>>,
              Pack<>>>,
          _ast7177> {}; // CXXMethodDecl isolate
struct _ast7176 : FunctionProtoType<_ast6824, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::Isolate *() const
struct _ast7177 : PointerType<_ast7178> {
}; // PointerType const v8::EmbedderHeapTracer *
struct _ast7178 : ConstQualifiedType<_ast7094> {
}; // RecordType const v8::EmbedderHeapTracer
struct _ast7179
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7093>, _str118>, _ast6824>>> {
}; // FieldDecl isolate_
struct _ast7180
    : DeclContext<Pack<_ast7181>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7093>, _str64>, _ast7183>>,
              Pack<_ast7181>>>,
          _ast7128> {}; // CXXMethodDecl operator=
struct _ast7181
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7180>, _str62>, _ast7182>>>> {
}; // ParmVarDecl
struct _ast7182 : LValueReferenceType<ReferenceType<_ast7178>> {
}; // LValueReferenceType const v8::EmbedderHeapTracer &
struct _ast7183 : FunctionProtoType<_ast7184, Pack<_ast7182>, UnqualifiedType> {
}; // FunctionProtoType v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _ast7184 : LValueReferenceType<ReferenceType<_ast7094>> {
}; // LValueReferenceType v8::EmbedderHeapTracer &
struct _ast7185
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1049>, _ast7186>,
                     Pack<_ast7187, _ast7190>>,
          Pack<>>,
      DeclContext<Pack<_ast7191,
                       _ast7189,
                       _ast7192,
                       _ast7187,
                       _ast7190,
                       _ast7197,
                       _ast7202,
                       _ast7206>> {
}; // CXXRecordDecl SerializeInternalFieldsCallback
struct _ast7186 : StructOrClassRecordType<RecordType<_ast7185>> {
}; // RecordType v8::SerializeInternalFieldsCallback
struct _ast7187
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7185>, _str80>, _ast7188>>> {
}; // FieldDecl callback
struct _ast7188 : TypedefType<_ast7189> {
}; // TypedefType v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ast7189
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7185>, _str1050>, _ast7188>>> {
}; // TypedefDecl CallbackFunction
struct _ast7190
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7185>, _str130>, _ast2223>>> {
}; // FieldDecl data
struct _ast7191
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7185>, _str1049>,
                                        _ast7186>,
                               None>,
                    None> {}; // CXXRecordDecl SerializeInternalFieldsCallback
struct _ast7192
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7185>, _str1049>, _ast7195>>,
              Pack<_ast7193, _ast7194>>>,
          _ast7196>>,
      DeclContext<Pack<_ast7193, _ast7194>> {
}; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7193
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7192>, _str279>, _ast7188>>>> {
}; // ParmVarDecl function
struct _ast7194
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7192>, _str1051>, _ast2223>>>> {
}; // ParmVarDecl data_arg
struct _ast7195
    : FunctionProtoType<_ast114, Pack<_ast7188, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void
   // (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7196 : PointerType<_ast7186> {
}; // PointerType v8::SerializeInternalFieldsCallback *
struct _ast7197
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7185>, _str1049>, _ast7201>>,
              Pack<_ast7198>>>,
          _ast7196>>,
      DeclContext<Pack<_ast7198>> {
}; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7198
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7197>, _str62>, _ast7199>>>> {
}; // ParmVarDecl
struct _ast7199 : LValueReferenceType<ReferenceType<_ast7200>> {
}; // LValueReferenceType const v8::SerializeInternalFieldsCallback &
struct _ast7200 : ConstQualifiedType<_ast7186> {
}; // RecordType const v8::SerializeInternalFieldsCallback
struct _ast7201 : FunctionProtoType<_ast114, Pack<_ast7199>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::SerializeInternalFieldsCallback &)
struct _ast7202
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7185>, _str1049>, _ast7205>>,
              Pack<_ast7203>>>,
          _ast7196>>,
      DeclContext<Pack<_ast7203>> {
}; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7203
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7202>, _str62>, _ast7204>>>> {
}; // ParmVarDecl
struct _ast7204 : RValueReferenceType<ReferenceType<_ast7186>> {
}; // RValueReferenceType v8::SerializeInternalFieldsCallback &&
struct _ast7205 : FunctionProtoType<_ast114, Pack<_ast7204>, UnqualifiedType> {
}; // FunctionProtoType void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _ast7206
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7185>, _str1052>, _ast214>>,
              Pack<>>>,
          _ast7196>> {}; // CXXDestructorDecl ~SerializeInternalFieldsCallback
struct _ast7207
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str1053>, _ast7208>>> {
}; // TypedefDecl SerializeEmbedderFieldsCallback
struct _ast7208 : TypedefType<_ast7207> {
}; // TypedefType v8::SerializeEmbedderFieldsCallback
struct _ast7209
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1054>, _ast7210>,
                     Pack<_ast7211, _ast7216>>,
          Pack<>>,
      DeclContext<Pack<_ast7217,
                       _ast7218,
                       _ast7220,
                       _ast7211,
                       _ast7216,
                       _ast7225,
                       _ast7230,
                       _ast7234>> {
}; // CXXRecordDecl DeserializeInternalFieldsCallback
struct _ast7210 : StructOrClassRecordType<RecordType<_ast7209>> {
}; // RecordType v8::DeserializeInternalFieldsCallback
struct _ast7211
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7209>, _str80>, _ast7212>>> {
}; // FieldDecl callback
struct _ast7212 : PointerType<_ast7213> {
}; // PointerType void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7213 : UnqualifiedType<_ast7214> {
}; // ParenType void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7214 : FunctionProtoType<_ast114,
                                    Pack<_ast7215, _ast1901, _ast82, _ast2223>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7216
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7209>, _str130>, _ast2223>>> {
}; // FieldDecl data
struct _ast7217
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7209>, _str1054>,
                                        _ast7210>,
                               None>,
                    None> {}; // CXXRecordDecl DeserializeInternalFieldsCallback
struct _ast7218
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7209>, _str1050>, _ast7219>>> {
}; // TypedefDecl CallbackFunction
struct _ast7219 : TypedefType<_ast7218> {
}; // TypedefType v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ast7220
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7209>, _str1054>, _ast7223>>,
              Pack<_ast7221, _ast7222>>>,
          _ast7224>>,
      DeclContext<Pack<_ast7221, _ast7222>> {
}; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7221
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7220>, _str279>, _ast7219>>>> {
}; // ParmVarDecl function
struct _ast7222
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7220>, _str1051>, _ast2223>>>> {
}; // ParmVarDecl data_arg
struct _ast7223
    : FunctionProtoType<_ast114, Pack<_ast7219, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void
   // (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7224 : PointerType<_ast7210> {
}; // PointerType v8::DeserializeInternalFieldsCallback *
struct _ast7225
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7209>, _str1054>, _ast7229>>,
              Pack<_ast7226>>>,
          _ast7224>>,
      DeclContext<Pack<_ast7226>> {
}; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7226
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7225>, _str62>, _ast7227>>>> {
}; // ParmVarDecl
struct _ast7227 : LValueReferenceType<ReferenceType<_ast7228>> {
}; // LValueReferenceType const v8::DeserializeInternalFieldsCallback &
struct _ast7228 : ConstQualifiedType<_ast7210> {
}; // RecordType const v8::DeserializeInternalFieldsCallback
struct _ast7229 : FunctionProtoType<_ast114, Pack<_ast7227>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::DeserializeInternalFieldsCallback &)
struct _ast7230
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7209>, _str1054>, _ast7233>>,
              Pack<_ast7231>>>,
          _ast7224>>,
      DeclContext<Pack<_ast7231>> {
}; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7231
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7230>, _str62>, _ast7232>>>> {
}; // ParmVarDecl
struct _ast7232 : RValueReferenceType<ReferenceType<_ast7210>> {
}; // RValueReferenceType v8::DeserializeInternalFieldsCallback &&
struct _ast7233 : FunctionProtoType<_ast114, Pack<_ast7232>, UnqualifiedType> {
}; // FunctionProtoType void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ast7234
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7209>, _str1055>, _ast214>>,
              Pack<>>>,
          _ast7224>> {}; // CXXDestructorDecl ~DeserializeInternalFieldsCallback
struct _ast7235
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str1056>, _ast7236>>> {
}; // TypedefDecl DeserializeEmbedderFieldsCallback
struct _ast7236 : TypedefType<_ast7235> {
}; // TypedefType v8::DeserializeEmbedderFieldsCallback
struct _ast7237
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str4>, _ast8>, None>,
          None> {}; // CXXRecordDecl Isolate
struct _ast7238
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1057>, _ast7239>,
                     Pack<_ast7240,
                          _ast7241,
                          _ast7242,
                          _ast7244,
                          _ast7245,
                          _ast7246,
                          _ast7247,
                          _ast7250,
                          _ast7254,
                          _ast7255>>,
          Pack<>>,
      DeclContext<Pack<_ast7256,
                       _ast7257,
                       _ast7240,
                       _ast7241,
                       _ast7242,
                       _ast7244,
                       _ast7245,
                       _ast7246,
                       _ast7247,
                       _ast7250,
                       _ast7254,
                       _ast7255>> {}; // CXXRecordDecl CreateParams
struct _ast7239 : StructOrClassRecordType<RecordType<_ast7238>> {
}; // RecordType v8::Isolate::CreateParams
struct _ast7240
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1058>, _ast7052>>> {
}; // FieldDecl code_event_handler
struct _ast7241
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1059>, _ast6629>>> {
}; // FieldDecl constraints
struct _ast7242
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1060>, _ast7243>>> {
};                                        // FieldDecl snapshot_blob
struct _ast7243 : PointerType<_ast82> {}; // PointerType v8::StartupData *
struct _ast7244
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1061>, _ast6741>>> {
}; // FieldDecl counter_lookup_callback
struct _ast7245
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1062>, _ast6743>>> {
}; // FieldDecl create_histogram_callback
struct _ast7246
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1063>, _ast6745>>> {
}; // FieldDecl add_histogram_sample_callback
struct _ast7247
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1064>, _ast7248>>> {
}; // FieldDecl array_buffer_allocator
struct _ast7248 : PointerType<_ast7249> {
}; // PointerType ArrayBuffer::Allocator *
struct _ast7250
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1065>, _ast7251>>> {
};                                          // FieldDecl external_references
struct _ast7251 : PointerType<_ast7252> {}; // PointerType const intptr_t *
struct _ast7252 : ConstQualifiedType<_ast7253> {}; // TypedefType const intptr_t
struct _ast7253 : PointerSizeType<SignedIntegerType> {}; // TypedefType intptr_t
struct _ast7254
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1066>, _ast129>>> {
}; // FieldDecl allow_atomics_wait
struct _ast7255
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7238>, _str1067>, _ast129>>> {
}; // FieldDecl only_terminate_in_safe_scope
struct _ast7256
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7238>, _str1057>,
                                        _ast7239>,
                               None>,
                    None> {}; // CXXRecordDecl CreateParams
struct _ast7257
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7238>, _str1057>, _ast113>>,
              Pack<>>>,
          _ast7258>> {}; // CXXConstructorDecl CreateParams
struct _ast7258 : PointerType<_ast7239> {
}; // PointerType v8::Isolate::CreateParams *
struct _ast7259
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1068>, _ast7260>,
                     Pack<_ast7261>>,
          Pack<>>,
      DeclContext<
          Pack<_ast7263, _ast7264, _ast7267, _ast7268, _ast7273, _ast7261>> {
}; // CXXRecordDecl Scope
struct _ast7260 : StructOrClassRecordType<RecordType<_ast7259>> {
}; // RecordType v8::Isolate::Scope
struct _ast7261
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7259>, _str118>, _ast7262>>> {
}; // FieldDecl isolate_
struct _ast7262 : ConstQualifiedType<_ast184> {
}; // PointerType v8::Isolate *const
struct _ast7263
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7259>, _str1068>,
                                        _ast7260>,
                               None>,
                    None> {}; // CXXRecordDecl Scope
struct _ast7264
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7259>, _str1068>, _ast2846>>,
              Pack<_ast7265>>>,
          _ast7266>>,
      DeclContext<Pack<_ast7265>> {}; // CXXConstructorDecl Scope
struct _ast7265
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7264>, _str60>, _ast184>>>> {
};                                          // ParmVarDecl isolate
struct _ast7266 : PointerType<_ast7260> {}; // PointerType v8::Isolate::Scope *
struct _ast7267
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7259>, _str1069>, _ast214>>,
              Pack<>>>,
          _ast7266>> {}; // CXXDestructorDecl ~Scope
struct _ast7268
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7259>, _str1068>, _ast7272>>,
              Pack<_ast7269>>>,
          _ast7266>>,
      DeclContext<Pack<_ast7269>> {}; // CXXConstructorDecl Scope
struct _ast7269
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7268>, _str62>, _ast7270>>>> {
}; // ParmVarDecl
struct _ast7270 : LValueReferenceType<ReferenceType<_ast7271>> {
}; // LValueReferenceType const v8::Isolate::Scope &
struct _ast7271 : ConstQualifiedType<_ast7260> {
}; // RecordType const v8::Isolate::Scope
struct _ast7272 : FunctionProtoType<_ast114, Pack<_ast7270>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Isolate::Scope &)
struct _ast7273
    : DeclContext<Pack<_ast7274>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7259>, _str64>, _ast7275>>,
              Pack<_ast7274>>>,
          _ast7266> {}; // CXXMethodDecl operator=
struct _ast7274
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7273>, _str62>, _ast7270>>>> {
}; // ParmVarDecl
struct _ast7275 : FunctionProtoType<_ast7276, Pack<_ast7270>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _ast7276 : LValueReferenceType<ReferenceType<_ast7260>> {
}; // LValueReferenceType v8::Isolate::Scope &
struct _ast7277
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1070>, _ast7278>,
                     Pack<_ast7279, _ast7282>>,
          Pack<>>,
      DeclContext<Pack<_ast7283,
                       _ast7287,
                       _ast7292,
                       _ast7294,
                       _ast7299,
                       _ast7279,
                       _ast7282>> {
}; // CXXRecordDecl DisallowJavascriptExecutionScope
struct _ast7278 : StructOrClassRecordType<RecordType<_ast7277>> {
}; // RecordType v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7279
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7277>, _str1071>, _ast7280>>> {
}; // FieldDecl on_failure_
struct _ast7280 : EnumType<_ast7281, _ast1901> {
}; // EnumType v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ast7282
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7277>, _str1072>, _ast2223>>> {
}; // FieldDecl internal_
struct _ast7283
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7277>, _str1070>,
                                        _ast7278>,
                               None>,
                    None> {}; // CXXRecordDecl DisallowJavascriptExecutionScope
struct _ast7287
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7277>, _str1070>, _ast7290>>,
              Pack<_ast7288, _ast7289>>>,
          _ast7291>>,
      DeclContext<Pack<_ast7288, _ast7289>> {
}; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7288
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7287>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast7289
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7287>, _str1073>, _ast7280>>>> {
}; // ParmVarDecl on_failure
struct _ast7290
    : FunctionProtoType<_ast114, Pack<_ast184, _ast7280>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *,
   // v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ast7291 : PointerType<_ast7278> {
}; // PointerType v8::Isolate::DisallowJavascriptExecutionScope *
struct _ast7292
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7277>, _str1074>, _ast7293>>,
              Pack<>>>,
          _ast7291>> {}; // CXXDestructorDecl ~DisallowJavascriptExecutionScope
struct _ast7293 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7294
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7277>, _str1070>, _ast7298>>,
              Pack<_ast7295>>>,
          _ast7291>>,
      DeclContext<Pack<_ast7295>> {
}; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7295
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7294>, _str62>, _ast7296>>>> {
}; // ParmVarDecl
struct _ast7296 : LValueReferenceType<ReferenceType<_ast7297>> {
}; // LValueReferenceType const v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7297 : ConstQualifiedType<_ast7278> {
}; // RecordType const v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7298 : FunctionProtoType<_ast114, Pack<_ast7296>, UnqualifiedType> {
}; // FunctionProtoType void (const
   // v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7299
    : DeclContext<Pack<_ast7300>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7277>, _str64>, _ast7301>>,
              Pack<_ast7300>>>,
          _ast7291> {}; // CXXMethodDecl operator=
struct _ast7300
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7299>, _str62>, _ast7296>>>> {
}; // ParmVarDecl
struct _ast7301 : FunctionProtoType<_ast7302, Pack<_ast7296>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate::DisallowJavascriptExecutionScope &(const
   // v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7302 : LValueReferenceType<ReferenceType<_ast7278>> {
}; // LValueReferenceType v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7303
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1075>, _ast7304>,
                     Pack<_ast7305, _ast7306, _ast7307>>,
          Pack<>>,
      DeclContext<Pack<_ast7308,
                       _ast7309,
                       _ast7312,
                       _ast7314,
                       _ast7319,
                       _ast7305,
                       _ast7306,
                       _ast7307>> {
}; // CXXRecordDecl AllowJavascriptExecutionScope
struct _ast7304 : StructOrClassRecordType<RecordType<_ast7303>> {
}; // RecordType v8::Isolate::AllowJavascriptExecutionScope
struct _ast7305
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7303>, _str1076>, _ast2223>>> {
}; // FieldDecl internal_throws_
struct _ast7306
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7303>, _str1077>, _ast2223>>> {
}; // FieldDecl internal_assert_
struct _ast7307
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7303>, _str1078>, _ast2223>>> {
}; // FieldDecl internal_dump_
struct _ast7308
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7303>, _str1075>,
                                        _ast7304>,
                               None>,
                    None> {}; // CXXRecordDecl AllowJavascriptExecutionScope
struct _ast7309
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7303>, _str1075>, _ast2846>>,
              Pack<_ast7310>>>,
          _ast7311>>,
      DeclContext<Pack<_ast7310>> {
}; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7310
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7309>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast7311 : PointerType<_ast7304> {
}; // PointerType v8::Isolate::AllowJavascriptExecutionScope *
struct _ast7312
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7303>, _str1079>, _ast7313>>,
              Pack<>>>,
          _ast7311>> {}; // CXXDestructorDecl ~AllowJavascriptExecutionScope
struct _ast7313 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7314
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7303>, _str1075>, _ast7318>>,
              Pack<_ast7315>>>,
          _ast7311>>,
      DeclContext<Pack<_ast7315>> {
}; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7315
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7314>, _str62>, _ast7316>>>> {
}; // ParmVarDecl
struct _ast7316 : LValueReferenceType<ReferenceType<_ast7317>> {
}; // LValueReferenceType const v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7317 : ConstQualifiedType<_ast7304> {
}; // RecordType const v8::Isolate::AllowJavascriptExecutionScope
struct _ast7318 : FunctionProtoType<_ast114, Pack<_ast7316>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Isolate::AllowJavascriptExecutionScope
   // &)
struct _ast7319
    : DeclContext<Pack<_ast7320>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7303>, _str64>, _ast7321>>,
              Pack<_ast7320>>>,
          _ast7311> {}; // CXXMethodDecl operator=
struct _ast7320
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7319>, _str62>, _ast7316>>>> {
}; // ParmVarDecl
struct _ast7321 : FunctionProtoType<_ast7322, Pack<_ast7316>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate::AllowJavascriptExecutionScope &(const
   // v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7322 : LValueReferenceType<ReferenceType<_ast7304>> {
}; // LValueReferenceType v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7323
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1080>, _ast7324>,
                     Pack<_ast7325, _ast7326>>,
          Pack<>>,
      DeclContext<Pack<_ast7327,
                       _ast7328,
                       _ast7331,
                       _ast7334,
                       _ast7336,
                       _ast7341,
                       _ast7325,
                       _ast7326>> {
}; // CXXRecordDecl SuppressMicrotaskExecutionScope
struct _ast7324 : StructOrClassRecordType<RecordType<_ast7323>> {
}; // RecordType v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7325
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7323>, _str118>, _ast2904>>> {
}; // FieldDecl isolate_
struct _ast7326
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7323>, _str934>, _ast6854>>> {
}; // FieldDecl microtask_queue_
struct _ast7327
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7323>, _str1080>,
                                        _ast7324>,
                               None>,
                    None> {}; // CXXRecordDecl SuppressMicrotaskExecutionScope
struct _ast7328
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7323>, _str1080>, _ast2846>>,
              Pack<_ast7329>>>,
          _ast7330>>,
      DeclContext<Pack<_ast7329>> {
}; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7329
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7328>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast7330 : PointerType<_ast7324> {
}; // PointerType v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ast7331
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7323>, _str1080>, _ast7333>>,
              Pack<_ast7332>>>,
          _ast7330>>,
      DeclContext<Pack<_ast7332>> {
}; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7332
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7331>, _str936>, _ast6816>>>> {
}; // ParmVarDecl microtask_queue
struct _ast7333 : FunctionProtoType<_ast114, Pack<_ast6816>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MicrotaskQueue *)
struct _ast7334
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7323>, _str1081>, _ast7335>>,
              Pack<>>>,
          _ast7330>> {}; // CXXDestructorDecl ~SuppressMicrotaskExecutionScope
struct _ast7335 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7336
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7323>, _str1080>, _ast7340>>,
              Pack<_ast7337>>>,
          _ast7330>>,
      DeclContext<Pack<_ast7337>> {
}; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7337
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7336>, _str62>, _ast7338>>>> {
}; // ParmVarDecl
struct _ast7338 : LValueReferenceType<ReferenceType<_ast7339>> {
}; // LValueReferenceType const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7339 : ConstQualifiedType<_ast7324> {
}; // RecordType const v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7340 : FunctionProtoType<_ast114, Pack<_ast7338>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Isolate::SuppressMicrotaskExecutionScope
   // &)
struct _ast7341
    : DeclContext<Pack<_ast7342>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7323>, _str64>, _ast7343>>,
              Pack<_ast7342>>>,
          _ast7330> {}; // CXXMethodDecl operator=
struct _ast7342
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7341>, _str62>, _ast7338>>>> {
}; // ParmVarDecl
struct _ast7343 : FunctionProtoType<_ast7344, Pack<_ast7338>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate::SuppressMicrotaskExecutionScope &(const
   // v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7344 : LValueReferenceType<ReferenceType<_ast7324>> {
}; // LValueReferenceType v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7345
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1082>, _ast7346>,
                     Pack<_ast7347, _ast7348>>,
          Pack<>>,
      DeclContext<Pack<_ast7349,
                       _ast7350,
                       _ast7354,
                       _ast7356,
                       _ast7361,
                       _ast7347,
                       _ast7348>> {}; // CXXRecordDecl SafeForTerminationScope
struct _ast7346 : StructOrClassRecordType<RecordType<_ast7345>> {
}; // RecordType v8::Isolate::SafeForTerminationScope
struct _ast7347
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7345>, _str118>, _ast2868>>> {
}; // FieldDecl isolate_
struct _ast7348
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7345>, _str1083>, _ast129>>> {
}; // FieldDecl prev_value_
struct _ast7349
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7345>, _str1082>,
                                        _ast7346>,
                               None>,
                    None> {}; // CXXRecordDecl SafeForTerminationScope
struct _ast7350
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7345>, _str1082>, _ast7352>>,
              Pack<_ast7351>>>,
          _ast7353>>,
      DeclContext<Pack<_ast7351>> {
}; // CXXConstructorDecl SafeForTerminationScope
struct _ast7351
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7350>, _str60>, _ast6824>>>> {
}; // ParmVarDecl isolate
struct _ast7352 : FunctionProtoType<_ast114, Pack<_ast6824>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *)
struct _ast7353 : PointerType<_ast7346> {
}; // PointerType v8::Isolate::SafeForTerminationScope *
struct _ast7354
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7345>, _str1084>, _ast7355>>,
              Pack<>>>,
          _ast7353>> {}; // CXXDestructorDecl ~SafeForTerminationScope
struct _ast7355 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7356
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7345>, _str1082>, _ast7360>>,
              Pack<_ast7357>>>,
          _ast7353>>,
      DeclContext<Pack<_ast7357>> {
}; // CXXConstructorDecl SafeForTerminationScope
struct _ast7357
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7356>, _str62>, _ast7358>>>> {
}; // ParmVarDecl
struct _ast7358 : LValueReferenceType<ReferenceType<_ast7359>> {
}; // LValueReferenceType const v8::Isolate::SafeForTerminationScope &
struct _ast7359 : ConstQualifiedType<_ast7346> {
}; // RecordType const v8::Isolate::SafeForTerminationScope
struct _ast7360 : FunctionProtoType<_ast114, Pack<_ast7358>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Isolate::SafeForTerminationScope &)
struct _ast7361
    : DeclContext<Pack<_ast7362>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7345>, _str64>, _ast7363>>,
              Pack<_ast7362>>>,
          _ast7353> {}; // CXXMethodDecl operator=
struct _ast7362
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7361>, _str62>, _ast7358>>>> {
}; // ParmVarDecl
struct _ast7363 : FunctionProtoType<_ast7364, Pack<_ast7358>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate::SafeForTerminationScope &(const
   // v8::Isolate::SafeForTerminationScope &)
struct _ast7364 : LValueReferenceType<ReferenceType<_ast7346>> {
}; // LValueReferenceType v8::Isolate::SafeForTerminationScope &
struct _ast7453
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7>, _str1085>, _ast7454>>> {
}; // TypedefDecl UseCounterCallback
struct _ast7454 : TypedefType<_ast7453> {
}; // TypedefType v8::Isolate::UseCounterCallback
struct _ast7455
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str724>, _ast4822>>,
          Pack<>>> {}; // CXXMethodDecl Allocate
struct _ast7456
    : DeclContext<Pack<_ast7457, _ast7458>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str152>, _ast7461>>,
          Pack<_ast7457, _ast7458>>> {}; // CXXMethodDecl Initialize
struct _ast7457
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7456>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast7458
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7456>, _str1086>, _ast7459>>>> {
}; // ParmVarDecl params
struct _ast7459 : LValueReferenceType<ReferenceType<_ast7460>> {
}; // LValueReferenceType const v8::Isolate::CreateParams &
struct _ast7460 : ConstQualifiedType<_ast7239> {
}; // RecordType const v8::Isolate::CreateParams
struct _ast7461
    : FunctionProtoType<_ast114, Pack<_ast184, _ast7459>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _ast7462
    : DeclContext<Pack<_ast7463>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str61>, _ast7464>>,
          Pack<_ast7463>>> {}; // CXXMethodDecl New
struct _ast7463
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7462>, _str1086>, _ast7459>>>> {
}; // ParmVarDecl params
struct _ast7464 : FunctionProtoType<_ast184, Pack<_ast7459>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate *(const v8::Isolate::CreateParams &)
struct _ast7465
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str1087>, _ast4822>>,
          Pack<>>> {}; // CXXMethodDecl GetCurrent
struct _ast7466
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7>, _str1088>, _ast7467>>> {
}; // TypedefDecl AbortOnUncaughtExceptionCallback
struct _ast7467 : TypedefType<_ast7466> {
}; // TypedefType v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ast7468
    : DeclContext<Pack<_ast7469>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1089>, _ast7470>>,
              Pack<_ast7469>>>,
          _ast184> {}; // CXXMethodDecl SetAbortOnUncaughtExceptionCallback
struct _ast7469
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7468>, _str80>, _ast7467>>>> {
}; // ParmVarDecl callback
struct _ast7470 : FunctionProtoType<_ast114, Pack<_ast7467>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ast7471
    : DeclContext<Pack<_ast7472>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1090>, _ast7473>>,
              Pack<_ast7472>>>,
          _ast184> {}; // CXXMethodDecl SetHostImportModuleDynamicallyCallback
struct _ast7472
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7471>, _str80>, _ast6751>>>> {
}; // ParmVarDecl callback
struct _ast7473 : FunctionProtoType<_ast114, Pack<_ast6751>, UnqualifiedType> {
}; // FunctionProtoType void (v8::HostImportModuleDynamicallyCallback)
struct _ast7474
    : DeclContext<Pack<_ast7475>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1091>, _ast7476>>,
              Pack<_ast7475>>>,
          _ast184> {
}; // CXXMethodDecl SetHostInitializeImportMetaObjectCallback
struct _ast7475
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7474>, _str80>, _ast6753>>>> {
}; // ParmVarDecl callback
struct _ast7476 : FunctionProtoType<_ast114, Pack<_ast6753>, UnqualifiedType> {
}; // FunctionProtoType void (v8::HostInitializeImportMetaObjectCallback)
struct _ast7477
    : DeclContext<Pack<_ast7478>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1092>, _ast7479>>,
              Pack<_ast7478>>>,
          _ast184> {}; // CXXMethodDecl SetPrepareStackTraceCallback
struct _ast7478
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7477>, _str80>, _ast6755>>>> {
}; // ParmVarDecl callback
struct _ast7479 : FunctionProtoType<_ast114, Pack<_ast6755>, UnqualifiedType> {
}; // FunctionProtoType void (v8::PrepareStackTraceCallback)
struct _ast7480
    : DeclContext<Pack<_ast7481>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1093>, _ast7483>>,
              Pack<_ast7481>>>,
          _ast184> {}; // CXXMethodDecl MemoryPressureNotification
struct _ast7481
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7480>, _str565>, _ast7482>>>> {
}; // ParmVarDecl level
struct _ast7482 : EnumType<_ast7089, _ast1901> {
}; // EnumType v8::MemoryPressureLevel
struct _ast7483 : FunctionProtoType<_ast114, Pack<_ast7482>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MemoryPressureLevel)
struct _ast7484
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1094>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl Enter
struct _ast7485
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1095>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl Exit
struct _ast7486
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str471>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl Dispose
struct _ast7487
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1096>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl DumpAndResetStats
struct _ast7488
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1097>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl DiscardThreadSpecificMetadata
struct _ast7489
    : DeclContext<Pack<_ast7490, _ast7491>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1099>, _ast7492>>,
              Pack<_ast7490, _ast7491>>>,
          _ast184> {}; // CXXMethodDecl SetData
struct _ast7490
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7489>, _str1098>, _ast3359>>>> {
}; // ParmVarDecl slot
struct _ast7491
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7489>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7492
    : FunctionProtoType<_ast114, Pack<_ast3359, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (uint32_t, void *)
struct _ast7493
    : DeclContext<Pack<_ast7494>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1100>, _ast7495>>,
              Pack<_ast7494>>>,
          _ast184> {}; // CXXMethodDecl GetData
struct _ast7494
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7493>, _str1098>, _ast3359>>>> {
}; // ParmVarDecl slot
struct _ast7495 : FunctionProtoType<_ast2223, Pack<_ast3359>, UnqualifiedType> {
}; // FunctionProtoType void *(uint32_t)
struct _ast7496
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str1101>, _ast3358>>,
          Pack<>>> {}; // CXXMethodDecl GetNumberOfDataSlots
struct _ast7499
    : DeclContext<Pack<_ast7500>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1102>, _ast7501>>,
              Pack<_ast7500>>>,
          _ast184> {}; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast7500
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7499>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast7501 : FunctionProtoType<_ast7502, Pack<_ast3254>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast7503
    : DeclContext<Pack<_ast7504>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1104>, _ast7505>>,
              Pack<_ast7504>>>,
          _ast184> {}; // CXXMethodDecl GetHeapStatistics
struct _ast7504
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7503>, _str1103>, _ast6941>>>> {
}; // ParmVarDecl heap_statistics
struct _ast7505 : FunctionProtoType<_ast114, Pack<_ast6941>, UnqualifiedType> {
}; // FunctionProtoType void (v8::HeapStatistics *)
struct _ast7506
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1105>, _ast5645>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl NumberOfHeapSpaces
struct _ast7507
    : DeclContext<Pack<_ast7508, _ast7509>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1107>, _ast7510>>,
              Pack<_ast7508, _ast7509>>>,
          _ast184> {}; // CXXMethodDecl GetHeapSpaceStatistics
struct _ast7508
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7507>, _str1106>, _ast6963>>>> {
}; // ParmVarDecl space_statistics
struct _ast7509
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7507>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast7510
    : FunctionProtoType<_ast129, Pack<_ast6963, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::HeapSpaceStatistics *, size_t)
struct _ast7511
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1108>, _ast5645>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl NumberOfTrackedHeapObjectTypes
struct _ast7512
    : DeclContext<Pack<_ast7513, _ast7514>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1111>, _ast7515>>,
              Pack<_ast7513, _ast7514>>>,
          _ast184> {}; // CXXMethodDecl GetHeapObjectStatisticsAtLastGC
struct _ast7513
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7512>, _str1109>, _ast6978>>>> {
}; // ParmVarDecl object_statistics
struct _ast7514
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7512>, _str1110>, _ast3254>>>> {
}; // ParmVarDecl type_index
struct _ast7515
    : FunctionProtoType<_ast129, Pack<_ast6978, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::HeapObjectStatistics *, size_t)
struct _ast7516
    : DeclContext<Pack<_ast7517>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1112>, _ast7518>>,
              Pack<_ast7517>>>,
          _ast184> {}; // CXXMethodDecl GetHeapCodeAndMetadataStatistics
struct _ast7517
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7516>, _str1109>, _ast6990>>>> {
}; // ParmVarDecl object_statistics
struct _ast7518 : FunctionProtoType<_ast129, Pack<_ast6990>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::HeapCodeStatistics *)
struct _ast7519
    : DeclContext<Pack<_ast7520, _ast7523, _ast7525, _ast7526>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1117>, _ast7528>>,
              Pack<_ast7520, _ast7523, _ast7525, _ast7526>>>,
          _ast184> {}; // CXXMethodDecl GetStackSample
struct _ast7520
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7519>, _str1113>, _ast7521>>>> {
}; // ParmVarDecl state
struct _ast7521 : LValueReferenceType<ReferenceType<_ast7522>> {
}; // LValueReferenceType const v8::RegisterState &
struct _ast7522 : ConstQualifiedType<_ast3505> {
}; // RecordType const v8::RegisterState
struct _ast7523
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7519>, _str1114>, _ast7524>>>> {
};                                          // ParmVarDecl frames
struct _ast7524 : PointerType<_ast2223> {}; // PointerType void **
struct _ast7525
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7519>, _str1115>, _ast3254>>>> {
}; // ParmVarDecl frames_limit
struct _ast7526
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7519>, _str1116>, _ast7527>>>> {
};                                          // ParmVarDecl sample_info
struct _ast7527 : PointerType<_ast3514> {}; // PointerType v8::SampleInfo *
struct _ast7528
    : FunctionProtoType<_ast114,
                        Pack<_ast7521, _ast7524, _ast3254, _ast7527>,
                        UnqualifiedType> {
}; // FunctionProtoType void (const v8::RegisterState &, void **, size_t,
   // v8::SampleInfo *)
struct _ast7529
    : DeclContext<Pack<_ast7530>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1119>, _ast7531>>,
              Pack<_ast7530>>>,
          _ast184> {}; // CXXMethodDecl AdjustAmountOfExternalAllocatedMemory
struct _ast7530
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7529>, _str1118>, _ast4296>>>> {
}; // ParmVarDecl change_in_bytes
struct _ast7531 : FunctionProtoType<_ast4296, Pack<_ast4296>, UnqualifiedType> {
}; // FunctionProtoType int64_t (int64_t)
struct _ast7532
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1120>, _ast5645>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl NumberOfPhantomHandleResetsSinceLastCall
struct _ast7533
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1121>, _ast7534>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetHeapProfiler
struct _ast7534 : FunctionProtoType<_ast7535, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::HeapProfiler *()
struct _ast7535 : PointerType<_ast32> {}; // PointerType v8::HeapProfiler *
struct _ast7536
    : DeclContext<Pack<_ast7537>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1123>, _ast3633>>,
              Pack<_ast7537>>>,
          _ast184> {}; // CXXMethodDecl SetIdle
struct _ast7537
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7536>, _str1122>, _ast129>>>> {
}; // ParmVarDecl is_idle
struct _ast7538
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1124>, _ast7539>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetArrayBufferAllocator
struct _ast7539 : FunctionProtoType<_ast7248, Pack<>, UnqualifiedType> {
}; // FunctionProtoType ArrayBuffer::Allocator *()
struct _ast7540
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1125>, _ast3256>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl InContext
struct _ast7541
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1126>, _ast7542>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetCurrentContext
struct _ast7542 : FunctionProtoType<_ast7543, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> ()
struct _ast7544
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1127>, _ast7545>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetEnteredContext
struct _ast7545 : FunctionProtoType<_ast7546, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> ()
struct _ast7547
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1128>, _ast7548>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetEnteredOrMicrotaskContext
struct _ast7548 : FunctionProtoType<_ast7549, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> ()
struct _ast7550
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1129>, _ast7551>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetIncumbentContext
struct _ast7551 : FunctionProtoType<_ast7552, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> ()
struct _ast7553
    : DeclContext<Pack<_ast7554>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1130>, _ast7556>>,
              Pack<_ast7554>>>,
          _ast184> {}; // CXXMethodDecl ThrowException
struct _ast7554
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7553>, _str712>, _ast7555>>>> {
}; // ParmVarDecl exception
struct _ast7556 : FunctionProtoType<_ast7557, Pack<_ast7555>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast7558
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7>, _str946>, _ast7559>>> {
}; // TypedefDecl GCCallback
struct _ast7559 : TypedefType<_ast7558> {
}; // TypedefType v8::Isolate::GCCallback
struct _ast7560
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7>, _str1131>, _ast7561>>> {
}; // TypedefDecl GCCallbackWithData
struct _ast7561 : TypedefType<_ast7560> {
}; // TypedefType v8::Isolate::GCCallbackWithData
struct _ast7562
    : DeclContext<Pack<_ast7563, _ast7564, _ast7565>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1133>, _ast7567>>,
              Pack<_ast7563, _ast7564, _ast7565>>>,
          _ast184> {}; // CXXMethodDecl AddGCPrologueCallback
struct _ast7563
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7562>, _str80>, _ast7561>>>> {
}; // ParmVarDecl callback
struct _ast7564
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7562>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7565
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7562>, _str1132>, _ast7566>>>> {
};                                                 // ParmVarDecl gc_type_filter
struct _ast7566 : EnumType<_ast6905, _ast1901> {}; // EnumType v8::GCType
struct _ast7567 : FunctionProtoType<_ast114,
                                    Pack<_ast7561, _ast2223, _ast7566>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *,
   // v8::GCType)
struct _ast7568
    : DeclContext<Pack<_ast7569, _ast7570>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1133>, _ast7571>>,
              Pack<_ast7569, _ast7570>>>,
          _ast184> {}; // CXXMethodDecl AddGCPrologueCallback
struct _ast7569
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7568>, _str80>, _ast7559>>>> {
}; // ParmVarDecl callback
struct _ast7570
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7568>, _str1132>, _ast7566>>>> {
}; // ParmVarDecl gc_type_filter
struct _ast7571
    : FunctionProtoType<_ast114, Pack<_ast7559, _ast7566>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::GCCallback, v8::GCType)
struct _ast7572
    : DeclContext<Pack<_ast7573, _ast7574>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1134>, _ast7575>>,
              Pack<_ast7573, _ast7574>>>,
          _ast184> {}; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7573
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7572>, _str62>, _ast7561>>>> {
}; // ParmVarDecl
struct _ast7574
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7572>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7575
    : FunctionProtoType<_ast114, Pack<_ast7561, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *)
struct _ast7576
    : DeclContext<Pack<_ast7577>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1134>, _ast7578>>,
              Pack<_ast7577>>>,
          _ast184> {}; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7577
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7576>, _str80>, _ast7559>>>> {
}; // ParmVarDecl callback
struct _ast7578 : FunctionProtoType<_ast114, Pack<_ast7559>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::GCCallback)
struct _ast7579
    : DeclContext<Pack<_ast7580>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1136>, _ast7581>>,
              Pack<_ast7580>>>,
          _ast184> {}; // CXXMethodDecl SetEmbedderHeapTracer
struct _ast7580
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7579>, _str1135>, _ast7128>>>> {
}; // ParmVarDecl tracer
struct _ast7581 : FunctionProtoType<_ast114, Pack<_ast7128>, UnqualifiedType> {
}; // FunctionProtoType void (v8::EmbedderHeapTracer *)
struct _ast7582
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1137>, _ast7583>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetEmbedderHeapTracer
struct _ast7583 : FunctionProtoType<_ast7128, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::EmbedderHeapTracer *()
struct _ast7591
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7>, _str1138>, _ast7592>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast7593, _ast7594>> {
}; // CXXRecordDecl AtomicsWaitWakeHandle
struct _ast7592 : StructOrClassRecordType<RecordType<_ast7591>> {
}; // RecordType v8::Isolate::AtomicsWaitWakeHandle
struct _ast7593
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7591>, _str1138>,
                                        _ast7592>,
                               None>,
                    None> {}; // CXXRecordDecl AtomicsWaitWakeHandle
struct _ast7594
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7591>, _str1139>, _ast113>>,
              Pack<>>>,
          _ast7595> {}; // CXXMethodDecl Wake
struct _ast7595 : PointerType<_ast7592> {
}; // PointerType v8::Isolate::AtomicsWaitWakeHandle *
struct _ast7596
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7>, _str1140>, _ast7597>>> {
}; // TypedefDecl AtomicsWaitCallback
struct _ast7597 : TypedefType<_ast7596> {
}; // TypedefType v8::Isolate::AtomicsWaitCallback
struct _ast7598
    : DeclContext<Pack<_ast7599, _ast7600>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1141>, _ast7601>>,
              Pack<_ast7599, _ast7600>>>,
          _ast184> {}; // CXXMethodDecl SetAtomicsWaitCallback
struct _ast7599
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7598>, _str80>, _ast7597>>>> {
}; // ParmVarDecl callback
struct _ast7600
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7598>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7601
    : FunctionProtoType<_ast114, Pack<_ast7597, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::AtomicsWaitCallback, void *)
struct _ast7602
    : DeclContext<Pack<_ast7603, _ast7604, _ast7605>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1142>, _ast7567>>,
              Pack<_ast7603, _ast7604, _ast7605>>>,
          _ast184> {}; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7603
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7602>, _str80>, _ast7561>>>> {
}; // ParmVarDecl callback
struct _ast7604
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7602>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7605
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7602>, _str1132>, _ast7566>>>> {
}; // ParmVarDecl gc_type_filter
struct _ast7606
    : DeclContext<Pack<_ast7607, _ast7608>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1142>, _ast7571>>,
              Pack<_ast7607, _ast7608>>>,
          _ast184> {}; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7607
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7606>, _str80>, _ast7559>>>> {
}; // ParmVarDecl callback
struct _ast7608
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7606>, _str1132>, _ast7566>>>> {
}; // ParmVarDecl gc_type_filter
struct _ast7609
    : DeclContext<Pack<_ast7610, _ast7611>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1143>, _ast7575>>,
              Pack<_ast7610, _ast7611>>>,
          _ast184> {}; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7610
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7609>, _str80>, _ast7561>>>> {
}; // ParmVarDecl callback
struct _ast7611
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7609>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7612
    : DeclContext<Pack<_ast7613>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1143>, _ast7578>>,
              Pack<_ast7613>>>,
          _ast184> {}; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7613
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7612>, _str80>, _ast7559>>>> {
}; // ParmVarDecl callback
struct _ast7614
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast7>, _str1144>, _ast7615>>> {
}; // TypedefDecl GetExternallyAllocatedMemoryInBytesCallback
struct _ast7615 : TypedefType<_ast7614> {
}; // TypedefType v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ast7616
    : DeclContext<Pack<_ast7617>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1145>, _ast7618>>,
              Pack<_ast7617>>>,
          _ast184> {
}; // CXXMethodDecl SetGetExternallyAllocatedMemoryInBytesCallback
struct _ast7617
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7616>, _str80>, _ast7615>>>> {
}; // ParmVarDecl callback
struct _ast7618 : FunctionProtoType<_ast114, Pack<_ast7615>, UnqualifiedType> {
}; // FunctionProtoType void
   // (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ast7619
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1146>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl TerminateExecution
struct _ast7620
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1147>, _ast3256>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IsExecutionTerminating
struct _ast7621
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1148>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl CancelTerminateExecution
struct _ast7622
    : DeclContext<Pack<_ast7623, _ast7624>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1149>, _ast7625>>,
              Pack<_ast7623, _ast7624>>>,
          _ast184> {}; // CXXMethodDecl RequestInterrupt
struct _ast7623
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7622>, _str80>, _ast6922>>>> {
}; // ParmVarDecl callback
struct _ast7624
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7622>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7625
    : FunctionProtoType<_ast114, Pack<_ast6922, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (v8::InterruptCallback, void *)
struct _ast7626
    : DeclContext<Pack<_ast7627>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1150>, _ast7629>>,
              Pack<_ast7627>>>,
          _ast184> {}; // CXXMethodDecl RequestGarbageCollectionForTesting
struct _ast7627
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7626>, _str81>, _ast7628>>>> {
}; // ParmVarDecl type
struct _ast7628 : EnumType<_ast7365, _ast1901> {
}; // EnumType v8::Isolate::GarbageCollectionType
struct _ast7629 : FunctionProtoType<_ast114, Pack<_ast7628>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::GarbageCollectionType)
struct _ast7630
    : DeclContext<Pack<_ast7631>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1151>, _ast7632>>,
              Pack<_ast7631>>>,
          _ast184> {}; // CXXMethodDecl SetEventLogger
struct _ast7631
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7630>, _str51>, _ast6700>>>> {
}; // ParmVarDecl that
struct _ast7632 : FunctionProtoType<_ast114, Pack<_ast6700>, UnqualifiedType> {
}; // FunctionProtoType void (v8::LogEventCallback)
struct _ast7633
    : DeclContext<Pack<_ast7634>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1152>, _ast7635>>,
              Pack<_ast7634>>>,
          _ast184> {}; // CXXMethodDecl AddBeforeCallEnteredCallback
struct _ast7634
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7633>, _str80>, _ast6747>>>> {
}; // ParmVarDecl callback
struct _ast7635 : FunctionProtoType<_ast114, Pack<_ast6747>, UnqualifiedType> {
}; // FunctionProtoType void (v8::BeforeCallEnteredCallback)
struct _ast7636
    : DeclContext<Pack<_ast7637>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1153>, _ast7635>>,
              Pack<_ast7637>>>,
          _ast184> {}; // CXXMethodDecl RemoveBeforeCallEnteredCallback
struct _ast7637
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7636>, _str80>, _ast6747>>>> {
}; // ParmVarDecl callback
struct _ast7638
    : DeclContext<Pack<_ast7639>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1154>, _ast7640>>,
              Pack<_ast7639>>>,
          _ast184> {}; // CXXMethodDecl AddCallCompletedCallback
struct _ast7639
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7638>, _str80>, _ast6749>>>> {
}; // ParmVarDecl callback
struct _ast7640 : FunctionProtoType<_ast114, Pack<_ast6749>, UnqualifiedType> {
}; // FunctionProtoType void (v8::CallCompletedCallback)
struct _ast7641
    : DeclContext<Pack<_ast7642>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1155>, _ast7640>>,
              Pack<_ast7642>>>,
          _ast184> {}; // CXXMethodDecl RemoveCallCompletedCallback
struct _ast7642
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7641>, _str80>, _ast6749>>>> {
}; // ParmVarDecl callback
struct _ast7643
    : DeclContext<Pack<_ast7644>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1157>, _ast7645>>,
              Pack<_ast7644>>>,
          _ast184> {}; // CXXMethodDecl SetPromiseHook
struct _ast7644
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7643>, _str1156>, _ast6762>>>> {
}; // ParmVarDecl hook
struct _ast7645 : FunctionProtoType<_ast114, Pack<_ast6762>, UnqualifiedType> {
}; // FunctionProtoType void (v8::PromiseHook)
struct _ast7646
    : DeclContext<Pack<_ast7647>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1158>, _ast7648>>,
              Pack<_ast7647>>>,
          _ast184> {}; // CXXMethodDecl SetPromiseRejectCallback
struct _ast7647
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7646>, _str80>, _ast6796>>>> {
}; // ParmVarDecl callback
struct _ast7648 : FunctionProtoType<_ast114, Pack<_ast6796>, UnqualifiedType> {
}; // FunctionProtoType void (v8::PromiseRejectCallback)
struct _ast7649
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1159>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl RunMicrotasks
struct _ast7650
    : DeclContext<Pack<_ast7651>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str927>, _ast7653>>,
              Pack<_ast7651>>>,
          _ast184> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast7651
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7650>, _str926>, _ast7652>>>> {
}; // ParmVarDecl microtask
struct _ast7653 : FunctionProtoType<_ast114, Pack<_ast7652>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Function>)
struct _ast7654
    : DeclContext<Pack<_ast7655, _ast7656>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str927>, _ast7657>>,
              Pack<_ast7655, _ast7656>>>,
          _ast184> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast7655
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7654>, _str80>, _ast6802>>>> {
}; // ParmVarDecl callback
struct _ast7656
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7654>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7657
    : FunctionProtoType<_ast114, Pack<_ast6802, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MicrotaskCallback, void *)
struct _ast7658
    : DeclContext<Pack<_ast7659>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1160>, _ast7660>>,
              Pack<_ast7659>>>,
          _ast184> {}; // CXXMethodDecl SetMicrotasksPolicy
struct _ast7659
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7658>, _str924>, _ast6811>>>> {
}; // ParmVarDecl policy
struct _ast7660 : FunctionProtoType<_ast114, Pack<_ast6811>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MicrotasksPolicy)
struct _ast7661
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1161>, _ast7662>>,
              Pack<>>>,
          _ast7663> {}; // CXXMethodDecl GetMicrotasksPolicy
struct _ast7662 : FunctionProtoType<_ast6811, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType v8::MicrotasksPolicy () const
struct _ast7663 : PointerType<_ast7664> {}; // PointerType const v8::Isolate *
struct _ast7664 : ConstQualifiedType<_ast8> {}; // RecordType const v8::Isolate
struct _ast7665
    : DeclContext<Pack<_ast7666>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str928>, _ast7667>>,
              Pack<_ast7666>>>,
          _ast184> {}; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7666
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7665>, _str80>, _ast6798>>>> {
}; // ParmVarDecl callback
struct _ast7667 : FunctionProtoType<_ast114, Pack<_ast6798>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MicrotasksCompletedCallback)
struct _ast7668
    : DeclContext<Pack<_ast7669, _ast7670>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str928>, _ast6832>>,
              Pack<_ast7669, _ast7670>>>,
          _ast184> {}; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7669
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7668>, _str80>, _ast6800>>>> {
}; // ParmVarDecl callback
struct _ast7670
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7668>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7671
    : DeclContext<Pack<_ast7672>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str929>, _ast7667>>,
              Pack<_ast7672>>>,
          _ast184> {}; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7672
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7671>, _str80>, _ast6798>>>> {
}; // ParmVarDecl callback
struct _ast7673
    : DeclContext<Pack<_ast7674, _ast7675>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str929>, _ast6832>>,
              Pack<_ast7674, _ast7675>>>,
          _ast184> {}; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7674
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7673>, _str80>, _ast6800>>>> {
}; // ParmVarDecl callback
struct _ast7675
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7673>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7676
    : DeclContext<Pack<_ast7677>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1162>, _ast7678>>,
              Pack<_ast7677>>>,
          _ast184> {}; // CXXMethodDecl SetUseCounterCallback
struct _ast7677
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7676>, _str80>, _ast7454>>>> {
}; // ParmVarDecl callback
struct _ast7678 : FunctionProtoType<_ast114, Pack<_ast7454>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::UseCounterCallback)
struct _ast7679
    : DeclContext<Pack<_ast7680>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1163>, _ast7681>>,
              Pack<_ast7680>>>,
          _ast184> {}; // CXXMethodDecl SetCounterFunction
struct _ast7680
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7679>, _str62>, _ast6741>>>> {
}; // ParmVarDecl
struct _ast7681 : FunctionProtoType<_ast114, Pack<_ast6741>, UnqualifiedType> {
}; // FunctionProtoType void (v8::CounterLookupCallback)
struct _ast7682
    : DeclContext<Pack<_ast7683>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1164>, _ast7684>>,
              Pack<_ast7683>>>,
          _ast184> {}; // CXXMethodDecl SetCreateHistogramFunction
struct _ast7683
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7682>, _str62>, _ast6743>>>> {
}; // ParmVarDecl
struct _ast7684 : FunctionProtoType<_ast114, Pack<_ast6743>, UnqualifiedType> {
}; // FunctionProtoType void (v8::CreateHistogramCallback)
struct _ast7685
    : DeclContext<Pack<_ast7686>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1165>, _ast7687>>,
              Pack<_ast7686>>>,
          _ast184> {}; // CXXMethodDecl SetAddHistogramSampleFunction
struct _ast7686
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7685>, _str62>, _ast6745>>>> {
}; // ParmVarDecl
struct _ast7687 : FunctionProtoType<_ast114, Pack<_ast6745>, UnqualifiedType> {
}; // FunctionProtoType void (v8::AddHistogramSampleCallback)
struct _ast7688
    : DeclContext<Pack<_ast7689>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1167>, _ast7151>>,
              Pack<_ast7689>>>,
          _ast184> {}; // CXXMethodDecl IdleNotificationDeadline
struct _ast7689
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7688>, _str1166>, _ast3643>>>> {
}; // ParmVarDecl deadline_in_seconds
struct _ast7690
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1168>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl LowMemoryNotification
struct _ast7691
    : DeclContext<Pack<_ast7692>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1170>, _ast7693>>,
              Pack<_ast7692>>>,
          _ast184> {}; // CXXMethodDecl ContextDisposedNotification
struct _ast7692
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7691>, _str1169>, _ast129>>>> {
}; // ParmVarDecl dependant_context
struct _ast7693 : FunctionProtoType<_ast1901, Pack<_ast129>, UnqualifiedType> {
}; // FunctionProtoType int (bool)
struct _ast7694
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1171>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IsolateInForegroundNotification
struct _ast7695
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1172>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IsolateInBackgroundNotification
struct _ast7696
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1173>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl EnableMemorySavingsMode
struct _ast7697
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1174>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl DisableMemorySavingsMode
struct _ast7698
    : DeclContext<Pack<_ast7699>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1176>, _ast7702>>,
              Pack<_ast7699>>>,
          _ast184> {}; // CXXMethodDecl SetRAILMode
struct _ast7699
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7698>, _str1175>, _ast7700>>>> {
};                                                 // ParmVarDecl rail_mode
struct _ast7700 : EnumType<_ast7043, _ast7701> {}; // EnumType v8::RAILMode
struct _ast7701 : ABIIndependentSizeType<UnsignedIntegerType, 4> {
}; // BuiltinType unsigned int
struct _ast7702 : FunctionProtoType<_ast114, Pack<_ast7700>, UnqualifiedType> {
}; // FunctionProtoType void (v8::RAILMode)
struct _ast7703
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1177>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IncreaseHeapLimitForDebugging
struct _ast7704
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1178>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl RestoreOriginalHeapLimit
struct _ast7705
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1179>, _ast3256>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IsHeapLimitIncreasedForDebugging
struct _ast7706
    : DeclContext<Pack<_ast7707, _ast7709>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1181>, _ast7710>>,
              Pack<_ast7707, _ast7709>>>,
          _ast184> {}; // CXXMethodDecl SetJitCodeEventHandler
struct _ast7707
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7706>, _str264>, _ast7708>>>> {
}; // ParmVarDecl options
struct _ast7708 : EnumType<_ast7048, _ast1901> {
}; // EnumType v8::JitCodeEventOptions
struct _ast7709
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7706>, _str1180>, _ast7052>>>> {
}; // ParmVarDecl event_handler
struct _ast7710
    : FunctionProtoType<_ast114, Pack<_ast7708, _ast7052>, UnqualifiedType> {
}; // FunctionProtoType void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _ast7711
    : DeclContext<Pack<_ast7712>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1182>, _ast7714>>,
              Pack<_ast7712>>>,
          _ast184> {}; // CXXMethodDecl SetStackLimit
struct _ast7712
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7711>, _str868>, _ast7713>>>> {
}; // ParmVarDecl stack_limit
struct _ast7713 : PointerSizeType<UnsignedIntegerType> {
}; // TypedefType uintptr_t
struct _ast7714 : FunctionProtoType<_ast114, Pack<_ast7713>, UnqualifiedType> {
}; // FunctionProtoType void (uintptr_t)
struct _ast7715
    : DeclContext<Pack<_ast7716, _ast7717>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1183>, _ast7718>>,
              Pack<_ast7716, _ast7717>>>,
          _ast184> {}; // CXXMethodDecl GetCodeRange
struct _ast7716
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7715>, _str317>, _ast7524>>>> {
}; // ParmVarDecl start
struct _ast7717
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7715>, _str318>, _ast3595>>>> {
}; // ParmVarDecl length_in_bytes
struct _ast7718
    : FunctionProtoType<_ast114, Pack<_ast7524, _ast3595>, UnqualifiedType> {
}; // FunctionProtoType void (void **, size_t *)
struct _ast7719
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1184>, _ast7720>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl GetUnwindState
struct _ast7720 : FunctionProtoType<_ast3532, Pack<>, UnqualifiedType> {
}; // FunctionProtoType v8::UnwindState ()
struct _ast7721
    : DeclContext<Pack<_ast7722>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1185>, _ast7723>>,
              Pack<_ast7722>>>,
          _ast184> {}; // CXXMethodDecl SetFatalErrorHandler
struct _ast7722
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7721>, _str51>, _ast6692>>>> {
}; // ParmVarDecl that
struct _ast7723 : FunctionProtoType<_ast114, Pack<_ast6692>, UnqualifiedType> {
}; // FunctionProtoType void (v8::FatalErrorCallback)
struct _ast7724
    : DeclContext<Pack<_ast7725>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1186>, _ast7726>>,
              Pack<_ast7725>>>,
          _ast184> {}; // CXXMethodDecl SetOOMErrorHandler
struct _ast7725
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7724>, _str51>, _ast6694>>>> {
}; // ParmVarDecl that
struct _ast7726 : FunctionProtoType<_ast114, Pack<_ast6694>, UnqualifiedType> {
}; // FunctionProtoType void (v8::OOMErrorCallback)
struct _ast7727
    : DeclContext<Pack<_ast7728, _ast7729>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1187>, _ast7730>>,
              Pack<_ast7728, _ast7729>>>,
          _ast184> {}; // CXXMethodDecl AddNearHeapLimitCallback
struct _ast7728
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7727>, _str80>, _ast6924>>>> {
}; // ParmVarDecl callback
struct _ast7729
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7727>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast7730
    : FunctionProtoType<_ast114, Pack<_ast6924, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType void (v8::NearHeapLimitCallback, void *)
struct _ast7731
    : DeclContext<Pack<_ast7732, _ast7733>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1189>, _ast7734>>,
              Pack<_ast7732, _ast7733>>>,
          _ast184> {}; // CXXMethodDecl RemoveNearHeapLimitCallback
struct _ast7732
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7731>, _str80>, _ast6924>>>> {
}; // ParmVarDecl callback
struct _ast7733
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7731>, _str1188>, _ast3254>>>> {
}; // ParmVarDecl heap_limit
struct _ast7734
    : FunctionProtoType<_ast114, Pack<_ast6924, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (v8::NearHeapLimitCallback, size_t)
struct _ast7735
    : DeclContext<Pack<_ast7736>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1191>, _ast3644>>,
              Pack<_ast7736>>>,
          _ast184> {}; // CXXMethodDecl AutomaticallyRestoreInitialHeapLimit
struct _ast7736
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7735>, _str1190>, _ast3643>>>> {
}; // ParmVarDecl threshold_percent
struct _ast7737
    : DeclContext<Pack<_ast7738>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1192>, _ast7739>>,
              Pack<_ast7738>>>,
          _ast184> {
}; // CXXMethodDecl SetAllowCodeGenerationFromStringsCallback
struct _ast7738
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7737>, _str80>, _ast6894>>>> {
}; // ParmVarDecl callback
struct _ast7739 : FunctionProtoType<_ast114, Pack<_ast6894>, UnqualifiedType> {
}; // FunctionProtoType void (v8::AllowCodeGenerationFromStringsCallback)
struct _ast7740
    : DeclContext<Pack<_ast7741>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1193>, _ast7742>>,
              Pack<_ast7741>>>,
          _ast184> {}; // CXXMethodDecl SetAllowWasmCodeGenerationCallback
struct _ast7741
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7740>, _str80>, _ast6898>>>> {
}; // ParmVarDecl callback
struct _ast7742 : FunctionProtoType<_ast114, Pack<_ast6898>, UnqualifiedType> {
}; // FunctionProtoType void (v8::AllowWasmCodeGenerationCallback)
struct _ast7743
    : DeclContext<Pack<_ast7744>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1194>, _ast7745>>,
              Pack<_ast7744>>>,
          _ast184> {}; // CXXMethodDecl SetWasmModuleCallback
struct _ast7744
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7743>, _str80>, _ast6896>>>> {
}; // ParmVarDecl callback
struct _ast7745 : FunctionProtoType<_ast114, Pack<_ast6896>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ExtensionCallback)
struct _ast7746
    : DeclContext<Pack<_ast7747>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1195>, _ast7745>>,
              Pack<_ast7747>>>,
          _ast184> {}; // CXXMethodDecl SetWasmInstanceCallback
struct _ast7747
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7746>, _str80>, _ast6896>>>> {
}; // ParmVarDecl callback
struct _ast7748
    : DeclContext<Pack<_ast7749>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1196>, _ast7750>>,
              Pack<_ast7749>>>,
          _ast184> {}; // CXXMethodDecl SetWasmStreamingCallback
struct _ast7749
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7748>, _str80>, _ast6902>>>> {
}; // ParmVarDecl callback
struct _ast7750 : FunctionProtoType<_ast114, Pack<_ast6902>, UnqualifiedType> {
}; // FunctionProtoType void (v8::WasmStreamingCallback)
struct _ast7751
    : DeclContext<Pack<_ast7752>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1197>, _ast7753>>,
              Pack<_ast7752>>>,
          _ast184> {}; // CXXMethodDecl SetWasmThreadsEnabledCallback
struct _ast7752
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7751>, _str80>, _ast6904>>>> {
}; // ParmVarDecl callback
struct _ast7753 : FunctionProtoType<_ast114, Pack<_ast6904>, UnqualifiedType> {
}; // FunctionProtoType void (v8::WasmThreadsEnabledCallback)
struct _ast7754
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1198>, _ast3256>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IsDead
struct _ast7755
    : DeclContext<Pack<_ast7756, _ast7757>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1199>, _ast7759>>,
              Pack<_ast7756, _ast7757>>>,
          _ast184> {}; // CXXMethodDecl AddMessageListener
struct _ast7756
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7755>, _str51>, _ast6698>>>> {
}; // ParmVarDecl that
struct _ast7757
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7755>, _str130>, _ast7758>>>> {
}; // ParmVarDecl data
struct _ast7759
    : FunctionProtoType<_ast129, Pack<_ast6698, _ast7758>, UnqualifiedType> {
}; // FunctionProtoType bool (v8::MessageCallback, Local<v8::Value>)
struct _ast7760
    : DeclContext<Pack<_ast7761, _ast7762, _ast7763>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1201>, _ast7765>>,
              Pack<_ast7761, _ast7762, _ast7763>>>,
          _ast184> {}; // CXXMethodDecl AddMessageListenerWithErrorLevel
struct _ast7761
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7760>, _str51>, _ast6698>>>> {
}; // ParmVarDecl that
struct _ast7762
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7760>, _str1200>, _ast1901>>>> {
}; // ParmVarDecl message_levels
struct _ast7763
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7760>, _str130>, _ast7764>>>> {
}; // ParmVarDecl data
struct _ast7765 : FunctionProtoType<_ast129,
                                    Pack<_ast6698, _ast1901, _ast7764>,
                                    UnqualifiedType> {
}; // FunctionProtoType bool (v8::MessageCallback, int, Local<v8::Value>)
struct _ast7766
    : DeclContext<Pack<_ast7767>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1202>, _ast7768>>,
              Pack<_ast7767>>>,
          _ast184> {}; // CXXMethodDecl RemoveMessageListeners
struct _ast7767
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7766>, _str51>, _ast6698>>>> {
}; // ParmVarDecl that
struct _ast7768 : FunctionProtoType<_ast114, Pack<_ast6698>, UnqualifiedType> {
}; // FunctionProtoType void (v8::MessageCallback)
struct _ast7769
    : DeclContext<Pack<_ast7770>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1203>, _ast7771>>,
              Pack<_ast7770>>>,
          _ast184> {}; // CXXMethodDecl SetFailedAccessCheckCallbackFunction
struct _ast7770
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7769>, _str62>, _ast6892>>>> {
}; // ParmVarDecl
struct _ast7771 : FunctionProtoType<_ast114, Pack<_ast6892>, UnqualifiedType> {
}; // FunctionProtoType void (v8::FailedAccessCheckCallback)
struct _ast7772
    : DeclContext<Pack<_ast7773, _ast7774, _ast7775>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1205>, _ast7777>>,
              Pack<_ast7773, _ast7774, _ast7775>>>,
          _ast184> {
}; // CXXMethodDecl SetCaptureStackTraceForUncaughtExceptions
struct _ast7773
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7772>, _str1204>, _ast129>>>> {
}; // ParmVarDecl capture
struct _ast7774
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7772>, _str298>, _ast1901>>>> {
}; // ParmVarDecl frame_limit
struct _ast7775
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7772>, _str264>, _ast7776>>>> {
}; // ParmVarDecl options
struct _ast7777 : FunctionProtoType<_ast114,
                                    Pack<_ast129, _ast1901, _ast7776>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (bool, int, StackTrace::StackTraceOptions)
struct _ast7778
    : DeclContext<Pack<_ast7779>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1206>, _ast7780>>,
              Pack<_ast7779>>>,
          _ast184> {}; // CXXMethodDecl VisitExternalResources
struct _ast7779
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7778>, _str1031>, _ast7060>>>> {
}; // ParmVarDecl visitor
struct _ast7780 : FunctionProtoType<_ast114, Pack<_ast7060>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ExternalResourceVisitor *)
struct _ast7781
    : DeclContext<Pack<_ast7782>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1207>, _ast7783>>,
              Pack<_ast7782>>>,
          _ast184> {}; // CXXMethodDecl VisitHandlesWithClassIds
struct _ast7782
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7781>, _str1031>, _ast7076>>>> {
}; // ParmVarDecl visitor
struct _ast7783 : FunctionProtoType<_ast114, Pack<_ast7076>, UnqualifiedType> {
}; // FunctionProtoType void (v8::PersistentHandleVisitor *)
struct _ast7784
    : DeclContext<Pack<_ast7785>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1208>, _ast7783>>,
              Pack<_ast7785>>>,
          _ast184> {}; // CXXMethodDecl VisitWeakHandles
struct _ast7785
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7784>, _str1031>, _ast7076>>>> {
}; // ParmVarDecl visitor
struct _ast7786
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1209>, _ast3256>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl IsInUse
struct _ast7787
    : DeclContext<Pack<_ast7788>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1211>, _ast3633>>,
              Pack<_ast7788>>>,
          _ast184> {}; // CXXMethodDecl SetAllowAtomicsWait
struct _ast7788
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7787>, _str1210>, _ast129>>>> {
}; // ParmVarDecl allow
struct _ast7792
    : DeclContext<Pack<_ast7793>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1213>, _ast7795>>,
              Pack<_ast7793>>>,
          _ast184> {}; // CXXMethodDecl DateTimeConfigurationChangeNotification
struct _ast7793
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7792>, _str1212>, _ast7794>>>> {
}; // ParmVarDecl time_zone_detection
struct _ast7794 : EnumType<_ast7789, _ast1901> {
}; // EnumType v8::Isolate::TimeZoneDetection
struct _ast7795 : FunctionProtoType<_ast114, Pack<_ast7794>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate::TimeZoneDetection)
struct _ast7796
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1214>, _ast113>>,
              Pack<>>>,
          _ast184> {}; // CXXMethodDecl LocaleConfigurationChangeNotification
struct _ast7797
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str4>, _ast113>>,
              Pack<>>>,
          _ast184>> {}; // CXXConstructorDecl Isolate
struct _ast7798
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str1215>, _ast7799>>,
              Pack<>>>,
          _ast184>> {}; // CXXDestructorDecl ~Isolate
struct _ast7799 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7800
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str4>, _ast7803>>,
              Pack<_ast7801>>>,
          _ast184>>,
      DeclContext<Pack<_ast7801>> {}; // CXXConstructorDecl Isolate
struct _ast7801
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7800>, _str62>, _ast7802>>>> {
}; // ParmVarDecl
struct _ast7802 : LValueReferenceType<ReferenceType<_ast7664>> {
}; // LValueReferenceType const v8::Isolate &
struct _ast7803 : FunctionProtoType<_ast114, Pack<_ast7802>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Isolate &)
struct _ast7804
    : DeclContext<Pack<_ast7805>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7>, _str64>, _ast7806>>,
              Pack<_ast7805>>>,
          _ast184> {}; // CXXMethodDecl operator=
struct _ast7805
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7804>, _str62>, _ast7802>>>> {
}; // ParmVarDecl
struct _ast7806 : FunctionProtoType<_ast7807, Pack<_ast7802>, UnqualifiedType> {
}; // FunctionProtoType v8::Isolate &(const v8::Isolate &)
struct _ast7807 : LValueReferenceType<ReferenceType<_ast8>> {
}; // LValueReferenceType v8::Isolate &
struct _ast7808
    : DeclContext<Pack<_ast7809>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str1216>, _ast5561>>,
          Pack<_ast7809>>> {}; // CXXMethodDecl operator new
struct _ast7809
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7808>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast7810
    : DeclContext<Pack<_ast7811>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str1217>, _ast5561>>,
          Pack<_ast7811>>> {}; // CXXMethodDecl operator new[]
struct _ast7811
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7810>, _str345>, _ast3254>>>> {
}; // ParmVarDecl size
struct _ast7812
    : DeclContext<Pack<_ast7813, _ast7814>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str1218>, _ast7815>>,
          Pack<_ast7813, _ast7814>>> {}; // CXXMethodDecl operator delete
struct _ast7813
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7812>, _str62>, _ast2223>>>> {
}; // ParmVarDecl
struct _ast7814
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7812>, _str62>, _ast3254>>>> {
}; // ParmVarDecl
struct _ast7815
    : FunctionProtoType<_ast114, Pack<_ast2223, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (void *, size_t) noexcept
struct _ast7816
    : DeclContext<Pack<_ast7817, _ast7818>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7>, _str1219>, _ast7815>>,
          Pack<_ast7817, _ast7818>>> {}; // CXXMethodDecl operator delete[]
struct _ast7817
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7816>, _str62>, _ast2223>>>> {
}; // ParmVarDecl
struct _ast7818
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7816>, _str62>, _ast3254>>>> {
}; // ParmVarDecl
struct _ast7819
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast81>, _str37>, _ast82>,
                     None>,
          None> {}; // CXXRecordDecl StartupData
struct _ast7820
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast81>, _str1220>, _ast128>>,
              Pack<>>>,
          _ast7821> {}; // CXXMethodDecl CanBeRehashed
struct _ast7821 : PointerType<_ast7822> {
}; // PointerType const v8::StartupData *
struct _ast7822 : ConstQualifiedType<_ast82> {
}; // RecordType const v8::StartupData
struct _ast7823
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast81>, _str130>, _ast1914>>> {
}; // FieldDecl data
struct _ast7824
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast81>, _str1221>, _ast1901>>> {
}; // FieldDecl raw_size
struct _ast7825
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str1222>, _ast7826>>> {
};                                          // TypedefDecl EntropySource
struct _ast7826 : TypedefType<_ast7825> {}; // TypedefType v8::EntropySource
struct _ast7827
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast1>, _str1223>, _ast7828>>> {
}; // TypedefDecl ReturnAddressLocationResolver
struct _ast7828 : TypedefType<_ast7827> {
}; // TypedefType v8::ReturnAddressLocationResolver
struct _ast7829
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1224>, _ast7830>,
                     None>,
          None> {}; // CXXRecordDecl V8
struct _ast7830 : StructOrClassRecordType<RecordType<_ast7829>> {
}; // RecordType v8::V8
struct _ast7831
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7829>, _str1224>,
                                        _ast7830>,
                               None>,
                    None> {}; // CXXRecordDecl V8
struct _ast7832
    : DeclContext<Pack<_ast7833>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1226>, _ast7834>>,
          Pack<_ast7833>>> {}; // CXXMethodDecl SetNativesDataBlob
struct _ast7833
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7832>, _str1225>, _ast7243>>>> {
}; // ParmVarDecl startup_blob
struct _ast7834 : FunctionProtoType<_ast114, Pack<_ast7243>, UnqualifiedType> {
}; // FunctionProtoType void (v8::StartupData *)
struct _ast7835
    : DeclContext<Pack<_ast7836>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1227>, _ast7834>>,
          Pack<_ast7836>>> {}; // CXXMethodDecl SetSnapshotDataBlob
struct _ast7836
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7835>, _str1225>, _ast7243>>>> {
}; // ParmVarDecl startup_blob
struct _ast7837
    : DeclContext<Pack<_ast7838>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1228>, _ast7839>>,
          Pack<_ast7838>>> {}; // CXXMethodDecl SetDcheckErrorHandler
struct _ast7838
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7837>, _str51>, _ast6696>>>> {
}; // ParmVarDecl that
struct _ast7839 : FunctionProtoType<_ast114, Pack<_ast6696>, UnqualifiedType> {
}; // FunctionProtoType void (v8::DcheckErrorCallback)
struct _ast7840
    : DeclContext<Pack<_ast7841>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1229>, _ast1917>>,
          Pack<_ast7841>>> {}; // CXXMethodDecl SetFlagsFromString
struct _ast7841
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7840>, _str493>, _ast1914>>>> {
}; // ParmVarDecl str
struct _ast7842
    : DeclContext<Pack<_ast7843, _ast7844>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1229>, _ast7845>>,
          Pack<_ast7843, _ast7844>>> {}; // CXXMethodDecl SetFlagsFromString
struct _ast7843
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7842>, _str493>, _ast1914>>>> {
}; // ParmVarDecl str
struct _ast7844
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7842>, _str165>, _ast3254>>>> {
}; // ParmVarDecl length
struct _ast7845
    : FunctionProtoType<_ast114, Pack<_ast1914, _ast3254>, UnqualifiedType> {
}; // FunctionProtoType void (const char *, size_t)
struct _ast7846
    : DeclContext<Pack<_ast7847, _ast7848>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1229>, _ast7849>>,
          Pack<_ast7847, _ast7848>>> {}; // CXXMethodDecl SetFlagsFromString
struct _ast7847
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7846>, _str493>, _ast1914>>>> {
}; // ParmVarDecl str
struct _ast7848
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7846>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast7849
    : FunctionProtoType<_ast114, Pack<_ast1914, _ast1901>, UnqualifiedType> {
}; // FunctionProtoType void (const char *, int)
struct _ast7850
    : DeclContext<Pack<_ast7851, _ast7852, _ast7854>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1231>, _ast7855>>,
          Pack<_ast7851, _ast7852, _ast7854>>> {
}; // CXXMethodDecl SetFlagsFromCommandLine
struct _ast7851
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7850>, _str571>, _ast3985>>>> {
}; // ParmVarDecl argc
struct _ast7852
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7850>, _str589>, _ast7853>>>> {
};                                          // ParmVarDecl argv
struct _ast7853 : PointerType<_ast3982> {}; // PointerType char **
struct _ast7854
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7850>, _str1230>, _ast129>>>> {
}; // ParmVarDecl remove_flags
struct _ast7855 : FunctionProtoType<_ast114,
                                    Pack<_ast3985, _ast7853, _ast129>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (int *, char **, bool)
struct _ast7856
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1232>, _ast6965>>,
          Pack<>>> {}; // CXXMethodDecl GetVersion
struct _ast7857
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str152>, _ast3256>>,
          Pack<>>> {}; // CXXMethodDecl Initialize
struct _ast7858
    : DeclContext<Pack<_ast7859>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1233>, _ast7860>>,
          Pack<_ast7859>>> {}; // CXXMethodDecl SetEntropySource
struct _ast7859
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7858>, _str134>, _ast7826>>>> {
}; // ParmVarDecl source
struct _ast7860 : FunctionProtoType<_ast114, Pack<_ast7826>, UnqualifiedType> {
}; // FunctionProtoType void (v8::EntropySource)
struct _ast7861
    : DeclContext<Pack<_ast7862>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1235>, _ast7863>>,
          Pack<_ast7862>>> {}; // CXXMethodDecl SetReturnAddressLocationResolver
struct _ast7862
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7861>, _str1234>, _ast7828>>>> {
}; // ParmVarDecl return_address_resolver
struct _ast7863 : FunctionProtoType<_ast114, Pack<_ast7828>, UnqualifiedType> {
}; // FunctionProtoType void (v8::ReturnAddressLocationResolver)
struct _ast7864
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str471>, _ast3256>>,
          Pack<>>> {}; // CXXMethodDecl Dispose
struct _ast7865
    : DeclContext<Pack<_ast7866>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1237>, _ast7867>>,
          Pack<_ast7866>>> {}; // CXXMethodDecl InitializeICU
struct _ast7866
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7865>, _str1236>, _ast1914>>>> {
}; // ParmVarDecl icu_data_file
struct _ast7867 : FunctionProtoType<_ast129, Pack<_ast1914>, UnqualifiedType> {
}; // FunctionProtoType bool (const char *)
struct _ast7868
    : DeclContext<Pack<_ast7869, _ast7870>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1239>, _ast7871>>,
          Pack<_ast7869, _ast7870>>> {
}; // CXXMethodDecl InitializeICUDefaultLocation
struct _ast7869
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7868>, _str1238>, _ast1914>>>> {
}; // ParmVarDecl exec_path
struct _ast7870
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7868>, _str1236>, _ast1914>>>> {
}; // ParmVarDecl icu_data_file
struct _ast7871
    : FunctionProtoType<_ast129, Pack<_ast1914, _ast1914>, UnqualifiedType> {
}; // FunctionProtoType bool (const char *, const char *)
struct _ast7872
    : DeclContext<Pack<_ast7873>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1241>, _ast1917>>,
          Pack<_ast7873>>> {}; // CXXMethodDecl InitializeExternalStartupData
struct _ast7873
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7872>, _str1240>, _ast1914>>>> {
}; // ParmVarDecl directory_path
struct _ast7874
    : DeclContext<Pack<_ast7875, _ast7876>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1241>, _ast7877>>,
          Pack<_ast7875, _ast7876>>> {
}; // CXXMethodDecl InitializeExternalStartupData
struct _ast7875
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7874>, _str1242>, _ast1914>>>> {
}; // ParmVarDecl natives_blob
struct _ast7876
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7874>, _str1060>, _ast1914>>>> {
}; // ParmVarDecl snapshot_blob
struct _ast7877
    : FunctionProtoType<_ast114, Pack<_ast1914, _ast1914>, UnqualifiedType> {
}; // FunctionProtoType void (const char *, const char *)
struct _ast7878
    : DeclContext<Pack<_ast7879>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1244>, _ast7881>>,
          Pack<_ast7879>>> {}; // CXXMethodDecl InitializePlatform
struct _ast7879
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7878>, _str1243>, _ast7880>>>> {
};                                        // ParmVarDecl platform
struct _ast7880 : PointerType<_ast64> {}; // PointerType v8::Platform *
struct _ast7881 : FunctionProtoType<_ast114, Pack<_ast7880>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Platform *)
struct _ast7882
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1245>, _ast113>>,
          Pack<>>> {}; // CXXMethodDecl ShutdownPlatform
struct _ast7883
    : DeclContext<Pack<_ast7884>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1247>, _ast7885>>,
          Pack<_ast7884>>> {}; // CXXMethodDecl EnableWebAssemblyTrapHandler
struct _ast7884
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7883>, _str1246>, _ast129>>>> {
}; // ParmVarDecl use_v8_signal_handler
struct _ast7885 : FunctionProtoType<_ast129, Pack<_ast129>, UnqualifiedType> {
}; // FunctionProtoType bool (bool)
struct _ast7886
    : DeclContext<Pack<_ast7887>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast7829>, _str1249>, _ast7888>>,
          Pack<_ast7887>>> {}; // CXXMethodDecl SetUnhandledExceptionCallback
struct _ast7887
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7886>, _str1248>, _ast7054>>>> {
}; // ParmVarDecl unhandled_exception_callback
struct _ast7888 : FunctionProtoType<_ast114, Pack<_ast7054>, UnqualifiedType> {
}; // FunctionProtoType void (v8::UnhandledExceptionCallback)
struct _ast7889
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1250>, _ast7890>,
                     Pack<_ast7891>>,
          Pack<>>,
      DeclContext<Pack<_ast7892,
                       _ast7896,
                       _ast7902,
                       _ast7906,
                       _ast7908,
                       _ast7909,
                       _ast7914,
                       _ast7919,
                       _ast7925,
                       _ast7933,
                       _ast7937,
                       _ast7941,
                       _ast7946,
                       _ast7891>> {}; // CXXRecordDecl SnapshotCreator
struct _ast7890 : StructOrClassRecordType<RecordType<_ast7889>> {
}; // RecordType v8::SnapshotCreator
struct _ast7891
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7889>, _str263>, _ast2223>>> {
}; // FieldDecl data_
struct _ast7892
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7889>, _str1250>,
                                        _ast7890>,
                               None>,
                    None> {}; // CXXRecordDecl SnapshotCreator
struct _ast7896
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1250>, _ast7900>>,
              Pack<_ast7897, _ast7898, _ast7899>>>,
          _ast7901>>,
      DeclContext<Pack<_ast7897, _ast7898, _ast7899>> {
}; // CXXConstructorDecl SnapshotCreator
struct _ast7897
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7896>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast7898
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7896>, _str1065>, _ast7251>>>> {
}; // ParmVarDecl external_references
struct _ast7899
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7896>, _str1251>, _ast7243>>>> {
}; // ParmVarDecl existing_blob
struct _ast7900 : FunctionProtoType<_ast114,
                                    Pack<_ast184, _ast7251, _ast7243>,
                                    UnqualifiedType> {
}; // FunctionProtoType void (v8::Isolate *, const intptr_t *, v8::StartupData
   // *)
struct _ast7901 : PointerType<_ast7890> {}; // PointerType v8::SnapshotCreator *
struct _ast7902
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1250>, _ast7905>>,
              Pack<_ast7903, _ast7904>>>,
          _ast7901>>,
      DeclContext<Pack<_ast7903, _ast7904>> {
}; // CXXConstructorDecl SnapshotCreator
struct _ast7903
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7902>, _str1065>, _ast7251>>>> {
}; // ParmVarDecl external_references
struct _ast7904
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7902>, _str1251>, _ast7243>>>> {
}; // ParmVarDecl existing_blob
struct _ast7905
    : FunctionProtoType<_ast114, Pack<_ast7251, _ast7243>, UnqualifiedType> {
}; // FunctionProtoType void (const intptr_t *, v8::StartupData *)
struct _ast7906
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1252>, _ast7907>>,
              Pack<>>>,
          _ast7901>> {}; // CXXDestructorDecl ~SnapshotCreator
struct _ast7907 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast7908
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str125>, _ast4822>>,
              Pack<>>>,
          _ast7901> {}; // CXXMethodDecl GetIsolate
struct _ast7909
    : DeclContext<Pack<_ast7910, _ast7912>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1253>, _ast7913>>,
              Pack<_ast7910, _ast7912>>>,
          _ast7901> {}; // CXXMethodDecl SetDefaultContext
struct _ast7910
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7909>, _str229>, _ast7911>>>> {
}; // ParmVarDecl context
struct _ast7912
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7909>, _str80>, _ast7186>>>> {
}; // ParmVarDecl callback
struct _ast7913
    : FunctionProtoType<_ast114, Pack<_ast7911, _ast7186>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Context>,
   // v8::SerializeInternalFieldsCallback)
struct _ast7914
    : DeclContext<Pack<_ast7915, _ast7917>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1254>, _ast7918>>,
              Pack<_ast7915, _ast7917>>>,
          _ast7901> {}; // CXXMethodDecl AddContext
struct _ast7915
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7914>, _str229>, _ast7916>>>> {
}; // ParmVarDecl context
struct _ast7917
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7914>, _str80>, _ast7186>>>> {
}; // ParmVarDecl callback
struct _ast7918
    : FunctionProtoType<_ast3254, Pack<_ast7916, _ast7186>, UnqualifiedType> {
}; // FunctionProtoType size_t (Local<v8::Context>,
   // v8::SerializeInternalFieldsCallback)
struct _ast7919
    : DeclContext<Pack<_ast7920>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1256>, _ast7922>>,
              Pack<_ast7920>>>,
          _ast7901> {}; // CXXMethodDecl AddTemplate
struct _ast7920
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7919>, _str1255>, _ast7921>>>> {
}; // ParmVarDecl template_obj
struct _ast7922 : FunctionProtoType<_ast3254, Pack<_ast7921>, UnqualifiedType> {
}; // FunctionProtoType size_t (Local<v8::Template>)
struct _ast7925
    : DeclContext<Pack<_ast7926, _ast7928>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1257>, _ast7930>>,
              Pack<_ast7926, _ast7928>>>,
          _ast7901> {}; // CXXMethodDecl AddData
struct _ast7926
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7925>, _str229>, _ast7927>>>> {
}; // ParmVarDecl context
struct _ast7928
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7925>, _str338>, _ast7929>>>> {
}; // ParmVarDecl object
struct _ast7930
    : FunctionProtoType<_ast3254, Pack<_ast7927, _ast7929>, UnqualifiedType> {
}; // FunctionProtoType size_t (Local<v8::Context>, Local<T>)
struct _ast7933
    : DeclContext<Pack<_ast7934>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1257>, _ast7936>>,
              Pack<_ast7934>>>,
          _ast7901> {}; // CXXMethodDecl AddData
struct _ast7934
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7933>, _str338>, _ast7935>>>> {
}; // ParmVarDecl object
struct _ast7936 : FunctionProtoType<_ast3254, Pack<_ast7935>, UnqualifiedType> {
}; // FunctionProtoType size_t (Local<T>)
struct _ast7937
    : DeclContext<Pack<_ast7938>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1259>, _ast7940>>,
              Pack<_ast7938>>>,
          _ast7901> {}; // CXXMethodDecl CreateBlob
struct _ast7938
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7937>, _str1258>, _ast7939>>>> {
}; // ParmVarDecl function_code_handling
struct _ast7939 : EnumType<_ast7893, _ast1901> {
}; // EnumType v8::SnapshotCreator::FunctionCodeHandling
struct _ast7940 : FunctionProtoType<_ast82, Pack<_ast7939>, UnqualifiedType> {
}; // FunctionProtoType v8::StartupData
   // (v8::SnapshotCreator::FunctionCodeHandling)
struct _ast7941
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str1250>, _ast7945>>,
              Pack<_ast7942>>>,
          _ast7901>>,
      DeclContext<Pack<_ast7942>> {}; // CXXConstructorDecl SnapshotCreator
struct _ast7942
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7941>, _str62>, _ast7943>>>> {
}; // ParmVarDecl
struct _ast7943 : LValueReferenceType<ReferenceType<_ast7944>> {
}; // LValueReferenceType const v8::SnapshotCreator &
struct _ast7944 : ConstQualifiedType<_ast7890> {
}; // RecordType const v8::SnapshotCreator
struct _ast7945 : FunctionProtoType<_ast114, Pack<_ast7943>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::SnapshotCreator &)
struct _ast7946
    : DeclContext<Pack<_ast7947>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7889>, _str64>, _ast7945>>,
              Pack<_ast7947>>>,
          _ast7901> {}; // CXXMethodDecl operator=
struct _ast7947
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast7946>, _str62>, _ast7943>>>> {
}; // ParmVarDecl
struct _ast7949
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast41>, _str20>, _ast42>,
                     None>,
          None> {}; // CXXRecordDecl Maybe
struct _ast7950
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str1260>, _ast128>>,
              Pack<>>>,
          _ast7951> {};                     // CXXMethodDecl IsNothing
struct _ast7951 : PointerType<_ast7952> {}; // PointerType const Maybe<T> *
struct _ast7952 : ConstQualifiedType<_ast42> {
}; // InjectedClassNameType const Maybe<T>
struct _ast7953
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str1261>, _ast128>>,
              Pack<>>>,
          _ast7951> {}; // CXXMethodDecl IsJust
struct _ast7954
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str1262>, _ast7955>>,
              Pack<>>>,
          _ast7951> {}; // CXXMethodDecl ToChecked
struct _ast7955 : FunctionProtoType<_ast7956, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType T () const
struct _ast7957
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str1263>, _ast4012>>,
              Pack<>>>,
          _ast7951> {}; // CXXMethodDecl Check
struct _ast7958
    : DeclContext<Pack<_ast7959>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str1264>, _ast7961>>,
              Pack<_ast7959>>>,
          _ast7951> {}; // CXXMethodDecl To
struct _ast7959
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7958>, _str66>, _ast7960>>>> {
};                                          // ParmVarDecl out
struct _ast7960 : PointerType<_ast7956> {}; // PointerType T *
struct _ast7961
    : FunctionProtoType<_ast129, Pack<_ast7960>, ConstQualifiedType> {
}; // FunctionProtoType bool (T *) const
struct _ast7962
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str1265>, _ast7955>>,
              Pack<>>>,
          _ast7951> {}; // CXXMethodDecl FromJust
struct _ast7963
    : DeclContext<Pack<_ast7964>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str70>, _ast7967>>,
              Pack<_ast7964>>>,
          _ast7951> {}; // CXXMethodDecl FromMaybe
struct _ast7964
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7963>, _str69>, _ast7965>>>> {
}; // ParmVarDecl default_value
struct _ast7965 : LValueReferenceType<ReferenceType<_ast7966>> {
}; // LValueReferenceType const T &
struct _ast7966 : ConstQualifiedType<_ast7956> {
}; // TemplateTypeParmType const T
struct _ast7967
    : FunctionProtoType<_ast7956, Pack<_ast7965>, ConstQualifiedType> {
}; // FunctionProtoType T (const T &) const
struct _ast7968
    : DeclContext<Pack<_ast7969>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str56>, _ast7971>>,
              Pack<_ast7969>>>,
          _ast7951> {}; // CXXMethodDecl operator==
struct _ast7969
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7968>, _str76>, _ast7970>>>> {
}; // ParmVarDecl other
struct _ast7970 : LValueReferenceType<ReferenceType<_ast7952>> {
}; // LValueReferenceType const Maybe<T> &
struct _ast7971
    : FunctionProtoType<_ast129, Pack<_ast7970>, ConstQualifiedType> {
}; // FunctionProtoType bool (const Maybe<T> &) const
struct _ast7972
    : DeclContext<Pack<_ast7973>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast41>, _str57>, _ast7971>>,
              Pack<_ast7973>>>,
          _ast7951> {}; // CXXMethodDecl operator!=
struct _ast7973
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7972>, _str76>, _ast7970>>>> {
}; // ParmVarDecl other
struct _ast7976
    : FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1>, _str1266>, _ast7977>>,
          Pack<>> {}; // FunctionDecl Nothing
struct _ast7977 : FunctionProtoType<_ast7978, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Maybe<T> ()
struct _ast7981
    : DeclContext<Pack<_ast7982>>,
      FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1>, _str1268>, _ast7986>>,
          Pack<_ast7982>> {}; // FunctionDecl Just
struct _ast7982
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7981>, _str1267>, _ast7983>>>> {
}; // ParmVarDecl t
struct _ast7983 : LValueReferenceType<ReferenceType<_ast7984>> {
}; // LValueReferenceType const T &
struct _ast7984 : ConstQualifiedType<_ast7985> {
}; // TemplateTypeParmType const T
struct _ast7986 : FunctionProtoType<_ast7987, Pack<_ast7983>, UnqualifiedType> {
}; // FunctionProtoType Maybe<T> (const T &)
struct _ast7988 : DeclContext<Pack<_ast7989,
                                   _ast7991,
                                   _ast7994,
                                   _ast7995,
                                   _ast7999,
                                   _ast8001,
                                   _ast8005,
                                   _ast8009>> {
}; // ClassTemplateSpecializationDecl Maybe
struct _ast7989
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast7988>, _str20>, _ast7990>,
                     None>,
          None> {}; // CXXRecordDecl Maybe
struct _ast7990 : StructOrClassRecordType<RecordType<_ast7988>> {
}; // RecordType v8::Maybe<void>
struct _ast7991
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str1260>, _ast128>>,
              Pack<>>>,
          _ast7992> {}; // CXXMethodDecl IsNothing
struct _ast7992 : PointerType<_ast7993> {
}; // PointerType const v8::Maybe<void> *
struct _ast7993 : ConstQualifiedType<_ast7990> {
}; // RecordType const v8::Maybe<void>
struct _ast7994
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str1261>, _ast128>>,
              Pack<>>>,
          _ast7992> {}; // CXXMethodDecl IsJust
struct _ast7995
    : DeclContext<Pack<_ast7996>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str56>, _ast7998>>,
              Pack<_ast7996>>>,
          _ast7992> {}; // CXXMethodDecl operator==
struct _ast7996
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7995>, _str76>, _ast7997>>>> {
}; // ParmVarDecl other
struct _ast7997 : LValueReferenceType<ReferenceType<_ast7993>> {
}; // LValueReferenceType const v8::Maybe<void> &
struct _ast7998
    : FunctionProtoType<_ast129, Pack<_ast7997>, ConstQualifiedType> {
}; // FunctionProtoType bool (const v8::Maybe<void> &) const
struct _ast7999
    : DeclContext<Pack<_ast8000>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str57>, _ast7998>>,
              Pack<_ast8000>>>,
          _ast7992> {}; // CXXMethodDecl operator!=
struct _ast8000
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7999>, _str76>, _ast7997>>>> {
}; // ParmVarDecl other
struct _ast8001
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str20>, _ast8003>>,
              Pack<_ast8002>>>,
          _ast8004>>,
      DeclContext<Pack<_ast8002>> {}; // CXXConstructorDecl Maybe
struct _ast8002
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast8001>, _str62>, _ast7997>>>> {
}; // ParmVarDecl
struct _ast8003 : FunctionProtoType<_ast114, Pack<_ast7997>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Maybe<void> &)
struct _ast8004 : PointerType<_ast7990> {}; // PointerType v8::Maybe<void> *
struct _ast8005
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str20>, _ast8008>>,
              Pack<_ast8006>>>,
          _ast8004>>,
      DeclContext<Pack<_ast8006>> {}; // CXXConstructorDecl Maybe
struct _ast8006
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast8005>, _str62>, _ast8007>>>> {
}; // ParmVarDecl
struct _ast8007 : RValueReferenceType<ReferenceType<_ast7990>> {
}; // RValueReferenceType v8::Maybe<void> &&
struct _ast8008 : FunctionProtoType<_ast114, Pack<_ast8007>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Maybe<void> &&) noexcept
struct _ast8009
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast7988>, _str1269>, _ast214>>,
              Pack<>>>,
          _ast8004>> {}; // CXXDestructorDecl ~Maybe
struct _ast8010
    : FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast1>, _str1270>, _ast8011>>,
          Pack<>> {}; // FunctionDecl JustVoid
struct _ast8011 : FunctionProtoType<_ast8012, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Maybe<void> ()
struct _ast8013
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1271>, _ast8014>,
                     Pack<_ast8015,
                          _ast8016,
                          _ast8018,
                          _ast8019,
                          _ast8020,
                          _ast8021,
                          _ast8022,
                          _ast8023,
                          _ast8024,
                          _ast8025>>,
          Pack<>>,
      DeclContext<Pack<_ast8026,
                       _ast8027,
                       _ast8029,
                       _ast8031,
                       _ast8034,
                       _ast8035,
                       _ast8036,
                       _ast8039,
                       _ast8042,
                       _ast8047,
                       _ast8050,
                       _ast8051,
                       _ast8053,
                       _ast8054,
                       _ast8056,
                       _ast8059,
                       _ast8063,
                       _ast8015,
                       _ast8016,
                       _ast8018,
                       _ast8019,
                       _ast8020,
                       _ast8021,
                       _ast8022,
                       _ast8023,
                       _ast8024,
                       _ast8025>> {}; // CXXRecordDecl TryCatch
struct _ast8014 : StructOrClassRecordType<RecordType<_ast8013>> {
}; // RecordType v8::TryCatch
struct _ast8015
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str118>, _ast2868>>> {
}; // FieldDecl isolate_
struct _ast8016
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1272>, _ast8017>>> {
};                                          // FieldDecl next_
struct _ast8017 : PointerType<_ast8014> {}; // PointerType v8::TryCatch *
struct _ast8018
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1273>, _ast2223>>> {
}; // FieldDecl exception_
struct _ast8019
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1274>, _ast2223>>> {
}; // FieldDecl message_obj_
struct _ast8020
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1275>, _ast2223>>> {
}; // FieldDecl js_stack_comparable_address_
struct _ast8021
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1276>, _ast129>>> {
}; // FieldDecl is_verbose_
struct _ast8022
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1277>, _ast129>>> {
}; // FieldDecl can_continue_
struct _ast8023
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1278>, _ast129>>> {
}; // FieldDecl capture_message_
struct _ast8024
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1279>, _ast129>>> {
}; // FieldDecl rethrow_
struct _ast8025
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8013>, _str1280>, _ast129>>> {
}; // FieldDecl has_terminated_
struct _ast8026
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8013>, _str1271>,
                                        _ast8014>,
                               None>,
                    None> {}; // CXXRecordDecl TryCatch
struct _ast8027
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1271>, _ast2846>>,
              Pack<_ast8028>>>,
          _ast8017>>,
      DeclContext<Pack<_ast8028>> {}; // CXXConstructorDecl TryCatch
struct _ast8028
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8027>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8029
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1281>, _ast8030>>,
              Pack<>>>,
          _ast8017>> {}; // CXXDestructorDecl ~TryCatch
struct _ast8030 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast8031
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1282>, _ast128>>,
              Pack<>>>,
          _ast8032> {};                     // CXXMethodDecl HasCaught
struct _ast8032 : PointerType<_ast8033> {}; // PointerType const v8::TryCatch *
struct _ast8033 : ConstQualifiedType<_ast8014> {
}; // RecordType const v8::TryCatch
struct _ast8034
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1283>, _ast128>>,
              Pack<>>>,
          _ast8032> {}; // CXXMethodDecl CanContinue
struct _ast8035
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1284>, _ast128>>,
              Pack<>>>,
          _ast8032> {}; // CXXMethodDecl HasTerminated
struct _ast8036
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1285>, _ast8037>>,
              Pack<>>>,
          _ast8017> {}; // CXXMethodDecl ReThrow
struct _ast8037 : FunctionProtoType<_ast8038, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast8039
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str897>, _ast8040>>,
              Pack<>>>,
          _ast8032> {}; // CXXMethodDecl Exception
struct _ast8040 : FunctionProtoType<_ast8041, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Value> () const
struct _ast8042
    : DeclContext<Pack<_ast8043>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str39>, _ast8045>>,
              Pack<_ast8043>>>,
          _ast8032> {}; // CXXMethodDecl StackTrace
struct _ast8043
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8042>, _str229>, _ast8044>>>> {
}; // ParmVarDecl context
struct _ast8045
    : FunctionProtoType<_ast8046, Pack<_ast8044>, ConstQualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _ast8047
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str281>, _ast8048>>,
              Pack<>>>,
          _ast8032> {}; // CXXMethodDecl Message
struct _ast8048 : FunctionProtoType<_ast8049, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType Local<v8::Message> () const
struct _ast8050
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str75>, _ast113>>,
              Pack<>>>,
          _ast8017> {}; // CXXMethodDecl Reset
struct _ast8051
    : DeclContext<Pack<_ast8052>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1286>, _ast3633>>,
              Pack<_ast8052>>>,
          _ast8017> {}; // CXXMethodDecl SetVerbose
struct _ast8052
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8051>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast8053
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1287>, _ast128>>,
              Pack<>>>,
          _ast8032> {}; // CXXMethodDecl IsVerbose
struct _ast8054
    : DeclContext<Pack<_ast8055>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1288>, _ast3633>>,
              Pack<_ast8055>>>,
          _ast8017> {}; // CXXMethodDecl SetCaptureMessage
struct _ast8055
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8054>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast8056
    : DeclContext<Pack<_ast8057>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast8013>, _str1289>, _ast8058>>,
          Pack<_ast8057>>> {}; // CXXMethodDecl JSStackComparableAddress
struct _ast8057
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8056>, _str649>, _ast8017>>>> {
}; // ParmVarDecl handler
struct _ast8058 : FunctionProtoType<_ast2223, Pack<_ast8017>, UnqualifiedType> {
}; // FunctionProtoType void *(v8::TryCatch *)
struct _ast8059
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str1271>, _ast8062>>,
              Pack<_ast8060>>>,
          _ast8017>>,
      DeclContext<Pack<_ast8060>> {}; // CXXConstructorDecl TryCatch
struct _ast8060
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast8059>, _str62>, _ast8061>>>> {
}; // ParmVarDecl
struct _ast8061 : LValueReferenceType<ReferenceType<_ast8033>> {
}; // LValueReferenceType const v8::TryCatch &
struct _ast8062 : FunctionProtoType<_ast114, Pack<_ast8061>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::TryCatch &)
struct _ast8063
    : DeclContext<Pack<_ast8064>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8013>, _str64>, _ast8062>>,
              Pack<_ast8064>>>,
          _ast8017> {}; // CXXMethodDecl operator=
struct _ast8064
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast8063>, _str62>, _ast8061>>>> {
}; // ParmVarDecl
struct _ast8065
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1290>, _ast8066>,
                     Pack<_ast8067, _ast8068>>,
          Pack<>>,
      DeclContext<Pack<_ast8069,
                       _ast8070,
                       _ast8072,
                       _ast8077,
                       _ast8080,
                       _ast8067,
                       _ast8068>> {}; // CXXRecordDecl ExtensionConfiguration
struct _ast8066 : StructOrClassRecordType<RecordType<_ast8065>> {
}; // RecordType v8::ExtensionConfiguration
struct _ast8067
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8065>, _str1291>, _ast2435>>> {
}; // FieldDecl name_count_
struct _ast8068
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8065>, _str1292>, _ast6566>>> {
}; // FieldDecl names_
struct _ast8069
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8065>, _str1290>,
                                        _ast8066>,
                               None>,
                    None> {}; // CXXRecordDecl ExtensionConfiguration
struct _ast8070
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8065>, _str1290>, _ast113>>,
              Pack<>>>,
          _ast8071>> {}; // CXXConstructorDecl ExtensionConfiguration
struct _ast8071 : PointerType<_ast8066> {
}; // PointerType v8::ExtensionConfiguration *
struct _ast8072
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8065>, _str1290>, _ast8076>>,
              Pack<_ast8073, _ast8074>>>,
          _ast8071>>,
      DeclContext<Pack<_ast8073, _ast8074>> {
}; // CXXConstructorDecl ExtensionConfiguration
struct _ast8073
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8072>, _str1293>, _ast1901>>>> {
}; // ParmVarDecl name_count
struct _ast8074
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8072>, _str595>, _ast8075>>>> {
}; // ParmVarDecl names
struct _ast8076
    : FunctionProtoType<_ast114, Pack<_ast1901, _ast8075>, UnqualifiedType> {
}; // FunctionProtoType void (int, const char **)
struct _ast8077
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8065>, _str1294>, _ast6594>>,
              Pack<>>>,
          _ast8078> {}; // CXXMethodDecl begin
struct _ast8078 : PointerType<_ast8079> {
}; // PointerType const v8::ExtensionConfiguration *
struct _ast8079 : ConstQualifiedType<_ast8066> {
}; // RecordType const v8::ExtensionConfiguration
struct _ast8080
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8065>, _str1295>, _ast6594>>,
              Pack<>>>,
          _ast8078> {}; // CXXMethodDecl end
struct _ast8081
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3>, _str2>, _ast4>, None>,
          None> {}; // CXXRecordDecl Context
struct _ast8082
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str92>, _ast8083>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl Global
struct _ast8083 : FunctionProtoType<_ast8084, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> ()
struct _ast8085 : PointerType<_ast4> {}; // PointerType v8::Context *
struct _ast8086
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1296>, _ast113>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl DetachGlobal
struct _ast8087
    : DeclContext<
          Pack<_ast8088, _ast8089, _ast8090, _ast8092, _ast8094, _ast8095>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3>, _str61>, _ast8096>>,
          Pack<_ast8088, _ast8089, _ast8090, _ast8092, _ast8094, _ast8095>>> {
}; // CXXMethodDecl New
struct _ast8088
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8087>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8089
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8087>, _str1297>, _ast8071>>>> {
}; // ParmVarDecl extensions
struct _ast8090
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8087>, _str1298>, _ast8091>>>> {
}; // ParmVarDecl global_template
struct _ast8092
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8087>, _str1299>, _ast8093>>>> {
}; // ParmVarDecl global_object
struct _ast8094
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8087>, _str1300>, _ast7210>>>> {
}; // ParmVarDecl internal_fields_deserializer
struct _ast8095
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8087>, _str936>, _ast6816>>>> {
}; // ParmVarDecl microtask_queue
struct _ast8096
    : FunctionProtoType<
          _ast8097,
          Pack<_ast184, _ast8071, _ast8091, _ast8093, _ast7210, _ast6816>,
          UnqualifiedType> {
}; // FunctionProtoType Local<v8::Context> (v8::Isolate *,
   // v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>,
   // MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback,
   // v8::MicrotaskQueue *)
struct _ast8098
    : DeclContext<
          Pack<_ast8099, _ast8100, _ast8101, _ast8102, _ast8103, _ast8105>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3>, _str794>, _ast8106>>,
          Pack<_ast8099, _ast8100, _ast8101, _ast8102, _ast8103, _ast8105>>> {
}; // CXXMethodDecl FromSnapshot
struct _ast8099
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8098>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8100
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8098>, _str1301>, _ast3254>>>> {
}; // ParmVarDecl context_snapshot_index
struct _ast8101
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8098>, _str1302>, _ast7210>>>> {
}; // ParmVarDecl embedder_fields_deserializer
struct _ast8102
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8098>, _str1297>, _ast8071>>>> {
}; // ParmVarDecl extensions
struct _ast8103
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8098>, _str1299>, _ast8104>>>> {
}; // ParmVarDecl global_object
struct _ast8105
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8098>, _str936>, _ast6816>>>> {
}; // ParmVarDecl microtask_queue
struct _ast8106
    : FunctionProtoType<
          _ast8107,
          Pack<_ast184, _ast3254, _ast7210, _ast8071, _ast8104, _ast6816>,
          UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Context> (v8::Isolate *, size_t,
   // v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *,
   // MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _ast8108
    : DeclContext<Pack<_ast8109, _ast8110, _ast8112>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast3>, _str1303>, _ast8114>>,
          Pack<_ast8109, _ast8110, _ast8112>>> {
}; // CXXMethodDecl NewRemoteContext
struct _ast8109
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8108>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8110
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8108>, _str1298>, _ast8111>>>> {
}; // ParmVarDecl global_template
struct _ast8112
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8108>, _str1299>, _ast8113>>>> {
}; // ParmVarDecl global_object
struct _ast8114 : FunctionProtoType<_ast8115,
                                    Pack<_ast184, _ast8111, _ast8113>,
                                    UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *,
   // Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ast8116
    : DeclContext<Pack<_ast8117>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1305>, _ast8119>>,
              Pack<_ast8117>>>,
          _ast8085> {}; // CXXMethodDecl SetSecurityToken
struct _ast8117
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8116>, _str1304>, _ast8118>>>> {
}; // ParmVarDecl token
struct _ast8119 : FunctionProtoType<_ast114, Pack<_ast8118>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Value>)
struct _ast8120
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1306>, _ast113>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl UseDefaultSecurityToken
struct _ast8121
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1307>, _ast8122>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl GetSecurityToken
struct _ast8122 : FunctionProtoType<_ast8123, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> ()
struct _ast8124
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1094>, _ast113>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl Enter
struct _ast8125
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1095>, _ast113>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl Exit
struct _ast8126
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str125>, _ast4822>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl GetIsolate
struct _ast8129
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1308>, _ast3358>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl GetNumberOfEmbedderDataFields
struct _ast8130
    : DeclContext<Pack<_ast8131>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1309>, _ast8132>>,
              Pack<_ast8131>>>,
          _ast8085> {}; // CXXMethodDecl GetEmbedderData
struct _ast8131
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8130>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8132 : FunctionProtoType<_ast8133, Pack<_ast1901>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Value> (int)
struct _ast8134
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1310>, _ast8135>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl GetExtrasBindingObject
struct _ast8135 : FunctionProtoType<_ast8136, Pack<>, UnqualifiedType> {
}; // FunctionProtoType Local<v8::Object> ()
struct _ast8137
    : DeclContext<Pack<_ast8138, _ast8139>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1311>, _ast8141>>,
              Pack<_ast8138, _ast8139>>>,
          _ast8085> {}; // CXXMethodDecl SetEmbedderData
struct _ast8138
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8137>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8139
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8137>, _str153>, _ast8140>>>> {
}; // ParmVarDecl value
struct _ast8141
    : FunctionProtoType<_ast114, Pack<_ast1901, _ast8140>, UnqualifiedType> {
}; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast8142
    : DeclContext<Pack<_ast8143>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1312>, _ast4698>>,
              Pack<_ast8143>>>,
          _ast8085> {}; // CXXMethodDecl GetAlignedPointerFromEmbedderData
struct _ast8143
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8142>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8144
    : DeclContext<Pack<_ast8145, _ast8146>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1313>, _ast4716>>,
              Pack<_ast8145, _ast8146>>>,
          _ast8085> {}; // CXXMethodDecl SetAlignedPointerInEmbedderData
struct _ast8145
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8144>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8146
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8144>, _str153>, _ast2223>>>> {
}; // ParmVarDecl value
struct _ast8147
    : DeclContext<Pack<_ast8148>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1314>, _ast3633>>,
              Pack<_ast8148>>>,
          _ast8085> {}; // CXXMethodDecl AllowCodeGenerationFromStrings
struct _ast8148
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8147>, _str1210>, _ast129>>>> {
}; // ParmVarDecl allow
struct _ast8149
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1315>, _ast3256>>,
              Pack<>>>,
          _ast8085> {}; // CXXMethodDecl IsCodeGenerationFromStringsAllowed
struct _ast8150
    : DeclContext<Pack<_ast8151>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1316>, _ast8153>>,
              Pack<_ast8151>>>,
          _ast8085> {
}; // CXXMethodDecl SetErrorMessageForCodeGenerationFromStrings
struct _ast8151
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8150>, _str336>, _ast8152>>>> {
}; // ParmVarDecl message
struct _ast8153 : FunctionProtoType<_ast114, Pack<_ast8152>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::String>)
struct _ast8156
    : DeclContext<Pack<_ast8157>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1102>, _ast8158>>,
              Pack<_ast8157>>>,
          _ast8085> {}; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast8157
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8156>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast8158 : FunctionProtoType<_ast8159, Pack<_ast3254>, UnqualifiedType> {
}; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast8160
    : TypedefDecl<TypedefNameDecl<
          TypeDecl<NamedDeclName<Decl<_ast3>, _str1317>, _ast8161>>> {
}; // TypedefDecl AbortScriptExecutionCallback
struct _ast8161 : TypedefType<_ast8160> {
}; // TypedefType v8::Context::AbortScriptExecutionCallback
struct _ast8162
    : DeclContext<Pack<_ast8163>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast3>, _str1318>, _ast8164>>,
              Pack<_ast8163>>>,
          _ast8085> {}; // CXXMethodDecl SetAbortScriptExecution
struct _ast8163
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8162>, _str80>, _ast8161>>>> {
}; // ParmVarDecl callback
struct _ast8164 : FunctionProtoType<_ast114, Pack<_ast8161>, UnqualifiedType> {
}; // FunctionProtoType void (v8::Context::AbortScriptExecutionCallback)
struct _ast8165
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3>, _str1068>, _ast8166>,
                     Pack<_ast8167>>,
          Pack<>>,
      DeclContext<Pack<_ast8169, _ast8170, _ast8175, _ast8167>> {
}; // CXXRecordDecl Scope
struct _ast8166 : StructOrClassRecordType<RecordType<_ast8165>> {
}; // RecordType v8::Context::Scope
struct _ast8167
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8165>, _str1319>, _ast8168>>> {
}; // FieldDecl context_
struct _ast8169
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8165>, _str1068>,
                                        _ast8166>,
                               None>,
                    None> {}; // CXXRecordDecl Scope
struct _ast8170
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8165>, _str1068>, _ast8173>>,
              Pack<_ast8171>>>,
          _ast8174>>,
      DeclContext<Pack<_ast8171>> {}; // CXXConstructorDecl Scope
struct _ast8171
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8170>, _str229>, _ast8172>>>> {
}; // ParmVarDecl context
struct _ast8173 : FunctionProtoType<_ast114, Pack<_ast8172>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Context>)
struct _ast8174 : PointerType<_ast8166> {}; // PointerType v8::Context::Scope *
struct _ast8175
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8165>, _str1069>, _ast214>>,
              Pack<>>>,
          _ast8174>> {}; // CXXDestructorDecl ~Scope
struct _ast8176
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast3>, _str1320>, _ast8177>,
                     Pack<_ast8178, _ast8180, _ast8181>>,
          Pack<>>,
      DeclContext<Pack<_ast8184,
                       _ast8185,
                       _ast8190,
                       _ast8192,
                       _ast8178,
                       _ast8180,
                       _ast8181>> {}; // CXXRecordDecl BackupIncumbentScope
struct _ast8177 : StructOrClassRecordType<RecordType<_ast8176>> {
}; // RecordType v8::Context::BackupIncumbentScope
struct _ast8178
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8176>, _str1321>, _ast8179>>> {
}; // FieldDecl backup_incumbent_context_
struct _ast8180
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8176>, _str1275>, _ast7713>>> {
}; // FieldDecl js_stack_comparable_address_
struct _ast8181
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8176>, _str1322>, _ast8182>>> {
}; // FieldDecl prev_
struct _ast8182 : PointerType<_ast8183> {
}; // PointerType const v8::Context::BackupIncumbentScope *
struct _ast8183 : ConstQualifiedType<_ast8177> {
}; // RecordType const v8::Context::BackupIncumbentScope
struct _ast8184
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8176>, _str1320>,
                                        _ast8177>,
                               None>,
                    None> {}; // CXXRecordDecl BackupIncumbentScope
struct _ast8185
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8176>, _str1320>, _ast8188>>,
              Pack<_ast8186>>>,
          _ast8189>>,
      DeclContext<Pack<_ast8186>> {}; // CXXConstructorDecl BackupIncumbentScope
struct _ast8186
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8185>, _str1323>, _ast8187>>>> {
}; // ParmVarDecl backup_incumbent_context
struct _ast8188 : FunctionProtoType<_ast114, Pack<_ast8187>, UnqualifiedType> {
}; // FunctionProtoType void (Local<v8::Context>)
struct _ast8189 : PointerType<_ast8177> {
}; // PointerType v8::Context::BackupIncumbentScope *
struct _ast8190
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8176>, _str1324>, _ast8191>>,
              Pack<>>>,
          _ast8189>> {}; // CXXDestructorDecl ~BackupIncumbentScope
struct _ast8191 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast8192
    : InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8176>, _str1289>, _ast8193>>,
              Pack<>>>,
          _ast8182> {}; // CXXMethodDecl JSStackComparableAddress
struct _ast8193 : FunctionProtoType<_ast7713, Pack<>, ConstQualifiedType> {
}; // FunctionProtoType uintptr_t () const
struct _ast8194
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1325>, _ast8195>,
                     Pack<_ast8196>>,
          Pack<>>,
      DeclContext<Pack<_ast8197, _ast8198, _ast8201, _ast8196>> {
}; // CXXRecordDecl Unlocker
struct _ast8195 : StructOrClassRecordType<RecordType<_ast8194>> {
}; // RecordType v8::Unlocker
struct _ast8196
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8194>, _str118>, _ast2868>>> {
}; // FieldDecl isolate_
struct _ast8197
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8194>, _str1325>,
                                        _ast8195>,
                               None>,
                    None> {}; // CXXRecordDecl Unlocker
struct _ast8198
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8194>, _str1325>, _ast2846>>,
              Pack<_ast8199>>>,
          _ast8200>>,
      DeclContext<Pack<_ast8199>> {}; // CXXConstructorDecl Unlocker
struct _ast8199
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8198>, _str60>, _ast184>>>> {
};                                          // ParmVarDecl isolate
struct _ast8200 : PointerType<_ast8195> {}; // PointerType v8::Unlocker *
struct _ast8201
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8194>, _str1326>, _ast8202>>,
              Pack<>>>,
          _ast8200>> {}; // CXXDestructorDecl ~Unlocker
struct _ast8202 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast8203
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1327>, _ast8204>,
                     Pack<_ast8205, _ast8206, _ast8207>>,
          Pack<>>,
      DeclContext<Pack<_ast8208,
                       _ast8209,
                       _ast8212,
                       _ast8214,
                       _ast8216,
                       _ast8217,
                       _ast8222,
                       _ast8205,
                       _ast8206,
                       _ast8207>> {}; // CXXRecordDecl Locker
struct _ast8204 : StructOrClassRecordType<RecordType<_ast8203>> {
}; // RecordType v8::Locker
struct _ast8205
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8203>, _str1328>, _ast129>>> {
}; // FieldDecl has_lock_
struct _ast8206
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8203>, _str1329>, _ast129>>> {
}; // FieldDecl top_level_
struct _ast8207
    : FieldDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8203>, _str118>, _ast2868>>> {
}; // FieldDecl isolate_
struct _ast8208
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8203>, _str1327>,
                                        _ast8204>,
                               None>,
                    None> {}; // CXXRecordDecl Locker
struct _ast8209
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8203>, _str1327>, _ast2846>>,
              Pack<_ast8210>>>,
          _ast8211>>,
      DeclContext<Pack<_ast8210>> {}; // CXXConstructorDecl Locker
struct _ast8210
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8209>, _str60>, _ast184>>>> {
};                                          // ParmVarDecl isolate
struct _ast8211 : PointerType<_ast8204> {}; // PointerType v8::Locker *
struct _ast8212
    : CXXDestructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8203>, _str1330>, _ast8213>>,
              Pack<>>>,
          _ast8211>> {}; // CXXDestructorDecl ~Locker
struct _ast8213 : FunctionProtoType<_ast114, Pack<>, UnqualifiedType> {
}; // FunctionProtoType void ()
struct _ast8214
    : DeclContext<Pack<_ast8215>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast8203>, _str1331>, _ast6881>>,
          Pack<_ast8215>>> {}; // CXXMethodDecl IsLocked
struct _ast8215
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8214>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8216
    : MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast8203>, _str1332>, _ast3256>>,
          Pack<>>> {}; // CXXMethodDecl IsActive
struct _ast8217
    : CXXConstructorDecl<InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8203>, _str1327>, _ast8221>>,
              Pack<_ast8218>>>,
          _ast8211>>,
      DeclContext<Pack<_ast8218>> {}; // CXXConstructorDecl Locker
struct _ast8218
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast8217>, _str62>, _ast8219>>>> {
}; // ParmVarDecl
struct _ast8219 : LValueReferenceType<ReferenceType<_ast8220>> {
}; // LValueReferenceType const v8::Locker &
struct _ast8220 : ConstQualifiedType<_ast8204> {
}; // RecordType const v8::Locker
struct _ast8221 : FunctionProtoType<_ast114, Pack<_ast8219>, UnqualifiedType> {
}; // FunctionProtoType void (const v8::Locker &)
struct _ast8222
    : DeclContext<Pack<_ast8223>>,
      InstanceMethodDecl<
          MethodDecl<FunctionDecl<
              DeclaratorDecl<
                  ValueDecl<NamedDeclName<Decl<_ast8203>, _str64>, _ast8221>>,
              Pack<_ast8223>>>,
          _ast8211> {}; // CXXMethodDecl operator=
struct _ast8223
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclAnon<Decl<_ast8222>, _str62>, _ast8219>>>> {
}; // ParmVarDecl
struct _ast8224
    : CXXRecordDecl<
          RecordDecl<TypeDecl<NamedDeclName<Decl<_ast1>, _str1333>, _ast8225>,
                     Pack<>>,
          Pack<>>,
      DeclContext<Pack<_ast8226, _ast8227, _ast8234>> {
}; // CXXRecordDecl Unwinder
struct _ast8225 : StructOrClassRecordType<RecordType<_ast8224>> {
}; // RecordType v8::Unwinder
struct _ast8226
    : CXXRecordDecl<RecordDecl<TypeDecl<NamedDeclName<Decl<_ast8224>, _str1333>,
                                        _ast8225>,
                               None>,
                    None> {}; // CXXRecordDecl Unwinder
struct _ast8227
    : DeclContext<Pack<_ast8228, _ast8231, _ast8232>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast8224>, _str1337>, _ast8233>>,
          Pack<_ast8228, _ast8231, _ast8232>>> {
}; // CXXMethodDecl TryUnwindV8Frames
struct _ast8228
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8227>, _str1334>, _ast8229>>>> {
}; // ParmVarDecl unwind_state
struct _ast8229 : LValueReferenceType<ReferenceType<_ast8230>> {
}; // LValueReferenceType const v8::UnwindState &
struct _ast8230 : ConstQualifiedType<_ast3532> {
}; // RecordType const v8::UnwindState
struct _ast8231
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8227>, _str1335>, _ast3512>>>> {
}; // ParmVarDecl register_state
struct _ast8232
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8227>, _str1336>, _ast3523>>>> {
}; // ParmVarDecl stack_base
struct _ast8233 : FunctionProtoType<_ast129,
                                    Pack<_ast8229, _ast3512, _ast3523>,
                                    UnqualifiedType> {
}; // FunctionProtoType bool (const v8::UnwindState &, v8::RegisterState *,
   // const void *)
struct _ast8234
    : DeclContext<Pack<_ast8235, _ast8236>>,
      MethodDecl<FunctionDecl<
          DeclaratorDecl<
              ValueDecl<NamedDeclName<Decl<_ast8224>, _str1338>, _ast8237>>,
          Pack<_ast8235, _ast8236>>> {}; // CXXMethodDecl PCIsInV8
struct _ast8235
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8234>, _str1334>, _ast8229>>>> {
}; // ParmVarDecl unwind_state
struct _ast8236
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8234>, _str308>, _ast2223>>>> {
}; // ParmVarDecl pc
struct _ast8237
    : FunctionProtoType<_ast129, Pack<_ast8229, _ast2223>, UnqualifiedType> {
}; // FunctionProtoType bool (const v8::UnwindState &, void *)
struct _ast8238
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2353>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8239
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2353>, _str51>, _ast8240>>>> {
}; // ParmVarDecl that
struct _ast8241
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2359>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8242
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2359>, _str51>, _ast8243>>>> {
}; // ParmVarDecl that
struct _ast8243 : LValueReferenceType<ReferenceType<_ast8244>> {
}; // LValueReferenceType const PersistentBase<T> &
struct _ast8244 : ConstQualifiedType<_ast8245> {
}; // TemplateSpecializationType const PersistentBase<T>
struct _ast8246
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2367>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8247
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2367>, _str51>, _ast8248>>>> {
}; // ParmVarDecl that
struct _ast8248 : LValueReferenceType<ReferenceType<_ast8249>> {
}; // LValueReferenceType const TracedGlobal<T> &
struct _ast8249 : ConstQualifiedType<_ast8250> {
}; // TemplateSpecializationType const TracedGlobal<T>
struct _ast8252
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2429>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8253
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2429>, _str113>, _ast8254>>>> {
}; // ParmVarDecl handle
struct _ast8255
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2420>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8256
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2466>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8258
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2509>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8259
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2509>, _str76>, _ast8260>>>> {
}; // ParmVarDecl other
struct _ast8260 : LValueReferenceType<ReferenceType<_ast8261>> {
}; // LValueReferenceType const Local<S> &
struct _ast8261 : ConstQualifiedType<_ast8262> {
}; // TemplateSpecializationType const Local<S>
struct _ast8264
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2518>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8265
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2518>, _str76>, _ast8266>>>> {
}; // ParmVarDecl other
struct _ast8266 : LValueReferenceType<ReferenceType<_ast8267>> {
}; // LValueReferenceType const PersistentBase<S> &
struct _ast8267 : ConstQualifiedType<_ast8268> {
}; // TemplateSpecializationType const PersistentBase<S>
struct _ast8270
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2567>, _str79>, _ast8271>>>> {
};                                          // ParmVarDecl parameter
struct _ast8271 : PointerType<_ast8272> {}; // PointerType P *
struct _ast8273
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2567>, _str80>, _ast8274>>>> {
}; // ParmVarDecl callback
struct _ast8275
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2567>, _str81>, _ast1900>>>> {
}; // ParmVarDecl type
struct _ast8277
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2583>, _str84>, _ast1914>>>> {
}; // ParmVarDecl label
struct _ast8278
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2586>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast8279
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2722>, _str76>, _ast2724>>>> {
}; // ParmVarDecl other
struct _ast8281
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2729>, _str95>, _ast8282>>>> {
}; // ParmVarDecl rhs
struct _ast8282 : RValueReferenceType<ReferenceType<_ast8283>> {
}; // RValueReferenceType Global<S> &&
struct _ast8285
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2786>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8286
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2786>, _str76>, _ast8287>>>> {
}; // ParmVarDecl other
struct _ast8287 : LValueReferenceType<ReferenceType<_ast8288>> {
}; // LValueReferenceType const Local<S> &
struct _ast8288 : ConstQualifiedType<_ast8289> {
}; // TemplateSpecializationType const Local<S>
struct _ast8290
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2762>, _str76>, _ast2764>>>> {
}; // ParmVarDecl other
struct _ast8292
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2768>, _str95>, _ast8293>>>> {
}; // ParmVarDecl rhs
struct _ast8293 : RValueReferenceType<ReferenceType<_ast8294>> {
}; // RValueReferenceType TracedGlobal<S> &&
struct _ast8295
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2835>, _str87>, _ast1921>>>> {
}; // ParmVarDecl class_id
struct _ast8296
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2838>, _str79>, _ast2223>>>> {
}; // ParmVarDecl parameter
struct _ast8297
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast2838>, _str80>, _ast8298>>>> {
}; // ParmVarDecl callback
struct _ast8300
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4970>, _str113>, _ast8301>>>> {
}; // ParmVarDecl handle
struct _ast8301 : LValueReferenceType<ReferenceType<_ast8302>> {
}; // LValueReferenceType const Global<S> &
struct _ast8302 : ConstQualifiedType<_ast8303> {
}; // TemplateSpecializationType const Global<S>
struct _ast8305
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4978>, _str113>, _ast8306>>>> {
}; // ParmVarDecl handle
struct _ast8306 : LValueReferenceType<ReferenceType<_ast8307>> {
}; // LValueReferenceType const TracedGlobal<S> &
struct _ast8307 : ConstQualifiedType<_ast8308> {
}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast8310
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4986>, _str113>, _ast8311>>>> {
}; // ParmVarDecl handle
struct _ast8311 : ConstQualifiedType<_ast8312> {
}; // TemplateSpecializationType const Local<S>
struct _ast8313
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4993>, _str224>, _ast3643>>>> {
}; // ParmVarDecl i
struct _ast8314
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4995>, _str224>, _ast4286>>>> {
}; // ParmVarDecl i
struct _ast8315
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4998>, _str224>, _ast3359>>>> {
}; // ParmVarDecl i
struct _ast8316
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4991>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast8318
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5008>, _str605>, _ast8319>>>> {
};                                          // ParmVarDecl whatever
struct _ast8319 : PointerType<_ast8320> {}; // PointerType S *
struct _ast8321
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5049>, _str619>, _ast2873>>>> {
}; // ParmVarDecl implicit_args
struct _ast8322
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5049>, _str573>, _ast2873>>>> {
}; // ParmVarDecl values
struct _ast8323
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5049>, _str165>, _ast1901>>>> {
}; // ParmVarDecl length
struct _ast8324
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5021>, _str224>, _ast1901>>>> {
}; // ParmVarDecl i
struct _ast8325
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str189>, _ast8326>>>> {
}; // ParmVarDecl resource_name
struct _ast8327
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str190>, _ast8328>>>> {
}; // ParmVarDecl resource_line_offset
struct _ast8329
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str191>, _ast8330>>>> {
}; // ParmVarDecl resource_column_offset
struct _ast8331
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str192>, _ast8332>>>> {
}; // ParmVarDecl resource_is_shared_cross_origin
struct _ast8333
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str193>, _ast8334>>>> {
}; // ParmVarDecl script_id
struct _ast8335
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str194>, _ast8336>>>> {
}; // ParmVarDecl source_map_url
struct _ast8337
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str195>, _ast8338>>>> {
}; // ParmVarDecl resource_is_opaque
struct _ast8339
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str172>, _ast8340>>>> {
}; // ParmVarDecl is_wasm
struct _ast8341
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str173>, _ast8342>>>> {
}; // ParmVarDecl is_module
struct _ast8343
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3006>, _str196>, _ast8344>>>> {
}; // ParmVarDecl host_defined_options
struct _ast8345
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3216>, _str1019>, _ast8346>>>> {
}; // ParmVarDecl string
struct _ast8347
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3216>, _str234>, _ast3053>>>> {
}; // ParmVarDecl origin
struct _ast8348
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3216>, _str130>, _ast3183>>>> {
}; // ParmVarDecl data
struct _ast8349
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3223>, _str1019>, _ast8350>>>> {
}; // ParmVarDecl string
struct _ast8351
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3223>, _str130>, _ast3183>>>> {
}; // ParmVarDecl data
struct _ast8352
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3929>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8353
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3929>, _str153>, _ast129>>>> {
}; // ParmVarDecl value
struct _ast8354
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6154>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8355
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6154>, _str500>, _ast1914>>>> {
}; // ParmVarDecl name
struct _ast8356
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6154>, _str153>, _ast8357>>>> {
}; // ParmVarDecl value
struct _ast8358
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6325>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast8359
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6532>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast8360
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6542>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast8361
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6553>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast8362
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4687>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8363
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4696>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8364
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4068>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8365
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3988>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8366
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4059>, _str478>, _ast8367>>>> {
};                                          // ParmVarDecl encoding_out
struct _ast8367 : PointerType<_ast8368> {}; // PointerType String::Encoding *
struct _ast8370
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3901>, _str153>, _ast8371>>>> {
};                                          // ParmVarDecl value
struct _ast8371 : PointerType<_ast8372> {}; // PointerType T *
struct _ast8373
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3923>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8374
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast3937>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8375
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4241>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8376
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4263>, _str130>, _ast4265>>>> {
}; // ParmVarDecl data
struct _ast8377
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4278>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8378
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4299>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8379
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4308>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8380
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4316>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8381
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4356>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8382
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6006>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8383
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6063>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8384
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6079>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8385
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6019>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8386
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6034>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8387
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6047>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8388
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6111>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8389
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4844>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8390
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4864>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8391
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4914>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8392
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast4954>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8393
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5236>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8394
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5314>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8395
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5465>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8396
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5201>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8397
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5631>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8398
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5654>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8399
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5667>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8400
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5688>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8401
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5732>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8402
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5754>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8403
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5776>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8404
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5798>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8405
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5820>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8406
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5842>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8407
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5864>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8408
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5886>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8409
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5908>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8410
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5710>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8411
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5930>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8412
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5992>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8413
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast5165>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8414
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6121>, _str153>, _ast3925>>>> {
}; // ParmVarDecl value
struct _ast8415
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6608>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8416
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6613>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8417
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6618>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8418
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast6623>, _str60>, _ast184>>>> {
}; // ParmVarDecl isolate
struct _ast8419
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7489>, _str1098>, _ast3359>>>> {
}; // ParmVarDecl slot
struct _ast8420
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7489>, _str130>, _ast2223>>>> {
}; // ParmVarDecl data
struct _ast8421
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7493>, _str1098>, _ast3359>>>> {
}; // ParmVarDecl slot
struct _ast8423
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7499>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast8424
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7529>, _str1118>, _ast4296>>>> {
}; // ParmVarDecl change_in_bytes
struct _ast8425
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8130>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8426
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8142>, _str127>, _ast1901>>>> {
}; // ParmVarDecl index
struct _ast8428
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast8156>, _str127>, _ast3254>>>> {
}; // ParmVarDecl index
struct _ast8430
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7925>, _str229>, _ast8431>>>> {
}; // ParmVarDecl context
struct _ast8432
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7925>, _str338>, _ast8433>>>> {
}; // ParmVarDecl object
struct _ast8435
    : ParmVar<VarDecl<DeclaratorDecl<
          ValueDecl<NamedDeclName<Decl<_ast7933>, _str338>, _ast8436>>>> {
}; // ParmVarDecl object

#include "emit.h"
int main() {
  emit<_ast1>();   // NamespaceDecl v8
  emit<_ast2>();   // TranslationUnitDecl
  emit<_ast3>();   // CXXRecordDecl Context
  emit<_ast4>();   // RecordType v8::Context
  emit<_ast5>();   // CXXRecordDecl Data
  emit<_ast6>();   // RecordType v8::Data
  emit<_ast7>();   // CXXRecordDecl Isolate
  emit<_ast8>();   // RecordType v8::Isolate
  emit<_ast9>();   // CXXRecordDecl AccessorSignature
  emit<_ast10>();  // RecordType v8::AccessorSignature
  emit<_ast11>();  // CXXRecordDecl Array
  emit<_ast12>();  // RecordType v8::Array
  emit<_ast13>();  // CXXRecordDecl ArrayBuffer
  emit<_ast14>();  // RecordType v8::ArrayBuffer
  emit<_ast15>();  // CXXRecordDecl BigInt
  emit<_ast16>();  // RecordType v8::BigInt
  emit<_ast17>();  // CXXRecordDecl BigIntObject
  emit<_ast18>();  // RecordType v8::BigIntObject
  emit<_ast19>();  // CXXRecordDecl Boolean
  emit<_ast20>();  // RecordType v8::Boolean
  emit<_ast21>();  // CXXRecordDecl BooleanObject
  emit<_ast22>();  // RecordType v8::BooleanObject
  emit<_ast23>();  // CXXRecordDecl Date
  emit<_ast24>();  // RecordType v8::Date
  emit<_ast25>();  // CXXRecordDecl External
  emit<_ast26>();  // RecordType v8::External
  emit<_ast27>();  // CXXRecordDecl Function
  emit<_ast28>();  // RecordType v8::Function
  emit<_ast29>();  // CXXRecordDecl FunctionTemplate
  emit<_ast30>();  // RecordType v8::FunctionTemplate
  emit<_ast31>();  // CXXRecordDecl HeapProfiler
  emit<_ast32>();  // RecordType v8::HeapProfiler
  emit<_ast33>();  // CXXRecordDecl ImplementationUtilities
  emit<_ast34>();  // RecordType v8::ImplementationUtilities
  emit<_ast35>();  // CXXRecordDecl Int32
  emit<_ast36>();  // RecordType v8::Int32
  emit<_ast37>();  // CXXRecordDecl Integer
  emit<_ast38>();  // RecordType v8::Integer
  emit<_ast41>();  // CXXRecordDecl Maybe
  emit<_ast49>();  // CXXRecordDecl MicrotaskQueue
  emit<_ast50>();  // RecordType v8::MicrotaskQueue
  emit<_ast51>();  // CXXRecordDecl Name
  emit<_ast52>();  // RecordType v8::Name
  emit<_ast53>();  // CXXRecordDecl Number
  emit<_ast54>();  // RecordType v8::Number
  emit<_ast55>();  // CXXRecordDecl NumberObject
  emit<_ast56>();  // RecordType v8::NumberObject
  emit<_ast57>();  // CXXRecordDecl Object
  emit<_ast58>();  // RecordType v8::Object
  emit<_ast59>();  // CXXRecordDecl ObjectOperationDescriptor
  emit<_ast60>();  // RecordType v8::ObjectOperationDescriptor
  emit<_ast61>();  // CXXRecordDecl ObjectTemplate
  emit<_ast62>();  // RecordType v8::ObjectTemplate
  emit<_ast63>();  // CXXRecordDecl Platform
  emit<_ast64>();  // RecordType v8::Platform
  emit<_ast65>();  // CXXRecordDecl Primitive
  emit<_ast66>();  // RecordType v8::Primitive
  emit<_ast67>();  // CXXRecordDecl Promise
  emit<_ast68>();  // RecordType v8::Promise
  emit<_ast69>();  // CXXRecordDecl PropertyDescriptor
  emit<_ast70>();  // RecordType v8::PropertyDescriptor
  emit<_ast71>();  // CXXRecordDecl Proxy
  emit<_ast72>();  // RecordType v8::Proxy
  emit<_ast73>();  // CXXRecordDecl RawOperationDescriptor
  emit<_ast74>();  // RecordType v8::RawOperationDescriptor
  emit<_ast75>();  // CXXRecordDecl Script
  emit<_ast76>();  // RecordType v8::Script
  emit<_ast77>();  // CXXRecordDecl SharedArrayBuffer
  emit<_ast78>();  // RecordType v8::SharedArrayBuffer
  emit<_ast79>();  // CXXRecordDecl Signature
  emit<_ast80>();  // RecordType v8::Signature
  emit<_ast81>();  // CXXRecordDecl StartupData
  emit<_ast82>();  // RecordType v8::StartupData
  emit<_ast83>();  // CXXRecordDecl StackFrame
  emit<_ast84>();  // RecordType v8::StackFrame
  emit<_ast85>();  // CXXRecordDecl StackTrace
  emit<_ast86>();  // RecordType v8::StackTrace
  emit<_ast87>();  // CXXRecordDecl String
  emit<_ast88>();  // RecordType v8::String
  emit<_ast89>();  // CXXRecordDecl StringObject
  emit<_ast90>();  // RecordType v8::StringObject
  emit<_ast91>();  // CXXRecordDecl Symbol
  emit<_ast92>();  // RecordType v8::Symbol
  emit<_ast93>();  // CXXRecordDecl SymbolObject
  emit<_ast94>();  // RecordType v8::SymbolObject
  emit<_ast95>();  // CXXRecordDecl PrimitiveArray
  emit<_ast96>();  // RecordType v8::PrimitiveArray
  emit<_ast97>();  // CXXRecordDecl Private
  emit<_ast98>();  // RecordType v8::Private
  emit<_ast99>();  // CXXRecordDecl Uint32
  emit<_ast100>(); // RecordType v8::Uint32
  emit<_ast101>(); // CXXRecordDecl Utils
  emit<_ast102>(); // RecordType v8::Utils
  emit<_ast103>(); // CXXRecordDecl Value
  emit<_ast104>(); // RecordType v8::Value
  emit<_ast105>(); // CXXRecordDecl WasmModuleObject
  emit<_ast106>(); // RecordType v8::WasmModuleObject
  emit<_ast109>(); // CXXRecordDecl Local
  emit<_ast111>(); // ClassTemplateSpecializationDecl Local
  emit<_ast112>(); // CXXConstructorDecl Local
  emit<_ast113>(); // FunctionProtoType void ()
  emit<_ast114>(); // BuiltinType void
  emit<_ast115>(); // PointerType v8::Local<v8::Primitive> *
  emit<_ast116>(); // RecordType v8::Local<v8::Primitive>
  emit<_ast119>(); // CXXConstructorDecl Local
  emit<_ast120>(); // ParmVarDecl that
  emit<_ast122>(); // FunctionProtoType void (Local<S>)
  emit<_ast123>(); // CXXConstructorDecl Local
  emit<_ast124>(); // ParmVarDecl that
  emit<_ast126>(); // FunctionProtoType void (Local<v8::Primitive>)
  emit<_ast127>(); // CXXMethodDecl IsEmpty
  emit<_ast128>(); // FunctionProtoType bool () const
  emit<_ast129>(); // BuiltinType bool
  emit<_ast130>(); // PointerType const v8::Local<v8::Primitive> *
  emit<_ast131>(); // RecordType const v8::Local<v8::Primitive>
  emit<_ast132>(); // CXXMethodDecl Clear
  emit<_ast133>(); // CXXMethodDecl operator->
  emit<_ast134>(); // FunctionProtoType v8::Primitive *() const
  emit<_ast135>(); // PointerType v8::Primitive *
  emit<_ast137>(); // CXXMethodDecl operator*
  emit<_ast140>(); // CXXMethodDecl operator==
  emit<_ast141>(); // ParmVarDecl that
  emit<_ast142>(); // LValueReferenceType const Local<S> &
  emit<_ast143>(); // TemplateSpecializationType const Local<S>
  emit<_ast145>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast148>(); // CXXMethodDecl operator==
  emit<_ast149>(); // ParmVarDecl that
  emit<_ast150>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast151>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast153>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast156>(); // CXXMethodDecl operator!=
  emit<_ast157>(); // ParmVarDecl that
  emit<_ast158>(); // LValueReferenceType const Local<S> &
  emit<_ast159>(); // TemplateSpecializationType const Local<S>
  emit<_ast161>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast164>(); // CXXMethodDecl operator!=
  emit<_ast165>(); // ParmVarDecl that
  emit<_ast166>(); // LValueReferenceType const Persistent<S> &
  emit<_ast167>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast169>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast172>(); // CXXMethodDecl Cast
  emit<_ast173>(); // ParmVarDecl that
  emit<_ast175>(); // FunctionProtoType Local<v8::Primitive> (Local<S>)
  emit<_ast179>(); // CXXMethodDecl As
  emit<_ast180>(); // FunctionProtoType Local<S> () const
  emit<_ast182>(); // CXXMethodDecl New
  emit<_ast183>(); // ParmVarDecl isolate
  emit<_ast184>(); // PointerType v8::Isolate *
  emit<_ast185>(); // ParmVarDecl that
  emit<_ast187>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *,
                   // Local<v8::Primitive>)
  emit<_ast189>(); // CXXMethodDecl New
  emit<_ast190>(); // ParmVarDecl isolate
  emit<_ast191>(); // ParmVarDecl that
  emit<_ast192>(); // LValueReferenceType const PersistentBase<v8::Primitive> &
  emit<_ast193>(); // TemplateSpecializationType const
                   // PersistentBase<v8::Primitive>
  emit<_ast195>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *,
                   // const PersistentBase<v8::Primitive> &)
  emit<_ast197>(); // CXXMethodDecl New
  emit<_ast198>(); // ParmVarDecl isolate
  emit<_ast199>(); // ParmVarDecl that
  emit<_ast200>(); // LValueReferenceType const TracedGlobal<v8::Primitive> &
  emit<_ast201>(); // TemplateSpecializationType const
                   // TracedGlobal<v8::Primitive>
  emit<_ast203>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *,
                   // const TracedGlobal<v8::Primitive> &)
  emit<_ast205>(); // CXXConstructorDecl Local
  emit<_ast206>(); // ParmVarDecl
  emit<_ast207>(); // LValueReferenceType const v8::Local<v8::Primitive> &
  emit<_ast208>(); // FunctionProtoType void (const v8::Local<v8::Primitive> &)
  emit<_ast209>(); // CXXConstructorDecl Local
  emit<_ast210>(); // ParmVarDecl
  emit<_ast211>(); // RValueReferenceType v8::Local<v8::Primitive> &&
  emit<_ast212>(); // FunctionProtoType void (v8::Local<v8::Primitive> &&)
                   // noexcept
  emit<_ast213>(); // CXXDestructorDecl ~Local
  emit<_ast214>(); // FunctionProtoType void () noexcept
  emit<_ast215>(); // ClassTemplateSpecializationDecl Local
  emit<_ast216>(); // CXXConstructorDecl Local
  emit<_ast217>(); // PointerType v8::Local<v8::Boolean> *
  emit<_ast218>(); // RecordType v8::Local<v8::Boolean>
  emit<_ast221>(); // CXXConstructorDecl Local
  emit<_ast222>(); // ParmVarDecl that
  emit<_ast224>(); // FunctionProtoType void (Local<S>)
  emit<_ast225>(); // CXXConstructorDecl Local
  emit<_ast226>(); // ParmVarDecl that
  emit<_ast228>(); // FunctionProtoType void (Local<v8::Boolean>)
  emit<_ast229>(); // CXXMethodDecl IsEmpty
  emit<_ast230>(); // PointerType const v8::Local<v8::Boolean> *
  emit<_ast231>(); // RecordType const v8::Local<v8::Boolean>
  emit<_ast232>(); // CXXMethodDecl Clear
  emit<_ast233>(); // CXXMethodDecl operator->
  emit<_ast234>(); // FunctionProtoType v8::Boolean *() const
  emit<_ast235>(); // PointerType v8::Boolean *
  emit<_ast237>(); // CXXMethodDecl operator*
  emit<_ast240>(); // CXXMethodDecl operator==
  emit<_ast241>(); // ParmVarDecl that
  emit<_ast242>(); // LValueReferenceType const Local<S> &
  emit<_ast243>(); // TemplateSpecializationType const Local<S>
  emit<_ast245>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast248>(); // CXXMethodDecl operator==
  emit<_ast249>(); // ParmVarDecl that
  emit<_ast250>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast251>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast253>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast256>(); // CXXMethodDecl operator!=
  emit<_ast257>(); // ParmVarDecl that
  emit<_ast258>(); // LValueReferenceType const Local<S> &
  emit<_ast259>(); // TemplateSpecializationType const Local<S>
  emit<_ast261>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast264>(); // CXXMethodDecl operator!=
  emit<_ast265>(); // ParmVarDecl that
  emit<_ast266>(); // LValueReferenceType const Persistent<S> &
  emit<_ast267>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast269>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast272>(); // CXXMethodDecl Cast
  emit<_ast273>(); // ParmVarDecl that
  emit<_ast275>(); // FunctionProtoType Local<v8::Boolean> (Local<S>)
  emit<_ast279>(); // CXXMethodDecl As
  emit<_ast280>(); // FunctionProtoType Local<S> () const
  emit<_ast282>(); // CXXMethodDecl New
  emit<_ast283>(); // ParmVarDecl isolate
  emit<_ast284>(); // ParmVarDecl that
  emit<_ast286>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *,
                   // Local<v8::Boolean>)
  emit<_ast288>(); // CXXMethodDecl New
  emit<_ast289>(); // ParmVarDecl isolate
  emit<_ast290>(); // ParmVarDecl that
  emit<_ast291>(); // LValueReferenceType const PersistentBase<v8::Boolean> &
  emit<_ast292>(); // TemplateSpecializationType const
                   // PersistentBase<v8::Boolean>
  emit<_ast294>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const
                   // PersistentBase<v8::Boolean> &)
  emit<_ast296>(); // CXXMethodDecl New
  emit<_ast297>(); // ParmVarDecl isolate
  emit<_ast298>(); // ParmVarDecl that
  emit<_ast299>(); // LValueReferenceType const TracedGlobal<v8::Boolean> &
  emit<_ast300>(); // TemplateSpecializationType const TracedGlobal<v8::Boolean>
  emit<_ast302>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const
                   // TracedGlobal<v8::Boolean> &)
  emit<_ast304>(); // CXXConstructorDecl Local
  emit<_ast305>(); // ParmVarDecl
  emit<_ast306>(); // LValueReferenceType const v8::Local<v8::Boolean> &
  emit<_ast307>(); // FunctionProtoType void (const v8::Local<v8::Boolean> &)
  emit<_ast308>(); // CXXConstructorDecl Local
  emit<_ast309>(); // ParmVarDecl
  emit<_ast310>(); // RValueReferenceType v8::Local<v8::Boolean> &&
  emit<_ast311>(); // FunctionProtoType void (v8::Local<v8::Boolean> &&)
                   // noexcept
  emit<_ast312>(); // CXXDestructorDecl ~Local
  emit<_ast313>(); // ClassTemplateSpecializationDecl Local
  emit<_ast314>(); // CXXConstructorDecl Local
  emit<_ast315>(); // PointerType v8::Local<v8::Value> *
  emit<_ast316>(); // RecordType v8::Local<v8::Value>
  emit<_ast319>(); // CXXConstructorDecl Local
  emit<_ast320>(); // ParmVarDecl that
  emit<_ast322>(); // FunctionProtoType void (Local<S>)
  emit<_ast323>(); // CXXConstructorDecl Local
  emit<_ast324>(); // ParmVarDecl that
  emit<_ast326>(); // FunctionProtoType void (Local<v8::Value>)
  emit<_ast327>(); // CXXMethodDecl IsEmpty
  emit<_ast328>(); // PointerType const v8::Local<v8::Value> *
  emit<_ast329>(); // RecordType const v8::Local<v8::Value>
  emit<_ast330>(); // CXXMethodDecl Clear
  emit<_ast331>(); // CXXMethodDecl operator->
  emit<_ast332>(); // FunctionProtoType v8::Value *() const
  emit<_ast333>(); // PointerType v8::Value *
  emit<_ast335>(); // CXXMethodDecl operator*
  emit<_ast338>(); // CXXMethodDecl operator==
  emit<_ast339>(); // ParmVarDecl that
  emit<_ast340>(); // LValueReferenceType const Local<S> &
  emit<_ast341>(); // TemplateSpecializationType const Local<S>
  emit<_ast343>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast346>(); // CXXMethodDecl operator==
  emit<_ast347>(); // ParmVarDecl that
  emit<_ast348>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast349>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast351>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast354>(); // CXXMethodDecl operator!=
  emit<_ast355>(); // ParmVarDecl that
  emit<_ast356>(); // LValueReferenceType const Local<S> &
  emit<_ast357>(); // TemplateSpecializationType const Local<S>
  emit<_ast359>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast362>(); // CXXMethodDecl operator!=
  emit<_ast363>(); // ParmVarDecl that
  emit<_ast364>(); // LValueReferenceType const Persistent<S> &
  emit<_ast365>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast367>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast370>(); // CXXMethodDecl Cast
  emit<_ast371>(); // ParmVarDecl that
  emit<_ast373>(); // FunctionProtoType Local<v8::Value> (Local<S>)
  emit<_ast377>(); // CXXMethodDecl As
  emit<_ast378>(); // FunctionProtoType Local<S> () const
  emit<_ast380>(); // CXXMethodDecl New
  emit<_ast381>(); // ParmVarDecl isolate
  emit<_ast382>(); // ParmVarDecl that
  emit<_ast384>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                   // Local<v8::Value>)
  emit<_ast386>(); // CXXMethodDecl New
  emit<_ast387>(); // ParmVarDecl isolate
  emit<_ast388>(); // ParmVarDecl that
  emit<_ast389>(); // LValueReferenceType const PersistentBase<v8::Value> &
  emit<_ast390>(); // TemplateSpecializationType const PersistentBase<v8::Value>
  emit<_ast392>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, const
                   // PersistentBase<v8::Value> &)
  emit<_ast394>(); // CXXMethodDecl New
  emit<_ast395>(); // ParmVarDecl isolate
  emit<_ast396>(); // ParmVarDecl that
  emit<_ast397>(); // LValueReferenceType const TracedGlobal<v8::Value> &
  emit<_ast398>(); // TemplateSpecializationType const TracedGlobal<v8::Value>
  emit<_ast400>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, const
                   // TracedGlobal<v8::Value> &)
  emit<_ast402>(); // CXXConstructorDecl Local
  emit<_ast403>(); // ParmVarDecl
  emit<_ast404>(); // LValueReferenceType const v8::Local<v8::Value> &
  emit<_ast405>(); // FunctionProtoType void (const v8::Local<v8::Value> &)
                   // noexcept
  emit<_ast406>(); // CXXConstructorDecl Local
  emit<_ast407>(); // ParmVarDecl
  emit<_ast408>(); // RValueReferenceType v8::Local<v8::Value> &&
  emit<_ast409>(); // FunctionProtoType void (v8::Local<v8::Value> &&) noexcept
  emit<_ast410>(); // CXXDestructorDecl ~Local
  emit<_ast411>(); // CXXMethodDecl operator=
  emit<_ast412>(); // ParmVarDecl
  emit<_ast413>(); // FunctionProtoType v8::Local<v8::Value> &(const
                   // v8::Local<v8::Value> &)
  emit<_ast414>(); // LValueReferenceType v8::Local<v8::Value> &
  emit<_ast415>(); // CXXMethodDecl operator=
  emit<_ast416>(); // ParmVarDecl
  emit<_ast417>(); // FunctionProtoType v8::Local<v8::Value>
                   // &(v8::Local<v8::Value> &&)
  emit<_ast418>(); // ClassTemplateSpecializationDecl Local
  emit<_ast419>(); // CXXConstructorDecl Local
  emit<_ast420>(); // PointerType v8::Local<v8::PrimitiveArray> *
  emit<_ast421>(); // RecordType v8::Local<v8::PrimitiveArray>
  emit<_ast424>(); // CXXConstructorDecl Local
  emit<_ast425>(); // ParmVarDecl that
  emit<_ast427>(); // FunctionProtoType void (Local<S>)
  emit<_ast428>(); // CXXConstructorDecl Local
  emit<_ast429>(); // ParmVarDecl that
  emit<_ast431>(); // FunctionProtoType void (Local<v8::PrimitiveArray>)
  emit<_ast432>(); // CXXMethodDecl IsEmpty
  emit<_ast433>(); // PointerType const v8::Local<v8::PrimitiveArray> *
  emit<_ast434>(); // RecordType const v8::Local<v8::PrimitiveArray>
  emit<_ast435>(); // CXXMethodDecl Clear
  emit<_ast436>(); // CXXMethodDecl operator->
  emit<_ast437>(); // FunctionProtoType v8::PrimitiveArray *() const
  emit<_ast438>(); // PointerType v8::PrimitiveArray *
  emit<_ast440>(); // CXXMethodDecl operator*
  emit<_ast443>(); // CXXMethodDecl operator==
  emit<_ast444>(); // ParmVarDecl that
  emit<_ast445>(); // LValueReferenceType const Local<S> &
  emit<_ast446>(); // TemplateSpecializationType const Local<S>
  emit<_ast448>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast451>(); // CXXMethodDecl operator==
  emit<_ast452>(); // ParmVarDecl that
  emit<_ast453>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast454>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast456>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast459>(); // CXXMethodDecl operator!=
  emit<_ast460>(); // ParmVarDecl that
  emit<_ast461>(); // LValueReferenceType const Local<S> &
  emit<_ast462>(); // TemplateSpecializationType const Local<S>
  emit<_ast464>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast467>(); // CXXMethodDecl operator!=
  emit<_ast468>(); // ParmVarDecl that
  emit<_ast469>(); // LValueReferenceType const Persistent<S> &
  emit<_ast470>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast472>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast475>(); // CXXMethodDecl Cast
  emit<_ast476>(); // ParmVarDecl that
  emit<_ast478>(); // FunctionProtoType Local<v8::PrimitiveArray> (Local<S>)
  emit<_ast482>(); // CXXMethodDecl As
  emit<_ast483>(); // FunctionProtoType Local<S> () const
  emit<_ast485>(); // CXXMethodDecl New
  emit<_ast486>(); // ParmVarDecl isolate
  emit<_ast487>(); // ParmVarDecl that
  emit<_ast489>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate
                   // *, Local<v8::PrimitiveArray>)
  emit<_ast491>(); // CXXMethodDecl New
  emit<_ast492>(); // ParmVarDecl isolate
  emit<_ast493>(); // ParmVarDecl that
  emit<_ast494>(); // LValueReferenceType const
                   // PersistentBase<v8::PrimitiveArray> &
  emit<_ast495>(); // TemplateSpecializationType const
                   // PersistentBase<v8::PrimitiveArray>
  emit<_ast497>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate
                   // *, const PersistentBase<v8::PrimitiveArray> &)
  emit<_ast499>(); // CXXMethodDecl New
  emit<_ast500>(); // ParmVarDecl isolate
  emit<_ast501>(); // ParmVarDecl that
  emit<_ast502>(); // LValueReferenceType const TracedGlobal<v8::PrimitiveArray>
                   // &
  emit<_ast503>(); // TemplateSpecializationType const
                   // TracedGlobal<v8::PrimitiveArray>
  emit<_ast505>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate
                   // *, const TracedGlobal<v8::PrimitiveArray> &)
  emit<_ast507>(); // CXXConstructorDecl Local
  emit<_ast508>(); // ParmVarDecl
  emit<_ast509>(); // LValueReferenceType const v8::Local<v8::PrimitiveArray> &
  emit<_ast510>(); // FunctionProtoType void (const
                   // v8::Local<v8::PrimitiveArray> &) noexcept
  emit<_ast511>(); // CXXConstructorDecl Local
  emit<_ast512>(); // ParmVarDecl
  emit<_ast513>(); // RValueReferenceType v8::Local<v8::PrimitiveArray> &&
  emit<_ast514>(); // FunctionProtoType void (v8::Local<v8::PrimitiveArray> &&)
                   // noexcept
  emit<_ast515>(); // CXXDestructorDecl ~Local
  emit<_ast516>(); // CXXMethodDecl operator=
  emit<_ast517>(); // ParmVarDecl
  emit<_ast518>(); // FunctionProtoType v8::Local<v8::PrimitiveArray> &(const
                   // v8::Local<v8::PrimitiveArray> &)
  emit<_ast519>(); // LValueReferenceType v8::Local<v8::PrimitiveArray> &
  emit<_ast520>(); // CXXMethodDecl operator=
  emit<_ast521>(); // ParmVarDecl
  emit<_ast522>(); // FunctionProtoType v8::Local<v8::PrimitiveArray>
                   // &(v8::Local<v8::PrimitiveArray> &&)
  emit<_ast523>(); // ClassTemplateSpecializationDecl Local
  emit<_ast524>(); // CXXConstructorDecl Local
  emit<_ast525>(); // PointerType v8::Local<v8::Integer> *
  emit<_ast526>(); // RecordType v8::Local<v8::Integer>
  emit<_ast529>(); // CXXConstructorDecl Local
  emit<_ast530>(); // ParmVarDecl that
  emit<_ast532>(); // FunctionProtoType void (Local<S>)
  emit<_ast533>(); // CXXConstructorDecl Local
  emit<_ast534>(); // ParmVarDecl that
  emit<_ast536>(); // FunctionProtoType void (Local<v8::Integer>)
  emit<_ast537>(); // CXXMethodDecl IsEmpty
  emit<_ast538>(); // PointerType const v8::Local<v8::Integer> *
  emit<_ast539>(); // RecordType const v8::Local<v8::Integer>
  emit<_ast540>(); // CXXMethodDecl Clear
  emit<_ast541>(); // CXXMethodDecl operator->
  emit<_ast542>(); // FunctionProtoType v8::Integer *() const
  emit<_ast543>(); // PointerType v8::Integer *
  emit<_ast545>(); // CXXMethodDecl operator*
  emit<_ast548>(); // CXXMethodDecl operator==
  emit<_ast549>(); // ParmVarDecl that
  emit<_ast550>(); // LValueReferenceType const Local<S> &
  emit<_ast551>(); // TemplateSpecializationType const Local<S>
  emit<_ast553>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast556>(); // CXXMethodDecl operator==
  emit<_ast557>(); // ParmVarDecl that
  emit<_ast558>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast559>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast561>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast564>(); // CXXMethodDecl operator!=
  emit<_ast565>(); // ParmVarDecl that
  emit<_ast566>(); // LValueReferenceType const Local<S> &
  emit<_ast567>(); // TemplateSpecializationType const Local<S>
  emit<_ast569>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast572>(); // CXXMethodDecl operator!=
  emit<_ast573>(); // ParmVarDecl that
  emit<_ast574>(); // LValueReferenceType const Persistent<S> &
  emit<_ast575>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast577>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast580>(); // CXXMethodDecl Cast
  emit<_ast581>(); // ParmVarDecl that
  emit<_ast583>(); // FunctionProtoType Local<v8::Integer> (Local<S>)
  emit<_ast587>(); // CXXMethodDecl As
  emit<_ast588>(); // FunctionProtoType Local<S> () const
  emit<_ast590>(); // CXXMethodDecl New
  emit<_ast591>(); // ParmVarDecl isolate
  emit<_ast592>(); // ParmVarDecl that
  emit<_ast594>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *,
                   // Local<v8::Integer>)
  emit<_ast596>(); // CXXMethodDecl New
  emit<_ast597>(); // ParmVarDecl isolate
  emit<_ast598>(); // ParmVarDecl that
  emit<_ast599>(); // LValueReferenceType const PersistentBase<v8::Integer> &
  emit<_ast600>(); // TemplateSpecializationType const
                   // PersistentBase<v8::Integer>
  emit<_ast602>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const
                   // PersistentBase<v8::Integer> &)
  emit<_ast604>(); // CXXMethodDecl New
  emit<_ast605>(); // ParmVarDecl isolate
  emit<_ast606>(); // ParmVarDecl that
  emit<_ast607>(); // LValueReferenceType const TracedGlobal<v8::Integer> &
  emit<_ast608>(); // TemplateSpecializationType const TracedGlobal<v8::Integer>
  emit<_ast610>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const
                   // TracedGlobal<v8::Integer> &)
  emit<_ast612>(); // CXXConstructorDecl Local
  emit<_ast613>(); // ParmVarDecl
  emit<_ast614>(); // LValueReferenceType const v8::Local<v8::Integer> &
  emit<_ast615>(); // FunctionProtoType void (const v8::Local<v8::Integer> &)
                   // noexcept
  emit<_ast616>(); // CXXConstructorDecl Local
  emit<_ast617>(); // ParmVarDecl
  emit<_ast618>(); // RValueReferenceType v8::Local<v8::Integer> &&
  emit<_ast619>(); // FunctionProtoType void (v8::Local<v8::Integer> &&)
                   // noexcept
  emit<_ast620>(); // CXXDestructorDecl ~Local
  emit<_ast621>(); // CXXMethodDecl operator=
  emit<_ast622>(); // ParmVarDecl
  emit<_ast623>(); // FunctionProtoType v8::Local<v8::Integer> &(const
                   // v8::Local<v8::Integer> &)
  emit<_ast624>(); // LValueReferenceType v8::Local<v8::Integer> &
  emit<_ast625>(); // CXXMethodDecl operator=
  emit<_ast626>(); // ParmVarDecl
  emit<_ast627>(); // FunctionProtoType v8::Local<v8::Integer>
                   // &(v8::Local<v8::Integer> &&)
  emit<_ast629>(); // ClassTemplateSpecializationDecl Local
  emit<_ast630>(); // CXXConstructorDecl Local
  emit<_ast631>(); // PointerType v8::Local<v8::String> *
  emit<_ast632>(); // RecordType v8::Local<v8::String>
  emit<_ast635>(); // CXXConstructorDecl Local
  emit<_ast636>(); // ParmVarDecl that
  emit<_ast638>(); // FunctionProtoType void (Local<S>)
  emit<_ast639>(); // CXXConstructorDecl Local
  emit<_ast640>(); // ParmVarDecl that
  emit<_ast642>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast643>(); // CXXMethodDecl IsEmpty
  emit<_ast644>(); // PointerType const v8::Local<v8::String> *
  emit<_ast645>(); // RecordType const v8::Local<v8::String>
  emit<_ast646>(); // CXXMethodDecl Clear
  emit<_ast647>(); // CXXMethodDecl operator->
  emit<_ast648>(); // FunctionProtoType v8::String *() const
  emit<_ast649>(); // PointerType v8::String *
  emit<_ast651>(); // CXXMethodDecl operator*
  emit<_ast654>(); // CXXMethodDecl operator==
  emit<_ast655>(); // ParmVarDecl that
  emit<_ast656>(); // LValueReferenceType const Local<S> &
  emit<_ast657>(); // TemplateSpecializationType const Local<S>
  emit<_ast659>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast662>(); // CXXMethodDecl operator==
  emit<_ast663>(); // ParmVarDecl that
  emit<_ast664>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast665>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast667>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast670>(); // CXXMethodDecl operator!=
  emit<_ast671>(); // ParmVarDecl that
  emit<_ast672>(); // LValueReferenceType const Local<S> &
  emit<_ast673>(); // TemplateSpecializationType const Local<S>
  emit<_ast675>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast678>(); // CXXMethodDecl operator!=
  emit<_ast679>(); // ParmVarDecl that
  emit<_ast680>(); // LValueReferenceType const Persistent<S> &
  emit<_ast681>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast683>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast686>(); // CXXMethodDecl Cast
  emit<_ast687>(); // ParmVarDecl that
  emit<_ast689>(); // FunctionProtoType Local<v8::String> (Local<S>)
  emit<_ast693>(); // CXXMethodDecl As
  emit<_ast694>(); // FunctionProtoType Local<S> () const
  emit<_ast696>(); // CXXMethodDecl New
  emit<_ast697>(); // ParmVarDecl isolate
  emit<_ast698>(); // ParmVarDecl that
  emit<_ast700>(); // FunctionProtoType Local<v8::String> (v8::Isolate *,
                   // Local<v8::String>)
  emit<_ast702>(); // CXXMethodDecl New
  emit<_ast703>(); // ParmVarDecl isolate
  emit<_ast704>(); // ParmVarDecl that
  emit<_ast705>(); // LValueReferenceType const PersistentBase<v8::String> &
  emit<_ast706>(); // TemplateSpecializationType const
                   // PersistentBase<v8::String>
  emit<_ast708>(); // FunctionProtoType Local<v8::String> (v8::Isolate *, const
                   // PersistentBase<v8::String> &)
  emit<_ast710>(); // CXXMethodDecl New
  emit<_ast711>(); // ParmVarDecl isolate
  emit<_ast712>(); // ParmVarDecl that
  emit<_ast713>(); // LValueReferenceType const TracedGlobal<v8::String> &
  emit<_ast714>(); // TemplateSpecializationType const TracedGlobal<v8::String>
  emit<_ast716>(); // FunctionProtoType Local<v8::String> (v8::Isolate *, const
                   // TracedGlobal<v8::String> &)
  emit<_ast718>(); // CXXConstructorDecl Local
  emit<_ast719>(); // ParmVarDecl
  emit<_ast720>(); // LValueReferenceType const v8::Local<v8::String> &
  emit<_ast721>(); // FunctionProtoType void (const v8::Local<v8::String> &)
                   // noexcept
  emit<_ast722>(); // CXXConstructorDecl Local
  emit<_ast723>(); // ParmVarDecl
  emit<_ast724>(); // RValueReferenceType v8::Local<v8::String> &&
  emit<_ast725>(); // FunctionProtoType void (v8::Local<v8::String> &&) noexcept
  emit<_ast726>(); // CXXMethodDecl operator=
  emit<_ast727>(); // ParmVarDecl
  emit<_ast728>(); // FunctionProtoType v8::Local<v8::String> &(const
                   // v8::Local<v8::String> &)
  emit<_ast729>(); // LValueReferenceType v8::Local<v8::String> &
  emit<_ast730>(); // CXXMethodDecl operator=
  emit<_ast731>(); // ParmVarDecl
  emit<_ast732>(); // FunctionProtoType v8::Local<v8::String>
                   // &(v8::Local<v8::String> &&)
  emit<_ast733>(); // CXXDestructorDecl ~Local
  emit<_ast734>(); // ClassTemplateSpecializationDecl Local
  emit<_ast735>(); // CXXConstructorDecl Local
  emit<_ast736>(); // PointerType v8::Local<v8::Context> *
  emit<_ast737>(); // RecordType v8::Local<v8::Context>
  emit<_ast740>(); // CXXConstructorDecl Local
  emit<_ast741>(); // ParmVarDecl that
  emit<_ast743>(); // FunctionProtoType void (Local<S>)
  emit<_ast744>(); // CXXConstructorDecl Local
  emit<_ast745>(); // ParmVarDecl that
  emit<_ast747>(); // FunctionProtoType void (Local<v8::Context>)
  emit<_ast748>(); // CXXMethodDecl IsEmpty
  emit<_ast749>(); // PointerType const v8::Local<v8::Context> *
  emit<_ast750>(); // RecordType const v8::Local<v8::Context>
  emit<_ast751>(); // CXXMethodDecl Clear
  emit<_ast752>(); // CXXMethodDecl operator->
  emit<_ast753>(); // FunctionProtoType v8::Context *() const
  emit<_ast754>(); // PointerType v8::Context *
  emit<_ast756>(); // CXXMethodDecl operator*
  emit<_ast759>(); // CXXMethodDecl operator==
  emit<_ast760>(); // ParmVarDecl that
  emit<_ast761>(); // LValueReferenceType const Local<S> &
  emit<_ast762>(); // TemplateSpecializationType const Local<S>
  emit<_ast764>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast767>(); // CXXMethodDecl operator==
  emit<_ast768>(); // ParmVarDecl that
  emit<_ast769>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast770>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast772>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast775>(); // CXXMethodDecl operator!=
  emit<_ast776>(); // ParmVarDecl that
  emit<_ast777>(); // LValueReferenceType const Local<S> &
  emit<_ast778>(); // TemplateSpecializationType const Local<S>
  emit<_ast780>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast783>(); // CXXMethodDecl operator!=
  emit<_ast784>(); // ParmVarDecl that
  emit<_ast785>(); // LValueReferenceType const Persistent<S> &
  emit<_ast786>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast788>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast791>(); // CXXMethodDecl Cast
  emit<_ast792>(); // ParmVarDecl that
  emit<_ast794>(); // FunctionProtoType Local<v8::Context> (Local<S>)
  emit<_ast798>(); // CXXMethodDecl As
  emit<_ast799>(); // FunctionProtoType Local<S> () const
  emit<_ast801>(); // CXXMethodDecl New
  emit<_ast802>(); // ParmVarDecl isolate
  emit<_ast803>(); // ParmVarDecl that
  emit<_ast805>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *,
                   // Local<v8::Context>)
  emit<_ast807>(); // CXXMethodDecl New
  emit<_ast808>(); // ParmVarDecl isolate
  emit<_ast809>(); // ParmVarDecl that
  emit<_ast810>(); // LValueReferenceType const PersistentBase<v8::Context> &
  emit<_ast811>(); // TemplateSpecializationType const
                   // PersistentBase<v8::Context>
  emit<_ast813>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *, const
                   // PersistentBase<v8::Context> &)
  emit<_ast815>(); // CXXMethodDecl New
  emit<_ast816>(); // ParmVarDecl isolate
  emit<_ast817>(); // ParmVarDecl that
  emit<_ast818>(); // LValueReferenceType const TracedGlobal<v8::Context> &
  emit<_ast819>(); // TemplateSpecializationType const TracedGlobal<v8::Context>
  emit<_ast821>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *, const
                   // TracedGlobal<v8::Context> &)
  emit<_ast823>(); // CXXDestructorDecl ~Local
  emit<_ast824>(); // CXXConstructorDecl Local
  emit<_ast825>(); // ParmVarDecl
  emit<_ast826>(); // LValueReferenceType const v8::Local<v8::Context> &
  emit<_ast827>(); // FunctionProtoType void (const v8::Local<v8::Context> &)
                   // noexcept
  emit<_ast828>(); // CXXConstructorDecl Local
  emit<_ast829>(); // ParmVarDecl
  emit<_ast830>(); // RValueReferenceType v8::Local<v8::Context> &&
  emit<_ast831>(); // FunctionProtoType void (v8::Local<v8::Context> &&)
                   // noexcept
  emit<_ast834>(); // ClassTemplateSpecializationDecl Local
  emit<_ast835>(); // CXXConstructorDecl Local
  emit<_ast836>(); // PointerType v8::Local<v8::UnboundScript> *
  emit<_ast837>(); // RecordType v8::Local<v8::UnboundScript>
  emit<_ast840>(); // CXXConstructorDecl Local
  emit<_ast841>(); // ParmVarDecl that
  emit<_ast843>(); // FunctionProtoType void (Local<S>)
  emit<_ast844>(); // CXXMethodDecl IsEmpty
  emit<_ast845>(); // PointerType const v8::Local<v8::UnboundScript> *
  emit<_ast846>(); // RecordType const v8::Local<v8::UnboundScript>
  emit<_ast847>(); // CXXMethodDecl Clear
  emit<_ast848>(); // CXXMethodDecl operator->
  emit<_ast849>(); // FunctionProtoType v8::UnboundScript *() const
  emit<_ast850>(); // PointerType v8::UnboundScript *
  emit<_ast852>(); // CXXMethodDecl operator*
  emit<_ast855>(); // CXXMethodDecl operator==
  emit<_ast856>(); // ParmVarDecl that
  emit<_ast857>(); // LValueReferenceType const Local<S> &
  emit<_ast858>(); // TemplateSpecializationType const Local<S>
  emit<_ast860>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast863>(); // CXXMethodDecl operator==
  emit<_ast864>(); // ParmVarDecl that
  emit<_ast865>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast866>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast868>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast871>(); // CXXMethodDecl operator!=
  emit<_ast872>(); // ParmVarDecl that
  emit<_ast873>(); // LValueReferenceType const Local<S> &
  emit<_ast874>(); // TemplateSpecializationType const Local<S>
  emit<_ast876>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast879>(); // CXXMethodDecl operator!=
  emit<_ast880>(); // ParmVarDecl that
  emit<_ast881>(); // LValueReferenceType const Persistent<S> &
  emit<_ast882>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast884>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast887>(); // CXXMethodDecl Cast
  emit<_ast888>(); // ParmVarDecl that
  emit<_ast890>(); // FunctionProtoType Local<v8::UnboundScript> (Local<S>)
  emit<_ast894>(); // CXXMethodDecl As
  emit<_ast895>(); // FunctionProtoType Local<S> () const
  emit<_ast897>(); // CXXMethodDecl New
  emit<_ast898>(); // ParmVarDecl isolate
  emit<_ast899>(); // ParmVarDecl that
  emit<_ast901>(); // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
                   // Local<v8::UnboundScript>)
  emit<_ast903>(); // CXXMethodDecl New
  emit<_ast904>(); // ParmVarDecl isolate
  emit<_ast905>(); // ParmVarDecl that
  emit<_ast906>(); // LValueReferenceType const
                   // PersistentBase<v8::UnboundScript> &
  emit<_ast907>(); // TemplateSpecializationType const
                   // PersistentBase<v8::UnboundScript>
  emit<_ast909>(); // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
                   // const PersistentBase<v8::UnboundScript> &)
  emit<_ast911>(); // CXXMethodDecl New
  emit<_ast912>(); // ParmVarDecl isolate
  emit<_ast913>(); // ParmVarDecl that
  emit<_ast914>(); // LValueReferenceType const TracedGlobal<v8::UnboundScript>
                   // &
  emit<_ast915>(); // TemplateSpecializationType const
                   // TracedGlobal<v8::UnboundScript>
  emit<_ast917>(); // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *,
                   // const TracedGlobal<v8::UnboundScript> &)
  emit<_ast920>(); // ClassTemplateSpecializationDecl Local
  emit<_ast921>(); // CXXConstructorDecl Local
  emit<_ast922>(); // PointerType v8::Local<v8::Function> *
  emit<_ast923>(); // RecordType v8::Local<v8::Function>
  emit<_ast926>(); // CXXConstructorDecl Local
  emit<_ast927>(); // ParmVarDecl that
  emit<_ast929>(); // FunctionProtoType void (Local<S>)
  emit<_ast930>(); // CXXConstructorDecl Local
  emit<_ast931>(); // ParmVarDecl that
  emit<_ast933>(); // FunctionProtoType void (Local<v8::Function>)
  emit<_ast934>(); // CXXMethodDecl IsEmpty
  emit<_ast935>(); // PointerType const v8::Local<v8::Function> *
  emit<_ast936>(); // RecordType const v8::Local<v8::Function>
  emit<_ast937>(); // CXXMethodDecl Clear
  emit<_ast938>(); // CXXMethodDecl operator->
  emit<_ast939>(); // FunctionProtoType v8::Function *() const
  emit<_ast940>(); // PointerType v8::Function *
  emit<_ast942>(); // CXXMethodDecl operator*
  emit<_ast945>(); // CXXMethodDecl operator==
  emit<_ast946>(); // ParmVarDecl that
  emit<_ast947>(); // LValueReferenceType const Local<S> &
  emit<_ast948>(); // TemplateSpecializationType const Local<S>
  emit<_ast950>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast953>(); // CXXMethodDecl operator==
  emit<_ast954>(); // ParmVarDecl that
  emit<_ast955>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast956>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast958>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast961>(); // CXXMethodDecl operator!=
  emit<_ast962>(); // ParmVarDecl that
  emit<_ast963>(); // LValueReferenceType const Local<S> &
  emit<_ast964>(); // TemplateSpecializationType const Local<S>
  emit<_ast966>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast969>(); // CXXMethodDecl operator!=
  emit<_ast970>(); // ParmVarDecl that
  emit<_ast971>(); // LValueReferenceType const Persistent<S> &
  emit<_ast972>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast974>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast977>(); // CXXMethodDecl Cast
  emit<_ast978>(); // ParmVarDecl that
  emit<_ast980>(); // FunctionProtoType Local<v8::Function> (Local<S>)
  emit<_ast984>(); // CXXMethodDecl As
  emit<_ast985>(); // FunctionProtoType Local<S> () const
  emit<_ast987>(); // CXXMethodDecl New
  emit<_ast988>(); // ParmVarDecl isolate
  emit<_ast989>(); // ParmVarDecl that
  emit<_ast991>(); // FunctionProtoType Local<v8::Function> (v8::Isolate *,
                   // Local<v8::Function>)
  emit<_ast993>(); // CXXMethodDecl New
  emit<_ast994>(); // ParmVarDecl isolate
  emit<_ast995>(); // ParmVarDecl that
  emit<_ast996>(); // LValueReferenceType const PersistentBase<v8::Function> &
  emit<_ast997>(); // TemplateSpecializationType const
                   // PersistentBase<v8::Function>
  emit<_ast999>(); // FunctionProtoType Local<v8::Function> (v8::Isolate *,
                   // const PersistentBase<v8::Function> &)
  emit<_ast1001>(); // CXXMethodDecl New
  emit<_ast1002>(); // ParmVarDecl isolate
  emit<_ast1003>(); // ParmVarDecl that
  emit<_ast1004>(); // LValueReferenceType const TracedGlobal<v8::Function> &
  emit<_ast1005>(); // TemplateSpecializationType const
                    // TracedGlobal<v8::Function>
  emit<_ast1007>(); // FunctionProtoType Local<v8::Function> (v8::Isolate *,
                    // const TracedGlobal<v8::Function> &)
  emit<_ast1009>(); // CXXConstructorDecl Local
  emit<_ast1010>(); // ParmVarDecl
  emit<_ast1011>(); // LValueReferenceType const v8::Local<v8::Function> &
  emit<_ast1012>(); // FunctionProtoType void (const v8::Local<v8::Function> &)
  emit<_ast1013>(); // CXXConstructorDecl Local
  emit<_ast1014>(); // ParmVarDecl
  emit<_ast1015>(); // RValueReferenceType v8::Local<v8::Function> &&
  emit<_ast1016>(); // FunctionProtoType void (v8::Local<v8::Function> &&)
                    // noexcept
  emit<_ast1017>(); // CXXDestructorDecl ~Local
  emit<_ast1027>(); // ClassTemplateSpecializationDecl Local
  emit<_ast1028>(); // CXXConstructorDecl Local
  emit<_ast1029>(); // PointerType v8::Local<v8::Name> *
  emit<_ast1030>(); // RecordType v8::Local<v8::Name>
  emit<_ast1033>(); // CXXConstructorDecl Local
  emit<_ast1034>(); // ParmVarDecl that
  emit<_ast1036>(); // FunctionProtoType void (Local<S>)
  emit<_ast1037>(); // CXXConstructorDecl Local
  emit<_ast1038>(); // ParmVarDecl that
  emit<_ast1040>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast1041>(); // CXXConstructorDecl Local
  emit<_ast1042>(); // ParmVarDecl that
  emit<_ast1044>(); // FunctionProtoType void (Local<v8::Name>)
  emit<_ast1045>(); // CXXMethodDecl IsEmpty
  emit<_ast1046>(); // PointerType const v8::Local<v8::Name> *
  emit<_ast1047>(); // RecordType const v8::Local<v8::Name>
  emit<_ast1048>(); // CXXMethodDecl Clear
  emit<_ast1049>(); // CXXMethodDecl operator->
  emit<_ast1050>(); // FunctionProtoType v8::Name *() const
  emit<_ast1051>(); // PointerType v8::Name *
  emit<_ast1053>(); // CXXMethodDecl operator*
  emit<_ast1056>(); // CXXMethodDecl operator==
  emit<_ast1057>(); // ParmVarDecl that
  emit<_ast1058>(); // LValueReferenceType const Local<S> &
  emit<_ast1059>(); // TemplateSpecializationType const Local<S>
  emit<_ast1061>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1064>(); // CXXMethodDecl operator==
  emit<_ast1065>(); // ParmVarDecl that
  emit<_ast1066>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1067>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1069>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1072>(); // CXXMethodDecl operator!=
  emit<_ast1073>(); // ParmVarDecl that
  emit<_ast1074>(); // LValueReferenceType const Local<S> &
  emit<_ast1075>(); // TemplateSpecializationType const Local<S>
  emit<_ast1077>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1080>(); // CXXMethodDecl operator!=
  emit<_ast1081>(); // ParmVarDecl that
  emit<_ast1082>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1083>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1085>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1088>(); // CXXMethodDecl Cast
  emit<_ast1089>(); // ParmVarDecl that
  emit<_ast1091>(); // FunctionProtoType Local<v8::Name> (Local<S>)
  emit<_ast1095>(); // CXXMethodDecl As
  emit<_ast1096>(); // FunctionProtoType Local<S> () const
  emit<_ast1098>(); // CXXMethodDecl New
  emit<_ast1099>(); // ParmVarDecl isolate
  emit<_ast1100>(); // ParmVarDecl that
  emit<_ast1102>(); // FunctionProtoType Local<v8::Name> (v8::Isolate *,
                    // Local<v8::Name>)
  emit<_ast1104>(); // CXXMethodDecl New
  emit<_ast1105>(); // ParmVarDecl isolate
  emit<_ast1106>(); // ParmVarDecl that
  emit<_ast1107>(); // LValueReferenceType const PersistentBase<v8::Name> &
  emit<_ast1108>(); // TemplateSpecializationType const PersistentBase<v8::Name>
  emit<_ast1110>(); // FunctionProtoType Local<v8::Name> (v8::Isolate *, const
                    // PersistentBase<v8::Name> &)
  emit<_ast1112>(); // CXXMethodDecl New
  emit<_ast1113>(); // ParmVarDecl isolate
  emit<_ast1114>(); // ParmVarDecl that
  emit<_ast1115>(); // LValueReferenceType const TracedGlobal<v8::Name> &
  emit<_ast1116>(); // TemplateSpecializationType const TracedGlobal<v8::Name>
  emit<_ast1118>(); // FunctionProtoType Local<v8::Name> (v8::Isolate *, const
                    // TracedGlobal<v8::Name> &)
  emit<_ast1120>(); // CXXConstructorDecl Local
  emit<_ast1121>(); // ParmVarDecl
  emit<_ast1122>(); // LValueReferenceType const v8::Local<v8::Name> &
  emit<_ast1123>(); // FunctionProtoType void (const v8::Local<v8::Name> &)
  emit<_ast1124>(); // CXXConstructorDecl Local
  emit<_ast1125>(); // ParmVarDecl
  emit<_ast1126>(); // RValueReferenceType v8::Local<v8::Name> &&
  emit<_ast1127>(); // FunctionProtoType void (v8::Local<v8::Name> &&) noexcept
  emit<_ast1128>(); // CXXDestructorDecl ~Local
  emit<_ast1129>(); // ClassTemplateSpecializationDecl Local
  emit<_ast1130>(); // CXXConstructorDecl Local
  emit<_ast1131>(); // PointerType v8::Local<v8::FunctionTemplate> *
  emit<_ast1132>(); // RecordType v8::Local<v8::FunctionTemplate>
  emit<_ast1135>(); // CXXConstructorDecl Local
  emit<_ast1136>(); // ParmVarDecl that
  emit<_ast1138>(); // FunctionProtoType void (Local<S>)
  emit<_ast1139>(); // CXXConstructorDecl Local
  emit<_ast1140>(); // ParmVarDecl that
  emit<_ast1142>(); // FunctionProtoType void (Local<v8::FunctionTemplate>)
  emit<_ast1143>(); // CXXMethodDecl IsEmpty
  emit<_ast1144>(); // PointerType const v8::Local<v8::FunctionTemplate> *
  emit<_ast1145>(); // RecordType const v8::Local<v8::FunctionTemplate>
  emit<_ast1146>(); // CXXMethodDecl Clear
  emit<_ast1147>(); // CXXMethodDecl operator->
  emit<_ast1148>(); // FunctionProtoType v8::FunctionTemplate *() const
  emit<_ast1149>(); // PointerType v8::FunctionTemplate *
  emit<_ast1151>(); // CXXMethodDecl operator*
  emit<_ast1154>(); // CXXMethodDecl operator==
  emit<_ast1155>(); // ParmVarDecl that
  emit<_ast1156>(); // LValueReferenceType const Local<S> &
  emit<_ast1157>(); // TemplateSpecializationType const Local<S>
  emit<_ast1159>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1162>(); // CXXMethodDecl operator==
  emit<_ast1163>(); // ParmVarDecl that
  emit<_ast1164>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1165>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1167>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1170>(); // CXXMethodDecl operator!=
  emit<_ast1171>(); // ParmVarDecl that
  emit<_ast1172>(); // LValueReferenceType const Local<S> &
  emit<_ast1173>(); // TemplateSpecializationType const Local<S>
  emit<_ast1175>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1178>(); // CXXMethodDecl operator!=
  emit<_ast1179>(); // ParmVarDecl that
  emit<_ast1180>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1181>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1183>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1186>(); // CXXMethodDecl Cast
  emit<_ast1187>(); // ParmVarDecl that
  emit<_ast1189>(); // FunctionProtoType Local<v8::FunctionTemplate> (Local<S>)
  emit<_ast1193>(); // CXXMethodDecl As
  emit<_ast1194>(); // FunctionProtoType Local<S> () const
  emit<_ast1196>(); // CXXMethodDecl New
  emit<_ast1197>(); // ParmVarDecl isolate
  emit<_ast1198>(); // ParmVarDecl that
  emit<_ast1200>(); // FunctionProtoType Local<v8::FunctionTemplate>
                    // (v8::Isolate *, Local<v8::FunctionTemplate>)
  emit<_ast1202>(); // CXXMethodDecl New
  emit<_ast1203>(); // ParmVarDecl isolate
  emit<_ast1204>(); // ParmVarDecl that
  emit<_ast1205>(); // LValueReferenceType const
                    // PersistentBase<v8::FunctionTemplate> &
  emit<_ast1206>(); // TemplateSpecializationType const
                    // PersistentBase<v8::FunctionTemplate>
  emit<_ast1208>(); // FunctionProtoType Local<v8::FunctionTemplate>
                    // (v8::Isolate *, const
                    // PersistentBase<v8::FunctionTemplate> &)
  emit<_ast1210>(); // CXXMethodDecl New
  emit<_ast1211>(); // ParmVarDecl isolate
  emit<_ast1212>(); // ParmVarDecl that
  emit<_ast1213>(); // LValueReferenceType const
                    // TracedGlobal<v8::FunctionTemplate> &
  emit<_ast1214>(); // TemplateSpecializationType const
                    // TracedGlobal<v8::FunctionTemplate>
  emit<_ast1216>(); // FunctionProtoType Local<v8::FunctionTemplate>
                    // (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate>
                    // &)
  emit<_ast1218>(); // CXXConstructorDecl Local
  emit<_ast1219>(); // ParmVarDecl
  emit<_ast1220>(); // LValueReferenceType const v8::Local<v8::FunctionTemplate>
                    // &
  emit<_ast1221>(); // FunctionProtoType void (const
                    // v8::Local<v8::FunctionTemplate> &)
  emit<_ast1222>(); // CXXConstructorDecl Local
  emit<_ast1223>(); // ParmVarDecl
  emit<_ast1224>(); // RValueReferenceType v8::Local<v8::FunctionTemplate> &&
  emit<_ast1225>(); // FunctionProtoType void (v8::Local<v8::FunctionTemplate>
                    // &&) noexcept
  emit<_ast1226>(); // CXXDestructorDecl ~Local
  emit<_ast1230>(); // ClassTemplateSpecializationDecl Local
  emit<_ast1231>(); // CXXConstructorDecl Local
  emit<_ast1232>(); // PointerType v8::Local<v8::Promise> *
  emit<_ast1233>(); // RecordType v8::Local<v8::Promise>
  emit<_ast1236>(); // CXXConstructorDecl Local
  emit<_ast1237>(); // ParmVarDecl that
  emit<_ast1239>(); // FunctionProtoType void (Local<S>)
  emit<_ast1240>(); // CXXConstructorDecl Local
  emit<_ast1241>(); // ParmVarDecl that
  emit<_ast1243>(); // FunctionProtoType void (Local<v8::Promise>)
  emit<_ast1244>(); // CXXMethodDecl IsEmpty
  emit<_ast1245>(); // PointerType const v8::Local<v8::Promise> *
  emit<_ast1246>(); // RecordType const v8::Local<v8::Promise>
  emit<_ast1247>(); // CXXMethodDecl Clear
  emit<_ast1248>(); // CXXMethodDecl operator->
  emit<_ast1249>(); // FunctionProtoType v8::Promise *() const
  emit<_ast1250>(); // PointerType v8::Promise *
  emit<_ast1252>(); // CXXMethodDecl operator*
  emit<_ast1255>(); // CXXMethodDecl operator==
  emit<_ast1256>(); // ParmVarDecl that
  emit<_ast1257>(); // LValueReferenceType const Local<S> &
  emit<_ast1258>(); // TemplateSpecializationType const Local<S>
  emit<_ast1260>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1263>(); // CXXMethodDecl operator==
  emit<_ast1264>(); // ParmVarDecl that
  emit<_ast1265>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1266>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1268>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1271>(); // CXXMethodDecl operator!=
  emit<_ast1272>(); // ParmVarDecl that
  emit<_ast1273>(); // LValueReferenceType const Local<S> &
  emit<_ast1274>(); // TemplateSpecializationType const Local<S>
  emit<_ast1276>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1279>(); // CXXMethodDecl operator!=
  emit<_ast1280>(); // ParmVarDecl that
  emit<_ast1281>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1282>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1284>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1287>(); // CXXMethodDecl Cast
  emit<_ast1288>(); // ParmVarDecl that
  emit<_ast1290>(); // FunctionProtoType Local<v8::Promise> (Local<S>)
  emit<_ast1294>(); // CXXMethodDecl As
  emit<_ast1295>(); // FunctionProtoType Local<S> () const
  emit<_ast1297>(); // CXXMethodDecl New
  emit<_ast1298>(); // ParmVarDecl isolate
  emit<_ast1299>(); // ParmVarDecl that
  emit<_ast1301>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *,
                    // Local<v8::Promise>)
  emit<_ast1303>(); // CXXMethodDecl New
  emit<_ast1304>(); // ParmVarDecl isolate
  emit<_ast1305>(); // ParmVarDecl that
  emit<_ast1306>(); // LValueReferenceType const PersistentBase<v8::Promise> &
  emit<_ast1307>(); // TemplateSpecializationType const
                    // PersistentBase<v8::Promise>
  emit<_ast1309>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *,
                    // const PersistentBase<v8::Promise> &)
  emit<_ast1311>(); // CXXMethodDecl New
  emit<_ast1312>(); // ParmVarDecl isolate
  emit<_ast1313>(); // ParmVarDecl that
  emit<_ast1314>(); // LValueReferenceType const TracedGlobal<v8::Promise> &
  emit<_ast1315>(); // TemplateSpecializationType const
                    // TracedGlobal<v8::Promise>
  emit<_ast1317>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *,
                    // const TracedGlobal<v8::Promise> &)
  emit<_ast1319>(); // CXXConstructorDecl Local
  emit<_ast1320>(); // ParmVarDecl
  emit<_ast1321>(); // LValueReferenceType const v8::Local<v8::Promise> &
  emit<_ast1322>(); // FunctionProtoType void (const v8::Local<v8::Promise> &)
                    // noexcept
  emit<_ast1323>(); // CXXConstructorDecl Local
  emit<_ast1324>(); // ParmVarDecl
  emit<_ast1325>(); // RValueReferenceType v8::Local<v8::Promise> &&
  emit<_ast1326>(); // FunctionProtoType void (v8::Local<v8::Promise> &&)
  emit<_ast1340>(); // ClassTemplateSpecializationDecl Local
  emit<_ast1341>(); // CXXConstructorDecl Local
  emit<_ast1342>(); // PointerType v8::Local<v8::Data> *
  emit<_ast1343>(); // RecordType v8::Local<v8::Data>
  emit<_ast1346>(); // CXXConstructorDecl Local
  emit<_ast1347>(); // ParmVarDecl that
  emit<_ast1349>(); // FunctionProtoType void (Local<S>)
  emit<_ast1350>(); // CXXConstructorDecl Local
  emit<_ast1351>(); // ParmVarDecl that
  emit<_ast1353>(); // FunctionProtoType void (Local<v8::Data>)
  emit<_ast1354>(); // CXXMethodDecl IsEmpty
  emit<_ast1355>(); // PointerType const v8::Local<v8::Data> *
  emit<_ast1356>(); // RecordType const v8::Local<v8::Data>
  emit<_ast1357>(); // CXXMethodDecl Clear
  emit<_ast1358>(); // CXXMethodDecl operator->
  emit<_ast1359>(); // FunctionProtoType v8::Data *() const
  emit<_ast1360>(); // PointerType v8::Data *
  emit<_ast1362>(); // CXXMethodDecl operator*
  emit<_ast1365>(); // CXXMethodDecl operator==
  emit<_ast1366>(); // ParmVarDecl that
  emit<_ast1367>(); // LValueReferenceType const Local<S> &
  emit<_ast1368>(); // TemplateSpecializationType const Local<S>
  emit<_ast1370>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1373>(); // CXXMethodDecl operator==
  emit<_ast1374>(); // ParmVarDecl that
  emit<_ast1375>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1376>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1378>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1381>(); // CXXMethodDecl operator!=
  emit<_ast1382>(); // ParmVarDecl that
  emit<_ast1383>(); // LValueReferenceType const Local<S> &
  emit<_ast1384>(); // TemplateSpecializationType const Local<S>
  emit<_ast1386>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1389>(); // CXXMethodDecl operator!=
  emit<_ast1390>(); // ParmVarDecl that
  emit<_ast1391>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1392>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1394>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1397>(); // CXXMethodDecl Cast
  emit<_ast1398>(); // ParmVarDecl that
  emit<_ast1400>(); // FunctionProtoType Local<v8::Data> (Local<S>)
  emit<_ast1404>(); // CXXMethodDecl As
  emit<_ast1405>(); // FunctionProtoType Local<S> () const
  emit<_ast1407>(); // CXXMethodDecl New
  emit<_ast1408>(); // ParmVarDecl isolate
  emit<_ast1409>(); // ParmVarDecl that
  emit<_ast1411>(); // FunctionProtoType Local<v8::Data> (v8::Isolate *,
                    // Local<v8::Data>)
  emit<_ast1413>(); // CXXMethodDecl New
  emit<_ast1414>(); // ParmVarDecl isolate
  emit<_ast1415>(); // ParmVarDecl that
  emit<_ast1416>(); // LValueReferenceType const PersistentBase<v8::Data> &
  emit<_ast1417>(); // TemplateSpecializationType const PersistentBase<v8::Data>
  emit<_ast1419>(); // FunctionProtoType Local<v8::Data> (v8::Isolate *, const
                    // PersistentBase<v8::Data> &)
  emit<_ast1421>(); // CXXMethodDecl New
  emit<_ast1422>(); // ParmVarDecl isolate
  emit<_ast1423>(); // ParmVarDecl that
  emit<_ast1424>(); // LValueReferenceType const TracedGlobal<v8::Data> &
  emit<_ast1425>(); // TemplateSpecializationType const TracedGlobal<v8::Data>
  emit<_ast1427>(); // FunctionProtoType Local<v8::Data> (v8::Isolate *, const
                    // TracedGlobal<v8::Data> &)
  emit<_ast1429>(); // CXXConstructorDecl Local
  emit<_ast1430>(); // ParmVarDecl
  emit<_ast1431>(); // LValueReferenceType const v8::Local<v8::Data> &
  emit<_ast1432>(); // FunctionProtoType void (const v8::Local<v8::Data> &)
                    // noexcept
  emit<_ast1433>(); // CXXConstructorDecl Local
  emit<_ast1434>(); // ParmVarDecl
  emit<_ast1435>(); // RValueReferenceType v8::Local<v8::Data> &&
  emit<_ast1436>(); // FunctionProtoType void (v8::Local<v8::Data> &&)
  emit<_ast1437>(); // CXXDestructorDecl ~Local
  emit<_ast1438>(); // ClassTemplateSpecializationDecl Local
  emit<_ast1439>(); // CXXConstructorDecl Local
  emit<_ast1440>(); // PointerType v8::Local<v8::AccessorSignature> *
  emit<_ast1441>(); // RecordType v8::Local<v8::AccessorSignature>
  emit<_ast1444>(); // CXXConstructorDecl Local
  emit<_ast1445>(); // ParmVarDecl that
  emit<_ast1447>(); // FunctionProtoType void (Local<S>)
  emit<_ast1448>(); // CXXConstructorDecl Local
  emit<_ast1449>(); // ParmVarDecl that
  emit<_ast1451>(); // FunctionProtoType void (Local<v8::AccessorSignature>)
  emit<_ast1452>(); // CXXMethodDecl IsEmpty
  emit<_ast1453>(); // PointerType const v8::Local<v8::AccessorSignature> *
  emit<_ast1454>(); // RecordType const v8::Local<v8::AccessorSignature>
  emit<_ast1455>(); // CXXMethodDecl Clear
  emit<_ast1456>(); // CXXMethodDecl operator->
  emit<_ast1457>(); // FunctionProtoType v8::AccessorSignature *() const
  emit<_ast1458>(); // PointerType v8::AccessorSignature *
  emit<_ast1460>(); // CXXMethodDecl operator*
  emit<_ast1463>(); // CXXMethodDecl operator==
  emit<_ast1464>(); // ParmVarDecl that
  emit<_ast1465>(); // LValueReferenceType const Local<S> &
  emit<_ast1466>(); // TemplateSpecializationType const Local<S>
  emit<_ast1468>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1471>(); // CXXMethodDecl operator==
  emit<_ast1472>(); // ParmVarDecl that
  emit<_ast1473>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1474>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1476>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1479>(); // CXXMethodDecl operator!=
  emit<_ast1480>(); // ParmVarDecl that
  emit<_ast1481>(); // LValueReferenceType const Local<S> &
  emit<_ast1482>(); // TemplateSpecializationType const Local<S>
  emit<_ast1484>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1487>(); // CXXMethodDecl operator!=
  emit<_ast1488>(); // ParmVarDecl that
  emit<_ast1489>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1490>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1492>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1495>(); // CXXMethodDecl Cast
  emit<_ast1496>(); // ParmVarDecl that
  emit<_ast1498>(); // FunctionProtoType Local<v8::AccessorSignature> (Local<S>)
  emit<_ast1502>(); // CXXMethodDecl As
  emit<_ast1503>(); // FunctionProtoType Local<S> () const
  emit<_ast1505>(); // CXXMethodDecl New
  emit<_ast1506>(); // ParmVarDecl isolate
  emit<_ast1507>(); // ParmVarDecl that
  emit<_ast1509>(); // FunctionProtoType Local<v8::AccessorSignature>
                    // (v8::Isolate *, Local<v8::AccessorSignature>)
  emit<_ast1511>(); // CXXMethodDecl New
  emit<_ast1512>(); // ParmVarDecl isolate
  emit<_ast1513>(); // ParmVarDecl that
  emit<_ast1514>(); // LValueReferenceType const
                    // PersistentBase<v8::AccessorSignature> &
  emit<_ast1515>(); // TemplateSpecializationType const
                    // PersistentBase<v8::AccessorSignature>
  emit<_ast1517>(); // FunctionProtoType Local<v8::AccessorSignature>
                    // (v8::Isolate *, const
                    // PersistentBase<v8::AccessorSignature> &)
  emit<_ast1519>(); // CXXMethodDecl New
  emit<_ast1520>(); // ParmVarDecl isolate
  emit<_ast1521>(); // ParmVarDecl that
  emit<_ast1522>(); // LValueReferenceType const
                    // TracedGlobal<v8::AccessorSignature> &
  emit<_ast1523>(); // TemplateSpecializationType const
                    // TracedGlobal<v8::AccessorSignature>
  emit<_ast1525>(); // FunctionProtoType Local<v8::AccessorSignature>
                    // (v8::Isolate *, const TracedGlobal<v8::AccessorSignature>
                    // &)
  emit<_ast1527>(); // CXXConstructorDecl Local
  emit<_ast1528>(); // ParmVarDecl
  emit<_ast1529>(); // LValueReferenceType const
                    // v8::Local<v8::AccessorSignature> &
  emit<_ast1530>(); // FunctionProtoType void (const
                    // v8::Local<v8::AccessorSignature> &)
  emit<_ast1531>(); // CXXConstructorDecl Local
  emit<_ast1532>(); // ParmVarDecl
  emit<_ast1533>(); // RValueReferenceType v8::Local<v8::AccessorSignature> &&
  emit<_ast1534>(); // FunctionProtoType void (v8::Local<v8::AccessorSignature>
                    // &&) noexcept
  emit<_ast1535>(); // CXXDestructorDecl ~Local
  emit<_ast1536>(); // ClassTemplateSpecializationDecl Local
  emit<_ast1537>(); // CXXConstructorDecl Local
  emit<_ast1538>(); // PointerType v8::Local<v8::Signature> *
  emit<_ast1539>(); // RecordType v8::Local<v8::Signature>
  emit<_ast1542>(); // CXXConstructorDecl Local
  emit<_ast1543>(); // ParmVarDecl that
  emit<_ast1545>(); // FunctionProtoType void (Local<S>)
  emit<_ast1546>(); // CXXConstructorDecl Local
  emit<_ast1547>(); // ParmVarDecl that
  emit<_ast1549>(); // FunctionProtoType void (Local<v8::Signature>)
  emit<_ast1550>(); // CXXMethodDecl IsEmpty
  emit<_ast1551>(); // PointerType const v8::Local<v8::Signature> *
  emit<_ast1552>(); // RecordType const v8::Local<v8::Signature>
  emit<_ast1553>(); // CXXMethodDecl Clear
  emit<_ast1554>(); // CXXMethodDecl operator->
  emit<_ast1555>(); // FunctionProtoType v8::Signature *() const
  emit<_ast1556>(); // PointerType v8::Signature *
  emit<_ast1558>(); // CXXMethodDecl operator*
  emit<_ast1561>(); // CXXMethodDecl operator==
  emit<_ast1562>(); // ParmVarDecl that
  emit<_ast1563>(); // LValueReferenceType const Local<S> &
  emit<_ast1564>(); // TemplateSpecializationType const Local<S>
  emit<_ast1566>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1569>(); // CXXMethodDecl operator==
  emit<_ast1570>(); // ParmVarDecl that
  emit<_ast1571>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1572>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1574>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1577>(); // CXXMethodDecl operator!=
  emit<_ast1578>(); // ParmVarDecl that
  emit<_ast1579>(); // LValueReferenceType const Local<S> &
  emit<_ast1580>(); // TemplateSpecializationType const Local<S>
  emit<_ast1582>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1585>(); // CXXMethodDecl operator!=
  emit<_ast1586>(); // ParmVarDecl that
  emit<_ast1587>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1588>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1590>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1593>(); // CXXMethodDecl Cast
  emit<_ast1594>(); // ParmVarDecl that
  emit<_ast1596>(); // FunctionProtoType Local<v8::Signature> (Local<S>)
  emit<_ast1600>(); // CXXMethodDecl As
  emit<_ast1601>(); // FunctionProtoType Local<S> () const
  emit<_ast1603>(); // CXXMethodDecl New
  emit<_ast1604>(); // ParmVarDecl isolate
  emit<_ast1605>(); // ParmVarDecl that
  emit<_ast1607>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
                    // Local<v8::Signature>)
  emit<_ast1609>(); // CXXMethodDecl New
  emit<_ast1610>(); // ParmVarDecl isolate
  emit<_ast1611>(); // ParmVarDecl that
  emit<_ast1612>(); // LValueReferenceType const PersistentBase<v8::Signature> &
  emit<_ast1613>(); // TemplateSpecializationType const
                    // PersistentBase<v8::Signature>
  emit<_ast1615>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
                    // const PersistentBase<v8::Signature> &)
  emit<_ast1617>(); // CXXMethodDecl New
  emit<_ast1618>(); // ParmVarDecl isolate
  emit<_ast1619>(); // ParmVarDecl that
  emit<_ast1620>(); // LValueReferenceType const TracedGlobal<v8::Signature> &
  emit<_ast1621>(); // TemplateSpecializationType const
                    // TracedGlobal<v8::Signature>
  emit<_ast1623>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
                    // const TracedGlobal<v8::Signature> &)
  emit<_ast1625>(); // CXXConstructorDecl Local
  emit<_ast1626>(); // ParmVarDecl
  emit<_ast1627>(); // LValueReferenceType const v8::Local<v8::Signature> &
  emit<_ast1628>(); // FunctionProtoType void (const v8::Local<v8::Signature> &)
  emit<_ast1629>(); // CXXConstructorDecl Local
  emit<_ast1630>(); // ParmVarDecl
  emit<_ast1631>(); // RValueReferenceType v8::Local<v8::Signature> &&
  emit<_ast1632>(); // FunctionProtoType void (v8::Local<v8::Signature> &&)
                    // noexcept
  emit<_ast1633>(); // CXXDestructorDecl ~Local
  emit<_ast1640>(); // CXXRecordDecl MaybeLocal
  emit<_ast1643>(); // ClassTemplateSpecializationDecl MaybeLocal
  emit<_ast1644>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1645>(); // PointerType v8::MaybeLocal<v8::Value> *
  emit<_ast1646>(); // RecordType v8::MaybeLocal<v8::Value>
  emit<_ast1649>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1650>(); // ParmVarDecl that
  emit<_ast1652>(); // FunctionProtoType void (Local<S>)
  emit<_ast1653>(); // CXXMethodDecl IsEmpty
  emit<_ast1654>(); // PointerType const v8::MaybeLocal<v8::Value> *
  emit<_ast1655>(); // RecordType const v8::MaybeLocal<v8::Value>
  emit<_ast1658>(); // CXXMethodDecl ToLocal
  emit<_ast1659>(); // ParmVarDecl out
  emit<_ast1660>(); // PointerType Local<S> *
  emit<_ast1662>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1663>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1664>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast1668>(); // CXXMethodDecl FromMaybe
  emit<_ast1669>(); // ParmVarDecl default_value
  emit<_ast1671>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1673>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1674>(); // ParmVarDecl
  emit<_ast1675>(); // LValueReferenceType const v8::MaybeLocal<v8::Value> &
  emit<_ast1676>(); // FunctionProtoType void (const v8::MaybeLocal<v8::Value>
                    // &)
  emit<_ast1677>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1678>(); // ParmVarDecl
  emit<_ast1679>(); // RValueReferenceType v8::MaybeLocal<v8::Value> &&
  emit<_ast1680>(); // FunctionProtoType void (v8::MaybeLocal<v8::Value> &&)
                    // noexcept
  emit<_ast1681>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1685>(); // ClassTemplateSpecializationDecl MaybeLocal
  emit<_ast1686>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1687>(); // PointerType v8::MaybeLocal<v8::String> *
  emit<_ast1688>(); // RecordType v8::MaybeLocal<v8::String>
  emit<_ast1691>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1692>(); // ParmVarDecl that
  emit<_ast1694>(); // FunctionProtoType void (Local<S>)
  emit<_ast1695>(); // CXXMethodDecl IsEmpty
  emit<_ast1696>(); // PointerType const v8::MaybeLocal<v8::String> *
  emit<_ast1697>(); // RecordType const v8::MaybeLocal<v8::String>
  emit<_ast1700>(); // CXXMethodDecl ToLocal
  emit<_ast1701>(); // ParmVarDecl out
  emit<_ast1702>(); // PointerType Local<S> *
  emit<_ast1704>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1705>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1706>(); // FunctionProtoType Local<v8::String> ()
  emit<_ast1710>(); // CXXMethodDecl FromMaybe
  emit<_ast1711>(); // ParmVarDecl default_value
  emit<_ast1713>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1715>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1716>(); // ClassTemplateSpecializationDecl MaybeLocal
  emit<_ast1717>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1718>(); // PointerType v8::MaybeLocal<v8::Object> *
  emit<_ast1719>(); // RecordType v8::MaybeLocal<v8::Object>
  emit<_ast1722>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1723>(); // ParmVarDecl that
  emit<_ast1725>(); // FunctionProtoType void (Local<S>)
  emit<_ast1726>(); // CXXMethodDecl IsEmpty
  emit<_ast1727>(); // PointerType const v8::MaybeLocal<v8::Object> *
  emit<_ast1728>(); // RecordType const v8::MaybeLocal<v8::Object>
  emit<_ast1731>(); // CXXMethodDecl ToLocal
  emit<_ast1732>(); // ParmVarDecl out
  emit<_ast1733>(); // PointerType Local<S> *
  emit<_ast1735>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1736>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1737>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast1741>(); // CXXMethodDecl FromMaybe
  emit<_ast1742>(); // ParmVarDecl default_value
  emit<_ast1744>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1746>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1747>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1748>(); // ParmVarDecl
  emit<_ast1749>(); // LValueReferenceType const v8::MaybeLocal<v8::Object> &
  emit<_ast1750>(); // FunctionProtoType void (const v8::MaybeLocal<v8::Object>
                    // &)
  emit<_ast1751>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1752>(); // ParmVarDecl
  emit<_ast1753>(); // RValueReferenceType v8::MaybeLocal<v8::Object> &&
  emit<_ast1754>(); // FunctionProtoType void (v8::MaybeLocal<v8::Object> &&)
                    // noexcept
  emit<_ast1770>(); // ClassTemplateSpecializationDecl MaybeLocal
  emit<_ast1771>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1772>(); // PointerType v8::MaybeLocal<v8::ObjectTemplate> *
  emit<_ast1773>(); // RecordType v8::MaybeLocal<v8::ObjectTemplate>
  emit<_ast1776>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1777>(); // ParmVarDecl that
  emit<_ast1779>(); // FunctionProtoType void (Local<S>)
  emit<_ast1780>(); // CXXMethodDecl IsEmpty
  emit<_ast1781>(); // PointerType const v8::MaybeLocal<v8::ObjectTemplate> *
  emit<_ast1782>(); // RecordType const v8::MaybeLocal<v8::ObjectTemplate>
  emit<_ast1785>(); // CXXMethodDecl ToLocal
  emit<_ast1786>(); // ParmVarDecl out
  emit<_ast1787>(); // PointerType Local<S> *
  emit<_ast1789>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1790>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1791>(); // FunctionProtoType Local<v8::ObjectTemplate> ()
  emit<_ast1795>(); // CXXMethodDecl FromMaybe
  emit<_ast1796>(); // ParmVarDecl default_value
  emit<_ast1798>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1800>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1801>(); // ParmVarDecl
  emit<_ast1802>(); // LValueReferenceType const
                    // v8::MaybeLocal<v8::ObjectTemplate> &
  emit<_ast1803>(); // FunctionProtoType void (const
                    // v8::MaybeLocal<v8::ObjectTemplate> &)
  emit<_ast1804>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1805>(); // ParmVarDecl
  emit<_ast1806>(); // RValueReferenceType v8::MaybeLocal<v8::ObjectTemplate> &&
  emit<_ast1807>(); // FunctionProtoType void
                    // (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
  emit<_ast1808>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1812>(); // CXXRecordDecl Eternal
  emit<_ast1816>(); // CXXRecordDecl NonCopyablePersistentTraits
  emit<_ast1822>(); // CXXRecordDecl PersistentBase
  emit<_ast1829>(); // ClassTemplateSpecializationDecl PersistentBase
  emit<_ast1830>(); // CXXMethodDecl Reset
  emit<_ast1831>(); // PointerType v8::PersistentBase<v8::Object> *
  emit<_ast1832>(); // RecordType v8::PersistentBase<v8::Object>
  emit<_ast1835>(); // CXXMethodDecl Reset
  emit<_ast1836>(); // ParmVarDecl isolate
  emit<_ast1837>(); // ParmVarDecl other
  emit<_ast1838>(); // LValueReferenceType const Local<S> &
  emit<_ast1839>(); // TemplateSpecializationType const Local<S>
  emit<_ast1841>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast1844>(); // CXXMethodDecl Reset
  emit<_ast1845>(); // ParmVarDecl isolate
  emit<_ast1846>(); // ParmVarDecl other
  emit<_ast1847>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1848>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1850>(); // FunctionProtoType void (v8::Isolate *, const
                    // PersistentBase<S> &)
  emit<_ast1851>(); // CXXMethodDecl IsEmpty
  emit<_ast1852>(); // PointerType const v8::PersistentBase<v8::Object> *
  emit<_ast1853>(); // RecordType const v8::PersistentBase<v8::Object>
  emit<_ast1854>(); // CXXMethodDecl Empty
  emit<_ast1855>(); // CXXMethodDecl Get
  emit<_ast1856>(); // ParmVarDecl isolate
  emit<_ast1857>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
  emit<_ast1861>(); // CXXMethodDecl operator==
  emit<_ast1862>(); // ParmVarDecl that
  emit<_ast1863>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1864>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1866>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1869>(); // CXXMethodDecl operator==
  emit<_ast1870>(); // ParmVarDecl that
  emit<_ast1871>(); // LValueReferenceType const Local<S> &
  emit<_ast1872>(); // TemplateSpecializationType const Local<S>
  emit<_ast1874>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1877>(); // CXXMethodDecl operator!=
  emit<_ast1878>(); // ParmVarDecl that
  emit<_ast1879>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1880>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1882>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1885>(); // CXXMethodDecl operator!=
  emit<_ast1886>(); // ParmVarDecl that
  emit<_ast1887>(); // LValueReferenceType const Local<S> &
  emit<_ast1888>(); // TemplateSpecializationType const Local<S>
  emit<_ast1890>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1893>(); // CXXMethodDecl SetWeak
  emit<_ast1894>(); // ParmVarDecl parameter
  emit<_ast1895>(); // PointerType P *
  emit<_ast1897>(); // ParmVarDecl callback
  emit<_ast1899>(); // ParmVarDecl type
  emit<_ast1900>(); // EnumType v8::WeakCallbackType
  emit<_ast1901>(); // BuiltinType int
  emit<_ast1903>(); // FunctionProtoType void (P *, typename
                    // WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
  emit<_ast1904>(); // CXXMethodDecl SetWeak
  emit<_ast1907>(); // CXXMethodDecl ClearWeak
  emit<_ast1908>(); // FunctionProtoType P *()
  emit<_ast1909>(); // PointerType P *
  emit<_ast1911>(); // CXXMethodDecl ClearWeak
  emit<_ast1912>(); // CXXMethodDecl AnnotateStrongRetainer
  emit<_ast1913>(); // ParmVarDecl label
  emit<_ast1914>(); // PointerType const char *
  emit<_ast1915>(); // BuiltinType const char
  emit<_ast1916>(); // BuiltinType char
  emit<_ast1917>(); // FunctionProtoType void (const char *)
  emit<_ast1918>(); // CXXMethodDecl IsWeak
  emit<_ast1919>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast1920>(); // ParmVarDecl class_id
  emit<_ast1921>(); // TypedefType uint16_t
  emit<_ast1922>(); // FunctionProtoType void (uint16_t)
  emit<_ast1923>(); // CXXMethodDecl WrapperClassId
  emit<_ast1924>(); // FunctionProtoType uint16_t () const
  emit<_ast1925>(); // CXXConstructorDecl PersistentBase
  emit<_ast1926>(); // ParmVarDecl other
  emit<_ast1927>(); // LValueReferenceType const v8::PersistentBase<v8::Object>
                    // &
  emit<_ast1928>(); // FunctionProtoType void (const
                    // v8::PersistentBase<v8::Object> &)
  emit<_ast1929>(); // CXXMethodDecl operator=
  emit<_ast1930>(); // ParmVarDecl
  emit<_ast1933>(); // ClassTemplateSpecializationDecl PersistentBase
  emit<_ast1934>(); // CXXMethodDecl Reset
  emit<_ast1935>(); // PointerType v8::PersistentBase<v8::Promise> *
  emit<_ast1936>(); // RecordType v8::PersistentBase<v8::Promise>
  emit<_ast1939>(); // CXXMethodDecl Reset
  emit<_ast1940>(); // ParmVarDecl isolate
  emit<_ast1941>(); // ParmVarDecl other
  emit<_ast1942>(); // LValueReferenceType const Local<S> &
  emit<_ast1943>(); // TemplateSpecializationType const Local<S>
  emit<_ast1945>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast1948>(); // CXXMethodDecl Reset
  emit<_ast1949>(); // ParmVarDecl isolate
  emit<_ast1950>(); // ParmVarDecl other
  emit<_ast1951>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1952>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1954>(); // FunctionProtoType void (v8::Isolate *, const
                    // PersistentBase<S> &)
  emit<_ast1955>(); // CXXMethodDecl IsEmpty
  emit<_ast1956>(); // PointerType const v8::PersistentBase<v8::Promise> *
  emit<_ast1957>(); // RecordType const v8::PersistentBase<v8::Promise>
  emit<_ast1958>(); // CXXMethodDecl Empty
  emit<_ast1959>(); // CXXMethodDecl Get
  emit<_ast1960>(); // ParmVarDecl isolate
  emit<_ast1961>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *)
                    // const
  emit<_ast1965>(); // CXXMethodDecl operator==
  emit<_ast1966>(); // ParmVarDecl that
  emit<_ast1967>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1968>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1970>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1973>(); // CXXMethodDecl operator==
  emit<_ast1974>(); // ParmVarDecl that
  emit<_ast1975>(); // LValueReferenceType const Local<S> &
  emit<_ast1976>(); // TemplateSpecializationType const Local<S>
  emit<_ast1978>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1981>(); // CXXMethodDecl operator!=
  emit<_ast1982>(); // ParmVarDecl that
  emit<_ast1983>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1984>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1986>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1989>(); // CXXMethodDecl operator!=
  emit<_ast1990>(); // ParmVarDecl that
  emit<_ast1991>(); // LValueReferenceType const Local<S> &
  emit<_ast1992>(); // TemplateSpecializationType const Local<S>
  emit<_ast1994>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1997>(); // CXXMethodDecl SetWeak
  emit<_ast1998>(); // ParmVarDecl parameter
  emit<_ast1999>(); // PointerType P *
  emit<_ast2001>(); // ParmVarDecl callback
  emit<_ast2003>(); // ParmVarDecl type
  emit<_ast2004>(); // FunctionProtoType void (P *, typename
                    // WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
  emit<_ast2005>(); // CXXMethodDecl SetWeak
  emit<_ast2008>(); // CXXMethodDecl ClearWeak
  emit<_ast2009>(); // FunctionProtoType P *()
  emit<_ast2010>(); // PointerType P *
  emit<_ast2012>(); // CXXMethodDecl ClearWeak
  emit<_ast2013>(); // CXXMethodDecl AnnotateStrongRetainer
  emit<_ast2014>(); // ParmVarDecl label
  emit<_ast2015>(); // CXXMethodDecl IsWeak
  emit<_ast2016>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2017>(); // ParmVarDecl class_id
  emit<_ast2018>(); // CXXMethodDecl WrapperClassId
  emit<_ast2019>(); // CXXConstructorDecl PersistentBase
  emit<_ast2020>(); // ParmVarDecl other
  emit<_ast2021>(); // LValueReferenceType const v8::PersistentBase<v8::Promise>
                    // &
  emit<_ast2022>(); // FunctionProtoType void (const
                    // v8::PersistentBase<v8::Promise> &)
  emit<_ast2023>(); // CXXMethodDecl operator=
  emit<_ast2024>(); // ParmVarDecl
  emit<_ast2035>(); // CXXRecordDecl Persistent
  emit<_ast2037>(); // ClassTemplateSpecializationDecl Persistent
  emit<_ast2038>(); // CXXConstructorDecl Persistent
  emit<_ast2039>(); // PointerType v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > *
  emit<_ast2040>(); // RecordType v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2043>(); // CXXConstructorDecl Persistent
  emit<_ast2044>(); // ParmVarDecl isolate
  emit<_ast2045>(); // ParmVarDecl that
  emit<_ast2047>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2051>(); // CXXConstructorDecl Persistent
  emit<_ast2052>(); // ParmVarDecl isolate
  emit<_ast2053>(); // ParmVarDecl that
  emit<_ast2054>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2055>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2057>(); // FunctionProtoType void (v8::Isolate *, const
                    // Persistent<S, M2> &)
  emit<_ast2058>(); // CXXConstructorDecl Persistent
  emit<_ast2059>(); // ParmVarDecl that
  emit<_ast2060>(); // LValueReferenceType const v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2061>(); // RecordType const v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2062>(); // FunctionProtoType void (const v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2066>(); // CXXConstructorDecl Persistent
  emit<_ast2067>(); // ParmVarDecl that
  emit<_ast2068>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2069>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2071>(); // FunctionProtoType void (const Persistent<S, M2> &)
  emit<_ast2072>(); // CXXConstructorDecl Persistent
  emit<_ast2073>(); // ParmVarDecl that
  emit<_ast2074>(); // LValueReferenceType const Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2075>(); // TemplateSpecializationType const Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2077>(); // FunctionProtoType void (const Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2078>(); // CXXMethodDecl operator=
  emit<_ast2079>(); // ParmVarDecl that
  emit<_ast2080>(); // FunctionProtoType v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &(const
                    // v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2081>(); // LValueReferenceType v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2085>(); // CXXMethodDecl operator=
  emit<_ast2086>(); // ParmVarDecl that
  emit<_ast2087>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2088>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2090>(); // FunctionProtoType v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &(const
                    // Persistent<S, M2> &)
  emit<_ast2091>(); // CXXMethodDecl operator=
  emit<_ast2092>(); // ParmVarDecl that
  emit<_ast2093>(); // LValueReferenceType const Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2094>(); // TemplateSpecializationType const Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2096>(); // FunctionProtoType v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &(const
                    // Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2097>(); // CXXDestructorDecl ~Persistent
  emit<_ast2098>(); // FunctionProtoType void ()
  emit<_ast2101>(); // CXXMethodDecl Cast
  emit<_ast2102>(); // ParmVarDecl that
  emit<_ast2103>(); // LValueReferenceType const Persistent<S> &
  emit<_ast2104>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast2106>(); // FunctionProtoType Persistent<v8::Promise> &(const
                    // Persistent<S> &)
  emit<_ast2107>(); // LValueReferenceType Persistent<v8::Promise> &
  emit<_ast2111>(); // CXXMethodDecl As
  emit<_ast2112>(); // FunctionProtoType Persistent<S> &() const
  emit<_ast2113>(); // LValueReferenceType Persistent<S> &
  emit<_ast2115>(); // PointerType const v8::Persistent<v8::Promise,
                    // v8::CopyablePersistentTraits<v8::Promise> > *
  emit<_ast2120>(); // CXXRecordDecl Global
  emit<_ast2124>(); // CXXRecordDecl TracedGlobal
  emit<_ast2131>(); // ClassTemplateSpecializationDecl TracedGlobal
  emit<_ast2132>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2133>(); // FunctionProtoType void ()
  emit<_ast2134>(); // PointerType v8::TracedGlobal<v8::Object> *
  emit<_ast2135>(); // RecordType v8::TracedGlobal<v8::Object>
  emit<_ast2136>(); // CXXDestructorDecl ~TracedGlobal
  emit<_ast2137>(); // FunctionProtoType void ()
  emit<_ast2140>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2141>(); // ParmVarDecl isolate
  emit<_ast2142>(); // ParmVarDecl that
  emit<_ast2144>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2145>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2146>(); // ParmVarDecl other
  emit<_ast2147>(); // RValueReferenceType v8::TracedGlobal<v8::Object> &&
  emit<_ast2148>(); // FunctionProtoType void (v8::TracedGlobal<v8::Object> &&)
  emit<_ast2151>(); // CXXMethodDecl operator=
  emit<_ast2152>(); // ParmVarDecl rhs
  emit<_ast2153>(); // RValueReferenceType TracedGlobal<S> &&
  emit<_ast2155>(); // FunctionProtoType v8::TracedGlobal<v8::Object>
                    // &(TracedGlobal<S> &&)
  emit<_ast2156>(); // LValueReferenceType v8::TracedGlobal<v8::Object> &
  emit<_ast2157>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2158>(); // ParmVarDecl
  emit<_ast2159>(); // LValueReferenceType const v8::TracedGlobal<v8::Object> &
  emit<_ast2160>(); // RecordType const v8::TracedGlobal<v8::Object>
  emit<_ast2161>(); // FunctionProtoType void (const
                    // v8::TracedGlobal<v8::Object> &)
  emit<_ast2162>(); // CXXMethodDecl operator=
  emit<_ast2163>(); // ParmVarDecl
  emit<_ast2164>(); // CXXMethodDecl IsEmpty
  emit<_ast2165>(); // PointerType const v8::TracedGlobal<v8::Object> *
  emit<_ast2166>(); // CXXMethodDecl Reset
  emit<_ast2169>(); // CXXMethodDecl Reset
  emit<_ast2170>(); // ParmVarDecl isolate
  emit<_ast2171>(); // ParmVarDecl other
  emit<_ast2172>(); // LValueReferenceType const Local<S> &
  emit<_ast2173>(); // TemplateSpecializationType const Local<S>
  emit<_ast2175>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast2176>(); // CXXMethodDecl Get
  emit<_ast2177>(); // ParmVarDecl isolate
  emit<_ast2178>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
  emit<_ast2182>(); // CXXMethodDecl As
  emit<_ast2183>(); // FunctionProtoType TracedGlobal<S> &() const
  emit<_ast2184>(); // LValueReferenceType TracedGlobal<S> &
  emit<_ast2188>(); // CXXMethodDecl operator==
  emit<_ast2189>(); // ParmVarDecl that
  emit<_ast2190>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2191>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2193>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2196>(); // CXXMethodDecl operator==
  emit<_ast2197>(); // ParmVarDecl that
  emit<_ast2198>(); // LValueReferenceType const Local<S> &
  emit<_ast2199>(); // TemplateSpecializationType const Local<S>
  emit<_ast2201>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2204>(); // CXXMethodDecl operator!=
  emit<_ast2205>(); // ParmVarDecl that
  emit<_ast2206>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2207>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2209>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2212>(); // CXXMethodDecl operator!=
  emit<_ast2213>(); // ParmVarDecl that
  emit<_ast2214>(); // LValueReferenceType const Local<S> &
  emit<_ast2215>(); // TemplateSpecializationType const Local<S>
  emit<_ast2217>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2218>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2219>(); // ParmVarDecl class_id
  emit<_ast2220>(); // CXXMethodDecl WrapperClassId
  emit<_ast2221>(); // CXXMethodDecl SetFinalizationCallback
  emit<_ast2222>(); // ParmVarDecl parameter
  emit<_ast2223>(); // PointerType void *
  emit<_ast2224>(); // ParmVarDecl callback
  emit<_ast2226>(); // FunctionProtoType void (void *,
                    // WeakCallbackInfo<void>::Callback)
  emit<_ast2241>(); // CXXRecordDecl PersistentValueMap
  emit<_ast2247>(); // CXXRecordDecl PersistentValueMapBase
  emit<_ast2253>(); // CXXRecordDecl GlobalValueMap
  emit<_ast2258>(); // CXXRecordDecl PersistentValueVector
  emit<_ast2263>(); // CXXRecordDecl WeakCallbackObject
  emit<_ast2267>(); // CXXRecordDecl FunctionCallbackInfo
  emit<_ast2272>(); // CXXRecordDecl PropertyCallbackInfo
  emit<_ast2279>(); // CXXRecordDecl CallHandlerHelper
  emit<_ast2280>(); // RecordType v8::CallHandlerHelper
  emit<_ast2281>(); // CXXRecordDecl EscapableHandleScope
  emit<_ast2282>(); // RecordType v8::EscapableHandleScope
  emit<_ast2285>(); // CXXRecordDecl ReturnValue
  emit<_ast2287>(); // NamespaceDecl debug
  emit<_ast2288>(); // CXXRecordDecl ConsoleCallArguments
  emit<_ast2289>(); // RecordType v8::debug::ConsoleCallArguments
  emit<_ast2291>(); // CXXRecordDecl Local
  emit<_ast2292>(); // CXXConstructorDecl Local<T>
  emit<_ast2293>(); // PointerType Local<T> *
  emit<_ast2296>(); // CXXConstructorDecl Local<T>
  emit<_ast2297>(); // ParmVarDecl that
  emit<_ast2299>(); // FunctionProtoType void (Local<S>)
  emit<_ast2300>(); // CXXMethodDecl IsEmpty
  emit<_ast2301>(); // PointerType const Local<T> *
  emit<_ast2302>(); // InjectedClassNameType const Local<T>
  emit<_ast2303>(); // CXXMethodDecl Clear
  emit<_ast2304>(); // CXXMethodDecl operator->
  emit<_ast2305>(); // FunctionProtoType T *() const
  emit<_ast2306>(); // PointerType T *
  emit<_ast2308>(); // CXXMethodDecl operator*
  emit<_ast2311>(); // CXXMethodDecl operator==
  emit<_ast2312>(); // ParmVarDecl that
  emit<_ast2313>(); // LValueReferenceType const Local<S> &
  emit<_ast2314>(); // TemplateSpecializationType const Local<S>
  emit<_ast2316>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2319>(); // CXXMethodDecl operator==
  emit<_ast2320>(); // ParmVarDecl that
  emit<_ast2321>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2322>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2324>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast2327>(); // CXXMethodDecl operator!=
  emit<_ast2328>(); // ParmVarDecl that
  emit<_ast2329>(); // LValueReferenceType const Local<S> &
  emit<_ast2330>(); // TemplateSpecializationType const Local<S>
  emit<_ast2332>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2335>(); // CXXMethodDecl operator!=
  emit<_ast2336>(); // ParmVarDecl that
  emit<_ast2337>(); // LValueReferenceType const Persistent<S> &
  emit<_ast2338>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast2340>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast2343>(); // CXXMethodDecl Cast
  emit<_ast2344>(); // ParmVarDecl that
  emit<_ast2346>(); // FunctionProtoType Local<T> (Local<S>)
  emit<_ast2350>(); // CXXMethodDecl As
  emit<_ast2351>(); // FunctionProtoType Local<S> () const
  emit<_ast2353>(); // CXXMethodDecl New
  emit<_ast2354>(); // ParmVarDecl isolate
  emit<_ast2355>(); // ParmVarDecl that
  emit<_ast2357>(); // FunctionProtoType Local<T> (v8::Isolate *, Local<T>)
  emit<_ast2359>(); // CXXMethodDecl New
  emit<_ast2360>(); // ParmVarDecl isolate
  emit<_ast2361>(); // ParmVarDecl that
  emit<_ast2362>(); // LValueReferenceType const PersistentBase<T> &
  emit<_ast2363>(); // TemplateSpecializationType const PersistentBase<T>
  emit<_ast2365>(); // FunctionProtoType Local<T> (v8::Isolate *, const
                    // PersistentBase<T> &)
  emit<_ast2367>(); // CXXMethodDecl New
  emit<_ast2368>(); // ParmVarDecl isolate
  emit<_ast2369>(); // ParmVarDecl that
  emit<_ast2370>(); // LValueReferenceType const TracedGlobal<T> &
  emit<_ast2371>(); // TemplateSpecializationType const TracedGlobal<T>
  emit<_ast2373>(); // FunctionProtoType Local<T> (v8::Isolate *, const
                    // TracedGlobal<T> &)
  emit<_ast2376>(); // TypeAliasDecl Handle
  emit<_ast2377>(); // TypedefType v8::Handle
  emit<_ast2380>(); // CXXRecordDecl MaybeLocal
  emit<_ast2381>(); // CXXConstructorDecl MaybeLocal<T>
  emit<_ast2382>(); // PointerType MaybeLocal<T> *
  emit<_ast2385>(); // CXXConstructorDecl MaybeLocal<T>
  emit<_ast2386>(); // ParmVarDecl that
  emit<_ast2388>(); // FunctionProtoType void (Local<S>)
  emit<_ast2389>(); // CXXMethodDecl IsEmpty
  emit<_ast2390>(); // PointerType const MaybeLocal<T> *
  emit<_ast2391>(); // InjectedClassNameType const MaybeLocal<T>
  emit<_ast2394>(); // CXXMethodDecl ToLocal
  emit<_ast2395>(); // ParmVarDecl out
  emit<_ast2396>(); // PointerType Local<S> *
  emit<_ast2398>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast2399>(); // CXXMethodDecl ToLocalChecked
  emit<_ast2400>(); // FunctionProtoType Local<T> ()
  emit<_ast2404>(); // CXXMethodDecl FromMaybe
  emit<_ast2405>(); // ParmVarDecl default_value
  emit<_ast2407>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast2410>(); // CXXRecordDecl Eternal
  emit<_ast2411>(); // CXXConstructorDecl Eternal<T>
  emit<_ast2412>(); // PointerType Eternal<T> *
  emit<_ast2415>(); // CXXConstructorDecl Eternal<T>
  emit<_ast2416>(); // ParmVarDecl isolate
  emit<_ast2417>(); // ParmVarDecl handle
  emit<_ast2419>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2420>(); // CXXMethodDecl Get
  emit<_ast2421>(); // ParmVarDecl isolate
  emit<_ast2422>(); // FunctionProtoType Local<T> (v8::Isolate *) const
  emit<_ast2424>(); // PointerType const Eternal<T> *
  emit<_ast2425>(); // InjectedClassNameType const Eternal<T>
  emit<_ast2426>(); // CXXMethodDecl IsEmpty
  emit<_ast2429>(); // CXXMethodDecl Set
  emit<_ast2430>(); // ParmVarDecl isolate
  emit<_ast2431>(); // ParmVarDecl handle
  emit<_ast2433>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2434>(); // VarDecl kInternalFieldsInWeakCallback
  emit<_ast2435>(); // BuiltinType const int
  emit<_ast2436>(); // VarDecl kEmbedderFieldsInWeakCallback
  emit<_ast2439>(); // CXXRecordDecl WeakCallbackInfo
  emit<_ast2441>(); // FieldDecl isolate_
  emit<_ast2442>(); // FieldDecl parameter_
  emit<_ast2443>(); // PointerType T *
  emit<_ast2445>(); // FieldDecl callback_
  emit<_ast2446>(); // PointerType v8::WeakCallbackInfo::Callback *
  emit<_ast2447>(); // TypedefType v8::WeakCallbackInfo::Callback
  emit<_ast2448>(); // TypedefDecl Callback
  emit<_ast2449>(); // FieldDecl embedder_fields_
  emit<_ast2451>(); // CXXRecordDecl WeakCallbackInfo
  emit<_ast2452>(); // CXXConstructorDecl WeakCallbackInfo<T>
  emit<_ast2453>(); // ParmVarDecl isolate
  emit<_ast2454>(); // ParmVarDecl parameter
  emit<_ast2455>(); // ParmVarDecl embedder_fields
  emit<_ast2457>(); // ParmVarDecl callback
  emit<_ast2458>(); // FunctionProtoType void (v8::Isolate *, T *, void **,
                    // v8::WeakCallbackInfo::Callback *)
  emit<_ast2459>(); // PointerType WeakCallbackInfo<T> *
  emit<_ast2460>(); // CXXMethodDecl GetIsolate
  emit<_ast2461>(); // FunctionProtoType v8::Isolate *() const
  emit<_ast2462>(); // PointerType const WeakCallbackInfo<T> *
  emit<_ast2463>(); // InjectedClassNameType const WeakCallbackInfo<T>
  emit<_ast2464>(); // CXXMethodDecl GetParameter
  emit<_ast2465>(); // FunctionProtoType T *() const
  emit<_ast2466>(); // CXXMethodDecl GetInternalField
  emit<_ast2467>(); // ParmVarDecl index
  emit<_ast2468>(); // FunctionProtoType void *(int) const
  emit<_ast2469>(); // CXXMethodDecl SetSecondPassCallback
  emit<_ast2470>(); // ParmVarDecl callback
  emit<_ast2471>(); // FunctionProtoType void (v8::WeakCallbackInfo::Callback)
                    // const
  emit<_ast2472>(); // ClassTemplateSpecializationDecl WeakCallbackInfo
  emit<_ast2473>(); // TypedefDecl Callback
  emit<_ast2474>(); // TypedefType v8::WeakCallbackInfo<void>::Callback
  emit<_ast2475>(); // ParmVarDecl data
  emit<_ast2476>(); // LValueReferenceType const WeakCallbackInfo<void> &
  emit<_ast2477>(); // TemplateSpecializationType const WeakCallbackInfo<void>
  emit<_ast2479>(); // CXXConstructorDecl WeakCallbackInfo
  emit<_ast2480>(); // ParmVarDecl isolate
  emit<_ast2481>(); // ParmVarDecl parameter
  emit<_ast2482>(); // PointerType void *
  emit<_ast2484>(); // ParmVarDecl embedder_fields
  emit<_ast2485>(); // ParmVarDecl callback
  emit<_ast2486>(); // PointerType v8::WeakCallbackInfo<void>::Callback *
  emit<_ast2487>(); // FunctionProtoType void (v8::Isolate *, void *, void **,
                    // v8::WeakCallbackInfo<void>::Callback *)
  emit<_ast2488>(); // PointerType v8::WeakCallbackInfo<void> *
  emit<_ast2489>(); // RecordType v8::WeakCallbackInfo<void>
  emit<_ast2490>(); // CXXMethodDecl GetIsolate
  emit<_ast2491>(); // PointerType const v8::WeakCallbackInfo<void> *
  emit<_ast2492>(); // RecordType const v8::WeakCallbackInfo<void>
  emit<_ast2493>(); // CXXMethodDecl GetParameter
  emit<_ast2494>(); // FunctionProtoType void *() const
  emit<_ast2495>(); // CXXMethodDecl GetInternalField
  emit<_ast2496>(); // ParmVarDecl index
  emit<_ast2497>(); // CXXMethodDecl SetSecondPassCallback
  emit<_ast2498>(); // ParmVarDecl callback
  emit<_ast2499>(); // FunctionProtoType void
                    // (v8::WeakCallbackInfo<void>::Callback) const
  emit<_ast2504>(); // CXXRecordDecl PersistentBase
  emit<_ast2505>(); // CXXMethodDecl Reset
  emit<_ast2506>(); // PointerType PersistentBase<T> *
  emit<_ast2509>(); // CXXMethodDecl Reset
  emit<_ast2510>(); // ParmVarDecl isolate
  emit<_ast2511>(); // ParmVarDecl other
  emit<_ast2512>(); // LValueReferenceType const Local<S> &
  emit<_ast2513>(); // TemplateSpecializationType const Local<S>
  emit<_ast2515>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast2518>(); // CXXMethodDecl Reset
  emit<_ast2519>(); // ParmVarDecl isolate
  emit<_ast2520>(); // ParmVarDecl other
  emit<_ast2521>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2522>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2524>(); // FunctionProtoType void (v8::Isolate *, const
                    // PersistentBase<S> &)
  emit<_ast2525>(); // CXXMethodDecl IsEmpty
  emit<_ast2526>(); // PointerType const PersistentBase<T> *
  emit<_ast2527>(); // InjectedClassNameType const PersistentBase<T>
  emit<_ast2528>(); // CXXMethodDecl Empty
  emit<_ast2529>(); // CXXMethodDecl Get
  emit<_ast2530>(); // ParmVarDecl isolate
  emit<_ast2531>(); // FunctionProtoType Local<T> (v8::Isolate *) const
  emit<_ast2535>(); // CXXMethodDecl operator==
  emit<_ast2536>(); // ParmVarDecl that
  emit<_ast2537>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2538>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2540>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast2543>(); // CXXMethodDecl operator==
  emit<_ast2544>(); // ParmVarDecl that
  emit<_ast2545>(); // LValueReferenceType const Local<S> &
  emit<_ast2546>(); // TemplateSpecializationType const Local<S>
  emit<_ast2548>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2551>(); // CXXMethodDecl operator!=
  emit<_ast2552>(); // ParmVarDecl that
  emit<_ast2553>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2554>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2556>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast2559>(); // CXXMethodDecl operator!=
  emit<_ast2560>(); // ParmVarDecl that
  emit<_ast2561>(); // LValueReferenceType const Local<S> &
  emit<_ast2562>(); // TemplateSpecializationType const Local<S>
  emit<_ast2564>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2567>(); // CXXMethodDecl SetWeak
  emit<_ast2568>(); // ParmVarDecl parameter
  emit<_ast2569>(); // PointerType P *
  emit<_ast2571>(); // ParmVarDecl callback
  emit<_ast2573>(); // ParmVarDecl type
  emit<_ast2574>(); // FunctionProtoType void (P *, typename
                    // WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
  emit<_ast2575>(); // CXXMethodDecl SetWeak
  emit<_ast2578>(); // CXXMethodDecl ClearWeak
  emit<_ast2579>(); // FunctionProtoType P *()
  emit<_ast2580>(); // PointerType P *
  emit<_ast2582>(); // CXXMethodDecl ClearWeak
  emit<_ast2583>(); // CXXMethodDecl AnnotateStrongRetainer
  emit<_ast2584>(); // ParmVarDecl label
  emit<_ast2585>(); // CXXMethodDecl IsWeak
  emit<_ast2586>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2587>(); // ParmVarDecl class_id
  emit<_ast2588>(); // CXXMethodDecl WrapperClassId
  emit<_ast2589>(); // CXXConstructorDecl PersistentBase<T>
  emit<_ast2590>(); // ParmVarDecl other
  emit<_ast2591>(); // LValueReferenceType const PersistentBase<T> &
  emit<_ast2592>(); // FunctionProtoType void (const PersistentBase<T> &)
  emit<_ast2593>(); // CXXMethodDecl operator=
  emit<_ast2594>(); // ParmVarDecl
  emit<_ast2596>(); // CXXRecordDecl NonCopyablePersistentTraits
  emit<_ast2597>(); // TypedefDecl NonCopyablePersistent
  emit<_ast2598>(); // TypedefType
                    // v8::NonCopyablePersistentTraits::NonCopyablePersistent
  emit<_ast2599>(); // VarDecl kResetInDestructor
  emit<_ast2600>(); // BuiltinType const bool
  emit<_ast2604>(); // CXXMethodDecl Copy
  emit<_ast2605>(); // ParmVarDecl source
  emit<_ast2606>(); // LValueReferenceType const Persistent<S, M> &
  emit<_ast2607>(); // TemplateSpecializationType const Persistent<S, M>
  emit<_ast2609>(); // ParmVarDecl dest
  emit<_ast2610>(); // PointerType
                    // v8::NonCopyablePersistentTraits::NonCopyablePersistent *
  emit<_ast2611>(); // FunctionProtoType void (const Persistent<S, M> &,
                    // v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
  emit<_ast2614>(); // CXXMethodDecl Uncompilable
  emit<_ast2617>(); // CXXRecordDecl CopyablePersistentTraits
  emit<_ast2619>(); // CXXRecordDecl CopyablePersistentTraits
  emit<_ast2620>(); // TypedefDecl CopyablePersistent
  emit<_ast2621>(); // TypedefType
                    // v8::CopyablePersistentTraits::CopyablePersistent
  emit<_ast2622>(); // VarDecl kResetInDestructor
  emit<_ast2626>(); // CXXMethodDecl Copy
  emit<_ast2627>(); // ParmVarDecl source
  emit<_ast2628>(); // LValueReferenceType const Persistent<S, M> &
  emit<_ast2629>(); // TemplateSpecializationType const Persistent<S, M>
  emit<_ast2631>(); // ParmVarDecl dest
  emit<_ast2632>(); // PointerType
                    // v8::CopyablePersistentTraits::CopyablePersistent *
  emit<_ast2633>(); // FunctionProtoType void (const Persistent<S, M> &,
                    // v8::CopyablePersistentTraits::CopyablePersistent *)
  emit<_ast2637>(); // CXXRecordDecl Persistent
  emit<_ast2638>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2639>(); // PointerType Persistent<T, M> *
  emit<_ast2642>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2643>(); // ParmVarDecl isolate
  emit<_ast2644>(); // ParmVarDecl that
  emit<_ast2646>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2650>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2651>(); // ParmVarDecl isolate
  emit<_ast2652>(); // ParmVarDecl that
  emit<_ast2653>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2654>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2656>(); // FunctionProtoType void (v8::Isolate *, const
                    // Persistent<S, M2> &)
  emit<_ast2657>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2658>(); // ParmVarDecl that
  emit<_ast2659>(); // LValueReferenceType const Persistent<T, M> &
  emit<_ast2660>(); // InjectedClassNameType const Persistent<T, M>
  emit<_ast2661>(); // FunctionProtoType void (const Persistent<T, M> &)
  emit<_ast2665>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2666>(); // ParmVarDecl that
  emit<_ast2667>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2668>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2670>(); // FunctionProtoType void (const Persistent<S, M2> &)
  emit<_ast2671>(); // CXXMethodDecl operator=
  emit<_ast2672>(); // ParmVarDecl that
  emit<_ast2673>(); // FunctionProtoType Persistent<T, M> &(const Persistent<T,
                    // M> &)
  emit<_ast2674>(); // LValueReferenceType Persistent<T, M> &
  emit<_ast2678>(); // CXXMethodDecl operator=
  emit<_ast2679>(); // ParmVarDecl that
  emit<_ast2680>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2681>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2683>(); // FunctionProtoType Persistent<T, M> &(const Persistent<S,
                    // M2> &)
  emit<_ast2684>(); // CXXDestructorDecl ~Persistent<T, M>
  emit<_ast2687>(); // CXXMethodDecl Cast
  emit<_ast2688>(); // ParmVarDecl that
  emit<_ast2689>(); // LValueReferenceType const Persistent<S> &
  emit<_ast2690>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast2692>(); // FunctionProtoType Persistent<T> &(const Persistent<S> &)
  emit<_ast2693>(); // LValueReferenceType Persistent<T> &
  emit<_ast2697>(); // CXXMethodDecl As
  emit<_ast2698>(); // FunctionProtoType Persistent<S> &() const
  emit<_ast2699>(); // LValueReferenceType Persistent<S> &
  emit<_ast2701>(); // PointerType const Persistent<T, M> *
  emit<_ast2703>(); // CXXRecordDecl Global
  emit<_ast2704>(); // CXXConstructorDecl Global<T>
  emit<_ast2705>(); // PointerType Global<T> *
  emit<_ast2708>(); // CXXConstructorDecl Global<T>
  emit<_ast2709>(); // ParmVarDecl isolate
  emit<_ast2710>(); // ParmVarDecl that
  emit<_ast2712>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2715>(); // CXXConstructorDecl Global<T>
  emit<_ast2716>(); // ParmVarDecl isolate
  emit<_ast2717>(); // ParmVarDecl that
  emit<_ast2718>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2719>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2721>(); // FunctionProtoType void (v8::Isolate *, const
                    // PersistentBase<S> &)
  emit<_ast2722>(); // CXXConstructorDecl Global<T>
  emit<_ast2723>(); // ParmVarDecl other
  emit<_ast2724>(); // RValueReferenceType Global<T> &&
  emit<_ast2725>(); // FunctionProtoType void (Global<T> &&)
  emit<_ast2726>(); // CXXDestructorDecl ~Global<T>
  emit<_ast2729>(); // CXXMethodDecl operator=
  emit<_ast2730>(); // ParmVarDecl rhs
  emit<_ast2731>(); // RValueReferenceType Global<S> &&
  emit<_ast2733>(); // FunctionProtoType Global<T> &(Global<S> &&)
  emit<_ast2734>(); // LValueReferenceType Global<T> &
  emit<_ast2735>(); // CXXMethodDecl Pass
  emit<_ast2736>(); // FunctionProtoType Global<T> ()
  emit<_ast2737>(); // TypedefDecl MoveOnlyTypeForCPP03
  emit<_ast2738>(); // TypedefType v8::Global::MoveOnlyTypeForCPP03
  emit<_ast2739>(); // CXXConstructorDecl Global<T>
  emit<_ast2740>(); // ParmVarDecl
  emit<_ast2741>(); // LValueReferenceType const Global<T> &
  emit<_ast2742>(); // InjectedClassNameType const Global<T>
  emit<_ast2743>(); // FunctionProtoType void (const Global<T> &)
  emit<_ast2744>(); // CXXMethodDecl operator=
  emit<_ast2745>(); // ParmVarDecl
  emit<_ast2747>(); // TypeAliasDecl UniquePersistent
  emit<_ast2748>(); // TypedefType v8::UniquePersistent
  emit<_ast2751>(); // CXXRecordDecl TracedGlobal
  emit<_ast2752>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2753>(); // PointerType TracedGlobal<T> *
  emit<_ast2754>(); // CXXDestructorDecl ~TracedGlobal<T>
  emit<_ast2757>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2758>(); // ParmVarDecl isolate
  emit<_ast2759>(); // ParmVarDecl that
  emit<_ast2761>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2762>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2763>(); // ParmVarDecl other
  emit<_ast2764>(); // RValueReferenceType TracedGlobal<T> &&
  emit<_ast2765>(); // FunctionProtoType void (TracedGlobal<T> &&)
  emit<_ast2768>(); // CXXMethodDecl operator=
  emit<_ast2769>(); // ParmVarDecl rhs
  emit<_ast2770>(); // RValueReferenceType TracedGlobal<S> &&
  emit<_ast2772>(); // FunctionProtoType TracedGlobal<T> &(TracedGlobal<S> &&)
  emit<_ast2773>(); // LValueReferenceType TracedGlobal<T> &
  emit<_ast2774>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2775>(); // ParmVarDecl
  emit<_ast2776>(); // LValueReferenceType const TracedGlobal<T> &
  emit<_ast2777>(); // InjectedClassNameType const TracedGlobal<T>
  emit<_ast2778>(); // FunctionProtoType void (const TracedGlobal<T> &)
  emit<_ast2779>(); // CXXMethodDecl operator=
  emit<_ast2780>(); // ParmVarDecl
  emit<_ast2781>(); // CXXMethodDecl IsEmpty
  emit<_ast2782>(); // PointerType const TracedGlobal<T> *
  emit<_ast2783>(); // CXXMethodDecl Reset
  emit<_ast2786>(); // CXXMethodDecl Reset
  emit<_ast2787>(); // ParmVarDecl isolate
  emit<_ast2788>(); // ParmVarDecl other
  emit<_ast2789>(); // LValueReferenceType const Local<S> &
  emit<_ast2790>(); // TemplateSpecializationType const Local<S>
  emit<_ast2792>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast2793>(); // CXXMethodDecl Get
  emit<_ast2794>(); // ParmVarDecl isolate
  emit<_ast2795>(); // FunctionProtoType Local<T> (v8::Isolate *) const
  emit<_ast2799>(); // CXXMethodDecl As
  emit<_ast2800>(); // FunctionProtoType TracedGlobal<S> &() const
  emit<_ast2801>(); // LValueReferenceType TracedGlobal<S> &
  emit<_ast2805>(); // CXXMethodDecl operator==
  emit<_ast2806>(); // ParmVarDecl that
  emit<_ast2807>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2808>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2810>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2813>(); // CXXMethodDecl operator==
  emit<_ast2814>(); // ParmVarDecl that
  emit<_ast2815>(); // LValueReferenceType const Local<S> &
  emit<_ast2816>(); // TemplateSpecializationType const Local<S>
  emit<_ast2818>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2821>(); // CXXMethodDecl operator!=
  emit<_ast2822>(); // ParmVarDecl that
  emit<_ast2823>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2824>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2826>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2829>(); // CXXMethodDecl operator!=
  emit<_ast2830>(); // ParmVarDecl that
  emit<_ast2831>(); // LValueReferenceType const Local<S> &
  emit<_ast2832>(); // TemplateSpecializationType const Local<S>
  emit<_ast2834>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2835>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2836>(); // ParmVarDecl class_id
  emit<_ast2837>(); // CXXMethodDecl WrapperClassId
  emit<_ast2838>(); // CXXMethodDecl SetFinalizationCallback
  emit<_ast2839>(); // ParmVarDecl parameter
  emit<_ast2840>(); // ParmVarDecl callback
  emit<_ast2841>(); // CXXRecordDecl HandleScope
  emit<_ast2842>(); // RecordType v8::HandleScope
  emit<_ast2843>(); // CXXRecordDecl HandleScope
  emit<_ast2844>(); // CXXConstructorDecl HandleScope
  emit<_ast2845>(); // ParmVarDecl isolate
  emit<_ast2846>(); // FunctionProtoType void (v8::Isolate *)
  emit<_ast2847>(); // PointerType v8::HandleScope *
  emit<_ast2848>(); // CXXDestructorDecl ~HandleScope
  emit<_ast2849>(); // FunctionProtoType void ()
  emit<_ast2850>(); // CXXMethodDecl NumberOfHandles
  emit<_ast2851>(); // ParmVarDecl isolate
  emit<_ast2852>(); // FunctionProtoType int (v8::Isolate *)
  emit<_ast2853>(); // CXXMethodDecl GetIsolate
  emit<_ast2854>(); // PointerType const v8::HandleScope *
  emit<_ast2855>(); // RecordType const v8::HandleScope
  emit<_ast2856>(); // CXXConstructorDecl HandleScope
  emit<_ast2857>(); // ParmVarDecl
  emit<_ast2858>(); // LValueReferenceType const v8::HandleScope &
  emit<_ast2859>(); // FunctionProtoType void (const v8::HandleScope &)
  emit<_ast2860>(); // CXXMethodDecl operator=
  emit<_ast2861>(); // ParmVarDecl
  emit<_ast2862>(); // CXXConstructorDecl HandleScope
  emit<_ast2863>(); // FunctionProtoType void ()
  emit<_ast2864>(); // CXXMethodDecl Initialize
  emit<_ast2865>(); // ParmVarDecl isolate
  emit<_ast2866>(); // CXXMethodDecl CreateHandle
  emit<_ast2867>(); // ParmVarDecl isolate
  emit<_ast2868>(); // PointerType internal::Isolate *
  emit<_ast2870>(); // ParmVarDecl value
  emit<_ast2872>(); // FunctionProtoType internal::Address *(internal::Isolate
                    // *, internal::Address)
  emit<_ast2873>(); // PointerType internal::Address *
  emit<_ast2874>(); // CXXRecordDecl EscapableHandleScope
  emit<_ast2875>(); // CXXConstructorDecl EscapableHandleScope
  emit<_ast2876>(); // ParmVarDecl isolate
  emit<_ast2877>(); // PointerType v8::EscapableHandleScope *
  emit<_ast2878>(); // CXXDestructorDecl ~EscapableHandleScope
  emit<_ast2879>(); // FunctionProtoType void ()
  emit<_ast2882>(); // CXXMethodDecl Escape
  emit<_ast2883>(); // ParmVarDecl value
  emit<_ast2885>(); // FunctionProtoType Local<T> (Local<T>)
  emit<_ast2889>(); // CXXMethodDecl EscapeMaybe
  emit<_ast2890>(); // ParmVarDecl value
  emit<_ast2892>(); // FunctionProtoType MaybeLocal<T> (MaybeLocal<T>)
  emit<_ast2894>(); // CXXConstructorDecl EscapableHandleScope
  emit<_ast2895>(); // ParmVarDecl
  emit<_ast2896>(); // LValueReferenceType const v8::EscapableHandleScope &
  emit<_ast2897>(); // RecordType const v8::EscapableHandleScope
  emit<_ast2898>(); // FunctionProtoType void (const v8::EscapableHandleScope &)
  emit<_ast2899>(); // CXXMethodDecl operator=
  emit<_ast2900>(); // ParmVarDecl
  emit<_ast2901>(); // CXXRecordDecl SealHandleScope
  emit<_ast2902>(); // RecordType v8::SealHandleScope
  emit<_ast2903>(); // FieldDecl isolate_
  emit<_ast2904>(); // PointerType internal::Isolate *const
  emit<_ast2905>(); // FieldDecl prev_limit_
  emit<_ast2906>(); // FieldDecl prev_sealed_level_
  emit<_ast2907>(); // CXXRecordDecl SealHandleScope
  emit<_ast2908>(); // CXXConstructorDecl SealHandleScope
  emit<_ast2909>(); // ParmVarDecl isolate
  emit<_ast2910>(); // PointerType v8::SealHandleScope *
  emit<_ast2911>(); // CXXDestructorDecl ~SealHandleScope
  emit<_ast2912>(); // FunctionProtoType void ()
  emit<_ast2913>(); // CXXConstructorDecl SealHandleScope
  emit<_ast2914>(); // ParmVarDecl
  emit<_ast2915>(); // LValueReferenceType const v8::SealHandleScope &
  emit<_ast2916>(); // RecordType const v8::SealHandleScope
  emit<_ast2917>(); // FunctionProtoType void (const v8::SealHandleScope &)
  emit<_ast2918>(); // CXXMethodDecl operator=
  emit<_ast2919>(); // ParmVarDecl
  emit<_ast2920>(); // CXXRecordDecl Data
  emit<_ast2921>(); // CXXRecordDecl ScriptOrModule
  emit<_ast2922>(); // RecordType v8::ScriptOrModule
  emit<_ast2923>(); // CXXRecordDecl ScriptOrModule
  emit<_ast2924>(); // CXXMethodDecl GetResourceName
  emit<_ast2925>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast2927>(); // PointerType v8::ScriptOrModule *
  emit<_ast2928>(); // CXXMethodDecl GetHostDefinedOptions
  emit<_ast2929>(); // FunctionProtoType Local<v8::PrimitiveArray> ()
  emit<_ast2931>(); // CXXRecordDecl PrimitiveArray
  emit<_ast2932>(); // CXXMethodDecl New
  emit<_ast2933>(); // ParmVarDecl isolate
  emit<_ast2934>(); // ParmVarDecl length
  emit<_ast2935>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate
                    // *, int)
  emit<_ast2937>(); // CXXMethodDecl Length
  emit<_ast2938>(); // FunctionProtoType int () const
  emit<_ast2939>(); // PointerType const v8::PrimitiveArray *
  emit<_ast2940>(); // RecordType const v8::PrimitiveArray
  emit<_ast2941>(); // CXXMethodDecl Set
  emit<_ast2942>(); // ParmVarDecl isolate
  emit<_ast2943>(); // ParmVarDecl index
  emit<_ast2944>(); // ParmVarDecl item
  emit<_ast2946>(); // FunctionProtoType void (v8::Isolate *, int,
                    // Local<v8::Primitive>)
  emit<_ast2947>(); // PointerType v8::PrimitiveArray *
  emit<_ast2948>(); // CXXMethodDecl Get
  emit<_ast2949>(); // ParmVarDecl isolate
  emit<_ast2950>(); // ParmVarDecl index
  emit<_ast2951>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *,
                    // int)
  emit<_ast2953>(); // CXXRecordDecl ScriptOriginOptions
  emit<_ast2954>(); // RecordType v8::ScriptOriginOptions
  emit<_ast2955>(); // FieldDecl flags_
  emit<_ast2956>(); // CXXRecordDecl ScriptOriginOptions
  emit<_ast2957>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2958>(); // ParmVarDecl is_shared_cross_origin
  emit<_ast2959>(); // ParmVarDecl is_opaque
  emit<_ast2960>(); // ParmVarDecl is_wasm
  emit<_ast2961>(); // ParmVarDecl is_module
  emit<_ast2962>(); // FunctionProtoType void (bool, bool, bool, bool)
  emit<_ast2963>(); // PointerType v8::ScriptOriginOptions *
  emit<_ast2964>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2965>(); // ParmVarDecl flags
  emit<_ast2966>(); // FunctionProtoType void (int)
  emit<_ast2967>(); // CXXMethodDecl IsSharedCrossOrigin
  emit<_ast2968>(); // PointerType const v8::ScriptOriginOptions *
  emit<_ast2969>(); // RecordType const v8::ScriptOriginOptions
  emit<_ast2970>(); // CXXMethodDecl IsOpaque
  emit<_ast2971>(); // CXXMethodDecl IsWasm
  emit<_ast2972>(); // CXXMethodDecl IsModule
  emit<_ast2973>(); // CXXMethodDecl Flags
  emit<_ast2974>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2975>(); // ParmVarDecl
  emit<_ast2976>(); // LValueReferenceType const v8::ScriptOriginOptions &
  emit<_ast2977>(); // FunctionProtoType void (const v8::ScriptOriginOptions &)
                    // noexcept
  emit<_ast2978>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2979>(); // ParmVarDecl
  emit<_ast2980>(); // RValueReferenceType v8::ScriptOriginOptions &&
  emit<_ast2981>(); // FunctionProtoType void (v8::ScriptOriginOptions &&)
                    // noexcept
  emit<_ast2982>(); // CXXDestructorDecl ~ScriptOriginOptions
  emit<_ast2983>(); // CXXMethodDecl operator=
  emit<_ast2984>(); // ParmVarDecl
  emit<_ast2985>(); // FunctionProtoType v8::ScriptOriginOptions &(const
                    // v8::ScriptOriginOptions &)
  emit<_ast2986>(); // LValueReferenceType v8::ScriptOriginOptions &
  emit<_ast2987>(); // CXXMethodDecl operator=
  emit<_ast2988>(); // ParmVarDecl
  emit<_ast2989>(); // FunctionProtoType v8::ScriptOriginOptions
                    // &(v8::ScriptOriginOptions &&)
  emit<_ast2990>(); // CXXRecordDecl ScriptOrigin
  emit<_ast2991>(); // RecordType v8::ScriptOrigin
  emit<_ast2992>(); // FieldDecl resource_name_
  emit<_ast2994>(); // FieldDecl resource_line_offset_
  emit<_ast2996>(); // FieldDecl resource_column_offset_
  emit<_ast2998>(); // FieldDecl options_
  emit<_ast2999>(); // FieldDecl script_id_
  emit<_ast3001>(); // FieldDecl source_map_url_
  emit<_ast3003>(); // FieldDecl host_defined_options_
  emit<_ast3005>(); // CXXRecordDecl ScriptOrigin
  emit<_ast3006>(); // CXXConstructorDecl ScriptOrigin
  emit<_ast3007>(); // ParmVarDecl resource_name
  emit<_ast3009>(); // ParmVarDecl resource_line_offset
  emit<_ast3011>(); // ParmVarDecl resource_column_offset
  emit<_ast3013>(); // ParmVarDecl resource_is_shared_cross_origin
  emit<_ast3015>(); // ParmVarDecl script_id
  emit<_ast3017>(); // ParmVarDecl source_map_url
  emit<_ast3019>(); // ParmVarDecl resource_is_opaque
  emit<_ast3021>(); // ParmVarDecl is_wasm
  emit<_ast3023>(); // ParmVarDecl is_module
  emit<_ast3025>(); // ParmVarDecl host_defined_options
  emit<_ast3027>(); // FunctionProtoType void (Local<v8::Value>,
                    // Local<v8::Integer>, Local<v8::Integer>,
                    // Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>,
                    // Local<v8::Boolean>, Local<v8::Boolean>,
                    // Local<v8::Boolean>, Local<v8::PrimitiveArray>)
  emit<_ast3028>(); // PointerType v8::ScriptOrigin *
  emit<_ast3029>(); // CXXMethodDecl ResourceName
  emit<_ast3030>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast3032>(); // PointerType const v8::ScriptOrigin *
  emit<_ast3033>(); // RecordType const v8::ScriptOrigin
  emit<_ast3034>(); // CXXMethodDecl ResourceLineOffset
  emit<_ast3035>(); // FunctionProtoType Local<v8::Integer> () const
  emit<_ast3037>(); // CXXMethodDecl ResourceColumnOffset
  emit<_ast3038>(); // FunctionProtoType Local<v8::Integer> () const
  emit<_ast3040>(); // CXXMethodDecl ScriptID
  emit<_ast3041>(); // FunctionProtoType Local<v8::Integer> () const
  emit<_ast3043>(); // CXXMethodDecl SourceMapUrl
  emit<_ast3044>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast3046>(); // CXXMethodDecl HostDefinedOptions
  emit<_ast3047>(); // FunctionProtoType Local<v8::PrimitiveArray> () const
  emit<_ast3049>(); // CXXMethodDecl Options
  emit<_ast3050>(); // FunctionProtoType v8::ScriptOriginOptions () const
  emit<_ast3051>(); // CXXConstructorDecl ScriptOrigin
  emit<_ast3052>(); // ParmVarDecl
  emit<_ast3053>(); // LValueReferenceType const v8::ScriptOrigin &
  emit<_ast3054>(); // FunctionProtoType void (const v8::ScriptOrigin &)
  emit<_ast3055>(); // CXXMethodDecl operator=
  emit<_ast3056>(); // ParmVarDecl
  emit<_ast3057>(); // RValueReferenceType v8::ScriptOrigin &&
  emit<_ast3058>(); // FunctionProtoType v8::ScriptOrigin &(v8::ScriptOrigin &&)
  emit<_ast3059>(); // LValueReferenceType v8::ScriptOrigin &
  emit<_ast3060>(); // CXXConstructorDecl ScriptOrigin
  emit<_ast3061>(); // ParmVarDecl
  emit<_ast3062>(); // FunctionProtoType void (v8::ScriptOrigin &&)
  emit<_ast3063>(); // CXXRecordDecl UnboundScript
  emit<_ast3064>(); // RecordType v8::UnboundScript
  emit<_ast3065>(); // CXXRecordDecl UnboundScript
  emit<_ast3066>(); // CXXMethodDecl BindToCurrentContext
  emit<_ast3067>(); // FunctionProtoType Local<v8::Script> ()
  emit<_ast3069>(); // PointerType v8::UnboundScript *
  emit<_ast3070>(); // CXXMethodDecl GetId
  emit<_ast3071>(); // FunctionProtoType int ()
  emit<_ast3072>(); // CXXMethodDecl GetScriptName
  emit<_ast3073>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3075>(); // CXXMethodDecl GetSourceURL
  emit<_ast3076>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3078>(); // CXXMethodDecl GetSourceMappingURL
  emit<_ast3079>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3081>(); // CXXMethodDecl GetLineNumber
  emit<_ast3082>(); // ParmVarDecl code_pos
  emit<_ast3083>(); // FunctionProtoType int (int)
  emit<_ast3084>(); // VarDecl kNoScriptId
  emit<_ast3085>(); // CXXRecordDecl UnboundModuleScript
  emit<_ast3086>(); // RecordType v8::UnboundModuleScript
  emit<_ast3087>(); // CXXRecordDecl UnboundModuleScript
  emit<_ast3088>(); // CXXRecordDecl Location
  emit<_ast3089>(); // RecordType v8::Location
  emit<_ast3090>(); // FieldDecl line_number_
  emit<_ast3091>(); // FieldDecl column_number_
  emit<_ast3092>(); // CXXRecordDecl Location
  emit<_ast3093>(); // CXXMethodDecl GetLineNumber
  emit<_ast3094>(); // PointerType v8::Location *
  emit<_ast3095>(); // CXXMethodDecl GetColumnNumber
  emit<_ast3096>(); // CXXConstructorDecl Location
  emit<_ast3097>(); // ParmVarDecl line_number
  emit<_ast3098>(); // ParmVarDecl column_number
  emit<_ast3099>(); // FunctionProtoType void (int, int)
  emit<_ast3100>(); // CXXRecordDecl Module
  emit<_ast3101>(); // RecordType v8::Module
  emit<_ast3102>(); // CXXRecordDecl Module
  emit<_ast3110>(); // CXXMethodDecl GetStatus
  emit<_ast3111>(); // FunctionProtoType v8::Module::Status () const
  emit<_ast3112>(); // EnumType v8::Module::Status
  emit<_ast3113>(); // PointerType const v8::Module *
  emit<_ast3114>(); // RecordType const v8::Module
  emit<_ast3115>(); // CXXMethodDecl GetException
  emit<_ast3116>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast3118>(); // CXXMethodDecl GetModuleRequestsLength
  emit<_ast3119>(); // CXXMethodDecl GetModuleRequest
  emit<_ast3120>(); // ParmVarDecl i
  emit<_ast3121>(); // FunctionProtoType Local<v8::String> (int) const
  emit<_ast3123>(); // CXXMethodDecl GetModuleRequestLocation
  emit<_ast3124>(); // ParmVarDecl i
  emit<_ast3125>(); // FunctionProtoType v8::Location (int) const
  emit<_ast3126>(); // CXXMethodDecl GetIdentityHash
  emit<_ast3127>(); // TypedefDecl ResolveCallback
  emit<_ast3128>(); // TypedefType v8::Module::ResolveCallback
  emit<_ast3129>(); // CXXMethodDecl InstantiateModule
  emit<_ast3130>(); // ParmVarDecl context
  emit<_ast3132>(); // ParmVarDecl callback
  emit<_ast3133>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // v8::Module::ResolveCallback)
  emit<_ast3135>(); // PointerType v8::Module *
  emit<_ast3136>(); // CXXMethodDecl Evaluate
  emit<_ast3137>(); // ParmVarDecl context
  emit<_ast3139>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>)
  emit<_ast3141>(); // CXXMethodDecl GetModuleNamespace
  emit<_ast3142>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3144>(); // CXXMethodDecl GetUnboundModuleScript
  emit<_ast3145>(); // FunctionProtoType Local<v8::UnboundModuleScript> ()
  emit<_ast3147>(); // CXXRecordDecl Script
  emit<_ast3148>(); // CXXMethodDecl Compile
  emit<_ast3149>(); // ParmVarDecl context
  emit<_ast3151>(); // ParmVarDecl source
  emit<_ast3153>(); // ParmVarDecl origin
  emit<_ast3154>(); // FunctionProtoType MaybeLocal<v8::Script>
                    // (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin
                    // *)
  emit<_ast3156>(); // CXXMethodDecl Run
  emit<_ast3157>(); // ParmVarDecl context
  emit<_ast3159>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>)
  emit<_ast3161>(); // PointerType v8::Script *
  emit<_ast3162>(); // CXXMethodDecl GetUnboundScript
  emit<_ast3163>(); // FunctionProtoType Local<v8::UnboundScript> ()
  emit<_ast3165>(); // CXXRecordDecl ScriptCompiler
  emit<_ast3166>(); // RecordType v8::ScriptCompiler
  emit<_ast3167>(); // CXXRecordDecl ScriptCompiler
  emit<_ast3168>(); // CXXRecordDecl CachedData
  emit<_ast3169>(); // RecordType v8::ScriptCompiler::CachedData
  emit<_ast3170>(); // FieldDecl data
  emit<_ast3171>(); // PointerType const uint8_t *
  emit<_ast3172>(); // TypedefType const uint8_t
  emit<_ast3173>(); // TypedefType uint8_t
  emit<_ast3174>(); // FieldDecl length
  emit<_ast3175>(); // FieldDecl rejected
  emit<_ast3176>(); // FieldDecl buffer_policy
  emit<_ast3177>(); // EnumType v8::ScriptCompiler::CachedData::BufferPolicy
  emit<_ast3179>(); // CXXRecordDecl CachedData
  emit<_ast3182>(); // CXXConstructorDecl CachedData
  emit<_ast3183>(); // PointerType v8::ScriptCompiler::CachedData *
  emit<_ast3184>(); // CXXConstructorDecl CachedData
  emit<_ast3185>(); // ParmVarDecl data
  emit<_ast3186>(); // ParmVarDecl length
  emit<_ast3187>(); // ParmVarDecl buffer_policy
  emit<_ast3188>(); // FunctionProtoType void (const uint8_t *, int,
                    // v8::ScriptCompiler::CachedData::BufferPolicy)
  emit<_ast3189>(); // CXXDestructorDecl ~CachedData
  emit<_ast3190>(); // CXXConstructorDecl CachedData
  emit<_ast3191>(); // ParmVarDecl
  emit<_ast3192>(); // LValueReferenceType const v8::ScriptCompiler::CachedData
                    // &
  emit<_ast3193>(); // RecordType const v8::ScriptCompiler::CachedData
  emit<_ast3194>(); // FunctionProtoType void (const
                    // v8::ScriptCompiler::CachedData &)
  emit<_ast3195>(); // CXXMethodDecl operator=
  emit<_ast3196>(); // ParmVarDecl
  emit<_ast3197>(); // FunctionProtoType v8::ScriptCompiler::CachedData &(const
                    // v8::ScriptCompiler::CachedData &)
  emit<_ast3198>(); // LValueReferenceType v8::ScriptCompiler::CachedData &
  emit<_ast3199>(); // CXXRecordDecl Source
  emit<_ast3200>(); // RecordType v8::ScriptCompiler::Source
  emit<_ast3201>(); // FieldDecl source_string
  emit<_ast3203>(); // FieldDecl resource_name
  emit<_ast3205>(); // FieldDecl resource_line_offset
  emit<_ast3207>(); // FieldDecl resource_column_offset
  emit<_ast3209>(); // FieldDecl resource_options
  emit<_ast3210>(); // FieldDecl source_map_url
  emit<_ast3212>(); // FieldDecl host_defined_options
  emit<_ast3214>(); // FieldDecl cached_data
  emit<_ast3215>(); // CXXRecordDecl Source
  emit<_ast3216>(); // CXXConstructorDecl Source
  emit<_ast3217>(); // ParmVarDecl source_string
  emit<_ast3219>(); // ParmVarDecl origin
  emit<_ast3220>(); // ParmVarDecl cached_data
  emit<_ast3221>(); // FunctionProtoType void (Local<v8::String>, const
                    // v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
  emit<_ast3222>(); // PointerType v8::ScriptCompiler::Source *
  emit<_ast3223>(); // CXXConstructorDecl Source
  emit<_ast3224>(); // ParmVarDecl source_string
  emit<_ast3226>(); // ParmVarDecl cached_data
  emit<_ast3227>(); // FunctionProtoType void (Local<v8::String>,
                    // v8::ScriptCompiler::CachedData *)
  emit<_ast3228>(); // CXXDestructorDecl ~Source
  emit<_ast3229>(); // CXXMethodDecl GetCachedData
  emit<_ast3230>(); // FunctionProtoType const v8::ScriptCompiler::CachedData
                    // *() const
  emit<_ast3231>(); // PointerType const v8::ScriptCompiler::CachedData *
  emit<_ast3232>(); // PointerType const v8::ScriptCompiler::Source *
  emit<_ast3233>(); // RecordType const v8::ScriptCompiler::Source
  emit<_ast3234>(); // CXXMethodDecl GetResourceOptions
  emit<_ast3235>(); // FunctionProtoType const v8::ScriptOriginOptions &() const
  emit<_ast3236>(); // CXXConstructorDecl Source
  emit<_ast3237>(); // ParmVarDecl
  emit<_ast3238>(); // LValueReferenceType const v8::ScriptCompiler::Source &
  emit<_ast3239>(); // FunctionProtoType void (const v8::ScriptCompiler::Source
                    // &)
  emit<_ast3240>(); // CXXMethodDecl operator=
  emit<_ast3241>(); // ParmVarDecl
  emit<_ast3242>(); // FunctionProtoType v8::ScriptCompiler::Source &(const
                    // v8::ScriptCompiler::Source &)
  emit<_ast3243>(); // LValueReferenceType v8::ScriptCompiler::Source &
  emit<_ast3244>(); // CXXRecordDecl ExternalSourceStream
  emit<_ast3245>(); // RecordType v8::ScriptCompiler::ExternalSourceStream
  emit<_ast3246>(); // CXXRecordDecl ExternalSourceStream
  emit<_ast3247>(); // CXXDestructorDecl ~ExternalSourceStream
  emit<_ast3248>(); // FunctionProtoType void ()
  emit<_ast3249>(); // PointerType v8::ScriptCompiler::ExternalSourceStream *
  emit<_ast3250>(); // CXXMethodDecl GetMoreData
  emit<_ast3251>(); // ParmVarDecl src
  emit<_ast3252>(); // PointerType const uint8_t **
  emit<_ast3253>(); // FunctionProtoType size_t (const uint8_t **)
  emit<_ast3254>(); // TypedefType size_t
  emit<_ast3255>(); // CXXMethodDecl SetBookmark
  emit<_ast3256>(); // FunctionProtoType bool ()
  emit<_ast3257>(); // CXXMethodDecl ResetToBookmark
  emit<_ast3258>(); // CXXMethodDecl operator=
  emit<_ast3259>(); // ParmVarDecl
  emit<_ast3260>(); // LValueReferenceType const
                    // v8::ScriptCompiler::ExternalSourceStream &
  emit<_ast3261>(); // RecordType const v8::ScriptCompiler::ExternalSourceStream
  emit<_ast3262>(); // FunctionProtoType
                    // v8::ScriptCompiler::ExternalSourceStream &(const
                    // v8::ScriptCompiler::ExternalSourceStream &)
  emit<_ast3263>(); // LValueReferenceType
                    // v8::ScriptCompiler::ExternalSourceStream &
  emit<_ast3264>(); // CXXRecordDecl StreamedSource
  emit<_ast3265>(); // RecordType v8::ScriptCompiler::StreamedSource
  emit<_ast3266>(); // FieldDecl impl_
  emit<_ast3268>(); // CXXRecordDecl StreamedSource
  emit<_ast3273>(); // CXXConstructorDecl StreamedSource
  emit<_ast3274>(); // ParmVarDecl source_stream
  emit<_ast3275>(); // ParmVarDecl encoding
  emit<_ast3276>(); // EnumType v8::ScriptCompiler::StreamedSource::Encoding
  emit<_ast3277>(); // FunctionProtoType void
                    // (v8::ScriptCompiler::ExternalSourceStream *,
                    // v8::ScriptCompiler::StreamedSource::Encoding)
  emit<_ast3278>(); // PointerType v8::ScriptCompiler::StreamedSource *
  emit<_ast3279>(); // CXXConstructorDecl StreamedSource
  emit<_ast3280>(); // ParmVarDecl source_stream
  emit<_ast3282>(); // ParmVarDecl encoding
  emit<_ast3283>(); // FunctionProtoType void
                    // (std::unique_ptr<ExternalSourceStream>,
                    // v8::ScriptCompiler::StreamedSource::Encoding)
  emit<_ast3284>(); // CXXDestructorDecl ~StreamedSource
  emit<_ast3285>(); // FunctionProtoType void ()
  emit<_ast3286>(); // CXXMethodDecl impl
  emit<_ast3287>(); // FunctionProtoType internal::ScriptStreamingData *() const
  emit<_ast3288>(); // PointerType internal::ScriptStreamingData *
  emit<_ast3290>(); // PointerType const v8::ScriptCompiler::StreamedSource *
  emit<_ast3291>(); // RecordType const v8::ScriptCompiler::StreamedSource
  emit<_ast3292>(); // CXXConstructorDecl StreamedSource
  emit<_ast3293>(); // ParmVarDecl
  emit<_ast3294>(); // LValueReferenceType const
                    // v8::ScriptCompiler::StreamedSource &
  emit<_ast3295>(); // FunctionProtoType void (const
                    // v8::ScriptCompiler::StreamedSource &)
  emit<_ast3296>(); // CXXMethodDecl operator=
  emit<_ast3297>(); // ParmVarDecl
  emit<_ast3298>(); // FunctionProtoType v8::ScriptCompiler::StreamedSource
                    // &(const v8::ScriptCompiler::StreamedSource &)
  emit<_ast3299>(); // LValueReferenceType v8::ScriptCompiler::StreamedSource &
  emit<_ast3300>(); // CXXRecordDecl ScriptStreamingTask
  emit<_ast3301>(); // RecordType v8::ScriptCompiler::ScriptStreamingTask
  emit<_ast3302>(); // FieldDecl data_
  emit<_ast3303>(); // CXXRecordDecl ScriptStreamingTask
  emit<_ast3304>(); // CXXMethodDecl Run
  emit<_ast3305>(); // PointerType v8::ScriptCompiler::ScriptStreamingTask *
  emit<_ast3326>(); // CXXMethodDecl CompileUnboundScript
  emit<_ast3327>(); // ParmVarDecl isolate
  emit<_ast3328>(); // ParmVarDecl source
  emit<_ast3329>(); // ParmVarDecl options
  emit<_ast3330>(); // EnumType v8::ScriptCompiler::CompileOptions
  emit<_ast3331>(); // ParmVarDecl no_cache_reason
  emit<_ast3332>(); // EnumType v8::ScriptCompiler::NoCacheReason
  emit<_ast3333>(); // FunctionProtoType MaybeLocal<v8::UnboundScript>
                    // (v8::Isolate *, v8::ScriptCompiler::Source *,
                    // v8::ScriptCompiler::CompileOptions,
                    // v8::ScriptCompiler::NoCacheReason)
  emit<_ast3335>(); // CXXMethodDecl Compile
  emit<_ast3336>(); // ParmVarDecl context
  emit<_ast3338>(); // ParmVarDecl source
  emit<_ast3339>(); // ParmVarDecl options
  emit<_ast3340>(); // ParmVarDecl no_cache_reason
  emit<_ast3341>(); // FunctionProtoType MaybeLocal<v8::Script>
                    // (Local<v8::Context>, v8::ScriptCompiler::Source *,
                    // v8::ScriptCompiler::CompileOptions,
                    // v8::ScriptCompiler::NoCacheReason)
  emit<_ast3343>(); // CXXMethodDecl StartStreamingScript
  emit<_ast3344>(); // ParmVarDecl isolate
  emit<_ast3345>(); // ParmVarDecl source
  emit<_ast3346>(); // ParmVarDecl options
  emit<_ast3347>(); // FunctionProtoType v8::ScriptCompiler::ScriptStreamingTask
                    // *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *,
                    // v8::ScriptCompiler::CompileOptions)
  emit<_ast3348>(); // CXXMethodDecl Compile
  emit<_ast3349>(); // ParmVarDecl context
  emit<_ast3351>(); // ParmVarDecl source
  emit<_ast3352>(); // ParmVarDecl full_source_string
  emit<_ast3354>(); // ParmVarDecl origin
  emit<_ast3355>(); // FunctionProtoType MaybeLocal<v8::Script>
                    // (Local<v8::Context>, v8::ScriptCompiler::StreamedSource
                    // *, Local<v8::String>, const v8::ScriptOrigin &)
  emit<_ast3357>(); // CXXMethodDecl CachedDataVersionTag
  emit<_ast3358>(); // FunctionProtoType uint32_t ()
  emit<_ast3359>(); // TypedefType uint32_t
  emit<_ast3360>(); // CXXMethodDecl CompileModule
  emit<_ast3361>(); // ParmVarDecl isolate
  emit<_ast3362>(); // ParmVarDecl source
  emit<_ast3363>(); // ParmVarDecl options
  emit<_ast3364>(); // ParmVarDecl no_cache_reason
  emit<_ast3365>(); // FunctionProtoType MaybeLocal<v8::Module> (v8::Isolate *,
                    // v8::ScriptCompiler::Source *,
                    // v8::ScriptCompiler::CompileOptions,
                    // v8::ScriptCompiler::NoCacheReason)
  emit<_ast3367>(); // CXXMethodDecl CompileFunctionInContext
  emit<_ast3368>(); // ParmVarDecl context
  emit<_ast3370>(); // ParmVarDecl source
  emit<_ast3371>(); // ParmVarDecl arguments_count
  emit<_ast3372>(); // ParmVarDecl arguments
  emit<_ast3374>(); // ParmVarDecl context_extension_count
  emit<_ast3375>(); // ParmVarDecl context_extensions
  emit<_ast3377>(); // ParmVarDecl options
  emit<_ast3378>(); // ParmVarDecl no_cache_reason
  emit<_ast3379>(); // FunctionProtoType MaybeLocal<v8::Function>
                    // (Local<v8::Context>, v8::ScriptCompiler::Source *,
                    // size_t, Local<v8::String> *, size_t, Local<v8::Object> *,
                    // v8::ScriptCompiler::CompileOptions,
                    // v8::ScriptCompiler::NoCacheReason)
  emit<_ast3381>(); // CXXMethodDecl CreateCodeCache
  emit<_ast3382>(); // ParmVarDecl unbound_script
  emit<_ast3384>(); // FunctionProtoType v8::ScriptCompiler::CachedData
                    // *(Local<v8::UnboundScript>)
  emit<_ast3385>(); // CXXMethodDecl CreateCodeCache
  emit<_ast3386>(); // ParmVarDecl unbound_module_script
  emit<_ast3388>(); // FunctionProtoType v8::ScriptCompiler::CachedData
                    // *(Local<v8::UnboundModuleScript>)
  emit<_ast3389>(); // CXXMethodDecl CreateCodeCacheForFunction
  emit<_ast3390>(); // ParmVarDecl function
  emit<_ast3392>(); // FunctionProtoType v8::ScriptCompiler::CachedData
                    // *(Local<v8::Function>)
  emit<_ast3393>(); // CXXRecordDecl Message
  emit<_ast3394>(); // RecordType v8::Message
  emit<_ast3395>(); // CXXRecordDecl Message
  emit<_ast3396>(); // CXXMethodDecl Get
  emit<_ast3397>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3399>(); // PointerType const v8::Message *
  emit<_ast3400>(); // RecordType const v8::Message
  emit<_ast3401>(); // CXXMethodDecl GetIsolate
  emit<_ast3402>(); // CXXMethodDecl GetSourceLine
  emit<_ast3403>(); // ParmVarDecl context
  emit<_ast3405>(); // FunctionProtoType MaybeLocal<v8::String>
                    // (Local<v8::Context>) const
  emit<_ast3407>(); // CXXMethodDecl GetScriptOrigin
  emit<_ast3408>(); // FunctionProtoType v8::ScriptOrigin () const
  emit<_ast3409>(); // CXXMethodDecl GetScriptResourceName
  emit<_ast3410>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast3412>(); // CXXMethodDecl GetStackTrace
  emit<_ast3413>(); // FunctionProtoType Local<v8::StackTrace> () const
  emit<_ast3415>(); // CXXMethodDecl GetLineNumber
  emit<_ast3416>(); // ParmVarDecl context
  emit<_ast3418>(); // FunctionProtoType Maybe<int> (Local<v8::Context>) const
  emit<_ast3420>(); // CXXMethodDecl GetStartPosition
  emit<_ast3421>(); // CXXMethodDecl GetEndPosition
  emit<_ast3422>(); // CXXMethodDecl ErrorLevel
  emit<_ast3423>(); // CXXMethodDecl GetStartColumn
  emit<_ast3424>(); // CXXMethodDecl GetStartColumn
  emit<_ast3425>(); // ParmVarDecl context
  emit<_ast3427>(); // FunctionProtoType Maybe<int> (Local<v8::Context>) const
  emit<_ast3429>(); // CXXMethodDecl GetEndColumn
  emit<_ast3430>(); // CXXMethodDecl GetEndColumn
  emit<_ast3431>(); // ParmVarDecl context
  emit<_ast3433>(); // FunctionProtoType Maybe<int> (Local<v8::Context>) const
  emit<_ast3435>(); // CXXMethodDecl IsSharedCrossOrigin
  emit<_ast3436>(); // CXXMethodDecl IsOpaque
  emit<_ast3437>(); // CXXMethodDecl PrintCurrentStackTrace
  emit<_ast3438>(); // ParmVarDecl isolate
  emit<_ast3439>(); // ParmVarDecl out
  emit<_ast3440>(); // PointerType FILE *
  emit<_ast3441>(); // TypedefType FILE
  emit<_ast3442>(); // TypedefDecl FILE
  emit<_ast3443>(); // LinkageSpecDecl
  emit<_ast3444>(); // FunctionProtoType void (v8::Isolate *, FILE *)
  emit<_ast3445>(); // VarDecl kNoLineNumberInfo
  emit<_ast3446>(); // VarDecl kNoColumnInfo
  emit<_ast3447>(); // VarDecl kNoScriptIdInfo
  emit<_ast3448>(); // CXXRecordDecl StackTrace
  emit<_ast3461>(); // CXXMethodDecl GetFrame
  emit<_ast3462>(); // ParmVarDecl isolate
  emit<_ast3463>(); // ParmVarDecl index
  emit<_ast3464>(); // FunctionProtoType Local<v8::StackFrame> (v8::Isolate *,
                    // uint32_t) const
  emit<_ast3466>(); // PointerType const v8::StackTrace *
  emit<_ast3467>(); // RecordType const v8::StackTrace
  emit<_ast3468>(); // CXXMethodDecl GetFrameCount
  emit<_ast3469>(); // CXXMethodDecl CurrentStackTrace
  emit<_ast3470>(); // ParmVarDecl isolate
  emit<_ast3471>(); // ParmVarDecl frame_limit
  emit<_ast3472>(); // ParmVarDecl options
  emit<_ast3473>(); // EnumType v8::StackTrace::StackTraceOptions
  emit<_ast3474>(); // FunctionProtoType Local<v8::StackTrace> (v8::Isolate *,
                    // int, v8::StackTrace::StackTraceOptions)
  emit<_ast3476>(); // CXXRecordDecl StackFrame
  emit<_ast3477>(); // CXXMethodDecl GetLineNumber
  emit<_ast3478>(); // PointerType const v8::StackFrame *
  emit<_ast3479>(); // RecordType const v8::StackFrame
  emit<_ast3480>(); // CXXMethodDecl GetColumn
  emit<_ast3481>(); // CXXMethodDecl GetScriptId
  emit<_ast3482>(); // CXXMethodDecl GetScriptName
  emit<_ast3483>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3485>(); // CXXMethodDecl GetScriptNameOrSourceURL
  emit<_ast3486>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3488>(); // CXXMethodDecl GetFunctionName
  emit<_ast3489>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3491>(); // CXXMethodDecl IsEval
  emit<_ast3492>(); // CXXMethodDecl IsConstructor
  emit<_ast3493>(); // CXXMethodDecl IsWasm
  emit<_ast3494>(); // CXXMethodDecl IsUserJavaScript
  emit<_ast3504>(); // CXXRecordDecl RegisterState
  emit<_ast3505>(); // RecordType v8::RegisterState
  emit<_ast3506>(); // FieldDecl pc
  emit<_ast3507>(); // FieldDecl sp
  emit<_ast3508>(); // FieldDecl fp
  emit<_ast3509>(); // FieldDecl lr
  emit<_ast3510>(); // CXXRecordDecl RegisterState
  emit<_ast3511>(); // CXXConstructorDecl RegisterState
  emit<_ast3512>(); // PointerType v8::RegisterState *
  emit<_ast3513>(); // CXXRecordDecl SampleInfo
  emit<_ast3514>(); // RecordType v8::SampleInfo
  emit<_ast3515>(); // FieldDecl frames_count
  emit<_ast3516>(); // FieldDecl vm_state
  emit<_ast3517>(); // EnumType v8::StateTag
  emit<_ast3518>(); // FieldDecl external_callback_entry
  emit<_ast3519>(); // CXXRecordDecl SampleInfo
  emit<_ast3520>(); // CXXRecordDecl MemoryRange
  emit<_ast3521>(); // RecordType v8::MemoryRange
  emit<_ast3522>(); // FieldDecl start
  emit<_ast3523>(); // PointerType const void *
  emit<_ast3524>(); // BuiltinType const void
  emit<_ast3525>(); // FieldDecl length_in_bytes
  emit<_ast3526>(); // CXXRecordDecl MemoryRange
  emit<_ast3527>(); // CXXRecordDecl JSEntryStub
  emit<_ast3528>(); // RecordType v8::JSEntryStub
  emit<_ast3529>(); // FieldDecl code
  emit<_ast3530>(); // CXXRecordDecl JSEntryStub
  emit<_ast3531>(); // CXXRecordDecl UnwindState
  emit<_ast3532>(); // RecordType v8::UnwindState
  emit<_ast3533>(); // FieldDecl code_range
  emit<_ast3534>(); // FieldDecl embedded_code_range
  emit<_ast3535>(); // FieldDecl js_entry_stub
  emit<_ast3536>(); // CXXRecordDecl UnwindState
  emit<_ast3537>(); // CXXRecordDecl JSON
  emit<_ast3538>(); // RecordType v8::JSON
  emit<_ast3539>(); // CXXRecordDecl JSON
  emit<_ast3540>(); // CXXMethodDecl Parse
  emit<_ast3541>(); // ParmVarDecl context
  emit<_ast3543>(); // ParmVarDecl json_string
  emit<_ast3545>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::String>)
  emit<_ast3547>(); // CXXMethodDecl Stringify
  emit<_ast3548>(); // ParmVarDecl context
  emit<_ast3550>(); // ParmVarDecl json_object
  emit<_ast3552>(); // ParmVarDecl gap
  emit<_ast3554>(); // FunctionProtoType MaybeLocal<v8::String>
                    // (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
  emit<_ast3556>(); // CXXRecordDecl ValueSerializer
  emit<_ast3557>(); // RecordType v8::ValueSerializer
  emit<_ast3558>(); // FieldDecl private_
  emit<_ast3559>(); // PointerType v8::ValueSerializer::PrivateData *
  emit<_ast3560>(); // RecordType v8::ValueSerializer::PrivateData
  emit<_ast3561>(); // CXXRecordDecl PrivateData
  emit<_ast3562>(); // CXXRecordDecl ValueSerializer
  emit<_ast3563>(); // CXXRecordDecl Delegate
  emit<_ast3564>(); // RecordType v8::ValueSerializer::Delegate
  emit<_ast3565>(); // CXXRecordDecl Delegate
  emit<_ast3566>(); // CXXDestructorDecl ~Delegate
  emit<_ast3567>(); // FunctionProtoType void ()
  emit<_ast3568>(); // PointerType v8::ValueSerializer::Delegate *
  emit<_ast3569>(); // CXXMethodDecl ThrowDataCloneError
  emit<_ast3570>(); // ParmVarDecl message
  emit<_ast3572>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast3573>(); // CXXMethodDecl WriteHostObject
  emit<_ast3574>(); // ParmVarDecl isolate
  emit<_ast3575>(); // ParmVarDecl object
  emit<_ast3577>(); // FunctionProtoType Maybe<bool> (v8::Isolate *,
                    // Local<v8::Object>)
  emit<_ast3579>(); // CXXMethodDecl GetSharedArrayBufferId
  emit<_ast3580>(); // ParmVarDecl isolate
  emit<_ast3581>(); // ParmVarDecl shared_array_buffer
  emit<_ast3583>(); // FunctionProtoType Maybe<uint32_t> (v8::Isolate *,
                    // Local<v8::SharedArrayBuffer>)
  emit<_ast3585>(); // CXXMethodDecl GetWasmModuleTransferId
  emit<_ast3586>(); // ParmVarDecl isolate
  emit<_ast3587>(); // ParmVarDecl module
  emit<_ast3589>(); // FunctionProtoType Maybe<uint32_t> (v8::Isolate *,
                    // Local<v8::WasmModuleObject>)
  emit<_ast3591>(); // CXXMethodDecl ReallocateBufferMemory
  emit<_ast3592>(); // ParmVarDecl old_buffer
  emit<_ast3593>(); // ParmVarDecl size
  emit<_ast3594>(); // ParmVarDecl actual_size
  emit<_ast3595>(); // PointerType size_t *
  emit<_ast3596>(); // FunctionProtoType void *(void *, size_t, size_t *)
  emit<_ast3597>(); // CXXMethodDecl FreeBufferMemory
  emit<_ast3598>(); // ParmVarDecl buffer
  emit<_ast3599>(); // FunctionProtoType void (void *)
  emit<_ast3600>(); // CXXMethodDecl operator=
  emit<_ast3601>(); // ParmVarDecl
  emit<_ast3602>(); // LValueReferenceType const v8::ValueSerializer::Delegate &
  emit<_ast3603>(); // RecordType const v8::ValueSerializer::Delegate
  emit<_ast3604>(); // FunctionProtoType v8::ValueSerializer::Delegate &(const
                    // v8::ValueSerializer::Delegate &)
  emit<_ast3605>(); // LValueReferenceType v8::ValueSerializer::Delegate &
  emit<_ast3606>(); // CXXConstructorDecl ValueSerializer
  emit<_ast3607>(); // ParmVarDecl isolate
  emit<_ast3608>(); // PointerType v8::ValueSerializer *
  emit<_ast3609>(); // CXXConstructorDecl ValueSerializer
  emit<_ast3610>(); // ParmVarDecl isolate
  emit<_ast3611>(); // ParmVarDecl delegate
  emit<_ast3612>(); // FunctionProtoType void (v8::Isolate *,
                    // v8::ValueSerializer::Delegate *)
  emit<_ast3613>(); // CXXDestructorDecl ~ValueSerializer
  emit<_ast3614>(); // FunctionProtoType void ()
  emit<_ast3615>(); // CXXMethodDecl WriteHeader
  emit<_ast3616>(); // CXXMethodDecl WriteValue
  emit<_ast3617>(); // ParmVarDecl context
  emit<_ast3619>(); // ParmVarDecl value
  emit<_ast3621>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast3623>(); // CXXMethodDecl Release
  emit<_ast3624>(); // FunctionProtoType std::pair<uint8_t *, size_t> ()
  emit<_ast3626>(); // CXXMethodDecl TransferArrayBuffer
  emit<_ast3627>(); // ParmVarDecl transfer_id
  emit<_ast3628>(); // ParmVarDecl array_buffer
  emit<_ast3630>(); // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
  emit<_ast3631>(); // CXXMethodDecl SetTreatArrayBufferViewsAsHostObjects
  emit<_ast3632>(); // ParmVarDecl mode
  emit<_ast3633>(); // FunctionProtoType void (bool)
  emit<_ast3634>(); // CXXMethodDecl WriteUint32
  emit<_ast3635>(); // ParmVarDecl value
  emit<_ast3636>(); // FunctionProtoType void (uint32_t)
  emit<_ast3637>(); // CXXMethodDecl WriteUint64
  emit<_ast3638>(); // ParmVarDecl value
  emit<_ast3639>(); // TypedefType uint64_t
  emit<_ast3640>(); // FunctionProtoType void (uint64_t)
  emit<_ast3641>(); // CXXMethodDecl WriteDouble
  emit<_ast3642>(); // ParmVarDecl value
  emit<_ast3643>(); // BuiltinType double
  emit<_ast3644>(); // FunctionProtoType void (double)
  emit<_ast3645>(); // CXXMethodDecl WriteRawBytes
  emit<_ast3646>(); // ParmVarDecl source
  emit<_ast3647>(); // ParmVarDecl length
  emit<_ast3648>(); // FunctionProtoType void (const void *, size_t)
  emit<_ast3649>(); // CXXConstructorDecl ValueSerializer
  emit<_ast3650>(); // ParmVarDecl
  emit<_ast3651>(); // LValueReferenceType const v8::ValueSerializer &
  emit<_ast3652>(); // RecordType const v8::ValueSerializer
  emit<_ast3653>(); // FunctionProtoType void (const v8::ValueSerializer &)
  emit<_ast3654>(); // CXXMethodDecl operator=
  emit<_ast3655>(); // ParmVarDecl
  emit<_ast3656>(); // CXXRecordDecl ValueDeserializer
  emit<_ast3657>(); // RecordType v8::ValueDeserializer
  emit<_ast3658>(); // FieldDecl private_
  emit<_ast3659>(); // PointerType v8::ValueDeserializer::PrivateData *
  emit<_ast3660>(); // RecordType v8::ValueDeserializer::PrivateData
  emit<_ast3661>(); // CXXRecordDecl PrivateData
  emit<_ast3662>(); // CXXRecordDecl ValueDeserializer
  emit<_ast3663>(); // CXXRecordDecl Delegate
  emit<_ast3664>(); // RecordType v8::ValueDeserializer::Delegate
  emit<_ast3665>(); // CXXRecordDecl Delegate
  emit<_ast3666>(); // CXXDestructorDecl ~Delegate
  emit<_ast3667>(); // FunctionProtoType void ()
  emit<_ast3668>(); // PointerType v8::ValueDeserializer::Delegate *
  emit<_ast3669>(); // CXXMethodDecl ReadHostObject
  emit<_ast3670>(); // ParmVarDecl isolate
  emit<_ast3671>(); // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *)
  emit<_ast3673>(); // CXXMethodDecl GetWasmModuleFromId
  emit<_ast3674>(); // ParmVarDecl isolate
  emit<_ast3675>(); // ParmVarDecl transfer_id
  emit<_ast3676>(); // FunctionProtoType MaybeLocal<v8::WasmModuleObject>
                    // (v8::Isolate *, uint32_t)
  emit<_ast3678>(); // CXXMethodDecl GetSharedArrayBufferFromId
  emit<_ast3679>(); // ParmVarDecl isolate
  emit<_ast3680>(); // ParmVarDecl clone_id
  emit<_ast3681>(); // FunctionProtoType MaybeLocal<v8::SharedArrayBuffer>
                    // (v8::Isolate *, uint32_t)
  emit<_ast3683>(); // CXXMethodDecl operator=
  emit<_ast3684>(); // ParmVarDecl
  emit<_ast3685>(); // LValueReferenceType const v8::ValueDeserializer::Delegate
                    // &
  emit<_ast3686>(); // RecordType const v8::ValueDeserializer::Delegate
  emit<_ast3687>(); // FunctionProtoType v8::ValueDeserializer::Delegate &(const
                    // v8::ValueDeserializer::Delegate &)
  emit<_ast3688>(); // LValueReferenceType v8::ValueDeserializer::Delegate &
  emit<_ast3689>(); // CXXConstructorDecl ValueDeserializer
  emit<_ast3690>(); // ParmVarDecl isolate
  emit<_ast3691>(); // ParmVarDecl data
  emit<_ast3692>(); // ParmVarDecl size
  emit<_ast3693>(); // FunctionProtoType void (v8::Isolate *, const uint8_t *,
                    // size_t)
  emit<_ast3694>(); // PointerType v8::ValueDeserializer *
  emit<_ast3695>(); // CXXConstructorDecl ValueDeserializer
  emit<_ast3696>(); // ParmVarDecl isolate
  emit<_ast3697>(); // ParmVarDecl data
  emit<_ast3698>(); // ParmVarDecl size
  emit<_ast3699>(); // ParmVarDecl delegate
  emit<_ast3700>(); // FunctionProtoType void (v8::Isolate *, const uint8_t *,
                    // size_t, v8::ValueDeserializer::Delegate *)
  emit<_ast3701>(); // CXXDestructorDecl ~ValueDeserializer
  emit<_ast3702>(); // FunctionProtoType void ()
  emit<_ast3703>(); // CXXMethodDecl ReadHeader
  emit<_ast3704>(); // ParmVarDecl context
  emit<_ast3706>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>)
  emit<_ast3708>(); // CXXMethodDecl ReadValue
  emit<_ast3709>(); // ParmVarDecl context
  emit<_ast3711>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>)
  emit<_ast3713>(); // CXXMethodDecl TransferArrayBuffer
  emit<_ast3714>(); // ParmVarDecl transfer_id
  emit<_ast3715>(); // ParmVarDecl array_buffer
  emit<_ast3717>(); // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
  emit<_ast3718>(); // CXXMethodDecl TransferSharedArrayBuffer
  emit<_ast3719>(); // ParmVarDecl id
  emit<_ast3720>(); // ParmVarDecl shared_array_buffer
  emit<_ast3722>(); // FunctionProtoType void (uint32_t,
                    // Local<v8::SharedArrayBuffer>)
  emit<_ast3723>(); // CXXMethodDecl SetSupportsLegacyWireFormat
  emit<_ast3724>(); // ParmVarDecl supports_legacy_wire_format
  emit<_ast3725>(); // CXXMethodDecl SetExpectInlineWasm
  emit<_ast3726>(); // ParmVarDecl allow_inline_wasm
  emit<_ast3727>(); // CXXMethodDecl GetWireFormatVersion
  emit<_ast3728>(); // FunctionProtoType uint32_t () const
  emit<_ast3729>(); // PointerType const v8::ValueDeserializer *
  emit<_ast3730>(); // RecordType const v8::ValueDeserializer
  emit<_ast3731>(); // CXXMethodDecl ReadUint32
  emit<_ast3732>(); // ParmVarDecl value
  emit<_ast3733>(); // PointerType uint32_t *
  emit<_ast3734>(); // FunctionProtoType bool (uint32_t *)
  emit<_ast3735>(); // CXXMethodDecl ReadUint64
  emit<_ast3736>(); // ParmVarDecl value
  emit<_ast3737>(); // PointerType uint64_t *
  emit<_ast3738>(); // FunctionProtoType bool (uint64_t *)
  emit<_ast3739>(); // CXXMethodDecl ReadDouble
  emit<_ast3740>(); // ParmVarDecl value
  emit<_ast3741>(); // PointerType double *
  emit<_ast3742>(); // FunctionProtoType bool (double *)
  emit<_ast3743>(); // CXXMethodDecl ReadRawBytes
  emit<_ast3744>(); // ParmVarDecl length
  emit<_ast3745>(); // ParmVarDecl data
  emit<_ast3746>(); // PointerType const void **
  emit<_ast3747>(); // FunctionProtoType bool (size_t, const void **)
  emit<_ast3748>(); // CXXConstructorDecl ValueDeserializer
  emit<_ast3749>(); // ParmVarDecl
  emit<_ast3750>(); // LValueReferenceType const v8::ValueDeserializer &
  emit<_ast3751>(); // FunctionProtoType void (const v8::ValueDeserializer &)
  emit<_ast3752>(); // CXXMethodDecl operator=
  emit<_ast3753>(); // ParmVarDecl
  emit<_ast3754>(); // CXXRecordDecl Value
  emit<_ast3755>(); // CXXMethodDecl IsUndefined
  emit<_ast3756>(); // PointerType const v8::Value *
  emit<_ast3757>(); // RecordType const v8::Value
  emit<_ast3758>(); // CXXMethodDecl IsNull
  emit<_ast3759>(); // CXXMethodDecl IsNullOrUndefined
  emit<_ast3760>(); // CXXMethodDecl IsTrue
  emit<_ast3761>(); // CXXMethodDecl IsFalse
  emit<_ast3762>(); // CXXMethodDecl IsName
  emit<_ast3763>(); // CXXMethodDecl IsString
  emit<_ast3764>(); // CXXMethodDecl IsSymbol
  emit<_ast3765>(); // CXXMethodDecl IsFunction
  emit<_ast3766>(); // CXXMethodDecl IsArray
  emit<_ast3767>(); // CXXMethodDecl IsObject
  emit<_ast3768>(); // CXXMethodDecl IsBigInt
  emit<_ast3769>(); // CXXMethodDecl IsBoolean
  emit<_ast3770>(); // CXXMethodDecl IsNumber
  emit<_ast3771>(); // CXXMethodDecl IsExternal
  emit<_ast3772>(); // CXXMethodDecl IsInt32
  emit<_ast3773>(); // CXXMethodDecl IsUint32
  emit<_ast3774>(); // CXXMethodDecl IsDate
  emit<_ast3775>(); // CXXMethodDecl IsArgumentsObject
  emit<_ast3776>(); // CXXMethodDecl IsBigIntObject
  emit<_ast3777>(); // CXXMethodDecl IsBooleanObject
  emit<_ast3778>(); // CXXMethodDecl IsNumberObject
  emit<_ast3779>(); // CXXMethodDecl IsStringObject
  emit<_ast3780>(); // CXXMethodDecl IsSymbolObject
  emit<_ast3781>(); // CXXMethodDecl IsNativeError
  emit<_ast3782>(); // CXXMethodDecl IsRegExp
  emit<_ast3783>(); // CXXMethodDecl IsAsyncFunction
  emit<_ast3784>(); // CXXMethodDecl IsGeneratorFunction
  emit<_ast3785>(); // CXXMethodDecl IsGeneratorObject
  emit<_ast3786>(); // CXXMethodDecl IsPromise
  emit<_ast3787>(); // CXXMethodDecl IsMap
  emit<_ast3788>(); // CXXMethodDecl IsSet
  emit<_ast3789>(); // CXXMethodDecl IsMapIterator
  emit<_ast3790>(); // CXXMethodDecl IsSetIterator
  emit<_ast3791>(); // CXXMethodDecl IsWeakMap
  emit<_ast3792>(); // CXXMethodDecl IsWeakSet
  emit<_ast3793>(); // CXXMethodDecl IsArrayBuffer
  emit<_ast3794>(); // CXXMethodDecl IsArrayBufferView
  emit<_ast3795>(); // CXXMethodDecl IsTypedArray
  emit<_ast3796>(); // CXXMethodDecl IsUint8Array
  emit<_ast3797>(); // CXXMethodDecl IsUint8ClampedArray
  emit<_ast3798>(); // CXXMethodDecl IsInt8Array
  emit<_ast3799>(); // CXXMethodDecl IsUint16Array
  emit<_ast3800>(); // CXXMethodDecl IsInt16Array
  emit<_ast3801>(); // CXXMethodDecl IsUint32Array
  emit<_ast3802>(); // CXXMethodDecl IsInt32Array
  emit<_ast3803>(); // CXXMethodDecl IsFloat32Array
  emit<_ast3804>(); // CXXMethodDecl IsFloat64Array
  emit<_ast3805>(); // CXXMethodDecl IsBigInt64Array
  emit<_ast3806>(); // CXXMethodDecl IsBigUint64Array
  emit<_ast3807>(); // CXXMethodDecl IsDataView
  emit<_ast3808>(); // CXXMethodDecl IsSharedArrayBuffer
  emit<_ast3809>(); // CXXMethodDecl IsProxy
  emit<_ast3810>(); // CXXMethodDecl IsWebAssemblyCompiledModule
  emit<_ast3811>(); // CXXMethodDecl IsModuleNamespaceObject
  emit<_ast3812>(); // CXXMethodDecl ToBigInt
  emit<_ast3813>(); // ParmVarDecl context
  emit<_ast3815>(); // FunctionProtoType MaybeLocal<v8::BigInt>
                    // (Local<v8::Context>) const
  emit<_ast3817>(); // CXXMethodDecl ToNumber
  emit<_ast3818>(); // ParmVarDecl context
  emit<_ast3820>(); // FunctionProtoType MaybeLocal<v8::Number>
                    // (Local<v8::Context>) const
  emit<_ast3822>(); // CXXMethodDecl ToString
  emit<_ast3823>(); // ParmVarDecl context
  emit<_ast3825>(); // FunctionProtoType MaybeLocal<v8::String>
                    // (Local<v8::Context>) const
  emit<_ast3827>(); // CXXMethodDecl ToDetailString
  emit<_ast3828>(); // ParmVarDecl context
  emit<_ast3830>(); // FunctionProtoType MaybeLocal<v8::String>
                    // (Local<v8::Context>) const
  emit<_ast3832>(); // CXXMethodDecl ToObject
  emit<_ast3833>(); // ParmVarDecl context
  emit<_ast3835>(); // FunctionProtoType MaybeLocal<v8::Object>
                    // (Local<v8::Context>) const
  emit<_ast3837>(); // CXXMethodDecl ToInteger
  emit<_ast3838>(); // ParmVarDecl context
  emit<_ast3840>(); // FunctionProtoType MaybeLocal<v8::Integer>
                    // (Local<v8::Context>) const
  emit<_ast3842>(); // CXXMethodDecl ToUint32
  emit<_ast3843>(); // ParmVarDecl context
  emit<_ast3845>(); // FunctionProtoType MaybeLocal<v8::Uint32>
                    // (Local<v8::Context>) const
  emit<_ast3847>(); // CXXMethodDecl ToInt32
  emit<_ast3848>(); // ParmVarDecl context
  emit<_ast3850>(); // FunctionProtoType MaybeLocal<v8::Int32>
                    // (Local<v8::Context>) const
  emit<_ast3852>(); // CXXMethodDecl ToBoolean
  emit<_ast3853>(); // ParmVarDecl isolate
  emit<_ast3854>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
                    // const
  emit<_ast3856>(); // CXXMethodDecl ToArrayIndex
  emit<_ast3857>(); // ParmVarDecl context
  emit<_ast3859>(); // FunctionProtoType MaybeLocal<v8::Uint32>
                    // (Local<v8::Context>) const
  emit<_ast3861>(); // CXXMethodDecl BooleanValue
  emit<_ast3862>(); // ParmVarDecl isolate
  emit<_ast3863>(); // FunctionProtoType bool (v8::Isolate *) const
  emit<_ast3864>(); // CXXMethodDecl NumberValue
  emit<_ast3865>(); // ParmVarDecl context
  emit<_ast3867>(); // FunctionProtoType Maybe<double> (Local<v8::Context>)
                    // const
  emit<_ast3869>(); // CXXMethodDecl IntegerValue
  emit<_ast3870>(); // ParmVarDecl context
  emit<_ast3872>(); // FunctionProtoType Maybe<int64_t> (Local<v8::Context>)
                    // const
  emit<_ast3874>(); // CXXMethodDecl Uint32Value
  emit<_ast3875>(); // ParmVarDecl context
  emit<_ast3877>(); // FunctionProtoType Maybe<uint32_t> (Local<v8::Context>)
                    // const
  emit<_ast3879>(); // CXXMethodDecl Int32Value
  emit<_ast3880>(); // ParmVarDecl context
  emit<_ast3882>(); // FunctionProtoType Maybe<int32_t> (Local<v8::Context>)
                    // const
  emit<_ast3884>(); // CXXMethodDecl Equals
  emit<_ast3885>(); // ParmVarDecl context
  emit<_ast3887>(); // ParmVarDecl that
  emit<_ast3889>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>) const
  emit<_ast3891>(); // CXXMethodDecl StrictEquals
  emit<_ast3892>(); // ParmVarDecl that
  emit<_ast3894>(); // FunctionProtoType bool (Local<v8::Value>) const
  emit<_ast3895>(); // CXXMethodDecl SameValue
  emit<_ast3896>(); // ParmVarDecl that
  emit<_ast3898>(); // FunctionProtoType bool (Local<v8::Value>) const
  emit<_ast3901>(); // CXXMethodDecl Cast
  emit<_ast3902>(); // ParmVarDecl value
  emit<_ast3903>(); // PointerType T *
  emit<_ast3905>(); // FunctionProtoType v8::Value *(T *)
  emit<_ast3906>(); // PointerType v8::Value *
  emit<_ast3907>(); // CXXMethodDecl TypeOf
  emit<_ast3908>(); // ParmVarDecl
  emit<_ast3909>(); // FunctionProtoType Local<v8::String> (v8::Isolate *)
  emit<_ast3911>(); // CXXMethodDecl InstanceOf
  emit<_ast3912>(); // ParmVarDecl context
  emit<_ast3914>(); // ParmVarDecl object
  emit<_ast3916>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Object>)
  emit<_ast3918>(); // CXXRecordDecl Primitive
  emit<_ast3919>(); // CXXRecordDecl Boolean
  emit<_ast3920>(); // CXXMethodDecl Value
  emit<_ast3921>(); // PointerType const v8::Boolean *
  emit<_ast3922>(); // RecordType const v8::Boolean
  emit<_ast3923>(); // CXXMethodDecl Cast
  emit<_ast3924>(); // ParmVarDecl obj
  emit<_ast3925>(); // PointerType v8::Value *
  emit<_ast3927>(); // FunctionProtoType v8::Boolean *(v8::Value *)
  emit<_ast3928>(); // PointerType v8::Boolean *
  emit<_ast3929>(); // CXXMethodDecl New
  emit<_ast3930>(); // ParmVarDecl isolate
  emit<_ast3931>(); // ParmVarDecl value
  emit<_ast3932>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *,
                    // bool)
  emit<_ast3934>(); // CXXRecordDecl Name
  emit<_ast3935>(); // CXXMethodDecl GetIdentityHash
  emit<_ast3936>(); // PointerType v8::Name *
  emit<_ast3937>(); // CXXMethodDecl Cast
  emit<_ast3938>(); // ParmVarDecl obj
  emit<_ast3939>(); // FunctionProtoType v8::Name *(v8::Value *)
  emit<_ast3943>(); // CXXRecordDecl String
  emit<_ast3944>(); // VarDecl kMaxLength
  emit<_ast3949>(); // CXXMethodDecl Length
  emit<_ast3950>(); // PointerType const v8::String *
  emit<_ast3951>(); // RecordType const v8::String
  emit<_ast3952>(); // CXXMethodDecl Utf8Length
  emit<_ast3953>(); // ParmVarDecl isolate
  emit<_ast3954>(); // FunctionProtoType int (v8::Isolate *) const
  emit<_ast3955>(); // CXXMethodDecl IsOneByte
  emit<_ast3956>(); // CXXMethodDecl ContainsOnlyOneByte
  emit<_ast3963>(); // CXXMethodDecl Write
  emit<_ast3964>(); // ParmVarDecl isolate
  emit<_ast3965>(); // ParmVarDecl buffer
  emit<_ast3966>(); // PointerType uint16_t *
  emit<_ast3967>(); // ParmVarDecl start
  emit<_ast3968>(); // ParmVarDecl length
  emit<_ast3969>(); // ParmVarDecl options
  emit<_ast3970>(); // FunctionProtoType int (v8::Isolate *, uint16_t *, int,
                    // int, int) const
  emit<_ast3971>(); // CXXMethodDecl WriteOneByte
  emit<_ast3972>(); // ParmVarDecl isolate
  emit<_ast3973>(); // ParmVarDecl buffer
  emit<_ast3974>(); // PointerType uint8_t *
  emit<_ast3975>(); // ParmVarDecl start
  emit<_ast3976>(); // ParmVarDecl length
  emit<_ast3977>(); // ParmVarDecl options
  emit<_ast3978>(); // FunctionProtoType int (v8::Isolate *, uint8_t *, int,
                    // int, int) const
  emit<_ast3979>(); // CXXMethodDecl WriteUtf8
  emit<_ast3980>(); // ParmVarDecl isolate
  emit<_ast3981>(); // ParmVarDecl buffer
  emit<_ast3982>(); // PointerType char *
  emit<_ast3983>(); // ParmVarDecl length
  emit<_ast3984>(); // ParmVarDecl nchars_ref
  emit<_ast3985>(); // PointerType int *
  emit<_ast3986>(); // ParmVarDecl options
  emit<_ast3987>(); // FunctionProtoType int (v8::Isolate *, char *, int, int *,
                    // int) const
  emit<_ast3988>(); // CXXMethodDecl Empty
  emit<_ast3989>(); // ParmVarDecl isolate
  emit<_ast3990>(); // FunctionProtoType Local<v8::String> (v8::Isolate *)
  emit<_ast3992>(); // CXXMethodDecl IsExternal
  emit<_ast3993>(); // CXXMethodDecl IsExternalOneByte
  emit<_ast3994>(); // CXXRecordDecl ExternalStringResourceBase
  emit<_ast3995>(); // RecordType v8::String::ExternalStringResourceBase
  emit<_ast3996>(); // CXXRecordDecl ExternalStringResourceBase
  emit<_ast3997>(); // CXXDestructorDecl ~ExternalStringResourceBase
  emit<_ast3998>(); // PointerType v8::String::ExternalStringResourceBase *
  emit<_ast3999>(); // CXXMethodDecl IsCacheable
  emit<_ast4000>(); // PointerType const v8::String::ExternalStringResourceBase
                    // *
  emit<_ast4001>(); // RecordType const v8::String::ExternalStringResourceBase
  emit<_ast4002>(); // CXXConstructorDecl ExternalStringResourceBase
  emit<_ast4003>(); // ParmVarDecl
  emit<_ast4004>(); // LValueReferenceType const
                    // v8::String::ExternalStringResourceBase &
  emit<_ast4005>(); // FunctionProtoType void (const
                    // v8::String::ExternalStringResourceBase &)
  emit<_ast4006>(); // CXXMethodDecl operator=
  emit<_ast4007>(); // ParmVarDecl
  emit<_ast4008>(); // CXXConstructorDecl ExternalStringResourceBase
  emit<_ast4009>(); // FunctionProtoType void ()
  emit<_ast4010>(); // CXXMethodDecl Dispose
  emit<_ast4011>(); // CXXMethodDecl Lock
  emit<_ast4012>(); // FunctionProtoType void () const
  emit<_ast4013>(); // CXXMethodDecl Unlock
  emit<_ast4014>(); // CXXRecordDecl ExternalStringResource
  emit<_ast4015>(); // RecordType v8::String::ExternalStringResource
  emit<_ast4016>(); // CXXBaseSpecifier Record
                    // v8::String::ExternalStringResourceBase
  emit<_ast4017>(); // CXXRecordDecl ExternalStringResource
  emit<_ast4018>(); // CXXDestructorDecl ~ExternalStringResource
  emit<_ast4019>(); // PointerType v8::String::ExternalStringResource *
  emit<_ast4020>(); // CXXMethodDecl data
  emit<_ast4021>(); // FunctionProtoType const uint16_t *() const
  emit<_ast4022>(); // PointerType const uint16_t *
  emit<_ast4023>(); // TypedefType const uint16_t
  emit<_ast4024>(); // PointerType const v8::String::ExternalStringResource *
  emit<_ast4025>(); // RecordType const v8::String::ExternalStringResource
  emit<_ast4026>(); // CXXMethodDecl length
  emit<_ast4027>(); // FunctionProtoType size_t () const
  emit<_ast4028>(); // CXXConstructorDecl ExternalStringResource
  emit<_ast4029>(); // FunctionProtoType void ()
  emit<_ast4030>(); // CXXConstructorDecl ExternalStringResource
  emit<_ast4031>(); // ParmVarDecl
  emit<_ast4032>(); // LValueReferenceType const
                    // v8::String::ExternalStringResource &
  emit<_ast4033>(); // FunctionProtoType void (const
                    // v8::String::ExternalStringResource &)
  emit<_ast4034>(); // CXXMethodDecl operator=
  emit<_ast4035>(); // ParmVarDecl
  emit<_ast4036>(); // FunctionProtoType v8::String::ExternalStringResource
                    // &(const v8::String::ExternalStringResource &)
  emit<_ast4037>(); // LValueReferenceType v8::String::ExternalStringResource &
  emit<_ast4038>(); // CXXRecordDecl ExternalOneByteStringResource
  emit<_ast4039>(); // RecordType v8::String::ExternalOneByteStringResource
  emit<_ast4040>(); // CXXBaseSpecifier Record
                    // v8::String::ExternalStringResourceBase
  emit<_ast4041>(); // CXXRecordDecl ExternalOneByteStringResource
  emit<_ast4042>(); // CXXDestructorDecl ~ExternalOneByteStringResource
  emit<_ast4043>(); // PointerType v8::String::ExternalOneByteStringResource *
  emit<_ast4044>(); // CXXMethodDecl data
  emit<_ast4045>(); // FunctionProtoType const char *() const
  emit<_ast4046>(); // PointerType const
                    // v8::String::ExternalOneByteStringResource *
  emit<_ast4047>(); // RecordType const
                    // v8::String::ExternalOneByteStringResource
  emit<_ast4048>(); // CXXMethodDecl length
  emit<_ast4049>(); // CXXConstructorDecl ExternalOneByteStringResource
  emit<_ast4050>(); // FunctionProtoType void ()
  emit<_ast4051>(); // CXXConstructorDecl ExternalOneByteStringResource
  emit<_ast4052>(); // ParmVarDecl
  emit<_ast4053>(); // LValueReferenceType const
                    // v8::String::ExternalOneByteStringResource &
  emit<_ast4054>(); // FunctionProtoType void (const
                    // v8::String::ExternalOneByteStringResource &)
  emit<_ast4055>(); // CXXMethodDecl operator=
  emit<_ast4056>(); // ParmVarDecl
  emit<_ast4057>(); // FunctionProtoType
                    // v8::String::ExternalOneByteStringResource &(const
                    // v8::String::ExternalOneByteStringResource &)
  emit<_ast4058>(); // LValueReferenceType
                    // v8::String::ExternalOneByteStringResource &
  emit<_ast4059>(); // CXXMethodDecl GetExternalStringResourceBase
  emit<_ast4060>(); // ParmVarDecl encoding_out
  emit<_ast4061>(); // PointerType v8::String::Encoding *
  emit<_ast4062>(); // EnumType v8::String::Encoding
  emit<_ast4063>(); // FunctionProtoType v8::String::ExternalStringResourceBase
                    // *(v8::String::Encoding *) const
  emit<_ast4064>(); // CXXMethodDecl GetExternalStringResource
  emit<_ast4065>(); // FunctionProtoType v8::String::ExternalStringResource *()
                    // const
  emit<_ast4066>(); // CXXMethodDecl GetExternalOneByteStringResource
  emit<_ast4067>(); // FunctionProtoType const
                    // v8::String::ExternalOneByteStringResource *() const
  emit<_ast4068>(); // CXXMethodDecl Cast
  emit<_ast4069>(); // ParmVarDecl obj
  emit<_ast4070>(); // FunctionProtoType v8::String *(v8::Value *)
  emit<_ast4071>(); // PointerType v8::String *
  emit<_ast4072>(); // CXXMethodDecl NewFromUtf8
  emit<_ast4073>(); // ParmVarDecl isolate
  emit<_ast4074>(); // ParmVarDecl data
  emit<_ast4075>(); // ParmVarDecl type
  emit<_ast4076>(); // EnumType v8::NewStringType
  emit<_ast4077>(); // ParmVarDecl length
  emit<_ast4078>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                    // const char *, v8::NewStringType, int)
  emit<_ast4080>(); // CXXMethodDecl NewFromOneByte
  emit<_ast4081>(); // ParmVarDecl isolate
  emit<_ast4082>(); // ParmVarDecl data
  emit<_ast4083>(); // ParmVarDecl type
  emit<_ast4084>(); // ParmVarDecl length
  emit<_ast4085>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                    // const uint8_t *, v8::NewStringType, int)
  emit<_ast4087>(); // CXXMethodDecl NewFromTwoByte
  emit<_ast4088>(); // ParmVarDecl isolate
  emit<_ast4089>(); // ParmVarDecl data
  emit<_ast4090>(); // ParmVarDecl type
  emit<_ast4091>(); // ParmVarDecl length
  emit<_ast4092>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                    // const uint16_t *, v8::NewStringType, int)
  emit<_ast4094>(); // CXXMethodDecl Concat
  emit<_ast4095>(); // ParmVarDecl isolate
  emit<_ast4096>(); // ParmVarDecl left
  emit<_ast4098>(); // ParmVarDecl right
  emit<_ast4100>(); // FunctionProtoType Local<v8::String> (v8::Isolate *,
                    // Local<v8::String>, Local<v8::String>)
  emit<_ast4102>(); // CXXMethodDecl NewExternalTwoByte
  emit<_ast4103>(); // ParmVarDecl isolate
  emit<_ast4104>(); // ParmVarDecl resource
  emit<_ast4105>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                    // v8::String::ExternalStringResource *)
  emit<_ast4107>(); // CXXMethodDecl MakeExternal
  emit<_ast4108>(); // ParmVarDecl resource
  emit<_ast4109>(); // FunctionProtoType bool
                    // (v8::String::ExternalStringResource *)
  emit<_ast4110>(); // CXXMethodDecl NewExternalOneByte
  emit<_ast4111>(); // ParmVarDecl isolate
  emit<_ast4112>(); // ParmVarDecl resource
  emit<_ast4113>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *,
                    // v8::String::ExternalOneByteStringResource *)
  emit<_ast4115>(); // CXXMethodDecl MakeExternal
  emit<_ast4116>(); // ParmVarDecl resource
  emit<_ast4117>(); // FunctionProtoType bool
                    // (v8::String::ExternalOneByteStringResource *)
  emit<_ast4118>(); // CXXMethodDecl CanMakeExternal
  emit<_ast4119>(); // CXXMethodDecl StringEquals
  emit<_ast4120>(); // ParmVarDecl str
  emit<_ast4122>(); // FunctionProtoType bool (Local<v8::String>)
  emit<_ast4123>(); // CXXRecordDecl Utf8Value
  emit<_ast4124>(); // RecordType v8::String::Utf8Value
  emit<_ast4125>(); // FieldDecl str_
  emit<_ast4126>(); // FieldDecl length_
  emit<_ast4127>(); // CXXRecordDecl Utf8Value
  emit<_ast4128>(); // CXXConstructorDecl Utf8Value
  emit<_ast4129>(); // ParmVarDecl isolate
  emit<_ast4130>(); // ParmVarDecl obj
  emit<_ast4132>(); // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
  emit<_ast4133>(); // PointerType v8::String::Utf8Value *
  emit<_ast4134>(); // CXXDestructorDecl ~Utf8Value
  emit<_ast4135>(); // FunctionProtoType void ()
  emit<_ast4136>(); // CXXMethodDecl operator*
  emit<_ast4137>(); // FunctionProtoType char *()
  emit<_ast4138>(); // CXXMethodDecl operator*
  emit<_ast4139>(); // PointerType const v8::String::Utf8Value *
  emit<_ast4140>(); // RecordType const v8::String::Utf8Value
  emit<_ast4141>(); // CXXMethodDecl length
  emit<_ast4142>(); // CXXConstructorDecl Utf8Value
  emit<_ast4143>(); // ParmVarDecl
  emit<_ast4144>(); // LValueReferenceType const v8::String::Utf8Value &
  emit<_ast4145>(); // FunctionProtoType void (const v8::String::Utf8Value &)
  emit<_ast4146>(); // CXXMethodDecl operator=
  emit<_ast4147>(); // ParmVarDecl
  emit<_ast4148>(); // CXXRecordDecl Value
  emit<_ast4149>(); // RecordType v8::String::Value
  emit<_ast4150>(); // FieldDecl str_
  emit<_ast4151>(); // FieldDecl length_
  emit<_ast4152>(); // CXXRecordDecl Value
  emit<_ast4153>(); // CXXConstructorDecl Value
  emit<_ast4154>(); // ParmVarDecl isolate
  emit<_ast4155>(); // ParmVarDecl obj
  emit<_ast4157>(); // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
  emit<_ast4158>(); // PointerType v8::String::Value *
  emit<_ast4159>(); // CXXDestructorDecl ~Value
  emit<_ast4160>(); // FunctionProtoType void ()
  emit<_ast4161>(); // CXXMethodDecl operator*
  emit<_ast4162>(); // FunctionProtoType uint16_t *()
  emit<_ast4163>(); // CXXMethodDecl operator*
  emit<_ast4164>(); // PointerType const v8::String::Value *
  emit<_ast4165>(); // RecordType const v8::String::Value
  emit<_ast4166>(); // CXXMethodDecl length
  emit<_ast4167>(); // CXXConstructorDecl Value
  emit<_ast4168>(); // ParmVarDecl
  emit<_ast4169>(); // LValueReferenceType const v8::String::Value &
  emit<_ast4170>(); // FunctionProtoType void (const v8::String::Value &)
  emit<_ast4171>(); // CXXMethodDecl operator=
  emit<_ast4172>(); // ParmVarDecl
  emit<_ast4173>(); // CXXRecordDecl Symbol
  emit<_ast4174>(); // CXXMethodDecl Name
  emit<_ast4175>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4177>(); // PointerType const v8::Symbol *
  emit<_ast4178>(); // RecordType const v8::Symbol
  emit<_ast4179>(); // CXXMethodDecl New
  emit<_ast4180>(); // ParmVarDecl isolate
  emit<_ast4181>(); // ParmVarDecl name
  emit<_ast4183>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *,
                    // Local<v8::String>)
  emit<_ast4185>(); // CXXMethodDecl For
  emit<_ast4186>(); // ParmVarDecl isolate
  emit<_ast4187>(); // ParmVarDecl name
  emit<_ast4189>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *,
                    // Local<v8::String>)
  emit<_ast4191>(); // CXXMethodDecl ForApi
  emit<_ast4192>(); // ParmVarDecl isolate
  emit<_ast4193>(); // ParmVarDecl name
  emit<_ast4195>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *,
                    // Local<v8::String>)
  emit<_ast4197>(); // CXXMethodDecl GetAsyncIterator
  emit<_ast4198>(); // ParmVarDecl isolate
  emit<_ast4199>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4201>(); // CXXMethodDecl GetHasInstance
  emit<_ast4202>(); // ParmVarDecl isolate
  emit<_ast4203>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4205>(); // CXXMethodDecl GetIsConcatSpreadable
  emit<_ast4206>(); // ParmVarDecl isolate
  emit<_ast4207>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4209>(); // CXXMethodDecl GetIterator
  emit<_ast4210>(); // ParmVarDecl isolate
  emit<_ast4211>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4213>(); // CXXMethodDecl GetMatch
  emit<_ast4214>(); // ParmVarDecl isolate
  emit<_ast4215>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4217>(); // CXXMethodDecl GetReplace
  emit<_ast4218>(); // ParmVarDecl isolate
  emit<_ast4219>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4221>(); // CXXMethodDecl GetSearch
  emit<_ast4222>(); // ParmVarDecl isolate
  emit<_ast4223>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4225>(); // CXXMethodDecl GetSplit
  emit<_ast4226>(); // ParmVarDecl isolate
  emit<_ast4227>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4229>(); // CXXMethodDecl GetToPrimitive
  emit<_ast4230>(); // ParmVarDecl isolate
  emit<_ast4231>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4233>(); // CXXMethodDecl GetToStringTag
  emit<_ast4234>(); // ParmVarDecl isolate
  emit<_ast4235>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4237>(); // CXXMethodDecl GetUnscopables
  emit<_ast4238>(); // ParmVarDecl isolate
  emit<_ast4239>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4241>(); // CXXMethodDecl Cast
  emit<_ast4242>(); // ParmVarDecl obj
  emit<_ast4243>(); // FunctionProtoType v8::Symbol *(v8::Value *)
  emit<_ast4244>(); // PointerType v8::Symbol *
  emit<_ast4245>(); // CXXRecordDecl Private
  emit<_ast4246>(); // CXXMethodDecl Name
  emit<_ast4247>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4249>(); // PointerType const v8::Private *
  emit<_ast4250>(); // RecordType const v8::Private
  emit<_ast4251>(); // CXXMethodDecl New
  emit<_ast4252>(); // ParmVarDecl isolate
  emit<_ast4253>(); // ParmVarDecl name
  emit<_ast4255>(); // FunctionProtoType Local<v8::Private> (v8::Isolate *,
                    // Local<v8::String>)
  emit<_ast4257>(); // CXXMethodDecl ForApi
  emit<_ast4258>(); // ParmVarDecl isolate
  emit<_ast4259>(); // ParmVarDecl name
  emit<_ast4261>(); // FunctionProtoType Local<v8::Private> (v8::Isolate *,
                    // Local<v8::String>)
  emit<_ast4263>(); // CXXMethodDecl Cast
  emit<_ast4264>(); // ParmVarDecl data
  emit<_ast4265>(); // PointerType v8::Data *
  emit<_ast4266>(); // FunctionProtoType v8::Private *(v8::Data *)
  emit<_ast4267>(); // PointerType v8::Private *
  emit<_ast4268>(); // CXXRecordDecl Number
  emit<_ast4269>(); // CXXMethodDecl Value
  emit<_ast4270>(); // FunctionProtoType double () const
  emit<_ast4271>(); // PointerType const v8::Number *
  emit<_ast4272>(); // RecordType const v8::Number
  emit<_ast4273>(); // CXXMethodDecl New
  emit<_ast4274>(); // ParmVarDecl isolate
  emit<_ast4275>(); // ParmVarDecl value
  emit<_ast4276>(); // FunctionProtoType Local<v8::Number> (v8::Isolate *,
                    // double)
  emit<_ast4278>(); // CXXMethodDecl Cast
  emit<_ast4279>(); // ParmVarDecl obj
  emit<_ast4280>(); // FunctionProtoType v8::Number *(v8::Value *)
  emit<_ast4281>(); // PointerType v8::Number *
  emit<_ast4282>(); // CXXRecordDecl Integer
  emit<_ast4283>(); // CXXMethodDecl New
  emit<_ast4284>(); // ParmVarDecl isolate
  emit<_ast4285>(); // ParmVarDecl value
  emit<_ast4286>(); // TypedefType int32_t
  emit<_ast4287>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *,
                    // int32_t)
  emit<_ast4289>(); // CXXMethodDecl NewFromUnsigned
  emit<_ast4290>(); // ParmVarDecl isolate
  emit<_ast4291>(); // ParmVarDecl value
  emit<_ast4292>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *,
                    // uint32_t)
  emit<_ast4294>(); // CXXMethodDecl Value
  emit<_ast4295>(); // FunctionProtoType int64_t () const
  emit<_ast4296>(); // TypedefType int64_t
  emit<_ast4297>(); // PointerType const v8::Integer *
  emit<_ast4298>(); // RecordType const v8::Integer
  emit<_ast4299>(); // CXXMethodDecl Cast
  emit<_ast4300>(); // ParmVarDecl obj
  emit<_ast4301>(); // FunctionProtoType v8::Integer *(v8::Value *)
  emit<_ast4302>(); // PointerType v8::Integer *
  emit<_ast4303>(); // CXXRecordDecl Int32
  emit<_ast4304>(); // CXXMethodDecl Value
  emit<_ast4305>(); // FunctionProtoType int32_t () const
  emit<_ast4306>(); // PointerType const v8::Int32 *
  emit<_ast4307>(); // RecordType const v8::Int32
  emit<_ast4308>(); // CXXMethodDecl Cast
  emit<_ast4309>(); // ParmVarDecl obj
  emit<_ast4310>(); // FunctionProtoType v8::Int32 *(v8::Value *)
  emit<_ast4311>(); // PointerType v8::Int32 *
  emit<_ast4312>(); // CXXRecordDecl Uint32
  emit<_ast4313>(); // CXXMethodDecl Value
  emit<_ast4314>(); // PointerType const v8::Uint32 *
  emit<_ast4315>(); // RecordType const v8::Uint32
  emit<_ast4316>(); // CXXMethodDecl Cast
  emit<_ast4317>(); // ParmVarDecl obj
  emit<_ast4318>(); // FunctionProtoType v8::Uint32 *(v8::Value *)
  emit<_ast4319>(); // PointerType v8::Uint32 *
  emit<_ast4320>(); // CXXRecordDecl BigInt
  emit<_ast4321>(); // CXXMethodDecl New
  emit<_ast4322>(); // ParmVarDecl isolate
  emit<_ast4323>(); // ParmVarDecl value
  emit<_ast4324>(); // FunctionProtoType Local<v8::BigInt> (v8::Isolate *,
                    // int64_t)
  emit<_ast4326>(); // CXXMethodDecl NewFromUnsigned
  emit<_ast4327>(); // ParmVarDecl isolate
  emit<_ast4328>(); // ParmVarDecl value
  emit<_ast4329>(); // FunctionProtoType Local<v8::BigInt> (v8::Isolate *,
                    // uint64_t)
  emit<_ast4331>(); // CXXMethodDecl NewFromWords
  emit<_ast4332>(); // ParmVarDecl context
  emit<_ast4334>(); // ParmVarDecl sign_bit
  emit<_ast4335>(); // ParmVarDecl word_count
  emit<_ast4336>(); // ParmVarDecl words
  emit<_ast4337>(); // PointerType const uint64_t *
  emit<_ast4338>(); // TypedefType const uint64_t
  emit<_ast4339>(); // FunctionProtoType MaybeLocal<v8::BigInt>
                    // (Local<v8::Context>, int, int, const uint64_t *)
  emit<_ast4341>(); // CXXMethodDecl Uint64Value
  emit<_ast4342>(); // ParmVarDecl lossless
  emit<_ast4343>(); // PointerType bool *
  emit<_ast4344>(); // FunctionProtoType uint64_t (bool *) const
  emit<_ast4345>(); // PointerType const v8::BigInt *
  emit<_ast4346>(); // RecordType const v8::BigInt
  emit<_ast4347>(); // CXXMethodDecl Int64Value
  emit<_ast4348>(); // ParmVarDecl lossless
  emit<_ast4349>(); // FunctionProtoType int64_t (bool *) const
  emit<_ast4350>(); // CXXMethodDecl WordCount
  emit<_ast4351>(); // CXXMethodDecl ToWordsArray
  emit<_ast4352>(); // ParmVarDecl sign_bit
  emit<_ast4353>(); // ParmVarDecl word_count
  emit<_ast4354>(); // ParmVarDecl words
  emit<_ast4355>(); // FunctionProtoType void (int *, int *, uint64_t *) const
  emit<_ast4356>(); // CXXMethodDecl Cast
  emit<_ast4357>(); // ParmVarDecl obj
  emit<_ast4358>(); // FunctionProtoType v8::BigInt *(v8::Value *)
  emit<_ast4359>(); // PointerType v8::BigInt *
  emit<_ast4365>(); // TypedefDecl AccessorGetterCallback
  emit<_ast4366>(); // TypedefType v8::AccessorGetterCallback
  emit<_ast4367>(); // TypedefDecl AccessorNameGetterCallback
  emit<_ast4368>(); // TypedefType v8::AccessorNameGetterCallback
  emit<_ast4369>(); // TypedefDecl AccessorSetterCallback
  emit<_ast4370>(); // TypedefType v8::AccessorSetterCallback
  emit<_ast4371>(); // TypedefDecl AccessorNameSetterCallback
  emit<_ast4372>(); // TypedefType v8::AccessorNameSetterCallback
  emit<_ast4401>(); // CXXRecordDecl Object
  emit<_ast4402>(); // CXXMethodDecl Set
  emit<_ast4403>(); // ParmVarDecl key
  emit<_ast4405>(); // ParmVarDecl value
  emit<_ast4407>(); // FunctionProtoType bool (Local<v8::Value>,
                    // Local<v8::Value>)
  emit<_ast4408>(); // PointerType v8::Object *
  emit<_ast4409>(); // CXXMethodDecl Set
  emit<_ast4410>(); // ParmVarDecl context
  emit<_ast4412>(); // ParmVarDecl key
  emit<_ast4414>(); // ParmVarDecl value
  emit<_ast4416>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>, Local<v8::Value>)
  emit<_ast4418>(); // CXXMethodDecl Set
  emit<_ast4419>(); // ParmVarDecl index
  emit<_ast4420>(); // ParmVarDecl value
  emit<_ast4422>(); // FunctionProtoType bool (uint32_t, Local<v8::Value>)
  emit<_ast4423>(); // CXXMethodDecl Set
  emit<_ast4424>(); // ParmVarDecl context
  emit<_ast4426>(); // ParmVarDecl index
  emit<_ast4427>(); // ParmVarDecl value
  emit<_ast4429>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // uint32_t, Local<v8::Value>)
  emit<_ast4431>(); // CXXMethodDecl CreateDataProperty
  emit<_ast4432>(); // ParmVarDecl context
  emit<_ast4434>(); // ParmVarDecl key
  emit<_ast4436>(); // ParmVarDecl value
  emit<_ast4438>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>, Local<v8::Value>)
  emit<_ast4440>(); // CXXMethodDecl CreateDataProperty
  emit<_ast4441>(); // ParmVarDecl context
  emit<_ast4443>(); // ParmVarDecl index
  emit<_ast4444>(); // ParmVarDecl value
  emit<_ast4446>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // uint32_t, Local<v8::Value>)
  emit<_ast4448>(); // CXXMethodDecl DefineOwnProperty
  emit<_ast4449>(); // ParmVarDecl context
  emit<_ast4451>(); // ParmVarDecl key
  emit<_ast4453>(); // ParmVarDecl value
  emit<_ast4455>(); // ParmVarDecl attributes
  emit<_ast4456>(); // EnumType v8::PropertyAttribute
  emit<_ast4457>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
  emit<_ast4459>(); // CXXMethodDecl DefineProperty
  emit<_ast4460>(); // ParmVarDecl context
  emit<_ast4462>(); // ParmVarDecl key
  emit<_ast4464>(); // ParmVarDecl descriptor
  emit<_ast4465>(); // LValueReferenceType v8::PropertyDescriptor &
  emit<_ast4466>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>, v8::PropertyDescriptor &)
  emit<_ast4468>(); // CXXMethodDecl Get
  emit<_ast4469>(); // ParmVarDecl key
  emit<_ast4471>(); // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
  emit<_ast4473>(); // CXXMethodDecl Get
  emit<_ast4474>(); // ParmVarDecl context
  emit<_ast4476>(); // ParmVarDecl key
  emit<_ast4478>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4480>(); // CXXMethodDecl Get
  emit<_ast4481>(); // ParmVarDecl index
  emit<_ast4482>(); // FunctionProtoType Local<v8::Value> (uint32_t)
  emit<_ast4484>(); // CXXMethodDecl Get
  emit<_ast4485>(); // ParmVarDecl context
  emit<_ast4487>(); // ParmVarDecl index
  emit<_ast4488>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, uint32_t)
  emit<_ast4490>(); // CXXMethodDecl GetPropertyAttributes
  emit<_ast4491>(); // ParmVarDecl context
  emit<_ast4493>(); // ParmVarDecl key
  emit<_ast4495>(); // FunctionProtoType Maybe<v8::PropertyAttribute>
                    // (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4497>(); // CXXMethodDecl GetOwnPropertyDescriptor
  emit<_ast4498>(); // ParmVarDecl context
  emit<_ast4500>(); // ParmVarDecl key
  emit<_ast4502>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4504>(); // CXXMethodDecl Has
  emit<_ast4505>(); // ParmVarDecl context
  emit<_ast4507>(); // ParmVarDecl key
  emit<_ast4509>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4511>(); // CXXMethodDecl Delete
  emit<_ast4512>(); // ParmVarDecl context
  emit<_ast4514>(); // ParmVarDecl key
  emit<_ast4516>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4518>(); // CXXMethodDecl Has
  emit<_ast4519>(); // ParmVarDecl context
  emit<_ast4521>(); // ParmVarDecl index
  emit<_ast4522>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // uint32_t)
  emit<_ast4524>(); // CXXMethodDecl Delete
  emit<_ast4525>(); // ParmVarDecl context
  emit<_ast4527>(); // ParmVarDecl index
  emit<_ast4528>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // uint32_t)
  emit<_ast4530>(); // CXXMethodDecl SetAccessor
  emit<_ast4531>(); // ParmVarDecl context
  emit<_ast4533>(); // ParmVarDecl name
  emit<_ast4535>(); // ParmVarDecl getter
  emit<_ast4536>(); // ParmVarDecl setter
  emit<_ast4537>(); // ParmVarDecl data
  emit<_ast4539>(); // ParmVarDecl settings
  emit<_ast4540>(); // EnumType v8::AccessControl
  emit<_ast4541>(); // ParmVarDecl attribute
  emit<_ast4542>(); // ParmVarDecl getter_side_effect_type
  emit<_ast4543>(); // EnumType v8::SideEffectType
  emit<_ast4544>(); // ParmVarDecl setter_side_effect_type
  emit<_ast4545>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>, v8::AccessorNameGetterCallback,
                    // v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>,
                    // v8::AccessControl, v8::PropertyAttribute,
                    // v8::SideEffectType, v8::SideEffectType)
  emit<_ast4547>(); // CXXMethodDecl SetAccessorProperty
  emit<_ast4548>(); // ParmVarDecl name
  emit<_ast4550>(); // ParmVarDecl getter
  emit<_ast4552>(); // ParmVarDecl setter
  emit<_ast4554>(); // ParmVarDecl attribute
  emit<_ast4555>(); // ParmVarDecl settings
  emit<_ast4556>(); // FunctionProtoType void (Local<v8::Name>,
                    // Local<v8::Function>, Local<v8::Function>,
                    // v8::PropertyAttribute, v8::AccessControl)
  emit<_ast4557>(); // CXXMethodDecl SetNativeDataProperty
  emit<_ast4558>(); // ParmVarDecl context
  emit<_ast4560>(); // ParmVarDecl name
  emit<_ast4562>(); // ParmVarDecl getter
  emit<_ast4563>(); // ParmVarDecl setter
  emit<_ast4564>(); // ParmVarDecl data
  emit<_ast4566>(); // ParmVarDecl attributes
  emit<_ast4567>(); // ParmVarDecl getter_side_effect_type
  emit<_ast4568>(); // ParmVarDecl setter_side_effect_type
  emit<_ast4569>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>, v8::AccessorNameGetterCallback,
                    // v8::AccessorNameSetterCallback, Local<v8::Value>,
                    // v8::PropertyAttribute, v8::SideEffectType,
                    // v8::SideEffectType)
  emit<_ast4571>(); // CXXMethodDecl SetLazyDataProperty
  emit<_ast4572>(); // ParmVarDecl context
  emit<_ast4574>(); // ParmVarDecl name
  emit<_ast4576>(); // ParmVarDecl getter
  emit<_ast4577>(); // ParmVarDecl data
  emit<_ast4579>(); // ParmVarDecl attributes
  emit<_ast4580>(); // ParmVarDecl getter_side_effect_type
  emit<_ast4581>(); // ParmVarDecl setter_side_effect_type
  emit<_ast4582>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>, v8::AccessorNameGetterCallback,
                    // Local<v8::Value>, v8::PropertyAttribute,
                    // v8::SideEffectType, v8::SideEffectType)
  emit<_ast4584>(); // CXXMethodDecl HasPrivate
  emit<_ast4585>(); // ParmVarDecl context
  emit<_ast4587>(); // ParmVarDecl key
  emit<_ast4589>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Private>)
  emit<_ast4591>(); // CXXMethodDecl SetPrivate
  emit<_ast4592>(); // ParmVarDecl context
  emit<_ast4594>(); // ParmVarDecl key
  emit<_ast4596>(); // ParmVarDecl value
  emit<_ast4598>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Private>, Local<v8::Value>)
  emit<_ast4600>(); // CXXMethodDecl DeletePrivate
  emit<_ast4601>(); // ParmVarDecl context
  emit<_ast4603>(); // ParmVarDecl key
  emit<_ast4605>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Private>)
  emit<_ast4607>(); // CXXMethodDecl GetPrivate
  emit<_ast4608>(); // ParmVarDecl context
  emit<_ast4610>(); // ParmVarDecl key
  emit<_ast4612>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Private>)
  emit<_ast4614>(); // CXXMethodDecl GetPropertyNames
  emit<_ast4615>(); // ParmVarDecl context
  emit<_ast4617>(); // FunctionProtoType MaybeLocal<v8::Array>
                    // (Local<v8::Context>)
  emit<_ast4619>(); // CXXMethodDecl GetPropertyNames
  emit<_ast4620>(); // ParmVarDecl context
  emit<_ast4622>(); // ParmVarDecl mode
  emit<_ast4623>(); // EnumType v8::KeyCollectionMode
  emit<_ast4624>(); // ParmVarDecl property_filter
  emit<_ast4625>(); // EnumType v8::PropertyFilter
  emit<_ast4626>(); // ParmVarDecl index_filter
  emit<_ast4627>(); // EnumType v8::IndexFilter
  emit<_ast4628>(); // ParmVarDecl key_conversion
  emit<_ast4629>(); // EnumType v8::KeyConversionMode
  emit<_ast4630>(); // FunctionProtoType MaybeLocal<v8::Array>
                    // (Local<v8::Context>, v8::KeyCollectionMode,
                    // v8::PropertyFilter, v8::IndexFilter,
                    // v8::KeyConversionMode)
  emit<_ast4632>(); // CXXMethodDecl GetOwnPropertyNames
  emit<_ast4633>(); // ParmVarDecl context
  emit<_ast4635>(); // FunctionProtoType MaybeLocal<v8::Array>
                    // (Local<v8::Context>)
  emit<_ast4637>(); // CXXMethodDecl GetOwnPropertyNames
  emit<_ast4638>(); // ParmVarDecl context
  emit<_ast4640>(); // ParmVarDecl filter
  emit<_ast4641>(); // ParmVarDecl key_conversion
  emit<_ast4642>(); // FunctionProtoType MaybeLocal<v8::Array>
                    // (Local<v8::Context>, v8::PropertyFilter,
                    // v8::KeyConversionMode)
  emit<_ast4644>(); // CXXMethodDecl GetPrototype
  emit<_ast4645>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast4647>(); // CXXMethodDecl SetPrototype
  emit<_ast4648>(); // ParmVarDecl context
  emit<_ast4650>(); // ParmVarDecl prototype
  emit<_ast4652>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4654>(); // CXXMethodDecl FindInstanceInPrototypeChain
  emit<_ast4655>(); // ParmVarDecl tmpl
  emit<_ast4657>(); // FunctionProtoType Local<v8::Object>
                    // (Local<v8::FunctionTemplate>)
  emit<_ast4659>(); // CXXMethodDecl ObjectProtoToString
  emit<_ast4660>(); // ParmVarDecl context
  emit<_ast4662>(); // FunctionProtoType MaybeLocal<v8::String>
                    // (Local<v8::Context>)
  emit<_ast4664>(); // CXXMethodDecl GetConstructorName
  emit<_ast4665>(); // FunctionProtoType Local<v8::String> ()
  emit<_ast4667>(); // CXXMethodDecl SetIntegrityLevel
  emit<_ast4668>(); // ParmVarDecl context
  emit<_ast4670>(); // ParmVarDecl level
  emit<_ast4671>(); // EnumType v8::IntegrityLevel
  emit<_ast4672>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // v8::IntegrityLevel)
  emit<_ast4674>(); // CXXMethodDecl InternalFieldCount
  emit<_ast4675>(); // CXXMethodDecl InternalFieldCount
  emit<_ast4676>(); // ParmVarDecl object
  emit<_ast4677>(); // LValueReferenceType const PersistentBase<v8::Object> &
  emit<_ast4678>(); // TemplateSpecializationType const
                    // PersistentBase<v8::Object>
  emit<_ast4680>(); // FunctionProtoType int (const PersistentBase<v8::Object>
                    // &)
  emit<_ast4681>(); // CXXMethodDecl InternalFieldCount
  emit<_ast4682>(); // ParmVarDecl object
  emit<_ast4683>(); // LValueReferenceType const TracedGlobal<v8::Object> &
  emit<_ast4684>(); // TemplateSpecializationType const TracedGlobal<v8::Object>
  emit<_ast4686>(); // FunctionProtoType int (const TracedGlobal<v8::Object> &)
  emit<_ast4687>(); // CXXMethodDecl GetInternalField
  emit<_ast4688>(); // ParmVarDecl index
  emit<_ast4689>(); // FunctionProtoType Local<v8::Value> (int)
  emit<_ast4691>(); // CXXMethodDecl SetInternalField
  emit<_ast4692>(); // ParmVarDecl index
  emit<_ast4693>(); // ParmVarDecl value
  emit<_ast4695>(); // FunctionProtoType void (int, Local<v8::Value>)
  emit<_ast4696>(); // CXXMethodDecl GetAlignedPointerFromInternalField
  emit<_ast4697>(); // ParmVarDecl index
  emit<_ast4698>(); // FunctionProtoType void *(int)
  emit<_ast4699>(); // CXXMethodDecl GetAlignedPointerFromInternalField
  emit<_ast4700>(); // ParmVarDecl object
  emit<_ast4701>(); // LValueReferenceType const PersistentBase<v8::Object> &
  emit<_ast4702>(); // TemplateSpecializationType const
                    // PersistentBase<v8::Object>
  emit<_ast4704>(); // ParmVarDecl index
  emit<_ast4705>(); // FunctionProtoType void *(const PersistentBase<v8::Object>
                    // &, int)
  emit<_ast4706>(); // CXXMethodDecl GetAlignedPointerFromInternalField
  emit<_ast4707>(); // ParmVarDecl object
  emit<_ast4708>(); // LValueReferenceType const TracedGlobal<v8::Object> &
  emit<_ast4709>(); // TemplateSpecializationType const TracedGlobal<v8::Object>
  emit<_ast4711>(); // ParmVarDecl index
  emit<_ast4712>(); // FunctionProtoType void *(const TracedGlobal<v8::Object>
                    // &, int)
  emit<_ast4713>(); // CXXMethodDecl SetAlignedPointerInInternalField
  emit<_ast4714>(); // ParmVarDecl index
  emit<_ast4715>(); // ParmVarDecl value
  emit<_ast4716>(); // FunctionProtoType void (int, void *)
  emit<_ast4717>(); // CXXMethodDecl SetAlignedPointerInInternalFields
  emit<_ast4718>(); // ParmVarDecl argc
  emit<_ast4719>(); // ParmVarDecl indices
  emit<_ast4721>(); // ParmVarDecl values
  emit<_ast4723>(); // FunctionProtoType void (int, int *, void **)
  emit<_ast4724>(); // CXXMethodDecl HasOwnProperty
  emit<_ast4725>(); // ParmVarDecl context
  emit<_ast4727>(); // ParmVarDecl key
  emit<_ast4729>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>)
  emit<_ast4731>(); // CXXMethodDecl HasOwnProperty
  emit<_ast4732>(); // ParmVarDecl context
  emit<_ast4734>(); // ParmVarDecl index
  emit<_ast4735>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // uint32_t)
  emit<_ast4737>(); // CXXMethodDecl HasRealNamedProperty
  emit<_ast4738>(); // ParmVarDecl context
  emit<_ast4740>(); // ParmVarDecl key
  emit<_ast4742>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>)
  emit<_ast4744>(); // CXXMethodDecl HasRealIndexedProperty
  emit<_ast4745>(); // ParmVarDecl context
  emit<_ast4747>(); // ParmVarDecl index
  emit<_ast4748>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // uint32_t)
  emit<_ast4750>(); // CXXMethodDecl HasRealNamedCallbackProperty
  emit<_ast4751>(); // ParmVarDecl context
  emit<_ast4753>(); // ParmVarDecl key
  emit<_ast4755>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Name>)
  emit<_ast4757>(); // CXXMethodDecl GetRealNamedPropertyInPrototypeChain
  emit<_ast4758>(); // ParmVarDecl context
  emit<_ast4760>(); // ParmVarDecl key
  emit<_ast4762>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4764>(); // CXXMethodDecl
                    // GetRealNamedPropertyAttributesInPrototypeChain
  emit<_ast4765>(); // ParmVarDecl context
  emit<_ast4767>(); // ParmVarDecl key
  emit<_ast4769>(); // FunctionProtoType Maybe<v8::PropertyAttribute>
                    // (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4771>(); // CXXMethodDecl GetRealNamedProperty
  emit<_ast4772>(); // ParmVarDecl context
  emit<_ast4774>(); // ParmVarDecl key
  emit<_ast4776>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4778>(); // CXXMethodDecl GetRealNamedPropertyAttributes
  emit<_ast4779>(); // ParmVarDecl context
  emit<_ast4781>(); // ParmVarDecl key
  emit<_ast4783>(); // FunctionProtoType Maybe<v8::PropertyAttribute>
                    // (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4785>(); // CXXMethodDecl HasNamedLookupInterceptor
  emit<_ast4786>(); // CXXMethodDecl HasIndexedLookupInterceptor
  emit<_ast4787>(); // CXXMethodDecl GetIdentityHash
  emit<_ast4788>(); // CXXMethodDecl Clone
  emit<_ast4789>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast4791>(); // CXXMethodDecl CreationContext
  emit<_ast4792>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast4794>(); // CXXMethodDecl CreationContext
  emit<_ast4795>(); // ParmVarDecl object
  emit<_ast4796>(); // LValueReferenceType const PersistentBase<v8::Object> &
  emit<_ast4797>(); // TemplateSpecializationType const
                    // PersistentBase<v8::Object>
  emit<_ast4799>(); // FunctionProtoType Local<v8::Context> (const
                    // PersistentBase<v8::Object> &)
  emit<_ast4801>(); // CXXMethodDecl IsCallable
  emit<_ast4802>(); // CXXMethodDecl IsConstructor
  emit<_ast4803>(); // CXXMethodDecl CallAsFunction
  emit<_ast4804>(); // ParmVarDecl context
  emit<_ast4806>(); // ParmVarDecl recv
  emit<_ast4808>(); // ParmVarDecl argc
  emit<_ast4809>(); // ParmVarDecl argv
  emit<_ast4811>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Value>, int,
                    // Local<v8::Value> *)
  emit<_ast4813>(); // CXXMethodDecl CallAsConstructor
  emit<_ast4814>(); // ParmVarDecl context
  emit<_ast4816>(); // ParmVarDecl argc
  emit<_ast4817>(); // ParmVarDecl argv
  emit<_ast4819>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, int, Local<v8::Value> *)
  emit<_ast4821>(); // CXXMethodDecl GetIsolate
  emit<_ast4822>(); // FunctionProtoType v8::Isolate *()
  emit<_ast4823>(); // CXXMethodDecl PreviewEntries
  emit<_ast4824>(); // ParmVarDecl is_key_value
  emit<_ast4825>(); // FunctionProtoType MaybeLocal<v8::Array> (bool *)
  emit<_ast4827>(); // CXXMethodDecl New
  emit<_ast4828>(); // ParmVarDecl isolate
  emit<_ast4829>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *)
  emit<_ast4831>(); // CXXMethodDecl New
  emit<_ast4832>(); // ParmVarDecl isolate
  emit<_ast4833>(); // ParmVarDecl prototype_or_null
  emit<_ast4835>(); // ParmVarDecl names
  emit<_ast4836>(); // PointerType Local<v8::Name> *
  emit<_ast4838>(); // ParmVarDecl values
  emit<_ast4839>(); // PointerType Local<v8::Value> *
  emit<_ast4841>(); // ParmVarDecl length
  emit<_ast4842>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *,
                    // Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *,
                    // size_t)
  emit<_ast4844>(); // CXXMethodDecl Cast
  emit<_ast4845>(); // ParmVarDecl obj
  emit<_ast4846>(); // FunctionProtoType v8::Object *(v8::Value *)
  emit<_ast4847>(); // CXXRecordDecl Array
  emit<_ast4848>(); // CXXMethodDecl Length
  emit<_ast4849>(); // PointerType const v8::Array *
  emit<_ast4850>(); // RecordType const v8::Array
  emit<_ast4851>(); // CXXMethodDecl New
  emit<_ast4852>(); // ParmVarDecl isolate
  emit<_ast4853>(); // ParmVarDecl length
  emit<_ast4854>(); // FunctionProtoType Local<v8::Array> (v8::Isolate *, int)
  emit<_ast4856>(); // CXXMethodDecl New
  emit<_ast4857>(); // ParmVarDecl isolate
  emit<_ast4858>(); // ParmVarDecl elements
  emit<_ast4859>(); // PointerType Local<v8::Value> *
  emit<_ast4861>(); // ParmVarDecl length
  emit<_ast4862>(); // FunctionProtoType Local<v8::Array> (v8::Isolate *,
                    // Local<v8::Value> *, size_t)
  emit<_ast4864>(); // CXXMethodDecl Cast
  emit<_ast4865>(); // ParmVarDecl obj
  emit<_ast4866>(); // FunctionProtoType v8::Array *(v8::Value *)
  emit<_ast4867>(); // PointerType v8::Array *
  emit<_ast4868>(); // CXXRecordDecl Map
  emit<_ast4869>(); // RecordType v8::Map
  emit<_ast4870>(); // CXXBaseSpecifier Record v8::Object
  emit<_ast4871>(); // CXXRecordDecl Map
  emit<_ast4872>(); // CXXMethodDecl Size
  emit<_ast4873>(); // PointerType const v8::Map *
  emit<_ast4874>(); // RecordType const v8::Map
  emit<_ast4875>(); // CXXMethodDecl Clear
  emit<_ast4876>(); // PointerType v8::Map *
  emit<_ast4877>(); // CXXMethodDecl Get
  emit<_ast4878>(); // ParmVarDecl context
  emit<_ast4880>(); // ParmVarDecl key
  emit<_ast4882>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4884>(); // CXXMethodDecl Set
  emit<_ast4885>(); // ParmVarDecl context
  emit<_ast4887>(); // ParmVarDecl key
  emit<_ast4889>(); // ParmVarDecl value
  emit<_ast4891>(); // FunctionProtoType MaybeLocal<v8::Map>
                    // (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
  emit<_ast4893>(); // CXXMethodDecl Has
  emit<_ast4894>(); // ParmVarDecl context
  emit<_ast4896>(); // ParmVarDecl key
  emit<_ast4898>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4900>(); // CXXMethodDecl Delete
  emit<_ast4901>(); // ParmVarDecl context
  emit<_ast4903>(); // ParmVarDecl key
  emit<_ast4905>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4907>(); // CXXMethodDecl AsArray
  emit<_ast4908>(); // FunctionProtoType Local<v8::Array> () const
  emit<_ast4910>(); // CXXMethodDecl New
  emit<_ast4911>(); // ParmVarDecl isolate
  emit<_ast4912>(); // FunctionProtoType Local<v8::Map> (v8::Isolate *)
  emit<_ast4914>(); // CXXMethodDecl Cast
  emit<_ast4915>(); // ParmVarDecl obj
  emit<_ast4916>(); // FunctionProtoType v8::Map *(v8::Value *)
  emit<_ast4917>(); // CXXRecordDecl Set
  emit<_ast4918>(); // RecordType v8::Set
  emit<_ast4919>(); // CXXBaseSpecifier Record v8::Object
  emit<_ast4920>(); // CXXRecordDecl Set
  emit<_ast4921>(); // CXXMethodDecl Size
  emit<_ast4922>(); // PointerType const v8::Set *
  emit<_ast4923>(); // RecordType const v8::Set
  emit<_ast4924>(); // CXXMethodDecl Clear
  emit<_ast4925>(); // PointerType v8::Set *
  emit<_ast4926>(); // CXXMethodDecl Add
  emit<_ast4927>(); // ParmVarDecl context
  emit<_ast4929>(); // ParmVarDecl key
  emit<_ast4931>(); // FunctionProtoType MaybeLocal<v8::Set>
                    // (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4933>(); // CXXMethodDecl Has
  emit<_ast4934>(); // ParmVarDecl context
  emit<_ast4936>(); // ParmVarDecl key
  emit<_ast4938>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4940>(); // CXXMethodDecl Delete
  emit<_ast4941>(); // ParmVarDecl context
  emit<_ast4943>(); // ParmVarDecl key
  emit<_ast4945>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast4947>(); // CXXMethodDecl AsArray
  emit<_ast4948>(); // FunctionProtoType Local<v8::Array> () const
  emit<_ast4950>(); // CXXMethodDecl New
  emit<_ast4951>(); // ParmVarDecl isolate
  emit<_ast4952>(); // FunctionProtoType Local<v8::Set> (v8::Isolate *)
  emit<_ast4954>(); // CXXMethodDecl Cast
  emit<_ast4955>(); // ParmVarDecl obj
  emit<_ast4956>(); // FunctionProtoType v8::Set *(v8::Value *)
  emit<_ast4958>(); // CXXRecordDecl ReturnValue
  emit<_ast4961>(); // CXXConstructorDecl ReturnValue<T>
  emit<_ast4962>(); // ParmVarDecl that
  emit<_ast4963>(); // LValueReferenceType const ReturnValue<S> &
  emit<_ast4964>(); // TemplateSpecializationType const ReturnValue<S>
  emit<_ast4966>(); // FunctionProtoType void (const ReturnValue<S> &)
  emit<_ast4967>(); // PointerType ReturnValue<T> *
  emit<_ast4970>(); // CXXMethodDecl Set
  emit<_ast4971>(); // ParmVarDecl handle
  emit<_ast4972>(); // LValueReferenceType const Global<S> &
  emit<_ast4973>(); // TemplateSpecializationType const Global<S>
  emit<_ast4975>(); // FunctionProtoType void (const Global<S> &)
  emit<_ast4978>(); // CXXMethodDecl Set
  emit<_ast4979>(); // ParmVarDecl handle
  emit<_ast4980>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast4981>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast4983>(); // FunctionProtoType void (const TracedGlobal<S> &)
  emit<_ast4986>(); // CXXMethodDecl Set
  emit<_ast4987>(); // ParmVarDecl handle
  emit<_ast4988>(); // TemplateSpecializationType const Local<S>
  emit<_ast4990>(); // FunctionProtoType void (const Local<S>)
  emit<_ast4991>(); // CXXMethodDecl Set
  emit<_ast4992>(); // ParmVarDecl value
  emit<_ast4993>(); // CXXMethodDecl Set
  emit<_ast4994>(); // ParmVarDecl i
  emit<_ast4995>(); // CXXMethodDecl Set
  emit<_ast4996>(); // ParmVarDecl i
  emit<_ast4997>(); // FunctionProtoType void (int32_t)
  emit<_ast4998>(); // CXXMethodDecl Set
  emit<_ast4999>(); // ParmVarDecl i
  emit<_ast5000>(); // CXXMethodDecl SetNull
  emit<_ast5001>(); // CXXMethodDecl SetUndefined
  emit<_ast5002>(); // CXXMethodDecl SetEmptyString
  emit<_ast5003>(); // CXXMethodDecl GetIsolate
  emit<_ast5004>(); // PointerType const ReturnValue<T> *
  emit<_ast5005>(); // InjectedClassNameType const ReturnValue<T>
  emit<_ast5008>(); // CXXMethodDecl Set
  emit<_ast5009>(); // ParmVarDecl whatever
  emit<_ast5010>(); // PointerType S *
  emit<_ast5012>(); // FunctionProtoType void (S *)
  emit<_ast5013>(); // CXXMethodDecl Get
  emit<_ast5014>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5017>(); // CXXRecordDecl FunctionCallbackInfo
  emit<_ast5018>(); // CXXMethodDecl Length
  emit<_ast5019>(); // PointerType const FunctionCallbackInfo<T> *
  emit<_ast5020>(); // InjectedClassNameType const FunctionCallbackInfo<T>
  emit<_ast5021>(); // CXXMethodDecl operator[]
  emit<_ast5022>(); // ParmVarDecl i
  emit<_ast5023>(); // FunctionProtoType Local<v8::Value> (int) const
  emit<_ast5025>(); // CXXMethodDecl This
  emit<_ast5026>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast5028>(); // CXXMethodDecl Holder
  emit<_ast5029>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast5031>(); // CXXMethodDecl NewTarget
  emit<_ast5032>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5034>(); // CXXMethodDecl IsConstructCall
  emit<_ast5035>(); // CXXMethodDecl Data
  emit<_ast5036>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5038>(); // CXXMethodDecl GetIsolate
  emit<_ast5039>(); // CXXMethodDecl GetReturnValue
  emit<_ast5040>(); // FunctionProtoType ReturnValue<T> () const
  emit<_ast5042>(); // VarDecl kArgsLength
  emit<_ast5043>(); // VarDecl kHolderIndex
  emit<_ast5044>(); // VarDecl kIsolateIndex
  emit<_ast5045>(); // VarDecl kReturnValueDefaultValueIndex
  emit<_ast5046>(); // VarDecl kReturnValueIndex
  emit<_ast5047>(); // VarDecl kDataIndex
  emit<_ast5048>(); // VarDecl kNewTargetIndex
  emit<_ast5049>(); // CXXConstructorDecl FunctionCallbackInfo<T>
  emit<_ast5050>(); // ParmVarDecl implicit_args
  emit<_ast5051>(); // ParmVarDecl values
  emit<_ast5052>(); // ParmVarDecl length
  emit<_ast5053>(); // FunctionProtoType void (internal::Address *,
                    // internal::Address *, int)
  emit<_ast5054>(); // PointerType FunctionCallbackInfo<T> *
  emit<_ast5055>(); // FieldDecl implicit_args_
  emit<_ast5056>(); // FieldDecl values_
  emit<_ast5057>(); // FieldDecl length_
  emit<_ast5059>(); // CXXRecordDecl PropertyCallbackInfo
  emit<_ast5060>(); // CXXMethodDecl GetIsolate
  emit<_ast5061>(); // PointerType const PropertyCallbackInfo<T> *
  emit<_ast5062>(); // InjectedClassNameType const PropertyCallbackInfo<T>
  emit<_ast5063>(); // CXXMethodDecl Data
  emit<_ast5064>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5066>(); // CXXMethodDecl This
  emit<_ast5067>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast5069>(); // CXXMethodDecl Holder
  emit<_ast5070>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast5072>(); // CXXMethodDecl GetReturnValue
  emit<_ast5073>(); // FunctionProtoType ReturnValue<T> () const
  emit<_ast5075>(); // CXXMethodDecl ShouldThrowOnError
  emit<_ast5076>(); // VarDecl kArgsLength
  emit<_ast5077>(); // VarDecl kShouldThrowOnErrorIndex
  emit<_ast5078>(); // VarDecl kHolderIndex
  emit<_ast5079>(); // VarDecl kIsolateIndex
  emit<_ast5080>(); // VarDecl kReturnValueDefaultValueIndex
  emit<_ast5081>(); // VarDecl kReturnValueIndex
  emit<_ast5082>(); // VarDecl kDataIndex
  emit<_ast5083>(); // VarDecl kThisIndex
  emit<_ast5084>(); // CXXConstructorDecl PropertyCallbackInfo<T>
  emit<_ast5085>(); // ParmVarDecl args
  emit<_ast5086>(); // FunctionProtoType void (internal::Address *)
  emit<_ast5087>(); // PointerType PropertyCallbackInfo<T> *
  emit<_ast5088>(); // FieldDecl args_
  emit<_ast5089>(); // TypedefDecl FunctionCallback
  emit<_ast5090>(); // TypedefType v8::FunctionCallback
  emit<_ast5094>(); // CXXRecordDecl Function
  emit<_ast5095>(); // CXXMethodDecl New
  emit<_ast5096>(); // ParmVarDecl context
  emit<_ast5098>(); // ParmVarDecl callback
  emit<_ast5099>(); // ParmVarDecl data
  emit<_ast5101>(); // ParmVarDecl length
  emit<_ast5102>(); // ParmVarDecl behavior
  emit<_ast5103>(); // EnumType v8::ConstructorBehavior
  emit<_ast5104>(); // ParmVarDecl side_effect_type
  emit<_ast5105>(); // FunctionProtoType MaybeLocal<v8::Function>
                    // (Local<v8::Context>, v8::FunctionCallback,
                    // Local<v8::Value>, int, v8::ConstructorBehavior,
                    // v8::SideEffectType)
  emit<_ast5107>(); // CXXMethodDecl NewInstance
  emit<_ast5108>(); // ParmVarDecl context
  emit<_ast5110>(); // ParmVarDecl argc
  emit<_ast5111>(); // ParmVarDecl argv
  emit<_ast5113>(); // FunctionProtoType MaybeLocal<v8::Object>
                    // (Local<v8::Context>, int, Local<v8::Value> *) const
  emit<_ast5115>(); // PointerType const v8::Function *
  emit<_ast5116>(); // RecordType const v8::Function
  emit<_ast5117>(); // CXXMethodDecl NewInstance
  emit<_ast5118>(); // ParmVarDecl context
  emit<_ast5120>(); // FunctionProtoType MaybeLocal<v8::Object>
                    // (Local<v8::Context>) const
  emit<_ast5122>(); // CXXMethodDecl NewInstanceWithSideEffectType
  emit<_ast5123>(); // ParmVarDecl context
  emit<_ast5125>(); // ParmVarDecl argc
  emit<_ast5126>(); // ParmVarDecl argv
  emit<_ast5128>(); // ParmVarDecl side_effect_type
  emit<_ast5129>(); // FunctionProtoType MaybeLocal<v8::Object>
                    // (Local<v8::Context>, int, Local<v8::Value> *,
                    // v8::SideEffectType) const
  emit<_ast5131>(); // CXXMethodDecl Call
  emit<_ast5132>(); // ParmVarDecl context
  emit<_ast5134>(); // ParmVarDecl recv
  emit<_ast5136>(); // ParmVarDecl argc
  emit<_ast5137>(); // ParmVarDecl argv
  emit<_ast5139>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, Local<v8::Value>, int,
                    // Local<v8::Value> *)
  emit<_ast5141>(); // PointerType v8::Function *
  emit<_ast5142>(); // CXXMethodDecl SetName
  emit<_ast5143>(); // ParmVarDecl name
  emit<_ast5145>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast5146>(); // CXXMethodDecl GetName
  emit<_ast5147>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5149>(); // CXXMethodDecl GetInferredName
  emit<_ast5150>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5152>(); // CXXMethodDecl GetDebugName
  emit<_ast5153>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5155>(); // CXXMethodDecl GetDisplayName
  emit<_ast5156>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5158>(); // CXXMethodDecl GetScriptLineNumber
  emit<_ast5159>(); // CXXMethodDecl GetScriptColumnNumber
  emit<_ast5160>(); // CXXMethodDecl ScriptId
  emit<_ast5161>(); // CXXMethodDecl GetBoundFunction
  emit<_ast5162>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5164>(); // CXXMethodDecl GetScriptOrigin
  emit<_ast5165>(); // CXXMethodDecl Cast
  emit<_ast5166>(); // ParmVarDecl obj
  emit<_ast5167>(); // FunctionProtoType v8::Function *(v8::Value *)
  emit<_ast5168>(); // VarDecl kLineOffsetNotFound
  emit<_ast5169>(); // CXXRecordDecl Promise
  emit<_ast5174>(); // CXXRecordDecl Resolver
  emit<_ast5175>(); // RecordType v8::Promise::Resolver
  emit<_ast5176>(); // CXXBaseSpecifier Record v8::Object
  emit<_ast5177>(); // CXXRecordDecl Resolver
  emit<_ast5178>(); // CXXMethodDecl New
  emit<_ast5179>(); // ParmVarDecl context
  emit<_ast5181>(); // FunctionProtoType MaybeLocal<v8::Promise::Resolver>
                    // (Local<v8::Context>)
  emit<_ast5183>(); // CXXMethodDecl GetPromise
  emit<_ast5184>(); // FunctionProtoType Local<v8::Promise> ()
  emit<_ast5186>(); // PointerType v8::Promise::Resolver *
  emit<_ast5187>(); // CXXMethodDecl Resolve
  emit<_ast5188>(); // ParmVarDecl context
  emit<_ast5190>(); // ParmVarDecl value
  emit<_ast5192>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast5194>(); // CXXMethodDecl Reject
  emit<_ast5195>(); // ParmVarDecl context
  emit<_ast5197>(); // ParmVarDecl value
  emit<_ast5199>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>,
                    // Local<v8::Value>)
  emit<_ast5201>(); // CXXMethodDecl Cast
  emit<_ast5202>(); // ParmVarDecl obj
  emit<_ast5203>(); // FunctionProtoType v8::Promise::Resolver *(v8::Value *)
  emit<_ast5204>(); // CXXMethodDecl Catch
  emit<_ast5205>(); // ParmVarDecl context
  emit<_ast5207>(); // ParmVarDecl handler
  emit<_ast5209>(); // FunctionProtoType MaybeLocal<v8::Promise>
                    // (Local<v8::Context>, Local<v8::Function>)
  emit<_ast5211>(); // PointerType v8::Promise *
  emit<_ast5212>(); // CXXMethodDecl Then
  emit<_ast5213>(); // ParmVarDecl context
  emit<_ast5215>(); // ParmVarDecl handler
  emit<_ast5217>(); // FunctionProtoType MaybeLocal<v8::Promise>
                    // (Local<v8::Context>, Local<v8::Function>)
  emit<_ast5219>(); // CXXMethodDecl Then
  emit<_ast5220>(); // ParmVarDecl context
  emit<_ast5222>(); // ParmVarDecl on_fulfilled
  emit<_ast5224>(); // ParmVarDecl on_rejected
  emit<_ast5226>(); // FunctionProtoType MaybeLocal<v8::Promise>
                    // (Local<v8::Context>, Local<v8::Function>,
                    // Local<v8::Function>)
  emit<_ast5228>(); // CXXMethodDecl HasHandler
  emit<_ast5229>(); // CXXMethodDecl Result
  emit<_ast5230>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast5232>(); // CXXMethodDecl State
  emit<_ast5233>(); // FunctionProtoType v8::Promise::PromiseState ()
  emit<_ast5234>(); // EnumType v8::Promise::PromiseState
  emit<_ast5235>(); // CXXMethodDecl MarkAsHandled
  emit<_ast5236>(); // CXXMethodDecl Cast
  emit<_ast5237>(); // ParmVarDecl obj
  emit<_ast5238>(); // FunctionProtoType v8::Promise *(v8::Value *)
  emit<_ast5239>(); // VarDecl kEmbedderFieldCount
  emit<_ast5240>(); // CXXRecordDecl PropertyDescriptor
  emit<_ast5241>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5242>(); // PointerType v8::PropertyDescriptor *
  emit<_ast5243>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5244>(); // ParmVarDecl value
  emit<_ast5246>(); // FunctionProtoType void (Local<v8::Value>)
  emit<_ast5247>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5248>(); // ParmVarDecl value
  emit<_ast5250>(); // ParmVarDecl writable
  emit<_ast5251>(); // FunctionProtoType void (Local<v8::Value>, bool)
  emit<_ast5252>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5253>(); // ParmVarDecl get
  emit<_ast5255>(); // ParmVarDecl set
  emit<_ast5257>(); // FunctionProtoType void (Local<v8::Value>,
                    // Local<v8::Value>)
  emit<_ast5258>(); // CXXDestructorDecl ~PropertyDescriptor
  emit<_ast5259>(); // FunctionProtoType void ()
  emit<_ast5260>(); // CXXMethodDecl value
  emit<_ast5261>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5263>(); // PointerType const v8::PropertyDescriptor *
  emit<_ast5264>(); // RecordType const v8::PropertyDescriptor
  emit<_ast5265>(); // CXXMethodDecl has_value
  emit<_ast5266>(); // CXXMethodDecl get
  emit<_ast5267>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5269>(); // CXXMethodDecl has_get
  emit<_ast5270>(); // CXXMethodDecl set
  emit<_ast5271>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5273>(); // CXXMethodDecl has_set
  emit<_ast5274>(); // CXXMethodDecl set_enumerable
  emit<_ast5275>(); // ParmVarDecl enumerable
  emit<_ast5276>(); // CXXMethodDecl enumerable
  emit<_ast5277>(); // CXXMethodDecl has_enumerable
  emit<_ast5278>(); // CXXMethodDecl set_configurable
  emit<_ast5279>(); // ParmVarDecl configurable
  emit<_ast5280>(); // CXXMethodDecl configurable
  emit<_ast5281>(); // CXXMethodDecl has_configurable
  emit<_ast5282>(); // CXXMethodDecl writable
  emit<_ast5283>(); // CXXMethodDecl has_writable
  emit<_ast5284>(); // CXXRecordDecl PrivateData
  emit<_ast5285>(); // RecordType v8::PropertyDescriptor::PrivateData
  emit<_ast5286>(); // CXXMethodDecl get_private
  emit<_ast5287>(); // FunctionProtoType v8::PropertyDescriptor::PrivateData *()
                    // const
  emit<_ast5288>(); // PointerType v8::PropertyDescriptor::PrivateData *
  emit<_ast5289>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5290>(); // ParmVarDecl
  emit<_ast5291>(); // LValueReferenceType const v8::PropertyDescriptor &
  emit<_ast5292>(); // FunctionProtoType void (const v8::PropertyDescriptor &)
  emit<_ast5293>(); // CXXMethodDecl operator=
  emit<_ast5294>(); // ParmVarDecl
  emit<_ast5295>(); // CXXRecordDecl Proxy
  emit<_ast5296>(); // CXXMethodDecl GetTarget
  emit<_ast5297>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast5299>(); // PointerType v8::Proxy *
  emit<_ast5300>(); // CXXMethodDecl GetHandler
  emit<_ast5301>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast5303>(); // CXXMethodDecl IsRevoked
  emit<_ast5304>(); // CXXMethodDecl Revoke
  emit<_ast5305>(); // CXXMethodDecl New
  emit<_ast5306>(); // ParmVarDecl context
  emit<_ast5308>(); // ParmVarDecl local_target
  emit<_ast5310>(); // ParmVarDecl local_handler
  emit<_ast5312>(); // FunctionProtoType MaybeLocal<v8::Proxy>
                    // (Local<v8::Context>, Local<v8::Object>,
                    // Local<v8::Object>)
  emit<_ast5314>(); // CXXMethodDecl Cast
  emit<_ast5315>(); // ParmVarDecl obj
  emit<_ast5316>(); // FunctionProtoType v8::Proxy *(v8::Value *)
  emit<_ast5319>(); // CXXRecordDecl MemorySpan
  emit<_ast5321>(); // FieldDecl data_
  emit<_ast5322>(); // PointerType T *
  emit<_ast5324>(); // FieldDecl size_
  emit<_ast5325>(); // CXXRecordDecl MemorySpan
  emit<_ast5326>(); // CXXConstructorDecl MemorySpan<T>
  emit<_ast5327>(); // PointerType MemorySpan<T> *
  emit<_ast5328>(); // CXXConstructorDecl MemorySpan<T>
  emit<_ast5329>(); // ParmVarDecl data
  emit<_ast5330>(); // ParmVarDecl size
  emit<_ast5331>(); // FunctionProtoType void (T *, size_t)
  emit<_ast5332>(); // CXXMethodDecl data
  emit<_ast5333>(); // FunctionProtoType T *() const
  emit<_ast5334>(); // PointerType const MemorySpan<T> *
  emit<_ast5335>(); // InjectedClassNameType const MemorySpan<T>
  emit<_ast5336>(); // CXXMethodDecl size
  emit<_ast5337>(); // ClassTemplateSpecializationDecl MemorySpan
  emit<_ast5338>(); // CXXConstructorDecl MemorySpan
  emit<_ast5339>(); // FunctionProtoType void ()
  emit<_ast5340>(); // PointerType v8::MemorySpan<const unsigned char> *
  emit<_ast5341>(); // RecordType v8::MemorySpan<const unsigned char>
  emit<_ast5342>(); // CXXConstructorDecl MemorySpan
  emit<_ast5343>(); // ParmVarDecl data
  emit<_ast5344>(); // PointerType const unsigned char *
  emit<_ast5346>(); // ParmVarDecl size
  emit<_ast5347>(); // FunctionProtoType void (const unsigned char *, size_t)
  emit<_ast5348>(); // CXXMethodDecl data
  emit<_ast5349>(); // FunctionProtoType const unsigned char *() const
  emit<_ast5350>(); // PointerType const v8::MemorySpan<const unsigned char> *
  emit<_ast5351>(); // RecordType const v8::MemorySpan<const unsigned char>
  emit<_ast5352>(); // CXXMethodDecl size
  emit<_ast5353>(); // CXXConstructorDecl MemorySpan
  emit<_ast5354>(); // ParmVarDecl
  emit<_ast5355>(); // LValueReferenceType const v8::MemorySpan<const unsigned
                    // char> &
  emit<_ast5356>(); // FunctionProtoType void (const v8::MemorySpan<const
                    // unsigned char> &)
  emit<_ast5357>(); // CXXConstructorDecl MemorySpan
  emit<_ast5358>(); // ParmVarDecl
  emit<_ast5359>(); // RValueReferenceType v8::MemorySpan<const unsigned char>
                    // &&
  emit<_ast5360>(); // FunctionProtoType void (v8::MemorySpan<const unsigned
                    // char> &&)
  emit<_ast5361>(); // CXXRecordDecl OwnedBuffer
  emit<_ast5362>(); // RecordType v8::OwnedBuffer
  emit<_ast5363>(); // FieldDecl buffer
  emit<_ast5365>(); // FieldDecl size
  emit<_ast5366>(); // CXXRecordDecl OwnedBuffer
  emit<_ast5367>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5368>(); // ParmVarDecl buffer
  emit<_ast5370>(); // ParmVarDecl size
  emit<_ast5371>(); // FunctionProtoType void (std::unique_ptr<const uint8_t
                    // []>, size_t)
  emit<_ast5372>(); // PointerType v8::OwnedBuffer *
  emit<_ast5373>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5374>(); // FunctionProtoType void ()
  emit<_ast5375>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5376>(); // ParmVarDecl
  emit<_ast5377>(); // LValueReferenceType const v8::OwnedBuffer &
  emit<_ast5378>(); // RecordType const v8::OwnedBuffer
  emit<_ast5379>(); // FunctionProtoType void (const v8::OwnedBuffer &)
  emit<_ast5380>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5381>(); // ParmVarDecl
  emit<_ast5382>(); // RValueReferenceType v8::OwnedBuffer &&
  emit<_ast5383>(); // FunctionProtoType void (v8::OwnedBuffer &&) noexcept
  emit<_ast5384>(); // CXXMethodDecl operator=
  emit<_ast5385>(); // ParmVarDecl
  emit<_ast5386>(); // FunctionProtoType v8::OwnedBuffer &(v8::OwnedBuffer &&)
  emit<_ast5387>(); // LValueReferenceType v8::OwnedBuffer &
  emit<_ast5388>(); // CXXDestructorDecl ~OwnedBuffer
  emit<_ast5389>(); // CXXMethodDecl operator=
  emit<_ast5390>(); // ParmVarDecl
  emit<_ast5391>(); // FunctionProtoType v8::OwnedBuffer &(const v8::OwnedBuffer
                    // &)
  emit<_ast5392>(); // CXXRecordDecl CompiledWasmModule
  emit<_ast5393>(); // RecordType v8::CompiledWasmModule
  emit<_ast5394>(); // FieldDecl native_module_
  emit<_ast5395>(); // ElaboratedType const
                    // std::shared_ptr<internal::wasm::NativeModule>
  emit<_ast5397>(); // CXXRecordDecl CompiledWasmModule
  emit<_ast5398>(); // CXXMethodDecl Serialize
  emit<_ast5399>(); // FunctionProtoType v8::OwnedBuffer ()
  emit<_ast5400>(); // PointerType v8::CompiledWasmModule *
  emit<_ast5401>(); // CXXMethodDecl GetWireBytesRef
  emit<_ast5402>(); // FunctionProtoType MemorySpan<const uint8_t> ()
  emit<_ast5404>(); // CXXConstructorDecl CompiledWasmModule
  emit<_ast5405>(); // ParmVarDecl
  emit<_ast5406>(); // LValueReferenceType const v8::CompiledWasmModule &
  emit<_ast5407>(); // RecordType const v8::CompiledWasmModule
  emit<_ast5408>(); // FunctionProtoType void (const v8::CompiledWasmModule &)
  emit<_ast5409>(); // CXXConstructorDecl CompiledWasmModule
  emit<_ast5410>(); // ParmVarDecl
  emit<_ast5411>(); // RValueReferenceType v8::CompiledWasmModule &&
  emit<_ast5412>(); // FunctionProtoType void (v8::CompiledWasmModule &&)
  emit<_ast5413>(); // CXXMethodDecl operator=
  emit<_ast5414>(); // ParmVarDecl
  emit<_ast5415>(); // FunctionProtoType v8::CompiledWasmModule
                    // &(v8::CompiledWasmModule &&)
  emit<_ast5416>(); // LValueReferenceType v8::CompiledWasmModule &
  emit<_ast5417>(); // CXXDestructorDecl ~CompiledWasmModule
  emit<_ast5418>(); // FunctionProtoType void ()
  emit<_ast5419>(); // CXXRecordDecl WasmModuleObject
  emit<_ast5420>(); // CXXRecordDecl TransferrableModule
  emit<_ast5421>(); // RecordType v8::WasmModuleObject::TransferrableModule
  emit<_ast5422>(); // FieldDecl shared_module_
  emit<_ast5423>(); // TypedefType
                    // v8::WasmModuleObject::TransferrableModule::SharedModule
  emit<_ast5424>(); // TypedefDecl SharedModule
  emit<_ast5425>(); // FieldDecl serialized_
  emit<_ast5426>(); // FieldDecl wire_bytes_
  emit<_ast5427>(); // CXXRecordDecl TransferrableModule
  emit<_ast5428>(); // CXXConstructorDecl TransferrableModule
  emit<_ast5429>(); // ParmVarDecl src
  emit<_ast5430>(); // RValueReferenceType
                    // v8::WasmModuleObject::TransferrableModule &&
  emit<_ast5431>(); // FunctionProtoType void
                    // (v8::WasmModuleObject::TransferrableModule &&)
  emit<_ast5432>(); // PointerType v8::WasmModuleObject::TransferrableModule *
  emit<_ast5433>(); // CXXConstructorDecl TransferrableModule
  emit<_ast5434>(); // ParmVarDecl src
  emit<_ast5435>(); // LValueReferenceType const
                    // v8::WasmModuleObject::TransferrableModule &
  emit<_ast5436>(); // RecordType const
                    // v8::WasmModuleObject::TransferrableModule
  emit<_ast5437>(); // FunctionProtoType void (const
                    // v8::WasmModuleObject::TransferrableModule &)
  emit<_ast5438>(); // CXXMethodDecl operator=
  emit<_ast5439>(); // ParmVarDecl src
  emit<_ast5440>(); // FunctionProtoType
                    // v8::WasmModuleObject::TransferrableModule
                    // &(v8::WasmModuleObject::TransferrableModule &&)
  emit<_ast5441>(); // LValueReferenceType
                    // v8::WasmModuleObject::TransferrableModule &
  emit<_ast5442>(); // CXXMethodDecl operator=
  emit<_ast5443>(); // ParmVarDecl src
  emit<_ast5444>(); // FunctionProtoType
                    // v8::WasmModuleObject::TransferrableModule &(const
                    // v8::WasmModuleObject::TransferrableModule &)
  emit<_ast5445>(); // CXXDestructorDecl ~TransferrableModule
  emit<_ast5446>(); // FunctionProtoType void ()
  emit<_ast5447>(); // CXXMethodDecl GetTransferrableModule
  emit<_ast5448>(); // FunctionProtoType
                    // v8::WasmModuleObject::TransferrableModule ()
  emit<_ast5449>(); // PointerType v8::WasmModuleObject *
  emit<_ast5450>(); // CXXMethodDecl FromTransferrableModule
  emit<_ast5451>(); // ParmVarDecl isolate
  emit<_ast5452>(); // ParmVarDecl
  emit<_ast5453>(); // FunctionProtoType MaybeLocal<v8::WasmModuleObject>
                    // (v8::Isolate *, const
                    // v8::WasmModuleObject::TransferrableModule &)
  emit<_ast5455>(); // CXXMethodDecl GetCompiledModule
  emit<_ast5456>(); // FunctionProtoType v8::CompiledWasmModule ()
  emit<_ast5457>(); // CXXMethodDecl DeserializeOrCompile
  emit<_ast5458>(); // ParmVarDecl isolate
  emit<_ast5459>(); // ParmVarDecl serialized_module
  emit<_ast5461>(); // ParmVarDecl wire_bytes
  emit<_ast5463>(); // FunctionProtoType MaybeLocal<v8::WasmModuleObject>
                    // (v8::Isolate *, MemorySpan<const uint8_t>,
                    // MemorySpan<const uint8_t>)
  emit<_ast5465>(); // CXXMethodDecl Cast
  emit<_ast5466>(); // ParmVarDecl obj
  emit<_ast5467>(); // FunctionProtoType v8::WasmModuleObject *(v8::Value *)
  emit<_ast5468>(); // CXXRecordDecl WasmStreaming
  emit<_ast5469>(); // RecordType v8::WasmStreaming
  emit<_ast5470>(); // FieldDecl impl_
  emit<_ast5472>(); // CXXRecordDecl WasmStreaming
  emit<_ast5473>(); // CXXRecordDecl WasmStreamingImpl
  emit<_ast5474>(); // RecordType v8::WasmStreaming::WasmStreamingImpl
  emit<_ast5475>(); // CXXRecordDecl Client
  emit<_ast5476>(); // RecordType v8::WasmStreaming::Client
  emit<_ast5477>(); // CXXRecordDecl Client
  emit<_ast5478>(); // CXXDestructorDecl ~Client
  emit<_ast5479>(); // FunctionProtoType void ()
  emit<_ast5480>(); // PointerType v8::WasmStreaming::Client *
  emit<_ast5481>(); // CXXMethodDecl OnModuleCompiled
  emit<_ast5482>(); // ParmVarDecl compiled_module
  emit<_ast5483>(); // FunctionProtoType void (v8::CompiledWasmModule)
  emit<_ast5484>(); // CXXMethodDecl operator=
  emit<_ast5485>(); // ParmVarDecl
  emit<_ast5486>(); // LValueReferenceType const v8::WasmStreaming::Client &
  emit<_ast5487>(); // RecordType const v8::WasmStreaming::Client
  emit<_ast5488>(); // FunctionProtoType v8::WasmStreaming::Client &(const
                    // v8::WasmStreaming::Client &)
  emit<_ast5489>(); // LValueReferenceType v8::WasmStreaming::Client &
  emit<_ast5490>(); // CXXConstructorDecl WasmStreaming
  emit<_ast5491>(); // ParmVarDecl impl
  emit<_ast5493>(); // FunctionProtoType void
                    // (std::unique_ptr<WasmStreamingImpl>)
  emit<_ast5494>(); // PointerType v8::WasmStreaming *
  emit<_ast5495>(); // CXXDestructorDecl ~WasmStreaming
  emit<_ast5496>(); // FunctionProtoType void ()
  emit<_ast5497>(); // CXXMethodDecl OnBytesReceived
  emit<_ast5498>(); // ParmVarDecl bytes
  emit<_ast5499>(); // ParmVarDecl size
  emit<_ast5500>(); // FunctionProtoType void (const uint8_t *, size_t)
  emit<_ast5501>(); // CXXMethodDecl Finish
  emit<_ast5502>(); // CXXMethodDecl Abort
  emit<_ast5503>(); // ParmVarDecl exception
  emit<_ast5505>(); // FunctionProtoType void (MaybeLocal<v8::Value>)
  emit<_ast5506>(); // CXXMethodDecl SetCompiledModuleBytes
  emit<_ast5507>(); // ParmVarDecl bytes
  emit<_ast5508>(); // ParmVarDecl size
  emit<_ast5509>(); // FunctionProtoType bool (const uint8_t *, size_t)
  emit<_ast5510>(); // CXXMethodDecl SetClient
  emit<_ast5511>(); // ParmVarDecl client
  emit<_ast5513>(); // FunctionProtoType void (std::shared_ptr<Client>)
  emit<_ast5514>(); // CXXMethodDecl Unpack
  emit<_ast5515>(); // ParmVarDecl isolate
  emit<_ast5516>(); // ParmVarDecl value
  emit<_ast5518>(); // FunctionProtoType std::shared_ptr<WasmStreaming>
                    // (v8::Isolate *, Local<v8::Value>)
  emit<_ast5520>(); // CXXConstructorDecl WasmStreaming
  emit<_ast5521>(); // ParmVarDecl
  emit<_ast5522>(); // LValueReferenceType const v8::WasmStreaming &
  emit<_ast5523>(); // RecordType const v8::WasmStreaming
  emit<_ast5524>(); // FunctionProtoType void (const v8::WasmStreaming &)
  emit<_ast5525>(); // CXXRecordDecl WasmModuleObjectBuilderStreaming
  emit<_ast5526>(); // RecordType v8::WasmModuleObjectBuilderStreaming
  emit<_ast5527>(); // FieldDecl isolate_
  emit<_ast5528>(); // FieldDecl promise_
  emit<_ast5530>(); // FieldDecl streaming_decoder_
  emit<_ast5532>(); // CXXRecordDecl WasmModuleObjectBuilderStreaming
  emit<_ast5533>(); // CXXConstructorDecl WasmModuleObjectBuilderStreaming
  emit<_ast5534>(); // ParmVarDecl isolate
  emit<_ast5535>(); // PointerType v8::WasmModuleObjectBuilderStreaming *
  emit<_ast5536>(); // CXXMethodDecl OnBytesReceived
  emit<_ast5537>(); // ParmVarDecl
  emit<_ast5538>(); // ParmVarDecl size
  emit<_ast5539>(); // CXXMethodDecl Finish
  emit<_ast5540>(); // CXXMethodDecl Abort
  emit<_ast5541>(); // ParmVarDecl exception
  emit<_ast5543>(); // FunctionProtoType void (MaybeLocal<v8::Value>)
  emit<_ast5544>(); // CXXMethodDecl GetPromise
  emit<_ast5545>(); // FunctionProtoType Local<v8::Promise> ()
  emit<_ast5547>(); // CXXDestructorDecl ~WasmModuleObjectBuilderStreaming
  emit<_ast5548>(); // FunctionProtoType void ()
  emit<_ast5552>(); // CXXRecordDecl ArrayBuffer
  emit<_ast5553>(); // CXXRecordDecl Allocator
  emit<_ast5554>(); // RecordType v8::ArrayBuffer::Allocator
  emit<_ast5555>(); // CXXRecordDecl Allocator
  emit<_ast5556>(); // CXXDestructorDecl ~Allocator
  emit<_ast5557>(); // FunctionProtoType void ()
  emit<_ast5558>(); // PointerType v8::ArrayBuffer::Allocator *
  emit<_ast5559>(); // CXXMethodDecl Allocate
  emit<_ast5560>(); // ParmVarDecl length
  emit<_ast5561>(); // FunctionProtoType void *(size_t)
  emit<_ast5562>(); // CXXMethodDecl AllocateUninitialized
  emit<_ast5563>(); // ParmVarDecl length
  emit<_ast5564>(); // CXXMethodDecl Free
  emit<_ast5565>(); // ParmVarDecl data
  emit<_ast5566>(); // ParmVarDecl length
  emit<_ast5567>(); // FunctionProtoType void (void *, size_t)
  emit<_ast5571>(); // CXXMethodDecl NewDefaultAllocator
  emit<_ast5572>(); // FunctionProtoType v8::ArrayBuffer::Allocator *()
  emit<_ast5573>(); // CXXMethodDecl operator=
  emit<_ast5574>(); // ParmVarDecl
  emit<_ast5575>(); // LValueReferenceType const v8::ArrayBuffer::Allocator &
  emit<_ast5576>(); // RecordType const v8::ArrayBuffer::Allocator
  emit<_ast5577>(); // FunctionProtoType v8::ArrayBuffer::Allocator &(const
                    // v8::ArrayBuffer::Allocator &)
  emit<_ast5578>(); // LValueReferenceType v8::ArrayBuffer::Allocator &
  emit<_ast5579>(); // CXXRecordDecl Contents
  emit<_ast5580>(); // RecordType v8::ArrayBuffer::Contents
  emit<_ast5581>(); // FieldDecl data_
  emit<_ast5582>(); // FieldDecl byte_length_
  emit<_ast5583>(); // FieldDecl allocation_base_
  emit<_ast5584>(); // FieldDecl allocation_length_
  emit<_ast5585>(); // FieldDecl allocation_mode_
  emit<_ast5587>(); // FieldDecl deleter_
  emit<_ast5588>(); // TypedefType v8::ArrayBuffer::Contents::DeleterCallback
  emit<_ast5589>(); // TypeAliasDecl DeleterCallback
  emit<_ast5590>(); // FieldDecl deleter_data_
  emit<_ast5591>(); // CXXRecordDecl Contents
  emit<_ast5592>(); // CXXConstructorDecl Contents
  emit<_ast5593>(); // PointerType v8::ArrayBuffer::Contents *
  emit<_ast5594>(); // CXXMethodDecl AllocationBase
  emit<_ast5595>(); // FunctionProtoType void *() const
  emit<_ast5596>(); // PointerType const v8::ArrayBuffer::Contents *
  emit<_ast5597>(); // RecordType const v8::ArrayBuffer::Contents
  emit<_ast5598>(); // CXXMethodDecl AllocationLength
  emit<_ast5599>(); // CXXMethodDecl AllocationMode
  emit<_ast5600>(); // FunctionProtoType Allocator::AllocationMode () const
  emit<_ast5601>(); // CXXMethodDecl Data
  emit<_ast5602>(); // CXXMethodDecl ByteLength
  emit<_ast5603>(); // CXXMethodDecl Deleter
  emit<_ast5604>(); // FunctionProtoType
                    // v8::ArrayBuffer::Contents::DeleterCallback () const
  emit<_ast5605>(); // CXXMethodDecl DeleterData
  emit<_ast5606>(); // CXXMethodDecl ByteLength
  emit<_ast5607>(); // PointerType const v8::ArrayBuffer *
  emit<_ast5608>(); // RecordType const v8::ArrayBuffer
  emit<_ast5609>(); // CXXMethodDecl New
  emit<_ast5610>(); // ParmVarDecl isolate
  emit<_ast5611>(); // ParmVarDecl byte_length
  emit<_ast5612>(); // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *,
                    // size_t)
  emit<_ast5614>(); // CXXMethodDecl New
  emit<_ast5615>(); // ParmVarDecl isolate
  emit<_ast5616>(); // ParmVarDecl data
  emit<_ast5617>(); // ParmVarDecl byte_length
  emit<_ast5618>(); // ParmVarDecl mode
  emit<_ast5619>(); // EnumType v8::ArrayBufferCreationMode
  emit<_ast5620>(); // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *,
                    // void *, size_t, v8::ArrayBufferCreationMode)
  emit<_ast5622>(); // CXXMethodDecl IsExternal
  emit<_ast5623>(); // CXXMethodDecl IsDetachable
  emit<_ast5624>(); // CXXMethodDecl IsNeuterable
  emit<_ast5625>(); // CXXMethodDecl Detach
  emit<_ast5626>(); // PointerType v8::ArrayBuffer *
  emit<_ast5627>(); // CXXMethodDecl Neuter
  emit<_ast5628>(); // CXXMethodDecl Externalize
  emit<_ast5629>(); // FunctionProtoType v8::ArrayBuffer::Contents ()
  emit<_ast5630>(); // CXXMethodDecl GetContents
  emit<_ast5631>(); // CXXMethodDecl Cast
  emit<_ast5632>(); // ParmVarDecl obj
  emit<_ast5633>(); // FunctionProtoType v8::ArrayBuffer *(v8::Value *)
  emit<_ast5634>(); // VarDecl kInternalFieldCount
  emit<_ast5635>(); // VarDecl kEmbedderFieldCount
  emit<_ast5636>(); // CXXRecordDecl ArrayBufferView
  emit<_ast5637>(); // RecordType v8::ArrayBufferView
  emit<_ast5638>(); // CXXBaseSpecifier Record v8::Object
  emit<_ast5639>(); // CXXRecordDecl ArrayBufferView
  emit<_ast5640>(); // CXXMethodDecl Buffer
  emit<_ast5641>(); // FunctionProtoType Local<v8::ArrayBuffer> ()
  emit<_ast5643>(); // PointerType v8::ArrayBufferView *
  emit<_ast5644>(); // CXXMethodDecl ByteOffset
  emit<_ast5645>(); // FunctionProtoType size_t ()
  emit<_ast5646>(); // CXXMethodDecl ByteLength
  emit<_ast5647>(); // CXXMethodDecl CopyContents
  emit<_ast5648>(); // ParmVarDecl dest
  emit<_ast5649>(); // ParmVarDecl byte_length
  emit<_ast5650>(); // FunctionProtoType size_t (void *, size_t)
  emit<_ast5651>(); // CXXMethodDecl HasBuffer
  emit<_ast5652>(); // PointerType const v8::ArrayBufferView *
  emit<_ast5653>(); // RecordType const v8::ArrayBufferView
  emit<_ast5654>(); // CXXMethodDecl Cast
  emit<_ast5655>(); // ParmVarDecl obj
  emit<_ast5656>(); // FunctionProtoType v8::ArrayBufferView *(v8::Value *)
  emit<_ast5657>(); // VarDecl kInternalFieldCount
  emit<_ast5658>(); // VarDecl kEmbedderFieldCount
  emit<_ast5659>(); // CXXRecordDecl TypedArray
  emit<_ast5660>(); // RecordType v8::TypedArray
  emit<_ast5661>(); // CXXBaseSpecifier Record v8::ArrayBufferView
  emit<_ast5662>(); // CXXRecordDecl TypedArray
  emit<_ast5663>(); // VarDecl kMaxLength
  emit<_ast5664>(); // TypedefType const size_t
  emit<_ast5665>(); // CXXMethodDecl Length
  emit<_ast5666>(); // PointerType v8::TypedArray *
  emit<_ast5667>(); // CXXMethodDecl Cast
  emit<_ast5668>(); // ParmVarDecl obj
  emit<_ast5669>(); // FunctionProtoType v8::TypedArray *(v8::Value *)
  emit<_ast5670>(); // CXXRecordDecl Uint8Array
  emit<_ast5671>(); // RecordType v8::Uint8Array
  emit<_ast5672>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5673>(); // CXXRecordDecl Uint8Array
  emit<_ast5674>(); // CXXMethodDecl New
  emit<_ast5675>(); // ParmVarDecl array_buffer
  emit<_ast5677>(); // ParmVarDecl byte_offset
  emit<_ast5678>(); // ParmVarDecl length
  emit<_ast5679>(); // FunctionProtoType Local<v8::Uint8Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5681>(); // CXXMethodDecl New
  emit<_ast5682>(); // ParmVarDecl shared_array_buffer
  emit<_ast5684>(); // ParmVarDecl byte_offset
  emit<_ast5685>(); // ParmVarDecl length
  emit<_ast5686>(); // FunctionProtoType Local<v8::Uint8Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5688>(); // CXXMethodDecl Cast
  emit<_ast5689>(); // ParmVarDecl obj
  emit<_ast5690>(); // FunctionProtoType v8::Uint8Array *(v8::Value *)
  emit<_ast5691>(); // PointerType v8::Uint8Array *
  emit<_ast5692>(); // CXXRecordDecl Uint8ClampedArray
  emit<_ast5693>(); // RecordType v8::Uint8ClampedArray
  emit<_ast5694>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5695>(); // CXXRecordDecl Uint8ClampedArray
  emit<_ast5696>(); // CXXMethodDecl New
  emit<_ast5697>(); // ParmVarDecl array_buffer
  emit<_ast5699>(); // ParmVarDecl byte_offset
  emit<_ast5700>(); // ParmVarDecl length
  emit<_ast5701>(); // FunctionProtoType Local<v8::Uint8ClampedArray>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5703>(); // CXXMethodDecl New
  emit<_ast5704>(); // ParmVarDecl shared_array_buffer
  emit<_ast5706>(); // ParmVarDecl byte_offset
  emit<_ast5707>(); // ParmVarDecl length
  emit<_ast5708>(); // FunctionProtoType Local<v8::Uint8ClampedArray>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5710>(); // CXXMethodDecl Cast
  emit<_ast5711>(); // ParmVarDecl obj
  emit<_ast5712>(); // FunctionProtoType v8::Uint8ClampedArray *(v8::Value *)
  emit<_ast5713>(); // PointerType v8::Uint8ClampedArray *
  emit<_ast5714>(); // CXXRecordDecl Int8Array
  emit<_ast5715>(); // RecordType v8::Int8Array
  emit<_ast5716>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5717>(); // CXXRecordDecl Int8Array
  emit<_ast5718>(); // CXXMethodDecl New
  emit<_ast5719>(); // ParmVarDecl array_buffer
  emit<_ast5721>(); // ParmVarDecl byte_offset
  emit<_ast5722>(); // ParmVarDecl length
  emit<_ast5723>(); // FunctionProtoType Local<v8::Int8Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5725>(); // CXXMethodDecl New
  emit<_ast5726>(); // ParmVarDecl shared_array_buffer
  emit<_ast5728>(); // ParmVarDecl byte_offset
  emit<_ast5729>(); // ParmVarDecl length
  emit<_ast5730>(); // FunctionProtoType Local<v8::Int8Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5732>(); // CXXMethodDecl Cast
  emit<_ast5733>(); // ParmVarDecl obj
  emit<_ast5734>(); // FunctionProtoType v8::Int8Array *(v8::Value *)
  emit<_ast5735>(); // PointerType v8::Int8Array *
  emit<_ast5736>(); // CXXRecordDecl Uint16Array
  emit<_ast5737>(); // RecordType v8::Uint16Array
  emit<_ast5738>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5739>(); // CXXRecordDecl Uint16Array
  emit<_ast5740>(); // CXXMethodDecl New
  emit<_ast5741>(); // ParmVarDecl array_buffer
  emit<_ast5743>(); // ParmVarDecl byte_offset
  emit<_ast5744>(); // ParmVarDecl length
  emit<_ast5745>(); // FunctionProtoType Local<v8::Uint16Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5747>(); // CXXMethodDecl New
  emit<_ast5748>(); // ParmVarDecl shared_array_buffer
  emit<_ast5750>(); // ParmVarDecl byte_offset
  emit<_ast5751>(); // ParmVarDecl length
  emit<_ast5752>(); // FunctionProtoType Local<v8::Uint16Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5754>(); // CXXMethodDecl Cast
  emit<_ast5755>(); // ParmVarDecl obj
  emit<_ast5756>(); // FunctionProtoType v8::Uint16Array *(v8::Value *)
  emit<_ast5757>(); // PointerType v8::Uint16Array *
  emit<_ast5758>(); // CXXRecordDecl Int16Array
  emit<_ast5759>(); // RecordType v8::Int16Array
  emit<_ast5760>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5761>(); // CXXRecordDecl Int16Array
  emit<_ast5762>(); // CXXMethodDecl New
  emit<_ast5763>(); // ParmVarDecl array_buffer
  emit<_ast5765>(); // ParmVarDecl byte_offset
  emit<_ast5766>(); // ParmVarDecl length
  emit<_ast5767>(); // FunctionProtoType Local<v8::Int16Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5769>(); // CXXMethodDecl New
  emit<_ast5770>(); // ParmVarDecl shared_array_buffer
  emit<_ast5772>(); // ParmVarDecl byte_offset
  emit<_ast5773>(); // ParmVarDecl length
  emit<_ast5774>(); // FunctionProtoType Local<v8::Int16Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5776>(); // CXXMethodDecl Cast
  emit<_ast5777>(); // ParmVarDecl obj
  emit<_ast5778>(); // FunctionProtoType v8::Int16Array *(v8::Value *)
  emit<_ast5779>(); // PointerType v8::Int16Array *
  emit<_ast5780>(); // CXXRecordDecl Uint32Array
  emit<_ast5781>(); // RecordType v8::Uint32Array
  emit<_ast5782>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5783>(); // CXXRecordDecl Uint32Array
  emit<_ast5784>(); // CXXMethodDecl New
  emit<_ast5785>(); // ParmVarDecl array_buffer
  emit<_ast5787>(); // ParmVarDecl byte_offset
  emit<_ast5788>(); // ParmVarDecl length
  emit<_ast5789>(); // FunctionProtoType Local<v8::Uint32Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5791>(); // CXXMethodDecl New
  emit<_ast5792>(); // ParmVarDecl shared_array_buffer
  emit<_ast5794>(); // ParmVarDecl byte_offset
  emit<_ast5795>(); // ParmVarDecl length
  emit<_ast5796>(); // FunctionProtoType Local<v8::Uint32Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5798>(); // CXXMethodDecl Cast
  emit<_ast5799>(); // ParmVarDecl obj
  emit<_ast5800>(); // FunctionProtoType v8::Uint32Array *(v8::Value *)
  emit<_ast5801>(); // PointerType v8::Uint32Array *
  emit<_ast5802>(); // CXXRecordDecl Int32Array
  emit<_ast5803>(); // RecordType v8::Int32Array
  emit<_ast5804>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5805>(); // CXXRecordDecl Int32Array
  emit<_ast5806>(); // CXXMethodDecl New
  emit<_ast5807>(); // ParmVarDecl array_buffer
  emit<_ast5809>(); // ParmVarDecl byte_offset
  emit<_ast5810>(); // ParmVarDecl length
  emit<_ast5811>(); // FunctionProtoType Local<v8::Int32Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5813>(); // CXXMethodDecl New
  emit<_ast5814>(); // ParmVarDecl shared_array_buffer
  emit<_ast5816>(); // ParmVarDecl byte_offset
  emit<_ast5817>(); // ParmVarDecl length
  emit<_ast5818>(); // FunctionProtoType Local<v8::Int32Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5820>(); // CXXMethodDecl Cast
  emit<_ast5821>(); // ParmVarDecl obj
  emit<_ast5822>(); // FunctionProtoType v8::Int32Array *(v8::Value *)
  emit<_ast5823>(); // PointerType v8::Int32Array *
  emit<_ast5824>(); // CXXRecordDecl Float32Array
  emit<_ast5825>(); // RecordType v8::Float32Array
  emit<_ast5826>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5827>(); // CXXRecordDecl Float32Array
  emit<_ast5828>(); // CXXMethodDecl New
  emit<_ast5829>(); // ParmVarDecl array_buffer
  emit<_ast5831>(); // ParmVarDecl byte_offset
  emit<_ast5832>(); // ParmVarDecl length
  emit<_ast5833>(); // FunctionProtoType Local<v8::Float32Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5835>(); // CXXMethodDecl New
  emit<_ast5836>(); // ParmVarDecl shared_array_buffer
  emit<_ast5838>(); // ParmVarDecl byte_offset
  emit<_ast5839>(); // ParmVarDecl length
  emit<_ast5840>(); // FunctionProtoType Local<v8::Float32Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5842>(); // CXXMethodDecl Cast
  emit<_ast5843>(); // ParmVarDecl obj
  emit<_ast5844>(); // FunctionProtoType v8::Float32Array *(v8::Value *)
  emit<_ast5845>(); // PointerType v8::Float32Array *
  emit<_ast5846>(); // CXXRecordDecl Float64Array
  emit<_ast5847>(); // RecordType v8::Float64Array
  emit<_ast5848>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5849>(); // CXXRecordDecl Float64Array
  emit<_ast5850>(); // CXXMethodDecl New
  emit<_ast5851>(); // ParmVarDecl array_buffer
  emit<_ast5853>(); // ParmVarDecl byte_offset
  emit<_ast5854>(); // ParmVarDecl length
  emit<_ast5855>(); // FunctionProtoType Local<v8::Float64Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5857>(); // CXXMethodDecl New
  emit<_ast5858>(); // ParmVarDecl shared_array_buffer
  emit<_ast5860>(); // ParmVarDecl byte_offset
  emit<_ast5861>(); // ParmVarDecl length
  emit<_ast5862>(); // FunctionProtoType Local<v8::Float64Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5864>(); // CXXMethodDecl Cast
  emit<_ast5865>(); // ParmVarDecl obj
  emit<_ast5866>(); // FunctionProtoType v8::Float64Array *(v8::Value *)
  emit<_ast5867>(); // PointerType v8::Float64Array *
  emit<_ast5868>(); // CXXRecordDecl BigInt64Array
  emit<_ast5869>(); // RecordType v8::BigInt64Array
  emit<_ast5870>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5871>(); // CXXRecordDecl BigInt64Array
  emit<_ast5872>(); // CXXMethodDecl New
  emit<_ast5873>(); // ParmVarDecl array_buffer
  emit<_ast5875>(); // ParmVarDecl byte_offset
  emit<_ast5876>(); // ParmVarDecl length
  emit<_ast5877>(); // FunctionProtoType Local<v8::BigInt64Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5879>(); // CXXMethodDecl New
  emit<_ast5880>(); // ParmVarDecl shared_array_buffer
  emit<_ast5882>(); // ParmVarDecl byte_offset
  emit<_ast5883>(); // ParmVarDecl length
  emit<_ast5884>(); // FunctionProtoType Local<v8::BigInt64Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5886>(); // CXXMethodDecl Cast
  emit<_ast5887>(); // ParmVarDecl obj
  emit<_ast5888>(); // FunctionProtoType v8::BigInt64Array *(v8::Value *)
  emit<_ast5889>(); // PointerType v8::BigInt64Array *
  emit<_ast5890>(); // CXXRecordDecl BigUint64Array
  emit<_ast5891>(); // RecordType v8::BigUint64Array
  emit<_ast5892>(); // CXXBaseSpecifier Record v8::TypedArray
  emit<_ast5893>(); // CXXRecordDecl BigUint64Array
  emit<_ast5894>(); // CXXMethodDecl New
  emit<_ast5895>(); // ParmVarDecl array_buffer
  emit<_ast5897>(); // ParmVarDecl byte_offset
  emit<_ast5898>(); // ParmVarDecl length
  emit<_ast5899>(); // FunctionProtoType Local<v8::BigUint64Array>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5901>(); // CXXMethodDecl New
  emit<_ast5902>(); // ParmVarDecl shared_array_buffer
  emit<_ast5904>(); // ParmVarDecl byte_offset
  emit<_ast5905>(); // ParmVarDecl length
  emit<_ast5906>(); // FunctionProtoType Local<v8::BigUint64Array>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5908>(); // CXXMethodDecl Cast
  emit<_ast5909>(); // ParmVarDecl obj
  emit<_ast5910>(); // FunctionProtoType v8::BigUint64Array *(v8::Value *)
  emit<_ast5911>(); // PointerType v8::BigUint64Array *
  emit<_ast5912>(); // CXXRecordDecl DataView
  emit<_ast5913>(); // RecordType v8::DataView
  emit<_ast5914>(); // CXXBaseSpecifier Record v8::ArrayBufferView
  emit<_ast5915>(); // CXXRecordDecl DataView
  emit<_ast5916>(); // CXXMethodDecl New
  emit<_ast5917>(); // ParmVarDecl array_buffer
  emit<_ast5919>(); // ParmVarDecl byte_offset
  emit<_ast5920>(); // ParmVarDecl length
  emit<_ast5921>(); // FunctionProtoType Local<v8::DataView>
                    // (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5923>(); // CXXMethodDecl New
  emit<_ast5924>(); // ParmVarDecl shared_array_buffer
  emit<_ast5926>(); // ParmVarDecl byte_offset
  emit<_ast5927>(); // ParmVarDecl length
  emit<_ast5928>(); // FunctionProtoType Local<v8::DataView>
                    // (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5930>(); // CXXMethodDecl Cast
  emit<_ast5931>(); // ParmVarDecl obj
  emit<_ast5932>(); // FunctionProtoType v8::DataView *(v8::Value *)
  emit<_ast5933>(); // PointerType v8::DataView *
  emit<_ast5934>(); // CXXRecordDecl SharedArrayBuffer
  emit<_ast5935>(); // CXXRecordDecl Contents
  emit<_ast5936>(); // RecordType v8::SharedArrayBuffer::Contents
  emit<_ast5937>(); // FieldDecl data_
  emit<_ast5938>(); // FieldDecl byte_length_
  emit<_ast5939>(); // FieldDecl allocation_base_
  emit<_ast5940>(); // FieldDecl allocation_length_
  emit<_ast5941>(); // FieldDecl allocation_mode_
  emit<_ast5943>(); // FieldDecl deleter_
  emit<_ast5944>(); // TypedefType
                    // v8::SharedArrayBuffer::Contents::DeleterCallback
  emit<_ast5945>(); // TypeAliasDecl DeleterCallback
  emit<_ast5946>(); // FieldDecl deleter_data_
  emit<_ast5947>(); // CXXRecordDecl Contents
  emit<_ast5948>(); // TypeAliasDecl Allocator
  emit<_ast5949>(); // TypedefType v8::SharedArrayBuffer::Contents::Allocator
  emit<_ast5950>(); // CXXConstructorDecl Contents
  emit<_ast5951>(); // PointerType v8::SharedArrayBuffer::Contents *
  emit<_ast5952>(); // CXXMethodDecl AllocationBase
  emit<_ast5953>(); // PointerType const v8::SharedArrayBuffer::Contents *
  emit<_ast5954>(); // RecordType const v8::SharedArrayBuffer::Contents
  emit<_ast5955>(); // CXXMethodDecl AllocationLength
  emit<_ast5956>(); // CXXMethodDecl AllocationMode
  emit<_ast5957>(); // FunctionProtoType Allocator::AllocationMode () const
  emit<_ast5958>(); // CXXMethodDecl Data
  emit<_ast5959>(); // CXXMethodDecl ByteLength
  emit<_ast5960>(); // CXXMethodDecl Deleter
  emit<_ast5961>(); // FunctionProtoType
                    // v8::SharedArrayBuffer::Contents::DeleterCallback () const
  emit<_ast5962>(); // CXXMethodDecl DeleterData
  emit<_ast5963>(); // CXXMethodDecl ByteLength
  emit<_ast5964>(); // PointerType const v8::SharedArrayBuffer *
  emit<_ast5965>(); // RecordType const v8::SharedArrayBuffer
  emit<_ast5966>(); // CXXMethodDecl New
  emit<_ast5967>(); // ParmVarDecl isolate
  emit<_ast5968>(); // ParmVarDecl byte_length
  emit<_ast5969>(); // FunctionProtoType Local<v8::SharedArrayBuffer>
                    // (v8::Isolate *, size_t)
  emit<_ast5971>(); // CXXMethodDecl New
  emit<_ast5972>(); // ParmVarDecl isolate
  emit<_ast5973>(); // ParmVarDecl data
  emit<_ast5974>(); // ParmVarDecl byte_length
  emit<_ast5975>(); // ParmVarDecl mode
  emit<_ast5976>(); // FunctionProtoType Local<v8::SharedArrayBuffer>
                    // (v8::Isolate *, void *, size_t,
                    // v8::ArrayBufferCreationMode)
  emit<_ast5978>(); // CXXMethodDecl New
  emit<_ast5979>(); // ParmVarDecl isolate
  emit<_ast5980>(); // ParmVarDecl
  emit<_ast5981>(); // LValueReferenceType const SharedArrayBuffer::Contents &
  emit<_ast5982>(); // ElaboratedType const SharedArrayBuffer::Contents
  emit<_ast5984>(); // ParmVarDecl mode
  emit<_ast5985>(); // FunctionProtoType Local<v8::SharedArrayBuffer>
                    // (v8::Isolate *, const SharedArrayBuffer::Contents &,
                    // v8::ArrayBufferCreationMode)
  emit<_ast5987>(); // CXXMethodDecl IsExternal
  emit<_ast5988>(); // CXXMethodDecl Externalize
  emit<_ast5989>(); // FunctionProtoType v8::SharedArrayBuffer::Contents ()
  emit<_ast5990>(); // PointerType v8::SharedArrayBuffer *
  emit<_ast5991>(); // CXXMethodDecl GetContents
  emit<_ast5992>(); // CXXMethodDecl Cast
  emit<_ast5993>(); // ParmVarDecl obj
  emit<_ast5994>(); // FunctionProtoType v8::SharedArrayBuffer *(v8::Value *)
  emit<_ast5995>(); // VarDecl kInternalFieldCount
  emit<_ast5996>(); // CXXRecordDecl Date
  emit<_ast5997>(); // CXXMethodDecl New
  emit<_ast5998>(); // ParmVarDecl context
  emit<_ast6000>(); // ParmVarDecl time
  emit<_ast6001>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>, double)
  emit<_ast6003>(); // CXXMethodDecl ValueOf
  emit<_ast6004>(); // PointerType const v8::Date *
  emit<_ast6005>(); // RecordType const v8::Date
  emit<_ast6006>(); // CXXMethodDecl Cast
  emit<_ast6007>(); // ParmVarDecl obj
  emit<_ast6008>(); // FunctionProtoType v8::Date *(v8::Value *)
  emit<_ast6009>(); // PointerType v8::Date *
  emit<_ast6010>(); // CXXRecordDecl NumberObject
  emit<_ast6011>(); // CXXMethodDecl New
  emit<_ast6012>(); // ParmVarDecl isolate
  emit<_ast6013>(); // ParmVarDecl value
  emit<_ast6014>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                    // double)
  emit<_ast6016>(); // CXXMethodDecl ValueOf
  emit<_ast6017>(); // PointerType const v8::NumberObject *
  emit<_ast6018>(); // RecordType const v8::NumberObject
  emit<_ast6019>(); // CXXMethodDecl Cast
  emit<_ast6020>(); // ParmVarDecl obj
  emit<_ast6021>(); // FunctionProtoType v8::NumberObject *(v8::Value *)
  emit<_ast6022>(); // PointerType v8::NumberObject *
  emit<_ast6023>(); // CXXRecordDecl BigIntObject
  emit<_ast6024>(); // CXXMethodDecl New
  emit<_ast6025>(); // ParmVarDecl isolate
  emit<_ast6026>(); // ParmVarDecl value
  emit<_ast6027>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                    // int64_t)
  emit<_ast6029>(); // CXXMethodDecl ValueOf
  emit<_ast6030>(); // FunctionProtoType Local<v8::BigInt> () const
  emit<_ast6032>(); // PointerType const v8::BigIntObject *
  emit<_ast6033>(); // RecordType const v8::BigIntObject
  emit<_ast6034>(); // CXXMethodDecl Cast
  emit<_ast6035>(); // ParmVarDecl obj
  emit<_ast6036>(); // FunctionProtoType v8::BigIntObject *(v8::Value *)
  emit<_ast6037>(); // PointerType v8::BigIntObject *
  emit<_ast6038>(); // CXXRecordDecl BooleanObject
  emit<_ast6039>(); // CXXMethodDecl New
  emit<_ast6040>(); // ParmVarDecl isolate
  emit<_ast6041>(); // ParmVarDecl value
  emit<_ast6042>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, bool)
  emit<_ast6044>(); // CXXMethodDecl ValueOf
  emit<_ast6045>(); // PointerType const v8::BooleanObject *
  emit<_ast6046>(); // RecordType const v8::BooleanObject
  emit<_ast6047>(); // CXXMethodDecl Cast
  emit<_ast6048>(); // ParmVarDecl obj
  emit<_ast6049>(); // FunctionProtoType v8::BooleanObject *(v8::Value *)
  emit<_ast6050>(); // PointerType v8::BooleanObject *
  emit<_ast6051>(); // CXXRecordDecl StringObject
  emit<_ast6052>(); // CXXMethodDecl New
  emit<_ast6053>(); // ParmVarDecl isolate
  emit<_ast6054>(); // ParmVarDecl value
  emit<_ast6056>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                    // Local<v8::String>)
  emit<_ast6058>(); // CXXMethodDecl ValueOf
  emit<_ast6059>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast6061>(); // PointerType const v8::StringObject *
  emit<_ast6062>(); // RecordType const v8::StringObject
  emit<_ast6063>(); // CXXMethodDecl Cast
  emit<_ast6064>(); // ParmVarDecl obj
  emit<_ast6065>(); // FunctionProtoType v8::StringObject *(v8::Value *)
  emit<_ast6066>(); // PointerType v8::StringObject *
  emit<_ast6067>(); // CXXRecordDecl SymbolObject
  emit<_ast6068>(); // CXXMethodDecl New
  emit<_ast6069>(); // ParmVarDecl isolate
  emit<_ast6070>(); // ParmVarDecl value
  emit<_ast6072>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *,
                    // Local<v8::Symbol>)
  emit<_ast6074>(); // CXXMethodDecl ValueOf
  emit<_ast6075>(); // FunctionProtoType Local<v8::Symbol> () const
  emit<_ast6077>(); // PointerType const v8::SymbolObject *
  emit<_ast6078>(); // RecordType const v8::SymbolObject
  emit<_ast6079>(); // CXXMethodDecl Cast
  emit<_ast6080>(); // ParmVarDecl obj
  emit<_ast6081>(); // FunctionProtoType v8::SymbolObject *(v8::Value *)
  emit<_ast6082>(); // PointerType v8::SymbolObject *
  emit<_ast6083>(); // CXXRecordDecl RegExp
  emit<_ast6084>(); // RecordType v8::RegExp
  emit<_ast6085>(); // CXXBaseSpecifier Record v8::Object
  emit<_ast6086>(); // CXXRecordDecl RegExp
  emit<_ast6095>(); // CXXMethodDecl New
  emit<_ast6096>(); // ParmVarDecl context
  emit<_ast6098>(); // ParmVarDecl pattern
  emit<_ast6100>(); // ParmVarDecl flags
  emit<_ast6101>(); // EnumType v8::RegExp::Flags
  emit<_ast6102>(); // FunctionProtoType MaybeLocal<v8::RegExp>
                    // (Local<v8::Context>, Local<v8::String>,
                    // v8::RegExp::Flags)
  emit<_ast6104>(); // CXXMethodDecl GetSource
  emit<_ast6105>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast6107>(); // PointerType const v8::RegExp *
  emit<_ast6108>(); // RecordType const v8::RegExp
  emit<_ast6109>(); // CXXMethodDecl GetFlags
  emit<_ast6110>(); // FunctionProtoType v8::RegExp::Flags () const
  emit<_ast6111>(); // CXXMethodDecl Cast
  emit<_ast6112>(); // ParmVarDecl obj
  emit<_ast6113>(); // FunctionProtoType v8::RegExp *(v8::Value *)
  emit<_ast6114>(); // PointerType v8::RegExp *
  emit<_ast6115>(); // CXXRecordDecl External
  emit<_ast6116>(); // CXXMethodDecl New
  emit<_ast6117>(); // ParmVarDecl isolate
  emit<_ast6118>(); // ParmVarDecl value
  emit<_ast6119>(); // FunctionProtoType Local<v8::External> (v8::Isolate *,
                    // void *)
  emit<_ast6121>(); // CXXMethodDecl Cast
  emit<_ast6122>(); // ParmVarDecl obj
  emit<_ast6123>(); // FunctionProtoType v8::External *(v8::Value *)
  emit<_ast6124>(); // PointerType v8::External *
  emit<_ast6125>(); // CXXMethodDecl Value
  emit<_ast6126>(); // PointerType const v8::External *
  emit<_ast6127>(); // RecordType const v8::External
  emit<_ast6135>(); // CXXRecordDecl Template
  emit<_ast6136>(); // RecordType v8::Template
  emit<_ast6137>(); // CXXBaseSpecifier Record v8::Data
  emit<_ast6138>(); // CXXRecordDecl Template
  emit<_ast6139>(); // CXXMethodDecl Set
  emit<_ast6140>(); // ParmVarDecl name
  emit<_ast6142>(); // ParmVarDecl value
  emit<_ast6144>(); // ParmVarDecl attributes
  emit<_ast6145>(); // FunctionProtoType void (Local<v8::Name>, Local<v8::Data>,
                    // v8::PropertyAttribute)
  emit<_ast6146>(); // PointerType v8::Template *
  emit<_ast6147>(); // CXXMethodDecl SetPrivate
  emit<_ast6148>(); // ParmVarDecl name
  emit<_ast6150>(); // ParmVarDecl value
  emit<_ast6152>(); // ParmVarDecl attributes
  emit<_ast6153>(); // FunctionProtoType void (Local<v8::Private>,
                    // Local<v8::Data>, v8::PropertyAttribute)
  emit<_ast6154>(); // CXXMethodDecl Set
  emit<_ast6155>(); // ParmVarDecl isolate
  emit<_ast6156>(); // ParmVarDecl name
  emit<_ast6157>(); // ParmVarDecl value
  emit<_ast6159>(); // FunctionProtoType void (v8::Isolate *, const char *,
                    // Local<v8::Data>)
  emit<_ast6160>(); // CXXMethodDecl SetAccessorProperty
  emit<_ast6161>(); // ParmVarDecl name
  emit<_ast6163>(); // ParmVarDecl getter
  emit<_ast6165>(); // ParmVarDecl setter
  emit<_ast6167>(); // ParmVarDecl attribute
  emit<_ast6168>(); // ParmVarDecl settings
  emit<_ast6169>(); // FunctionProtoType void (Local<v8::Name>,
                    // Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>,
                    // v8::PropertyAttribute, v8::AccessControl)
  emit<_ast6170>(); // CXXMethodDecl SetNativeDataProperty
  emit<_ast6171>(); // ParmVarDecl name
  emit<_ast6173>(); // ParmVarDecl getter
  emit<_ast6174>(); // ParmVarDecl setter
  emit<_ast6175>(); // ParmVarDecl data
  emit<_ast6177>(); // ParmVarDecl attribute
  emit<_ast6178>(); // ParmVarDecl signature
  emit<_ast6180>(); // ParmVarDecl settings
  emit<_ast6181>(); // ParmVarDecl getter_side_effect_type
  emit<_ast6182>(); // ParmVarDecl setter_side_effect_type
  emit<_ast6183>(); // FunctionProtoType void (Local<v8::String>,
                    // v8::AccessorGetterCallback, v8::AccessorSetterCallback,
                    // Local<v8::Value>, v8::PropertyAttribute,
                    // Local<v8::AccessorSignature>, v8::AccessControl,
                    // v8::SideEffectType, v8::SideEffectType)
  emit<_ast6184>(); // CXXMethodDecl SetNativeDataProperty
  emit<_ast6185>(); // ParmVarDecl name
  emit<_ast6187>(); // ParmVarDecl getter
  emit<_ast6188>(); // ParmVarDecl setter
  emit<_ast6189>(); // ParmVarDecl data
  emit<_ast6191>(); // ParmVarDecl attribute
  emit<_ast6192>(); // ParmVarDecl signature
  emit<_ast6194>(); // ParmVarDecl settings
  emit<_ast6195>(); // ParmVarDecl getter_side_effect_type
  emit<_ast6196>(); // ParmVarDecl setter_side_effect_type
  emit<_ast6197>(); // FunctionProtoType void (Local<v8::Name>,
                    // v8::AccessorNameGetterCallback,
                    // v8::AccessorNameSetterCallback, Local<v8::Value>,
                    // v8::PropertyAttribute, Local<v8::AccessorSignature>,
                    // v8::AccessControl, v8::SideEffectType,
                    // v8::SideEffectType)
  emit<_ast6198>(); // CXXMethodDecl SetLazyDataProperty
  emit<_ast6199>(); // ParmVarDecl name
  emit<_ast6201>(); // ParmVarDecl getter
  emit<_ast6202>(); // ParmVarDecl data
  emit<_ast6204>(); // ParmVarDecl attribute
  emit<_ast6205>(); // ParmVarDecl getter_side_effect_type
  emit<_ast6206>(); // ParmVarDecl setter_side_effect_type
  emit<_ast6207>(); // FunctionProtoType void (Local<v8::Name>,
                    // v8::AccessorNameGetterCallback, Local<v8::Value>,
                    // v8::PropertyAttribute, v8::SideEffectType,
                    // v8::SideEffectType)
  emit<_ast6208>(); // CXXMethodDecl SetIntrinsicDataProperty
  emit<_ast6209>(); // ParmVarDecl name
  emit<_ast6211>(); // ParmVarDecl intrinsic
  emit<_ast6212>(); // EnumType v8::Intrinsic
  emit<_ast6213>(); // ParmVarDecl attribute
  emit<_ast6214>(); // FunctionProtoType void (Local<v8::Name>, v8::Intrinsic,
                    // v8::PropertyAttribute)
  emit<_ast6215>(); // TypedefDecl GenericNamedPropertyGetterCallback
  emit<_ast6216>(); // TypedefType v8::GenericNamedPropertyGetterCallback
  emit<_ast6217>(); // TypedefDecl GenericNamedPropertySetterCallback
  emit<_ast6218>(); // TypedefType v8::GenericNamedPropertySetterCallback
  emit<_ast6219>(); // TypedefDecl GenericNamedPropertyQueryCallback
  emit<_ast6220>(); // TypedefType v8::GenericNamedPropertyQueryCallback
  emit<_ast6221>(); // TypedefDecl GenericNamedPropertyDeleterCallback
  emit<_ast6222>(); // TypedefType v8::GenericNamedPropertyDeleterCallback
  emit<_ast6223>(); // TypedefDecl GenericNamedPropertyEnumeratorCallback
  emit<_ast6224>(); // TypedefType v8::GenericNamedPropertyEnumeratorCallback
  emit<_ast6225>(); // TypedefDecl GenericNamedPropertyDefinerCallback
  emit<_ast6226>(); // TypedefType v8::GenericNamedPropertyDefinerCallback
  emit<_ast6227>(); // TypedefDecl GenericNamedPropertyDescriptorCallback
  emit<_ast6228>(); // TypedefType v8::GenericNamedPropertyDescriptorCallback
  emit<_ast6229>(); // TypedefDecl IndexedPropertyGetterCallback
  emit<_ast6230>(); // TypedefType v8::IndexedPropertyGetterCallback
  emit<_ast6231>(); // TypedefDecl IndexedPropertySetterCallback
  emit<_ast6232>(); // TypedefType v8::IndexedPropertySetterCallback
  emit<_ast6233>(); // TypedefDecl IndexedPropertyQueryCallback
  emit<_ast6234>(); // TypedefType v8::IndexedPropertyQueryCallback
  emit<_ast6235>(); // TypedefDecl IndexedPropertyDeleterCallback
  emit<_ast6236>(); // TypedefType v8::IndexedPropertyDeleterCallback
  emit<_ast6237>(); // TypedefDecl IndexedPropertyEnumeratorCallback
  emit<_ast6238>(); // TypedefType v8::IndexedPropertyEnumeratorCallback
  emit<_ast6239>(); // TypedefDecl IndexedPropertyDefinerCallback
  emit<_ast6240>(); // TypedefType v8::IndexedPropertyDefinerCallback
  emit<_ast6241>(); // TypedefDecl IndexedPropertyDescriptorCallback
  emit<_ast6242>(); // TypedefType v8::IndexedPropertyDescriptorCallback
  emit<_ast6249>(); // TypedefDecl AccessCheckCallback
  emit<_ast6250>(); // TypedefType v8::AccessCheckCallback
  emit<_ast6251>(); // CXXRecordDecl FunctionTemplate
  emit<_ast6252>(); // CXXMethodDecl New
  emit<_ast6253>(); // ParmVarDecl isolate
  emit<_ast6254>(); // ParmVarDecl callback
  emit<_ast6255>(); // ParmVarDecl data
  emit<_ast6257>(); // ParmVarDecl signature
  emit<_ast6259>(); // ParmVarDecl length
  emit<_ast6260>(); // ParmVarDecl behavior
  emit<_ast6261>(); // ParmVarDecl side_effect_type
  emit<_ast6262>(); // FunctionProtoType Local<v8::FunctionTemplate>
                    // (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>,
                    // Local<v8::Signature>, int, v8::ConstructorBehavior,
                    // v8::SideEffectType)
  emit<_ast6264>(); // CXXMethodDecl FromSnapshot
  emit<_ast6265>(); // ParmVarDecl isolate
  emit<_ast6266>(); // ParmVarDecl index
  emit<_ast6267>(); // FunctionProtoType MaybeLocal<v8::FunctionTemplate>
                    // (v8::Isolate *, size_t)
  emit<_ast6269>(); // CXXMethodDecl NewWithCache
  emit<_ast6270>(); // ParmVarDecl isolate
  emit<_ast6271>(); // ParmVarDecl callback
  emit<_ast6272>(); // ParmVarDecl cache_property
  emit<_ast6274>(); // ParmVarDecl data
  emit<_ast6276>(); // ParmVarDecl signature
  emit<_ast6278>(); // ParmVarDecl length
  emit<_ast6279>(); // ParmVarDecl side_effect_type
  emit<_ast6280>(); // FunctionProtoType Local<v8::FunctionTemplate>
                    // (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>,
                    // Local<v8::Value>, Local<v8::Signature>, int,
                    // v8::SideEffectType)
  emit<_ast6282>(); // CXXMethodDecl GetFunction
  emit<_ast6283>(); // ParmVarDecl context
  emit<_ast6285>(); // FunctionProtoType MaybeLocal<v8::Function>
                    // (Local<v8::Context>)
  emit<_ast6287>(); // PointerType v8::FunctionTemplate *
  emit<_ast6288>(); // CXXMethodDecl NewRemoteInstance
  emit<_ast6289>(); // FunctionProtoType MaybeLocal<v8::Object> ()
  emit<_ast6291>(); // CXXMethodDecl SetCallHandler
  emit<_ast6292>(); // ParmVarDecl callback
  emit<_ast6293>(); // ParmVarDecl data
  emit<_ast6295>(); // ParmVarDecl side_effect_type
  emit<_ast6296>(); // FunctionProtoType void (v8::FunctionCallback,
                    // Local<v8::Value>, v8::SideEffectType)
  emit<_ast6297>(); // CXXMethodDecl SetLength
  emit<_ast6298>(); // ParmVarDecl length
  emit<_ast6299>(); // CXXMethodDecl InstanceTemplate
  emit<_ast6300>(); // FunctionProtoType Local<v8::ObjectTemplate> ()
  emit<_ast6302>(); // CXXMethodDecl Inherit
  emit<_ast6303>(); // ParmVarDecl parent
  emit<_ast6305>(); // FunctionProtoType void (Local<v8::FunctionTemplate>)
  emit<_ast6306>(); // CXXMethodDecl PrototypeTemplate
  emit<_ast6307>(); // FunctionProtoType Local<v8::ObjectTemplate> ()
  emit<_ast6309>(); // CXXMethodDecl SetPrototypeProviderTemplate
  emit<_ast6310>(); // ParmVarDecl prototype_provider
  emit<_ast6312>(); // FunctionProtoType void (Local<v8::FunctionTemplate>)
  emit<_ast6313>(); // CXXMethodDecl SetClassName
  emit<_ast6314>(); // ParmVarDecl name
  emit<_ast6316>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast6317>(); // CXXMethodDecl SetAcceptAnyReceiver
  emit<_ast6318>(); // ParmVarDecl value
  emit<_ast6319>(); // CXXMethodDecl ReadOnlyPrototype
  emit<_ast6320>(); // CXXMethodDecl RemovePrototype
  emit<_ast6321>(); // CXXMethodDecl HasInstance
  emit<_ast6322>(); // ParmVarDecl object
  emit<_ast6324>(); // FunctionProtoType bool (Local<v8::Value>)
  emit<_ast6325>(); // CXXMethodDecl Cast
  emit<_ast6326>(); // ParmVarDecl data
  emit<_ast6327>(); // FunctionProtoType v8::FunctionTemplate *(v8::Data *)
  emit<_ast6334>(); // CXXRecordDecl NamedPropertyHandlerConfiguration
  emit<_ast6335>(); // RecordType v8::NamedPropertyHandlerConfiguration
  emit<_ast6336>(); // FieldDecl getter
  emit<_ast6337>(); // FieldDecl setter
  emit<_ast6338>(); // FieldDecl query
  emit<_ast6339>(); // FieldDecl deleter
  emit<_ast6340>(); // FieldDecl enumerator
  emit<_ast6341>(); // FieldDecl definer
  emit<_ast6342>(); // FieldDecl descriptor
  emit<_ast6343>(); // FieldDecl data
  emit<_ast6345>(); // FieldDecl flags
  emit<_ast6346>(); // EnumType v8::PropertyHandlerFlags
  emit<_ast6347>(); // CXXRecordDecl NamedPropertyHandlerConfiguration
  emit<_ast6348>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6349>(); // ParmVarDecl getter
  emit<_ast6350>(); // ParmVarDecl setter
  emit<_ast6351>(); // ParmVarDecl query
  emit<_ast6352>(); // ParmVarDecl deleter
  emit<_ast6353>(); // ParmVarDecl enumerator
  emit<_ast6354>(); // ParmVarDecl definer
  emit<_ast6355>(); // ParmVarDecl descriptor
  emit<_ast6356>(); // ParmVarDecl data
  emit<_ast6358>(); // ParmVarDecl flags
  emit<_ast6359>(); // FunctionProtoType void
                    // (v8::GenericNamedPropertyGetterCallback,
                    // v8::GenericNamedPropertySetterCallback,
                    // v8::GenericNamedPropertyQueryCallback,
                    // v8::GenericNamedPropertyDeleterCallback,
                    // v8::GenericNamedPropertyEnumeratorCallback,
                    // v8::GenericNamedPropertyDefinerCallback,
                    // v8::GenericNamedPropertyDescriptorCallback,
                    // Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6360>(); // PointerType v8::NamedPropertyHandlerConfiguration *
  emit<_ast6361>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6362>(); // ParmVarDecl getter
  emit<_ast6363>(); // ParmVarDecl setter
  emit<_ast6364>(); // ParmVarDecl query
  emit<_ast6365>(); // ParmVarDecl deleter
  emit<_ast6366>(); // ParmVarDecl enumerator
  emit<_ast6367>(); // ParmVarDecl data
  emit<_ast6369>(); // ParmVarDecl flags
  emit<_ast6370>(); // FunctionProtoType void
                    // (v8::GenericNamedPropertyGetterCallback,
                    // v8::GenericNamedPropertySetterCallback,
                    // v8::GenericNamedPropertyQueryCallback,
                    // v8::GenericNamedPropertyDeleterCallback,
                    // v8::GenericNamedPropertyEnumeratorCallback,
                    // Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6371>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6372>(); // ParmVarDecl getter
  emit<_ast6373>(); // ParmVarDecl setter
  emit<_ast6374>(); // ParmVarDecl descriptor
  emit<_ast6375>(); // ParmVarDecl deleter
  emit<_ast6376>(); // ParmVarDecl enumerator
  emit<_ast6377>(); // ParmVarDecl definer
  emit<_ast6378>(); // ParmVarDecl data
  emit<_ast6380>(); // ParmVarDecl flags
  emit<_ast6381>(); // FunctionProtoType void
                    // (v8::GenericNamedPropertyGetterCallback,
                    // v8::GenericNamedPropertySetterCallback,
                    // v8::GenericNamedPropertyDescriptorCallback,
                    // v8::GenericNamedPropertyDeleterCallback,
                    // v8::GenericNamedPropertyEnumeratorCallback,
                    // v8::GenericNamedPropertyDefinerCallback,
                    // Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6382>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6383>(); // ParmVarDecl
  emit<_ast6384>(); // LValueReferenceType const
                    // v8::NamedPropertyHandlerConfiguration &
  emit<_ast6385>(); // RecordType const v8::NamedPropertyHandlerConfiguration
  emit<_ast6386>(); // FunctionProtoType void (const
                    // v8::NamedPropertyHandlerConfiguration &)
  emit<_ast6387>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6388>(); // ParmVarDecl
  emit<_ast6389>(); // RValueReferenceType v8::NamedPropertyHandlerConfiguration
                    // &&
  emit<_ast6390>(); // FunctionProtoType void
                    // (v8::NamedPropertyHandlerConfiguration &&)
  emit<_ast6391>(); // CXXRecordDecl IndexedPropertyHandlerConfiguration
  emit<_ast6392>(); // RecordType v8::IndexedPropertyHandlerConfiguration
  emit<_ast6393>(); // FieldDecl getter
  emit<_ast6394>(); // FieldDecl setter
  emit<_ast6395>(); // FieldDecl query
  emit<_ast6396>(); // FieldDecl deleter
  emit<_ast6397>(); // FieldDecl enumerator
  emit<_ast6398>(); // FieldDecl definer
  emit<_ast6399>(); // FieldDecl descriptor
  emit<_ast6400>(); // FieldDecl data
  emit<_ast6402>(); // FieldDecl flags
  emit<_ast6403>(); // CXXRecordDecl IndexedPropertyHandlerConfiguration
  emit<_ast6404>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6405>(); // ParmVarDecl getter
  emit<_ast6406>(); // ParmVarDecl setter
  emit<_ast6407>(); // ParmVarDecl query
  emit<_ast6408>(); // ParmVarDecl deleter
  emit<_ast6409>(); // ParmVarDecl enumerator
  emit<_ast6410>(); // ParmVarDecl definer
  emit<_ast6411>(); // ParmVarDecl descriptor
  emit<_ast6412>(); // ParmVarDecl data
  emit<_ast6414>(); // ParmVarDecl flags
  emit<_ast6415>(); // FunctionProtoType void
                    // (v8::IndexedPropertyGetterCallback,
                    // v8::IndexedPropertySetterCallback,
                    // v8::IndexedPropertyQueryCallback,
                    // v8::IndexedPropertyDeleterCallback,
                    // v8::IndexedPropertyEnumeratorCallback,
                    // v8::IndexedPropertyDefinerCallback,
                    // v8::IndexedPropertyDescriptorCallback, Local<v8::Value>,
                    // v8::PropertyHandlerFlags)
  emit<_ast6416>(); // PointerType v8::IndexedPropertyHandlerConfiguration *
  emit<_ast6417>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6418>(); // ParmVarDecl getter
  emit<_ast6419>(); // ParmVarDecl setter
  emit<_ast6420>(); // ParmVarDecl query
  emit<_ast6421>(); // ParmVarDecl deleter
  emit<_ast6422>(); // ParmVarDecl enumerator
  emit<_ast6423>(); // ParmVarDecl data
  emit<_ast6425>(); // ParmVarDecl flags
  emit<_ast6426>(); // FunctionProtoType void
                    // (v8::IndexedPropertyGetterCallback,
                    // v8::IndexedPropertySetterCallback,
                    // v8::IndexedPropertyQueryCallback,
                    // v8::IndexedPropertyDeleterCallback,
                    // v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>,
                    // v8::PropertyHandlerFlags)
  emit<_ast6427>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6428>(); // ParmVarDecl getter
  emit<_ast6429>(); // ParmVarDecl setter
  emit<_ast6430>(); // ParmVarDecl descriptor
  emit<_ast6431>(); // ParmVarDecl deleter
  emit<_ast6432>(); // ParmVarDecl enumerator
  emit<_ast6433>(); // ParmVarDecl definer
  emit<_ast6434>(); // ParmVarDecl data
  emit<_ast6436>(); // ParmVarDecl flags
  emit<_ast6437>(); // FunctionProtoType void
                    // (v8::IndexedPropertyGetterCallback,
                    // v8::IndexedPropertySetterCallback,
                    // v8::IndexedPropertyDescriptorCallback,
                    // v8::IndexedPropertyDeleterCallback,
                    // v8::IndexedPropertyEnumeratorCallback,
                    // v8::IndexedPropertyDefinerCallback, Local<v8::Value>,
                    // v8::PropertyHandlerFlags)
  emit<_ast6438>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6439>(); // ParmVarDecl
  emit<_ast6440>(); // LValueReferenceType const
                    // v8::IndexedPropertyHandlerConfiguration &
  emit<_ast6441>(); // RecordType const v8::IndexedPropertyHandlerConfiguration
  emit<_ast6442>(); // FunctionProtoType void (const
                    // v8::IndexedPropertyHandlerConfiguration &)
  emit<_ast6443>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6444>(); // ParmVarDecl
  emit<_ast6445>(); // RValueReferenceType
                    // v8::IndexedPropertyHandlerConfiguration &&
  emit<_ast6446>(); // FunctionProtoType void
                    // (v8::IndexedPropertyHandlerConfiguration &&)
  emit<_ast6447>(); // CXXDestructorDecl ~IndexedPropertyHandlerConfiguration
  emit<_ast6448>(); // CXXRecordDecl ObjectTemplate
  emit<_ast6449>(); // CXXMethodDecl New
  emit<_ast6450>(); // ParmVarDecl isolate
  emit<_ast6451>(); // ParmVarDecl constructor
  emit<_ast6453>(); // FunctionProtoType Local<v8::ObjectTemplate> (v8::Isolate
                    // *, Local<v8::FunctionTemplate>)
  emit<_ast6455>(); // CXXMethodDecl FromSnapshot
  emit<_ast6456>(); // ParmVarDecl isolate
  emit<_ast6457>(); // ParmVarDecl index
  emit<_ast6458>(); // FunctionProtoType MaybeLocal<v8::ObjectTemplate>
                    // (v8::Isolate *, size_t)
  emit<_ast6460>(); // CXXMethodDecl NewInstance
  emit<_ast6461>(); // ParmVarDecl context
  emit<_ast6463>(); // FunctionProtoType MaybeLocal<v8::Object>
                    // (Local<v8::Context>)
  emit<_ast6465>(); // PointerType v8::ObjectTemplate *
  emit<_ast6466>(); // CXXMethodDecl SetAccessor
  emit<_ast6467>(); // ParmVarDecl name
  emit<_ast6469>(); // ParmVarDecl getter
  emit<_ast6470>(); // ParmVarDecl setter
  emit<_ast6471>(); // ParmVarDecl data
  emit<_ast6473>(); // ParmVarDecl settings
  emit<_ast6474>(); // ParmVarDecl attribute
  emit<_ast6475>(); // ParmVarDecl signature
  emit<_ast6477>(); // ParmVarDecl getter_side_effect_type
  emit<_ast6478>(); // ParmVarDecl setter_side_effect_type
  emit<_ast6479>(); // FunctionProtoType void (Local<v8::String>,
                    // v8::AccessorGetterCallback, v8::AccessorSetterCallback,
                    // Local<v8::Value>, v8::AccessControl,
                    // v8::PropertyAttribute, Local<v8::AccessorSignature>,
                    // v8::SideEffectType, v8::SideEffectType)
  emit<_ast6480>(); // CXXMethodDecl SetAccessor
  emit<_ast6481>(); // ParmVarDecl name
  emit<_ast6483>(); // ParmVarDecl getter
  emit<_ast6484>(); // ParmVarDecl setter
  emit<_ast6485>(); // ParmVarDecl data
  emit<_ast6487>(); // ParmVarDecl settings
  emit<_ast6488>(); // ParmVarDecl attribute
  emit<_ast6489>(); // ParmVarDecl signature
  emit<_ast6491>(); // ParmVarDecl getter_side_effect_type
  emit<_ast6492>(); // ParmVarDecl setter_side_effect_type
  emit<_ast6493>(); // FunctionProtoType void (Local<v8::Name>,
                    // v8::AccessorNameGetterCallback,
                    // v8::AccessorNameSetterCallback, Local<v8::Value>,
                    // v8::AccessControl, v8::PropertyAttribute,
                    // Local<v8::AccessorSignature>, v8::SideEffectType,
                    // v8::SideEffectType)
  emit<_ast6494>(); // CXXMethodDecl SetHandler
  emit<_ast6495>(); // ParmVarDecl configuration
  emit<_ast6496>(); // FunctionProtoType void (const
                    // v8::NamedPropertyHandlerConfiguration &)
  emit<_ast6497>(); // CXXMethodDecl SetIndexedPropertyHandler
  emit<_ast6498>(); // ParmVarDecl getter
  emit<_ast6499>(); // ParmVarDecl setter
  emit<_ast6500>(); // ParmVarDecl query
  emit<_ast6501>(); // ParmVarDecl deleter
  emit<_ast6502>(); // ParmVarDecl enumerator
  emit<_ast6503>(); // ParmVarDecl data
  emit<_ast6505>(); // FunctionProtoType void
                    // (v8::IndexedPropertyGetterCallback,
                    // v8::IndexedPropertySetterCallback,
                    // v8::IndexedPropertyQueryCallback,
                    // v8::IndexedPropertyDeleterCallback,
                    // v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
  emit<_ast6506>(); // CXXMethodDecl SetHandler
  emit<_ast6507>(); // ParmVarDecl configuration
  emit<_ast6508>(); // FunctionProtoType void (const
                    // v8::IndexedPropertyHandlerConfiguration &)
  emit<_ast6509>(); // CXXMethodDecl SetCallAsFunctionHandler
  emit<_ast6510>(); // ParmVarDecl callback
  emit<_ast6511>(); // ParmVarDecl data
  emit<_ast6513>(); // FunctionProtoType void (v8::FunctionCallback,
                    // Local<v8::Value>)
  emit<_ast6514>(); // CXXMethodDecl MarkAsUndetectable
  emit<_ast6515>(); // CXXMethodDecl SetAccessCheckCallback
  emit<_ast6516>(); // ParmVarDecl callback
  emit<_ast6517>(); // ParmVarDecl data
  emit<_ast6519>(); // FunctionProtoType void (v8::AccessCheckCallback,
                    // Local<v8::Value>)
  emit<_ast6520>(); // CXXMethodDecl SetAccessCheckCallbackAndHandler
  emit<_ast6521>(); // ParmVarDecl callback
  emit<_ast6522>(); // ParmVarDecl named_handler
  emit<_ast6523>(); // ParmVarDecl indexed_handler
  emit<_ast6524>(); // ParmVarDecl data
  emit<_ast6526>(); // FunctionProtoType void (v8::AccessCheckCallback, const
                    // v8::NamedPropertyHandlerConfiguration &, const
                    // v8::IndexedPropertyHandlerConfiguration &,
                    // Local<v8::Value>)
  emit<_ast6527>(); // CXXMethodDecl InternalFieldCount
  emit<_ast6528>(); // CXXMethodDecl SetInternalFieldCount
  emit<_ast6529>(); // ParmVarDecl value
  emit<_ast6530>(); // CXXMethodDecl IsImmutableProto
  emit<_ast6531>(); // CXXMethodDecl SetImmutableProto
  emit<_ast6532>(); // CXXMethodDecl Cast
  emit<_ast6533>(); // ParmVarDecl data
  emit<_ast6534>(); // FunctionProtoType v8::ObjectTemplate *(v8::Data *)
  emit<_ast6535>(); // CXXRecordDecl Signature
  emit<_ast6536>(); // CXXMethodDecl New
  emit<_ast6537>(); // ParmVarDecl isolate
  emit<_ast6538>(); // ParmVarDecl receiver
  emit<_ast6540>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *,
                    // Local<v8::FunctionTemplate>)
  emit<_ast6542>(); // CXXMethodDecl Cast
  emit<_ast6543>(); // ParmVarDecl data
  emit<_ast6544>(); // FunctionProtoType v8::Signature *(v8::Data *)
  emit<_ast6545>(); // PointerType v8::Signature *
  emit<_ast6546>(); // CXXRecordDecl AccessorSignature
  emit<_ast6547>(); // CXXMethodDecl New
  emit<_ast6548>(); // ParmVarDecl isolate
  emit<_ast6549>(); // ParmVarDecl receiver
  emit<_ast6551>(); // FunctionProtoType Local<v8::AccessorSignature>
                    // (v8::Isolate *, Local<v8::FunctionTemplate>)
  emit<_ast6553>(); // CXXMethodDecl Cast
  emit<_ast6554>(); // ParmVarDecl data
  emit<_ast6555>(); // FunctionProtoType v8::AccessorSignature *(v8::Data *)
  emit<_ast6556>(); // PointerType v8::AccessorSignature *
  emit<_ast6557>(); // CXXRecordDecl Extension
  emit<_ast6558>(); // RecordType v8::Extension
  emit<_ast6559>(); // FieldDecl name_
  emit<_ast6560>(); // FieldDecl source_length_
  emit<_ast6561>(); // FieldDecl source_
  emit<_ast6562>(); // PointerType String::ExternalOneByteStringResource *
  emit<_ast6564>(); // FieldDecl dep_count_
  emit<_ast6565>(); // FieldDecl deps_
  emit<_ast6566>(); // PointerType const char **
  emit<_ast6567>(); // FieldDecl auto_enable_
  emit<_ast6568>(); // CXXRecordDecl Extension
  emit<_ast6569>(); // CXXConstructorDecl Extension
  emit<_ast6570>(); // ParmVarDecl name
  emit<_ast6571>(); // ParmVarDecl source
  emit<_ast6572>(); // ParmVarDecl dep_count
  emit<_ast6573>(); // ParmVarDecl deps
  emit<_ast6574>(); // ParmVarDecl source_length
  emit<_ast6575>(); // FunctionProtoType void (const char *, const char *, int,
                    // const char **, int)
  emit<_ast6576>(); // PointerType v8::Extension *
  emit<_ast6577>(); // CXXDestructorDecl ~Extension
  emit<_ast6578>(); // CXXMethodDecl GetNativeFunctionTemplate
  emit<_ast6579>(); // ParmVarDecl isolate
  emit<_ast6580>(); // ParmVarDecl name
  emit<_ast6582>(); // FunctionProtoType Local<v8::FunctionTemplate>
                    // (v8::Isolate *, Local<v8::String>)
  emit<_ast6584>(); // CXXMethodDecl name
  emit<_ast6585>(); // PointerType const v8::Extension *
  emit<_ast6586>(); // RecordType const v8::Extension
  emit<_ast6587>(); // CXXMethodDecl source_length
  emit<_ast6588>(); // CXXMethodDecl source
  emit<_ast6589>(); // FunctionProtoType const
                    // String::ExternalOneByteStringResource *() const
  emit<_ast6590>(); // PointerType const String::ExternalOneByteStringResource *
  emit<_ast6591>(); // ElaboratedType const
                    // String::ExternalOneByteStringResource
  emit<_ast6592>(); // CXXMethodDecl dependency_count
  emit<_ast6593>(); // CXXMethodDecl dependencies
  emit<_ast6594>(); // FunctionProtoType const char **() const
  emit<_ast6595>(); // CXXMethodDecl set_auto_enable
  emit<_ast6596>(); // ParmVarDecl value
  emit<_ast6597>(); // CXXMethodDecl auto_enable
  emit<_ast6598>(); // CXXConstructorDecl Extension
  emit<_ast6599>(); // ParmVarDecl
  emit<_ast6600>(); // LValueReferenceType const v8::Extension &
  emit<_ast6601>(); // FunctionProtoType void (const v8::Extension &)
  emit<_ast6602>(); // CXXMethodDecl operator=
  emit<_ast6603>(); // ParmVarDecl
  emit<_ast6604>(); // FunctionDecl RegisterExtension
  emit<_ast6605>(); // ParmVarDecl
  emit<_ast6607>(); // FunctionProtoType void (std::unique_ptr<Extension>)
  emit<_ast6608>(); // FunctionDecl Undefined
  emit<_ast6609>(); // ParmVarDecl isolate
  emit<_ast6610>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
  emit<_ast6612>(); // ParmVarDecl isolate
  emit<_ast6613>(); // FunctionDecl Null
  emit<_ast6614>(); // ParmVarDecl isolate
  emit<_ast6615>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
  emit<_ast6617>(); // ParmVarDecl isolate
  emit<_ast6618>(); // FunctionDecl True
  emit<_ast6619>(); // ParmVarDecl isolate
  emit<_ast6620>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
  emit<_ast6622>(); // ParmVarDecl isolate
  emit<_ast6623>(); // FunctionDecl False
  emit<_ast6624>(); // ParmVarDecl isolate
  emit<_ast6625>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
  emit<_ast6627>(); // ParmVarDecl isolate
  emit<_ast6628>(); // CXXRecordDecl ResourceConstraints
  emit<_ast6629>(); // RecordType v8::ResourceConstraints
  emit<_ast6630>(); // FieldDecl code_range_size_
  emit<_ast6631>(); // FieldDecl max_old_generation_size_
  emit<_ast6632>(); // FieldDecl max_young_generation_size_
  emit<_ast6633>(); // FieldDecl max_zone_pool_size_
  emit<_ast6634>(); // FieldDecl initial_old_generation_size_
  emit<_ast6635>(); // FieldDecl initial_young_generation_size_
  emit<_ast6636>(); // FieldDecl stack_limit_
  emit<_ast6637>(); // CXXRecordDecl ResourceConstraints
  emit<_ast6638>(); // CXXMethodDecl ConfigureDefaultsFromHeapSize
  emit<_ast6639>(); // ParmVarDecl initial_heap_size_in_bytes
  emit<_ast6640>(); // ParmVarDecl maximum_heap_size_in_bytes
  emit<_ast6641>(); // FunctionProtoType void (size_t, size_t)
  emit<_ast6642>(); // PointerType v8::ResourceConstraints *
  emit<_ast6643>(); // CXXMethodDecl ConfigureDefaults
  emit<_ast6644>(); // ParmVarDecl physical_memory
  emit<_ast6645>(); // ParmVarDecl virtual_memory_limit
  emit<_ast6646>(); // FunctionProtoType void (uint64_t, uint64_t)
  emit<_ast6647>(); // CXXMethodDecl stack_limit
  emit<_ast6648>(); // FunctionProtoType uint32_t *() const
  emit<_ast6649>(); // PointerType const v8::ResourceConstraints *
  emit<_ast6650>(); // RecordType const v8::ResourceConstraints
  emit<_ast6651>(); // CXXMethodDecl set_stack_limit
  emit<_ast6652>(); // ParmVarDecl value
  emit<_ast6653>(); // FunctionProtoType void (uint32_t *)
  emit<_ast6654>(); // CXXMethodDecl code_range_size_in_bytes
  emit<_ast6655>(); // CXXMethodDecl set_code_range_size_in_bytes
  emit<_ast6656>(); // ParmVarDecl limit
  emit<_ast6657>(); // FunctionProtoType void (size_t)
  emit<_ast6658>(); // CXXMethodDecl max_old_generation_size_in_bytes
  emit<_ast6659>(); // CXXMethodDecl set_max_old_generation_size_in_bytes
  emit<_ast6660>(); // ParmVarDecl limit
  emit<_ast6661>(); // CXXMethodDecl max_young_generation_size_in_bytes
  emit<_ast6662>(); // CXXMethodDecl set_max_young_generation_size_in_bytes
  emit<_ast6663>(); // ParmVarDecl limit
  emit<_ast6664>(); // CXXMethodDecl initial_old_generation_size_in_bytes
  emit<_ast6665>(); // CXXMethodDecl set_initial_old_generation_size_in_bytes
  emit<_ast6666>(); // ParmVarDecl initial_size
  emit<_ast6667>(); // CXXMethodDecl initial_young_generation_size_in_bytes
  emit<_ast6668>(); // CXXMethodDecl set_initial_young_generation_size_in_bytes
  emit<_ast6669>(); // ParmVarDecl initial_size
  emit<_ast6670>(); // CXXMethodDecl code_range_size
  emit<_ast6671>(); // CXXMethodDecl set_code_range_size
  emit<_ast6672>(); // ParmVarDecl limit_in_mb
  emit<_ast6673>(); // CXXMethodDecl max_semi_space_size_in_kb
  emit<_ast6674>(); // CXXMethodDecl set_max_semi_space_size_in_kb
  emit<_ast6675>(); // ParmVarDecl limit_in_kb
  emit<_ast6676>(); // CXXMethodDecl max_old_space_size
  emit<_ast6677>(); // CXXMethodDecl set_max_old_space_size
  emit<_ast6678>(); // ParmVarDecl limit_in_mb
  emit<_ast6679>(); // CXXMethodDecl max_zone_pool_size
  emit<_ast6680>(); // CXXMethodDecl set_max_zone_pool_size
  emit<_ast6681>(); // ParmVarDecl bytes
  emit<_ast6682>(); // CXXConstructorDecl ResourceConstraints
  emit<_ast6683>(); // CXXConstructorDecl ResourceConstraints
  emit<_ast6684>(); // ParmVarDecl
  emit<_ast6685>(); // LValueReferenceType const v8::ResourceConstraints &
  emit<_ast6686>(); // FunctionProtoType void (const v8::ResourceConstraints &)
  emit<_ast6687>(); // CXXConstructorDecl ResourceConstraints
  emit<_ast6688>(); // ParmVarDecl
  emit<_ast6689>(); // RValueReferenceType v8::ResourceConstraints &&
  emit<_ast6690>(); // FunctionProtoType void (v8::ResourceConstraints &&)
  emit<_ast6691>(); // TypedefDecl FatalErrorCallback
  emit<_ast6692>(); // TypedefType v8::FatalErrorCallback
  emit<_ast6693>(); // TypedefDecl OOMErrorCallback
  emit<_ast6694>(); // TypedefType v8::OOMErrorCallback
  emit<_ast6695>(); // TypedefDecl DcheckErrorCallback
  emit<_ast6696>(); // TypedefType v8::DcheckErrorCallback
  emit<_ast6697>(); // TypedefDecl MessageCallback
  emit<_ast6698>(); // TypedefType v8::MessageCallback
  emit<_ast6699>(); // TypedefDecl LogEventCallback
  emit<_ast6700>(); // TypedefType v8::LogEventCallback
  emit<_ast6701>(); // CXXRecordDecl Exception
  emit<_ast6702>(); // RecordType v8::Exception
  emit<_ast6703>(); // CXXRecordDecl Exception
  emit<_ast6704>(); // CXXMethodDecl RangeError
  emit<_ast6705>(); // ParmVarDecl message
  emit<_ast6707>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6709>(); // CXXMethodDecl ReferenceError
  emit<_ast6710>(); // ParmVarDecl message
  emit<_ast6712>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6714>(); // CXXMethodDecl SyntaxError
  emit<_ast6715>(); // ParmVarDecl message
  emit<_ast6717>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6719>(); // CXXMethodDecl TypeError
  emit<_ast6720>(); // ParmVarDecl message
  emit<_ast6722>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6724>(); // CXXMethodDecl Error
  emit<_ast6725>(); // ParmVarDecl message
  emit<_ast6727>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6729>(); // CXXMethodDecl CreateMessage
  emit<_ast6730>(); // ParmVarDecl isolate
  emit<_ast6731>(); // ParmVarDecl exception
  emit<_ast6733>(); // FunctionProtoType Local<v8::Message> (v8::Isolate *,
                    // Local<v8::Value>)
  emit<_ast6735>(); // CXXMethodDecl GetStackTrace
  emit<_ast6736>(); // ParmVarDecl exception
  emit<_ast6738>(); // FunctionProtoType Local<v8::StackTrace>
                    // (Local<v8::Value>)
  emit<_ast6740>(); // TypedefDecl CounterLookupCallback
  emit<_ast6741>(); // TypedefType v8::CounterLookupCallback
  emit<_ast6742>(); // TypedefDecl CreateHistogramCallback
  emit<_ast6743>(); // TypedefType v8::CreateHistogramCallback
  emit<_ast6744>(); // TypedefDecl AddHistogramSampleCallback
  emit<_ast6745>(); // TypedefType v8::AddHistogramSampleCallback
  emit<_ast6746>(); // TypedefDecl BeforeCallEnteredCallback
  emit<_ast6747>(); // TypedefType v8::BeforeCallEnteredCallback
  emit<_ast6748>(); // TypedefDecl CallCompletedCallback
  emit<_ast6749>(); // TypedefType v8::CallCompletedCallback
  emit<_ast6750>(); // TypedefDecl HostImportModuleDynamicallyCallback
  emit<_ast6751>(); // TypedefType v8::HostImportModuleDynamicallyCallback
  emit<_ast6752>(); // TypedefDecl HostInitializeImportMetaObjectCallback
  emit<_ast6753>(); // TypedefType v8::HostInitializeImportMetaObjectCallback
  emit<_ast6754>(); // TypedefDecl PrepareStackTraceCallback
  emit<_ast6755>(); // TypedefType v8::PrepareStackTraceCallback
  emit<_ast6761>(); // TypedefDecl PromiseHook
  emit<_ast6762>(); // TypedefType v8::PromiseHook
  emit<_ast6768>(); // CXXRecordDecl PromiseRejectMessage
  emit<_ast6769>(); // RecordType v8::PromiseRejectMessage
  emit<_ast6770>(); // FieldDecl promise_
  emit<_ast6772>(); // FieldDecl event_
  emit<_ast6773>(); // EnumType v8::PromiseRejectEvent
  emit<_ast6774>(); // FieldDecl value_
  emit<_ast6776>(); // CXXRecordDecl PromiseRejectMessage
  emit<_ast6777>(); // CXXConstructorDecl PromiseRejectMessage
  emit<_ast6778>(); // ParmVarDecl promise
  emit<_ast6780>(); // ParmVarDecl event
  emit<_ast6781>(); // ParmVarDecl value
  emit<_ast6783>(); // FunctionProtoType void (Local<v8::Promise>,
                    // v8::PromiseRejectEvent, Local<v8::Value>)
  emit<_ast6784>(); // PointerType v8::PromiseRejectMessage *
  emit<_ast6785>(); // CXXMethodDecl GetPromise
  emit<_ast6786>(); // FunctionProtoType Local<v8::Promise> () const
  emit<_ast6788>(); // PointerType const v8::PromiseRejectMessage *
  emit<_ast6789>(); // RecordType const v8::PromiseRejectMessage
  emit<_ast6790>(); // CXXMethodDecl GetEvent
  emit<_ast6791>(); // FunctionProtoType v8::PromiseRejectEvent () const
  emit<_ast6792>(); // CXXMethodDecl GetValue
  emit<_ast6793>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast6795>(); // TypedefDecl PromiseRejectCallback
  emit<_ast6796>(); // TypedefType v8::PromiseRejectCallback
  emit<_ast6797>(); // TypedefDecl MicrotasksCompletedCallback
  emit<_ast6798>(); // TypedefType v8::MicrotasksCompletedCallback
  emit<_ast6799>(); // TypedefDecl MicrotasksCompletedCallbackWithData
  emit<_ast6800>(); // TypedefType v8::MicrotasksCompletedCallbackWithData
  emit<_ast6801>(); // TypedefDecl MicrotaskCallback
  emit<_ast6802>(); // TypedefType v8::MicrotaskCallback
  emit<_ast6807>(); // CXXRecordDecl MicrotaskQueue
  emit<_ast6808>(); // CXXMethodDecl New
  emit<_ast6809>(); // ParmVarDecl isolate
  emit<_ast6810>(); // ParmVarDecl policy
  emit<_ast6811>(); // EnumType v8::MicrotasksPolicy
  emit<_ast6812>(); // FunctionProtoType std::unique_ptr<MicrotaskQueue>
                    // (v8::Isolate *, v8::MicrotasksPolicy)
  emit<_ast6814>(); // CXXDestructorDecl ~MicrotaskQueue
  emit<_ast6815>(); // FunctionProtoType void ()
  emit<_ast6816>(); // PointerType v8::MicrotaskQueue *
  emit<_ast6817>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast6818>(); // ParmVarDecl isolate
  emit<_ast6819>(); // ParmVarDecl microtask
  emit<_ast6821>(); // FunctionProtoType void (v8::Isolate *,
                    // Local<v8::Function>)
  emit<_ast6822>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast6823>(); // ParmVarDecl isolate
  emit<_ast6824>(); // PointerType v8::Isolate *
  emit<_ast6826>(); // ParmVarDecl callback
  emit<_ast6827>(); // ParmVarDecl data
  emit<_ast6828>(); // FunctionProtoType void (v8::Isolate *,
                    // v8::MicrotaskCallback, void *)
  emit<_ast6829>(); // CXXMethodDecl AddMicrotasksCompletedCallback
  emit<_ast6830>(); // ParmVarDecl callback
  emit<_ast6831>(); // ParmVarDecl data
  emit<_ast6832>(); // FunctionProtoType void
                    // (v8::MicrotasksCompletedCallbackWithData, void *)
  emit<_ast6833>(); // CXXMethodDecl RemoveMicrotasksCompletedCallback
  emit<_ast6834>(); // ParmVarDecl callback
  emit<_ast6835>(); // ParmVarDecl data
  emit<_ast6836>(); // CXXMethodDecl PerformCheckpoint
  emit<_ast6837>(); // ParmVarDecl isolate
  emit<_ast6838>(); // CXXMethodDecl IsRunningMicrotasks
  emit<_ast6839>(); // PointerType const v8::MicrotaskQueue *
  emit<_ast6840>(); // RecordType const v8::MicrotaskQueue
  emit<_ast6841>(); // CXXMethodDecl GetMicrotasksScopeDepth
  emit<_ast6842>(); // CXXConstructorDecl MicrotaskQueue
  emit<_ast6843>(); // ParmVarDecl
  emit<_ast6844>(); // LValueReferenceType const v8::MicrotaskQueue &
  emit<_ast6845>(); // FunctionProtoType void (const v8::MicrotaskQueue &)
  emit<_ast6846>(); // CXXMethodDecl operator=
  emit<_ast6847>(); // ParmVarDecl
  emit<_ast6848>(); // FunctionProtoType v8::MicrotaskQueue &(const
                    // v8::MicrotaskQueue &)
  emit<_ast6849>(); // LValueReferenceType v8::MicrotaskQueue &
  emit<_ast6850>(); // CXXRecordDecl MicrotasksScope
  emit<_ast6851>(); // RecordType v8::MicrotasksScope
  emit<_ast6852>(); // FieldDecl isolate_
  emit<_ast6853>(); // FieldDecl microtask_queue_
  emit<_ast6854>(); // PointerType internal::MicrotaskQueue *const
  emit<_ast6855>(); // PointerType internal::MicrotaskQueue *
  emit<_ast6857>(); // FieldDecl run_
  emit<_ast6858>(); // CXXRecordDecl MicrotasksScope
  emit<_ast6862>(); // CXXConstructorDecl MicrotasksScope
  emit<_ast6863>(); // ParmVarDecl isolate
  emit<_ast6864>(); // ParmVarDecl type
  emit<_ast6865>(); // EnumType v8::MicrotasksScope::Type
  emit<_ast6866>(); // FunctionProtoType void (v8::Isolate *,
                    // v8::MicrotasksScope::Type)
  emit<_ast6867>(); // PointerType v8::MicrotasksScope *
  emit<_ast6868>(); // CXXConstructorDecl MicrotasksScope
  emit<_ast6869>(); // ParmVarDecl isolate
  emit<_ast6870>(); // ParmVarDecl microtask_queue
  emit<_ast6871>(); // ParmVarDecl type
  emit<_ast6872>(); // FunctionProtoType void (v8::Isolate *, v8::MicrotaskQueue
                    // *, v8::MicrotasksScope::Type)
  emit<_ast6873>(); // CXXDestructorDecl ~MicrotasksScope
  emit<_ast6874>(); // FunctionProtoType void ()
  emit<_ast6875>(); // CXXMethodDecl PerformCheckpoint
  emit<_ast6876>(); // ParmVarDecl isolate
  emit<_ast6877>(); // CXXMethodDecl GetCurrentDepth
  emit<_ast6878>(); // ParmVarDecl isolate
  emit<_ast6879>(); // CXXMethodDecl IsRunningMicrotasks
  emit<_ast6880>(); // ParmVarDecl isolate
  emit<_ast6881>(); // FunctionProtoType bool (v8::Isolate *)
  emit<_ast6882>(); // CXXConstructorDecl MicrotasksScope
  emit<_ast6883>(); // ParmVarDecl
  emit<_ast6884>(); // LValueReferenceType const v8::MicrotasksScope &
  emit<_ast6885>(); // RecordType const v8::MicrotasksScope
  emit<_ast6886>(); // FunctionProtoType void (const v8::MicrotasksScope &)
  emit<_ast6887>(); // CXXMethodDecl operator=
  emit<_ast6888>(); // ParmVarDecl
  emit<_ast6889>(); // FunctionProtoType v8::MicrotasksScope &(const
                    // v8::MicrotasksScope &)
  emit<_ast6890>(); // LValueReferenceType v8::MicrotasksScope &
  emit<_ast6891>(); // TypedefDecl FailedAccessCheckCallback
  emit<_ast6892>(); // TypedefType v8::FailedAccessCheckCallback
  emit<_ast6893>(); // TypedefDecl AllowCodeGenerationFromStringsCallback
  emit<_ast6894>(); // TypedefType v8::AllowCodeGenerationFromStringsCallback
  emit<_ast6895>(); // TypedefDecl ExtensionCallback
  emit<_ast6896>(); // TypedefType v8::ExtensionCallback
  emit<_ast6897>(); // TypedefDecl AllowWasmCodeGenerationCallback
  emit<_ast6898>(); // TypedefType v8::AllowWasmCodeGenerationCallback
  emit<_ast6899>(); // TypedefDecl ApiImplementationCallback
  emit<_ast6900>(); // TypedefType v8::ApiImplementationCallback
  emit<_ast6901>(); // TypedefDecl WasmStreamingCallback
  emit<_ast6902>(); // TypedefType v8::WasmStreamingCallback
  emit<_ast6903>(); // TypedefDecl WasmThreadsEnabledCallback
  emit<_ast6904>(); // TypedefType v8::WasmThreadsEnabledCallback
  emit<_ast6919>(); // TypedefDecl GCCallback
  emit<_ast6920>(); // TypedefType v8::GCCallback
  emit<_ast6921>(); // TypedefDecl InterruptCallback
  emit<_ast6922>(); // TypedefType v8::InterruptCallback
  emit<_ast6923>(); // TypedefDecl NearHeapLimitCallback
  emit<_ast6924>(); // TypedefType v8::NearHeapLimitCallback
  emit<_ast6925>(); // CXXRecordDecl HeapStatistics
  emit<_ast6926>(); // RecordType v8::HeapStatistics
  emit<_ast6927>(); // FieldDecl total_heap_size_
  emit<_ast6928>(); // FieldDecl total_heap_size_executable_
  emit<_ast6929>(); // FieldDecl total_physical_size_
  emit<_ast6930>(); // FieldDecl total_available_size_
  emit<_ast6931>(); // FieldDecl used_heap_size_
  emit<_ast6932>(); // FieldDecl heap_size_limit_
  emit<_ast6933>(); // FieldDecl malloced_memory_
  emit<_ast6934>(); // FieldDecl external_memory_
  emit<_ast6935>(); // FieldDecl peak_malloced_memory_
  emit<_ast6936>(); // FieldDecl does_zap_garbage_
  emit<_ast6937>(); // FieldDecl number_of_native_contexts_
  emit<_ast6938>(); // FieldDecl number_of_detached_contexts_
  emit<_ast6939>(); // CXXRecordDecl HeapStatistics
  emit<_ast6940>(); // CXXConstructorDecl HeapStatistics
  emit<_ast6941>(); // PointerType v8::HeapStatistics *
  emit<_ast6942>(); // CXXMethodDecl total_heap_size
  emit<_ast6943>(); // CXXMethodDecl total_heap_size_executable
  emit<_ast6944>(); // CXXMethodDecl total_physical_size
  emit<_ast6945>(); // CXXMethodDecl total_available_size
  emit<_ast6946>(); // CXXMethodDecl used_heap_size
  emit<_ast6947>(); // CXXMethodDecl heap_size_limit
  emit<_ast6948>(); // CXXMethodDecl malloced_memory
  emit<_ast6949>(); // CXXMethodDecl external_memory
  emit<_ast6950>(); // CXXMethodDecl peak_malloced_memory
  emit<_ast6951>(); // CXXMethodDecl number_of_native_contexts
  emit<_ast6952>(); // CXXMethodDecl number_of_detached_contexts
  emit<_ast6953>(); // CXXMethodDecl does_zap_garbage
  emit<_ast6954>(); // CXXRecordDecl HeapSpaceStatistics
  emit<_ast6955>(); // RecordType v8::HeapSpaceStatistics
  emit<_ast6956>(); // FieldDecl space_name_
  emit<_ast6957>(); // FieldDecl space_size_
  emit<_ast6958>(); // FieldDecl space_used_size_
  emit<_ast6959>(); // FieldDecl space_available_size_
  emit<_ast6960>(); // FieldDecl physical_space_size_
  emit<_ast6961>(); // CXXRecordDecl HeapSpaceStatistics
  emit<_ast6962>(); // CXXConstructorDecl HeapSpaceStatistics
  emit<_ast6963>(); // PointerType v8::HeapSpaceStatistics *
  emit<_ast6964>(); // CXXMethodDecl space_name
  emit<_ast6965>(); // FunctionProtoType const char *()
  emit<_ast6966>(); // CXXMethodDecl space_size
  emit<_ast6967>(); // CXXMethodDecl space_used_size
  emit<_ast6968>(); // CXXMethodDecl space_available_size
  emit<_ast6969>(); // CXXMethodDecl physical_space_size
  emit<_ast6970>(); // CXXRecordDecl HeapObjectStatistics
  emit<_ast6971>(); // RecordType v8::HeapObjectStatistics
  emit<_ast6972>(); // FieldDecl object_type_
  emit<_ast6973>(); // FieldDecl object_sub_type_
  emit<_ast6974>(); // FieldDecl object_count_
  emit<_ast6975>(); // FieldDecl object_size_
  emit<_ast6976>(); // CXXRecordDecl HeapObjectStatistics
  emit<_ast6977>(); // CXXConstructorDecl HeapObjectStatistics
  emit<_ast6978>(); // PointerType v8::HeapObjectStatistics *
  emit<_ast6979>(); // CXXMethodDecl object_type
  emit<_ast6980>(); // CXXMethodDecl object_sub_type
  emit<_ast6981>(); // CXXMethodDecl object_count
  emit<_ast6982>(); // CXXMethodDecl object_size
  emit<_ast6983>(); // CXXRecordDecl HeapCodeStatistics
  emit<_ast6984>(); // RecordType v8::HeapCodeStatistics
  emit<_ast6985>(); // FieldDecl code_and_metadata_size_
  emit<_ast6986>(); // FieldDecl bytecode_and_metadata_size_
  emit<_ast6987>(); // FieldDecl external_script_source_size_
  emit<_ast6988>(); // CXXRecordDecl HeapCodeStatistics
  emit<_ast6989>(); // CXXConstructorDecl HeapCodeStatistics
  emit<_ast6990>(); // PointerType v8::HeapCodeStatistics *
  emit<_ast6991>(); // CXXMethodDecl code_and_metadata_size
  emit<_ast6992>(); // CXXMethodDecl bytecode_and_metadata_size
  emit<_ast6993>(); // CXXMethodDecl external_script_source_size
  emit<_ast6994>(); // CXXRecordDecl JitCodeEvent
  emit<_ast6995>(); // RecordType v8::JitCodeEvent
  emit<_ast6996>(); // FieldDecl type
  emit<_ast6997>(); // EnumType v8::JitCodeEvent::EventType
  emit<_ast6999>(); // FieldDecl code_type
  emit<_ast7000>(); // EnumType v8::JitCodeEvent::CodeType
  emit<_ast7002>(); // FieldDecl code_start
  emit<_ast7003>(); // FieldDecl code_len
  emit<_ast7004>(); // FieldDecl script
  emit<_ast7006>(); // FieldDecl user_data
  emit<_ast7007>(); // FieldDecl
  emit<_ast7008>(); // RecordType v8::JitCodeEvent::(anonymous union at
                    // D:\gen8/v8/include/v8.h:7072:3)
  emit<_ast7009>(); // CXXRecordDecl
  emit<_ast7010>(); // FieldDecl name
  emit<_ast7012>(); // FieldDecl line_info
  emit<_ast7014>(); // FieldDecl new_code_start
  emit<_ast7015>(); // FieldDecl isolate
  emit<_ast7016>(); // CXXRecordDecl JitCodeEvent
  emit<_ast7028>(); // CXXRecordDecl name_t
  emit<_ast7029>(); // RecordType v8::JitCodeEvent::name_t
  emit<_ast7030>(); // FieldDecl str
  emit<_ast7031>(); // FieldDecl len
  emit<_ast7032>(); // CXXRecordDecl name_t
  emit<_ast7033>(); // CXXRecordDecl line_info_t
  emit<_ast7034>(); // RecordType v8::JitCodeEvent::line_info_t
  emit<_ast7035>(); // FieldDecl offset
  emit<_ast7036>(); // FieldDecl pos
  emit<_ast7037>(); // FieldDecl position_type
  emit<_ast7038>(); // EnumType v8::JitCodeEvent::PositionType
  emit<_ast7039>(); // CXXRecordDecl line_info_t
  emit<_ast7051>(); // TypedefDecl JitCodeEventHandler
  emit<_ast7052>(); // TypedefType v8::JitCodeEventHandler
  emit<_ast7053>(); // TypedefDecl UnhandledExceptionCallback
  emit<_ast7054>(); // TypedefType v8::UnhandledExceptionCallback
  emit<_ast7055>(); // CXXRecordDecl ExternalResourceVisitor
  emit<_ast7056>(); // RecordType v8::ExternalResourceVisitor
  emit<_ast7057>(); // CXXRecordDecl ExternalResourceVisitor
  emit<_ast7058>(); // CXXDestructorDecl ~ExternalResourceVisitor
  emit<_ast7059>(); // FunctionProtoType void ()
  emit<_ast7060>(); // PointerType v8::ExternalResourceVisitor *
  emit<_ast7061>(); // CXXMethodDecl VisitExternalString
  emit<_ast7062>(); // ParmVarDecl string
  emit<_ast7064>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast7065>(); // CXXMethodDecl operator=
  emit<_ast7066>(); // ParmVarDecl
  emit<_ast7067>(); // LValueReferenceType const v8::ExternalResourceVisitor &
  emit<_ast7068>(); // RecordType const v8::ExternalResourceVisitor
  emit<_ast7069>(); // FunctionProtoType v8::ExternalResourceVisitor &(const
                    // v8::ExternalResourceVisitor &)
  emit<_ast7070>(); // LValueReferenceType v8::ExternalResourceVisitor &
  emit<_ast7071>(); // CXXRecordDecl PersistentHandleVisitor
  emit<_ast7072>(); // RecordType v8::PersistentHandleVisitor
  emit<_ast7073>(); // CXXRecordDecl PersistentHandleVisitor
  emit<_ast7074>(); // CXXDestructorDecl ~PersistentHandleVisitor
  emit<_ast7075>(); // FunctionProtoType void ()
  emit<_ast7076>(); // PointerType v8::PersistentHandleVisitor *
  emit<_ast7077>(); // CXXMethodDecl VisitPersistentHandle
  emit<_ast7078>(); // ParmVarDecl value
  emit<_ast7079>(); // PointerType Persistent<v8::Value> *
  emit<_ast7081>(); // ParmVarDecl class_id
  emit<_ast7082>(); // FunctionProtoType void (Persistent<v8::Value> *,
                    // uint16_t)
  emit<_ast7083>(); // CXXMethodDecl operator=
  emit<_ast7084>(); // ParmVarDecl
  emit<_ast7085>(); // LValueReferenceType const v8::PersistentHandleVisitor &
  emit<_ast7086>(); // RecordType const v8::PersistentHandleVisitor
  emit<_ast7087>(); // FunctionProtoType v8::PersistentHandleVisitor &(const
                    // v8::PersistentHandleVisitor &)
  emit<_ast7088>(); // LValueReferenceType v8::PersistentHandleVisitor &
  emit<_ast7093>(); // CXXRecordDecl EmbedderHeapTracer
  emit<_ast7094>(); // RecordType v8::EmbedderHeapTracer
  emit<_ast7095>(); // CXXRecordDecl EmbedderHeapTracer
  emit<_ast7103>(); // CXXRecordDecl TracedGlobalHandleVisitor
  emit<_ast7104>(); // RecordType
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
  emit<_ast7105>(); // CXXRecordDecl TracedGlobalHandleVisitor
  emit<_ast7106>(); // CXXDestructorDecl ~TracedGlobalHandleVisitor
  emit<_ast7107>(); // FunctionProtoType void ()
  emit<_ast7108>(); // PointerType
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
  emit<_ast7109>(); // CXXMethodDecl VisitTracedGlobalHandle
  emit<_ast7110>(); // ParmVarDecl value
  emit<_ast7111>(); // LValueReferenceType const TracedGlobal<v8::Value> &
  emit<_ast7112>(); // TemplateSpecializationType const TracedGlobal<v8::Value>
  emit<_ast7114>(); // FunctionProtoType void (const TracedGlobal<v8::Value> &)
  emit<_ast7115>(); // CXXMethodDecl operator=
  emit<_ast7116>(); // ParmVarDecl
  emit<_ast7117>(); // LValueReferenceType const
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
  emit<_ast7118>(); // RecordType const
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
  emit<_ast7119>(); // FunctionProtoType
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
  emit<_ast7120>(); // LValueReferenceType
                    // v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
  emit<_ast7121>(); // CXXRecordDecl TraceSummary
  emit<_ast7122>(); // RecordType v8::EmbedderHeapTracer::TraceSummary
  emit<_ast7123>(); // FieldDecl time
  emit<_ast7124>(); // FieldDecl allocated_size
  emit<_ast7125>(); // CXXRecordDecl TraceSummary
  emit<_ast7126>(); // CXXDestructorDecl ~EmbedderHeapTracer
  emit<_ast7127>(); // FunctionProtoType void ()
  emit<_ast7128>(); // PointerType v8::EmbedderHeapTracer *
  emit<_ast7129>(); // CXXMethodDecl IterateTracedGlobalHandles
  emit<_ast7130>(); // ParmVarDecl visitor
  emit<_ast7131>(); // FunctionProtoType void
                    // (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
  emit<_ast7132>(); // CXXMethodDecl RegisterV8References
  emit<_ast7133>(); // ParmVarDecl embedder_fields
  emit<_ast7134>(); // LValueReferenceType const std::vector<std::pair<void *,
                    // void *> > &
  emit<_ast7135>(); // ElaboratedType const std::vector<std::pair<void *, void
                    // *> >
  emit<_ast7137>(); // FunctionProtoType void (const std::vector<std::pair<void
                    // *, void *> > &)
  emit<_ast7138>(); // CXXMethodDecl RegisterEmbedderReference
  emit<_ast7139>(); // ParmVarDecl ref
  emit<_ast7140>(); // LValueReferenceType const TracedGlobal<v8::Value> &
  emit<_ast7141>(); // TemplateSpecializationType const TracedGlobal<v8::Value>
  emit<_ast7143>(); // FunctionProtoType void (const TracedGlobal<v8::Value> &)
  emit<_ast7144>(); // CXXMethodDecl TracePrologue
  emit<_ast7145>(); // CXXMethodDecl TracePrologue
  emit<_ast7146>(); // ParmVarDecl flags
  emit<_ast7147>(); // EnumType v8::EmbedderHeapTracer::TraceFlags
  emit<_ast7148>(); // FunctionProtoType void
                    // (v8::EmbedderHeapTracer::TraceFlags)
  emit<_ast7149>(); // CXXMethodDecl AdvanceTracing
  emit<_ast7150>(); // ParmVarDecl deadline_in_ms
  emit<_ast7151>(); // FunctionProtoType bool (double)
  emit<_ast7152>(); // CXXMethodDecl IsTracingDone
  emit<_ast7153>(); // CXXMethodDecl TraceEpilogue
  emit<_ast7154>(); // CXXMethodDecl TraceEpilogue
  emit<_ast7155>(); // ParmVarDecl trace_summary
  emit<_ast7156>(); // PointerType v8::EmbedderHeapTracer::TraceSummary *
  emit<_ast7157>(); // FunctionProtoType void
                    // (v8::EmbedderHeapTracer::TraceSummary *)
  emit<_ast7158>(); // CXXMethodDecl EnterFinalPause
  emit<_ast7159>(); // ParmVarDecl stack_state
  emit<_ast7160>(); // EnumType v8::EmbedderHeapTracer::EmbedderStackState
  emit<_ast7161>(); // FunctionProtoType void
                    // (v8::EmbedderHeapTracer::EmbedderStackState)
  emit<_ast7162>(); // CXXMethodDecl FinalizeTracing
  emit<_ast7163>(); // CXXMethodDecl IsRootForNonTracingGC
  emit<_ast7164>(); // ParmVarDecl handle
  emit<_ast7165>(); // LValueReferenceType const v8::TracedGlobal<v8::Value> &
  emit<_ast7166>(); // ElaboratedType const v8::TracedGlobal<v8::Value>
  emit<_ast7168>(); // FunctionProtoType bool (const v8::TracedGlobal<v8::Value>
                    // &)
  emit<_ast7169>(); // CXXMethodDecl GarbageCollectionForTesting
  emit<_ast7170>(); // ParmVarDecl stack_state
  emit<_ast7171>(); // CXXMethodDecl IncreaseAllocatedSize
  emit<_ast7172>(); // ParmVarDecl bytes
  emit<_ast7173>(); // CXXMethodDecl DecreaseAllocatedSize
  emit<_ast7174>(); // ParmVarDecl bytes
  emit<_ast7175>(); // CXXMethodDecl isolate
  emit<_ast7176>(); // FunctionProtoType v8::Isolate *() const
  emit<_ast7177>(); // PointerType const v8::EmbedderHeapTracer *
  emit<_ast7178>(); // RecordType const v8::EmbedderHeapTracer
  emit<_ast7179>(); // FieldDecl isolate_
  emit<_ast7180>(); // CXXMethodDecl operator=
  emit<_ast7181>(); // ParmVarDecl
  emit<_ast7182>(); // LValueReferenceType const v8::EmbedderHeapTracer &
  emit<_ast7183>(); // FunctionProtoType v8::EmbedderHeapTracer &(const
                    // v8::EmbedderHeapTracer &)
  emit<_ast7184>(); // LValueReferenceType v8::EmbedderHeapTracer &
  emit<_ast7185>(); // CXXRecordDecl SerializeInternalFieldsCallback
  emit<_ast7186>(); // RecordType v8::SerializeInternalFieldsCallback
  emit<_ast7187>(); // FieldDecl callback
  emit<_ast7188>(); // TypedefType
                    // v8::SerializeInternalFieldsCallback::CallbackFunction
  emit<_ast7189>(); // TypedefDecl CallbackFunction
  emit<_ast7190>(); // FieldDecl data
  emit<_ast7191>(); // CXXRecordDecl SerializeInternalFieldsCallback
  emit<_ast7192>(); // CXXConstructorDecl SerializeInternalFieldsCallback
  emit<_ast7193>(); // ParmVarDecl function
  emit<_ast7194>(); // ParmVarDecl data_arg
  emit<_ast7195>(); // FunctionProtoType void
                    // (v8::SerializeInternalFieldsCallback::CallbackFunction,
                    // void *)
  emit<_ast7196>(); // PointerType v8::SerializeInternalFieldsCallback *
  emit<_ast7197>(); // CXXConstructorDecl SerializeInternalFieldsCallback
  emit<_ast7198>(); // ParmVarDecl
  emit<_ast7199>(); // LValueReferenceType const
                    // v8::SerializeInternalFieldsCallback &
  emit<_ast7200>(); // RecordType const v8::SerializeInternalFieldsCallback
  emit<_ast7201>(); // FunctionProtoType void (const
                    // v8::SerializeInternalFieldsCallback &)
  emit<_ast7202>(); // CXXConstructorDecl SerializeInternalFieldsCallback
  emit<_ast7203>(); // ParmVarDecl
  emit<_ast7204>(); // RValueReferenceType v8::SerializeInternalFieldsCallback
                    // &&
  emit<_ast7205>(); // FunctionProtoType void
                    // (v8::SerializeInternalFieldsCallback &&) noexcept
  emit<_ast7206>(); // CXXDestructorDecl ~SerializeInternalFieldsCallback
  emit<_ast7207>(); // TypedefDecl SerializeEmbedderFieldsCallback
  emit<_ast7208>(); // TypedefType v8::SerializeEmbedderFieldsCallback
  emit<_ast7209>(); // CXXRecordDecl DeserializeInternalFieldsCallback
  emit<_ast7210>(); // RecordType v8::DeserializeInternalFieldsCallback
  emit<_ast7211>(); // FieldDecl callback
  emit<_ast7212>(); // PointerType void (*)(Local<v8::Object>, int,
                    // v8::StartupData, void *)
  emit<_ast7213>(); // ParenType void (Local<v8::Object>, int, v8::StartupData,
                    // void *)
  emit<_ast7214>(); // FunctionProtoType void (Local<v8::Object>, int,
                    // v8::StartupData, void *)
  emit<_ast7216>(); // FieldDecl data
  emit<_ast7217>(); // CXXRecordDecl DeserializeInternalFieldsCallback
  emit<_ast7218>(); // TypedefDecl CallbackFunction
  emit<_ast7219>(); // TypedefType
                    // v8::DeserializeInternalFieldsCallback::CallbackFunction
  emit<_ast7220>(); // CXXConstructorDecl DeserializeInternalFieldsCallback
  emit<_ast7221>(); // ParmVarDecl function
  emit<_ast7222>(); // ParmVarDecl data_arg
  emit<_ast7223>(); // FunctionProtoType void
                    // (v8::DeserializeInternalFieldsCallback::CallbackFunction,
                    // void *)
  emit<_ast7224>(); // PointerType v8::DeserializeInternalFieldsCallback *
  emit<_ast7225>(); // CXXConstructorDecl DeserializeInternalFieldsCallback
  emit<_ast7226>(); // ParmVarDecl
  emit<_ast7227>(); // LValueReferenceType const
                    // v8::DeserializeInternalFieldsCallback &
  emit<_ast7228>(); // RecordType const v8::DeserializeInternalFieldsCallback
  emit<_ast7229>(); // FunctionProtoType void (const
                    // v8::DeserializeInternalFieldsCallback &)
  emit<_ast7230>(); // CXXConstructorDecl DeserializeInternalFieldsCallback
  emit<_ast7231>(); // ParmVarDecl
  emit<_ast7232>(); // RValueReferenceType v8::DeserializeInternalFieldsCallback
                    // &&
  emit<_ast7233>(); // FunctionProtoType void
                    // (v8::DeserializeInternalFieldsCallback &&) noexcept
  emit<_ast7234>(); // CXXDestructorDecl ~DeserializeInternalFieldsCallback
  emit<_ast7235>(); // TypedefDecl DeserializeEmbedderFieldsCallback
  emit<_ast7236>(); // TypedefType v8::DeserializeEmbedderFieldsCallback
  emit<_ast7237>(); // CXXRecordDecl Isolate
  emit<_ast7238>(); // CXXRecordDecl CreateParams
  emit<_ast7239>(); // RecordType v8::Isolate::CreateParams
  emit<_ast7240>(); // FieldDecl code_event_handler
  emit<_ast7241>(); // FieldDecl constraints
  emit<_ast7242>(); // FieldDecl snapshot_blob
  emit<_ast7243>(); // PointerType v8::StartupData *
  emit<_ast7244>(); // FieldDecl counter_lookup_callback
  emit<_ast7245>(); // FieldDecl create_histogram_callback
  emit<_ast7246>(); // FieldDecl add_histogram_sample_callback
  emit<_ast7247>(); // FieldDecl array_buffer_allocator
  emit<_ast7248>(); // PointerType ArrayBuffer::Allocator *
  emit<_ast7250>(); // FieldDecl external_references
  emit<_ast7251>(); // PointerType const intptr_t *
  emit<_ast7252>(); // TypedefType const intptr_t
  emit<_ast7253>(); // TypedefType intptr_t
  emit<_ast7254>(); // FieldDecl allow_atomics_wait
  emit<_ast7255>(); // FieldDecl only_terminate_in_safe_scope
  emit<_ast7256>(); // CXXRecordDecl CreateParams
  emit<_ast7257>(); // CXXConstructorDecl CreateParams
  emit<_ast7258>(); // PointerType v8::Isolate::CreateParams *
  emit<_ast7259>(); // CXXRecordDecl Scope
  emit<_ast7260>(); // RecordType v8::Isolate::Scope
  emit<_ast7261>(); // FieldDecl isolate_
  emit<_ast7262>(); // PointerType v8::Isolate *const
  emit<_ast7263>(); // CXXRecordDecl Scope
  emit<_ast7264>(); // CXXConstructorDecl Scope
  emit<_ast7265>(); // ParmVarDecl isolate
  emit<_ast7266>(); // PointerType v8::Isolate::Scope *
  emit<_ast7267>(); // CXXDestructorDecl ~Scope
  emit<_ast7268>(); // CXXConstructorDecl Scope
  emit<_ast7269>(); // ParmVarDecl
  emit<_ast7270>(); // LValueReferenceType const v8::Isolate::Scope &
  emit<_ast7271>(); // RecordType const v8::Isolate::Scope
  emit<_ast7272>(); // FunctionProtoType void (const v8::Isolate::Scope &)
  emit<_ast7273>(); // CXXMethodDecl operator=
  emit<_ast7274>(); // ParmVarDecl
  emit<_ast7275>(); // FunctionProtoType v8::Isolate::Scope &(const
                    // v8::Isolate::Scope &)
  emit<_ast7276>(); // LValueReferenceType v8::Isolate::Scope &
  emit<_ast7277>(); // CXXRecordDecl DisallowJavascriptExecutionScope
  emit<_ast7278>(); // RecordType v8::Isolate::DisallowJavascriptExecutionScope
  emit<_ast7279>(); // FieldDecl on_failure_
  emit<_ast7280>(); // EnumType
                    // v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
  emit<_ast7282>(); // FieldDecl internal_
  emit<_ast7283>(); // CXXRecordDecl DisallowJavascriptExecutionScope
  emit<_ast7287>(); // CXXConstructorDecl DisallowJavascriptExecutionScope
  emit<_ast7288>(); // ParmVarDecl isolate
  emit<_ast7289>(); // ParmVarDecl on_failure
  emit<_ast7290>(); // FunctionProtoType void (v8::Isolate *,
                    // v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
  emit<_ast7291>(); // PointerType v8::Isolate::DisallowJavascriptExecutionScope
                    // *
  emit<_ast7292>(); // CXXDestructorDecl ~DisallowJavascriptExecutionScope
  emit<_ast7293>(); // FunctionProtoType void ()
  emit<_ast7294>(); // CXXConstructorDecl DisallowJavascriptExecutionScope
  emit<_ast7295>(); // ParmVarDecl
  emit<_ast7296>(); // LValueReferenceType const
                    // v8::Isolate::DisallowJavascriptExecutionScope &
  emit<_ast7297>(); // RecordType const
                    // v8::Isolate::DisallowJavascriptExecutionScope
  emit<_ast7298>(); // FunctionProtoType void (const
                    // v8::Isolate::DisallowJavascriptExecutionScope &)
  emit<_ast7299>(); // CXXMethodDecl operator=
  emit<_ast7300>(); // ParmVarDecl
  emit<_ast7301>(); // FunctionProtoType
                    // v8::Isolate::DisallowJavascriptExecutionScope &(const
                    // v8::Isolate::DisallowJavascriptExecutionScope &)
  emit<_ast7302>(); // LValueReferenceType
                    // v8::Isolate::DisallowJavascriptExecutionScope &
  emit<_ast7303>(); // CXXRecordDecl AllowJavascriptExecutionScope
  emit<_ast7304>(); // RecordType v8::Isolate::AllowJavascriptExecutionScope
  emit<_ast7305>(); // FieldDecl internal_throws_
  emit<_ast7306>(); // FieldDecl internal_assert_
  emit<_ast7307>(); // FieldDecl internal_dump_
  emit<_ast7308>(); // CXXRecordDecl AllowJavascriptExecutionScope
  emit<_ast7309>(); // CXXConstructorDecl AllowJavascriptExecutionScope
  emit<_ast7310>(); // ParmVarDecl isolate
  emit<_ast7311>(); // PointerType v8::Isolate::AllowJavascriptExecutionScope *
  emit<_ast7312>(); // CXXDestructorDecl ~AllowJavascriptExecutionScope
  emit<_ast7313>(); // FunctionProtoType void ()
  emit<_ast7314>(); // CXXConstructorDecl AllowJavascriptExecutionScope
  emit<_ast7315>(); // ParmVarDecl
  emit<_ast7316>(); // LValueReferenceType const
                    // v8::Isolate::AllowJavascriptExecutionScope &
  emit<_ast7317>(); // RecordType const
                    // v8::Isolate::AllowJavascriptExecutionScope
  emit<_ast7318>(); // FunctionProtoType void (const
                    // v8::Isolate::AllowJavascriptExecutionScope &)
  emit<_ast7319>(); // CXXMethodDecl operator=
  emit<_ast7320>(); // ParmVarDecl
  emit<_ast7321>(); // FunctionProtoType
                    // v8::Isolate::AllowJavascriptExecutionScope &(const
                    // v8::Isolate::AllowJavascriptExecutionScope &)
  emit<_ast7322>(); // LValueReferenceType
                    // v8::Isolate::AllowJavascriptExecutionScope &
  emit<_ast7323>(); // CXXRecordDecl SuppressMicrotaskExecutionScope
  emit<_ast7324>(); // RecordType v8::Isolate::SuppressMicrotaskExecutionScope
  emit<_ast7325>(); // FieldDecl isolate_
  emit<_ast7326>(); // FieldDecl microtask_queue_
  emit<_ast7327>(); // CXXRecordDecl SuppressMicrotaskExecutionScope
  emit<_ast7328>(); // CXXConstructorDecl SuppressMicrotaskExecutionScope
  emit<_ast7329>(); // ParmVarDecl isolate
  emit<_ast7330>(); // PointerType v8::Isolate::SuppressMicrotaskExecutionScope
                    // *
  emit<_ast7331>(); // CXXConstructorDecl SuppressMicrotaskExecutionScope
  emit<_ast7332>(); // ParmVarDecl microtask_queue
  emit<_ast7333>(); // FunctionProtoType void (v8::MicrotaskQueue *)
  emit<_ast7334>(); // CXXDestructorDecl ~SuppressMicrotaskExecutionScope
  emit<_ast7335>(); // FunctionProtoType void ()
  emit<_ast7336>(); // CXXConstructorDecl SuppressMicrotaskExecutionScope
  emit<_ast7337>(); // ParmVarDecl
  emit<_ast7338>(); // LValueReferenceType const
                    // v8::Isolate::SuppressMicrotaskExecutionScope &
  emit<_ast7339>(); // RecordType const
                    // v8::Isolate::SuppressMicrotaskExecutionScope
  emit<_ast7340>(); // FunctionProtoType void (const
                    // v8::Isolate::SuppressMicrotaskExecutionScope &)
  emit<_ast7341>(); // CXXMethodDecl operator=
  emit<_ast7342>(); // ParmVarDecl
  emit<_ast7343>(); // FunctionProtoType
                    // v8::Isolate::SuppressMicrotaskExecutionScope &(const
                    // v8::Isolate::SuppressMicrotaskExecutionScope &)
  emit<_ast7344>(); // LValueReferenceType
                    // v8::Isolate::SuppressMicrotaskExecutionScope &
  emit<_ast7345>(); // CXXRecordDecl SafeForTerminationScope
  emit<_ast7346>(); // RecordType v8::Isolate::SafeForTerminationScope
  emit<_ast7347>(); // FieldDecl isolate_
  emit<_ast7348>(); // FieldDecl prev_value_
  emit<_ast7349>(); // CXXRecordDecl SafeForTerminationScope
  emit<_ast7350>(); // CXXConstructorDecl SafeForTerminationScope
  emit<_ast7351>(); // ParmVarDecl isolate
  emit<_ast7352>(); // FunctionProtoType void (v8::Isolate *)
  emit<_ast7353>(); // PointerType v8::Isolate::SafeForTerminationScope *
  emit<_ast7354>(); // CXXDestructorDecl ~SafeForTerminationScope
  emit<_ast7355>(); // FunctionProtoType void ()
  emit<_ast7356>(); // CXXConstructorDecl SafeForTerminationScope
  emit<_ast7357>(); // ParmVarDecl
  emit<_ast7358>(); // LValueReferenceType const
                    // v8::Isolate::SafeForTerminationScope &
  emit<_ast7359>(); // RecordType const v8::Isolate::SafeForTerminationScope
  emit<_ast7360>(); // FunctionProtoType void (const
                    // v8::Isolate::SafeForTerminationScope &)
  emit<_ast7361>(); // CXXMethodDecl operator=
  emit<_ast7362>(); // ParmVarDecl
  emit<_ast7363>(); // FunctionProtoType v8::Isolate::SafeForTerminationScope
                    // &(const v8::Isolate::SafeForTerminationScope &)
  emit<_ast7364>(); // LValueReferenceType v8::Isolate::SafeForTerminationScope
                    // &
  emit<_ast7453>(); // TypedefDecl UseCounterCallback
  emit<_ast7454>(); // TypedefType v8::Isolate::UseCounterCallback
  emit<_ast7455>(); // CXXMethodDecl Allocate
  emit<_ast7456>(); // CXXMethodDecl Initialize
  emit<_ast7457>(); // ParmVarDecl isolate
  emit<_ast7458>(); // ParmVarDecl params
  emit<_ast7459>(); // LValueReferenceType const v8::Isolate::CreateParams &
  emit<_ast7460>(); // RecordType const v8::Isolate::CreateParams
  emit<_ast7461>(); // FunctionProtoType void (v8::Isolate *, const
                    // v8::Isolate::CreateParams &)
  emit<_ast7462>(); // CXXMethodDecl New
  emit<_ast7463>(); // ParmVarDecl params
  emit<_ast7464>(); // FunctionProtoType v8::Isolate *(const
                    // v8::Isolate::CreateParams &)
  emit<_ast7465>(); // CXXMethodDecl GetCurrent
  emit<_ast7466>(); // TypedefDecl AbortOnUncaughtExceptionCallback
  emit<_ast7467>(); // TypedefType v8::Isolate::AbortOnUncaughtExceptionCallback
  emit<_ast7468>(); // CXXMethodDecl SetAbortOnUncaughtExceptionCallback
  emit<_ast7469>(); // ParmVarDecl callback
  emit<_ast7470>(); // FunctionProtoType void
                    // (v8::Isolate::AbortOnUncaughtExceptionCallback)
  emit<_ast7471>(); // CXXMethodDecl SetHostImportModuleDynamicallyCallback
  emit<_ast7472>(); // ParmVarDecl callback
  emit<_ast7473>(); // FunctionProtoType void
                    // (v8::HostImportModuleDynamicallyCallback)
  emit<_ast7474>(); // CXXMethodDecl SetHostInitializeImportMetaObjectCallback
  emit<_ast7475>(); // ParmVarDecl callback
  emit<_ast7476>(); // FunctionProtoType void
                    // (v8::HostInitializeImportMetaObjectCallback)
  emit<_ast7477>(); // CXXMethodDecl SetPrepareStackTraceCallback
  emit<_ast7478>(); // ParmVarDecl callback
  emit<_ast7479>(); // FunctionProtoType void (v8::PrepareStackTraceCallback)
  emit<_ast7480>(); // CXXMethodDecl MemoryPressureNotification
  emit<_ast7481>(); // ParmVarDecl level
  emit<_ast7482>(); // EnumType v8::MemoryPressureLevel
  emit<_ast7483>(); // FunctionProtoType void (v8::MemoryPressureLevel)
  emit<_ast7484>(); // CXXMethodDecl Enter
  emit<_ast7485>(); // CXXMethodDecl Exit
  emit<_ast7486>(); // CXXMethodDecl Dispose
  emit<_ast7487>(); // CXXMethodDecl DumpAndResetStats
  emit<_ast7488>(); // CXXMethodDecl DiscardThreadSpecificMetadata
  emit<_ast7489>(); // CXXMethodDecl SetData
  emit<_ast7490>(); // ParmVarDecl slot
  emit<_ast7491>(); // ParmVarDecl data
  emit<_ast7492>(); // FunctionProtoType void (uint32_t, void *)
  emit<_ast7493>(); // CXXMethodDecl GetData
  emit<_ast7494>(); // ParmVarDecl slot
  emit<_ast7495>(); // FunctionProtoType void *(uint32_t)
  emit<_ast7496>(); // CXXMethodDecl GetNumberOfDataSlots
  emit<_ast7499>(); // CXXMethodDecl GetDataFromSnapshotOnce
  emit<_ast7500>(); // ParmVarDecl index
  emit<_ast7501>(); // FunctionProtoType MaybeLocal<T> (size_t)
  emit<_ast7503>(); // CXXMethodDecl GetHeapStatistics
  emit<_ast7504>(); // ParmVarDecl heap_statistics
  emit<_ast7505>(); // FunctionProtoType void (v8::HeapStatistics *)
  emit<_ast7506>(); // CXXMethodDecl NumberOfHeapSpaces
  emit<_ast7507>(); // CXXMethodDecl GetHeapSpaceStatistics
  emit<_ast7508>(); // ParmVarDecl space_statistics
  emit<_ast7509>(); // ParmVarDecl index
  emit<_ast7510>(); // FunctionProtoType bool (v8::HeapSpaceStatistics *,
                    // size_t)
  emit<_ast7511>(); // CXXMethodDecl NumberOfTrackedHeapObjectTypes
  emit<_ast7512>(); // CXXMethodDecl GetHeapObjectStatisticsAtLastGC
  emit<_ast7513>(); // ParmVarDecl object_statistics
  emit<_ast7514>(); // ParmVarDecl type_index
  emit<_ast7515>(); // FunctionProtoType bool (v8::HeapObjectStatistics *,
                    // size_t)
  emit<_ast7516>(); // CXXMethodDecl GetHeapCodeAndMetadataStatistics
  emit<_ast7517>(); // ParmVarDecl object_statistics
  emit<_ast7518>(); // FunctionProtoType bool (v8::HeapCodeStatistics *)
  emit<_ast7519>(); // CXXMethodDecl GetStackSample
  emit<_ast7520>(); // ParmVarDecl state
  emit<_ast7521>(); // LValueReferenceType const v8::RegisterState &
  emit<_ast7522>(); // RecordType const v8::RegisterState
  emit<_ast7523>(); // ParmVarDecl frames
  emit<_ast7524>(); // PointerType void **
  emit<_ast7525>(); // ParmVarDecl frames_limit
  emit<_ast7526>(); // ParmVarDecl sample_info
  emit<_ast7527>(); // PointerType v8::SampleInfo *
  emit<_ast7528>(); // FunctionProtoType void (const v8::RegisterState &, void
                    // **, size_t, v8::SampleInfo *)
  emit<_ast7529>(); // CXXMethodDecl AdjustAmountOfExternalAllocatedMemory
  emit<_ast7530>(); // ParmVarDecl change_in_bytes
  emit<_ast7531>(); // FunctionProtoType int64_t (int64_t)
  emit<_ast7532>(); // CXXMethodDecl NumberOfPhantomHandleResetsSinceLastCall
  emit<_ast7533>(); // CXXMethodDecl GetHeapProfiler
  emit<_ast7534>(); // FunctionProtoType v8::HeapProfiler *()
  emit<_ast7535>(); // PointerType v8::HeapProfiler *
  emit<_ast7536>(); // CXXMethodDecl SetIdle
  emit<_ast7537>(); // ParmVarDecl is_idle
  emit<_ast7538>(); // CXXMethodDecl GetArrayBufferAllocator
  emit<_ast7539>(); // FunctionProtoType ArrayBuffer::Allocator *()
  emit<_ast7540>(); // CXXMethodDecl InContext
  emit<_ast7541>(); // CXXMethodDecl GetCurrentContext
  emit<_ast7542>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7544>(); // CXXMethodDecl GetEnteredContext
  emit<_ast7545>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7547>(); // CXXMethodDecl GetEnteredOrMicrotaskContext
  emit<_ast7548>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7550>(); // CXXMethodDecl GetIncumbentContext
  emit<_ast7551>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7553>(); // CXXMethodDecl ThrowException
  emit<_ast7554>(); // ParmVarDecl exception
  emit<_ast7556>(); // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
  emit<_ast7558>(); // TypedefDecl GCCallback
  emit<_ast7559>(); // TypedefType v8::Isolate::GCCallback
  emit<_ast7560>(); // TypedefDecl GCCallbackWithData
  emit<_ast7561>(); // TypedefType v8::Isolate::GCCallbackWithData
  emit<_ast7562>(); // CXXMethodDecl AddGCPrologueCallback
  emit<_ast7563>(); // ParmVarDecl callback
  emit<_ast7564>(); // ParmVarDecl data
  emit<_ast7565>(); // ParmVarDecl gc_type_filter
  emit<_ast7566>(); // EnumType v8::GCType
  emit<_ast7567>(); // FunctionProtoType void (v8::Isolate::GCCallbackWithData,
                    // void *, v8::GCType)
  emit<_ast7568>(); // CXXMethodDecl AddGCPrologueCallback
  emit<_ast7569>(); // ParmVarDecl callback
  emit<_ast7570>(); // ParmVarDecl gc_type_filter
  emit<_ast7571>(); // FunctionProtoType void (v8::Isolate::GCCallback,
                    // v8::GCType)
  emit<_ast7572>(); // CXXMethodDecl RemoveGCPrologueCallback
  emit<_ast7573>(); // ParmVarDecl
  emit<_ast7574>(); // ParmVarDecl data
  emit<_ast7575>(); // FunctionProtoType void (v8::Isolate::GCCallbackWithData,
                    // void *)
  emit<_ast7576>(); // CXXMethodDecl RemoveGCPrologueCallback
  emit<_ast7577>(); // ParmVarDecl callback
  emit<_ast7578>(); // FunctionProtoType void (v8::Isolate::GCCallback)
  emit<_ast7579>(); // CXXMethodDecl SetEmbedderHeapTracer
  emit<_ast7580>(); // ParmVarDecl tracer
  emit<_ast7581>(); // FunctionProtoType void (v8::EmbedderHeapTracer *)
  emit<_ast7582>(); // CXXMethodDecl GetEmbedderHeapTracer
  emit<_ast7583>(); // FunctionProtoType v8::EmbedderHeapTracer *()
  emit<_ast7591>(); // CXXRecordDecl AtomicsWaitWakeHandle
  emit<_ast7592>(); // RecordType v8::Isolate::AtomicsWaitWakeHandle
  emit<_ast7593>(); // CXXRecordDecl AtomicsWaitWakeHandle
  emit<_ast7594>(); // CXXMethodDecl Wake
  emit<_ast7595>(); // PointerType v8::Isolate::AtomicsWaitWakeHandle *
  emit<_ast7596>(); // TypedefDecl AtomicsWaitCallback
  emit<_ast7597>(); // TypedefType v8::Isolate::AtomicsWaitCallback
  emit<_ast7598>(); // CXXMethodDecl SetAtomicsWaitCallback
  emit<_ast7599>(); // ParmVarDecl callback
  emit<_ast7600>(); // ParmVarDecl data
  emit<_ast7601>(); // FunctionProtoType void (v8::Isolate::AtomicsWaitCallback,
                    // void *)
  emit<_ast7602>(); // CXXMethodDecl AddGCEpilogueCallback
  emit<_ast7603>(); // ParmVarDecl callback
  emit<_ast7604>(); // ParmVarDecl data
  emit<_ast7605>(); // ParmVarDecl gc_type_filter
  emit<_ast7606>(); // CXXMethodDecl AddGCEpilogueCallback
  emit<_ast7607>(); // ParmVarDecl callback
  emit<_ast7608>(); // ParmVarDecl gc_type_filter
  emit<_ast7609>(); // CXXMethodDecl RemoveGCEpilogueCallback
  emit<_ast7610>(); // ParmVarDecl callback
  emit<_ast7611>(); // ParmVarDecl data
  emit<_ast7612>(); // CXXMethodDecl RemoveGCEpilogueCallback
  emit<_ast7613>(); // ParmVarDecl callback
  emit<_ast7614>(); // TypedefDecl GetExternallyAllocatedMemoryInBytesCallback
  emit<_ast7615>(); // TypedefType
                    // v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
  emit<_ast7616>(); // CXXMethodDecl
                    // SetGetExternallyAllocatedMemoryInBytesCallback
  emit<_ast7617>(); // ParmVarDecl callback
  emit<
      _ast7618>(); // FunctionProtoType void
                   // (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
  emit<_ast7619>(); // CXXMethodDecl TerminateExecution
  emit<_ast7620>(); // CXXMethodDecl IsExecutionTerminating
  emit<_ast7621>(); // CXXMethodDecl CancelTerminateExecution
  emit<_ast7622>(); // CXXMethodDecl RequestInterrupt
  emit<_ast7623>(); // ParmVarDecl callback
  emit<_ast7624>(); // ParmVarDecl data
  emit<_ast7625>(); // FunctionProtoType void (v8::InterruptCallback, void *)
  emit<_ast7626>(); // CXXMethodDecl RequestGarbageCollectionForTesting
  emit<_ast7627>(); // ParmVarDecl type
  emit<_ast7628>(); // EnumType v8::Isolate::GarbageCollectionType
  emit<_ast7629>(); // FunctionProtoType void
                    // (v8::Isolate::GarbageCollectionType)
  emit<_ast7630>(); // CXXMethodDecl SetEventLogger
  emit<_ast7631>(); // ParmVarDecl that
  emit<_ast7632>(); // FunctionProtoType void (v8::LogEventCallback)
  emit<_ast7633>(); // CXXMethodDecl AddBeforeCallEnteredCallback
  emit<_ast7634>(); // ParmVarDecl callback
  emit<_ast7635>(); // FunctionProtoType void (v8::BeforeCallEnteredCallback)
  emit<_ast7636>(); // CXXMethodDecl RemoveBeforeCallEnteredCallback
  emit<_ast7637>(); // ParmVarDecl callback
  emit<_ast7638>(); // CXXMethodDecl AddCallCompletedCallback
  emit<_ast7639>(); // ParmVarDecl callback
  emit<_ast7640>(); // FunctionProtoType void (v8::CallCompletedCallback)
  emit<_ast7641>(); // CXXMethodDecl RemoveCallCompletedCallback
  emit<_ast7642>(); // ParmVarDecl callback
  emit<_ast7643>(); // CXXMethodDecl SetPromiseHook
  emit<_ast7644>(); // ParmVarDecl hook
  emit<_ast7645>(); // FunctionProtoType void (v8::PromiseHook)
  emit<_ast7646>(); // CXXMethodDecl SetPromiseRejectCallback
  emit<_ast7647>(); // ParmVarDecl callback
  emit<_ast7648>(); // FunctionProtoType void (v8::PromiseRejectCallback)
  emit<_ast7649>(); // CXXMethodDecl RunMicrotasks
  emit<_ast7650>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast7651>(); // ParmVarDecl microtask
  emit<_ast7653>(); // FunctionProtoType void (Local<v8::Function>)
  emit<_ast7654>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast7655>(); // ParmVarDecl callback
  emit<_ast7656>(); // ParmVarDecl data
  emit<_ast7657>(); // FunctionProtoType void (v8::MicrotaskCallback, void *)
  emit<_ast7658>(); // CXXMethodDecl SetMicrotasksPolicy
  emit<_ast7659>(); // ParmVarDecl policy
  emit<_ast7660>(); // FunctionProtoType void (v8::MicrotasksPolicy)
  emit<_ast7661>(); // CXXMethodDecl GetMicrotasksPolicy
  emit<_ast7662>(); // FunctionProtoType v8::MicrotasksPolicy () const
  emit<_ast7663>(); // PointerType const v8::Isolate *
  emit<_ast7664>(); // RecordType const v8::Isolate
  emit<_ast7665>(); // CXXMethodDecl AddMicrotasksCompletedCallback
  emit<_ast7666>(); // ParmVarDecl callback
  emit<_ast7667>(); // FunctionProtoType void (v8::MicrotasksCompletedCallback)
  emit<_ast7668>(); // CXXMethodDecl AddMicrotasksCompletedCallback
  emit<_ast7669>(); // ParmVarDecl callback
  emit<_ast7670>(); // ParmVarDecl data
  emit<_ast7671>(); // CXXMethodDecl RemoveMicrotasksCompletedCallback
  emit<_ast7672>(); // ParmVarDecl callback
  emit<_ast7673>(); // CXXMethodDecl RemoveMicrotasksCompletedCallback
  emit<_ast7674>(); // ParmVarDecl callback
  emit<_ast7675>(); // ParmVarDecl data
  emit<_ast7676>(); // CXXMethodDecl SetUseCounterCallback
  emit<_ast7677>(); // ParmVarDecl callback
  emit<_ast7678>(); // FunctionProtoType void (v8::Isolate::UseCounterCallback)
  emit<_ast7679>(); // CXXMethodDecl SetCounterFunction
  emit<_ast7680>(); // ParmVarDecl
  emit<_ast7681>(); // FunctionProtoType void (v8::CounterLookupCallback)
  emit<_ast7682>(); // CXXMethodDecl SetCreateHistogramFunction
  emit<_ast7683>(); // ParmVarDecl
  emit<_ast7684>(); // FunctionProtoType void (v8::CreateHistogramCallback)
  emit<_ast7685>(); // CXXMethodDecl SetAddHistogramSampleFunction
  emit<_ast7686>(); // ParmVarDecl
  emit<_ast7687>(); // FunctionProtoType void (v8::AddHistogramSampleCallback)
  emit<_ast7688>(); // CXXMethodDecl IdleNotificationDeadline
  emit<_ast7689>(); // ParmVarDecl deadline_in_seconds
  emit<_ast7690>(); // CXXMethodDecl LowMemoryNotification
  emit<_ast7691>(); // CXXMethodDecl ContextDisposedNotification
  emit<_ast7692>(); // ParmVarDecl dependant_context
  emit<_ast7693>(); // FunctionProtoType int (bool)
  emit<_ast7694>(); // CXXMethodDecl IsolateInForegroundNotification
  emit<_ast7695>(); // CXXMethodDecl IsolateInBackgroundNotification
  emit<_ast7696>(); // CXXMethodDecl EnableMemorySavingsMode
  emit<_ast7697>(); // CXXMethodDecl DisableMemorySavingsMode
  emit<_ast7698>(); // CXXMethodDecl SetRAILMode
  emit<_ast7699>(); // ParmVarDecl rail_mode
  emit<_ast7700>(); // EnumType v8::RAILMode
  emit<_ast7701>(); // BuiltinType unsigned int
  emit<_ast7702>(); // FunctionProtoType void (v8::RAILMode)
  emit<_ast7703>(); // CXXMethodDecl IncreaseHeapLimitForDebugging
  emit<_ast7704>(); // CXXMethodDecl RestoreOriginalHeapLimit
  emit<_ast7705>(); // CXXMethodDecl IsHeapLimitIncreasedForDebugging
  emit<_ast7706>(); // CXXMethodDecl SetJitCodeEventHandler
  emit<_ast7707>(); // ParmVarDecl options
  emit<_ast7708>(); // EnumType v8::JitCodeEventOptions
  emit<_ast7709>(); // ParmVarDecl event_handler
  emit<_ast7710>(); // FunctionProtoType void (v8::JitCodeEventOptions,
                    // v8::JitCodeEventHandler)
  emit<_ast7711>(); // CXXMethodDecl SetStackLimit
  emit<_ast7712>(); // ParmVarDecl stack_limit
  emit<_ast7713>(); // TypedefType uintptr_t
  emit<_ast7714>(); // FunctionProtoType void (uintptr_t)
  emit<_ast7715>(); // CXXMethodDecl GetCodeRange
  emit<_ast7716>(); // ParmVarDecl start
  emit<_ast7717>(); // ParmVarDecl length_in_bytes
  emit<_ast7718>(); // FunctionProtoType void (void **, size_t *)
  emit<_ast7719>(); // CXXMethodDecl GetUnwindState
  emit<_ast7720>(); // FunctionProtoType v8::UnwindState ()
  emit<_ast7721>(); // CXXMethodDecl SetFatalErrorHandler
  emit<_ast7722>(); // ParmVarDecl that
  emit<_ast7723>(); // FunctionProtoType void (v8::FatalErrorCallback)
  emit<_ast7724>(); // CXXMethodDecl SetOOMErrorHandler
  emit<_ast7725>(); // ParmVarDecl that
  emit<_ast7726>(); // FunctionProtoType void (v8::OOMErrorCallback)
  emit<_ast7727>(); // CXXMethodDecl AddNearHeapLimitCallback
  emit<_ast7728>(); // ParmVarDecl callback
  emit<_ast7729>(); // ParmVarDecl data
  emit<_ast7730>(); // FunctionProtoType void (v8::NearHeapLimitCallback, void
                    // *)
  emit<_ast7731>(); // CXXMethodDecl RemoveNearHeapLimitCallback
  emit<_ast7732>(); // ParmVarDecl callback
  emit<_ast7733>(); // ParmVarDecl heap_limit
  emit<_ast7734>(); // FunctionProtoType void (v8::NearHeapLimitCallback,
                    // size_t)
  emit<_ast7735>(); // CXXMethodDecl AutomaticallyRestoreInitialHeapLimit
  emit<_ast7736>(); // ParmVarDecl threshold_percent
  emit<_ast7737>(); // CXXMethodDecl SetAllowCodeGenerationFromStringsCallback
  emit<_ast7738>(); // ParmVarDecl callback
  emit<_ast7739>(); // FunctionProtoType void
                    // (v8::AllowCodeGenerationFromStringsCallback)
  emit<_ast7740>(); // CXXMethodDecl SetAllowWasmCodeGenerationCallback
  emit<_ast7741>(); // ParmVarDecl callback
  emit<_ast7742>(); // FunctionProtoType void
                    // (v8::AllowWasmCodeGenerationCallback)
  emit<_ast7743>(); // CXXMethodDecl SetWasmModuleCallback
  emit<_ast7744>(); // ParmVarDecl callback
  emit<_ast7745>(); // FunctionProtoType void (v8::ExtensionCallback)
  emit<_ast7746>(); // CXXMethodDecl SetWasmInstanceCallback
  emit<_ast7747>(); // ParmVarDecl callback
  emit<_ast7748>(); // CXXMethodDecl SetWasmStreamingCallback
  emit<_ast7749>(); // ParmVarDecl callback
  emit<_ast7750>(); // FunctionProtoType void (v8::WasmStreamingCallback)
  emit<_ast7751>(); // CXXMethodDecl SetWasmThreadsEnabledCallback
  emit<_ast7752>(); // ParmVarDecl callback
  emit<_ast7753>(); // FunctionProtoType void (v8::WasmThreadsEnabledCallback)
  emit<_ast7754>(); // CXXMethodDecl IsDead
  emit<_ast7755>(); // CXXMethodDecl AddMessageListener
  emit<_ast7756>(); // ParmVarDecl that
  emit<_ast7757>(); // ParmVarDecl data
  emit<_ast7759>(); // FunctionProtoType bool (v8::MessageCallback,
                    // Local<v8::Value>)
  emit<_ast7760>(); // CXXMethodDecl AddMessageListenerWithErrorLevel
  emit<_ast7761>(); // ParmVarDecl that
  emit<_ast7762>(); // ParmVarDecl message_levels
  emit<_ast7763>(); // ParmVarDecl data
  emit<_ast7765>(); // FunctionProtoType bool (v8::MessageCallback, int,
                    // Local<v8::Value>)
  emit<_ast7766>(); // CXXMethodDecl RemoveMessageListeners
  emit<_ast7767>(); // ParmVarDecl that
  emit<_ast7768>(); // FunctionProtoType void (v8::MessageCallback)
  emit<_ast7769>(); // CXXMethodDecl SetFailedAccessCheckCallbackFunction
  emit<_ast7770>(); // ParmVarDecl
  emit<_ast7771>(); // FunctionProtoType void (v8::FailedAccessCheckCallback)
  emit<_ast7772>(); // CXXMethodDecl SetCaptureStackTraceForUncaughtExceptions
  emit<_ast7773>(); // ParmVarDecl capture
  emit<_ast7774>(); // ParmVarDecl frame_limit
  emit<_ast7775>(); // ParmVarDecl options
  emit<_ast7777>(); // FunctionProtoType void (bool, int,
                    // StackTrace::StackTraceOptions)
  emit<_ast7778>(); // CXXMethodDecl VisitExternalResources
  emit<_ast7779>(); // ParmVarDecl visitor
  emit<_ast7780>(); // FunctionProtoType void (v8::ExternalResourceVisitor *)
  emit<_ast7781>(); // CXXMethodDecl VisitHandlesWithClassIds
  emit<_ast7782>(); // ParmVarDecl visitor
  emit<_ast7783>(); // FunctionProtoType void (v8::PersistentHandleVisitor *)
  emit<_ast7784>(); // CXXMethodDecl VisitWeakHandles
  emit<_ast7785>(); // ParmVarDecl visitor
  emit<_ast7786>(); // CXXMethodDecl IsInUse
  emit<_ast7787>(); // CXXMethodDecl SetAllowAtomicsWait
  emit<_ast7788>(); // ParmVarDecl allow
  emit<_ast7792>(); // CXXMethodDecl DateTimeConfigurationChangeNotification
  emit<_ast7793>(); // ParmVarDecl time_zone_detection
  emit<_ast7794>(); // EnumType v8::Isolate::TimeZoneDetection
  emit<_ast7795>(); // FunctionProtoType void (v8::Isolate::TimeZoneDetection)
  emit<_ast7796>(); // CXXMethodDecl LocaleConfigurationChangeNotification
  emit<_ast7797>(); // CXXConstructorDecl Isolate
  emit<_ast7798>(); // CXXDestructorDecl ~Isolate
  emit<_ast7799>(); // FunctionProtoType void ()
  emit<_ast7800>(); // CXXConstructorDecl Isolate
  emit<_ast7801>(); // ParmVarDecl
  emit<_ast7802>(); // LValueReferenceType const v8::Isolate &
  emit<_ast7803>(); // FunctionProtoType void (const v8::Isolate &)
  emit<_ast7804>(); // CXXMethodDecl operator=
  emit<_ast7805>(); // ParmVarDecl
  emit<_ast7806>(); // FunctionProtoType v8::Isolate &(const v8::Isolate &)
  emit<_ast7807>(); // LValueReferenceType v8::Isolate &
  emit<_ast7808>(); // CXXMethodDecl operator new
  emit<_ast7809>(); // ParmVarDecl size
  emit<_ast7810>(); // CXXMethodDecl operator new[]
  emit<_ast7811>(); // ParmVarDecl size
  emit<_ast7812>(); // CXXMethodDecl operator delete
  emit<_ast7813>(); // ParmVarDecl
  emit<_ast7814>(); // ParmVarDecl
  emit<_ast7815>(); // FunctionProtoType void (void *, size_t) noexcept
  emit<_ast7816>(); // CXXMethodDecl operator delete[]
  emit<_ast7817>(); // ParmVarDecl
  emit<_ast7818>(); // ParmVarDecl
  emit<_ast7819>(); // CXXRecordDecl StartupData
  emit<_ast7820>(); // CXXMethodDecl CanBeRehashed
  emit<_ast7821>(); // PointerType const v8::StartupData *
  emit<_ast7822>(); // RecordType const v8::StartupData
  emit<_ast7823>(); // FieldDecl data
  emit<_ast7824>(); // FieldDecl raw_size
  emit<_ast7825>(); // TypedefDecl EntropySource
  emit<_ast7826>(); // TypedefType v8::EntropySource
  emit<_ast7827>(); // TypedefDecl ReturnAddressLocationResolver
  emit<_ast7828>(); // TypedefType v8::ReturnAddressLocationResolver
  emit<_ast7829>(); // CXXRecordDecl V8
  emit<_ast7830>(); // RecordType v8::V8
  emit<_ast7831>(); // CXXRecordDecl V8
  emit<_ast7832>(); // CXXMethodDecl SetNativesDataBlob
  emit<_ast7833>(); // ParmVarDecl startup_blob
  emit<_ast7834>(); // FunctionProtoType void (v8::StartupData *)
  emit<_ast7835>(); // CXXMethodDecl SetSnapshotDataBlob
  emit<_ast7836>(); // ParmVarDecl startup_blob
  emit<_ast7837>(); // CXXMethodDecl SetDcheckErrorHandler
  emit<_ast7838>(); // ParmVarDecl that
  emit<_ast7839>(); // FunctionProtoType void (v8::DcheckErrorCallback)
  emit<_ast7840>(); // CXXMethodDecl SetFlagsFromString
  emit<_ast7841>(); // ParmVarDecl str
  emit<_ast7842>(); // CXXMethodDecl SetFlagsFromString
  emit<_ast7843>(); // ParmVarDecl str
  emit<_ast7844>(); // ParmVarDecl length
  emit<_ast7845>(); // FunctionProtoType void (const char *, size_t)
  emit<_ast7846>(); // CXXMethodDecl SetFlagsFromString
  emit<_ast7847>(); // ParmVarDecl str
  emit<_ast7848>(); // ParmVarDecl length
  emit<_ast7849>(); // FunctionProtoType void (const char *, int)
  emit<_ast7850>(); // CXXMethodDecl SetFlagsFromCommandLine
  emit<_ast7851>(); // ParmVarDecl argc
  emit<_ast7852>(); // ParmVarDecl argv
  emit<_ast7853>(); // PointerType char **
  emit<_ast7854>(); // ParmVarDecl remove_flags
  emit<_ast7855>(); // FunctionProtoType void (int *, char **, bool)
  emit<_ast7856>(); // CXXMethodDecl GetVersion
  emit<_ast7857>(); // CXXMethodDecl Initialize
  emit<_ast7858>(); // CXXMethodDecl SetEntropySource
  emit<_ast7859>(); // ParmVarDecl source
  emit<_ast7860>(); // FunctionProtoType void (v8::EntropySource)
  emit<_ast7861>(); // CXXMethodDecl SetReturnAddressLocationResolver
  emit<_ast7862>(); // ParmVarDecl return_address_resolver
  emit<_ast7863>(); // FunctionProtoType void
                    // (v8::ReturnAddressLocationResolver)
  emit<_ast7864>(); // CXXMethodDecl Dispose
  emit<_ast7865>(); // CXXMethodDecl InitializeICU
  emit<_ast7866>(); // ParmVarDecl icu_data_file
  emit<_ast7867>(); // FunctionProtoType bool (const char *)
  emit<_ast7868>(); // CXXMethodDecl InitializeICUDefaultLocation
  emit<_ast7869>(); // ParmVarDecl exec_path
  emit<_ast7870>(); // ParmVarDecl icu_data_file
  emit<_ast7871>(); // FunctionProtoType bool (const char *, const char *)
  emit<_ast7872>(); // CXXMethodDecl InitializeExternalStartupData
  emit<_ast7873>(); // ParmVarDecl directory_path
  emit<_ast7874>(); // CXXMethodDecl InitializeExternalStartupData
  emit<_ast7875>(); // ParmVarDecl natives_blob
  emit<_ast7876>(); // ParmVarDecl snapshot_blob
  emit<_ast7877>(); // FunctionProtoType void (const char *, const char *)
  emit<_ast7878>(); // CXXMethodDecl InitializePlatform
  emit<_ast7879>(); // ParmVarDecl platform
  emit<_ast7880>(); // PointerType v8::Platform *
  emit<_ast7881>(); // FunctionProtoType void (v8::Platform *)
  emit<_ast7882>(); // CXXMethodDecl ShutdownPlatform
  emit<_ast7883>(); // CXXMethodDecl EnableWebAssemblyTrapHandler
  emit<_ast7884>(); // ParmVarDecl use_v8_signal_handler
  emit<_ast7885>(); // FunctionProtoType bool (bool)
  emit<_ast7886>(); // CXXMethodDecl SetUnhandledExceptionCallback
  emit<_ast7887>(); // ParmVarDecl unhandled_exception_callback
  emit<_ast7888>(); // FunctionProtoType void (v8::UnhandledExceptionCallback)
  emit<_ast7889>(); // CXXRecordDecl SnapshotCreator
  emit<_ast7890>(); // RecordType v8::SnapshotCreator
  emit<_ast7891>(); // FieldDecl data_
  emit<_ast7892>(); // CXXRecordDecl SnapshotCreator
  emit<_ast7896>(); // CXXConstructorDecl SnapshotCreator
  emit<_ast7897>(); // ParmVarDecl isolate
  emit<_ast7898>(); // ParmVarDecl external_references
  emit<_ast7899>(); // ParmVarDecl existing_blob
  emit<_ast7900>(); // FunctionProtoType void (v8::Isolate *, const intptr_t *,
                    // v8::StartupData *)
  emit<_ast7901>(); // PointerType v8::SnapshotCreator *
  emit<_ast7902>(); // CXXConstructorDecl SnapshotCreator
  emit<_ast7903>(); // ParmVarDecl external_references
  emit<_ast7904>(); // ParmVarDecl existing_blob
  emit<_ast7905>(); // FunctionProtoType void (const intptr_t *, v8::StartupData
                    // *)
  emit<_ast7906>(); // CXXDestructorDecl ~SnapshotCreator
  emit<_ast7907>(); // FunctionProtoType void ()
  emit<_ast7908>(); // CXXMethodDecl GetIsolate
  emit<_ast7909>(); // CXXMethodDecl SetDefaultContext
  emit<_ast7910>(); // ParmVarDecl context
  emit<_ast7912>(); // ParmVarDecl callback
  emit<_ast7913>(); // FunctionProtoType void (Local<v8::Context>,
                    // v8::SerializeInternalFieldsCallback)
  emit<_ast7914>(); // CXXMethodDecl AddContext
  emit<_ast7915>(); // ParmVarDecl context
  emit<_ast7917>(); // ParmVarDecl callback
  emit<_ast7918>(); // FunctionProtoType size_t (Local<v8::Context>,
                    // v8::SerializeInternalFieldsCallback)
  emit<_ast7919>(); // CXXMethodDecl AddTemplate
  emit<_ast7920>(); // ParmVarDecl template_obj
  emit<_ast7922>(); // FunctionProtoType size_t (Local<v8::Template>)
  emit<_ast7925>(); // CXXMethodDecl AddData
  emit<_ast7926>(); // ParmVarDecl context
  emit<_ast7928>(); // ParmVarDecl object
  emit<_ast7930>(); // FunctionProtoType size_t (Local<v8::Context>, Local<T>)
  emit<_ast7933>(); // CXXMethodDecl AddData
  emit<_ast7934>(); // ParmVarDecl object
  emit<_ast7936>(); // FunctionProtoType size_t (Local<T>)
  emit<_ast7937>(); // CXXMethodDecl CreateBlob
  emit<_ast7938>(); // ParmVarDecl function_code_handling
  emit<_ast7939>(); // EnumType v8::SnapshotCreator::FunctionCodeHandling
  emit<_ast7940>(); // FunctionProtoType v8::StartupData
                    // (v8::SnapshotCreator::FunctionCodeHandling)
  emit<_ast7941>(); // CXXConstructorDecl SnapshotCreator
  emit<_ast7942>(); // ParmVarDecl
  emit<_ast7943>(); // LValueReferenceType const v8::SnapshotCreator &
  emit<_ast7944>(); // RecordType const v8::SnapshotCreator
  emit<_ast7945>(); // FunctionProtoType void (const v8::SnapshotCreator &)
  emit<_ast7946>(); // CXXMethodDecl operator=
  emit<_ast7947>(); // ParmVarDecl
  emit<_ast7949>(); // CXXRecordDecl Maybe
  emit<_ast7950>(); // CXXMethodDecl IsNothing
  emit<_ast7951>(); // PointerType const Maybe<T> *
  emit<_ast7952>(); // InjectedClassNameType const Maybe<T>
  emit<_ast7953>(); // CXXMethodDecl IsJust
  emit<_ast7954>(); // CXXMethodDecl ToChecked
  emit<_ast7955>(); // FunctionProtoType T () const
  emit<_ast7957>(); // CXXMethodDecl Check
  emit<_ast7958>(); // CXXMethodDecl To
  emit<_ast7959>(); // ParmVarDecl out
  emit<_ast7960>(); // PointerType T *
  emit<_ast7961>(); // FunctionProtoType bool (T *) const
  emit<_ast7962>(); // CXXMethodDecl FromJust
  emit<_ast7963>(); // CXXMethodDecl FromMaybe
  emit<_ast7964>(); // ParmVarDecl default_value
  emit<_ast7965>(); // LValueReferenceType const T &
  emit<_ast7966>(); // TemplateTypeParmType const T
  emit<_ast7967>(); // FunctionProtoType T (const T &) const
  emit<_ast7968>(); // CXXMethodDecl operator==
  emit<_ast7969>(); // ParmVarDecl other
  emit<_ast7970>(); // LValueReferenceType const Maybe<T> &
  emit<_ast7971>(); // FunctionProtoType bool (const Maybe<T> &) const
  emit<_ast7972>(); // CXXMethodDecl operator!=
  emit<_ast7973>(); // ParmVarDecl other
  emit<_ast7976>(); // FunctionDecl Nothing
  emit<_ast7977>(); // FunctionProtoType Maybe<T> ()
  emit<_ast7981>(); // FunctionDecl Just
  emit<_ast7982>(); // ParmVarDecl t
  emit<_ast7983>(); // LValueReferenceType const T &
  emit<_ast7984>(); // TemplateTypeParmType const T
  emit<_ast7986>(); // FunctionProtoType Maybe<T> (const T &)
  emit<_ast7988>(); // ClassTemplateSpecializationDecl Maybe
  emit<_ast7989>(); // CXXRecordDecl Maybe
  emit<_ast7990>(); // RecordType v8::Maybe<void>
  emit<_ast7991>(); // CXXMethodDecl IsNothing
  emit<_ast7992>(); // PointerType const v8::Maybe<void> *
  emit<_ast7993>(); // RecordType const v8::Maybe<void>
  emit<_ast7994>(); // CXXMethodDecl IsJust
  emit<_ast7995>(); // CXXMethodDecl operator==
  emit<_ast7996>(); // ParmVarDecl other
  emit<_ast7997>(); // LValueReferenceType const v8::Maybe<void> &
  emit<_ast7998>(); // FunctionProtoType bool (const v8::Maybe<void> &) const
  emit<_ast7999>(); // CXXMethodDecl operator!=
  emit<_ast8000>(); // ParmVarDecl other
  emit<_ast8001>(); // CXXConstructorDecl Maybe
  emit<_ast8002>(); // ParmVarDecl
  emit<_ast8003>(); // FunctionProtoType void (const v8::Maybe<void> &)
  emit<_ast8004>(); // PointerType v8::Maybe<void> *
  emit<_ast8005>(); // CXXConstructorDecl Maybe
  emit<_ast8006>(); // ParmVarDecl
  emit<_ast8007>(); // RValueReferenceType v8::Maybe<void> &&
  emit<_ast8008>(); // FunctionProtoType void (v8::Maybe<void> &&) noexcept
  emit<_ast8009>(); // CXXDestructorDecl ~Maybe
  emit<_ast8010>(); // FunctionDecl JustVoid
  emit<_ast8011>(); // FunctionProtoType Maybe<void> ()
  emit<_ast8013>(); // CXXRecordDecl TryCatch
  emit<_ast8014>(); // RecordType v8::TryCatch
  emit<_ast8015>(); // FieldDecl isolate_
  emit<_ast8016>(); // FieldDecl next_
  emit<_ast8017>(); // PointerType v8::TryCatch *
  emit<_ast8018>(); // FieldDecl exception_
  emit<_ast8019>(); // FieldDecl message_obj_
  emit<_ast8020>(); // FieldDecl js_stack_comparable_address_
  emit<_ast8021>(); // FieldDecl is_verbose_
  emit<_ast8022>(); // FieldDecl can_continue_
  emit<_ast8023>(); // FieldDecl capture_message_
  emit<_ast8024>(); // FieldDecl rethrow_
  emit<_ast8025>(); // FieldDecl has_terminated_
  emit<_ast8026>(); // CXXRecordDecl TryCatch
  emit<_ast8027>(); // CXXConstructorDecl TryCatch
  emit<_ast8028>(); // ParmVarDecl isolate
  emit<_ast8029>(); // CXXDestructorDecl ~TryCatch
  emit<_ast8030>(); // FunctionProtoType void ()
  emit<_ast8031>(); // CXXMethodDecl HasCaught
  emit<_ast8032>(); // PointerType const v8::TryCatch *
  emit<_ast8033>(); // RecordType const v8::TryCatch
  emit<_ast8034>(); // CXXMethodDecl CanContinue
  emit<_ast8035>(); // CXXMethodDecl HasTerminated
  emit<_ast8036>(); // CXXMethodDecl ReThrow
  emit<_ast8037>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast8039>(); // CXXMethodDecl Exception
  emit<_ast8040>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast8042>(); // CXXMethodDecl StackTrace
  emit<_ast8043>(); // ParmVarDecl context
  emit<_ast8045>(); // FunctionProtoType MaybeLocal<v8::Value>
                    // (Local<v8::Context>) const
  emit<_ast8047>(); // CXXMethodDecl Message
  emit<_ast8048>(); // FunctionProtoType Local<v8::Message> () const
  emit<_ast8050>(); // CXXMethodDecl Reset
  emit<_ast8051>(); // CXXMethodDecl SetVerbose
  emit<_ast8052>(); // ParmVarDecl value
  emit<_ast8053>(); // CXXMethodDecl IsVerbose
  emit<_ast8054>(); // CXXMethodDecl SetCaptureMessage
  emit<_ast8055>(); // ParmVarDecl value
  emit<_ast8056>(); // CXXMethodDecl JSStackComparableAddress
  emit<_ast8057>(); // ParmVarDecl handler
  emit<_ast8058>(); // FunctionProtoType void *(v8::TryCatch *)
  emit<_ast8059>(); // CXXConstructorDecl TryCatch
  emit<_ast8060>(); // ParmVarDecl
  emit<_ast8061>(); // LValueReferenceType const v8::TryCatch &
  emit<_ast8062>(); // FunctionProtoType void (const v8::TryCatch &)
  emit<_ast8063>(); // CXXMethodDecl operator=
  emit<_ast8064>(); // ParmVarDecl
  emit<_ast8065>(); // CXXRecordDecl ExtensionConfiguration
  emit<_ast8066>(); // RecordType v8::ExtensionConfiguration
  emit<_ast8067>(); // FieldDecl name_count_
  emit<_ast8068>(); // FieldDecl names_
  emit<_ast8069>(); // CXXRecordDecl ExtensionConfiguration
  emit<_ast8070>(); // CXXConstructorDecl ExtensionConfiguration
  emit<_ast8071>(); // PointerType v8::ExtensionConfiguration *
  emit<_ast8072>(); // CXXConstructorDecl ExtensionConfiguration
  emit<_ast8073>(); // ParmVarDecl name_count
  emit<_ast8074>(); // ParmVarDecl names
  emit<_ast8076>(); // FunctionProtoType void (int, const char **)
  emit<_ast8077>(); // CXXMethodDecl begin
  emit<_ast8078>(); // PointerType const v8::ExtensionConfiguration *
  emit<_ast8079>(); // RecordType const v8::ExtensionConfiguration
  emit<_ast8080>(); // CXXMethodDecl end
  emit<_ast8081>(); // CXXRecordDecl Context
  emit<_ast8082>(); // CXXMethodDecl Global
  emit<_ast8083>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast8085>(); // PointerType v8::Context *
  emit<_ast8086>(); // CXXMethodDecl DetachGlobal
  emit<_ast8087>(); // CXXMethodDecl New
  emit<_ast8088>(); // ParmVarDecl isolate
  emit<_ast8089>(); // ParmVarDecl extensions
  emit<_ast8090>(); // ParmVarDecl global_template
  emit<_ast8092>(); // ParmVarDecl global_object
  emit<_ast8094>(); // ParmVarDecl internal_fields_deserializer
  emit<_ast8095>(); // ParmVarDecl microtask_queue
  emit<_ast8096>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *,
                    // v8::ExtensionConfiguration *,
                    // MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>,
                    // v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue
                    // *)
  emit<_ast8098>(); // CXXMethodDecl FromSnapshot
  emit<_ast8099>(); // ParmVarDecl isolate
  emit<_ast8100>(); // ParmVarDecl context_snapshot_index
  emit<_ast8101>(); // ParmVarDecl embedder_fields_deserializer
  emit<_ast8102>(); // ParmVarDecl extensions
  emit<_ast8103>(); // ParmVarDecl global_object
  emit<_ast8105>(); // ParmVarDecl microtask_queue
  emit<_ast8106>(); // FunctionProtoType MaybeLocal<v8::Context> (v8::Isolate *,
                    // size_t, v8::DeserializeInternalFieldsCallback,
                    // v8::ExtensionConfiguration *, MaybeLocal<v8::Value>,
                    // v8::MicrotaskQueue *)
  emit<_ast8108>(); // CXXMethodDecl NewRemoteContext
  emit<_ast8109>(); // ParmVarDecl isolate
  emit<_ast8110>(); // ParmVarDecl global_template
  emit<_ast8112>(); // ParmVarDecl global_object
  emit<_ast8114>(); // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *,
                    // Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
  emit<_ast8116>(); // CXXMethodDecl SetSecurityToken
  emit<_ast8117>(); // ParmVarDecl token
  emit<_ast8119>(); // FunctionProtoType void (Local<v8::Value>)
  emit<_ast8120>(); // CXXMethodDecl UseDefaultSecurityToken
  emit<_ast8121>(); // CXXMethodDecl GetSecurityToken
  emit<_ast8122>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast8124>(); // CXXMethodDecl Enter
  emit<_ast8125>(); // CXXMethodDecl Exit
  emit<_ast8126>(); // CXXMethodDecl GetIsolate
  emit<_ast8129>(); // CXXMethodDecl GetNumberOfEmbedderDataFields
  emit<_ast8130>(); // CXXMethodDecl GetEmbedderData
  emit<_ast8131>(); // ParmVarDecl index
  emit<_ast8132>(); // FunctionProtoType Local<v8::Value> (int)
  emit<_ast8134>(); // CXXMethodDecl GetExtrasBindingObject
  emit<_ast8135>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast8137>(); // CXXMethodDecl SetEmbedderData
  emit<_ast8138>(); // ParmVarDecl index
  emit<_ast8139>(); // ParmVarDecl value
  emit<_ast8141>(); // FunctionProtoType void (int, Local<v8::Value>)
  emit<_ast8142>(); // CXXMethodDecl GetAlignedPointerFromEmbedderData
  emit<_ast8143>(); // ParmVarDecl index
  emit<_ast8144>(); // CXXMethodDecl SetAlignedPointerInEmbedderData
  emit<_ast8145>(); // ParmVarDecl index
  emit<_ast8146>(); // ParmVarDecl value
  emit<_ast8147>(); // CXXMethodDecl AllowCodeGenerationFromStrings
  emit<_ast8148>(); // ParmVarDecl allow
  emit<_ast8149>(); // CXXMethodDecl IsCodeGenerationFromStringsAllowed
  emit<_ast8150>(); // CXXMethodDecl SetErrorMessageForCodeGenerationFromStrings
  emit<_ast8151>(); // ParmVarDecl message
  emit<_ast8153>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast8156>(); // CXXMethodDecl GetDataFromSnapshotOnce
  emit<_ast8157>(); // ParmVarDecl index
  emit<_ast8158>(); // FunctionProtoType MaybeLocal<T> (size_t)
  emit<_ast8160>(); // TypedefDecl AbortScriptExecutionCallback
  emit<_ast8161>(); // TypedefType v8::Context::AbortScriptExecutionCallback
  emit<_ast8162>(); // CXXMethodDecl SetAbortScriptExecution
  emit<_ast8163>(); // ParmVarDecl callback
  emit<_ast8164>(); // FunctionProtoType void
                    // (v8::Context::AbortScriptExecutionCallback)
  emit<_ast8165>(); // CXXRecordDecl Scope
  emit<_ast8166>(); // RecordType v8::Context::Scope
  emit<_ast8167>(); // FieldDecl context_
  emit<_ast8169>(); // CXXRecordDecl Scope
  emit<_ast8170>(); // CXXConstructorDecl Scope
  emit<_ast8171>(); // ParmVarDecl context
  emit<_ast8173>(); // FunctionProtoType void (Local<v8::Context>)
  emit<_ast8174>(); // PointerType v8::Context::Scope *
  emit<_ast8175>(); // CXXDestructorDecl ~Scope
  emit<_ast8176>(); // CXXRecordDecl BackupIncumbentScope
  emit<_ast8177>(); // RecordType v8::Context::BackupIncumbentScope
  emit<_ast8178>(); // FieldDecl backup_incumbent_context_
  emit<_ast8180>(); // FieldDecl js_stack_comparable_address_
  emit<_ast8181>(); // FieldDecl prev_
  emit<_ast8182>(); // PointerType const v8::Context::BackupIncumbentScope *
  emit<_ast8183>(); // RecordType const v8::Context::BackupIncumbentScope
  emit<_ast8184>(); // CXXRecordDecl BackupIncumbentScope
  emit<_ast8185>(); // CXXConstructorDecl BackupIncumbentScope
  emit<_ast8186>(); // ParmVarDecl backup_incumbent_context
  emit<_ast8188>(); // FunctionProtoType void (Local<v8::Context>)
  emit<_ast8189>(); // PointerType v8::Context::BackupIncumbentScope *
  emit<_ast8190>(); // CXXDestructorDecl ~BackupIncumbentScope
  emit<_ast8191>(); // FunctionProtoType void ()
  emit<_ast8192>(); // CXXMethodDecl JSStackComparableAddress
  emit<_ast8193>(); // FunctionProtoType uintptr_t () const
  emit<_ast8194>(); // CXXRecordDecl Unlocker
  emit<_ast8195>(); // RecordType v8::Unlocker
  emit<_ast8196>(); // FieldDecl isolate_
  emit<_ast8197>(); // CXXRecordDecl Unlocker
  emit<_ast8198>(); // CXXConstructorDecl Unlocker
  emit<_ast8199>(); // ParmVarDecl isolate
  emit<_ast8200>(); // PointerType v8::Unlocker *
  emit<_ast8201>(); // CXXDestructorDecl ~Unlocker
  emit<_ast8202>(); // FunctionProtoType void ()
  emit<_ast8203>(); // CXXRecordDecl Locker
  emit<_ast8204>(); // RecordType v8::Locker
  emit<_ast8205>(); // FieldDecl has_lock_
  emit<_ast8206>(); // FieldDecl top_level_
  emit<_ast8207>(); // FieldDecl isolate_
  emit<_ast8208>(); // CXXRecordDecl Locker
  emit<_ast8209>(); // CXXConstructorDecl Locker
  emit<_ast8210>(); // ParmVarDecl isolate
  emit<_ast8211>(); // PointerType v8::Locker *
  emit<_ast8212>(); // CXXDestructorDecl ~Locker
  emit<_ast8213>(); // FunctionProtoType void ()
  emit<_ast8214>(); // CXXMethodDecl IsLocked
  emit<_ast8215>(); // ParmVarDecl isolate
  emit<_ast8216>(); // CXXMethodDecl IsActive
  emit<_ast8217>(); // CXXConstructorDecl Locker
  emit<_ast8218>(); // ParmVarDecl
  emit<_ast8219>(); // LValueReferenceType const v8::Locker &
  emit<_ast8220>(); // RecordType const v8::Locker
  emit<_ast8221>(); // FunctionProtoType void (const v8::Locker &)
  emit<_ast8222>(); // CXXMethodDecl operator=
  emit<_ast8223>(); // ParmVarDecl
  emit<_ast8224>(); // CXXRecordDecl Unwinder
  emit<_ast8225>(); // RecordType v8::Unwinder
  emit<_ast8226>(); // CXXRecordDecl Unwinder
  emit<_ast8227>(); // CXXMethodDecl TryUnwindV8Frames
  emit<_ast8228>(); // ParmVarDecl unwind_state
  emit<_ast8229>(); // LValueReferenceType const v8::UnwindState &
  emit<_ast8230>(); // RecordType const v8::UnwindState
  emit<_ast8231>(); // ParmVarDecl register_state
  emit<_ast8232>(); // ParmVarDecl stack_base
  emit<_ast8233>(); // FunctionProtoType bool (const v8::UnwindState &,
                    // v8::RegisterState *, const void *)
  emit<_ast8234>(); // CXXMethodDecl PCIsInV8
  emit<_ast8235>(); // ParmVarDecl unwind_state
  emit<_ast8236>(); // ParmVarDecl pc
  emit<_ast8237>(); // FunctionProtoType bool (const v8::UnwindState &, void *)
  emit<_ast8238>(); // ParmVarDecl isolate
  emit<_ast8239>(); // ParmVarDecl that
  emit<_ast8241>(); // ParmVarDecl isolate
  emit<_ast8242>(); // ParmVarDecl that
  emit<_ast8243>(); // LValueReferenceType const PersistentBase<T> &
  emit<_ast8244>(); // TemplateSpecializationType const PersistentBase<T>
  emit<_ast8246>(); // ParmVarDecl isolate
  emit<_ast8247>(); // ParmVarDecl that
  emit<_ast8248>(); // LValueReferenceType const TracedGlobal<T> &
  emit<_ast8249>(); // TemplateSpecializationType const TracedGlobal<T>
  emit<_ast8252>(); // ParmVarDecl isolate
  emit<_ast8253>(); // ParmVarDecl handle
  emit<_ast8255>(); // ParmVarDecl isolate
  emit<_ast8256>(); // ParmVarDecl index
  emit<_ast8258>(); // ParmVarDecl isolate
  emit<_ast8259>(); // ParmVarDecl other
  emit<_ast8260>(); // LValueReferenceType const Local<S> &
  emit<_ast8261>(); // TemplateSpecializationType const Local<S>
  emit<_ast8264>(); // ParmVarDecl isolate
  emit<_ast8265>(); // ParmVarDecl other
  emit<_ast8266>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast8267>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast8270>(); // ParmVarDecl parameter
  emit<_ast8271>(); // PointerType P *
  emit<_ast8273>(); // ParmVarDecl callback
  emit<_ast8275>(); // ParmVarDecl type
  emit<_ast8277>(); // ParmVarDecl label
  emit<_ast8278>(); // ParmVarDecl class_id
  emit<_ast8279>(); // ParmVarDecl other
  emit<_ast8281>(); // ParmVarDecl rhs
  emit<_ast8282>(); // RValueReferenceType Global<S> &&
  emit<_ast8285>(); // ParmVarDecl isolate
  emit<_ast8286>(); // ParmVarDecl other
  emit<_ast8287>(); // LValueReferenceType const Local<S> &
  emit<_ast8288>(); // TemplateSpecializationType const Local<S>
  emit<_ast8290>(); // ParmVarDecl other
  emit<_ast8292>(); // ParmVarDecl rhs
  emit<_ast8293>(); // RValueReferenceType TracedGlobal<S> &&
  emit<_ast8295>(); // ParmVarDecl class_id
  emit<_ast8296>(); // ParmVarDecl parameter
  emit<_ast8297>(); // ParmVarDecl callback
  emit<_ast8300>(); // ParmVarDecl handle
  emit<_ast8301>(); // LValueReferenceType const Global<S> &
  emit<_ast8302>(); // TemplateSpecializationType const Global<S>
  emit<_ast8305>(); // ParmVarDecl handle
  emit<_ast8306>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast8307>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast8310>(); // ParmVarDecl handle
  emit<_ast8311>(); // TemplateSpecializationType const Local<S>
  emit<_ast8313>(); // ParmVarDecl i
  emit<_ast8314>(); // ParmVarDecl i
  emit<_ast8315>(); // ParmVarDecl i
  emit<_ast8316>(); // ParmVarDecl value
  emit<_ast8318>(); // ParmVarDecl whatever
  emit<_ast8319>(); // PointerType S *
  emit<_ast8321>(); // ParmVarDecl implicit_args
  emit<_ast8322>(); // ParmVarDecl values
  emit<_ast8323>(); // ParmVarDecl length
  emit<_ast8324>(); // ParmVarDecl i
  emit<_ast8325>(); // ParmVarDecl resource_name
  emit<_ast8327>(); // ParmVarDecl resource_line_offset
  emit<_ast8329>(); // ParmVarDecl resource_column_offset
  emit<_ast8331>(); // ParmVarDecl resource_is_shared_cross_origin
  emit<_ast8333>(); // ParmVarDecl script_id
  emit<_ast8335>(); // ParmVarDecl source_map_url
  emit<_ast8337>(); // ParmVarDecl resource_is_opaque
  emit<_ast8339>(); // ParmVarDecl is_wasm
  emit<_ast8341>(); // ParmVarDecl is_module
  emit<_ast8343>(); // ParmVarDecl host_defined_options
  emit<_ast8345>(); // ParmVarDecl string
  emit<_ast8347>(); // ParmVarDecl origin
  emit<_ast8348>(); // ParmVarDecl data
  emit<_ast8349>(); // ParmVarDecl string
  emit<_ast8351>(); // ParmVarDecl data
  emit<_ast8352>(); // ParmVarDecl isolate
  emit<_ast8353>(); // ParmVarDecl value
  emit<_ast8354>(); // ParmVarDecl isolate
  emit<_ast8355>(); // ParmVarDecl name
  emit<_ast8356>(); // ParmVarDecl value
  emit<_ast8358>(); // ParmVarDecl data
  emit<_ast8359>(); // ParmVarDecl data
  emit<_ast8360>(); // ParmVarDecl data
  emit<_ast8361>(); // ParmVarDecl data
  emit<_ast8362>(); // ParmVarDecl index
  emit<_ast8363>(); // ParmVarDecl index
  emit<_ast8364>(); // ParmVarDecl value
  emit<_ast8365>(); // ParmVarDecl isolate
  emit<_ast8366>(); // ParmVarDecl encoding_out
  emit<_ast8367>(); // PointerType String::Encoding *
  emit<_ast8370>(); // ParmVarDecl value
  emit<_ast8371>(); // PointerType T *
  emit<_ast8373>(); // ParmVarDecl value
  emit<_ast8374>(); // ParmVarDecl value
  emit<_ast8375>(); // ParmVarDecl value
  emit<_ast8376>(); // ParmVarDecl data
  emit<_ast8377>(); // ParmVarDecl value
  emit<_ast8378>(); // ParmVarDecl value
  emit<_ast8379>(); // ParmVarDecl value
  emit<_ast8380>(); // ParmVarDecl value
  emit<_ast8381>(); // ParmVarDecl value
  emit<_ast8382>(); // ParmVarDecl value
  emit<_ast8383>(); // ParmVarDecl value
  emit<_ast8384>(); // ParmVarDecl value
  emit<_ast8385>(); // ParmVarDecl value
  emit<_ast8386>(); // ParmVarDecl value
  emit<_ast8387>(); // ParmVarDecl value
  emit<_ast8388>(); // ParmVarDecl value
  emit<_ast8389>(); // ParmVarDecl value
  emit<_ast8390>(); // ParmVarDecl value
  emit<_ast8391>(); // ParmVarDecl value
  emit<_ast8392>(); // ParmVarDecl value
  emit<_ast8393>(); // ParmVarDecl value
  emit<_ast8394>(); // ParmVarDecl value
  emit<_ast8395>(); // ParmVarDecl value
  emit<_ast8396>(); // ParmVarDecl value
  emit<_ast8397>(); // ParmVarDecl value
  emit<_ast8398>(); // ParmVarDecl value
  emit<_ast8399>(); // ParmVarDecl value
  emit<_ast8400>(); // ParmVarDecl value
  emit<_ast8401>(); // ParmVarDecl value
  emit<_ast8402>(); // ParmVarDecl value
  emit<_ast8403>(); // ParmVarDecl value
  emit<_ast8404>(); // ParmVarDecl value
  emit<_ast8405>(); // ParmVarDecl value
  emit<_ast8406>(); // ParmVarDecl value
  emit<_ast8407>(); // ParmVarDecl value
  emit<_ast8408>(); // ParmVarDecl value
  emit<_ast8409>(); // ParmVarDecl value
  emit<_ast8410>(); // ParmVarDecl value
  emit<_ast8411>(); // ParmVarDecl value
  emit<_ast8412>(); // ParmVarDecl value
  emit<_ast8413>(); // ParmVarDecl value
  emit<_ast8414>(); // ParmVarDecl value
  emit<_ast8415>(); // ParmVarDecl isolate
  emit<_ast8416>(); // ParmVarDecl isolate
  emit<_ast8417>(); // ParmVarDecl isolate
  emit<_ast8418>(); // ParmVarDecl isolate
  emit<_ast8419>(); // ParmVarDecl slot
  emit<_ast8420>(); // ParmVarDecl data
  emit<_ast8421>(); // ParmVarDecl slot
  emit<_ast8423>(); // ParmVarDecl index
  emit<_ast8424>(); // ParmVarDecl change_in_bytes
  emit<_ast8425>(); // ParmVarDecl index
  emit<_ast8426>(); // ParmVarDecl index
  emit<_ast8428>(); // ParmVarDecl index
  emit<_ast8430>(); // ParmVarDecl context
  emit<_ast8432>(); // ParmVarDecl object
  emit<_ast8435>(); // ParmVarDecl object
} // Done: 0
