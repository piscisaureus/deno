#include <cstddef>

struct None {}; template <class... Ts> struct Pack {}; struct Type { static constexpr const bool IsConst = false; }; template <class T> using SameType = T; template <class T> struct ConstQualifiedType : Type { static constexpr const bool IsConst = true; using InnerType = T; }; struct VoidType : Type {}; struct BoolType : Type {}; struct NumericType : Type {}; struct IntegerType : NumericType {}; struct UnsignedIntegerType : IntegerType {}; struct SignedIntegerType : IntegerType {}; struct FloatingPointType : NumericType {}; template <class T, size_t s> struct ABIIndependentSizeType : T { static constexpr const size_t size = s; }; template <class T> struct PointerSizeType : T {}; template <class T> struct PointerType : Type { using PointeeType = T; }; template <class CT, class MT> struct MemberPointerType : Type { using ClassType = CT; using MemberType = MT; }; template <class T> struct ReferenceType : Type { using PointeeType = T; }; template <class RT> struct LValueReferenceType : RT {}; template <class RT> struct RValueReferenceType : RT {}; template <class RT, class PTs, template <class> class MQ> struct FunctionProtoType { using ReturnType = RT; using ParamTypes = PTs; template <typename T> using AddMethodQualifiers = MQ<T>; }; template <typename D> struct TagType : Type { using Decl = D; }; template <typename D, typename IT> struct EnumType : TagType<D> { using IntegerType = IT; }; template <typename D> struct RecordType : TagType<D> {}; template <typename RT> struct UnionRecordType : RT {}; template <typename RT> struct StructOrClassRecordType : RT {}; template <class D> struct TypedefType : Type { using Decl = D; }; template <class S> struct NamedDecl { constexpr static const char* DeclName = S::value; }; template <class S> struct NamedDeclName : NamedDecl<S> {}; template <class S> struct NamedDeclAnon : NamedDecl<S> {}; template <typename T> struct TypeDecl { using Type = T; }; template <class FT, class Ps> struct FunctionDecl { using FunctionProtoType = FT; using Params = Ps; }; template <class FD> struct MethodDecl : FD {}; template <class MD, class TT> struct InstanceMethodDecl : MD { using ThisType = TT; }; template <class MD> struct VirtualMethodDecl : MD {}; template <class MD> struct ConstructorDecl : MD {}; template <class MD> struct DestructorDecl {}; template <class MD> struct ConversionDecl {}; template <typename T> struct ParmVarDecl { using Type = T; };

struct _str1 { constexpr static const char* value = "v8"; };
struct _str2 { constexpr static const char* value = "Context"; };
struct _str3 { constexpr static const char* value = "Data"; };
struct _str4 { constexpr static const char* value = "Isolate"; };
struct _str5 { constexpr static const char* value = "AccessorSignature"; };
struct _str6 { constexpr static const char* value = "Array"; };
struct _str7 { constexpr static const char* value = "ArrayBuffer"; };
struct _str8 { constexpr static const char* value = "BigInt"; };
struct _str9 { constexpr static const char* value = "BigIntObject"; };
struct _str10 { constexpr static const char* value = "Boolean"; };
struct _str11 { constexpr static const char* value = "BooleanObject"; };
struct _str12 { constexpr static const char* value = "Date"; };
struct _str13 { constexpr static const char* value = "External"; };
struct _str14 { constexpr static const char* value = "Function"; };
struct _str15 { constexpr static const char* value = "FunctionTemplate"; };
struct _str16 { constexpr static const char* value = "HeapProfiler"; };
struct _str17 { constexpr static const char* value = "ImplementationUtilities"; };
struct _str18 { constexpr static const char* value = "Int32"; };
struct _str19 { constexpr static const char* value = "Integer"; };
struct _str20 { constexpr static const char* value = "Maybe"; };
struct _str21 { constexpr static const char* value = "T"; };
struct _str22 { constexpr static const char* value = "MicrotaskQueue"; };
struct _str23 { constexpr static const char* value = "Name"; };
struct _str24 { constexpr static const char* value = "Number"; };
struct _str25 { constexpr static const char* value = "NumberObject"; };
struct _str26 { constexpr static const char* value = "Object"; };
struct _str27 { constexpr static const char* value = "ObjectOperationDescriptor"; };
struct _str28 { constexpr static const char* value = "ObjectTemplate"; };
struct _str29 { constexpr static const char* value = "Platform"; };
struct _str30 { constexpr static const char* value = "Primitive"; };
struct _str31 { constexpr static const char* value = "Promise"; };
struct _str32 { constexpr static const char* value = "PropertyDescriptor"; };
struct _str33 { constexpr static const char* value = "Proxy"; };
struct _str34 { constexpr static const char* value = "RawOperationDescriptor"; };
struct _str35 { constexpr static const char* value = "Script"; };
struct _str36 { constexpr static const char* value = "SharedArrayBuffer"; };
struct _str37 { constexpr static const char* value = "Signature"; };
struct _str38 { constexpr static const char* value = "StartupData"; };
struct _str39 { constexpr static const char* value = "StackFrame"; };
struct _str40 { constexpr static const char* value = "StackTrace"; };
struct _str41 { constexpr static const char* value = "String"; };
struct _str42 { constexpr static const char* value = "StringObject"; };
struct _str43 { constexpr static const char* value = "Symbol"; };
struct _str44 { constexpr static const char* value = "SymbolObject"; };
struct _str45 { constexpr static const char* value = "PrimitiveArray"; };
struct _str46 { constexpr static const char* value = "Private"; };
struct _str47 { constexpr static const char* value = "Uint32"; };
struct _str48 { constexpr static const char* value = "Utils"; };
struct _str49 { constexpr static const char* value = "Value"; };
struct _str50 { constexpr static const char* value = "WasmModuleObject"; };
struct _str51 { constexpr static const char* value = "Local"; };
struct _str52 { constexpr static const char* value = "S"; };
struct _str53 { constexpr static const char* value = "that"; };
struct _str54 { constexpr static const char* value = "IsEmpty"; };
struct _str55 { constexpr static const char* value = "Clear"; };
struct _str56 { constexpr static const char* value = "operator->"; };
struct _str57 { constexpr static const char* value = "operator*"; };
struct _str58 { constexpr static const char* value = "operator=="; };
struct _str59 { constexpr static const char* value = "operator!="; };
struct _str60 { constexpr static const char* value = "Cast"; };
struct _str61 { constexpr static const char* value = "As"; };
struct _str62 { constexpr static const char* value = "New"; };
struct _str63 { constexpr static const char* value = "isolate"; };
struct _str64 { constexpr static const char* value = ""; };
struct _str65 { constexpr static const char* value = "operator="; };
struct _str66 { constexpr static const char* value = "MaybeLocal"; };
struct _str67 { constexpr static const char* value = "ToLocal"; };
struct _str68 { constexpr static const char* value = "out"; };
struct _str69 { constexpr static const char* value = "ToLocalChecked"; };
struct _str70 { constexpr static const char* value = "FromMaybe"; };
struct _str71 { constexpr static const char* value = "default_value"; };
struct _str72 { constexpr static const char* value = "Eternal"; };
struct _str73 { constexpr static const char* value = "NonCopyablePersistentTraits"; };
struct _str74 { constexpr static const char* value = "PersistentBase"; };
struct _str75 { constexpr static const char* value = "Reset"; };
struct _str76 { constexpr static const char* value = "other"; };
struct _str77 { constexpr static const char* value = "Empty"; };
struct _str78 { constexpr static const char* value = "Get"; };
struct _str79 { constexpr static const char* value = "SetWeak"; };
struct _str80 { constexpr static const char* value = "P"; };
struct _str81 { constexpr static const char* value = "parameter"; };
struct _str82 { constexpr static const char* value = "callback"; };
struct _str83 { constexpr static const char* value = "type"; };
struct _str84 { constexpr static const char* value = "WeakCallbackType"; };
struct _str85 { constexpr static const char* value = "ClearWeak"; };
struct _str86 { constexpr static const char* value = "AnnotateStrongRetainer"; };
struct _str87 { constexpr static const char* value = "label"; };
struct _str88 { constexpr static const char* value = "IsWeak"; };
struct _str89 { constexpr static const char* value = "SetWrapperClassId"; };
struct _str90 { constexpr static const char* value = "class_id"; };
struct _str91 { constexpr static const char* value = "WrapperClassId"; };
struct _str92 { constexpr static const char* value = "Persistent"; };
struct _str93 { constexpr static const char* value = "M"; };
struct _str94 { constexpr static const char* value = "M2"; };
struct _str95 { constexpr static const char* value = "Global"; };
struct _str96 { constexpr static const char* value = "TracedGlobal"; };
struct _str97 { constexpr static const char* value = "rhs"; };
struct _str98 { constexpr static const char* value = "SetFinalizationCallback"; };
struct _str99 { constexpr static const char* value = "PersistentValueMap"; };
struct _str100 { constexpr static const char* value = "K"; };
struct _str101 { constexpr static const char* value = "V"; };
struct _str102 { constexpr static const char* value = "PersistentValueMapBase"; };
struct _str103 { constexpr static const char* value = "GlobalValueMap"; };
struct _str104 { constexpr static const char* value = "PersistentValueVector"; };
struct _str105 { constexpr static const char* value = "WeakCallbackObject"; };
struct _str106 { constexpr static const char* value = "FunctionCallbackInfo"; };
struct _str107 { constexpr static const char* value = "PropertyCallbackInfo"; };
struct _str108 { constexpr static const char* value = "CallHandlerHelper"; };
struct _str109 { constexpr static const char* value = "EscapableHandleScope"; };
struct _str110 { constexpr static const char* value = "ReturnValue"; };
struct _str111 { constexpr static const char* value = "debug"; };
struct _str112 { constexpr static const char* value = "ConsoleCallArguments"; };
struct _str113 { constexpr static const char* value = "Local<T>"; };
struct _str114 { constexpr static const char* value = "Handle"; };
struct _str115 { constexpr static const char* value = "MaybeLocal<T>"; };
struct _str116 { constexpr static const char* value = "Eternal<T>"; };
struct _str117 { constexpr static const char* value = "handle"; };
struct _str118 { constexpr static const char* value = "Set"; };
struct _str119 { constexpr static const char* value = "kInternalFieldsInWeakCallback"; };
struct _str120 { constexpr static const char* value = "kEmbedderFieldsInWeakCallback"; };
struct _str121 { constexpr static const char* value = "WeakCallbackInfo"; };
struct _str122 { constexpr static const char* value = "Callback"; };
struct _str123 { constexpr static const char* value = "embedder_fields"; };
struct _str124 { constexpr static const char* value = "GetIsolate"; };
struct _str125 { constexpr static const char* value = "GetParameter"; };
struct _str126 { constexpr static const char* value = "GetInternalField"; };
struct _str127 { constexpr static const char* value = "index"; };
struct _str128 { constexpr static const char* value = "SetSecondPassCallback"; };
struct _str129 { constexpr static const char* value = "data"; };
struct _str130 { constexpr static const char* value = "kParameter"; };
struct _str131 { constexpr static const char* value = "kInternalFields"; };
struct _str132 { constexpr static const char* value = "kFinalizer"; };
struct _str133 { constexpr static const char* value = "NonCopyablePersistent"; };
struct _str134 { constexpr static const char* value = "kResetInDestructor"; };
struct _str135 { constexpr static const char* value = "Copy"; };
struct _str136 { constexpr static const char* value = "source"; };
struct _str137 { constexpr static const char* value = "dest"; };
struct _str138 { constexpr static const char* value = "Uncompilable"; };
struct _str139 { constexpr static const char* value = "O"; };
struct _str140 { constexpr static const char* value = "CopyablePersistentTraits"; };
struct _str141 { constexpr static const char* value = "CopyablePersistent"; };
struct _str142 { constexpr static const char* value = "Persistent<T, M>"; };
struct _str143 { constexpr static const char* value = "Global<T>"; };
struct _str144 { constexpr static const char* value = "Pass"; };
struct _str145 { constexpr static const char* value = "MoveOnlyTypeForCPP03"; };
struct _str146 { constexpr static const char* value = "UniquePersistent"; };
struct _str147 { constexpr static const char* value = "TracedGlobal<T>"; };
struct _str148 { constexpr static const char* value = "HandleScope"; };
struct _str149 { constexpr static const char* value = "NumberOfHandles"; };
struct _str150 { constexpr static const char* value = "Initialize"; };
struct _str151 { constexpr static const char* value = "CreateHandle"; };
struct _str152 { constexpr static const char* value = "value"; };
struct _str153 { constexpr static const char* value = "Escape"; };
struct _str154 { constexpr static const char* value = "EscapeMaybe"; };
struct _str155 { constexpr static const char* value = "SealHandleScope"; };
struct _str156 { constexpr static const char* value = "ScriptOrModule"; };
struct _str157 { constexpr static const char* value = "GetResourceName"; };
struct _str158 { constexpr static const char* value = "GetHostDefinedOptions"; };
struct _str159 { constexpr static const char* value = "length"; };
struct _str160 { constexpr static const char* value = "Length"; };
struct _str161 { constexpr static const char* value = "item"; };
struct _str162 { constexpr static const char* value = "ScriptOriginOptions"; };
struct _str163 { constexpr static const char* value = "is_shared_cross_origin"; };
struct _str164 { constexpr static const char* value = "is_opaque"; };
struct _str165 { constexpr static const char* value = "is_wasm"; };
struct _str166 { constexpr static const char* value = "is_module"; };
struct _str167 { constexpr static const char* value = "flags"; };
struct _str168 { constexpr static const char* value = "IsSharedCrossOrigin"; };
struct _str169 { constexpr static const char* value = "IsOpaque"; };
struct _str170 { constexpr static const char* value = "IsWasm"; };
struct _str171 { constexpr static const char* value = "IsModule"; };
struct _str172 { constexpr static const char* value = "Flags"; };
struct _str173 { constexpr static const char* value = "ScriptOrigin"; };
struct _str174 { constexpr static const char* value = "resource_name"; };
struct _str175 { constexpr static const char* value = "resource_line_offset"; };
struct _str176 { constexpr static const char* value = "resource_column_offset"; };
struct _str177 { constexpr static const char* value = "resource_is_shared_cross_origin"; };
struct _str178 { constexpr static const char* value = "script_id"; };
struct _str179 { constexpr static const char* value = "source_map_url"; };
struct _str180 { constexpr static const char* value = "resource_is_opaque"; };
struct _str181 { constexpr static const char* value = "host_defined_options"; };
struct _str182 { constexpr static const char* value = "ResourceName"; };
struct _str183 { constexpr static const char* value = "ResourceLineOffset"; };
struct _str184 { constexpr static const char* value = "ResourceColumnOffset"; };
struct _str185 { constexpr static const char* value = "ScriptID"; };
struct _str186 { constexpr static const char* value = "SourceMapUrl"; };
struct _str187 { constexpr static const char* value = "HostDefinedOptions"; };
struct _str188 { constexpr static const char* value = "Options"; };
struct _str189 { constexpr static const char* value = "UnboundScript"; };
struct _str190 { constexpr static const char* value = "BindToCurrentContext"; };
struct _str191 { constexpr static const char* value = "GetId"; };
struct _str192 { constexpr static const char* value = "GetScriptName"; };
struct _str193 { constexpr static const char* value = "GetSourceURL"; };
struct _str194 { constexpr static const char* value = "GetSourceMappingURL"; };
struct _str195 { constexpr static const char* value = "GetLineNumber"; };
struct _str196 { constexpr static const char* value = "code_pos"; };
struct _str197 { constexpr static const char* value = "kNoScriptId"; };
struct _str198 { constexpr static const char* value = "UnboundModuleScript"; };
struct _str199 { constexpr static const char* value = "Location"; };
struct _str200 { constexpr static const char* value = "GetColumnNumber"; };
struct _str201 { constexpr static const char* value = "line_number"; };
struct _str202 { constexpr static const char* value = "column_number"; };
struct _str203 { constexpr static const char* value = "Module"; };
struct _str204 { constexpr static const char* value = "Status"; };
struct _str205 { constexpr static const char* value = "kUninstantiated"; };
struct _str206 { constexpr static const char* value = "kInstantiating"; };
struct _str207 { constexpr static const char* value = "kInstantiated"; };
struct _str208 { constexpr static const char* value = "kEvaluating"; };
struct _str209 { constexpr static const char* value = "kEvaluated"; };
struct _str210 { constexpr static const char* value = "kErrored"; };
struct _str211 { constexpr static const char* value = "GetStatus"; };
struct _str212 { constexpr static const char* value = "GetException"; };
struct _str213 { constexpr static const char* value = "GetModuleRequestsLength"; };
struct _str214 { constexpr static const char* value = "GetModuleRequest"; };
struct _str215 { constexpr static const char* value = "i"; };
struct _str216 { constexpr static const char* value = "GetModuleRequestLocation"; };
struct _str217 { constexpr static const char* value = "GetIdentityHash"; };
struct _str218 { constexpr static const char* value = "ResolveCallback"; };
struct _str219 { constexpr static const char* value = "InstantiateModule"; };
struct _str220 { constexpr static const char* value = "context"; };
struct _str221 { constexpr static const char* value = "Evaluate"; };
struct _str222 { constexpr static const char* value = "GetModuleNamespace"; };
struct _str223 { constexpr static const char* value = "GetUnboundModuleScript"; };
struct _str224 { constexpr static const char* value = "Compile"; };
struct _str225 { constexpr static const char* value = "origin"; };
struct _str226 { constexpr static const char* value = "Run"; };
struct _str227 { constexpr static const char* value = "GetUnboundScript"; };
struct _str228 { constexpr static const char* value = "ScriptCompiler"; };
struct _str229 { constexpr static const char* value = "CachedData"; };
struct _str230 { constexpr static const char* value = "BufferPolicy"; };
struct _str231 { constexpr static const char* value = "BufferNotOwned"; };
struct _str232 { constexpr static const char* value = "BufferOwned"; };
struct _str233 { constexpr static const char* value = "buffer_policy"; };
struct _str234 { constexpr static const char* value = "rejected"; };
struct _str235 { constexpr static const char* value = "Source"; };
struct _str236 { constexpr static const char* value = "source_string"; };
struct _str237 { constexpr static const char* value = "cached_data"; };
struct _str238 { constexpr static const char* value = "GetCachedData"; };
struct _str239 { constexpr static const char* value = "GetResourceOptions"; };
struct _str240 { constexpr static const char* value = "ExternalSourceStream"; };
struct _str241 { constexpr static const char* value = "GetMoreData"; };
struct _str242 { constexpr static const char* value = "src"; };
struct _str243 { constexpr static const char* value = "SetBookmark"; };
struct _str244 { constexpr static const char* value = "ResetToBookmark"; };
struct _str245 { constexpr static const char* value = "StreamedSource"; };
struct _str246 { constexpr static const char* value = "Encoding"; };
struct _str247 { constexpr static const char* value = "ONE_BYTE"; };
struct _str248 { constexpr static const char* value = "TWO_BYTE"; };
struct _str249 { constexpr static const char* value = "UTF8"; };
struct _str250 { constexpr static const char* value = "source_stream"; };
struct _str251 { constexpr static const char* value = "encoding"; };
struct _str252 { constexpr static const char* value = "impl"; };
struct _str253 { constexpr static const char* value = "ScriptStreamingTask"; };
struct _str254 { constexpr static const char* value = "CompileOptions"; };
struct _str255 { constexpr static const char* value = "kNoCompileOptions"; };
struct _str256 { constexpr static const char* value = "kConsumeCodeCache"; };
struct _str257 { constexpr static const char* value = "kEagerCompile"; };
struct _str258 { constexpr static const char* value = "NoCacheReason"; };
struct _str259 { constexpr static const char* value = "kNoCacheNoReason"; };
struct _str260 { constexpr static const char* value = "kNoCacheBecauseCachingDisabled"; };
struct _str261 { constexpr static const char* value = "kNoCacheBecauseNoResource"; };
struct _str262 { constexpr static const char* value = "kNoCacheBecauseInlineScript"; };
struct _str263 { constexpr static const char* value = "kNoCacheBecauseModule"; };
struct _str264 { constexpr static const char* value = "kNoCacheBecauseStreamingSource"; };
struct _str265 { constexpr static const char* value = "kNoCacheBecauseInspector"; };
struct _str266 { constexpr static const char* value = "kNoCacheBecauseScriptTooSmall"; };
struct _str267 { constexpr static const char* value = "kNoCacheBecauseCacheTooCold"; };
struct _str268 { constexpr static const char* value = "kNoCacheBecauseV8Extension"; };
struct _str269 { constexpr static const char* value = "kNoCacheBecauseExtensionModule"; };
struct _str270 { constexpr static const char* value = "kNoCacheBecausePacScript"; };
struct _str271 { constexpr static const char* value = "kNoCacheBecauseInDocumentWrite"; };
struct _str272 { constexpr static const char* value = "kNoCacheBecauseResourceWithNoCacheHandler"; };
struct _str273 { constexpr static const char* value = "kNoCacheBecauseDeferredProduceCodeCache"; };
struct _str274 { constexpr static const char* value = "CompileUnboundScript"; };
struct _str275 { constexpr static const char* value = "options"; };
struct _str276 { constexpr static const char* value = "no_cache_reason"; };
struct _str277 { constexpr static const char* value = "StartStreamingScript"; };
struct _str278 { constexpr static const char* value = "full_source_string"; };
struct _str279 { constexpr static const char* value = "CachedDataVersionTag"; };
struct _str280 { constexpr static const char* value = "CompileModule"; };
struct _str281 { constexpr static const char* value = "CompileFunctionInContext"; };
struct _str282 { constexpr static const char* value = "arguments_count"; };
struct _str283 { constexpr static const char* value = "arguments"; };
struct _str284 { constexpr static const char* value = "context_extension_count"; };
struct _str285 { constexpr static const char* value = "context_extensions"; };
struct _str286 { constexpr static const char* value = "CreateCodeCache"; };
struct _str287 { constexpr static const char* value = "unbound_script"; };
struct _str288 { constexpr static const char* value = "unbound_module_script"; };
struct _str289 { constexpr static const char* value = "CreateCodeCacheForFunction"; };
struct _str290 { constexpr static const char* value = "function"; };
struct _str291 { constexpr static const char* value = "Message"; };
struct _str292 { constexpr static const char* value = "GetSourceLine"; };
struct _str293 { constexpr static const char* value = "GetScriptOrigin"; };
struct _str294 { constexpr static const char* value = "GetScriptResourceName"; };
struct _str295 { constexpr static const char* value = "GetStackTrace"; };
struct _str296 { constexpr static const char* value = "GetStartPosition"; };
struct _str297 { constexpr static const char* value = "GetEndPosition"; };
struct _str298 { constexpr static const char* value = "ErrorLevel"; };
struct _str299 { constexpr static const char* value = "GetStartColumn"; };
struct _str300 { constexpr static const char* value = "GetEndColumn"; };
struct _str301 { constexpr static const char* value = "PrintCurrentStackTrace"; };
struct _str302 { constexpr static const char* value = "FILE"; };
struct _str303 { constexpr static const char* value = "kNoLineNumberInfo"; };
struct _str304 { constexpr static const char* value = "kNoColumnInfo"; };
struct _str305 { constexpr static const char* value = "kNoScriptIdInfo"; };
struct _str306 { constexpr static const char* value = "StackTraceOptions"; };
struct _str307 { constexpr static const char* value = "kLineNumber"; };
struct _str308 { constexpr static const char* value = "kColumnOffset"; };
struct _str309 { constexpr static const char* value = "kScriptName"; };
struct _str310 { constexpr static const char* value = "kFunctionName"; };
struct _str311 { constexpr static const char* value = "kIsEval"; };
struct _str312 { constexpr static const char* value = "kIsConstructor"; };
struct _str313 { constexpr static const char* value = "kScriptNameOrSourceURL"; };
struct _str314 { constexpr static const char* value = "kScriptId"; };
struct _str315 { constexpr static const char* value = "kExposeFramesAcrossSecurityOrigins"; };
struct _str316 { constexpr static const char* value = "kOverview"; };
struct _str317 { constexpr static const char* value = "kDetailed"; };
struct _str318 { constexpr static const char* value = "GetFrame"; };
struct _str319 { constexpr static const char* value = "GetFrameCount"; };
struct _str320 { constexpr static const char* value = "CurrentStackTrace"; };
struct _str321 { constexpr static const char* value = "frame_limit"; };
struct _str322 { constexpr static const char* value = "GetColumn"; };
struct _str323 { constexpr static const char* value = "GetScriptId"; };
struct _str324 { constexpr static const char* value = "GetScriptNameOrSourceURL"; };
struct _str325 { constexpr static const char* value = "GetFunctionName"; };
struct _str326 { constexpr static const char* value = "IsEval"; };
struct _str327 { constexpr static const char* value = "IsConstructor"; };
struct _str328 { constexpr static const char* value = "IsUserJavaScript"; };
struct _str329 { constexpr static const char* value = "StateTag"; };
struct _str330 { constexpr static const char* value = "JS"; };
struct _str331 { constexpr static const char* value = "GC"; };
struct _str332 { constexpr static const char* value = "PARSER"; };
struct _str333 { constexpr static const char* value = "BYTECODE_COMPILER"; };
struct _str334 { constexpr static const char* value = "COMPILER"; };
struct _str335 { constexpr static const char* value = "OTHER"; };
struct _str336 { constexpr static const char* value = "EXTERNAL"; };
struct _str337 { constexpr static const char* value = "IDLE"; };
struct _str338 { constexpr static const char* value = "RegisterState"; };
struct _str339 { constexpr static const char* value = "pc"; };
struct _str340 { constexpr static const char* value = "sp"; };
struct _str341 { constexpr static const char* value = "fp"; };
struct _str342 { constexpr static const char* value = "lr"; };
struct _str343 { constexpr static const char* value = "SampleInfo"; };
struct _str344 { constexpr static const char* value = "frames_count"; };
struct _str345 { constexpr static const char* value = "vm_state"; };
struct _str346 { constexpr static const char* value = "external_callback_entry"; };
struct _str347 { constexpr static const char* value = "MemoryRange"; };
struct _str348 { constexpr static const char* value = "start"; };
struct _str349 { constexpr static const char* value = "length_in_bytes"; };
struct _str350 { constexpr static const char* value = "JSEntryStub"; };
struct _str351 { constexpr static const char* value = "code"; };
struct _str352 { constexpr static const char* value = "UnwindState"; };
struct _str353 { constexpr static const char* value = "code_range"; };
struct _str354 { constexpr static const char* value = "embedded_code_range"; };
struct _str355 { constexpr static const char* value = "js_entry_stub"; };
struct _str356 { constexpr static const char* value = "JSON"; };
struct _str357 { constexpr static const char* value = "Parse"; };
struct _str358 { constexpr static const char* value = "json_string"; };
struct _str359 { constexpr static const char* value = "Stringify"; };
struct _str360 { constexpr static const char* value = "json_object"; };
struct _str361 { constexpr static const char* value = "gap"; };
struct _str362 { constexpr static const char* value = "ValueSerializer"; };
struct _str363 { constexpr static const char* value = "Delegate"; };
struct _str364 { constexpr static const char* value = "ThrowDataCloneError"; };
struct _str365 { constexpr static const char* value = "message"; };
struct _str366 { constexpr static const char* value = "WriteHostObject"; };
struct _str367 { constexpr static const char* value = "object"; };
struct _str368 { constexpr static const char* value = "GetSharedArrayBufferId"; };
struct _str369 { constexpr static const char* value = "shared_array_buffer"; };
struct _str370 { constexpr static const char* value = "GetWasmModuleTransferId"; };
struct _str371 { constexpr static const char* value = "module"; };
struct _str372 { constexpr static const char* value = "ReallocateBufferMemory"; };
struct _str373 { constexpr static const char* value = "old_buffer"; };
struct _str374 { constexpr static const char* value = "size"; };
struct _str375 { constexpr static const char* value = "actual_size"; };
struct _str376 { constexpr static const char* value = "FreeBufferMemory"; };
struct _str377 { constexpr static const char* value = "buffer"; };
struct _str378 { constexpr static const char* value = "delegate"; };
struct _str379 { constexpr static const char* value = "WriteHeader"; };
struct _str380 { constexpr static const char* value = "WriteValue"; };
struct _str381 { constexpr static const char* value = "Release"; };
struct _str382 { constexpr static const char* value = "TransferArrayBuffer"; };
struct _str383 { constexpr static const char* value = "transfer_id"; };
struct _str384 { constexpr static const char* value = "array_buffer"; };
struct _str385 { constexpr static const char* value = "SetTreatArrayBufferViewsAsHostObjects"; };
struct _str386 { constexpr static const char* value = "mode"; };
struct _str387 { constexpr static const char* value = "WriteUint32"; };
struct _str388 { constexpr static const char* value = "WriteUint64"; };
struct _str389 { constexpr static const char* value = "WriteDouble"; };
struct _str390 { constexpr static const char* value = "WriteRawBytes"; };
struct _str391 { constexpr static const char* value = "ValueDeserializer"; };
struct _str392 { constexpr static const char* value = "ReadHostObject"; };
struct _str393 { constexpr static const char* value = "GetWasmModuleFromId"; };
struct _str394 { constexpr static const char* value = "GetSharedArrayBufferFromId"; };
struct _str395 { constexpr static const char* value = "clone_id"; };
struct _str396 { constexpr static const char* value = "ReadHeader"; };
struct _str397 { constexpr static const char* value = "ReadValue"; };
struct _str398 { constexpr static const char* value = "TransferSharedArrayBuffer"; };
struct _str399 { constexpr static const char* value = "id"; };
struct _str400 { constexpr static const char* value = "SetSupportsLegacyWireFormat"; };
struct _str401 { constexpr static const char* value = "supports_legacy_wire_format"; };
struct _str402 { constexpr static const char* value = "SetExpectInlineWasm"; };
struct _str403 { constexpr static const char* value = "allow_inline_wasm"; };
struct _str404 { constexpr static const char* value = "GetWireFormatVersion"; };
struct _str405 { constexpr static const char* value = "ReadUint32"; };
struct _str406 { constexpr static const char* value = "ReadUint64"; };
struct _str407 { constexpr static const char* value = "ReadDouble"; };
struct _str408 { constexpr static const char* value = "ReadRawBytes"; };
struct _str409 { constexpr static const char* value = "IsUndefined"; };
struct _str410 { constexpr static const char* value = "IsNull"; };
struct _str411 { constexpr static const char* value = "IsNullOrUndefined"; };
struct _str412 { constexpr static const char* value = "IsTrue"; };
struct _str413 { constexpr static const char* value = "IsFalse"; };
struct _str414 { constexpr static const char* value = "IsName"; };
struct _str415 { constexpr static const char* value = "IsString"; };
struct _str416 { constexpr static const char* value = "IsSymbol"; };
struct _str417 { constexpr static const char* value = "IsFunction"; };
struct _str418 { constexpr static const char* value = "IsArray"; };
struct _str419 { constexpr static const char* value = "IsObject"; };
struct _str420 { constexpr static const char* value = "IsBigInt"; };
struct _str421 { constexpr static const char* value = "IsBoolean"; };
struct _str422 { constexpr static const char* value = "IsNumber"; };
struct _str423 { constexpr static const char* value = "IsExternal"; };
struct _str424 { constexpr static const char* value = "IsInt32"; };
struct _str425 { constexpr static const char* value = "IsUint32"; };
struct _str426 { constexpr static const char* value = "IsDate"; };
struct _str427 { constexpr static const char* value = "IsArgumentsObject"; };
struct _str428 { constexpr static const char* value = "IsBigIntObject"; };
struct _str429 { constexpr static const char* value = "IsBooleanObject"; };
struct _str430 { constexpr static const char* value = "IsNumberObject"; };
struct _str431 { constexpr static const char* value = "IsStringObject"; };
struct _str432 { constexpr static const char* value = "IsSymbolObject"; };
struct _str433 { constexpr static const char* value = "IsNativeError"; };
struct _str434 { constexpr static const char* value = "IsRegExp"; };
struct _str435 { constexpr static const char* value = "IsAsyncFunction"; };
struct _str436 { constexpr static const char* value = "IsGeneratorFunction"; };
struct _str437 { constexpr static const char* value = "IsGeneratorObject"; };
struct _str438 { constexpr static const char* value = "IsPromise"; };
struct _str439 { constexpr static const char* value = "IsMap"; };
struct _str440 { constexpr static const char* value = "IsSet"; };
struct _str441 { constexpr static const char* value = "IsMapIterator"; };
struct _str442 { constexpr static const char* value = "IsSetIterator"; };
struct _str443 { constexpr static const char* value = "IsWeakMap"; };
struct _str444 { constexpr static const char* value = "IsWeakSet"; };
struct _str445 { constexpr static const char* value = "IsArrayBuffer"; };
struct _str446 { constexpr static const char* value = "IsArrayBufferView"; };
struct _str447 { constexpr static const char* value = "IsTypedArray"; };
struct _str448 { constexpr static const char* value = "IsUint8Array"; };
struct _str449 { constexpr static const char* value = "IsUint8ClampedArray"; };
struct _str450 { constexpr static const char* value = "IsInt8Array"; };
struct _str451 { constexpr static const char* value = "IsUint16Array"; };
struct _str452 { constexpr static const char* value = "IsInt16Array"; };
struct _str453 { constexpr static const char* value = "IsUint32Array"; };
struct _str454 { constexpr static const char* value = "IsInt32Array"; };
struct _str455 { constexpr static const char* value = "IsFloat32Array"; };
struct _str456 { constexpr static const char* value = "IsFloat64Array"; };
struct _str457 { constexpr static const char* value = "IsBigInt64Array"; };
struct _str458 { constexpr static const char* value = "IsBigUint64Array"; };
struct _str459 { constexpr static const char* value = "IsDataView"; };
struct _str460 { constexpr static const char* value = "IsSharedArrayBuffer"; };
struct _str461 { constexpr static const char* value = "IsProxy"; };
struct _str462 { constexpr static const char* value = "IsWebAssemblyCompiledModule"; };
struct _str463 { constexpr static const char* value = "IsModuleNamespaceObject"; };
struct _str464 { constexpr static const char* value = "ToBigInt"; };
struct _str465 { constexpr static const char* value = "ToNumber"; };
struct _str466 { constexpr static const char* value = "ToString"; };
struct _str467 { constexpr static const char* value = "ToDetailString"; };
struct _str468 { constexpr static const char* value = "ToObject"; };
struct _str469 { constexpr static const char* value = "ToInteger"; };
struct _str470 { constexpr static const char* value = "ToUint32"; };
struct _str471 { constexpr static const char* value = "ToInt32"; };
struct _str472 { constexpr static const char* value = "ToBoolean"; };
struct _str473 { constexpr static const char* value = "ToArrayIndex"; };
struct _str474 { constexpr static const char* value = "BooleanValue"; };
struct _str475 { constexpr static const char* value = "NumberValue"; };
struct _str476 { constexpr static const char* value = "IntegerValue"; };
struct _str477 { constexpr static const char* value = "Uint32Value"; };
struct _str478 { constexpr static const char* value = "Int32Value"; };
struct _str479 { constexpr static const char* value = "Equals"; };
struct _str480 { constexpr static const char* value = "StrictEquals"; };
struct _str481 { constexpr static const char* value = "SameValue"; };
struct _str482 { constexpr static const char* value = "TypeOf"; };
struct _str483 { constexpr static const char* value = "InstanceOf"; };
struct _str484 { constexpr static const char* value = "obj"; };
struct _str485 { constexpr static const char* value = "NewStringType"; };
struct _str486 { constexpr static const char* value = "kNormal"; };
struct _str487 { constexpr static const char* value = "kInternalized"; };
struct _str488 { constexpr static const char* value = "kMaxLength"; };
struct _str489 { constexpr static const char* value = "UNKNOWN_ENCODING"; };
struct _str490 { constexpr static const char* value = "TWO_BYTE_ENCODING"; };
struct _str491 { constexpr static const char* value = "ONE_BYTE_ENCODING"; };
struct _str492 { constexpr static const char* value = "Utf8Length"; };
struct _str493 { constexpr static const char* value = "IsOneByte"; };
struct _str494 { constexpr static const char* value = "ContainsOnlyOneByte"; };
struct _str495 { constexpr static const char* value = "WriteOptions"; };
struct _str496 { constexpr static const char* value = "NO_OPTIONS"; };
struct _str497 { constexpr static const char* value = "HINT_MANY_WRITES_EXPECTED"; };
struct _str498 { constexpr static const char* value = "NO_NULL_TERMINATION"; };
struct _str499 { constexpr static const char* value = "PRESERVE_ONE_BYTE_NULL"; };
struct _str500 { constexpr static const char* value = "REPLACE_INVALID_UTF8"; };
struct _str501 { constexpr static const char* value = "Write"; };
struct _str502 { constexpr static const char* value = "WriteOneByte"; };
struct _str503 { constexpr static const char* value = "WriteUtf8"; };
struct _str504 { constexpr static const char* value = "nchars_ref"; };
struct _str505 { constexpr static const char* value = "IsExternalOneByte"; };
struct _str506 { constexpr static const char* value = "ExternalStringResourceBase"; };
struct _str507 { constexpr static const char* value = "IsCacheable"; };
struct _str508 { constexpr static const char* value = "Dispose"; };
struct _str509 { constexpr static const char* value = "Lock"; };
struct _str510 { constexpr static const char* value = "Unlock"; };
struct _str511 { constexpr static const char* value = "ExternalStringResource"; };
struct _str512 { constexpr static const char* value = "ExternalOneByteStringResource"; };
struct _str513 { constexpr static const char* value = "GetExternalStringResourceBase"; };
struct _str514 { constexpr static const char* value = "encoding_out"; };
struct _str515 { constexpr static const char* value = "GetExternalStringResource"; };
struct _str516 { constexpr static const char* value = "GetExternalOneByteStringResource"; };
struct _str517 { constexpr static const char* value = "NewFromUtf8"; };
struct _str518 { constexpr static const char* value = "NewFromOneByte"; };
struct _str519 { constexpr static const char* value = "NewFromTwoByte"; };
struct _str520 { constexpr static const char* value = "Concat"; };
struct _str521 { constexpr static const char* value = "left"; };
struct _str522 { constexpr static const char* value = "right"; };
struct _str523 { constexpr static const char* value = "NewExternalTwoByte"; };
struct _str524 { constexpr static const char* value = "resource"; };
struct _str525 { constexpr static const char* value = "MakeExternal"; };
struct _str526 { constexpr static const char* value = "NewExternalOneByte"; };
struct _str527 { constexpr static const char* value = "CanMakeExternal"; };
struct _str528 { constexpr static const char* value = "StringEquals"; };
struct _str529 { constexpr static const char* value = "str"; };
struct _str530 { constexpr static const char* value = "Utf8Value"; };
struct _str531 { constexpr static const char* value = "name"; };
struct _str532 { constexpr static const char* value = "For"; };
struct _str533 { constexpr static const char* value = "ForApi"; };
struct _str534 { constexpr static const char* value = "GetAsyncIterator"; };
struct _str535 { constexpr static const char* value = "GetHasInstance"; };
struct _str536 { constexpr static const char* value = "GetIsConcatSpreadable"; };
struct _str537 { constexpr static const char* value = "GetIterator"; };
struct _str538 { constexpr static const char* value = "GetMatch"; };
struct _str539 { constexpr static const char* value = "GetReplace"; };
struct _str540 { constexpr static const char* value = "GetSearch"; };
struct _str541 { constexpr static const char* value = "GetSplit"; };
struct _str542 { constexpr static const char* value = "GetToPrimitive"; };
struct _str543 { constexpr static const char* value = "GetToStringTag"; };
struct _str544 { constexpr static const char* value = "GetUnscopables"; };
struct _str545 { constexpr static const char* value = "NewFromUnsigned"; };
struct _str546 { constexpr static const char* value = "NewFromWords"; };
struct _str547 { constexpr static const char* value = "sign_bit"; };
struct _str548 { constexpr static const char* value = "word_count"; };
struct _str549 { constexpr static const char* value = "words"; };
struct _str550 { constexpr static const char* value = "Uint64Value"; };
struct _str551 { constexpr static const char* value = "lossless"; };
struct _str552 { constexpr static const char* value = "Int64Value"; };
struct _str553 { constexpr static const char* value = "WordCount"; };
struct _str554 { constexpr static const char* value = "ToWordsArray"; };
struct _str555 { constexpr static const char* value = "PropertyAttribute"; };
struct _str556 { constexpr static const char* value = "None"; };
struct _str557 { constexpr static const char* value = "ReadOnly"; };
struct _str558 { constexpr static const char* value = "DontEnum"; };
struct _str559 { constexpr static const char* value = "DontDelete"; };
struct _str560 { constexpr static const char* value = "AccessorGetterCallback"; };
struct _str561 { constexpr static const char* value = "AccessorNameGetterCallback"; };
struct _str562 { constexpr static const char* value = "AccessorSetterCallback"; };
struct _str563 { constexpr static const char* value = "AccessorNameSetterCallback"; };
struct _str564 { constexpr static const char* value = "AccessControl"; };
struct _str565 { constexpr static const char* value = "DEFAULT"; };
struct _str566 { constexpr static const char* value = "ALL_CAN_READ"; };
struct _str567 { constexpr static const char* value = "ALL_CAN_WRITE"; };
struct _str568 { constexpr static const char* value = "PROHIBITS_OVERWRITING"; };
struct _str569 { constexpr static const char* value = "PropertyFilter"; };
struct _str570 { constexpr static const char* value = "ALL_PROPERTIES"; };
struct _str571 { constexpr static const char* value = "ONLY_WRITABLE"; };
struct _str572 { constexpr static const char* value = "ONLY_ENUMERABLE"; };
struct _str573 { constexpr static const char* value = "ONLY_CONFIGURABLE"; };
struct _str574 { constexpr static const char* value = "SKIP_STRINGS"; };
struct _str575 { constexpr static const char* value = "SKIP_SYMBOLS"; };
struct _str576 { constexpr static const char* value = "SideEffectType"; };
struct _str577 { constexpr static const char* value = "kHasSideEffect"; };
struct _str578 { constexpr static const char* value = "kHasNoSideEffect"; };
struct _str579 { constexpr static const char* value = "kHasSideEffectToReceiver"; };
struct _str580 { constexpr static const char* value = "KeyCollectionMode"; };
struct _str581 { constexpr static const char* value = "kOwnOnly"; };
struct _str582 { constexpr static const char* value = "kIncludePrototypes"; };
struct _str583 { constexpr static const char* value = "IndexFilter"; };
struct _str584 { constexpr static const char* value = "kIncludeIndices"; };
struct _str585 { constexpr static const char* value = "kSkipIndices"; };
struct _str586 { constexpr static const char* value = "KeyConversionMode"; };
struct _str587 { constexpr static const char* value = "kConvertToString"; };
struct _str588 { constexpr static const char* value = "kKeepNumbers"; };
struct _str589 { constexpr static const char* value = "IntegrityLevel"; };
struct _str590 { constexpr static const char* value = "kFrozen"; };
struct _str591 { constexpr static const char* value = "kSealed"; };
struct _str592 { constexpr static const char* value = "key"; };
struct _str593 { constexpr static const char* value = "CreateDataProperty"; };
struct _str594 { constexpr static const char* value = "DefineOwnProperty"; };
struct _str595 { constexpr static const char* value = "attributes"; };
struct _str596 { constexpr static const char* value = "DefineProperty"; };
struct _str597 { constexpr static const char* value = "descriptor"; };
struct _str598 { constexpr static const char* value = "GetPropertyAttributes"; };
struct _str599 { constexpr static const char* value = "GetOwnPropertyDescriptor"; };
struct _str600 { constexpr static const char* value = "Has"; };
struct _str601 { constexpr static const char* value = "Delete"; };
struct _str602 { constexpr static const char* value = "SetAccessor"; };
struct _str603 { constexpr static const char* value = "getter"; };
struct _str604 { constexpr static const char* value = "setter"; };
struct _str605 { constexpr static const char* value = "settings"; };
struct _str606 { constexpr static const char* value = "attribute"; };
struct _str607 { constexpr static const char* value = "getter_side_effect_type"; };
struct _str608 { constexpr static const char* value = "setter_side_effect_type"; };
struct _str609 { constexpr static const char* value = "SetAccessorProperty"; };
struct _str610 { constexpr static const char* value = "SetNativeDataProperty"; };
struct _str611 { constexpr static const char* value = "SetLazyDataProperty"; };
struct _str612 { constexpr static const char* value = "HasPrivate"; };
struct _str613 { constexpr static const char* value = "SetPrivate"; };
struct _str614 { constexpr static const char* value = "DeletePrivate"; };
struct _str615 { constexpr static const char* value = "GetPrivate"; };
struct _str616 { constexpr static const char* value = "GetPropertyNames"; };
struct _str617 { constexpr static const char* value = "property_filter"; };
struct _str618 { constexpr static const char* value = "index_filter"; };
struct _str619 { constexpr static const char* value = "key_conversion"; };
struct _str620 { constexpr static const char* value = "GetOwnPropertyNames"; };
struct _str621 { constexpr static const char* value = "filter"; };
struct _str622 { constexpr static const char* value = "GetPrototype"; };
struct _str623 { constexpr static const char* value = "SetPrototype"; };
struct _str624 { constexpr static const char* value = "prototype"; };
struct _str625 { constexpr static const char* value = "FindInstanceInPrototypeChain"; };
struct _str626 { constexpr static const char* value = "tmpl"; };
struct _str627 { constexpr static const char* value = "ObjectProtoToString"; };
struct _str628 { constexpr static const char* value = "GetConstructorName"; };
struct _str629 { constexpr static const char* value = "SetIntegrityLevel"; };
struct _str630 { constexpr static const char* value = "level"; };
struct _str631 { constexpr static const char* value = "InternalFieldCount"; };
struct _str632 { constexpr static const char* value = "SetInternalField"; };
struct _str633 { constexpr static const char* value = "GetAlignedPointerFromInternalField"; };
struct _str634 { constexpr static const char* value = "SetAlignedPointerInInternalField"; };
struct _str635 { constexpr static const char* value = "SetAlignedPointerInInternalFields"; };
struct _str636 { constexpr static const char* value = "argc"; };
struct _str637 { constexpr static const char* value = "indices"; };
struct _str638 { constexpr static const char* value = "values"; };
struct _str639 { constexpr static const char* value = "HasOwnProperty"; };
struct _str640 { constexpr static const char* value = "HasRealNamedProperty"; };
struct _str641 { constexpr static const char* value = "HasRealIndexedProperty"; };
struct _str642 { constexpr static const char* value = "HasRealNamedCallbackProperty"; };
struct _str643 { constexpr static const char* value = "GetRealNamedPropertyInPrototypeChain"; };
struct _str644 { constexpr static const char* value = "GetRealNamedPropertyAttributesInPrototypeChain"; };
struct _str645 { constexpr static const char* value = "GetRealNamedProperty"; };
struct _str646 { constexpr static const char* value = "GetRealNamedPropertyAttributes"; };
struct _str647 { constexpr static const char* value = "HasNamedLookupInterceptor"; };
struct _str648 { constexpr static const char* value = "HasIndexedLookupInterceptor"; };
struct _str649 { constexpr static const char* value = "Clone"; };
struct _str650 { constexpr static const char* value = "CreationContext"; };
struct _str651 { constexpr static const char* value = "IsCallable"; };
struct _str652 { constexpr static const char* value = "CallAsFunction"; };
struct _str653 { constexpr static const char* value = "recv"; };
struct _str654 { constexpr static const char* value = "argv"; };
struct _str655 { constexpr static const char* value = "CallAsConstructor"; };
struct _str656 { constexpr static const char* value = "PreviewEntries"; };
struct _str657 { constexpr static const char* value = "is_key_value"; };
struct _str658 { constexpr static const char* value = "prototype_or_null"; };
struct _str659 { constexpr static const char* value = "names"; };
struct _str660 { constexpr static const char* value = "elements"; };
struct _str661 { constexpr static const char* value = "Map"; };
struct _str662 { constexpr static const char* value = "Size"; };
struct _str663 { constexpr static const char* value = "AsArray"; };
struct _str664 { constexpr static const char* value = "Add"; };
struct _str665 { constexpr static const char* value = "ReturnValue<T>"; };
struct _str666 { constexpr static const char* value = "SetNull"; };
struct _str667 { constexpr static const char* value = "SetUndefined"; };
struct _str668 { constexpr static const char* value = "SetEmptyString"; };
struct _str669 { constexpr static const char* value = "whatever"; };
struct _str670 { constexpr static const char* value = "operator[]"; };
struct _str671 { constexpr static const char* value = "This"; };
struct _str672 { constexpr static const char* value = "Holder"; };
struct _str673 { constexpr static const char* value = "NewTarget"; };
struct _str674 { constexpr static const char* value = "IsConstructCall"; };
struct _str675 { constexpr static const char* value = "GetReturnValue"; };
struct _str676 { constexpr static const char* value = "kArgsLength"; };
struct _str677 { constexpr static const char* value = "kHolderIndex"; };
struct _str678 { constexpr static const char* value = "kIsolateIndex"; };
struct _str679 { constexpr static const char* value = "kReturnValueDefaultValueIndex"; };
struct _str680 { constexpr static const char* value = "kReturnValueIndex"; };
struct _str681 { constexpr static const char* value = "kDataIndex"; };
struct _str682 { constexpr static const char* value = "kNewTargetIndex"; };
struct _str683 { constexpr static const char* value = "implicit_args"; };
struct _str684 { constexpr static const char* value = "implicit_args_"; };
struct _str685 { constexpr static const char* value = "values_"; };
struct _str686 { constexpr static const char* value = "length_"; };
struct _str687 { constexpr static const char* value = "ShouldThrowOnError"; };
struct _str688 { constexpr static const char* value = "kShouldThrowOnErrorIndex"; };
struct _str689 { constexpr static const char* value = "kThisIndex"; };
struct _str690 { constexpr static const char* value = "args"; };
struct _str691 { constexpr static const char* value = "args_"; };
struct _str692 { constexpr static const char* value = "FunctionCallback"; };
struct _str693 { constexpr static const char* value = "ConstructorBehavior"; };
struct _str694 { constexpr static const char* value = "kThrow"; };
struct _str695 { constexpr static const char* value = "kAllow"; };
struct _str696 { constexpr static const char* value = "behavior"; };
struct _str697 { constexpr static const char* value = "side_effect_type"; };
struct _str698 { constexpr static const char* value = "NewInstance"; };
struct _str699 { constexpr static const char* value = "NewInstanceWithSideEffectType"; };
struct _str700 { constexpr static const char* value = "Call"; };
struct _str701 { constexpr static const char* value = "SetName"; };
struct _str702 { constexpr static const char* value = "GetName"; };
struct _str703 { constexpr static const char* value = "GetInferredName"; };
struct _str704 { constexpr static const char* value = "GetDebugName"; };
struct _str705 { constexpr static const char* value = "GetDisplayName"; };
struct _str706 { constexpr static const char* value = "GetScriptLineNumber"; };
struct _str707 { constexpr static const char* value = "GetScriptColumnNumber"; };
struct _str708 { constexpr static const char* value = "ScriptId"; };
struct _str709 { constexpr static const char* value = "GetBoundFunction"; };
struct _str710 { constexpr static const char* value = "kLineOffsetNotFound"; };
struct _str711 { constexpr static const char* value = "PromiseState"; };
struct _str712 { constexpr static const char* value = "kPending"; };
struct _str713 { constexpr static const char* value = "kFulfilled"; };
struct _str714 { constexpr static const char* value = "kRejected"; };
struct _str715 { constexpr static const char* value = "Resolver"; };
struct _str716 { constexpr static const char* value = "GetPromise"; };
struct _str717 { constexpr static const char* value = "Resolve"; };
struct _str718 { constexpr static const char* value = "Reject"; };
struct _str719 { constexpr static const char* value = "Catch"; };
struct _str720 { constexpr static const char* value = "handler"; };
struct _str721 { constexpr static const char* value = "Then"; };
struct _str722 { constexpr static const char* value = "on_fulfilled"; };
struct _str723 { constexpr static const char* value = "on_rejected"; };
struct _str724 { constexpr static const char* value = "HasHandler"; };
struct _str725 { constexpr static const char* value = "Result"; };
struct _str726 { constexpr static const char* value = "State"; };
struct _str727 { constexpr static const char* value = "MarkAsHandled"; };
struct _str728 { constexpr static const char* value = "kEmbedderFieldCount"; };
struct _str729 { constexpr static const char* value = "writable"; };
struct _str730 { constexpr static const char* value = "get"; };
struct _str731 { constexpr static const char* value = "set"; };
struct _str732 { constexpr static const char* value = "has_value"; };
struct _str733 { constexpr static const char* value = "has_get"; };
struct _str734 { constexpr static const char* value = "has_set"; };
struct _str735 { constexpr static const char* value = "set_enumerable"; };
struct _str736 { constexpr static const char* value = "enumerable"; };
struct _str737 { constexpr static const char* value = "has_enumerable"; };
struct _str738 { constexpr static const char* value = "set_configurable"; };
struct _str739 { constexpr static const char* value = "configurable"; };
struct _str740 { constexpr static const char* value = "has_configurable"; };
struct _str741 { constexpr static const char* value = "has_writable"; };
struct _str742 { constexpr static const char* value = "PrivateData"; };
struct _str743 { constexpr static const char* value = "get_private"; };
struct _str744 { constexpr static const char* value = "GetTarget"; };
struct _str745 { constexpr static const char* value = "GetHandler"; };
struct _str746 { constexpr static const char* value = "IsRevoked"; };
struct _str747 { constexpr static const char* value = "Revoke"; };
struct _str748 { constexpr static const char* value = "local_target"; };
struct _str749 { constexpr static const char* value = "local_handler"; };
struct _str750 { constexpr static const char* value = "MemorySpan"; };
struct _str751 { constexpr static const char* value = "OwnedBuffer"; };
struct _str752 { constexpr static const char* value = "CompiledWasmModule"; };
struct _str753 { constexpr static const char* value = "Serialize"; };
struct _str754 { constexpr static const char* value = "GetWireBytesRef"; };
struct _str755 { constexpr static const char* value = "TransferrableModule"; };
struct _str756 { constexpr static const char* value = "GetTransferrableModule"; };
struct _str757 { constexpr static const char* value = "FromTransferrableModule"; };
struct _str758 { constexpr static const char* value = "GetCompiledModule"; };
struct _str759 { constexpr static const char* value = "DeserializeOrCompile"; };
struct _str760 { constexpr static const char* value = "serialized_module"; };
struct _str761 { constexpr static const char* value = "wire_bytes"; };
struct _str762 { constexpr static const char* value = "WasmStreaming"; };
struct _str763 { constexpr static const char* value = "WasmStreamingImpl"; };
struct _str764 { constexpr static const char* value = "Client"; };
struct _str765 { constexpr static const char* value = "OnModuleCompiled"; };
struct _str766 { constexpr static const char* value = "compiled_module"; };
struct _str767 { constexpr static const char* value = "OnBytesReceived"; };
struct _str768 { constexpr static const char* value = "bytes"; };
struct _str769 { constexpr static const char* value = "Finish"; };
struct _str770 { constexpr static const char* value = "Abort"; };
struct _str771 { constexpr static const char* value = "exception"; };
struct _str772 { constexpr static const char* value = "SetCompiledModuleBytes"; };
struct _str773 { constexpr static const char* value = "SetClient"; };
struct _str774 { constexpr static const char* value = "client"; };
struct _str775 { constexpr static const char* value = "Unpack"; };
struct _str776 { constexpr static const char* value = "WasmModuleObjectBuilderStreaming"; };
struct _str777 { constexpr static const char* value = "ArrayBufferCreationMode"; };
struct _str778 { constexpr static const char* value = "kExternalized"; };
struct _str779 { constexpr static const char* value = "Allocator"; };
struct _str780 { constexpr static const char* value = "Allocate"; };
struct _str781 { constexpr static const char* value = "AllocateUninitialized"; };
struct _str782 { constexpr static const char* value = "Free"; };
struct _str783 { constexpr static const char* value = "AllocationMode"; };
struct _str784 { constexpr static const char* value = "kReservation"; };
struct _str785 { constexpr static const char* value = "NewDefaultAllocator"; };
struct _str786 { constexpr static const char* value = "Contents"; };
struct _str787 { constexpr static const char* value = "DeleterCallback"; };
struct _str788 { constexpr static const char* value = "AllocationBase"; };
struct _str789 { constexpr static const char* value = "AllocationLength"; };
struct _str790 { constexpr static const char* value = "ByteLength"; };
struct _str791 { constexpr static const char* value = "Deleter"; };
struct _str792 { constexpr static const char* value = "DeleterData"; };
struct _str793 { constexpr static const char* value = "byte_length"; };
struct _str794 { constexpr static const char* value = "IsDetachable"; };
struct _str795 { constexpr static const char* value = "IsNeuterable"; };
struct _str796 { constexpr static const char* value = "Detach"; };
struct _str797 { constexpr static const char* value = "Neuter"; };
struct _str798 { constexpr static const char* value = "Externalize"; };
struct _str799 { constexpr static const char* value = "GetContents"; };
struct _str800 { constexpr static const char* value = "kInternalFieldCount"; };
struct _str801 { constexpr static const char* value = "ArrayBufferView"; };
struct _str802 { constexpr static const char* value = "Buffer"; };
struct _str803 { constexpr static const char* value = "ByteOffset"; };
struct _str804 { constexpr static const char* value = "CopyContents"; };
struct _str805 { constexpr static const char* value = "HasBuffer"; };
struct _str806 { constexpr static const char* value = "TypedArray"; };
struct _str807 { constexpr static const char* value = "Uint8Array"; };
struct _str808 { constexpr static const char* value = "byte_offset"; };
struct _str809 { constexpr static const char* value = "Uint8ClampedArray"; };
struct _str810 { constexpr static const char* value = "Int8Array"; };
struct _str811 { constexpr static const char* value = "Uint16Array"; };
struct _str812 { constexpr static const char* value = "Int16Array"; };
struct _str813 { constexpr static const char* value = "Uint32Array"; };
struct _str814 { constexpr static const char* value = "Int32Array"; };
struct _str815 { constexpr static const char* value = "Float32Array"; };
struct _str816 { constexpr static const char* value = "Float64Array"; };
struct _str817 { constexpr static const char* value = "BigInt64Array"; };
struct _str818 { constexpr static const char* value = "BigUint64Array"; };
struct _str819 { constexpr static const char* value = "DataView"; };
struct _str820 { constexpr static const char* value = "time"; };
struct _str821 { constexpr static const char* value = "ValueOf"; };
struct _str822 { constexpr static const char* value = "RegExp"; };
struct _str823 { constexpr static const char* value = "kNone"; };
struct _str824 { constexpr static const char* value = "kGlobal"; };
struct _str825 { constexpr static const char* value = "kIgnoreCase"; };
struct _str826 { constexpr static const char* value = "kMultiline"; };
struct _str827 { constexpr static const char* value = "kSticky"; };
struct _str828 { constexpr static const char* value = "kUnicode"; };
struct _str829 { constexpr static const char* value = "kDotAll"; };
struct _str830 { constexpr static const char* value = "pattern"; };
struct _str831 { constexpr static const char* value = "GetSource"; };
struct _str832 { constexpr static const char* value = "GetFlags"; };
struct _str833 { constexpr static const char* value = "Intrinsic"; };
struct _str834 { constexpr static const char* value = "kArrayProto_entries"; };
struct _str835 { constexpr static const char* value = "kArrayProto_forEach"; };
struct _str836 { constexpr static const char* value = "kArrayProto_keys"; };
struct _str837 { constexpr static const char* value = "kArrayProto_values"; };
struct _str838 { constexpr static const char* value = "kErrorPrototype"; };
struct _str839 { constexpr static const char* value = "kIteratorPrototype"; };
struct _str840 { constexpr static const char* value = "Template"; };
struct _str841 { constexpr static const char* value = "signature"; };
struct _str842 { constexpr static const char* value = "SetIntrinsicDataProperty"; };
struct _str843 { constexpr static const char* value = "intrinsic"; };
struct _str844 { constexpr static const char* value = "GenericNamedPropertyGetterCallback"; };
struct _str845 { constexpr static const char* value = "GenericNamedPropertySetterCallback"; };
struct _str846 { constexpr static const char* value = "GenericNamedPropertyQueryCallback"; };
struct _str847 { constexpr static const char* value = "GenericNamedPropertyDeleterCallback"; };
struct _str848 { constexpr static const char* value = "GenericNamedPropertyEnumeratorCallback"; };
struct _str849 { constexpr static const char* value = "GenericNamedPropertyDefinerCallback"; };
struct _str850 { constexpr static const char* value = "GenericNamedPropertyDescriptorCallback"; };
struct _str851 { constexpr static const char* value = "IndexedPropertyGetterCallback"; };
struct _str852 { constexpr static const char* value = "IndexedPropertySetterCallback"; };
struct _str853 { constexpr static const char* value = "IndexedPropertyQueryCallback"; };
struct _str854 { constexpr static const char* value = "IndexedPropertyDeleterCallback"; };
struct _str855 { constexpr static const char* value = "IndexedPropertyEnumeratorCallback"; };
struct _str856 { constexpr static const char* value = "IndexedPropertyDefinerCallback"; };
struct _str857 { constexpr static const char* value = "IndexedPropertyDescriptorCallback"; };
struct _str858 { constexpr static const char* value = "AccessType"; };
struct _str859 { constexpr static const char* value = "ACCESS_GET"; };
struct _str860 { constexpr static const char* value = "ACCESS_SET"; };
struct _str861 { constexpr static const char* value = "ACCESS_HAS"; };
struct _str862 { constexpr static const char* value = "ACCESS_DELETE"; };
struct _str863 { constexpr static const char* value = "ACCESS_KEYS"; };
struct _str864 { constexpr static const char* value = "AccessCheckCallback"; };
struct _str865 { constexpr static const char* value = "FromSnapshot"; };
struct _str866 { constexpr static const char* value = "NewWithCache"; };
struct _str867 { constexpr static const char* value = "cache_property"; };
struct _str868 { constexpr static const char* value = "GetFunction"; };
struct _str869 { constexpr static const char* value = "NewRemoteInstance"; };
struct _str870 { constexpr static const char* value = "SetCallHandler"; };
struct _str871 { constexpr static const char* value = "SetLength"; };
struct _str872 { constexpr static const char* value = "InstanceTemplate"; };
struct _str873 { constexpr static const char* value = "Inherit"; };
struct _str874 { constexpr static const char* value = "parent"; };
struct _str875 { constexpr static const char* value = "PrototypeTemplate"; };
struct _str876 { constexpr static const char* value = "SetPrototypeProviderTemplate"; };
struct _str877 { constexpr static const char* value = "prototype_provider"; };
struct _str878 { constexpr static const char* value = "SetClassName"; };
struct _str879 { constexpr static const char* value = "SetAcceptAnyReceiver"; };
struct _str880 { constexpr static const char* value = "ReadOnlyPrototype"; };
struct _str881 { constexpr static const char* value = "RemovePrototype"; };
struct _str882 { constexpr static const char* value = "HasInstance"; };
struct _str883 { constexpr static const char* value = "PropertyHandlerFlags"; };
struct _str884 { constexpr static const char* value = "kAllCanRead"; };
struct _str885 { constexpr static const char* value = "kNonMasking"; };
struct _str886 { constexpr static const char* value = "kOnlyInterceptStrings"; };
struct _str887 { constexpr static const char* value = "NamedPropertyHandlerConfiguration"; };
struct _str888 { constexpr static const char* value = "query"; };
struct _str889 { constexpr static const char* value = "deleter"; };
struct _str890 { constexpr static const char* value = "enumerator"; };
struct _str891 { constexpr static const char* value = "definer"; };
struct _str892 { constexpr static const char* value = "IndexedPropertyHandlerConfiguration"; };
struct _str893 { constexpr static const char* value = "constructor"; };
struct _str894 { constexpr static const char* value = "SetHandler"; };
struct _str895 { constexpr static const char* value = "configuration"; };
struct _str896 { constexpr static const char* value = "SetIndexedPropertyHandler"; };
struct _str897 { constexpr static const char* value = "SetCallAsFunctionHandler"; };
struct _str898 { constexpr static const char* value = "MarkAsUndetectable"; };
struct _str899 { constexpr static const char* value = "SetAccessCheckCallback"; };
struct _str900 { constexpr static const char* value = "SetAccessCheckCallbackAndHandler"; };
struct _str901 { constexpr static const char* value = "named_handler"; };
struct _str902 { constexpr static const char* value = "indexed_handler"; };
struct _str903 { constexpr static const char* value = "SetInternalFieldCount"; };
struct _str904 { constexpr static const char* value = "IsImmutableProto"; };
struct _str905 { constexpr static const char* value = "SetImmutableProto"; };
struct _str906 { constexpr static const char* value = "receiver"; };
struct _str907 { constexpr static const char* value = "Extension"; };
struct _str908 { constexpr static const char* value = "dep_count"; };
struct _str909 { constexpr static const char* value = "deps"; };
struct _str910 { constexpr static const char* value = "source_length"; };
struct _str911 { constexpr static const char* value = "GetNativeFunctionTemplate"; };
struct _str912 { constexpr static const char* value = "dependency_count"; };
struct _str913 { constexpr static const char* value = "dependencies"; };
struct _str914 { constexpr static const char* value = "set_auto_enable"; };
struct _str915 { constexpr static const char* value = "auto_enable"; };
struct _str916 { constexpr static const char* value = "RegisterExtension"; };
struct _str917 { constexpr static const char* value = "Undefined"; };
struct _str918 { constexpr static const char* value = "Null"; };
struct _str919 { constexpr static const char* value = "True"; };
struct _str920 { constexpr static const char* value = "False"; };
struct _str921 { constexpr static const char* value = "ResourceConstraints"; };
struct _str922 { constexpr static const char* value = "ConfigureDefaultsFromHeapSize"; };
struct _str923 { constexpr static const char* value = "initial_heap_size_in_bytes"; };
struct _str924 { constexpr static const char* value = "maximum_heap_size_in_bytes"; };
struct _str925 { constexpr static const char* value = "ConfigureDefaults"; };
struct _str926 { constexpr static const char* value = "physical_memory"; };
struct _str927 { constexpr static const char* value = "virtual_memory_limit"; };
struct _str928 { constexpr static const char* value = "stack_limit"; };
struct _str929 { constexpr static const char* value = "set_stack_limit"; };
struct _str930 { constexpr static const char* value = "code_range_size_in_bytes"; };
struct _str931 { constexpr static const char* value = "set_code_range_size_in_bytes"; };
struct _str932 { constexpr static const char* value = "limit"; };
struct _str933 { constexpr static const char* value = "max_old_generation_size_in_bytes"; };
struct _str934 { constexpr static const char* value = "set_max_old_generation_size_in_bytes"; };
struct _str935 { constexpr static const char* value = "max_young_generation_size_in_bytes"; };
struct _str936 { constexpr static const char* value = "set_max_young_generation_size_in_bytes"; };
struct _str937 { constexpr static const char* value = "initial_old_generation_size_in_bytes"; };
struct _str938 { constexpr static const char* value = "set_initial_old_generation_size_in_bytes"; };
struct _str939 { constexpr static const char* value = "initial_size"; };
struct _str940 { constexpr static const char* value = "initial_young_generation_size_in_bytes"; };
struct _str941 { constexpr static const char* value = "set_initial_young_generation_size_in_bytes"; };
struct _str942 { constexpr static const char* value = "code_range_size"; };
struct _str943 { constexpr static const char* value = "set_code_range_size"; };
struct _str944 { constexpr static const char* value = "limit_in_mb"; };
struct _str945 { constexpr static const char* value = "max_semi_space_size_in_kb"; };
struct _str946 { constexpr static const char* value = "set_max_semi_space_size_in_kb"; };
struct _str947 { constexpr static const char* value = "limit_in_kb"; };
struct _str948 { constexpr static const char* value = "max_old_space_size"; };
struct _str949 { constexpr static const char* value = "set_max_old_space_size"; };
struct _str950 { constexpr static const char* value = "max_zone_pool_size"; };
struct _str951 { constexpr static const char* value = "set_max_zone_pool_size"; };
struct _str952 { constexpr static const char* value = "FatalErrorCallback"; };
struct _str953 { constexpr static const char* value = "OOMErrorCallback"; };
struct _str954 { constexpr static const char* value = "DcheckErrorCallback"; };
struct _str955 { constexpr static const char* value = "MessageCallback"; };
struct _str956 { constexpr static const char* value = "LogEventCallback"; };
struct _str957 { constexpr static const char* value = "Exception"; };
struct _str958 { constexpr static const char* value = "RangeError"; };
struct _str959 { constexpr static const char* value = "ReferenceError"; };
struct _str960 { constexpr static const char* value = "SyntaxError"; };
struct _str961 { constexpr static const char* value = "TypeError"; };
struct _str962 { constexpr static const char* value = "Error"; };
struct _str963 { constexpr static const char* value = "CreateMessage"; };
struct _str964 { constexpr static const char* value = "CounterLookupCallback"; };
struct _str965 { constexpr static const char* value = "CreateHistogramCallback"; };
struct _str966 { constexpr static const char* value = "AddHistogramSampleCallback"; };
struct _str967 { constexpr static const char* value = "BeforeCallEnteredCallback"; };
struct _str968 { constexpr static const char* value = "CallCompletedCallback"; };
struct _str969 { constexpr static const char* value = "HostImportModuleDynamicallyCallback"; };
struct _str970 { constexpr static const char* value = "HostInitializeImportMetaObjectCallback"; };
struct _str971 { constexpr static const char* value = "PrepareStackTraceCallback"; };
struct _str972 { constexpr static const char* value = "PromiseHookType"; };
struct _str973 { constexpr static const char* value = "kInit"; };
struct _str974 { constexpr static const char* value = "kResolve"; };
struct _str975 { constexpr static const char* value = "kBefore"; };
struct _str976 { constexpr static const char* value = "kAfter"; };
struct _str977 { constexpr static const char* value = "PromiseHook"; };
struct _str978 { constexpr static const char* value = "PromiseRejectEvent"; };
struct _str979 { constexpr static const char* value = "kPromiseRejectWithNoHandler"; };
struct _str980 { constexpr static const char* value = "kPromiseHandlerAddedAfterReject"; };
struct _str981 { constexpr static const char* value = "kPromiseRejectAfterResolved"; };
struct _str982 { constexpr static const char* value = "kPromiseResolveAfterResolved"; };
struct _str983 { constexpr static const char* value = "PromiseRejectMessage"; };
struct _str984 { constexpr static const char* value = "promise"; };
struct _str985 { constexpr static const char* value = "event"; };
struct _str986 { constexpr static const char* value = "GetEvent"; };
struct _str987 { constexpr static const char* value = "GetValue"; };
struct _str988 { constexpr static const char* value = "PromiseRejectCallback"; };
struct _str989 { constexpr static const char* value = "MicrotasksCompletedCallback"; };
struct _str990 { constexpr static const char* value = "MicrotasksCompletedCallbackWithData"; };
struct _str991 { constexpr static const char* value = "MicrotaskCallback"; };
struct _str992 { constexpr static const char* value = "MicrotasksPolicy"; };
struct _str993 { constexpr static const char* value = "kExplicit"; };
struct _str994 { constexpr static const char* value = "kScoped"; };
struct _str995 { constexpr static const char* value = "kAuto"; };
struct _str996 { constexpr static const char* value = "policy"; };
struct _str997 { constexpr static const char* value = "EnqueueMicrotask"; };
struct _str998 { constexpr static const char* value = "microtask"; };
struct _str999 { constexpr static const char* value = "AddMicrotasksCompletedCallback"; };
struct _str1000 { constexpr static const char* value = "RemoveMicrotasksCompletedCallback"; };
struct _str1001 { constexpr static const char* value = "PerformCheckpoint"; };
struct _str1002 { constexpr static const char* value = "IsRunningMicrotasks"; };
struct _str1003 { constexpr static const char* value = "GetMicrotasksScopeDepth"; };
struct _str1004 { constexpr static const char* value = "MicrotasksScope"; };
struct _str1005 { constexpr static const char* value = "Type"; };
struct _str1006 { constexpr static const char* value = "kRunMicrotasks"; };
struct _str1007 { constexpr static const char* value = "kDoNotRunMicrotasks"; };
struct _str1008 { constexpr static const char* value = "microtask_queue"; };
struct _str1009 { constexpr static const char* value = "GetCurrentDepth"; };
struct _str1010 { constexpr static const char* value = "FailedAccessCheckCallback"; };
struct _str1011 { constexpr static const char* value = "AllowCodeGenerationFromStringsCallback"; };
struct _str1012 { constexpr static const char* value = "ExtensionCallback"; };
struct _str1013 { constexpr static const char* value = "AllowWasmCodeGenerationCallback"; };
struct _str1014 { constexpr static const char* value = "ApiImplementationCallback"; };
struct _str1015 { constexpr static const char* value = "WasmStreamingCallback"; };
struct _str1016 { constexpr static const char* value = "WasmThreadsEnabledCallback"; };
struct _str1017 { constexpr static const char* value = "GCType"; };
struct _str1018 { constexpr static const char* value = "kGCTypeScavenge"; };
struct _str1019 { constexpr static const char* value = "kGCTypeMarkSweepCompact"; };
struct _str1020 { constexpr static const char* value = "kGCTypeIncrementalMarking"; };
struct _str1021 { constexpr static const char* value = "kGCTypeProcessWeakCallbacks"; };
struct _str1022 { constexpr static const char* value = "kGCTypeAll"; };
struct _str1023 { constexpr static const char* value = "GCCallbackFlags"; };
struct _str1024 { constexpr static const char* value = "kNoGCCallbackFlags"; };
struct _str1025 { constexpr static const char* value = "kGCCallbackFlagConstructRetainedObjectInfos"; };
struct _str1026 { constexpr static const char* value = "kGCCallbackFlagForced"; };
struct _str1027 { constexpr static const char* value = "kGCCallbackFlagSynchronousPhantomCallbackProcessing"; };
struct _str1028 { constexpr static const char* value = "kGCCallbackFlagCollectAllAvailableGarbage"; };
struct _str1029 { constexpr static const char* value = "kGCCallbackFlagCollectAllExternalMemory"; };
struct _str1030 { constexpr static const char* value = "kGCCallbackScheduleIdleGarbageCollection"; };
struct _str1031 { constexpr static const char* value = "GCCallback"; };
struct _str1032 { constexpr static const char* value = "InterruptCallback"; };
struct _str1033 { constexpr static const char* value = "NearHeapLimitCallback"; };
struct _str1034 { constexpr static const char* value = "HeapStatistics"; };
struct _str1035 { constexpr static const char* value = "total_heap_size"; };
struct _str1036 { constexpr static const char* value = "total_heap_size_executable"; };
struct _str1037 { constexpr static const char* value = "total_physical_size"; };
struct _str1038 { constexpr static const char* value = "total_available_size"; };
struct _str1039 { constexpr static const char* value = "used_heap_size"; };
struct _str1040 { constexpr static const char* value = "heap_size_limit"; };
struct _str1041 { constexpr static const char* value = "malloced_memory"; };
struct _str1042 { constexpr static const char* value = "external_memory"; };
struct _str1043 { constexpr static const char* value = "peak_malloced_memory"; };
struct _str1044 { constexpr static const char* value = "number_of_native_contexts"; };
struct _str1045 { constexpr static const char* value = "number_of_detached_contexts"; };
struct _str1046 { constexpr static const char* value = "does_zap_garbage"; };
struct _str1047 { constexpr static const char* value = "HeapSpaceStatistics"; };
struct _str1048 { constexpr static const char* value = "space_name"; };
struct _str1049 { constexpr static const char* value = "space_size"; };
struct _str1050 { constexpr static const char* value = "space_used_size"; };
struct _str1051 { constexpr static const char* value = "space_available_size"; };
struct _str1052 { constexpr static const char* value = "physical_space_size"; };
struct _str1053 { constexpr static const char* value = "HeapObjectStatistics"; };
struct _str1054 { constexpr static const char* value = "object_type"; };
struct _str1055 { constexpr static const char* value = "object_sub_type"; };
struct _str1056 { constexpr static const char* value = "object_count"; };
struct _str1057 { constexpr static const char* value = "object_size"; };
struct _str1058 { constexpr static const char* value = "HeapCodeStatistics"; };
struct _str1059 { constexpr static const char* value = "code_and_metadata_size"; };
struct _str1060 { constexpr static const char* value = "bytecode_and_metadata_size"; };
struct _str1061 { constexpr static const char* value = "external_script_source_size"; };
struct _str1062 { constexpr static const char* value = "JitCodeEvent"; };
struct _str1063 { constexpr static const char* value = "EventType"; };
struct _str1064 { constexpr static const char* value = "CODE_ADDED"; };
struct _str1065 { constexpr static const char* value = "CODE_MOVED"; };
struct _str1066 { constexpr static const char* value = "CODE_REMOVED"; };
struct _str1067 { constexpr static const char* value = "CODE_ADD_LINE_POS_INFO"; };
struct _str1068 { constexpr static const char* value = "CODE_START_LINE_INFO_RECORDING"; };
struct _str1069 { constexpr static const char* value = "CODE_END_LINE_INFO_RECORDING"; };
struct _str1070 { constexpr static const char* value = "PositionType"; };
struct _str1071 { constexpr static const char* value = "POSITION"; };
struct _str1072 { constexpr static const char* value = "STATEMENT_POSITION"; };
struct _str1073 { constexpr static const char* value = "CodeType"; };
struct _str1074 { constexpr static const char* value = "BYTE_CODE"; };
struct _str1075 { constexpr static const char* value = "JIT_CODE"; };
struct _str1076 { constexpr static const char* value = "code_type"; };
struct _str1077 { constexpr static const char* value = "code_start"; };
struct _str1078 { constexpr static const char* value = "code_len"; };
struct _str1079 { constexpr static const char* value = "script"; };
struct _str1080 { constexpr static const char* value = "user_data"; };
struct _str1081 { constexpr static const char* value = "name_t"; };
struct _str1082 { constexpr static const char* value = "len"; };
struct _str1083 { constexpr static const char* value = "line_info_t"; };
struct _str1084 { constexpr static const char* value = "offset"; };
struct _str1085 { constexpr static const char* value = "pos"; };
struct _str1086 { constexpr static const char* value = "position_type"; };
struct _str1087 { constexpr static const char* value = "line_info"; };
struct _str1088 { constexpr static const char* value = "new_code_start"; };
struct _str1089 { constexpr static const char* value = "RAILMode"; };
struct _str1090 { constexpr static const char* value = "PERFORMANCE_RESPONSE"; };
struct _str1091 { constexpr static const char* value = "PERFORMANCE_ANIMATION"; };
struct _str1092 { constexpr static const char* value = "PERFORMANCE_IDLE"; };
struct _str1093 { constexpr static const char* value = "PERFORMANCE_LOAD"; };
struct _str1094 { constexpr static const char* value = "JitCodeEventOptions"; };
struct _str1095 { constexpr static const char* value = "kJitCodeEventDefault"; };
struct _str1096 { constexpr static const char* value = "kJitCodeEventEnumExisting"; };
struct _str1097 { constexpr static const char* value = "JitCodeEventHandler"; };
struct _str1098 { constexpr static const char* value = "UnhandledExceptionCallback"; };
struct _str1099 { constexpr static const char* value = "ExternalResourceVisitor"; };
struct _str1100 { constexpr static const char* value = "VisitExternalString"; };
struct _str1101 { constexpr static const char* value = "string"; };
struct _str1102 { constexpr static const char* value = "PersistentHandleVisitor"; };
struct _str1103 { constexpr static const char* value = "VisitPersistentHandle"; };
struct _str1104 { constexpr static const char* value = "MemoryPressureLevel"; };
struct _str1105 { constexpr static const char* value = "kModerate"; };
struct _str1106 { constexpr static const char* value = "kCritical"; };
struct _str1107 { constexpr static const char* value = "EmbedderHeapTracer"; };
struct _str1108 { constexpr static const char* value = "TraceFlags"; };
struct _str1109 { constexpr static const char* value = "kNoFlags"; };
struct _str1110 { constexpr static const char* value = "kReduceMemory"; };
struct _str1111 { constexpr static const char* value = "EmbedderStackState"; };
struct _str1112 { constexpr static const char* value = "kUnknown"; };
struct _str1113 { constexpr static const char* value = "kNonEmpty"; };
struct _str1114 { constexpr static const char* value = "kEmpty"; };
struct _str1115 { constexpr static const char* value = "TracedGlobalHandleVisitor"; };
struct _str1116 { constexpr static const char* value = "VisitTracedGlobalHandle"; };
struct _str1117 { constexpr static const char* value = "TraceSummary"; };
struct _str1118 { constexpr static const char* value = "allocated_size"; };
struct _str1119 { constexpr static const char* value = "IterateTracedGlobalHandles"; };
struct _str1120 { constexpr static const char* value = "visitor"; };
struct _str1121 { constexpr static const char* value = "RegisterV8References"; };
struct _str1122 { constexpr static const char* value = "RegisterEmbedderReference"; };
struct _str1123 { constexpr static const char* value = "ref"; };
struct _str1124 { constexpr static const char* value = "TracePrologue"; };
struct _str1125 { constexpr static const char* value = "AdvanceTracing"; };
struct _str1126 { constexpr static const char* value = "deadline_in_ms"; };
struct _str1127 { constexpr static const char* value = "IsTracingDone"; };
struct _str1128 { constexpr static const char* value = "TraceEpilogue"; };
struct _str1129 { constexpr static const char* value = "trace_summary"; };
struct _str1130 { constexpr static const char* value = "EnterFinalPause"; };
struct _str1131 { constexpr static const char* value = "stack_state"; };
struct _str1132 { constexpr static const char* value = "FinalizeTracing"; };
struct _str1133 { constexpr static const char* value = "IsRootForNonTracingGC"; };
struct _str1134 { constexpr static const char* value = "GarbageCollectionForTesting"; };
struct _str1135 { constexpr static const char* value = "IncreaseAllocatedSize"; };
struct _str1136 { constexpr static const char* value = "DecreaseAllocatedSize"; };
struct _str1137 { constexpr static const char* value = "isolate_"; };
struct _str1138 { constexpr static const char* value = "SerializeInternalFieldsCallback"; };
struct _str1139 { constexpr static const char* value = "CallbackFunction"; };
struct _str1140 { constexpr static const char* value = "data_arg"; };
struct _str1141 { constexpr static const char* value = "SerializeEmbedderFieldsCallback"; };
struct _str1142 { constexpr static const char* value = "DeserializeInternalFieldsCallback"; };
struct _str1143 { constexpr static const char* value = "DeserializeEmbedderFieldsCallback"; };
struct _str1144 { constexpr static const char* value = "CreateParams"; };
struct _str1145 { constexpr static const char* value = "code_event_handler"; };
struct _str1146 { constexpr static const char* value = "constraints"; };
struct _str1147 { constexpr static const char* value = "snapshot_blob"; };
struct _str1148 { constexpr static const char* value = "counter_lookup_callback"; };
struct _str1149 { constexpr static const char* value = "create_histogram_callback"; };
struct _str1150 { constexpr static const char* value = "add_histogram_sample_callback"; };
struct _str1151 { constexpr static const char* value = "array_buffer_allocator"; };
struct _str1152 { constexpr static const char* value = "external_references"; };
struct _str1153 { constexpr static const char* value = "allow_atomics_wait"; };
struct _str1154 { constexpr static const char* value = "only_terminate_in_safe_scope"; };
struct _str1155 { constexpr static const char* value = "Scope"; };
struct _str1156 { constexpr static const char* value = "DisallowJavascriptExecutionScope"; };
struct _str1157 { constexpr static const char* value = "OnFailure"; };
struct _str1158 { constexpr static const char* value = "CRASH_ON_FAILURE"; };
struct _str1159 { constexpr static const char* value = "THROW_ON_FAILURE"; };
struct _str1160 { constexpr static const char* value = "DUMP_ON_FAILURE"; };
struct _str1161 { constexpr static const char* value = "on_failure"; };
struct _str1162 { constexpr static const char* value = "AllowJavascriptExecutionScope"; };
struct _str1163 { constexpr static const char* value = "SuppressMicrotaskExecutionScope"; };
struct _str1164 { constexpr static const char* value = "SafeForTerminationScope"; };
struct _str1165 { constexpr static const char* value = "GarbageCollectionType"; };
struct _str1166 { constexpr static const char* value = "kFullGarbageCollection"; };
struct _str1167 { constexpr static const char* value = "kMinorGarbageCollection"; };
struct _str1168 { constexpr static const char* value = "UseCounterFeature"; };
struct _str1169 { constexpr static const char* value = "kUseAsm"; };
struct _str1170 { constexpr static const char* value = "kBreakIterator"; };
struct _str1171 { constexpr static const char* value = "kLegacyConst"; };
struct _str1172 { constexpr static const char* value = "kMarkDequeOverflow"; };
struct _str1173 { constexpr static const char* value = "kStoreBufferOverflow"; };
struct _str1174 { constexpr static const char* value = "kSlotsBufferOverflow"; };
struct _str1175 { constexpr static const char* value = "kObjectObserve"; };
struct _str1176 { constexpr static const char* value = "kForcedGC"; };
struct _str1177 { constexpr static const char* value = "kSloppyMode"; };
struct _str1178 { constexpr static const char* value = "kStrictMode"; };
struct _str1179 { constexpr static const char* value = "kStrongMode"; };
struct _str1180 { constexpr static const char* value = "kRegExpPrototypeStickyGetter"; };
struct _str1181 { constexpr static const char* value = "kRegExpPrototypeToString"; };
struct _str1182 { constexpr static const char* value = "kRegExpPrototypeUnicodeGetter"; };
struct _str1183 { constexpr static const char* value = "kIntlV8Parse"; };
struct _str1184 { constexpr static const char* value = "kIntlPattern"; };
struct _str1185 { constexpr static const char* value = "kIntlResolved"; };
struct _str1186 { constexpr static const char* value = "kPromiseChain"; };
struct _str1187 { constexpr static const char* value = "kPromiseAccept"; };
struct _str1188 { constexpr static const char* value = "kPromiseDefer"; };
struct _str1189 { constexpr static const char* value = "kHtmlCommentInExternalScript"; };
struct _str1190 { constexpr static const char* value = "kHtmlComment"; };
struct _str1191 { constexpr static const char* value = "kSloppyModeBlockScopedFunctionRedefinition"; };
struct _str1192 { constexpr static const char* value = "kForInInitializer"; };
struct _str1193 { constexpr static const char* value = "kArrayProtectorDirtied"; };
struct _str1194 { constexpr static const char* value = "kArraySpeciesModified"; };
struct _str1195 { constexpr static const char* value = "kArrayPrototypeConstructorModified"; };
struct _str1196 { constexpr static const char* value = "kArrayInstanceProtoModified"; };
struct _str1197 { constexpr static const char* value = "kArrayInstanceConstructorModified"; };
struct _str1198 { constexpr static const char* value = "kLegacyFunctionDeclaration"; };
struct _str1199 { constexpr static const char* value = "kRegExpPrototypeSourceGetter"; };
struct _str1200 { constexpr static const char* value = "kRegExpPrototypeOldFlagGetter"; };
struct _str1201 { constexpr static const char* value = "kDecimalWithLeadingZeroInStrictMode"; };
struct _str1202 { constexpr static const char* value = "kLegacyDateParser"; };
struct _str1203 { constexpr static const char* value = "kDefineGetterOrSetterWouldThrow"; };
struct _str1204 { constexpr static const char* value = "kFunctionConstructorReturnedUndefined"; };
struct _str1205 { constexpr static const char* value = "kAssigmentExpressionLHSIsCallInSloppy"; };
struct _str1206 { constexpr static const char* value = "kAssigmentExpressionLHSIsCallInStrict"; };
struct _str1207 { constexpr static const char* value = "kPromiseConstructorReturnedUndefined"; };
struct _str1208 { constexpr static const char* value = "kConstructorNonUndefinedPrimitiveReturn"; };
struct _str1209 { constexpr static const char* value = "kLabeledExpressionStatement"; };
struct _str1210 { constexpr static const char* value = "kLineOrParagraphSeparatorAsLineTerminator"; };
struct _str1211 { constexpr static const char* value = "kIndexAccessor"; };
struct _str1212 { constexpr static const char* value = "kErrorCaptureStackTrace"; };
struct _str1213 { constexpr static const char* value = "kErrorPrepareStackTrace"; };
struct _str1214 { constexpr static const char* value = "kErrorStackTraceLimit"; };
struct _str1215 { constexpr static const char* value = "kWebAssemblyInstantiation"; };
struct _str1216 { constexpr static const char* value = "kDeoptimizerDisableSpeculation"; };
struct _str1217 { constexpr static const char* value = "kArrayPrototypeSortJSArrayModifiedPrototype"; };
struct _str1218 { constexpr static const char* value = "kFunctionTokenOffsetTooLongForToString"; };
struct _str1219 { constexpr static const char* value = "kWasmSharedMemory"; };
struct _str1220 { constexpr static const char* value = "kWasmThreadOpcodes"; };
struct _str1221 { constexpr static const char* value = "kAtomicsNotify"; };
struct _str1222 { constexpr static const char* value = "kAtomicsWake"; };
struct _str1223 { constexpr static const char* value = "kCollator"; };
struct _str1224 { constexpr static const char* value = "kNumberFormat"; };
struct _str1225 { constexpr static const char* value = "kDateTimeFormat"; };
struct _str1226 { constexpr static const char* value = "kPluralRules"; };
struct _str1227 { constexpr static const char* value = "kRelativeTimeFormat"; };
struct _str1228 { constexpr static const char* value = "kLocale"; };
struct _str1229 { constexpr static const char* value = "kListFormat"; };
struct _str1230 { constexpr static const char* value = "kSegmenter"; };
struct _str1231 { constexpr static const char* value = "kStringLocaleCompare"; };
struct _str1232 { constexpr static const char* value = "kStringToLocaleUpperCase"; };
struct _str1233 { constexpr static const char* value = "kStringToLocaleLowerCase"; };
struct _str1234 { constexpr static const char* value = "kNumberToLocaleString"; };
struct _str1235 { constexpr static const char* value = "kDateToLocaleString"; };
struct _str1236 { constexpr static const char* value = "kDateToLocaleDateString"; };
struct _str1237 { constexpr static const char* value = "kDateToLocaleTimeString"; };
struct _str1238 { constexpr static const char* value = "kAttemptOverrideReadOnlyOnPrototypeSloppy"; };
struct _str1239 { constexpr static const char* value = "kAttemptOverrideReadOnlyOnPrototypeStrict"; };
struct _str1240 { constexpr static const char* value = "kOptimizedFunctionWithOneShotBytecode"; };
struct _str1241 { constexpr static const char* value = "kRegExpMatchIsTrueishOnNonJSRegExp"; };
struct _str1242 { constexpr static const char* value = "kRegExpMatchIsFalseishOnJSRegExp"; };
struct _str1243 { constexpr static const char* value = "kDateGetTimezoneOffset"; };
struct _str1244 { constexpr static const char* value = "kStringNormalize"; };
struct _str1245 { constexpr static const char* value = "kUseCounterFeatureCount"; };
struct _str1246 { constexpr static const char* value = "MessageErrorLevel"; };
struct _str1247 { constexpr static const char* value = "kMessageLog"; };
struct _str1248 { constexpr static const char* value = "kMessageDebug"; };
struct _str1249 { constexpr static const char* value = "kMessageInfo"; };
struct _str1250 { constexpr static const char* value = "kMessageError"; };
struct _str1251 { constexpr static const char* value = "kMessageWarning"; };
struct _str1252 { constexpr static const char* value = "kMessageAll"; };
struct _str1253 { constexpr static const char* value = "UseCounterCallback"; };
struct _str1254 { constexpr static const char* value = "params"; };
struct _str1255 { constexpr static const char* value = "GetCurrent"; };
struct _str1256 { constexpr static const char* value = "AbortOnUncaughtExceptionCallback"; };
struct _str1257 { constexpr static const char* value = "SetAbortOnUncaughtExceptionCallback"; };
struct _str1258 { constexpr static const char* value = "SetHostImportModuleDynamicallyCallback"; };
struct _str1259 { constexpr static const char* value = "SetHostInitializeImportMetaObjectCallback"; };
struct _str1260 { constexpr static const char* value = "SetPrepareStackTraceCallback"; };
struct _str1261 { constexpr static const char* value = "MemoryPressureNotification"; };
struct _str1262 { constexpr static const char* value = "Enter"; };
struct _str1263 { constexpr static const char* value = "Exit"; };
struct _str1264 { constexpr static const char* value = "DumpAndResetStats"; };
struct _str1265 { constexpr static const char* value = "DiscardThreadSpecificMetadata"; };
struct _str1266 { constexpr static const char* value = "SetData"; };
struct _str1267 { constexpr static const char* value = "slot"; };
struct _str1268 { constexpr static const char* value = "GetData"; };
struct _str1269 { constexpr static const char* value = "GetNumberOfDataSlots"; };
struct _str1270 { constexpr static const char* value = "GetDataFromSnapshotOnce"; };
struct _str1271 { constexpr static const char* value = "GetHeapStatistics"; };
struct _str1272 { constexpr static const char* value = "heap_statistics"; };
struct _str1273 { constexpr static const char* value = "NumberOfHeapSpaces"; };
struct _str1274 { constexpr static const char* value = "GetHeapSpaceStatistics"; };
struct _str1275 { constexpr static const char* value = "space_statistics"; };
struct _str1276 { constexpr static const char* value = "NumberOfTrackedHeapObjectTypes"; };
struct _str1277 { constexpr static const char* value = "GetHeapObjectStatisticsAtLastGC"; };
struct _str1278 { constexpr static const char* value = "object_statistics"; };
struct _str1279 { constexpr static const char* value = "type_index"; };
struct _str1280 { constexpr static const char* value = "GetHeapCodeAndMetadataStatistics"; };
struct _str1281 { constexpr static const char* value = "GetStackSample"; };
struct _str1282 { constexpr static const char* value = "state"; };
struct _str1283 { constexpr static const char* value = "frames"; };
struct _str1284 { constexpr static const char* value = "frames_limit"; };
struct _str1285 { constexpr static const char* value = "sample_info"; };
struct _str1286 { constexpr static const char* value = "AdjustAmountOfExternalAllocatedMemory"; };
struct _str1287 { constexpr static const char* value = "change_in_bytes"; };
struct _str1288 { constexpr static const char* value = "NumberOfPhantomHandleResetsSinceLastCall"; };
struct _str1289 { constexpr static const char* value = "GetHeapProfiler"; };
struct _str1290 { constexpr static const char* value = "SetIdle"; };
struct _str1291 { constexpr static const char* value = "is_idle"; };
struct _str1292 { constexpr static const char* value = "GetArrayBufferAllocator"; };
struct _str1293 { constexpr static const char* value = "InContext"; };
struct _str1294 { constexpr static const char* value = "GetCurrentContext"; };
struct _str1295 { constexpr static const char* value = "GetEnteredContext"; };
struct _str1296 { constexpr static const char* value = "GetEnteredOrMicrotaskContext"; };
struct _str1297 { constexpr static const char* value = "GetIncumbentContext"; };
struct _str1298 { constexpr static const char* value = "ThrowException"; };
struct _str1299 { constexpr static const char* value = "GCCallbackWithData"; };
struct _str1300 { constexpr static const char* value = "AddGCPrologueCallback"; };
struct _str1301 { constexpr static const char* value = "gc_type_filter"; };
struct _str1302 { constexpr static const char* value = "RemoveGCPrologueCallback"; };
struct _str1303 { constexpr static const char* value = "SetEmbedderHeapTracer"; };
struct _str1304 { constexpr static const char* value = "tracer"; };
struct _str1305 { constexpr static const char* value = "GetEmbedderHeapTracer"; };
struct _str1306 { constexpr static const char* value = "AtomicsWaitEvent"; };
struct _str1307 { constexpr static const char* value = "kStartWait"; };
struct _str1308 { constexpr static const char* value = "kWokenUp"; };
struct _str1309 { constexpr static const char* value = "kTimedOut"; };
struct _str1310 { constexpr static const char* value = "kTerminatedExecution"; };
struct _str1311 { constexpr static const char* value = "kAPIStopped"; };
struct _str1312 { constexpr static const char* value = "kNotEqual"; };
struct _str1313 { constexpr static const char* value = "AtomicsWaitWakeHandle"; };
struct _str1314 { constexpr static const char* value = "Wake"; };
struct _str1315 { constexpr static const char* value = "AtomicsWaitCallback"; };
struct _str1316 { constexpr static const char* value = "SetAtomicsWaitCallback"; };
struct _str1317 { constexpr static const char* value = "AddGCEpilogueCallback"; };
struct _str1318 { constexpr static const char* value = "RemoveGCEpilogueCallback"; };
struct _str1319 { constexpr static const char* value = "GetExternallyAllocatedMemoryInBytesCallback"; };
struct _str1320 { constexpr static const char* value = "SetGetExternallyAllocatedMemoryInBytesCallback"; };
struct _str1321 { constexpr static const char* value = "TerminateExecution"; };
struct _str1322 { constexpr static const char* value = "IsExecutionTerminating"; };
struct _str1323 { constexpr static const char* value = "CancelTerminateExecution"; };
struct _str1324 { constexpr static const char* value = "RequestInterrupt"; };
struct _str1325 { constexpr static const char* value = "RequestGarbageCollectionForTesting"; };
struct _str1326 { constexpr static const char* value = "SetEventLogger"; };
struct _str1327 { constexpr static const char* value = "AddBeforeCallEnteredCallback"; };
struct _str1328 { constexpr static const char* value = "RemoveBeforeCallEnteredCallback"; };
struct _str1329 { constexpr static const char* value = "AddCallCompletedCallback"; };
struct _str1330 { constexpr static const char* value = "RemoveCallCompletedCallback"; };
struct _str1331 { constexpr static const char* value = "SetPromiseHook"; };
struct _str1332 { constexpr static const char* value = "hook"; };
struct _str1333 { constexpr static const char* value = "SetPromiseRejectCallback"; };
struct _str1334 { constexpr static const char* value = "RunMicrotasks"; };
struct _str1335 { constexpr static const char* value = "SetMicrotasksPolicy"; };
struct _str1336 { constexpr static const char* value = "GetMicrotasksPolicy"; };
struct _str1337 { constexpr static const char* value = "SetUseCounterCallback"; };
struct _str1338 { constexpr static const char* value = "SetCounterFunction"; };
struct _str1339 { constexpr static const char* value = "SetCreateHistogramFunction"; };
struct _str1340 { constexpr static const char* value = "SetAddHistogramSampleFunction"; };
struct _str1341 { constexpr static const char* value = "IdleNotificationDeadline"; };
struct _str1342 { constexpr static const char* value = "deadline_in_seconds"; };
struct _str1343 { constexpr static const char* value = "LowMemoryNotification"; };
struct _str1344 { constexpr static const char* value = "ContextDisposedNotification"; };
struct _str1345 { constexpr static const char* value = "dependant_context"; };
struct _str1346 { constexpr static const char* value = "IsolateInForegroundNotification"; };
struct _str1347 { constexpr static const char* value = "IsolateInBackgroundNotification"; };
struct _str1348 { constexpr static const char* value = "EnableMemorySavingsMode"; };
struct _str1349 { constexpr static const char* value = "DisableMemorySavingsMode"; };
struct _str1350 { constexpr static const char* value = "SetRAILMode"; };
struct _str1351 { constexpr static const char* value = "rail_mode"; };
struct _str1352 { constexpr static const char* value = "IncreaseHeapLimitForDebugging"; };
struct _str1353 { constexpr static const char* value = "RestoreOriginalHeapLimit"; };
struct _str1354 { constexpr static const char* value = "IsHeapLimitIncreasedForDebugging"; };
struct _str1355 { constexpr static const char* value = "SetJitCodeEventHandler"; };
struct _str1356 { constexpr static const char* value = "event_handler"; };
struct _str1357 { constexpr static const char* value = "SetStackLimit"; };
struct _str1358 { constexpr static const char* value = "GetCodeRange"; };
struct _str1359 { constexpr static const char* value = "GetUnwindState"; };
struct _str1360 { constexpr static const char* value = "SetFatalErrorHandler"; };
struct _str1361 { constexpr static const char* value = "SetOOMErrorHandler"; };
struct _str1362 { constexpr static const char* value = "AddNearHeapLimitCallback"; };
struct _str1363 { constexpr static const char* value = "RemoveNearHeapLimitCallback"; };
struct _str1364 { constexpr static const char* value = "heap_limit"; };
struct _str1365 { constexpr static const char* value = "AutomaticallyRestoreInitialHeapLimit"; };
struct _str1366 { constexpr static const char* value = "threshold_percent"; };
struct _str1367 { constexpr static const char* value = "SetAllowCodeGenerationFromStringsCallback"; };
struct _str1368 { constexpr static const char* value = "SetAllowWasmCodeGenerationCallback"; };
struct _str1369 { constexpr static const char* value = "SetWasmModuleCallback"; };
struct _str1370 { constexpr static const char* value = "SetWasmInstanceCallback"; };
struct _str1371 { constexpr static const char* value = "SetWasmStreamingCallback"; };
struct _str1372 { constexpr static const char* value = "SetWasmThreadsEnabledCallback"; };
struct _str1373 { constexpr static const char* value = "IsDead"; };
struct _str1374 { constexpr static const char* value = "AddMessageListener"; };
struct _str1375 { constexpr static const char* value = "AddMessageListenerWithErrorLevel"; };
struct _str1376 { constexpr static const char* value = "message_levels"; };
struct _str1377 { constexpr static const char* value = "RemoveMessageListeners"; };
struct _str1378 { constexpr static const char* value = "SetFailedAccessCheckCallbackFunction"; };
struct _str1379 { constexpr static const char* value = "SetCaptureStackTraceForUncaughtExceptions"; };
struct _str1380 { constexpr static const char* value = "capture"; };
struct _str1381 { constexpr static const char* value = "VisitExternalResources"; };
struct _str1382 { constexpr static const char* value = "VisitHandlesWithClassIds"; };
struct _str1383 { constexpr static const char* value = "VisitWeakHandles"; };
struct _str1384 { constexpr static const char* value = "IsInUse"; };
struct _str1385 { constexpr static const char* value = "SetAllowAtomicsWait"; };
struct _str1386 { constexpr static const char* value = "allow"; };
struct _str1387 { constexpr static const char* value = "TimeZoneDetection"; };
struct _str1388 { constexpr static const char* value = "kSkip"; };
struct _str1389 { constexpr static const char* value = "kRedetect"; };
struct _str1390 { constexpr static const char* value = "DateTimeConfigurationChangeNotification"; };
struct _str1391 { constexpr static const char* value = "time_zone_detection"; };
struct _str1392 { constexpr static const char* value = "LocaleConfigurationChangeNotification"; };
struct _str1393 { constexpr static const char* value = "operator new"; };
struct _str1394 { constexpr static const char* value = "operator new[]"; };
struct _str1395 { constexpr static const char* value = "operator delete"; };
struct _str1396 { constexpr static const char* value = "operator delete[]"; };
struct _str1397 { constexpr static const char* value = "CanBeRehashed"; };
struct _str1398 { constexpr static const char* value = "raw_size"; };
struct _str1399 { constexpr static const char* value = "EntropySource"; };
struct _str1400 { constexpr static const char* value = "ReturnAddressLocationResolver"; };
struct _str1401 { constexpr static const char* value = "V8"; };
struct _str1402 { constexpr static const char* value = "SetNativesDataBlob"; };
struct _str1403 { constexpr static const char* value = "startup_blob"; };
struct _str1404 { constexpr static const char* value = "SetSnapshotDataBlob"; };
struct _str1405 { constexpr static const char* value = "SetDcheckErrorHandler"; };
struct _str1406 { constexpr static const char* value = "SetFlagsFromString"; };
struct _str1407 { constexpr static const char* value = "SetFlagsFromCommandLine"; };
struct _str1408 { constexpr static const char* value = "remove_flags"; };
struct _str1409 { constexpr static const char* value = "GetVersion"; };
struct _str1410 { constexpr static const char* value = "SetEntropySource"; };
struct _str1411 { constexpr static const char* value = "SetReturnAddressLocationResolver"; };
struct _str1412 { constexpr static const char* value = "return_address_resolver"; };
struct _str1413 { constexpr static const char* value = "InitializeICU"; };
struct _str1414 { constexpr static const char* value = "icu_data_file"; };
struct _str1415 { constexpr static const char* value = "InitializeICUDefaultLocation"; };
struct _str1416 { constexpr static const char* value = "exec_path"; };
struct _str1417 { constexpr static const char* value = "InitializeExternalStartupData"; };
struct _str1418 { constexpr static const char* value = "directory_path"; };
struct _str1419 { constexpr static const char* value = "natives_blob"; };
struct _str1420 { constexpr static const char* value = "InitializePlatform"; };
struct _str1421 { constexpr static const char* value = "platform"; };
struct _str1422 { constexpr static const char* value = "ShutdownPlatform"; };
struct _str1423 { constexpr static const char* value = "EnableWebAssemblyTrapHandler"; };
struct _str1424 { constexpr static const char* value = "use_v8_signal_handler"; };
struct _str1425 { constexpr static const char* value = "SetUnhandledExceptionCallback"; };
struct _str1426 { constexpr static const char* value = "unhandled_exception_callback"; };
struct _str1427 { constexpr static const char* value = "SnapshotCreator"; };
struct _str1428 { constexpr static const char* value = "FunctionCodeHandling"; };
struct _str1429 { constexpr static const char* value = "kClear"; };
struct _str1430 { constexpr static const char* value = "kKeep"; };
struct _str1431 { constexpr static const char* value = "existing_blob"; };
struct _str1432 { constexpr static const char* value = "SetDefaultContext"; };
struct _str1433 { constexpr static const char* value = "AddContext"; };
struct _str1434 { constexpr static const char* value = "AddTemplate"; };
struct _str1435 { constexpr static const char* value = "template_obj"; };
struct _str1436 { constexpr static const char* value = "AddData"; };
struct _str1437 { constexpr static const char* value = "CreateBlob"; };
struct _str1438 { constexpr static const char* value = "function_code_handling"; };
struct _str1439 { constexpr static const char* value = "IsNothing"; };
struct _str1440 { constexpr static const char* value = "IsJust"; };
struct _str1441 { constexpr static const char* value = "ToChecked"; };
struct _str1442 { constexpr static const char* value = "Check"; };
struct _str1443 { constexpr static const char* value = "To"; };
struct _str1444 { constexpr static const char* value = "FromJust"; };
struct _str1445 { constexpr static const char* value = "Nothing"; };
struct _str1446 { constexpr static const char* value = "Just"; };
struct _str1447 { constexpr static const char* value = "t"; };
struct _str1448 { constexpr static const char* value = "JustVoid"; };
struct _str1449 { constexpr static const char* value = "TryCatch"; };
struct _str1450 { constexpr static const char* value = "HasCaught"; };
struct _str1451 { constexpr static const char* value = "CanContinue"; };
struct _str1452 { constexpr static const char* value = "HasTerminated"; };
struct _str1453 { constexpr static const char* value = "ReThrow"; };
struct _str1454 { constexpr static const char* value = "SetVerbose"; };
struct _str1455 { constexpr static const char* value = "IsVerbose"; };
struct _str1456 { constexpr static const char* value = "SetCaptureMessage"; };
struct _str1457 { constexpr static const char* value = "JSStackComparableAddress"; };
struct _str1458 { constexpr static const char* value = "ExtensionConfiguration"; };
struct _str1459 { constexpr static const char* value = "name_count"; };
struct _str1460 { constexpr static const char* value = "begin"; };
struct _str1461 { constexpr static const char* value = "end"; };
struct _str1462 { constexpr static const char* value = "DetachGlobal"; };
struct _str1463 { constexpr static const char* value = "extensions"; };
struct _str1464 { constexpr static const char* value = "global_template"; };
struct _str1465 { constexpr static const char* value = "global_object"; };
struct _str1466 { constexpr static const char* value = "internal_fields_deserializer"; };
struct _str1467 { constexpr static const char* value = "context_snapshot_index"; };
struct _str1468 { constexpr static const char* value = "embedder_fields_deserializer"; };
struct _str1469 { constexpr static const char* value = "NewRemoteContext"; };
struct _str1470 { constexpr static const char* value = "SetSecurityToken"; };
struct _str1471 { constexpr static const char* value = "token"; };
struct _str1472 { constexpr static const char* value = "UseDefaultSecurityToken"; };
struct _str1473 { constexpr static const char* value = "GetSecurityToken"; };
struct _str1474 { constexpr static const char* value = "EmbedderDataFields"; };
struct _str1475 { constexpr static const char* value = "kDebugIdIndex"; };
struct _str1476 { constexpr static const char* value = "GetNumberOfEmbedderDataFields"; };
struct _str1477 { constexpr static const char* value = "GetEmbedderData"; };
struct _str1478 { constexpr static const char* value = "GetExtrasBindingObject"; };
struct _str1479 { constexpr static const char* value = "SetEmbedderData"; };
struct _str1480 { constexpr static const char* value = "GetAlignedPointerFromEmbedderData"; };
struct _str1481 { constexpr static const char* value = "SetAlignedPointerInEmbedderData"; };
struct _str1482 { constexpr static const char* value = "AllowCodeGenerationFromStrings"; };
struct _str1483 { constexpr static const char* value = "IsCodeGenerationFromStringsAllowed"; };
struct _str1484 { constexpr static const char* value = "SetErrorMessageForCodeGenerationFromStrings"; };
struct _str1485 { constexpr static const char* value = "AbortScriptExecutionCallback"; };
struct _str1486 { constexpr static const char* value = "SetAbortScriptExecution"; };
struct _str1487 { constexpr static const char* value = "BackupIncumbentScope"; };
struct _str1488 { constexpr static const char* value = "backup_incumbent_context"; };
struct _str1489 { constexpr static const char* value = "Unlocker"; };
struct _str1490 { constexpr static const char* value = "Locker"; };
struct _str1491 { constexpr static const char* value = "IsLocked"; };
struct _str1492 { constexpr static const char* value = "IsActive"; };
struct _str1493 { constexpr static const char* value = "Unwinder"; };
struct _str1494 { constexpr static const char* value = "TryUnwindV8Frames"; };
struct _str1495 { constexpr static const char* value = "unwind_state"; };
struct _str1496 { constexpr static const char* value = "register_state"; };
struct _str1497 { constexpr static const char* value = "stack_base"; };
struct _str1498 { constexpr static const char* value = "PCIsInV8"; };
struct _ast1; // Namespace v8
struct _ast2; // CXXRecord Context
struct _ast3; // Record v8::Context
struct _ast4; // CXXRecord Data
struct _ast5; // Record v8::Data
struct _ast6; // CXXRecord Isolate
struct _ast7; // Record v8::Isolate
struct _ast8; // CXXRecord AccessorSignature
struct _ast9; // Record v8::AccessorSignature
struct _ast10; // CXXRecord Array
struct _ast11; // Record v8::Array
struct _ast12; // CXXRecord ArrayBuffer
struct _ast13; // Record v8::ArrayBuffer
struct _ast14; // CXXRecord BigInt
struct _ast15; // Record v8::BigInt
struct _ast16; // CXXRecord BigIntObject
struct _ast17; // Record v8::BigIntObject
struct _ast18; // CXXRecord Boolean
struct _ast19; // Record v8::Boolean
struct _ast20; // CXXRecord BooleanObject
struct _ast21; // Record v8::BooleanObject
struct _ast22; // CXXRecord Date
struct _ast23; // Record v8::Date
struct _ast24; // CXXRecord External
struct _ast25; // Record v8::External
struct _ast26; // CXXRecord Function
struct _ast27; // Record v8::Function
struct _ast28; // CXXRecord FunctionTemplate
struct _ast29; // Record v8::FunctionTemplate
struct _ast30; // CXXRecord HeapProfiler
struct _ast31; // Record v8::HeapProfiler
struct _ast32; // CXXRecord ImplementationUtilities
struct _ast33; // Record v8::ImplementationUtilities
struct _ast34; // CXXRecord Int32
struct _ast35; // Record v8::Int32
struct _ast36; // CXXRecord Integer
struct _ast37; // Record v8::Integer
struct _ast38; // ClassTemplate Maybe
struct _ast39; // TemplateTypeParm T
struct _ast40; // TemplateTypeParm T
struct _ast41; // CXXRecord Maybe
struct _ast42; // InjectedClassName Maybe<T>
struct _ast43; // ClassTemplateSpecialization Maybe
struct _ast44; // Record v8::Maybe<bool>
struct _ast45; // ClassTemplateSpecialization Maybe
struct _ast46; // Record v8::Maybe<int>
struct _ast47; // ClassTemplateSpecialization Maybe
struct _ast48; // Record v8::Maybe<unsigned int>
struct _ast49; // ClassTemplateSpecialization Maybe
struct _ast50; // Record v8::Maybe<double>
struct _ast51; // ClassTemplateSpecialization Maybe
struct _ast52; // Record v8::Maybe<long long>
struct _ast53; // ClassTemplateSpecialization Maybe
struct _ast54; // Record v8::Maybe<v8::PropertyAttribute>
struct _ast55; // CXXRecord MicrotaskQueue
struct _ast56; // Record v8::MicrotaskQueue
struct _ast57; // CXXRecord Name
struct _ast58; // Record v8::Name
struct _ast59; // CXXRecord Number
struct _ast60; // Record v8::Number
struct _ast61; // CXXRecord NumberObject
struct _ast62; // Record v8::NumberObject
struct _ast63; // CXXRecord Object
struct _ast64; // Record v8::Object
struct _ast65; // CXXRecord ObjectOperationDescriptor
struct _ast66; // Record v8::ObjectOperationDescriptor
struct _ast67; // CXXRecord ObjectTemplate
struct _ast68; // Record v8::ObjectTemplate
struct _ast69; // CXXRecord Platform
struct _ast70; // Record v8::Platform
struct _ast71; // CXXRecord Primitive
struct _ast72; // Record v8::Primitive
struct _ast73; // CXXRecord Promise
struct _ast74; // Record v8::Promise
struct _ast75; // CXXRecord PropertyDescriptor
struct _ast76; // Record v8::PropertyDescriptor
struct _ast77; // CXXRecord Proxy
struct _ast78; // Record v8::Proxy
struct _ast79; // CXXRecord RawOperationDescriptor
struct _ast80; // Record v8::RawOperationDescriptor
struct _ast81; // CXXRecord Script
struct _ast82; // Record v8::Script
struct _ast83; // CXXRecord SharedArrayBuffer
struct _ast84; // Record v8::SharedArrayBuffer
struct _ast85; // CXXRecord Signature
struct _ast86; // Record v8::Signature
struct _ast87; // CXXRecord StartupData
struct _ast88; // Record v8::StartupData
struct _ast89; // CXXRecord StackFrame
struct _ast90; // Record v8::StackFrame
struct _ast91; // CXXRecord StackTrace
struct _ast92; // Record v8::StackTrace
struct _ast93; // CXXRecord String
struct _ast94; // Record v8::String
struct _ast95; // CXXRecord StringObject
struct _ast96; // Record v8::StringObject
struct _ast97; // CXXRecord Symbol
struct _ast98; // Record v8::Symbol
struct _ast99; // CXXRecord SymbolObject
struct _ast100; // Record v8::SymbolObject
struct _ast101; // CXXRecord PrimitiveArray
struct _ast102; // Record v8::PrimitiveArray
struct _ast103; // CXXRecord Private
struct _ast104; // Record v8::Private
struct _ast105; // CXXRecord Uint32
struct _ast106; // Record v8::Uint32
struct _ast107; // CXXRecord Utils
struct _ast108; // Record v8::Utils
struct _ast109; // CXXRecord Value
struct _ast110; // Record v8::Value
struct _ast111; // CXXRecord WasmModuleObject
struct _ast112; // Record v8::WasmModuleObject
struct _ast113; // ClassTemplate Local
struct _ast114; // TemplateTypeParm T
struct _ast115; // TemplateTypeParm T
struct _ast116; // CXXRecord Local
struct _ast117; // InjectedClassName Local<T>
struct _ast118; // ClassTemplateSpecialization Local
struct _ast119; // Record v8::Local<v8::Primitive>
struct _ast120; // CXXConstructor Local
struct _ast121; // FunctionProto void ()
struct _ast122; // Builtin void
struct _ast123; // Pointer v8::Local<v8::Primitive> *
struct _ast124; // FunctionTemplate Local
struct _ast125; // TemplateTypeParm S
struct _ast126; // TemplateTypeParm S
struct _ast127; // CXXConstructor Local
struct _ast128; // ParmVar that
struct _ast129; // TemplateSpecialization Local<S>
struct _ast130; // FunctionProto void (Local<S>)
struct _ast131; // CXXConstructor Local
struct _ast132; // ParmVar that
struct _ast133; // TemplateSpecialization Local<v8::Primitive>
struct _ast134; // FunctionProto void (Local<v8::Primitive>)
struct _ast135; // CXXMethod IsEmpty
struct _ast136; // FunctionProto bool () const
struct _ast137; // Builtin bool
struct _ast138; // Pointer const v8::Local<v8::Primitive> *
struct _ast139; // Record const v8::Local<v8::Primitive>
struct _ast140; // CXXMethod Clear
struct _ast141; // CXXMethod operator->
struct _ast142; // FunctionProto v8::Primitive *() const
struct _ast143; // Pointer v8::Primitive *
struct _ast144; // SubstTemplateTypeParm v8::Primitive
struct _ast145; // CXXMethod operator*
struct _ast146; // FunctionTemplate operator==
struct _ast147; // TemplateTypeParm S
struct _ast148; // TemplateTypeParm S
struct _ast149; // CXXMethod operator==
struct _ast150; // ParmVar that
struct _ast151; // LValueReference const Local<S> &
struct _ast152; // TemplateSpecialization const Local<S>
struct _ast153; // TemplateSpecialization Local<S>
struct _ast154; // FunctionProto bool (const Local<S> &) const
struct _ast155; // FunctionTemplate operator==
struct _ast156; // TemplateTypeParm S
struct _ast157; // TemplateTypeParm S
struct _ast158; // CXXMethod operator==
struct _ast159; // ParmVar that
struct _ast160; // LValueReference const PersistentBase<S> &
struct _ast161; // TemplateSpecialization const PersistentBase<S>
struct _ast162; // TemplateSpecialization PersistentBase<S>
struct _ast163; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast164; // FunctionTemplate operator!=
struct _ast165; // TemplateTypeParm S
struct _ast166; // TemplateTypeParm S
struct _ast167; // CXXMethod operator!=
struct _ast168; // ParmVar that
struct _ast169; // LValueReference const Local<S> &
struct _ast170; // TemplateSpecialization const Local<S>
struct _ast171; // TemplateSpecialization Local<S>
struct _ast172; // FunctionProto bool (const Local<S> &) const
struct _ast173; // FunctionTemplate operator!=
struct _ast174; // TemplateTypeParm S
struct _ast175; // TemplateTypeParm S
struct _ast176; // CXXMethod operator!=
struct _ast177; // ParmVar that
struct _ast178; // LValueReference const Persistent<S> &
struct _ast179; // TemplateSpecialization const Persistent<S>
struct _ast180; // TemplateSpecialization Persistent<S>
struct _ast181; // FunctionProto bool (const Persistent<S> &) const
struct _ast182; // FunctionTemplate Cast
struct _ast183; // TemplateTypeParm S
struct _ast184; // TemplateTypeParm S
struct _ast185; // CXXMethod Cast
struct _ast186; // ParmVar that
struct _ast187; // TemplateSpecialization Local<S>
struct _ast188; // FunctionProto Local<v8::Primitive> (Local<S>)
struct _ast189; // TemplateSpecialization Local<v8::Primitive>
struct _ast190; // FunctionTemplate As
struct _ast191; // TemplateTypeParm S
struct _ast192; // TemplateTypeParm S
struct _ast193; // CXXMethod As
struct _ast194; // FunctionProto Local<S> () const
struct _ast195; // TemplateSpecialization Local<S>
struct _ast196; // CXXMethod New
struct _ast197; // ParmVar isolate
struct _ast198; // Pointer v8::Isolate *
struct _ast199; // ParmVar that
struct _ast200; // TemplateSpecialization Local<v8::Primitive>
struct _ast201; // FunctionProto Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
struct _ast202; // TemplateSpecialization Local<v8::Primitive>
struct _ast203; // CXXMethod New
struct _ast204; // ParmVar isolate
struct _ast205; // ParmVar that
struct _ast206; // LValueReference const PersistentBase<v8::Primitive> &
struct _ast207; // TemplateSpecialization const PersistentBase<v8::Primitive>
struct _ast208; // TemplateSpecialization PersistentBase<v8::Primitive>
struct _ast209; // FunctionProto Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
struct _ast210; // TemplateSpecialization Local<v8::Primitive>
struct _ast211; // CXXMethod New
struct _ast212; // ParmVar isolate
struct _ast213; // ParmVar that
struct _ast214; // LValueReference const TracedGlobal<v8::Primitive> &
struct _ast215; // TemplateSpecialization const TracedGlobal<v8::Primitive>
struct _ast216; // TemplateSpecialization TracedGlobal<v8::Primitive>
struct _ast217; // FunctionProto Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
struct _ast218; // TemplateSpecialization Local<v8::Primitive>
struct _ast219; // CXXConstructor Local
struct _ast220; // ParmVar 
struct _ast221; // LValueReference const v8::Local<v8::Primitive> &
struct _ast222; // FunctionProto void (const v8::Local<v8::Primitive> &)
struct _ast223; // CXXConstructor Local
struct _ast224; // ParmVar 
struct _ast225; // RValueReference v8::Local<v8::Primitive> &&
struct _ast226; // FunctionProto void (v8::Local<v8::Primitive> &&) noexcept
struct _ast227; // CXXDestructor ~Local
struct _ast228; // FunctionProto void () noexcept
struct _ast229; // ClassTemplateSpecialization Local
struct _ast230; // Record v8::Local<v8::Boolean>
struct _ast231; // CXXConstructor Local
struct _ast232; // Pointer v8::Local<v8::Boolean> *
struct _ast233; // FunctionTemplate Local
struct _ast234; // TemplateTypeParm S
struct _ast235; // TemplateTypeParm S
struct _ast236; // CXXConstructor Local
struct _ast237; // ParmVar that
struct _ast238; // TemplateSpecialization Local<S>
struct _ast239; // FunctionProto void (Local<S>)
struct _ast240; // CXXConstructor Local
struct _ast241; // ParmVar that
struct _ast242; // TemplateSpecialization Local<v8::Boolean>
struct _ast243; // FunctionProto void (Local<v8::Boolean>)
struct _ast244; // CXXMethod IsEmpty
struct _ast245; // Pointer const v8::Local<v8::Boolean> *
struct _ast246; // Record const v8::Local<v8::Boolean>
struct _ast247; // CXXMethod Clear
struct _ast248; // CXXMethod operator->
struct _ast249; // FunctionProto v8::Boolean *() const
struct _ast250; // Pointer v8::Boolean *
struct _ast251; // SubstTemplateTypeParm v8::Boolean
struct _ast252; // CXXMethod operator*
struct _ast253; // FunctionTemplate operator==
struct _ast254; // TemplateTypeParm S
struct _ast255; // TemplateTypeParm S
struct _ast256; // CXXMethod operator==
struct _ast257; // ParmVar that
struct _ast258; // LValueReference const Local<S> &
struct _ast259; // TemplateSpecialization const Local<S>
struct _ast260; // TemplateSpecialization Local<S>
struct _ast261; // FunctionProto bool (const Local<S> &) const
struct _ast262; // FunctionTemplate operator==
struct _ast263; // TemplateTypeParm S
struct _ast264; // TemplateTypeParm S
struct _ast265; // CXXMethod operator==
struct _ast266; // ParmVar that
struct _ast267; // LValueReference const PersistentBase<S> &
struct _ast268; // TemplateSpecialization const PersistentBase<S>
struct _ast269; // TemplateSpecialization PersistentBase<S>
struct _ast270; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast271; // FunctionTemplate operator!=
struct _ast272; // TemplateTypeParm S
struct _ast273; // TemplateTypeParm S
struct _ast274; // CXXMethod operator!=
struct _ast275; // ParmVar that
struct _ast276; // LValueReference const Local<S> &
struct _ast277; // TemplateSpecialization const Local<S>
struct _ast278; // TemplateSpecialization Local<S>
struct _ast279; // FunctionProto bool (const Local<S> &) const
struct _ast280; // FunctionTemplate operator!=
struct _ast281; // TemplateTypeParm S
struct _ast282; // TemplateTypeParm S
struct _ast283; // CXXMethod operator!=
struct _ast284; // ParmVar that
struct _ast285; // LValueReference const Persistent<S> &
struct _ast286; // TemplateSpecialization const Persistent<S>
struct _ast287; // TemplateSpecialization Persistent<S>
struct _ast288; // FunctionProto bool (const Persistent<S> &) const
struct _ast289; // FunctionTemplate Cast
struct _ast290; // TemplateTypeParm S
struct _ast291; // TemplateTypeParm S
struct _ast292; // CXXMethod Cast
struct _ast293; // ParmVar that
struct _ast294; // TemplateSpecialization Local<S>
struct _ast295; // FunctionProto Local<v8::Boolean> (Local<S>)
struct _ast296; // TemplateSpecialization Local<v8::Boolean>
struct _ast297; // FunctionTemplate As
struct _ast298; // TemplateTypeParm S
struct _ast299; // TemplateTypeParm S
struct _ast300; // CXXMethod As
struct _ast301; // FunctionProto Local<S> () const
struct _ast302; // TemplateSpecialization Local<S>
struct _ast303; // CXXMethod New
struct _ast304; // ParmVar isolate
struct _ast305; // ParmVar that
struct _ast306; // TemplateSpecialization Local<v8::Boolean>
struct _ast307; // FunctionProto Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _ast308; // TemplateSpecialization Local<v8::Boolean>
struct _ast309; // CXXMethod New
struct _ast310; // ParmVar isolate
struct _ast311; // ParmVar that
struct _ast312; // LValueReference const PersistentBase<v8::Boolean> &
struct _ast313; // TemplateSpecialization const PersistentBase<v8::Boolean>
struct _ast314; // TemplateSpecialization PersistentBase<v8::Boolean>
struct _ast315; // FunctionProto Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
struct _ast316; // TemplateSpecialization Local<v8::Boolean>
struct _ast317; // CXXMethod New
struct _ast318; // ParmVar isolate
struct _ast319; // ParmVar that
struct _ast320; // LValueReference const TracedGlobal<v8::Boolean> &
struct _ast321; // TemplateSpecialization const TracedGlobal<v8::Boolean>
struct _ast322; // TemplateSpecialization TracedGlobal<v8::Boolean>
struct _ast323; // FunctionProto Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
struct _ast324; // TemplateSpecialization Local<v8::Boolean>
struct _ast325; // CXXConstructor Local
struct _ast326; // ParmVar 
struct _ast327; // LValueReference const v8::Local<v8::Boolean> &
struct _ast328; // FunctionProto void (const v8::Local<v8::Boolean> &)
struct _ast329; // CXXConstructor Local
struct _ast330; // ParmVar 
struct _ast331; // RValueReference v8::Local<v8::Boolean> &&
struct _ast332; // FunctionProto void (v8::Local<v8::Boolean> &&) noexcept
struct _ast333; // CXXDestructor ~Local
struct _ast334; // ClassTemplateSpecialization Local
struct _ast335; // Record v8::Local<v8::Value>
struct _ast336; // CXXConstructor Local
struct _ast337; // Pointer v8::Local<v8::Value> *
struct _ast338; // FunctionTemplate Local
struct _ast339; // TemplateTypeParm S
struct _ast340; // TemplateTypeParm S
struct _ast341; // CXXConstructor Local
struct _ast342; // ParmVar that
struct _ast343; // TemplateSpecialization Local<S>
struct _ast344; // FunctionProto void (Local<S>)
struct _ast345; // CXXConstructor Local
struct _ast346; // ParmVar that
struct _ast347; // TemplateSpecialization Local<v8::Value>
struct _ast348; // FunctionProto void (Local<v8::Value>)
struct _ast349; // CXXMethod IsEmpty
struct _ast350; // Pointer const v8::Local<v8::Value> *
struct _ast351; // Record const v8::Local<v8::Value>
struct _ast352; // CXXMethod Clear
struct _ast353; // CXXMethod operator->
struct _ast354; // FunctionProto v8::Value *() const
struct _ast355; // Pointer v8::Value *
struct _ast356; // SubstTemplateTypeParm v8::Value
struct _ast357; // CXXMethod operator*
struct _ast358; // FunctionTemplate operator==
struct _ast359; // TemplateTypeParm S
struct _ast360; // TemplateTypeParm S
struct _ast361; // CXXMethod operator==
struct _ast362; // ParmVar that
struct _ast363; // LValueReference const Local<S> &
struct _ast364; // TemplateSpecialization const Local<S>
struct _ast365; // TemplateSpecialization Local<S>
struct _ast366; // FunctionProto bool (const Local<S> &) const
struct _ast367; // FunctionTemplate operator==
struct _ast368; // TemplateTypeParm S
struct _ast369; // TemplateTypeParm S
struct _ast370; // CXXMethod operator==
struct _ast371; // ParmVar that
struct _ast372; // LValueReference const PersistentBase<S> &
struct _ast373; // TemplateSpecialization const PersistentBase<S>
struct _ast374; // TemplateSpecialization PersistentBase<S>
struct _ast375; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast376; // FunctionTemplate operator!=
struct _ast377; // TemplateTypeParm S
struct _ast378; // TemplateTypeParm S
struct _ast379; // CXXMethod operator!=
struct _ast380; // ParmVar that
struct _ast381; // LValueReference const Local<S> &
struct _ast382; // TemplateSpecialization const Local<S>
struct _ast383; // TemplateSpecialization Local<S>
struct _ast384; // FunctionProto bool (const Local<S> &) const
struct _ast385; // FunctionTemplate operator!=
struct _ast386; // TemplateTypeParm S
struct _ast387; // TemplateTypeParm S
struct _ast388; // CXXMethod operator!=
struct _ast389; // ParmVar that
struct _ast390; // LValueReference const Persistent<S> &
struct _ast391; // TemplateSpecialization const Persistent<S>
struct _ast392; // TemplateSpecialization Persistent<S>
struct _ast393; // FunctionProto bool (const Persistent<S> &) const
struct _ast394; // FunctionTemplate Cast
struct _ast395; // TemplateTypeParm S
struct _ast396; // TemplateTypeParm S
struct _ast397; // CXXMethod Cast
struct _ast398; // ParmVar that
struct _ast399; // TemplateSpecialization Local<S>
struct _ast400; // FunctionProto Local<v8::Value> (Local<S>)
struct _ast401; // TemplateSpecialization Local<v8::Value>
struct _ast402; // FunctionTemplate As
struct _ast403; // TemplateTypeParm S
struct _ast404; // TemplateTypeParm S
struct _ast405; // CXXMethod As
struct _ast406; // FunctionProto Local<S> () const
struct _ast407; // TemplateSpecialization Local<S>
struct _ast408; // CXXMethod New
struct _ast409; // ParmVar isolate
struct _ast410; // ParmVar that
struct _ast411; // TemplateSpecialization Local<v8::Value>
struct _ast412; // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _ast413; // TemplateSpecialization Local<v8::Value>
struct _ast414; // CXXMethod New
struct _ast415; // ParmVar isolate
struct _ast416; // ParmVar that
struct _ast417; // LValueReference const PersistentBase<v8::Value> &
struct _ast418; // TemplateSpecialization const PersistentBase<v8::Value>
struct _ast419; // TemplateSpecialization PersistentBase<v8::Value>
struct _ast420; // FunctionProto Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
struct _ast421; // TemplateSpecialization Local<v8::Value>
struct _ast422; // CXXMethod New
struct _ast423; // ParmVar isolate
struct _ast424; // ParmVar that
struct _ast425; // LValueReference const TracedGlobal<v8::Value> &
struct _ast426; // TemplateSpecialization const TracedGlobal<v8::Value>
struct _ast427; // TemplateSpecialization TracedGlobal<v8::Value>
struct _ast428; // FunctionProto Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
struct _ast429; // TemplateSpecialization Local<v8::Value>
struct _ast430; // CXXConstructor Local
struct _ast431; // ParmVar 
struct _ast432; // LValueReference const v8::Local<v8::Value> &
struct _ast433; // FunctionProto void (const v8::Local<v8::Value> &) noexcept
struct _ast434; // CXXConstructor Local
struct _ast435; // ParmVar 
struct _ast436; // RValueReference v8::Local<v8::Value> &&
struct _ast437; // FunctionProto void (v8::Local<v8::Value> &&) noexcept
struct _ast438; // CXXDestructor ~Local
struct _ast439; // CXXMethod operator=
struct _ast440; // ParmVar 
struct _ast441; // FunctionProto v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _ast442; // LValueReference v8::Local<v8::Value> &
struct _ast443; // CXXMethod operator=
struct _ast444; // ParmVar 
struct _ast445; // FunctionProto v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _ast446; // ClassTemplateSpecialization Local
struct _ast447; // Record v8::Local<v8::PrimitiveArray>
struct _ast448; // CXXConstructor Local
struct _ast449; // Pointer v8::Local<v8::PrimitiveArray> *
struct _ast450; // FunctionTemplate Local
struct _ast451; // TemplateTypeParm S
struct _ast452; // TemplateTypeParm S
struct _ast453; // CXXConstructor Local
struct _ast454; // ParmVar that
struct _ast455; // TemplateSpecialization Local<S>
struct _ast456; // FunctionProto void (Local<S>)
struct _ast457; // CXXConstructor Local
struct _ast458; // ParmVar that
struct _ast459; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast460; // FunctionProto void (Local<v8::PrimitiveArray>)
struct _ast461; // CXXMethod IsEmpty
struct _ast462; // Pointer const v8::Local<v8::PrimitiveArray> *
struct _ast463; // Record const v8::Local<v8::PrimitiveArray>
struct _ast464; // CXXMethod Clear
struct _ast465; // CXXMethod operator->
struct _ast466; // FunctionProto v8::PrimitiveArray *() const
struct _ast467; // Pointer v8::PrimitiveArray *
struct _ast468; // SubstTemplateTypeParm v8::PrimitiveArray
struct _ast469; // CXXMethod operator*
struct _ast470; // FunctionTemplate operator==
struct _ast471; // TemplateTypeParm S
struct _ast472; // TemplateTypeParm S
struct _ast473; // CXXMethod operator==
struct _ast474; // ParmVar that
struct _ast475; // LValueReference const Local<S> &
struct _ast476; // TemplateSpecialization const Local<S>
struct _ast477; // TemplateSpecialization Local<S>
struct _ast478; // FunctionProto bool (const Local<S> &) const
struct _ast479; // FunctionTemplate operator==
struct _ast480; // TemplateTypeParm S
struct _ast481; // TemplateTypeParm S
struct _ast482; // CXXMethod operator==
struct _ast483; // ParmVar that
struct _ast484; // LValueReference const PersistentBase<S> &
struct _ast485; // TemplateSpecialization const PersistentBase<S>
struct _ast486; // TemplateSpecialization PersistentBase<S>
struct _ast487; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast488; // FunctionTemplate operator!=
struct _ast489; // TemplateTypeParm S
struct _ast490; // TemplateTypeParm S
struct _ast491; // CXXMethod operator!=
struct _ast492; // ParmVar that
struct _ast493; // LValueReference const Local<S> &
struct _ast494; // TemplateSpecialization const Local<S>
struct _ast495; // TemplateSpecialization Local<S>
struct _ast496; // FunctionProto bool (const Local<S> &) const
struct _ast497; // FunctionTemplate operator!=
struct _ast498; // TemplateTypeParm S
struct _ast499; // TemplateTypeParm S
struct _ast500; // CXXMethod operator!=
struct _ast501; // ParmVar that
struct _ast502; // LValueReference const Persistent<S> &
struct _ast503; // TemplateSpecialization const Persistent<S>
struct _ast504; // TemplateSpecialization Persistent<S>
struct _ast505; // FunctionProto bool (const Persistent<S> &) const
struct _ast506; // FunctionTemplate Cast
struct _ast507; // TemplateTypeParm S
struct _ast508; // TemplateTypeParm S
struct _ast509; // CXXMethod Cast
struct _ast510; // ParmVar that
struct _ast511; // TemplateSpecialization Local<S>
struct _ast512; // FunctionProto Local<v8::PrimitiveArray> (Local<S>)
struct _ast513; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast514; // FunctionTemplate As
struct _ast515; // TemplateTypeParm S
struct _ast516; // TemplateTypeParm S
struct _ast517; // CXXMethod As
struct _ast518; // FunctionProto Local<S> () const
struct _ast519; // TemplateSpecialization Local<S>
struct _ast520; // CXXMethod New
struct _ast521; // ParmVar isolate
struct _ast522; // ParmVar that
struct _ast523; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast524; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
struct _ast525; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast526; // CXXMethod New
struct _ast527; // ParmVar isolate
struct _ast528; // ParmVar that
struct _ast529; // LValueReference const PersistentBase<v8::PrimitiveArray> &
struct _ast530; // TemplateSpecialization const PersistentBase<v8::PrimitiveArray>
struct _ast531; // TemplateSpecialization PersistentBase<v8::PrimitiveArray>
struct _ast532; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
struct _ast533; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast534; // CXXMethod New
struct _ast535; // ParmVar isolate
struct _ast536; // ParmVar that
struct _ast537; // LValueReference const TracedGlobal<v8::PrimitiveArray> &
struct _ast538; // TemplateSpecialization const TracedGlobal<v8::PrimitiveArray>
struct _ast539; // TemplateSpecialization TracedGlobal<v8::PrimitiveArray>
struct _ast540; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
struct _ast541; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast542; // CXXConstructor Local
struct _ast543; // ParmVar 
struct _ast544; // LValueReference const v8::Local<v8::PrimitiveArray> &
struct _ast545; // FunctionProto void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _ast546; // CXXConstructor Local
struct _ast547; // ParmVar 
struct _ast548; // RValueReference v8::Local<v8::PrimitiveArray> &&
struct _ast549; // FunctionProto void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _ast550; // CXXDestructor ~Local
struct _ast551; // CXXMethod operator=
struct _ast552; // ParmVar 
struct _ast553; // FunctionProto v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
struct _ast554; // LValueReference v8::Local<v8::PrimitiveArray> &
struct _ast555; // CXXMethod operator=
struct _ast556; // ParmVar 
struct _ast557; // FunctionProto v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
struct _ast558; // ClassTemplateSpecialization Local
struct _ast559; // Record v8::Local<v8::Integer>
struct _ast560; // CXXConstructor Local
struct _ast561; // Pointer v8::Local<v8::Integer> *
struct _ast562; // FunctionTemplate Local
struct _ast563; // TemplateTypeParm S
struct _ast564; // TemplateTypeParm S
struct _ast565; // CXXConstructor Local
struct _ast566; // ParmVar that
struct _ast567; // TemplateSpecialization Local<S>
struct _ast568; // FunctionProto void (Local<S>)
struct _ast569; // CXXConstructor Local
struct _ast570; // ParmVar that
struct _ast571; // TemplateSpecialization Local<v8::Integer>
struct _ast572; // FunctionProto void (Local<v8::Integer>)
struct _ast573; // CXXMethod IsEmpty
struct _ast574; // Pointer const v8::Local<v8::Integer> *
struct _ast575; // Record const v8::Local<v8::Integer>
struct _ast576; // CXXMethod Clear
struct _ast577; // CXXMethod operator->
struct _ast578; // FunctionProto v8::Integer *() const
struct _ast579; // Pointer v8::Integer *
struct _ast580; // SubstTemplateTypeParm v8::Integer
struct _ast581; // CXXMethod operator*
struct _ast582; // FunctionTemplate operator==
struct _ast583; // TemplateTypeParm S
struct _ast584; // TemplateTypeParm S
struct _ast585; // CXXMethod operator==
struct _ast586; // ParmVar that
struct _ast587; // LValueReference const Local<S> &
struct _ast588; // TemplateSpecialization const Local<S>
struct _ast589; // TemplateSpecialization Local<S>
struct _ast590; // FunctionProto bool (const Local<S> &) const
struct _ast591; // FunctionTemplate operator==
struct _ast592; // TemplateTypeParm S
struct _ast593; // TemplateTypeParm S
struct _ast594; // CXXMethod operator==
struct _ast595; // ParmVar that
struct _ast596; // LValueReference const PersistentBase<S> &
struct _ast597; // TemplateSpecialization const PersistentBase<S>
struct _ast598; // TemplateSpecialization PersistentBase<S>
struct _ast599; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast600; // FunctionTemplate operator!=
struct _ast601; // TemplateTypeParm S
struct _ast602; // TemplateTypeParm S
struct _ast603; // CXXMethod operator!=
struct _ast604; // ParmVar that
struct _ast605; // LValueReference const Local<S> &
struct _ast606; // TemplateSpecialization const Local<S>
struct _ast607; // TemplateSpecialization Local<S>
struct _ast608; // FunctionProto bool (const Local<S> &) const
struct _ast609; // FunctionTemplate operator!=
struct _ast610; // TemplateTypeParm S
struct _ast611; // TemplateTypeParm S
struct _ast612; // CXXMethod operator!=
struct _ast613; // ParmVar that
struct _ast614; // LValueReference const Persistent<S> &
struct _ast615; // TemplateSpecialization const Persistent<S>
struct _ast616; // TemplateSpecialization Persistent<S>
struct _ast617; // FunctionProto bool (const Persistent<S> &) const
struct _ast618; // FunctionTemplate Cast
struct _ast619; // TemplateTypeParm S
struct _ast620; // TemplateTypeParm S
struct _ast621; // CXXMethod Cast
struct _ast622; // ParmVar that
struct _ast623; // TemplateSpecialization Local<S>
struct _ast624; // FunctionProto Local<v8::Integer> (Local<S>)
struct _ast625; // TemplateSpecialization Local<v8::Integer>
struct _ast626; // FunctionTemplate As
struct _ast627; // TemplateTypeParm S
struct _ast628; // TemplateTypeParm S
struct _ast629; // CXXMethod As
struct _ast630; // FunctionProto Local<S> () const
struct _ast631; // TemplateSpecialization Local<S>
struct _ast632; // CXXMethod New
struct _ast633; // ParmVar isolate
struct _ast634; // ParmVar that
struct _ast635; // TemplateSpecialization Local<v8::Integer>
struct _ast636; // FunctionProto Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _ast637; // TemplateSpecialization Local<v8::Integer>
struct _ast638; // CXXMethod New
struct _ast639; // ParmVar isolate
struct _ast640; // ParmVar that
struct _ast641; // LValueReference const PersistentBase<v8::Integer> &
struct _ast642; // TemplateSpecialization const PersistentBase<v8::Integer>
struct _ast643; // TemplateSpecialization PersistentBase<v8::Integer>
struct _ast644; // FunctionProto Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
struct _ast645; // TemplateSpecialization Local<v8::Integer>
struct _ast646; // CXXMethod New
struct _ast647; // ParmVar isolate
struct _ast648; // ParmVar that
struct _ast649; // LValueReference const TracedGlobal<v8::Integer> &
struct _ast650; // TemplateSpecialization const TracedGlobal<v8::Integer>
struct _ast651; // TemplateSpecialization TracedGlobal<v8::Integer>
struct _ast652; // FunctionProto Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
struct _ast653; // TemplateSpecialization Local<v8::Integer>
struct _ast654; // CXXConstructor Local
struct _ast655; // ParmVar 
struct _ast656; // LValueReference const v8::Local<v8::Integer> &
struct _ast657; // FunctionProto void (const v8::Local<v8::Integer> &) noexcept
struct _ast658; // CXXConstructor Local
struct _ast659; // ParmVar 
struct _ast660; // RValueReference v8::Local<v8::Integer> &&
struct _ast661; // FunctionProto void (v8::Local<v8::Integer> &&) noexcept
struct _ast662; // CXXDestructor ~Local
struct _ast663; // CXXMethod operator=
struct _ast664; // ParmVar 
struct _ast665; // FunctionProto v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _ast666; // LValueReference v8::Local<v8::Integer> &
struct _ast667; // CXXMethod operator=
struct _ast668; // ParmVar 
struct _ast669; // FunctionProto v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _ast670; // ClassTemplateSpecialization Local
struct _ast671; // Record v8::Local<v8::Script>
struct _ast672; // ClassTemplateSpecialization Local
struct _ast673; // Record v8::Local<v8::String>
struct _ast674; // CXXConstructor Local
struct _ast675; // Pointer v8::Local<v8::String> *
struct _ast676; // FunctionTemplate Local
struct _ast677; // TemplateTypeParm S
struct _ast678; // TemplateTypeParm S
struct _ast679; // CXXConstructor Local
struct _ast680; // ParmVar that
struct _ast681; // TemplateSpecialization Local<S>
struct _ast682; // FunctionProto void (Local<S>)
struct _ast683; // CXXConstructor Local
struct _ast684; // ParmVar that
struct _ast685; // TemplateSpecialization Local<v8::String>
struct _ast686; // FunctionProto void (Local<v8::String>)
struct _ast687; // CXXMethod IsEmpty
struct _ast688; // Pointer const v8::Local<v8::String> *
struct _ast689; // Record const v8::Local<v8::String>
struct _ast690; // CXXMethod Clear
struct _ast691; // CXXMethod operator->
struct _ast692; // FunctionProto v8::String *() const
struct _ast693; // Pointer v8::String *
struct _ast694; // SubstTemplateTypeParm v8::String
struct _ast695; // CXXMethod operator*
struct _ast696; // FunctionTemplate operator==
struct _ast697; // TemplateTypeParm S
struct _ast698; // TemplateTypeParm S
struct _ast699; // CXXMethod operator==
struct _ast700; // ParmVar that
struct _ast701; // LValueReference const Local<S> &
struct _ast702; // TemplateSpecialization const Local<S>
struct _ast703; // TemplateSpecialization Local<S>
struct _ast704; // FunctionProto bool (const Local<S> &) const
struct _ast705; // FunctionTemplate operator==
struct _ast706; // TemplateTypeParm S
struct _ast707; // TemplateTypeParm S
struct _ast708; // CXXMethod operator==
struct _ast709; // ParmVar that
struct _ast710; // LValueReference const PersistentBase<S> &
struct _ast711; // TemplateSpecialization const PersistentBase<S>
struct _ast712; // TemplateSpecialization PersistentBase<S>
struct _ast713; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast714; // FunctionTemplate operator!=
struct _ast715; // TemplateTypeParm S
struct _ast716; // TemplateTypeParm S
struct _ast717; // CXXMethod operator!=
struct _ast718; // ParmVar that
struct _ast719; // LValueReference const Local<S> &
struct _ast720; // TemplateSpecialization const Local<S>
struct _ast721; // TemplateSpecialization Local<S>
struct _ast722; // FunctionProto bool (const Local<S> &) const
struct _ast723; // FunctionTemplate operator!=
struct _ast724; // TemplateTypeParm S
struct _ast725; // TemplateTypeParm S
struct _ast726; // CXXMethod operator!=
struct _ast727; // ParmVar that
struct _ast728; // LValueReference const Persistent<S> &
struct _ast729; // TemplateSpecialization const Persistent<S>
struct _ast730; // TemplateSpecialization Persistent<S>
struct _ast731; // FunctionProto bool (const Persistent<S> &) const
struct _ast732; // FunctionTemplate Cast
struct _ast733; // TemplateTypeParm S
struct _ast734; // TemplateTypeParm S
struct _ast735; // CXXMethod Cast
struct _ast736; // ParmVar that
struct _ast737; // TemplateSpecialization Local<S>
struct _ast738; // FunctionProto Local<v8::String> (Local<S>)
struct _ast739; // TemplateSpecialization Local<v8::String>
struct _ast740; // FunctionTemplate As
struct _ast741; // TemplateTypeParm S
struct _ast742; // TemplateTypeParm S
struct _ast743; // CXXMethod As
struct _ast744; // FunctionProto Local<S> () const
struct _ast745; // TemplateSpecialization Local<S>
struct _ast746; // CXXMethod New
struct _ast747; // ParmVar isolate
struct _ast748; // ParmVar that
struct _ast749; // TemplateSpecialization Local<v8::String>
struct _ast750; // FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _ast751; // TemplateSpecialization Local<v8::String>
struct _ast752; // CXXMethod New
struct _ast753; // ParmVar isolate
struct _ast754; // ParmVar that
struct _ast755; // LValueReference const PersistentBase<v8::String> &
struct _ast756; // TemplateSpecialization const PersistentBase<v8::String>
struct _ast757; // TemplateSpecialization PersistentBase<v8::String>
struct _ast758; // FunctionProto Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
struct _ast759; // TemplateSpecialization Local<v8::String>
struct _ast760; // CXXMethod New
struct _ast761; // ParmVar isolate
struct _ast762; // ParmVar that
struct _ast763; // LValueReference const TracedGlobal<v8::String> &
struct _ast764; // TemplateSpecialization const TracedGlobal<v8::String>
struct _ast765; // TemplateSpecialization TracedGlobal<v8::String>
struct _ast766; // FunctionProto Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
struct _ast767; // TemplateSpecialization Local<v8::String>
struct _ast768; // CXXConstructor Local
struct _ast769; // ParmVar 
struct _ast770; // LValueReference const v8::Local<v8::String> &
struct _ast771; // FunctionProto void (const v8::Local<v8::String> &) noexcept
struct _ast772; // CXXConstructor Local
struct _ast773; // ParmVar 
struct _ast774; // RValueReference v8::Local<v8::String> &&
struct _ast775; // FunctionProto void (v8::Local<v8::String> &&) noexcept
struct _ast776; // CXXMethod operator=
struct _ast777; // ParmVar 
struct _ast778; // FunctionProto v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _ast779; // LValueReference v8::Local<v8::String> &
struct _ast780; // CXXMethod operator=
struct _ast781; // ParmVar 
struct _ast782; // FunctionProto v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _ast783; // CXXDestructor ~Local
struct _ast784; // ClassTemplateSpecialization Local
struct _ast785; // Record v8::Local<v8::Context>
struct _ast786; // CXXConstructor Local
struct _ast787; // Pointer v8::Local<v8::Context> *
struct _ast788; // FunctionTemplate Local
struct _ast789; // TemplateTypeParm S
struct _ast790; // TemplateTypeParm S
struct _ast791; // CXXConstructor Local
struct _ast792; // ParmVar that
struct _ast793; // TemplateSpecialization Local<S>
struct _ast794; // FunctionProto void (Local<S>)
struct _ast795; // CXXConstructor Local
struct _ast796; // ParmVar that
struct _ast797; // TemplateSpecialization Local<v8::Context>
struct _ast798; // FunctionProto void (Local<v8::Context>)
struct _ast799; // CXXMethod IsEmpty
struct _ast800; // Pointer const v8::Local<v8::Context> *
struct _ast801; // Record const v8::Local<v8::Context>
struct _ast802; // CXXMethod Clear
struct _ast803; // CXXMethod operator->
struct _ast804; // FunctionProto v8::Context *() const
struct _ast805; // Pointer v8::Context *
struct _ast806; // SubstTemplateTypeParm v8::Context
struct _ast807; // CXXMethod operator*
struct _ast808; // FunctionTemplate operator==
struct _ast809; // TemplateTypeParm S
struct _ast810; // TemplateTypeParm S
struct _ast811; // CXXMethod operator==
struct _ast812; // ParmVar that
struct _ast813; // LValueReference const Local<S> &
struct _ast814; // TemplateSpecialization const Local<S>
struct _ast815; // TemplateSpecialization Local<S>
struct _ast816; // FunctionProto bool (const Local<S> &) const
struct _ast817; // FunctionTemplate operator==
struct _ast818; // TemplateTypeParm S
struct _ast819; // TemplateTypeParm S
struct _ast820; // CXXMethod operator==
struct _ast821; // ParmVar that
struct _ast822; // LValueReference const PersistentBase<S> &
struct _ast823; // TemplateSpecialization const PersistentBase<S>
struct _ast824; // TemplateSpecialization PersistentBase<S>
struct _ast825; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast826; // FunctionTemplate operator!=
struct _ast827; // TemplateTypeParm S
struct _ast828; // TemplateTypeParm S
struct _ast829; // CXXMethod operator!=
struct _ast830; // ParmVar that
struct _ast831; // LValueReference const Local<S> &
struct _ast832; // TemplateSpecialization const Local<S>
struct _ast833; // TemplateSpecialization Local<S>
struct _ast834; // FunctionProto bool (const Local<S> &) const
struct _ast835; // FunctionTemplate operator!=
struct _ast836; // TemplateTypeParm S
struct _ast837; // TemplateTypeParm S
struct _ast838; // CXXMethod operator!=
struct _ast839; // ParmVar that
struct _ast840; // LValueReference const Persistent<S> &
struct _ast841; // TemplateSpecialization const Persistent<S>
struct _ast842; // TemplateSpecialization Persistent<S>
struct _ast843; // FunctionProto bool (const Persistent<S> &) const
struct _ast844; // FunctionTemplate Cast
struct _ast845; // TemplateTypeParm S
struct _ast846; // TemplateTypeParm S
struct _ast847; // CXXMethod Cast
struct _ast848; // ParmVar that
struct _ast849; // TemplateSpecialization Local<S>
struct _ast850; // FunctionProto Local<v8::Context> (Local<S>)
struct _ast851; // TemplateSpecialization Local<v8::Context>
struct _ast852; // FunctionTemplate As
struct _ast853; // TemplateTypeParm S
struct _ast854; // TemplateTypeParm S
struct _ast855; // CXXMethod As
struct _ast856; // FunctionProto Local<S> () const
struct _ast857; // TemplateSpecialization Local<S>
struct _ast858; // CXXMethod New
struct _ast859; // ParmVar isolate
struct _ast860; // ParmVar that
struct _ast861; // TemplateSpecialization Local<v8::Context>
struct _ast862; // FunctionProto Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _ast863; // TemplateSpecialization Local<v8::Context>
struct _ast864; // CXXMethod New
struct _ast865; // ParmVar isolate
struct _ast866; // ParmVar that
struct _ast867; // LValueReference const PersistentBase<v8::Context> &
struct _ast868; // TemplateSpecialization const PersistentBase<v8::Context>
struct _ast869; // TemplateSpecialization PersistentBase<v8::Context>
struct _ast870; // FunctionProto Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
struct _ast871; // TemplateSpecialization Local<v8::Context>
struct _ast872; // CXXMethod New
struct _ast873; // ParmVar isolate
struct _ast874; // ParmVar that
struct _ast875; // LValueReference const TracedGlobal<v8::Context> &
struct _ast876; // TemplateSpecialization const TracedGlobal<v8::Context>
struct _ast877; // TemplateSpecialization TracedGlobal<v8::Context>
struct _ast878; // FunctionProto Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
struct _ast879; // TemplateSpecialization Local<v8::Context>
struct _ast880; // CXXDestructor ~Local
struct _ast881; // CXXConstructor Local
struct _ast882; // ParmVar 
struct _ast883; // LValueReference const v8::Local<v8::Context> &
struct _ast884; // FunctionProto void (const v8::Local<v8::Context> &) noexcept
struct _ast885; // CXXConstructor Local
struct _ast886; // ParmVar 
struct _ast887; // RValueReference v8::Local<v8::Context> &&
struct _ast888; // FunctionProto void (v8::Local<v8::Context> &&) noexcept
struct _ast889; // ClassTemplateSpecialization Local
struct _ast890; // Record v8::Local<v8::Module>
struct _ast891; // ClassTemplateSpecialization Local
struct _ast892; // Record v8::Local<v8::UnboundModuleScript>
struct _ast893; // ClassTemplateSpecialization Local
struct _ast894; // Record v8::Local<v8::UnboundScript>
struct _ast895; // CXXConstructor Local
struct _ast896; // Pointer v8::Local<v8::UnboundScript> *
struct _ast897; // FunctionTemplate Local
struct _ast898; // TemplateTypeParm S
struct _ast899; // TemplateTypeParm S
struct _ast900; // CXXConstructor Local
struct _ast901; // ParmVar that
struct _ast902; // TemplateSpecialization Local<S>
struct _ast903; // FunctionProto void (Local<S>)
struct _ast904; // CXXMethod IsEmpty
struct _ast905; // Pointer const v8::Local<v8::UnboundScript> *
struct _ast906; // Record const v8::Local<v8::UnboundScript>
struct _ast907; // CXXMethod Clear
struct _ast908; // CXXMethod operator->
struct _ast909; // FunctionProto v8::UnboundScript *() const
struct _ast910; // Pointer v8::UnboundScript *
struct _ast911; // SubstTemplateTypeParm v8::UnboundScript
struct _ast912; // CXXMethod operator*
struct _ast913; // FunctionTemplate operator==
struct _ast914; // TemplateTypeParm S
struct _ast915; // TemplateTypeParm S
struct _ast916; // CXXMethod operator==
struct _ast917; // ParmVar that
struct _ast918; // LValueReference const Local<S> &
struct _ast919; // TemplateSpecialization const Local<S>
struct _ast920; // TemplateSpecialization Local<S>
struct _ast921; // FunctionProto bool (const Local<S> &) const
struct _ast922; // FunctionTemplate operator==
struct _ast923; // TemplateTypeParm S
struct _ast924; // TemplateTypeParm S
struct _ast925; // CXXMethod operator==
struct _ast926; // ParmVar that
struct _ast927; // LValueReference const PersistentBase<S> &
struct _ast928; // TemplateSpecialization const PersistentBase<S>
struct _ast929; // TemplateSpecialization PersistentBase<S>
struct _ast930; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast931; // FunctionTemplate operator!=
struct _ast932; // TemplateTypeParm S
struct _ast933; // TemplateTypeParm S
struct _ast934; // CXXMethod operator!=
struct _ast935; // ParmVar that
struct _ast936; // LValueReference const Local<S> &
struct _ast937; // TemplateSpecialization const Local<S>
struct _ast938; // TemplateSpecialization Local<S>
struct _ast939; // FunctionProto bool (const Local<S> &) const
struct _ast940; // FunctionTemplate operator!=
struct _ast941; // TemplateTypeParm S
struct _ast942; // TemplateTypeParm S
struct _ast943; // CXXMethod operator!=
struct _ast944; // ParmVar that
struct _ast945; // LValueReference const Persistent<S> &
struct _ast946; // TemplateSpecialization const Persistent<S>
struct _ast947; // TemplateSpecialization Persistent<S>
struct _ast948; // FunctionProto bool (const Persistent<S> &) const
struct _ast949; // FunctionTemplate Cast
struct _ast950; // TemplateTypeParm S
struct _ast951; // TemplateTypeParm S
struct _ast952; // CXXMethod Cast
struct _ast953; // ParmVar that
struct _ast954; // TemplateSpecialization Local<S>
struct _ast955; // FunctionProto Local<v8::UnboundScript> (Local<S>)
struct _ast956; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast957; // FunctionTemplate As
struct _ast958; // TemplateTypeParm S
struct _ast959; // TemplateTypeParm S
struct _ast960; // CXXMethod As
struct _ast961; // FunctionProto Local<S> () const
struct _ast962; // TemplateSpecialization Local<S>
struct _ast963; // CXXMethod New
struct _ast964; // ParmVar isolate
struct _ast965; // ParmVar that
struct _ast966; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast967; // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
struct _ast968; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast969; // CXXMethod New
struct _ast970; // ParmVar isolate
struct _ast971; // ParmVar that
struct _ast972; // LValueReference const PersistentBase<v8::UnboundScript> &
struct _ast973; // TemplateSpecialization const PersistentBase<v8::UnboundScript>
struct _ast974; // TemplateSpecialization PersistentBase<v8::UnboundScript>
struct _ast975; // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
struct _ast976; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast977; // CXXMethod New
struct _ast978; // ParmVar isolate
struct _ast979; // ParmVar that
struct _ast980; // LValueReference const TracedGlobal<v8::UnboundScript> &
struct _ast981; // TemplateSpecialization const TracedGlobal<v8::UnboundScript>
struct _ast982; // TemplateSpecialization TracedGlobal<v8::UnboundScript>
struct _ast983; // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
struct _ast984; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast985; // ClassTemplateSpecialization Local
struct _ast986; // Record v8::Local<v8::Object>
struct _ast987; // ClassTemplateSpecialization Local
struct _ast988; // Record v8::Local<v8::Function>
struct _ast989; // CXXConstructor Local
struct _ast990; // Pointer v8::Local<v8::Function> *
struct _ast991; // FunctionTemplate Local
struct _ast992; // TemplateTypeParm S
struct _ast993; // TemplateTypeParm S
struct _ast994; // CXXConstructor Local
struct _ast995; // ParmVar that
struct _ast996; // TemplateSpecialization Local<S>
struct _ast997; // FunctionProto void (Local<S>)
struct _ast998; // CXXConstructor Local
struct _ast999; // ParmVar that
struct _ast1000; // TemplateSpecialization Local<v8::Function>
struct _ast1001; // FunctionProto void (Local<v8::Function>)
struct _ast1002; // CXXMethod IsEmpty
struct _ast1003; // Pointer const v8::Local<v8::Function> *
struct _ast1004; // Record const v8::Local<v8::Function>
struct _ast1005; // CXXMethod Clear
struct _ast1006; // CXXMethod operator->
struct _ast1007; // FunctionProto v8::Function *() const
struct _ast1008; // Pointer v8::Function *
struct _ast1009; // SubstTemplateTypeParm v8::Function
struct _ast1010; // CXXMethod operator*
struct _ast1011; // FunctionTemplate operator==
struct _ast1012; // TemplateTypeParm S
struct _ast1013; // TemplateTypeParm S
struct _ast1014; // CXXMethod operator==
struct _ast1015; // ParmVar that
struct _ast1016; // LValueReference const Local<S> &
struct _ast1017; // TemplateSpecialization const Local<S>
struct _ast1018; // TemplateSpecialization Local<S>
struct _ast1019; // FunctionProto bool (const Local<S> &) const
struct _ast1020; // FunctionTemplate operator==
struct _ast1021; // TemplateTypeParm S
struct _ast1022; // TemplateTypeParm S
struct _ast1023; // CXXMethod operator==
struct _ast1024; // ParmVar that
struct _ast1025; // LValueReference const PersistentBase<S> &
struct _ast1026; // TemplateSpecialization const PersistentBase<S>
struct _ast1027; // TemplateSpecialization PersistentBase<S>
struct _ast1028; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1029; // FunctionTemplate operator!=
struct _ast1030; // TemplateTypeParm S
struct _ast1031; // TemplateTypeParm S
struct _ast1032; // CXXMethod operator!=
struct _ast1033; // ParmVar that
struct _ast1034; // LValueReference const Local<S> &
struct _ast1035; // TemplateSpecialization const Local<S>
struct _ast1036; // TemplateSpecialization Local<S>
struct _ast1037; // FunctionProto bool (const Local<S> &) const
struct _ast1038; // FunctionTemplate operator!=
struct _ast1039; // TemplateTypeParm S
struct _ast1040; // TemplateTypeParm S
struct _ast1041; // CXXMethod operator!=
struct _ast1042; // ParmVar that
struct _ast1043; // LValueReference const Persistent<S> &
struct _ast1044; // TemplateSpecialization const Persistent<S>
struct _ast1045; // TemplateSpecialization Persistent<S>
struct _ast1046; // FunctionProto bool (const Persistent<S> &) const
struct _ast1047; // FunctionTemplate Cast
struct _ast1048; // TemplateTypeParm S
struct _ast1049; // TemplateTypeParm S
struct _ast1050; // CXXMethod Cast
struct _ast1051; // ParmVar that
struct _ast1052; // TemplateSpecialization Local<S>
struct _ast1053; // FunctionProto Local<v8::Function> (Local<S>)
struct _ast1054; // TemplateSpecialization Local<v8::Function>
struct _ast1055; // FunctionTemplate As
struct _ast1056; // TemplateTypeParm S
struct _ast1057; // TemplateTypeParm S
struct _ast1058; // CXXMethod As
struct _ast1059; // FunctionProto Local<S> () const
struct _ast1060; // TemplateSpecialization Local<S>
struct _ast1061; // CXXMethod New
struct _ast1062; // ParmVar isolate
struct _ast1063; // ParmVar that
struct _ast1064; // TemplateSpecialization Local<v8::Function>
struct _ast1065; // FunctionProto Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _ast1066; // TemplateSpecialization Local<v8::Function>
struct _ast1067; // CXXMethod New
struct _ast1068; // ParmVar isolate
struct _ast1069; // ParmVar that
struct _ast1070; // LValueReference const PersistentBase<v8::Function> &
struct _ast1071; // TemplateSpecialization const PersistentBase<v8::Function>
struct _ast1072; // TemplateSpecialization PersistentBase<v8::Function>
struct _ast1073; // FunctionProto Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
struct _ast1074; // TemplateSpecialization Local<v8::Function>
struct _ast1075; // CXXMethod New
struct _ast1076; // ParmVar isolate
struct _ast1077; // ParmVar that
struct _ast1078; // LValueReference const TracedGlobal<v8::Function> &
struct _ast1079; // TemplateSpecialization const TracedGlobal<v8::Function>
struct _ast1080; // TemplateSpecialization TracedGlobal<v8::Function>
struct _ast1081; // FunctionProto Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
struct _ast1082; // TemplateSpecialization Local<v8::Function>
struct _ast1083; // CXXConstructor Local
struct _ast1084; // ParmVar 
struct _ast1085; // LValueReference const v8::Local<v8::Function> &
struct _ast1086; // FunctionProto void (const v8::Local<v8::Function> &)
struct _ast1087; // CXXConstructor Local
struct _ast1088; // ParmVar 
struct _ast1089; // RValueReference v8::Local<v8::Function> &&
struct _ast1090; // FunctionProto void (v8::Local<v8::Function> &&) noexcept
struct _ast1091; // CXXDestructor ~Local
struct _ast1092; // ClassTemplateSpecialization Local
struct _ast1093; // Record v8::Local<v8::StackTrace>
struct _ast1094; // ClassTemplateSpecialization Local
struct _ast1095; // Record v8::Local<v8::StackFrame>
struct _ast1096; // ClassTemplateSpecialization Local
struct _ast1097; // Record v8::Local<v8::SharedArrayBuffer>
struct _ast1098; // ClassTemplateSpecialization Local
struct _ast1099; // Record v8::Local<v8::WasmModuleObject>
struct _ast1100; // ClassTemplateSpecialization Local
struct _ast1101; // Record v8::Local<v8::ArrayBuffer>
struct _ast1102; // ClassTemplateSpecialization Local
struct _ast1103; // Record v8::Local<v8::Symbol>
struct _ast1104; // ClassTemplateSpecialization Local
struct _ast1105; // Record v8::Local<v8::Private>
struct _ast1106; // ClassTemplateSpecialization Local
struct _ast1107; // Record v8::Local<v8::Number>
struct _ast1108; // ClassTemplateSpecialization Local
struct _ast1109; // Record v8::Local<v8::BigInt>
struct _ast1110; // ClassTemplateSpecialization Local
struct _ast1111; // Record v8::Local<v8::Name>
struct _ast1112; // CXXConstructor Local
struct _ast1113; // Pointer v8::Local<v8::Name> *
struct _ast1114; // FunctionTemplate Local
struct _ast1115; // TemplateTypeParm S
struct _ast1116; // TemplateTypeParm S
struct _ast1117; // CXXConstructor Local
struct _ast1118; // ParmVar that
struct _ast1119; // TemplateSpecialization Local<S>
struct _ast1120; // FunctionProto void (Local<S>)
struct _ast1121; // CXXConstructor Local
struct _ast1122; // ParmVar that
struct _ast1123; // TemplateSpecialization Local<v8::String>
struct _ast1124; // FunctionProto void (Local<v8::String>)
struct _ast1125; // CXXConstructor Local
struct _ast1126; // ParmVar that
struct _ast1127; // TemplateSpecialization Local<v8::Name>
struct _ast1128; // FunctionProto void (Local<v8::Name>)
struct _ast1129; // CXXMethod IsEmpty
struct _ast1130; // Pointer const v8::Local<v8::Name> *
struct _ast1131; // Record const v8::Local<v8::Name>
struct _ast1132; // CXXMethod Clear
struct _ast1133; // CXXMethod operator->
struct _ast1134; // FunctionProto v8::Name *() const
struct _ast1135; // Pointer v8::Name *
struct _ast1136; // SubstTemplateTypeParm v8::Name
struct _ast1137; // CXXMethod operator*
struct _ast1138; // FunctionTemplate operator==
struct _ast1139; // TemplateTypeParm S
struct _ast1140; // TemplateTypeParm S
struct _ast1141; // CXXMethod operator==
struct _ast1142; // ParmVar that
struct _ast1143; // LValueReference const Local<S> &
struct _ast1144; // TemplateSpecialization const Local<S>
struct _ast1145; // TemplateSpecialization Local<S>
struct _ast1146; // FunctionProto bool (const Local<S> &) const
struct _ast1147; // FunctionTemplate operator==
struct _ast1148; // TemplateTypeParm S
struct _ast1149; // TemplateTypeParm S
struct _ast1150; // CXXMethod operator==
struct _ast1151; // ParmVar that
struct _ast1152; // LValueReference const PersistentBase<S> &
struct _ast1153; // TemplateSpecialization const PersistentBase<S>
struct _ast1154; // TemplateSpecialization PersistentBase<S>
struct _ast1155; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1156; // FunctionTemplate operator!=
struct _ast1157; // TemplateTypeParm S
struct _ast1158; // TemplateTypeParm S
struct _ast1159; // CXXMethod operator!=
struct _ast1160; // ParmVar that
struct _ast1161; // LValueReference const Local<S> &
struct _ast1162; // TemplateSpecialization const Local<S>
struct _ast1163; // TemplateSpecialization Local<S>
struct _ast1164; // FunctionProto bool (const Local<S> &) const
struct _ast1165; // FunctionTemplate operator!=
struct _ast1166; // TemplateTypeParm S
struct _ast1167; // TemplateTypeParm S
struct _ast1168; // CXXMethod operator!=
struct _ast1169; // ParmVar that
struct _ast1170; // LValueReference const Persistent<S> &
struct _ast1171; // TemplateSpecialization const Persistent<S>
struct _ast1172; // TemplateSpecialization Persistent<S>
struct _ast1173; // FunctionProto bool (const Persistent<S> &) const
struct _ast1174; // FunctionTemplate Cast
struct _ast1175; // TemplateTypeParm S
struct _ast1176; // TemplateTypeParm S
struct _ast1177; // CXXMethod Cast
struct _ast1178; // ParmVar that
struct _ast1179; // TemplateSpecialization Local<S>
struct _ast1180; // FunctionProto Local<v8::Name> (Local<S>)
struct _ast1181; // TemplateSpecialization Local<v8::Name>
struct _ast1182; // FunctionTemplate As
struct _ast1183; // TemplateTypeParm S
struct _ast1184; // TemplateTypeParm S
struct _ast1185; // CXXMethod As
struct _ast1186; // FunctionProto Local<S> () const
struct _ast1187; // TemplateSpecialization Local<S>
struct _ast1188; // CXXMethod New
struct _ast1189; // ParmVar isolate
struct _ast1190; // ParmVar that
struct _ast1191; // TemplateSpecialization Local<v8::Name>
struct _ast1192; // FunctionProto Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _ast1193; // TemplateSpecialization Local<v8::Name>
struct _ast1194; // CXXMethod New
struct _ast1195; // ParmVar isolate
struct _ast1196; // ParmVar that
struct _ast1197; // LValueReference const PersistentBase<v8::Name> &
struct _ast1198; // TemplateSpecialization const PersistentBase<v8::Name>
struct _ast1199; // TemplateSpecialization PersistentBase<v8::Name>
struct _ast1200; // FunctionProto Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
struct _ast1201; // TemplateSpecialization Local<v8::Name>
struct _ast1202; // CXXMethod New
struct _ast1203; // ParmVar isolate
struct _ast1204; // ParmVar that
struct _ast1205; // LValueReference const TracedGlobal<v8::Name> &
struct _ast1206; // TemplateSpecialization const TracedGlobal<v8::Name>
struct _ast1207; // TemplateSpecialization TracedGlobal<v8::Name>
struct _ast1208; // FunctionProto Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
struct _ast1209; // TemplateSpecialization Local<v8::Name>
struct _ast1210; // CXXConstructor Local
struct _ast1211; // ParmVar 
struct _ast1212; // LValueReference const v8::Local<v8::Name> &
struct _ast1213; // FunctionProto void (const v8::Local<v8::Name> &)
struct _ast1214; // CXXConstructor Local
struct _ast1215; // ParmVar 
struct _ast1216; // RValueReference v8::Local<v8::Name> &&
struct _ast1217; // FunctionProto void (v8::Local<v8::Name> &&) noexcept
struct _ast1218; // CXXDestructor ~Local
struct _ast1219; // ClassTemplateSpecialization Local
struct _ast1220; // Record v8::Local<v8::FunctionTemplate>
struct _ast1221; // CXXConstructor Local
struct _ast1222; // Pointer v8::Local<v8::FunctionTemplate> *
struct _ast1223; // FunctionTemplate Local
struct _ast1224; // TemplateTypeParm S
struct _ast1225; // TemplateTypeParm S
struct _ast1226; // CXXConstructor Local
struct _ast1227; // ParmVar that
struct _ast1228; // TemplateSpecialization Local<S>
struct _ast1229; // FunctionProto void (Local<S>)
struct _ast1230; // CXXConstructor Local
struct _ast1231; // ParmVar that
struct _ast1232; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast1233; // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ast1234; // CXXMethod IsEmpty
struct _ast1235; // Pointer const v8::Local<v8::FunctionTemplate> *
struct _ast1236; // Record const v8::Local<v8::FunctionTemplate>
struct _ast1237; // CXXMethod Clear
struct _ast1238; // CXXMethod operator->
struct _ast1239; // FunctionProto v8::FunctionTemplate *() const
struct _ast1240; // Pointer v8::FunctionTemplate *
struct _ast1241; // SubstTemplateTypeParm v8::FunctionTemplate
struct _ast1242; // CXXMethod operator*
struct _ast1243; // FunctionTemplate operator==
struct _ast1244; // TemplateTypeParm S
struct _ast1245; // TemplateTypeParm S
struct _ast1246; // CXXMethod operator==
struct _ast1247; // ParmVar that
struct _ast1248; // LValueReference const Local<S> &
struct _ast1249; // TemplateSpecialization const Local<S>
struct _ast1250; // TemplateSpecialization Local<S>
struct _ast1251; // FunctionProto bool (const Local<S> &) const
struct _ast1252; // FunctionTemplate operator==
struct _ast1253; // TemplateTypeParm S
struct _ast1254; // TemplateTypeParm S
struct _ast1255; // CXXMethod operator==
struct _ast1256; // ParmVar that
struct _ast1257; // LValueReference const PersistentBase<S> &
struct _ast1258; // TemplateSpecialization const PersistentBase<S>
struct _ast1259; // TemplateSpecialization PersistentBase<S>
struct _ast1260; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1261; // FunctionTemplate operator!=
struct _ast1262; // TemplateTypeParm S
struct _ast1263; // TemplateTypeParm S
struct _ast1264; // CXXMethod operator!=
struct _ast1265; // ParmVar that
struct _ast1266; // LValueReference const Local<S> &
struct _ast1267; // TemplateSpecialization const Local<S>
struct _ast1268; // TemplateSpecialization Local<S>
struct _ast1269; // FunctionProto bool (const Local<S> &) const
struct _ast1270; // FunctionTemplate operator!=
struct _ast1271; // TemplateTypeParm S
struct _ast1272; // TemplateTypeParm S
struct _ast1273; // CXXMethod operator!=
struct _ast1274; // ParmVar that
struct _ast1275; // LValueReference const Persistent<S> &
struct _ast1276; // TemplateSpecialization const Persistent<S>
struct _ast1277; // TemplateSpecialization Persistent<S>
struct _ast1278; // FunctionProto bool (const Persistent<S> &) const
struct _ast1279; // FunctionTemplate Cast
struct _ast1280; // TemplateTypeParm S
struct _ast1281; // TemplateTypeParm S
struct _ast1282; // CXXMethod Cast
struct _ast1283; // ParmVar that
struct _ast1284; // TemplateSpecialization Local<S>
struct _ast1285; // FunctionProto Local<v8::FunctionTemplate> (Local<S>)
struct _ast1286; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast1287; // FunctionTemplate As
struct _ast1288; // TemplateTypeParm S
struct _ast1289; // TemplateTypeParm S
struct _ast1290; // CXXMethod As
struct _ast1291; // FunctionProto Local<S> () const
struct _ast1292; // TemplateSpecialization Local<S>
struct _ast1293; // CXXMethod New
struct _ast1294; // ParmVar isolate
struct _ast1295; // ParmVar that
struct _ast1296; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast1297; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast1298; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast1299; // CXXMethod New
struct _ast1300; // ParmVar isolate
struct _ast1301; // ParmVar that
struct _ast1302; // LValueReference const PersistentBase<v8::FunctionTemplate> &
struct _ast1303; // TemplateSpecialization const PersistentBase<v8::FunctionTemplate>
struct _ast1304; // TemplateSpecialization PersistentBase<v8::FunctionTemplate>
struct _ast1305; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
struct _ast1306; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast1307; // CXXMethod New
struct _ast1308; // ParmVar isolate
struct _ast1309; // ParmVar that
struct _ast1310; // LValueReference const TracedGlobal<v8::FunctionTemplate> &
struct _ast1311; // TemplateSpecialization const TracedGlobal<v8::FunctionTemplate>
struct _ast1312; // TemplateSpecialization TracedGlobal<v8::FunctionTemplate>
struct _ast1313; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
struct _ast1314; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast1315; // CXXConstructor Local
struct _ast1316; // ParmVar 
struct _ast1317; // LValueReference const v8::Local<v8::FunctionTemplate> &
struct _ast1318; // FunctionProto void (const v8::Local<v8::FunctionTemplate> &)
struct _ast1319; // CXXConstructor Local
struct _ast1320; // ParmVar 
struct _ast1321; // RValueReference v8::Local<v8::FunctionTemplate> &&
struct _ast1322; // FunctionProto void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _ast1323; // CXXDestructor ~Local
struct _ast1324; // ClassTemplateSpecialization Local
struct _ast1325; // Record v8::Local<v8::Array>
struct _ast1326; // ClassTemplateSpecialization Local
struct _ast1327; // Record v8::Local<v8::Map>
struct _ast1328; // ClassTemplateSpecialization Local
struct _ast1329; // Record v8::Local<v8::Set>
struct _ast1330; // ClassTemplateSpecialization Local
struct _ast1331; // Record v8::Local<v8::Promise>
struct _ast1332; // CXXConstructor Local
struct _ast1333; // Pointer v8::Local<v8::Promise> *
struct _ast1334; // FunctionTemplate Local
struct _ast1335; // TemplateTypeParm S
struct _ast1336; // TemplateTypeParm S
struct _ast1337; // CXXConstructor Local
struct _ast1338; // ParmVar that
struct _ast1339; // TemplateSpecialization Local<S>
struct _ast1340; // FunctionProto void (Local<S>)
struct _ast1341; // CXXConstructor Local
struct _ast1342; // ParmVar that
struct _ast1343; // TemplateSpecialization Local<v8::Promise>
struct _ast1344; // FunctionProto void (Local<v8::Promise>)
struct _ast1345; // CXXMethod IsEmpty
struct _ast1346; // Pointer const v8::Local<v8::Promise> *
struct _ast1347; // Record const v8::Local<v8::Promise>
struct _ast1348; // CXXMethod Clear
struct _ast1349; // CXXMethod operator->
struct _ast1350; // FunctionProto v8::Promise *() const
struct _ast1351; // Pointer v8::Promise *
struct _ast1352; // SubstTemplateTypeParm v8::Promise
struct _ast1353; // CXXMethod operator*
struct _ast1354; // FunctionTemplate operator==
struct _ast1355; // TemplateTypeParm S
struct _ast1356; // TemplateTypeParm S
struct _ast1357; // CXXMethod operator==
struct _ast1358; // ParmVar that
struct _ast1359; // LValueReference const Local<S> &
struct _ast1360; // TemplateSpecialization const Local<S>
struct _ast1361; // TemplateSpecialization Local<S>
struct _ast1362; // FunctionProto bool (const Local<S> &) const
struct _ast1363; // FunctionTemplate operator==
struct _ast1364; // TemplateTypeParm S
struct _ast1365; // TemplateTypeParm S
struct _ast1366; // CXXMethod operator==
struct _ast1367; // ParmVar that
struct _ast1368; // LValueReference const PersistentBase<S> &
struct _ast1369; // TemplateSpecialization const PersistentBase<S>
struct _ast1370; // TemplateSpecialization PersistentBase<S>
struct _ast1371; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1372; // FunctionTemplate operator!=
struct _ast1373; // TemplateTypeParm S
struct _ast1374; // TemplateTypeParm S
struct _ast1375; // CXXMethod operator!=
struct _ast1376; // ParmVar that
struct _ast1377; // LValueReference const Local<S> &
struct _ast1378; // TemplateSpecialization const Local<S>
struct _ast1379; // TemplateSpecialization Local<S>
struct _ast1380; // FunctionProto bool (const Local<S> &) const
struct _ast1381; // FunctionTemplate operator!=
struct _ast1382; // TemplateTypeParm S
struct _ast1383; // TemplateTypeParm S
struct _ast1384; // CXXMethod operator!=
struct _ast1385; // ParmVar that
struct _ast1386; // LValueReference const Persistent<S> &
struct _ast1387; // TemplateSpecialization const Persistent<S>
struct _ast1388; // TemplateSpecialization Persistent<S>
struct _ast1389; // FunctionProto bool (const Persistent<S> &) const
struct _ast1390; // FunctionTemplate Cast
struct _ast1391; // TemplateTypeParm S
struct _ast1392; // TemplateTypeParm S
struct _ast1393; // CXXMethod Cast
struct _ast1394; // ParmVar that
struct _ast1395; // TemplateSpecialization Local<S>
struct _ast1396; // FunctionProto Local<v8::Promise> (Local<S>)
struct _ast1397; // TemplateSpecialization Local<v8::Promise>
struct _ast1398; // FunctionTemplate As
struct _ast1399; // TemplateTypeParm S
struct _ast1400; // TemplateTypeParm S
struct _ast1401; // CXXMethod As
struct _ast1402; // FunctionProto Local<S> () const
struct _ast1403; // TemplateSpecialization Local<S>
struct _ast1404; // CXXMethod New
struct _ast1405; // ParmVar isolate
struct _ast1406; // ParmVar that
struct _ast1407; // TemplateSpecialization Local<v8::Promise>
struct _ast1408; // FunctionProto Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _ast1409; // TemplateSpecialization Local<v8::Promise>
struct _ast1410; // CXXMethod New
struct _ast1411; // ParmVar isolate
struct _ast1412; // ParmVar that
struct _ast1413; // LValueReference const PersistentBase<v8::Promise> &
struct _ast1414; // TemplateSpecialization const PersistentBase<v8::Promise>
struct _ast1415; // TemplateSpecialization PersistentBase<v8::Promise>
struct _ast1416; // FunctionProto Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
struct _ast1417; // TemplateSpecialization Local<v8::Promise>
struct _ast1418; // CXXMethod New
struct _ast1419; // ParmVar isolate
struct _ast1420; // ParmVar that
struct _ast1421; // LValueReference const TracedGlobal<v8::Promise> &
struct _ast1422; // TemplateSpecialization const TracedGlobal<v8::Promise>
struct _ast1423; // TemplateSpecialization TracedGlobal<v8::Promise>
struct _ast1424; // FunctionProto Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
struct _ast1425; // TemplateSpecialization Local<v8::Promise>
struct _ast1426; // CXXConstructor Local
struct _ast1427; // ParmVar 
struct _ast1428; // LValueReference const v8::Local<v8::Promise> &
struct _ast1429; // FunctionProto void (const v8::Local<v8::Promise> &) noexcept
struct _ast1430; // CXXConstructor Local
struct _ast1431; // ParmVar 
struct _ast1432; // RValueReference v8::Local<v8::Promise> &&
struct _ast1433; // FunctionProto void (v8::Local<v8::Promise> &&)
struct _ast1434; // ClassTemplateSpecialization Local
struct _ast1435; // Record v8::Local<v8::Uint8Array>
struct _ast1436; // ClassTemplateSpecialization Local
struct _ast1437; // Record v8::Local<v8::Uint8ClampedArray>
struct _ast1438; // ClassTemplateSpecialization Local
struct _ast1439; // Record v8::Local<v8::Int8Array>
struct _ast1440; // ClassTemplateSpecialization Local
struct _ast1441; // Record v8::Local<v8::Uint16Array>
struct _ast1442; // ClassTemplateSpecialization Local
struct _ast1443; // Record v8::Local<v8::Int16Array>
struct _ast1444; // ClassTemplateSpecialization Local
struct _ast1445; // Record v8::Local<v8::Uint32Array>
struct _ast1446; // ClassTemplateSpecialization Local
struct _ast1447; // Record v8::Local<v8::Int32Array>
struct _ast1448; // ClassTemplateSpecialization Local
struct _ast1449; // Record v8::Local<v8::Float32Array>
struct _ast1450; // ClassTemplateSpecialization Local
struct _ast1451; // Record v8::Local<v8::Float64Array>
struct _ast1452; // ClassTemplateSpecialization Local
struct _ast1453; // Record v8::Local<v8::BigInt64Array>
struct _ast1454; // ClassTemplateSpecialization Local
struct _ast1455; // Record v8::Local<v8::BigUint64Array>
struct _ast1456; // ClassTemplateSpecialization Local
struct _ast1457; // Record v8::Local<v8::DataView>
struct _ast1458; // ClassTemplateSpecialization Local
struct _ast1459; // Record v8::Local<v8::External>
struct _ast1460; // ClassTemplateSpecialization Local
struct _ast1461; // Record v8::Local<v8::Data>
struct _ast1462; // CXXConstructor Local
struct _ast1463; // Pointer v8::Local<v8::Data> *
struct _ast1464; // FunctionTemplate Local
struct _ast1465; // TemplateTypeParm S
struct _ast1466; // TemplateTypeParm S
struct _ast1467; // CXXConstructor Local
struct _ast1468; // ParmVar that
struct _ast1469; // TemplateSpecialization Local<S>
struct _ast1470; // FunctionProto void (Local<S>)
struct _ast1471; // CXXConstructor Local
struct _ast1472; // ParmVar that
struct _ast1473; // TemplateSpecialization Local<v8::Data>
struct _ast1474; // FunctionProto void (Local<v8::Data>)
struct _ast1475; // CXXMethod IsEmpty
struct _ast1476; // Pointer const v8::Local<v8::Data> *
struct _ast1477; // Record const v8::Local<v8::Data>
struct _ast1478; // CXXMethod Clear
struct _ast1479; // CXXMethod operator->
struct _ast1480; // FunctionProto v8::Data *() const
struct _ast1481; // Pointer v8::Data *
struct _ast1482; // SubstTemplateTypeParm v8::Data
struct _ast1483; // CXXMethod operator*
struct _ast1484; // FunctionTemplate operator==
struct _ast1485; // TemplateTypeParm S
struct _ast1486; // TemplateTypeParm S
struct _ast1487; // CXXMethod operator==
struct _ast1488; // ParmVar that
struct _ast1489; // LValueReference const Local<S> &
struct _ast1490; // TemplateSpecialization const Local<S>
struct _ast1491; // TemplateSpecialization Local<S>
struct _ast1492; // FunctionProto bool (const Local<S> &) const
struct _ast1493; // FunctionTemplate operator==
struct _ast1494; // TemplateTypeParm S
struct _ast1495; // TemplateTypeParm S
struct _ast1496; // CXXMethod operator==
struct _ast1497; // ParmVar that
struct _ast1498; // LValueReference const PersistentBase<S> &
struct _ast1499; // TemplateSpecialization const PersistentBase<S>
struct _ast1500; // TemplateSpecialization PersistentBase<S>
struct _ast1501; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1502; // FunctionTemplate operator!=
struct _ast1503; // TemplateTypeParm S
struct _ast1504; // TemplateTypeParm S
struct _ast1505; // CXXMethod operator!=
struct _ast1506; // ParmVar that
struct _ast1507; // LValueReference const Local<S> &
struct _ast1508; // TemplateSpecialization const Local<S>
struct _ast1509; // TemplateSpecialization Local<S>
struct _ast1510; // FunctionProto bool (const Local<S> &) const
struct _ast1511; // FunctionTemplate operator!=
struct _ast1512; // TemplateTypeParm S
struct _ast1513; // TemplateTypeParm S
struct _ast1514; // CXXMethod operator!=
struct _ast1515; // ParmVar that
struct _ast1516; // LValueReference const Persistent<S> &
struct _ast1517; // TemplateSpecialization const Persistent<S>
struct _ast1518; // TemplateSpecialization Persistent<S>
struct _ast1519; // FunctionProto bool (const Persistent<S> &) const
struct _ast1520; // FunctionTemplate Cast
struct _ast1521; // TemplateTypeParm S
struct _ast1522; // TemplateTypeParm S
struct _ast1523; // CXXMethod Cast
struct _ast1524; // ParmVar that
struct _ast1525; // TemplateSpecialization Local<S>
struct _ast1526; // FunctionProto Local<v8::Data> (Local<S>)
struct _ast1527; // TemplateSpecialization Local<v8::Data>
struct _ast1528; // FunctionTemplate As
struct _ast1529; // TemplateTypeParm S
struct _ast1530; // TemplateTypeParm S
struct _ast1531; // CXXMethod As
struct _ast1532; // FunctionProto Local<S> () const
struct _ast1533; // TemplateSpecialization Local<S>
struct _ast1534; // CXXMethod New
struct _ast1535; // ParmVar isolate
struct _ast1536; // ParmVar that
struct _ast1537; // TemplateSpecialization Local<v8::Data>
struct _ast1538; // FunctionProto Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _ast1539; // TemplateSpecialization Local<v8::Data>
struct _ast1540; // CXXMethod New
struct _ast1541; // ParmVar isolate
struct _ast1542; // ParmVar that
struct _ast1543; // LValueReference const PersistentBase<v8::Data> &
struct _ast1544; // TemplateSpecialization const PersistentBase<v8::Data>
struct _ast1545; // TemplateSpecialization PersistentBase<v8::Data>
struct _ast1546; // FunctionProto Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
struct _ast1547; // TemplateSpecialization Local<v8::Data>
struct _ast1548; // CXXMethod New
struct _ast1549; // ParmVar isolate
struct _ast1550; // ParmVar that
struct _ast1551; // LValueReference const TracedGlobal<v8::Data> &
struct _ast1552; // TemplateSpecialization const TracedGlobal<v8::Data>
struct _ast1553; // TemplateSpecialization TracedGlobal<v8::Data>
struct _ast1554; // FunctionProto Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
struct _ast1555; // TemplateSpecialization Local<v8::Data>
struct _ast1556; // CXXConstructor Local
struct _ast1557; // ParmVar 
struct _ast1558; // LValueReference const v8::Local<v8::Data> &
struct _ast1559; // FunctionProto void (const v8::Local<v8::Data> &) noexcept
struct _ast1560; // CXXConstructor Local
struct _ast1561; // ParmVar 
struct _ast1562; // RValueReference v8::Local<v8::Data> &&
struct _ast1563; // FunctionProto void (v8::Local<v8::Data> &&)
struct _ast1564; // CXXDestructor ~Local
struct _ast1565; // ClassTemplateSpecialization Local
struct _ast1566; // Record v8::Local<v8::AccessorSignature>
struct _ast1567; // CXXConstructor Local
struct _ast1568; // Pointer v8::Local<v8::AccessorSignature> *
struct _ast1569; // FunctionTemplate Local
struct _ast1570; // TemplateTypeParm S
struct _ast1571; // TemplateTypeParm S
struct _ast1572; // CXXConstructor Local
struct _ast1573; // ParmVar that
struct _ast1574; // TemplateSpecialization Local<S>
struct _ast1575; // FunctionProto void (Local<S>)
struct _ast1576; // CXXConstructor Local
struct _ast1577; // ParmVar that
struct _ast1578; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast1579; // FunctionProto void (Local<v8::AccessorSignature>)
struct _ast1580; // CXXMethod IsEmpty
struct _ast1581; // Pointer const v8::Local<v8::AccessorSignature> *
struct _ast1582; // Record const v8::Local<v8::AccessorSignature>
struct _ast1583; // CXXMethod Clear
struct _ast1584; // CXXMethod operator->
struct _ast1585; // FunctionProto v8::AccessorSignature *() const
struct _ast1586; // Pointer v8::AccessorSignature *
struct _ast1587; // SubstTemplateTypeParm v8::AccessorSignature
struct _ast1588; // CXXMethod operator*
struct _ast1589; // FunctionTemplate operator==
struct _ast1590; // TemplateTypeParm S
struct _ast1591; // TemplateTypeParm S
struct _ast1592; // CXXMethod operator==
struct _ast1593; // ParmVar that
struct _ast1594; // LValueReference const Local<S> &
struct _ast1595; // TemplateSpecialization const Local<S>
struct _ast1596; // TemplateSpecialization Local<S>
struct _ast1597; // FunctionProto bool (const Local<S> &) const
struct _ast1598; // FunctionTemplate operator==
struct _ast1599; // TemplateTypeParm S
struct _ast1600; // TemplateTypeParm S
struct _ast1601; // CXXMethod operator==
struct _ast1602; // ParmVar that
struct _ast1603; // LValueReference const PersistentBase<S> &
struct _ast1604; // TemplateSpecialization const PersistentBase<S>
struct _ast1605; // TemplateSpecialization PersistentBase<S>
struct _ast1606; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1607; // FunctionTemplate operator!=
struct _ast1608; // TemplateTypeParm S
struct _ast1609; // TemplateTypeParm S
struct _ast1610; // CXXMethod operator!=
struct _ast1611; // ParmVar that
struct _ast1612; // LValueReference const Local<S> &
struct _ast1613; // TemplateSpecialization const Local<S>
struct _ast1614; // TemplateSpecialization Local<S>
struct _ast1615; // FunctionProto bool (const Local<S> &) const
struct _ast1616; // FunctionTemplate operator!=
struct _ast1617; // TemplateTypeParm S
struct _ast1618; // TemplateTypeParm S
struct _ast1619; // CXXMethod operator!=
struct _ast1620; // ParmVar that
struct _ast1621; // LValueReference const Persistent<S> &
struct _ast1622; // TemplateSpecialization const Persistent<S>
struct _ast1623; // TemplateSpecialization Persistent<S>
struct _ast1624; // FunctionProto bool (const Persistent<S> &) const
struct _ast1625; // FunctionTemplate Cast
struct _ast1626; // TemplateTypeParm S
struct _ast1627; // TemplateTypeParm S
struct _ast1628; // CXXMethod Cast
struct _ast1629; // ParmVar that
struct _ast1630; // TemplateSpecialization Local<S>
struct _ast1631; // FunctionProto Local<v8::AccessorSignature> (Local<S>)
struct _ast1632; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast1633; // FunctionTemplate As
struct _ast1634; // TemplateTypeParm S
struct _ast1635; // TemplateTypeParm S
struct _ast1636; // CXXMethod As
struct _ast1637; // FunctionProto Local<S> () const
struct _ast1638; // TemplateSpecialization Local<S>
struct _ast1639; // CXXMethod New
struct _ast1640; // ParmVar isolate
struct _ast1641; // ParmVar that
struct _ast1642; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast1643; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
struct _ast1644; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast1645; // CXXMethod New
struct _ast1646; // ParmVar isolate
struct _ast1647; // ParmVar that
struct _ast1648; // LValueReference const PersistentBase<v8::AccessorSignature> &
struct _ast1649; // TemplateSpecialization const PersistentBase<v8::AccessorSignature>
struct _ast1650; // TemplateSpecialization PersistentBase<v8::AccessorSignature>
struct _ast1651; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
struct _ast1652; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast1653; // CXXMethod New
struct _ast1654; // ParmVar isolate
struct _ast1655; // ParmVar that
struct _ast1656; // LValueReference const TracedGlobal<v8::AccessorSignature> &
struct _ast1657; // TemplateSpecialization const TracedGlobal<v8::AccessorSignature>
struct _ast1658; // TemplateSpecialization TracedGlobal<v8::AccessorSignature>
struct _ast1659; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
struct _ast1660; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast1661; // CXXConstructor Local
struct _ast1662; // ParmVar 
struct _ast1663; // LValueReference const v8::Local<v8::AccessorSignature> &
struct _ast1664; // FunctionProto void (const v8::Local<v8::AccessorSignature> &)
struct _ast1665; // CXXConstructor Local
struct _ast1666; // ParmVar 
struct _ast1667; // RValueReference v8::Local<v8::AccessorSignature> &&
struct _ast1668; // FunctionProto void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _ast1669; // CXXDestructor ~Local
struct _ast1670; // ClassTemplateSpecialization Local
struct _ast1671; // Record v8::Local<v8::Signature>
struct _ast1672; // CXXConstructor Local
struct _ast1673; // Pointer v8::Local<v8::Signature> *
struct _ast1674; // FunctionTemplate Local
struct _ast1675; // TemplateTypeParm S
struct _ast1676; // TemplateTypeParm S
struct _ast1677; // CXXConstructor Local
struct _ast1678; // ParmVar that
struct _ast1679; // TemplateSpecialization Local<S>
struct _ast1680; // FunctionProto void (Local<S>)
struct _ast1681; // CXXConstructor Local
struct _ast1682; // ParmVar that
struct _ast1683; // TemplateSpecialization Local<v8::Signature>
struct _ast1684; // FunctionProto void (Local<v8::Signature>)
struct _ast1685; // CXXMethod IsEmpty
struct _ast1686; // Pointer const v8::Local<v8::Signature> *
struct _ast1687; // Record const v8::Local<v8::Signature>
struct _ast1688; // CXXMethod Clear
struct _ast1689; // CXXMethod operator->
struct _ast1690; // FunctionProto v8::Signature *() const
struct _ast1691; // Pointer v8::Signature *
struct _ast1692; // SubstTemplateTypeParm v8::Signature
struct _ast1693; // CXXMethod operator*
struct _ast1694; // FunctionTemplate operator==
struct _ast1695; // TemplateTypeParm S
struct _ast1696; // TemplateTypeParm S
struct _ast1697; // CXXMethod operator==
struct _ast1698; // ParmVar that
struct _ast1699; // LValueReference const Local<S> &
struct _ast1700; // TemplateSpecialization const Local<S>
struct _ast1701; // TemplateSpecialization Local<S>
struct _ast1702; // FunctionProto bool (const Local<S> &) const
struct _ast1703; // FunctionTemplate operator==
struct _ast1704; // TemplateTypeParm S
struct _ast1705; // TemplateTypeParm S
struct _ast1706; // CXXMethod operator==
struct _ast1707; // ParmVar that
struct _ast1708; // LValueReference const PersistentBase<S> &
struct _ast1709; // TemplateSpecialization const PersistentBase<S>
struct _ast1710; // TemplateSpecialization PersistentBase<S>
struct _ast1711; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1712; // FunctionTemplate operator!=
struct _ast1713; // TemplateTypeParm S
struct _ast1714; // TemplateTypeParm S
struct _ast1715; // CXXMethod operator!=
struct _ast1716; // ParmVar that
struct _ast1717; // LValueReference const Local<S> &
struct _ast1718; // TemplateSpecialization const Local<S>
struct _ast1719; // TemplateSpecialization Local<S>
struct _ast1720; // FunctionProto bool (const Local<S> &) const
struct _ast1721; // FunctionTemplate operator!=
struct _ast1722; // TemplateTypeParm S
struct _ast1723; // TemplateTypeParm S
struct _ast1724; // CXXMethod operator!=
struct _ast1725; // ParmVar that
struct _ast1726; // LValueReference const Persistent<S> &
struct _ast1727; // TemplateSpecialization const Persistent<S>
struct _ast1728; // TemplateSpecialization Persistent<S>
struct _ast1729; // FunctionProto bool (const Persistent<S> &) const
struct _ast1730; // FunctionTemplate Cast
struct _ast1731; // TemplateTypeParm S
struct _ast1732; // TemplateTypeParm S
struct _ast1733; // CXXMethod Cast
struct _ast1734; // ParmVar that
struct _ast1735; // TemplateSpecialization Local<S>
struct _ast1736; // FunctionProto Local<v8::Signature> (Local<S>)
struct _ast1737; // TemplateSpecialization Local<v8::Signature>
struct _ast1738; // FunctionTemplate As
struct _ast1739; // TemplateTypeParm S
struct _ast1740; // TemplateTypeParm S
struct _ast1741; // CXXMethod As
struct _ast1742; // FunctionProto Local<S> () const
struct _ast1743; // TemplateSpecialization Local<S>
struct _ast1744; // CXXMethod New
struct _ast1745; // ParmVar isolate
struct _ast1746; // ParmVar that
struct _ast1747; // TemplateSpecialization Local<v8::Signature>
struct _ast1748; // FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
struct _ast1749; // TemplateSpecialization Local<v8::Signature>
struct _ast1750; // CXXMethod New
struct _ast1751; // ParmVar isolate
struct _ast1752; // ParmVar that
struct _ast1753; // LValueReference const PersistentBase<v8::Signature> &
struct _ast1754; // TemplateSpecialization const PersistentBase<v8::Signature>
struct _ast1755; // TemplateSpecialization PersistentBase<v8::Signature>
struct _ast1756; // FunctionProto Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
struct _ast1757; // TemplateSpecialization Local<v8::Signature>
struct _ast1758; // CXXMethod New
struct _ast1759; // ParmVar isolate
struct _ast1760; // ParmVar that
struct _ast1761; // LValueReference const TracedGlobal<v8::Signature> &
struct _ast1762; // TemplateSpecialization const TracedGlobal<v8::Signature>
struct _ast1763; // TemplateSpecialization TracedGlobal<v8::Signature>
struct _ast1764; // FunctionProto Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
struct _ast1765; // TemplateSpecialization Local<v8::Signature>
struct _ast1766; // CXXConstructor Local
struct _ast1767; // ParmVar 
struct _ast1768; // LValueReference const v8::Local<v8::Signature> &
struct _ast1769; // FunctionProto void (const v8::Local<v8::Signature> &)
struct _ast1770; // CXXConstructor Local
struct _ast1771; // ParmVar 
struct _ast1772; // RValueReference v8::Local<v8::Signature> &&
struct _ast1773; // FunctionProto void (v8::Local<v8::Signature> &&) noexcept
struct _ast1774; // CXXDestructor ~Local
struct _ast1775; // ClassTemplateSpecialization Local
struct _ast1776; // Record v8::Local<v8::ObjectTemplate>
struct _ast1777; // ClassTemplateSpecialization Local
struct _ast1778; // Record v8::Local<v8::Message>
struct _ast1779; // ClassTemplateSpecialization Local
struct _ast1780; // Record v8::Local<v8::ScriptOrModule>
struct _ast1781; // ClassTemplateSpecialization Local
struct _ast1782; // Record v8::Local<v8::Template>
struct _ast1783; // ClassTemplate MaybeLocal
struct _ast1784; // TemplateTypeParm T
struct _ast1785; // TemplateTypeParm T
struct _ast1786; // CXXRecord MaybeLocal
struct _ast1787; // InjectedClassName MaybeLocal<T>
struct _ast1788; // ClassTemplateSpecialization MaybeLocal
struct _ast1789; // Record v8::MaybeLocal<v8::Module>
struct _ast1790; // ClassTemplateSpecialization MaybeLocal
struct _ast1791; // Record v8::MaybeLocal<v8::Value>
struct _ast1792; // CXXConstructor MaybeLocal
struct _ast1793; // Pointer v8::MaybeLocal<v8::Value> *
struct _ast1794; // FunctionTemplate MaybeLocal
struct _ast1795; // TemplateTypeParm S
struct _ast1796; // TemplateTypeParm S
struct _ast1797; // CXXConstructor MaybeLocal
struct _ast1798; // ParmVar that
struct _ast1799; // TemplateSpecialization Local<S>
struct _ast1800; // FunctionProto void (Local<S>)
struct _ast1801; // CXXMethod IsEmpty
struct _ast1802; // Pointer const v8::MaybeLocal<v8::Value> *
struct _ast1803; // Record const v8::MaybeLocal<v8::Value>
struct _ast1804; // FunctionTemplate ToLocal
struct _ast1805; // TemplateTypeParm S
struct _ast1806; // TemplateTypeParm S
struct _ast1807; // CXXMethod ToLocal
struct _ast1808; // ParmVar out
struct _ast1809; // Pointer Local<S> *
struct _ast1810; // TemplateSpecialization Local<S>
struct _ast1811; // FunctionProto bool (Local<S> *) const
struct _ast1812; // CXXMethod ToLocalChecked
struct _ast1813; // FunctionProto Local<v8::Value> ()
struct _ast1814; // TemplateSpecialization Local<v8::Value>
struct _ast1815; // FunctionTemplate FromMaybe
struct _ast1816; // TemplateTypeParm S
struct _ast1817; // TemplateTypeParm S
struct _ast1818; // CXXMethod FromMaybe
struct _ast1819; // ParmVar default_value
struct _ast1820; // TemplateSpecialization Local<S>
struct _ast1821; // FunctionProto Local<S> (Local<S>) const
struct _ast1822; // TemplateSpecialization Local<S>
struct _ast1823; // CXXConstructor MaybeLocal
struct _ast1824; // ParmVar 
struct _ast1825; // LValueReference const v8::MaybeLocal<v8::Value> &
struct _ast1826; // FunctionProto void (const v8::MaybeLocal<v8::Value> &)
struct _ast1827; // CXXConstructor MaybeLocal
struct _ast1828; // ParmVar 
struct _ast1829; // RValueReference v8::MaybeLocal<v8::Value> &&
struct _ast1830; // FunctionProto void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _ast1831; // CXXDestructor ~MaybeLocal
struct _ast1832; // ClassTemplateSpecialization MaybeLocal
struct _ast1833; // Record v8::MaybeLocal<v8::Script>
struct _ast1834; // ClassTemplateSpecialization MaybeLocal
struct _ast1835; // Record v8::MaybeLocal<v8::UnboundScript>
struct _ast1836; // ClassTemplateSpecialization MaybeLocal
struct _ast1837; // Record v8::MaybeLocal<v8::Function>
struct _ast1838; // ClassTemplateSpecialization MaybeLocal
struct _ast1839; // Record v8::MaybeLocal<v8::String>
struct _ast1840; // CXXConstructor MaybeLocal
struct _ast1841; // Pointer v8::MaybeLocal<v8::String> *
struct _ast1842; // FunctionTemplate MaybeLocal
struct _ast1843; // TemplateTypeParm S
struct _ast1844; // TemplateTypeParm S
struct _ast1845; // CXXConstructor MaybeLocal
struct _ast1846; // ParmVar that
struct _ast1847; // TemplateSpecialization Local<S>
struct _ast1848; // FunctionProto void (Local<S>)
struct _ast1849; // CXXMethod IsEmpty
struct _ast1850; // Pointer const v8::MaybeLocal<v8::String> *
struct _ast1851; // Record const v8::MaybeLocal<v8::String>
struct _ast1852; // FunctionTemplate ToLocal
struct _ast1853; // TemplateTypeParm S
struct _ast1854; // TemplateTypeParm S
struct _ast1855; // CXXMethod ToLocal
struct _ast1856; // ParmVar out
struct _ast1857; // Pointer Local<S> *
struct _ast1858; // TemplateSpecialization Local<S>
struct _ast1859; // FunctionProto bool (Local<S> *) const
struct _ast1860; // CXXMethod ToLocalChecked
struct _ast1861; // FunctionProto Local<v8::String> ()
struct _ast1862; // TemplateSpecialization Local<v8::String>
struct _ast1863; // FunctionTemplate FromMaybe
struct _ast1864; // TemplateTypeParm S
struct _ast1865; // TemplateTypeParm S
struct _ast1866; // CXXMethod FromMaybe
struct _ast1867; // ParmVar default_value
struct _ast1868; // TemplateSpecialization Local<S>
struct _ast1869; // FunctionProto Local<S> (Local<S>) const
struct _ast1870; // TemplateSpecialization Local<S>
struct _ast1871; // CXXDestructor ~MaybeLocal
struct _ast1872; // ClassTemplateSpecialization MaybeLocal
struct _ast1873; // Record v8::MaybeLocal<v8::Object>
struct _ast1874; // CXXConstructor MaybeLocal
struct _ast1875; // Pointer v8::MaybeLocal<v8::Object> *
struct _ast1876; // FunctionTemplate MaybeLocal
struct _ast1877; // TemplateTypeParm S
struct _ast1878; // TemplateTypeParm S
struct _ast1879; // CXXConstructor MaybeLocal
struct _ast1880; // ParmVar that
struct _ast1881; // TemplateSpecialization Local<S>
struct _ast1882; // FunctionProto void (Local<S>)
struct _ast1883; // CXXMethod IsEmpty
struct _ast1884; // Pointer const v8::MaybeLocal<v8::Object> *
struct _ast1885; // Record const v8::MaybeLocal<v8::Object>
struct _ast1886; // FunctionTemplate ToLocal
struct _ast1887; // TemplateTypeParm S
struct _ast1888; // TemplateTypeParm S
struct _ast1889; // CXXMethod ToLocal
struct _ast1890; // ParmVar out
struct _ast1891; // Pointer Local<S> *
struct _ast1892; // TemplateSpecialization Local<S>
struct _ast1893; // FunctionProto bool (Local<S> *) const
struct _ast1894; // CXXMethod ToLocalChecked
struct _ast1895; // FunctionProto Local<v8::Object> ()
struct _ast1896; // TemplateSpecialization Local<v8::Object>
struct _ast1897; // FunctionTemplate FromMaybe
struct _ast1898; // TemplateTypeParm S
struct _ast1899; // TemplateTypeParm S
struct _ast1900; // CXXMethod FromMaybe
struct _ast1901; // ParmVar default_value
struct _ast1902; // TemplateSpecialization Local<S>
struct _ast1903; // FunctionProto Local<S> (Local<S>) const
struct _ast1904; // TemplateSpecialization Local<S>
struct _ast1905; // CXXDestructor ~MaybeLocal
struct _ast1906; // CXXConstructor MaybeLocal
struct _ast1907; // ParmVar 
struct _ast1908; // LValueReference const v8::MaybeLocal<v8::Object> &
struct _ast1909; // FunctionProto void (const v8::MaybeLocal<v8::Object> &)
struct _ast1910; // CXXConstructor MaybeLocal
struct _ast1911; // ParmVar 
struct _ast1912; // RValueReference v8::MaybeLocal<v8::Object> &&
struct _ast1913; // FunctionProto void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _ast1914; // ClassTemplateSpecialization MaybeLocal
struct _ast1915; // Record v8::MaybeLocal<v8::WasmModuleObject>
struct _ast1916; // ClassTemplateSpecialization MaybeLocal
struct _ast1917; // Record v8::MaybeLocal<v8::SharedArrayBuffer>
struct _ast1918; // ClassTemplateSpecialization MaybeLocal
struct _ast1919; // Record v8::MaybeLocal<v8::BigInt>
struct _ast1920; // ClassTemplateSpecialization MaybeLocal
struct _ast1921; // Record v8::MaybeLocal<v8::Number>
struct _ast1922; // ClassTemplateSpecialization MaybeLocal
struct _ast1923; // Record v8::MaybeLocal<v8::Integer>
struct _ast1924; // ClassTemplateSpecialization MaybeLocal
struct _ast1925; // Record v8::MaybeLocal<v8::Uint32>
struct _ast1926; // ClassTemplateSpecialization MaybeLocal
struct _ast1927; // Record v8::MaybeLocal<v8::Int32>
struct _ast1928; // ClassTemplateSpecialization MaybeLocal
struct _ast1929; // Record v8::MaybeLocal<v8::Array>
struct _ast1930; // ClassTemplateSpecialization MaybeLocal
struct _ast1931; // Record v8::MaybeLocal<v8::Map>
struct _ast1932; // ClassTemplateSpecialization MaybeLocal
struct _ast1933; // Record v8::MaybeLocal<v8::Set>
struct _ast1934; // ClassTemplateSpecialization MaybeLocal
struct _ast1935; // Record v8::MaybeLocal<v8::Promise::Resolver>
struct _ast1936; // ClassTemplateSpecialization MaybeLocal
struct _ast1937; // Record v8::MaybeLocal<v8::Promise>
struct _ast1938; // ClassTemplateSpecialization MaybeLocal
struct _ast1939; // Record v8::MaybeLocal<v8::Proxy>
struct _ast1940; // ClassTemplateSpecialization MaybeLocal
struct _ast1941; // Record v8::MaybeLocal<v8::RegExp>
struct _ast1942; // ClassTemplateSpecialization MaybeLocal
struct _ast1943; // Record v8::MaybeLocal<v8::FunctionTemplate>
struct _ast1944; // ClassTemplateSpecialization MaybeLocal
struct _ast1945; // Record v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1946; // CXXConstructor MaybeLocal
struct _ast1947; // Pointer v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1948; // FunctionTemplate MaybeLocal
struct _ast1949; // TemplateTypeParm S
struct _ast1950; // TemplateTypeParm S
struct _ast1951; // CXXConstructor MaybeLocal
struct _ast1952; // ParmVar that
struct _ast1953; // TemplateSpecialization Local<S>
struct _ast1954; // FunctionProto void (Local<S>)
struct _ast1955; // CXXMethod IsEmpty
struct _ast1956; // Pointer const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1957; // Record const v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1958; // FunctionTemplate ToLocal
struct _ast1959; // TemplateTypeParm S
struct _ast1960; // TemplateTypeParm S
struct _ast1961; // CXXMethod ToLocal
struct _ast1962; // ParmVar out
struct _ast1963; // Pointer Local<S> *
struct _ast1964; // TemplateSpecialization Local<S>
struct _ast1965; // FunctionProto bool (Local<S> *) const
struct _ast1966; // CXXMethod ToLocalChecked
struct _ast1967; // FunctionProto Local<v8::ObjectTemplate> ()
struct _ast1968; // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ast1969; // FunctionTemplate FromMaybe
struct _ast1970; // TemplateTypeParm S
struct _ast1971; // TemplateTypeParm S
struct _ast1972; // CXXMethod FromMaybe
struct _ast1973; // ParmVar default_value
struct _ast1974; // TemplateSpecialization Local<S>
struct _ast1975; // FunctionProto Local<S> (Local<S>) const
struct _ast1976; // TemplateSpecialization Local<S>
struct _ast1977; // CXXConstructor MaybeLocal
struct _ast1978; // ParmVar 
struct _ast1979; // LValueReference const v8::MaybeLocal<v8::ObjectTemplate> &
struct _ast1980; // FunctionProto void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ast1981; // CXXConstructor MaybeLocal
struct _ast1982; // ParmVar 
struct _ast1983; // RValueReference v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ast1984; // FunctionProto void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _ast1985; // CXXDestructor ~MaybeLocal
struct _ast1986; // ClassTemplateSpecialization MaybeLocal
struct _ast1987; // Record v8::MaybeLocal<v8::Context>
struct _ast1988; // ClassTemplate Eternal
struct _ast1989; // TemplateTypeParm T
struct _ast1990; // TemplateTypeParm T
struct _ast1991; // CXXRecord Eternal
struct _ast1992; // InjectedClassName Eternal<T>
struct _ast1993; // ClassTemplate NonCopyablePersistentTraits
struct _ast1994; // TemplateTypeParm T
struct _ast1995; // TemplateTypeParm T
struct _ast1996; // CXXRecord NonCopyablePersistentTraits
struct _ast1997; // InjectedClassName NonCopyablePersistentTraits<T>
struct _ast1998; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _ast1999; // Record v8::NonCopyablePersistentTraits<v8::Promise>
struct _ast2000; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _ast2001; // Record v8::NonCopyablePersistentTraits<v8::Value>
struct _ast2002; // ClassTemplate PersistentBase
struct _ast2003; // TemplateTypeParm T
struct _ast2004; // TemplateTypeParm T
struct _ast2005; // CXXRecord PersistentBase
struct _ast2006; // InjectedClassName PersistentBase<T>
struct _ast2007; // ClassTemplateSpecialization PersistentBase
struct _ast2008; // Record v8::PersistentBase<v8::Value>
struct _ast2009; // ClassTemplateSpecialization PersistentBase
struct _ast2010; // Record v8::PersistentBase<v8::Integer>
struct _ast2011; // ClassTemplateSpecialization PersistentBase
struct _ast2012; // Record v8::PersistentBase<v8::PrimitiveArray>
struct _ast2013; // ClassTemplateSpecialization PersistentBase
struct _ast2014; // Record v8::PersistentBase<v8::Boolean>
struct _ast2015; // ClassTemplateSpecialization PersistentBase
struct _ast2016; // Record v8::PersistentBase<v8::String>
struct _ast2017; // ClassTemplateSpecialization PersistentBase
struct _ast2018; // Record v8::PersistentBase<v8::Object>
struct _ast2019; // CXXMethod Reset
struct _ast2020; // Pointer v8::PersistentBase<v8::Object> *
struct _ast2021; // FunctionTemplate Reset
struct _ast2022; // TemplateTypeParm S
struct _ast2023; // TemplateTypeParm S
struct _ast2024; // CXXMethod Reset
struct _ast2025; // ParmVar isolate
struct _ast2026; // ParmVar other
struct _ast2027; // LValueReference const Local<S> &
struct _ast2028; // TemplateSpecialization const Local<S>
struct _ast2029; // TemplateSpecialization Local<S>
struct _ast2030; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2031; // FunctionTemplate Reset
struct _ast2032; // TemplateTypeParm S
struct _ast2033; // TemplateTypeParm S
struct _ast2034; // CXXMethod Reset
struct _ast2035; // ParmVar isolate
struct _ast2036; // ParmVar other
struct _ast2037; // LValueReference const PersistentBase<S> &
struct _ast2038; // TemplateSpecialization const PersistentBase<S>
struct _ast2039; // TemplateSpecialization PersistentBase<S>
struct _ast2040; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2041; // CXXMethod IsEmpty
struct _ast2042; // Pointer const v8::PersistentBase<v8::Object> *
struct _ast2043; // Record const v8::PersistentBase<v8::Object>
struct _ast2044; // CXXMethod Empty
struct _ast2045; // CXXMethod Get
struct _ast2046; // ParmVar isolate
struct _ast2047; // FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _ast2048; // TemplateSpecialization Local<v8::Object>
struct _ast2049; // FunctionTemplate operator==
struct _ast2050; // TemplateTypeParm S
struct _ast2051; // TemplateTypeParm S
struct _ast2052; // CXXMethod operator==
struct _ast2053; // ParmVar that
struct _ast2054; // LValueReference const PersistentBase<S> &
struct _ast2055; // TemplateSpecialization const PersistentBase<S>
struct _ast2056; // TemplateSpecialization PersistentBase<S>
struct _ast2057; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2058; // FunctionTemplate operator==
struct _ast2059; // TemplateTypeParm S
struct _ast2060; // TemplateTypeParm S
struct _ast2061; // CXXMethod operator==
struct _ast2062; // ParmVar that
struct _ast2063; // LValueReference const Local<S> &
struct _ast2064; // TemplateSpecialization const Local<S>
struct _ast2065; // TemplateSpecialization Local<S>
struct _ast2066; // FunctionProto bool (const Local<S> &) const
struct _ast2067; // FunctionTemplate operator!=
struct _ast2068; // TemplateTypeParm S
struct _ast2069; // TemplateTypeParm S
struct _ast2070; // CXXMethod operator!=
struct _ast2071; // ParmVar that
struct _ast2072; // LValueReference const PersistentBase<S> &
struct _ast2073; // TemplateSpecialization const PersistentBase<S>
struct _ast2074; // TemplateSpecialization PersistentBase<S>
struct _ast2075; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2076; // FunctionTemplate operator!=
struct _ast2077; // TemplateTypeParm S
struct _ast2078; // TemplateTypeParm S
struct _ast2079; // CXXMethod operator!=
struct _ast2080; // ParmVar that
struct _ast2081; // LValueReference const Local<S> &
struct _ast2082; // TemplateSpecialization const Local<S>
struct _ast2083; // TemplateSpecialization Local<S>
struct _ast2084; // FunctionProto bool (const Local<S> &) const
struct _ast2085; // FunctionTemplate SetWeak
struct _ast2086; // TemplateTypeParm P
struct _ast2087; // TemplateTypeParm P
struct _ast2088; // CXXMethod SetWeak
struct _ast2089; // ParmVar parameter
struct _ast2090; // Pointer P *
struct _ast2091; // ParmVar callback
struct _ast2092; // DependentName typename WeakCallbackInfo<P>::Callback
struct _ast2093; // ParmVar type
struct _ast2094; // Enum v8::WeakCallbackType
struct _ast2095; // Builtin int
struct _ast2096; // Enum WeakCallbackType
struct _ast2097; // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2098; // CXXMethod SetWeak
struct _ast2099; // FunctionTemplate ClearWeak
struct _ast2100; // TemplateTypeParm P
struct _ast2101; // TemplateTypeParm P
struct _ast2102; // CXXMethod ClearWeak
struct _ast2103; // FunctionProto P *()
struct _ast2104; // Pointer P *
struct _ast2105; // CXXMethod ClearWeak
struct _ast2106; // CXXMethod AnnotateStrongRetainer
struct _ast2107; // ParmVar label
struct _ast2108; // Pointer const char *
struct _ast2109; // Builtin const char
struct _ast2110; // Builtin char
struct _ast2111; // FunctionProto void (const char *)
struct _ast2112; // CXXMethod IsWeak
struct _ast2113; // CXXMethod SetWrapperClassId
struct _ast2114; // ParmVar class_id
struct _ast2115; // Typedef uint16_t
struct _ast2116; // FunctionProto void (uint16_t)
struct _ast2117; // CXXMethod WrapperClassId
struct _ast2118; // FunctionProto uint16_t () const
struct _ast2119; // CXXConstructor PersistentBase
struct _ast2120; // ParmVar other
struct _ast2121; // LValueReference const v8::PersistentBase<v8::Object> &
struct _ast2122; // FunctionProto void (const v8::PersistentBase<v8::Object> &)
struct _ast2123; // CXXMethod operator=
struct _ast2124; // ParmVar 
struct _ast2125; // ClassTemplateSpecialization PersistentBase
struct _ast2126; // Record v8::PersistentBase<v8::Function>
struct _ast2127; // ClassTemplateSpecialization PersistentBase
struct _ast2128; // Record v8::PersistentBase<v8::Context>
struct _ast2129; // ClassTemplateSpecialization PersistentBase
struct _ast2130; // Record v8::PersistentBase<v8::Promise>
struct _ast2131; // CXXMethod Reset
struct _ast2132; // Pointer v8::PersistentBase<v8::Promise> *
struct _ast2133; // FunctionTemplate Reset
struct _ast2134; // TemplateTypeParm S
struct _ast2135; // TemplateTypeParm S
struct _ast2136; // CXXMethod Reset
struct _ast2137; // ParmVar isolate
struct _ast2138; // ParmVar other
struct _ast2139; // LValueReference const Local<S> &
struct _ast2140; // TemplateSpecialization const Local<S>
struct _ast2141; // TemplateSpecialization Local<S>
struct _ast2142; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2143; // FunctionTemplate Reset
struct _ast2144; // TemplateTypeParm S
struct _ast2145; // TemplateTypeParm S
struct _ast2146; // CXXMethod Reset
struct _ast2147; // ParmVar isolate
struct _ast2148; // ParmVar other
struct _ast2149; // LValueReference const PersistentBase<S> &
struct _ast2150; // TemplateSpecialization const PersistentBase<S>
struct _ast2151; // TemplateSpecialization PersistentBase<S>
struct _ast2152; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2153; // CXXMethod IsEmpty
struct _ast2154; // Pointer const v8::PersistentBase<v8::Promise> *
struct _ast2155; // Record const v8::PersistentBase<v8::Promise>
struct _ast2156; // CXXMethod Empty
struct _ast2157; // CXXMethod Get
struct _ast2158; // ParmVar isolate
struct _ast2159; // FunctionProto Local<v8::Promise> (v8::Isolate *) const
struct _ast2160; // TemplateSpecialization Local<v8::Promise>
struct _ast2161; // FunctionTemplate operator==
struct _ast2162; // TemplateTypeParm S
struct _ast2163; // TemplateTypeParm S
struct _ast2164; // CXXMethod operator==
struct _ast2165; // ParmVar that
struct _ast2166; // LValueReference const PersistentBase<S> &
struct _ast2167; // TemplateSpecialization const PersistentBase<S>
struct _ast2168; // TemplateSpecialization PersistentBase<S>
struct _ast2169; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2170; // FunctionTemplate operator==
struct _ast2171; // TemplateTypeParm S
struct _ast2172; // TemplateTypeParm S
struct _ast2173; // CXXMethod operator==
struct _ast2174; // ParmVar that
struct _ast2175; // LValueReference const Local<S> &
struct _ast2176; // TemplateSpecialization const Local<S>
struct _ast2177; // TemplateSpecialization Local<S>
struct _ast2178; // FunctionProto bool (const Local<S> &) const
struct _ast2179; // FunctionTemplate operator!=
struct _ast2180; // TemplateTypeParm S
struct _ast2181; // TemplateTypeParm S
struct _ast2182; // CXXMethod operator!=
struct _ast2183; // ParmVar that
struct _ast2184; // LValueReference const PersistentBase<S> &
struct _ast2185; // TemplateSpecialization const PersistentBase<S>
struct _ast2186; // TemplateSpecialization PersistentBase<S>
struct _ast2187; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2188; // FunctionTemplate operator!=
struct _ast2189; // TemplateTypeParm S
struct _ast2190; // TemplateTypeParm S
struct _ast2191; // CXXMethod operator!=
struct _ast2192; // ParmVar that
struct _ast2193; // LValueReference const Local<S> &
struct _ast2194; // TemplateSpecialization const Local<S>
struct _ast2195; // TemplateSpecialization Local<S>
struct _ast2196; // FunctionProto bool (const Local<S> &) const
struct _ast2197; // FunctionTemplate SetWeak
struct _ast2198; // TemplateTypeParm P
struct _ast2199; // TemplateTypeParm P
struct _ast2200; // CXXMethod SetWeak
struct _ast2201; // ParmVar parameter
struct _ast2202; // Pointer P *
struct _ast2203; // ParmVar callback
struct _ast2204; // DependentName typename WeakCallbackInfo<P>::Callback
struct _ast2205; // ParmVar type
struct _ast2206; // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2207; // CXXMethod SetWeak
struct _ast2208; // FunctionTemplate ClearWeak
struct _ast2209; // TemplateTypeParm P
struct _ast2210; // TemplateTypeParm P
struct _ast2211; // CXXMethod ClearWeak
struct _ast2212; // FunctionProto P *()
struct _ast2213; // Pointer P *
struct _ast2214; // CXXMethod ClearWeak
struct _ast2215; // CXXMethod AnnotateStrongRetainer
struct _ast2216; // ParmVar label
struct _ast2217; // CXXMethod IsWeak
struct _ast2218; // CXXMethod SetWrapperClassId
struct _ast2219; // ParmVar class_id
struct _ast2220; // CXXMethod WrapperClassId
struct _ast2221; // CXXConstructor PersistentBase
struct _ast2222; // ParmVar other
struct _ast2223; // LValueReference const v8::PersistentBase<v8::Promise> &
struct _ast2224; // FunctionProto void (const v8::PersistentBase<v8::Promise> &)
struct _ast2225; // CXXMethod operator=
struct _ast2226; // ParmVar 
struct _ast2227; // ClassTemplateSpecialization PersistentBase
struct _ast2228; // Record v8::PersistentBase<v8::FunctionTemplate>
struct _ast2229; // ClassTemplateSpecialization PersistentBase
struct _ast2230; // Record v8::PersistentBase<v8::AccessorSignature>
struct _ast2231; // ClassTemplateSpecialization PersistentBase
struct _ast2232; // Record v8::PersistentBase<v8::Signature>
struct _ast2233; // ClassTemplateSpecialization PersistentBase
struct _ast2234; // Record v8::PersistentBase<v8::UnboundScript>
struct _ast2235; // ClassTemplateSpecialization PersistentBase
struct _ast2236; // Record v8::PersistentBase<v8::Data>
struct _ast2237; // ClassTemplateSpecialization PersistentBase
struct _ast2238; // Record v8::PersistentBase<v8::Name>
struct _ast2239; // ClassTemplateSpecialization PersistentBase
struct _ast2240; // Record v8::PersistentBase<v8::Primitive>
struct _ast2241; // ClassTemplate Persistent
struct _ast2242; // TemplateTypeParm T
struct _ast2243; // TemplateTypeParm T
struct _ast2244; // TemplateTypeParm M
struct _ast2245; // TemplateTypeParm M
struct _ast2246; // CXXRecord Persistent
struct _ast2247; // InjectedClassName Persistent<T, M>
struct _ast2248; // ClassTemplateSpecialization Persistent
struct _ast2249; // Record v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2250; // CXXConstructor Persistent
struct _ast2251; // Pointer v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2252; // FunctionTemplate Persistent
struct _ast2253; // TemplateTypeParm S
struct _ast2254; // TemplateTypeParm S
struct _ast2255; // CXXConstructor Persistent
struct _ast2256; // ParmVar isolate
struct _ast2257; // ParmVar that
struct _ast2258; // TemplateSpecialization Local<S>
struct _ast2259; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2260; // FunctionTemplate Persistent
struct _ast2261; // TemplateTypeParm S
struct _ast2262; // TemplateTypeParm S
struct _ast2263; // TemplateTypeParm M2
struct _ast2264; // TemplateTypeParm M2
struct _ast2265; // CXXConstructor Persistent
struct _ast2266; // ParmVar isolate
struct _ast2267; // ParmVar that
struct _ast2268; // LValueReference const Persistent<S, M2> &
struct _ast2269; // TemplateSpecialization const Persistent<S, M2>
struct _ast2270; // TemplateSpecialization Persistent<S, M2>
struct _ast2271; // FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2272; // CXXConstructor Persistent
struct _ast2273; // ParmVar that
struct _ast2274; // LValueReference const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2275; // Record const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2276; // FunctionProto void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2277; // FunctionTemplate Persistent
struct _ast2278; // TemplateTypeParm S
struct _ast2279; // TemplateTypeParm S
struct _ast2280; // TemplateTypeParm M2
struct _ast2281; // TemplateTypeParm M2
struct _ast2282; // CXXConstructor Persistent
struct _ast2283; // ParmVar that
struct _ast2284; // LValueReference const Persistent<S, M2> &
struct _ast2285; // TemplateSpecialization const Persistent<S, M2>
struct _ast2286; // TemplateSpecialization Persistent<S, M2>
struct _ast2287; // FunctionProto void (const Persistent<S, M2> &)
struct _ast2288; // CXXConstructor Persistent
struct _ast2289; // ParmVar that
struct _ast2290; // LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2291; // TemplateSpecialization const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2292; // TemplateSpecialization Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2293; // FunctionProto void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2294; // CXXMethod operator=
struct _ast2295; // ParmVar that
struct _ast2296; // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2297; // LValueReference v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2298; // FunctionTemplate operator=
struct _ast2299; // TemplateTypeParm S
struct _ast2300; // TemplateTypeParm S
struct _ast2301; // TemplateTypeParm M2
struct _ast2302; // TemplateTypeParm M2
struct _ast2303; // CXXMethod operator=
struct _ast2304; // ParmVar that
struct _ast2305; // LValueReference const Persistent<S, M2> &
struct _ast2306; // TemplateSpecialization const Persistent<S, M2>
struct _ast2307; // TemplateSpecialization Persistent<S, M2>
struct _ast2308; // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _ast2309; // CXXMethod operator=
struct _ast2310; // ParmVar that
struct _ast2311; // LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2312; // TemplateSpecialization const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2313; // TemplateSpecialization Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2314; // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2315; // CXXDestructor ~Persistent
struct _ast2316; // FunctionProto void ()
struct _ast2317; // FunctionTemplate Cast
struct _ast2318; // TemplateTypeParm S
struct _ast2319; // TemplateTypeParm S
struct _ast2320; // CXXMethod Cast
struct _ast2321; // ParmVar that
struct _ast2322; // LValueReference const Persistent<S> &
struct _ast2323; // TemplateSpecialization const Persistent<S>
struct _ast2324; // TemplateSpecialization Persistent<S>
struct _ast2325; // FunctionProto Persistent<v8::Promise> &(const Persistent<S> &)
struct _ast2326; // LValueReference Persistent<v8::Promise> &
struct _ast2327; // TemplateSpecialization Persistent<v8::Promise>
struct _ast2328; // FunctionTemplate As
struct _ast2329; // TemplateTypeParm S
struct _ast2330; // TemplateTypeParm S
struct _ast2331; // CXXMethod As
struct _ast2332; // FunctionProto Persistent<S> &() const
struct _ast2333; // LValueReference Persistent<S> &
struct _ast2334; // TemplateSpecialization Persistent<S>
struct _ast2335; // Pointer const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2336; // ClassTemplateSpecialization Persistent
struct _ast2337; // Record v8::Persistent<v8::Promise, v8::NonCopyablePersistentTraits<v8::Promise> >
struct _ast2338; // ClassTemplateSpecialization Persistent
struct _ast2339; // Record v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >
struct _ast2340; // ClassTemplate Global
struct _ast2341; // TemplateTypeParm T
struct _ast2342; // TemplateTypeParm T
struct _ast2343; // CXXRecord Global
struct _ast2344; // InjectedClassName Global<T>
struct _ast2345; // ClassTemplate TracedGlobal
struct _ast2346; // TemplateTypeParm T
struct _ast2347; // TemplateTypeParm T
struct _ast2348; // CXXRecord TracedGlobal
struct _ast2349; // InjectedClassName TracedGlobal<T>
struct _ast2350; // ClassTemplateSpecialization TracedGlobal
struct _ast2351; // Record v8::TracedGlobal<v8::Value>
struct _ast2352; // ClassTemplateSpecialization TracedGlobal
struct _ast2353; // Record v8::TracedGlobal<v8::Integer>
struct _ast2354; // ClassTemplateSpecialization TracedGlobal
struct _ast2355; // Record v8::TracedGlobal<v8::PrimitiveArray>
struct _ast2356; // ClassTemplateSpecialization TracedGlobal
struct _ast2357; // Record v8::TracedGlobal<v8::Boolean>
struct _ast2358; // ClassTemplateSpecialization TracedGlobal
struct _ast2359; // Record v8::TracedGlobal<v8::String>
struct _ast2360; // ClassTemplateSpecialization TracedGlobal
struct _ast2361; // Record v8::TracedGlobal<v8::Object>
struct _ast2362; // CXXConstructor TracedGlobal
struct _ast2363; // FunctionProto void ()
struct _ast2364; // Pointer v8::TracedGlobal<v8::Object> *
struct _ast2365; // CXXDestructor ~TracedGlobal
struct _ast2366; // FunctionProto void ()
struct _ast2367; // FunctionTemplate TracedGlobal
struct _ast2368; // TemplateTypeParm S
struct _ast2369; // TemplateTypeParm S
struct _ast2370; // CXXConstructor TracedGlobal
struct _ast2371; // ParmVar isolate
struct _ast2372; // ParmVar that
struct _ast2373; // TemplateSpecialization Local<S>
struct _ast2374; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2375; // CXXConstructor TracedGlobal
struct _ast2376; // ParmVar other
struct _ast2377; // RValueReference v8::TracedGlobal<v8::Object> &&
struct _ast2378; // FunctionProto void (v8::TracedGlobal<v8::Object> &&)
struct _ast2379; // FunctionTemplate operator=
struct _ast2380; // TemplateTypeParm S
struct _ast2381; // TemplateTypeParm S
struct _ast2382; // CXXMethod operator=
struct _ast2383; // ParmVar rhs
struct _ast2384; // RValueReference TracedGlobal<S> &&
struct _ast2385; // TemplateSpecialization TracedGlobal<S>
struct _ast2386; // FunctionProto v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _ast2387; // LValueReference v8::TracedGlobal<v8::Object> &
struct _ast2388; // CXXConstructor TracedGlobal
struct _ast2389; // ParmVar 
struct _ast2390; // LValueReference const v8::TracedGlobal<v8::Object> &
struct _ast2391; // Record const v8::TracedGlobal<v8::Object>
struct _ast2392; // FunctionProto void (const v8::TracedGlobal<v8::Object> &)
struct _ast2393; // CXXMethod operator=
struct _ast2394; // ParmVar 
struct _ast2395; // CXXMethod IsEmpty
struct _ast2396; // Pointer const v8::TracedGlobal<v8::Object> *
struct _ast2397; // CXXMethod Reset
struct _ast2398; // FunctionTemplate Reset
struct _ast2399; // TemplateTypeParm S
struct _ast2400; // TemplateTypeParm S
struct _ast2401; // CXXMethod Reset
struct _ast2402; // ParmVar isolate
struct _ast2403; // ParmVar other
struct _ast2404; // LValueReference const Local<S> &
struct _ast2405; // TemplateSpecialization const Local<S>
struct _ast2406; // TemplateSpecialization Local<S>
struct _ast2407; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2408; // CXXMethod Get
struct _ast2409; // ParmVar isolate
struct _ast2410; // FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _ast2411; // TemplateSpecialization Local<v8::Object>
struct _ast2412; // FunctionTemplate As
struct _ast2413; // TemplateTypeParm S
struct _ast2414; // TemplateTypeParm S
struct _ast2415; // CXXMethod As
struct _ast2416; // FunctionProto TracedGlobal<S> &() const
struct _ast2417; // LValueReference TracedGlobal<S> &
struct _ast2418; // TemplateSpecialization TracedGlobal<S>
struct _ast2419; // FunctionTemplate operator==
struct _ast2420; // TemplateTypeParm S
struct _ast2421; // TemplateTypeParm S
struct _ast2422; // CXXMethod operator==
struct _ast2423; // ParmVar that
struct _ast2424; // LValueReference const TracedGlobal<S> &
struct _ast2425; // TemplateSpecialization const TracedGlobal<S>
struct _ast2426; // TemplateSpecialization TracedGlobal<S>
struct _ast2427; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast2428; // FunctionTemplate operator==
struct _ast2429; // TemplateTypeParm S
struct _ast2430; // TemplateTypeParm S
struct _ast2431; // CXXMethod operator==
struct _ast2432; // ParmVar that
struct _ast2433; // LValueReference const Local<S> &
struct _ast2434; // TemplateSpecialization const Local<S>
struct _ast2435; // TemplateSpecialization Local<S>
struct _ast2436; // FunctionProto bool (const Local<S> &) const
struct _ast2437; // FunctionTemplate operator!=
struct _ast2438; // TemplateTypeParm S
struct _ast2439; // TemplateTypeParm S
struct _ast2440; // CXXMethod operator!=
struct _ast2441; // ParmVar that
struct _ast2442; // LValueReference const TracedGlobal<S> &
struct _ast2443; // TemplateSpecialization const TracedGlobal<S>
struct _ast2444; // TemplateSpecialization TracedGlobal<S>
struct _ast2445; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast2446; // FunctionTemplate operator!=
struct _ast2447; // TemplateTypeParm S
struct _ast2448; // TemplateTypeParm S
struct _ast2449; // CXXMethod operator!=
struct _ast2450; // ParmVar that
struct _ast2451; // LValueReference const Local<S> &
struct _ast2452; // TemplateSpecialization const Local<S>
struct _ast2453; // TemplateSpecialization Local<S>
struct _ast2454; // FunctionProto bool (const Local<S> &) const
struct _ast2455; // CXXMethod SetWrapperClassId
struct _ast2456; // ParmVar class_id
struct _ast2457; // CXXMethod WrapperClassId
struct _ast2458; // CXXMethod SetFinalizationCallback
struct _ast2459; // ParmVar parameter
struct _ast2460; // Pointer void *
struct _ast2461; // ParmVar callback
struct _ast2462; // Elaborated WeakCallbackInfo<void>::Callback
struct _ast2463; // FunctionProto void (void *, WeakCallbackInfo<void>::Callback)
struct _ast2464; // ClassTemplateSpecialization TracedGlobal
struct _ast2465; // Record v8::TracedGlobal<v8::Function>
struct _ast2466; // ClassTemplateSpecialization TracedGlobal
struct _ast2467; // Record v8::TracedGlobal<v8::Context>
struct _ast2468; // ClassTemplateSpecialization TracedGlobal
struct _ast2469; // Record v8::TracedGlobal<v8::FunctionTemplate>
struct _ast2470; // ClassTemplateSpecialization TracedGlobal
struct _ast2471; // Record v8::TracedGlobal<v8::AccessorSignature>
struct _ast2472; // ClassTemplateSpecialization TracedGlobal
struct _ast2473; // Record v8::TracedGlobal<v8::Signature>
struct _ast2474; // ClassTemplateSpecialization TracedGlobal
struct _ast2475; // Record v8::TracedGlobal<v8::Promise>
struct _ast2476; // ClassTemplateSpecialization TracedGlobal
struct _ast2477; // Record v8::TracedGlobal<v8::UnboundScript>
struct _ast2478; // ClassTemplateSpecialization TracedGlobal
struct _ast2479; // Record v8::TracedGlobal<v8::Data>
struct _ast2480; // ClassTemplateSpecialization TracedGlobal
struct _ast2481; // Record v8::TracedGlobal<v8::Name>
struct _ast2482; // ClassTemplateSpecialization TracedGlobal
struct _ast2483; // Record v8::TracedGlobal<v8::Primitive>
struct _ast2484; // ClassTemplate PersistentValueMap
struct _ast2485; // TemplateTypeParm K
struct _ast2486; // TemplateTypeParm K
struct _ast2487; // TemplateTypeParm V
struct _ast2488; // TemplateTypeParm V
struct _ast2489; // TemplateTypeParm T
struct _ast2490; // TemplateTypeParm T
struct _ast2491; // CXXRecord PersistentValueMap
struct _ast2492; // InjectedClassName PersistentValueMap<K, V, T>
struct _ast2493; // ClassTemplate PersistentValueMapBase
struct _ast2494; // TemplateTypeParm K
struct _ast2495; // TemplateTypeParm K
struct _ast2496; // TemplateTypeParm V
struct _ast2497; // TemplateTypeParm V
struct _ast2498; // TemplateTypeParm T
struct _ast2499; // TemplateTypeParm T
struct _ast2500; // CXXRecord PersistentValueMapBase
struct _ast2501; // InjectedClassName PersistentValueMapBase<K, V, T>
struct _ast2502; // ClassTemplate GlobalValueMap
struct _ast2503; // TemplateTypeParm K
struct _ast2504; // TemplateTypeParm K
struct _ast2505; // TemplateTypeParm V
struct _ast2506; // TemplateTypeParm V
struct _ast2507; // TemplateTypeParm T
struct _ast2508; // TemplateTypeParm T
struct _ast2509; // CXXRecord GlobalValueMap
struct _ast2510; // InjectedClassName GlobalValueMap<K, V, T>
struct _ast2511; // ClassTemplate PersistentValueVector
struct _ast2512; // TemplateTypeParm V
struct _ast2513; // TemplateTypeParm V
struct _ast2514; // TemplateTypeParm T
struct _ast2515; // TemplateTypeParm T
struct _ast2516; // CXXRecord PersistentValueVector
struct _ast2517; // InjectedClassName PersistentValueVector<V, T>
struct _ast2518; // ClassTemplate WeakCallbackObject
struct _ast2519; // TemplateTypeParm T
struct _ast2520; // TemplateTypeParm T
struct _ast2521; // TemplateTypeParm P
struct _ast2522; // TemplateTypeParm P
struct _ast2523; // CXXRecord WeakCallbackObject
struct _ast2524; // InjectedClassName WeakCallbackObject<T, P>
struct _ast2525; // ClassTemplate FunctionCallbackInfo
struct _ast2526; // TemplateTypeParm T
struct _ast2527; // TemplateTypeParm T
struct _ast2528; // CXXRecord FunctionCallbackInfo
struct _ast2529; // InjectedClassName FunctionCallbackInfo<T>
struct _ast2530; // ClassTemplateSpecialization FunctionCallbackInfo
struct _ast2531; // Record v8::FunctionCallbackInfo<v8::Value>
struct _ast2532; // ClassTemplate PropertyCallbackInfo
struct _ast2533; // TemplateTypeParm T
struct _ast2534; // TemplateTypeParm T
struct _ast2535; // CXXRecord PropertyCallbackInfo
struct _ast2536; // InjectedClassName PropertyCallbackInfo<T>
struct _ast2537; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2538; // Record v8::PropertyCallbackInfo<v8::Value>
struct _ast2539; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2540; // Record v8::PropertyCallbackInfo<void>
struct _ast2541; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2542; // Record v8::PropertyCallbackInfo<v8::Integer>
struct _ast2543; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2544; // Record v8::PropertyCallbackInfo<v8::Boolean>
struct _ast2545; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2546; // Record v8::PropertyCallbackInfo<v8::Array>
struct _ast2547; // CXXRecord CallHandlerHelper
struct _ast2548; // Record v8::CallHandlerHelper
struct _ast2549; // CXXRecord EscapableHandleScope
struct _ast2550; // Record v8::EscapableHandleScope
struct _ast2551; // ClassTemplate ReturnValue
struct _ast2552; // TemplateTypeParm T
struct _ast2553; // TemplateTypeParm T
struct _ast2554; // CXXRecord ReturnValue
struct _ast2555; // InjectedClassName ReturnValue<T>
struct _ast2556; // Namespace debug
struct _ast2557; // CXXRecord ConsoleCallArguments
struct _ast2558; // Record v8::debug::ConsoleCallArguments
struct _ast2559; // TemplateTypeParm T
struct _ast2560; // TemplateTypeParm T
struct _ast2561; // CXXRecord Local
struct _ast2562; // CXXConstructor Local<T>
struct _ast2563; // Pointer Local<T> *
struct _ast2564; // FunctionTemplate Local<T>
struct _ast2565; // TemplateTypeParm S
struct _ast2566; // TemplateTypeParm S
struct _ast2567; // CXXConstructor Local<T>
struct _ast2568; // ParmVar that
struct _ast2569; // TemplateSpecialization Local<S>
struct _ast2570; // FunctionProto void (Local<S>)
struct _ast2571; // CXXMethod IsEmpty
struct _ast2572; // Pointer const Local<T> *
struct _ast2573; // InjectedClassName const Local<T>
struct _ast2574; // CXXMethod Clear
struct _ast2575; // CXXMethod operator->
struct _ast2576; // FunctionProto T *() const
struct _ast2577; // Pointer T *
struct _ast2578; // CXXMethod operator*
struct _ast2579; // FunctionTemplate operator==
struct _ast2580; // TemplateTypeParm S
struct _ast2581; // TemplateTypeParm S
struct _ast2582; // CXXMethod operator==
struct _ast2583; // ParmVar that
struct _ast2584; // LValueReference const Local<S> &
struct _ast2585; // TemplateSpecialization const Local<S>
struct _ast2586; // TemplateSpecialization Local<S>
struct _ast2587; // FunctionProto bool (const Local<S> &) const
struct _ast2588; // FunctionTemplate operator==
struct _ast2589; // TemplateTypeParm S
struct _ast2590; // TemplateTypeParm S
struct _ast2591; // CXXMethod operator==
struct _ast2592; // ParmVar that
struct _ast2593; // LValueReference const PersistentBase<S> &
struct _ast2594; // TemplateSpecialization const PersistentBase<S>
struct _ast2595; // TemplateSpecialization PersistentBase<S>
struct _ast2596; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2597; // FunctionTemplate operator!=
struct _ast2598; // TemplateTypeParm S
struct _ast2599; // TemplateTypeParm S
struct _ast2600; // CXXMethod operator!=
struct _ast2601; // ParmVar that
struct _ast2602; // LValueReference const Local<S> &
struct _ast2603; // TemplateSpecialization const Local<S>
struct _ast2604; // TemplateSpecialization Local<S>
struct _ast2605; // FunctionProto bool (const Local<S> &) const
struct _ast2606; // FunctionTemplate operator!=
struct _ast2607; // TemplateTypeParm S
struct _ast2608; // TemplateTypeParm S
struct _ast2609; // CXXMethod operator!=
struct _ast2610; // ParmVar that
struct _ast2611; // LValueReference const Persistent<S> &
struct _ast2612; // TemplateSpecialization const Persistent<S>
struct _ast2613; // TemplateSpecialization Persistent<S>
struct _ast2614; // FunctionProto bool (const Persistent<S> &) const
struct _ast2615; // FunctionTemplate Cast
struct _ast2616; // TemplateTypeParm S
struct _ast2617; // TemplateTypeParm S
struct _ast2618; // CXXMethod Cast
struct _ast2619; // ParmVar that
struct _ast2620; // TemplateSpecialization Local<S>
struct _ast2621; // FunctionProto Local<T> (Local<S>)
struct _ast2622; // TemplateSpecialization Local<T>
struct _ast2623; // FunctionTemplate As
struct _ast2624; // TemplateTypeParm S
struct _ast2625; // TemplateTypeParm S
struct _ast2626; // CXXMethod As
struct _ast2627; // FunctionProto Local<S> () const
struct _ast2628; // TemplateSpecialization Local<S>
struct _ast2629; // CXXMethod New
struct _ast2630; // ParmVar isolate
struct _ast2631; // ParmVar that
struct _ast2632; // TemplateSpecialization Local<T>
struct _ast2633; // FunctionProto Local<T> (v8::Isolate *, Local<T>)
struct _ast2634; // TemplateSpecialization Local<T>
struct _ast2635; // CXXMethod New
struct _ast2636; // ParmVar isolate
struct _ast2637; // ParmVar that
struct _ast2638; // LValueReference const PersistentBase<T> &
struct _ast2639; // TemplateSpecialization const PersistentBase<T>
struct _ast2640; // TemplateSpecialization PersistentBase<T>
struct _ast2641; // FunctionProto Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _ast2642; // TemplateSpecialization Local<T>
struct _ast2643; // CXXMethod New
struct _ast2644; // ParmVar isolate
struct _ast2645; // ParmVar that
struct _ast2646; // LValueReference const TracedGlobal<T> &
struct _ast2647; // TemplateSpecialization const TracedGlobal<T>
struct _ast2648; // TemplateSpecialization TracedGlobal<T>
struct _ast2649; // FunctionProto Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _ast2650; // TemplateSpecialization Local<T>
struct _ast2651; // TypeAliasTemplate Handle
struct _ast2652; // TypeAlias Handle
struct _ast2653; // Typedef v8::Handle
struct _ast2654; // TemplateTypeParm T
struct _ast2655; // TemplateTypeParm T
struct _ast2656; // TemplateTypeParm T
struct _ast2657; // TemplateTypeParm T
struct _ast2658; // CXXRecord MaybeLocal
struct _ast2659; // CXXConstructor MaybeLocal<T>
struct _ast2660; // Pointer MaybeLocal<T> *
struct _ast2661; // FunctionTemplate MaybeLocal<T>
struct _ast2662; // TemplateTypeParm S
struct _ast2663; // TemplateTypeParm S
struct _ast2664; // CXXConstructor MaybeLocal<T>
struct _ast2665; // ParmVar that
struct _ast2666; // TemplateSpecialization Local<S>
struct _ast2667; // FunctionProto void (Local<S>)
struct _ast2668; // CXXMethod IsEmpty
struct _ast2669; // Pointer const MaybeLocal<T> *
struct _ast2670; // InjectedClassName const MaybeLocal<T>
struct _ast2671; // FunctionTemplate ToLocal
struct _ast2672; // TemplateTypeParm S
struct _ast2673; // TemplateTypeParm S
struct _ast2674; // CXXMethod ToLocal
struct _ast2675; // ParmVar out
struct _ast2676; // Pointer Local<S> *
struct _ast2677; // TemplateSpecialization Local<S>
struct _ast2678; // FunctionProto bool (Local<S> *) const
struct _ast2679; // CXXMethod ToLocalChecked
struct _ast2680; // FunctionProto Local<T> ()
struct _ast2681; // TemplateSpecialization Local<T>
struct _ast2682; // FunctionTemplate FromMaybe
struct _ast2683; // TemplateTypeParm S
struct _ast2684; // TemplateTypeParm S
struct _ast2685; // CXXMethod FromMaybe
struct _ast2686; // ParmVar default_value
struct _ast2687; // TemplateSpecialization Local<S>
struct _ast2688; // FunctionProto Local<S> (Local<S>) const
struct _ast2689; // TemplateSpecialization Local<S>
struct _ast2690; // TemplateTypeParm T
struct _ast2691; // TemplateTypeParm T
struct _ast2692; // CXXRecord Eternal
struct _ast2693; // CXXConstructor Eternal<T>
struct _ast2694; // Pointer Eternal<T> *
struct _ast2695; // FunctionTemplate Eternal<T>
struct _ast2696; // TemplateTypeParm S
struct _ast2697; // TemplateTypeParm S
struct _ast2698; // CXXConstructor Eternal<T>
struct _ast2699; // ParmVar isolate
struct _ast2700; // ParmVar handle
struct _ast2701; // TemplateSpecialization Local<S>
struct _ast2702; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2703; // CXXMethod Get
struct _ast2704; // ParmVar isolate
struct _ast2705; // FunctionProto Local<T> (v8::Isolate *) const
struct _ast2706; // TemplateSpecialization Local<T>
struct _ast2707; // Pointer const Eternal<T> *
struct _ast2708; // InjectedClassName const Eternal<T>
struct _ast2709; // CXXMethod IsEmpty
struct _ast2710; // FunctionTemplate Set
struct _ast2711; // TemplateTypeParm S
struct _ast2712; // TemplateTypeParm S
struct _ast2713; // CXXMethod Set
struct _ast2714; // ParmVar isolate
struct _ast2715; // ParmVar handle
struct _ast2716; // TemplateSpecialization Local<S>
struct _ast2717; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2718; // Var kInternalFieldsInWeakCallback
struct _ast2719; // Var kEmbedderFieldsInWeakCallback
struct _ast2720; // ClassTemplate WeakCallbackInfo
struct _ast2721; // TemplateTypeParm T
struct _ast2722; // TemplateTypeParm T
struct _ast2723; // CXXRecord WeakCallbackInfo
struct _ast2724; // InjectedClassName WeakCallbackInfo<T>
struct _ast2725; // CXXRecord WeakCallbackInfo
struct _ast2726; // Typedef Callback
struct _ast2727; // Typedef v8::WeakCallbackInfo::Callback
struct _ast2728; // CXXConstructor WeakCallbackInfo<T>
struct _ast2729; // ParmVar isolate
struct _ast2730; // ParmVar parameter
struct _ast2731; // Pointer T *
struct _ast2732; // ParmVar embedder_fields
struct _ast2733; // Decayed void **
struct _ast2734; // ParmVar callback
struct _ast2735; // Pointer v8::WeakCallbackInfo::Callback *
struct _ast2736; // FunctionProto void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
struct _ast2737; // Pointer WeakCallbackInfo<T> *
struct _ast2738; // CXXMethod GetIsolate
struct _ast2739; // FunctionProto v8::Isolate *() const
struct _ast2740; // Pointer const WeakCallbackInfo<T> *
struct _ast2741; // InjectedClassName const WeakCallbackInfo<T>
struct _ast2742; // CXXMethod GetParameter
struct _ast2743; // FunctionProto T *() const
struct _ast2744; // CXXMethod GetInternalField
struct _ast2745; // ParmVar index
struct _ast2746; // FunctionProto void *(int) const
struct _ast2747; // CXXMethod SetSecondPassCallback
struct _ast2748; // ParmVar callback
struct _ast2749; // FunctionProto void (v8::WeakCallbackInfo::Callback) const
struct _ast2750; // ClassTemplateSpecialization WeakCallbackInfo
struct _ast2751; // Record v8::WeakCallbackInfo<void>
struct _ast2752; // Typedef Callback
struct _ast2753; // Typedef v8::WeakCallbackInfo<void>::Callback
struct _ast2754; // ParmVar data
struct _ast2755; // LValueReference const WeakCallbackInfo<void> &
struct _ast2756; // TemplateSpecialization const WeakCallbackInfo<void>
struct _ast2757; // TemplateSpecialization WeakCallbackInfo<void>
struct _ast2758; // CXXConstructor WeakCallbackInfo
struct _ast2759; // ParmVar isolate
struct _ast2760; // ParmVar parameter
struct _ast2761; // Pointer void *
struct _ast2762; // SubstTemplateTypeParm void
struct _ast2763; // ParmVar embedder_fields
struct _ast2764; // ParmVar callback
struct _ast2765; // Pointer v8::WeakCallbackInfo<void>::Callback *
struct _ast2766; // FunctionProto void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
struct _ast2767; // Pointer v8::WeakCallbackInfo<void> *
struct _ast2768; // CXXMethod GetIsolate
struct _ast2769; // Pointer const v8::WeakCallbackInfo<void> *
struct _ast2770; // Record const v8::WeakCallbackInfo<void>
struct _ast2771; // CXXMethod GetParameter
struct _ast2772; // FunctionProto void *() const
struct _ast2773; // CXXMethod GetInternalField
struct _ast2774; // ParmVar index
struct _ast2775; // CXXMethod SetSecondPassCallback
struct _ast2776; // ParmVar callback
struct _ast2777; // FunctionProto void (v8::WeakCallbackInfo<void>::Callback) const
struct _ast2778; // EnumConstant kParameter
struct _ast2779; // EnumConstant kInternalFields
struct _ast2780; // EnumConstant kFinalizer
struct _ast2781; // TemplateTypeParm T
struct _ast2782; // TemplateTypeParm T
struct _ast2783; // CXXRecord PersistentBase
struct _ast2784; // CXXMethod Reset
struct _ast2785; // Pointer PersistentBase<T> *
struct _ast2786; // FunctionTemplate Reset
struct _ast2787; // TemplateTypeParm S
struct _ast2788; // TemplateTypeParm S
struct _ast2789; // CXXMethod Reset
struct _ast2790; // ParmVar isolate
struct _ast2791; // ParmVar other
struct _ast2792; // LValueReference const Local<S> &
struct _ast2793; // TemplateSpecialization const Local<S>
struct _ast2794; // TemplateSpecialization Local<S>
struct _ast2795; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2796; // FunctionTemplate Reset
struct _ast2797; // TemplateTypeParm S
struct _ast2798; // TemplateTypeParm S
struct _ast2799; // CXXMethod Reset
struct _ast2800; // ParmVar isolate
struct _ast2801; // ParmVar other
struct _ast2802; // LValueReference const PersistentBase<S> &
struct _ast2803; // TemplateSpecialization const PersistentBase<S>
struct _ast2804; // TemplateSpecialization PersistentBase<S>
struct _ast2805; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2806; // CXXMethod IsEmpty
struct _ast2807; // Pointer const PersistentBase<T> *
struct _ast2808; // InjectedClassName const PersistentBase<T>
struct _ast2809; // CXXMethod Empty
struct _ast2810; // CXXMethod Get
struct _ast2811; // ParmVar isolate
struct _ast2812; // FunctionProto Local<T> (v8::Isolate *) const
struct _ast2813; // TemplateSpecialization Local<T>
struct _ast2814; // FunctionTemplate operator==
struct _ast2815; // TemplateTypeParm S
struct _ast2816; // TemplateTypeParm S
struct _ast2817; // CXXMethod operator==
struct _ast2818; // ParmVar that
struct _ast2819; // LValueReference const PersistentBase<S> &
struct _ast2820; // TemplateSpecialization const PersistentBase<S>
struct _ast2821; // TemplateSpecialization PersistentBase<S>
struct _ast2822; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2823; // FunctionTemplate operator==
struct _ast2824; // TemplateTypeParm S
struct _ast2825; // TemplateTypeParm S
struct _ast2826; // CXXMethod operator==
struct _ast2827; // ParmVar that
struct _ast2828; // LValueReference const Local<S> &
struct _ast2829; // TemplateSpecialization const Local<S>
struct _ast2830; // TemplateSpecialization Local<S>
struct _ast2831; // FunctionProto bool (const Local<S> &) const
struct _ast2832; // FunctionTemplate operator!=
struct _ast2833; // TemplateTypeParm S
struct _ast2834; // TemplateTypeParm S
struct _ast2835; // CXXMethod operator!=
struct _ast2836; // ParmVar that
struct _ast2837; // LValueReference const PersistentBase<S> &
struct _ast2838; // TemplateSpecialization const PersistentBase<S>
struct _ast2839; // TemplateSpecialization PersistentBase<S>
struct _ast2840; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2841; // FunctionTemplate operator!=
struct _ast2842; // TemplateTypeParm S
struct _ast2843; // TemplateTypeParm S
struct _ast2844; // CXXMethod operator!=
struct _ast2845; // ParmVar that
struct _ast2846; // LValueReference const Local<S> &
struct _ast2847; // TemplateSpecialization const Local<S>
struct _ast2848; // TemplateSpecialization Local<S>
struct _ast2849; // FunctionProto bool (const Local<S> &) const
struct _ast2850; // FunctionTemplate SetWeak
struct _ast2851; // TemplateTypeParm P
struct _ast2852; // TemplateTypeParm P
struct _ast2853; // CXXMethod SetWeak
struct _ast2854; // ParmVar parameter
struct _ast2855; // Pointer P *
struct _ast2856; // ParmVar callback
struct _ast2857; // DependentName typename WeakCallbackInfo<P>::Callback
struct _ast2858; // ParmVar type
struct _ast2859; // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2860; // CXXMethod SetWeak
struct _ast2861; // FunctionTemplate ClearWeak
struct _ast2862; // TemplateTypeParm P
struct _ast2863; // TemplateTypeParm P
struct _ast2864; // CXXMethod ClearWeak
struct _ast2865; // FunctionProto P *()
struct _ast2866; // Pointer P *
struct _ast2867; // CXXMethod ClearWeak
struct _ast2868; // CXXMethod AnnotateStrongRetainer
struct _ast2869; // ParmVar label
struct _ast2870; // CXXMethod IsWeak
struct _ast2871; // CXXMethod SetWrapperClassId
struct _ast2872; // ParmVar class_id
struct _ast2873; // CXXMethod WrapperClassId
struct _ast2874; // CXXConstructor PersistentBase<T>
struct _ast2875; // ParmVar other
struct _ast2876; // LValueReference const PersistentBase<T> &
struct _ast2877; // FunctionProto void (const PersistentBase<T> &)
struct _ast2878; // CXXMethod operator=
struct _ast2879; // ParmVar 
struct _ast2880; // TemplateTypeParm T
struct _ast2881; // TemplateTypeParm T
struct _ast2882; // CXXRecord NonCopyablePersistentTraits
struct _ast2883; // Typedef NonCopyablePersistent
struct _ast2884; // Typedef v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ast2885; // Var kResetInDestructor
struct _ast2886; // FunctionTemplate Copy
struct _ast2887; // TemplateTypeParm S
struct _ast2888; // TemplateTypeParm S
struct _ast2889; // TemplateTypeParm M
struct _ast2890; // TemplateTypeParm M
struct _ast2891; // CXXMethod Copy
struct _ast2892; // ParmVar source
struct _ast2893; // LValueReference const Persistent<S, M> &
struct _ast2894; // TemplateSpecialization const Persistent<S, M>
struct _ast2895; // TemplateSpecialization Persistent<S, M>
struct _ast2896; // ParmVar dest
struct _ast2897; // Pointer v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ast2898; // FunctionProto void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ast2899; // FunctionTemplate Uncompilable
struct _ast2900; // TemplateTypeParm O
struct _ast2901; // TemplateTypeParm O
struct _ast2902; // CXXMethod Uncompilable
struct _ast2903; // ClassTemplate CopyablePersistentTraits
struct _ast2904; // TemplateTypeParm T
struct _ast2905; // TemplateTypeParm T
struct _ast2906; // CXXRecord CopyablePersistentTraits
struct _ast2907; // InjectedClassName CopyablePersistentTraits<T>
struct _ast2908; // CXXRecord CopyablePersistentTraits
struct _ast2909; // Typedef CopyablePersistent
struct _ast2910; // Typedef v8::CopyablePersistentTraits::CopyablePersistent
struct _ast2911; // Var kResetInDestructor
struct _ast2912; // FunctionTemplate Copy
struct _ast2913; // TemplateTypeParm S
struct _ast2914; // TemplateTypeParm S
struct _ast2915; // TemplateTypeParm M
struct _ast2916; // TemplateTypeParm M
struct _ast2917; // CXXMethod Copy
struct _ast2918; // ParmVar source
struct _ast2919; // LValueReference const Persistent<S, M> &
struct _ast2920; // TemplateSpecialization const Persistent<S, M>
struct _ast2921; // TemplateSpecialization Persistent<S, M>
struct _ast2922; // ParmVar dest
struct _ast2923; // Pointer v8::CopyablePersistentTraits::CopyablePersistent *
struct _ast2924; // FunctionProto void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ast2925; // ClassTemplateSpecialization CopyablePersistentTraits
struct _ast2926; // Record v8::CopyablePersistentTraits<v8::Promise>
struct _ast2927; // TemplateTypeParm T
struct _ast2928; // TemplateTypeParm T
struct _ast2929; // TemplateTypeParm M
struct _ast2930; // TemplateTypeParm M
struct _ast2931; // CXXRecord Persistent
struct _ast2932; // CXXConstructor Persistent<T, M>
struct _ast2933; // Pointer Persistent<T, M> *
struct _ast2934; // FunctionTemplate Persistent<T, M>
struct _ast2935; // TemplateTypeParm S
struct _ast2936; // TemplateTypeParm S
struct _ast2937; // CXXConstructor Persistent<T, M>
struct _ast2938; // ParmVar isolate
struct _ast2939; // ParmVar that
struct _ast2940; // TemplateSpecialization Local<S>
struct _ast2941; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2942; // FunctionTemplate Persistent<T, M>
struct _ast2943; // TemplateTypeParm S
struct _ast2944; // TemplateTypeParm S
struct _ast2945; // TemplateTypeParm M2
struct _ast2946; // TemplateTypeParm M2
struct _ast2947; // CXXConstructor Persistent<T, M>
struct _ast2948; // ParmVar isolate
struct _ast2949; // ParmVar that
struct _ast2950; // LValueReference const Persistent<S, M2> &
struct _ast2951; // TemplateSpecialization const Persistent<S, M2>
struct _ast2952; // TemplateSpecialization Persistent<S, M2>
struct _ast2953; // FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2954; // CXXConstructor Persistent<T, M>
struct _ast2955; // ParmVar that
struct _ast2956; // LValueReference const Persistent<T, M> &
struct _ast2957; // InjectedClassName const Persistent<T, M>
struct _ast2958; // FunctionProto void (const Persistent<T, M> &)
struct _ast2959; // FunctionTemplate Persistent<T, M>
struct _ast2960; // TemplateTypeParm S
struct _ast2961; // TemplateTypeParm S
struct _ast2962; // TemplateTypeParm M2
struct _ast2963; // TemplateTypeParm M2
struct _ast2964; // CXXConstructor Persistent<T, M>
struct _ast2965; // ParmVar that
struct _ast2966; // LValueReference const Persistent<S, M2> &
struct _ast2967; // TemplateSpecialization const Persistent<S, M2>
struct _ast2968; // TemplateSpecialization Persistent<S, M2>
struct _ast2969; // FunctionProto void (const Persistent<S, M2> &)
struct _ast2970; // CXXMethod operator=
struct _ast2971; // ParmVar that
struct _ast2972; // FunctionProto Persistent<T, M> &(const Persistent<T, M> &)
struct _ast2973; // LValueReference Persistent<T, M> &
struct _ast2974; // FunctionTemplate operator=
struct _ast2975; // TemplateTypeParm S
struct _ast2976; // TemplateTypeParm S
struct _ast2977; // TemplateTypeParm M2
struct _ast2978; // TemplateTypeParm M2
struct _ast2979; // CXXMethod operator=
struct _ast2980; // ParmVar that
struct _ast2981; // LValueReference const Persistent<S, M2> &
struct _ast2982; // TemplateSpecialization const Persistent<S, M2>
struct _ast2983; // TemplateSpecialization Persistent<S, M2>
struct _ast2984; // FunctionProto Persistent<T, M> &(const Persistent<S, M2> &)
struct _ast2985; // CXXDestructor ~Persistent<T, M>
struct _ast2986; // FunctionTemplate Cast
struct _ast2987; // TemplateTypeParm S
struct _ast2988; // TemplateTypeParm S
struct _ast2989; // CXXMethod Cast
struct _ast2990; // ParmVar that
struct _ast2991; // LValueReference const Persistent<S> &
struct _ast2992; // TemplateSpecialization const Persistent<S>
struct _ast2993; // TemplateSpecialization Persistent<S>
struct _ast2994; // FunctionProto Persistent<T> &(const Persistent<S> &)
struct _ast2995; // LValueReference Persistent<T> &
struct _ast2996; // TemplateSpecialization Persistent<T>
struct _ast2997; // FunctionTemplate As
struct _ast2998; // TemplateTypeParm S
struct _ast2999; // TemplateTypeParm S
struct _ast3000; // CXXMethod As
struct _ast3001; // FunctionProto Persistent<S> &() const
struct _ast3002; // LValueReference Persistent<S> &
struct _ast3003; // TemplateSpecialization Persistent<S>
struct _ast3004; // Pointer const Persistent<T, M> *
struct _ast3005; // TemplateTypeParm T
struct _ast3006; // TemplateTypeParm T
struct _ast3007; // CXXRecord Global
struct _ast3008; // CXXConstructor Global<T>
struct _ast3009; // Pointer Global<T> *
struct _ast3010; // FunctionTemplate Global<T>
struct _ast3011; // TemplateTypeParm S
struct _ast3012; // TemplateTypeParm S
struct _ast3013; // CXXConstructor Global<T>
struct _ast3014; // ParmVar isolate
struct _ast3015; // ParmVar that
struct _ast3016; // TemplateSpecialization Local<S>
struct _ast3017; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast3018; // FunctionTemplate Global<T>
struct _ast3019; // TemplateTypeParm S
struct _ast3020; // TemplateTypeParm S
struct _ast3021; // CXXConstructor Global<T>
struct _ast3022; // ParmVar isolate
struct _ast3023; // ParmVar that
struct _ast3024; // LValueReference const PersistentBase<S> &
struct _ast3025; // TemplateSpecialization const PersistentBase<S>
struct _ast3026; // TemplateSpecialization PersistentBase<S>
struct _ast3027; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast3028; // CXXConstructor Global<T>
struct _ast3029; // ParmVar other
struct _ast3030; // RValueReference Global<T> &&
struct _ast3031; // FunctionProto void (Global<T> &&)
struct _ast3032; // CXXDestructor ~Global<T>
struct _ast3033; // FunctionTemplate operator=
struct _ast3034; // TemplateTypeParm S
struct _ast3035; // TemplateTypeParm S
struct _ast3036; // CXXMethod operator=
struct _ast3037; // ParmVar rhs
struct _ast3038; // RValueReference Global<S> &&
struct _ast3039; // TemplateSpecialization Global<S>
struct _ast3040; // FunctionProto Global<T> &(Global<S> &&)
struct _ast3041; // LValueReference Global<T> &
struct _ast3042; // CXXMethod Pass
struct _ast3043; // FunctionProto Global<T> ()
struct _ast3044; // Typedef MoveOnlyTypeForCPP03
struct _ast3045; // Typedef v8::Global::MoveOnlyTypeForCPP03
struct _ast3046; // CXXConstructor Global<T>
struct _ast3047; // ParmVar 
struct _ast3048; // LValueReference const Global<T> &
struct _ast3049; // InjectedClassName const Global<T>
struct _ast3050; // FunctionProto void (const Global<T> &)
struct _ast3051; // CXXMethod operator=
struct _ast3052; // ParmVar 
struct _ast3053; // TypeAliasTemplate UniquePersistent
struct _ast3054; // TypeAlias UniquePersistent
struct _ast3055; // Typedef v8::UniquePersistent
struct _ast3056; // TemplateTypeParm T
struct _ast3057; // TemplateTypeParm T
struct _ast3058; // TemplateTypeParm T
struct _ast3059; // TemplateTypeParm T
struct _ast3060; // CXXRecord TracedGlobal
struct _ast3061; // CXXConstructor TracedGlobal<T>
struct _ast3062; // Pointer TracedGlobal<T> *
struct _ast3063; // CXXDestructor ~TracedGlobal<T>
struct _ast3064; // FunctionTemplate TracedGlobal<T>
struct _ast3065; // TemplateTypeParm S
struct _ast3066; // TemplateTypeParm S
struct _ast3067; // CXXConstructor TracedGlobal<T>
struct _ast3068; // ParmVar isolate
struct _ast3069; // ParmVar that
struct _ast3070; // TemplateSpecialization Local<S>
struct _ast3071; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast3072; // CXXConstructor TracedGlobal<T>
struct _ast3073; // ParmVar other
struct _ast3074; // RValueReference TracedGlobal<T> &&
struct _ast3075; // FunctionProto void (TracedGlobal<T> &&)
struct _ast3076; // FunctionTemplate operator=
struct _ast3077; // TemplateTypeParm S
struct _ast3078; // TemplateTypeParm S
struct _ast3079; // CXXMethod operator=
struct _ast3080; // ParmVar rhs
struct _ast3081; // RValueReference TracedGlobal<S> &&
struct _ast3082; // TemplateSpecialization TracedGlobal<S>
struct _ast3083; // FunctionProto TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ast3084; // LValueReference TracedGlobal<T> &
struct _ast3085; // CXXConstructor TracedGlobal<T>
struct _ast3086; // ParmVar 
struct _ast3087; // LValueReference const TracedGlobal<T> &
struct _ast3088; // InjectedClassName const TracedGlobal<T>
struct _ast3089; // FunctionProto void (const TracedGlobal<T> &)
struct _ast3090; // CXXMethod operator=
struct _ast3091; // ParmVar 
struct _ast3092; // CXXMethod IsEmpty
struct _ast3093; // Pointer const TracedGlobal<T> *
struct _ast3094; // CXXMethod Reset
struct _ast3095; // FunctionTemplate Reset
struct _ast3096; // TemplateTypeParm S
struct _ast3097; // TemplateTypeParm S
struct _ast3098; // CXXMethod Reset
struct _ast3099; // ParmVar isolate
struct _ast3100; // ParmVar other
struct _ast3101; // LValueReference const Local<S> &
struct _ast3102; // TemplateSpecialization const Local<S>
struct _ast3103; // TemplateSpecialization Local<S>
struct _ast3104; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast3105; // CXXMethod Get
struct _ast3106; // ParmVar isolate
struct _ast3107; // FunctionProto Local<T> (v8::Isolate *) const
struct _ast3108; // TemplateSpecialization Local<T>
struct _ast3109; // FunctionTemplate As
struct _ast3110; // TemplateTypeParm S
struct _ast3111; // TemplateTypeParm S
struct _ast3112; // CXXMethod As
struct _ast3113; // FunctionProto TracedGlobal<S> &() const
struct _ast3114; // LValueReference TracedGlobal<S> &
struct _ast3115; // TemplateSpecialization TracedGlobal<S>
struct _ast3116; // FunctionTemplate operator==
struct _ast3117; // TemplateTypeParm S
struct _ast3118; // TemplateTypeParm S
struct _ast3119; // CXXMethod operator==
struct _ast3120; // ParmVar that
struct _ast3121; // LValueReference const TracedGlobal<S> &
struct _ast3122; // TemplateSpecialization const TracedGlobal<S>
struct _ast3123; // TemplateSpecialization TracedGlobal<S>
struct _ast3124; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast3125; // FunctionTemplate operator==
struct _ast3126; // TemplateTypeParm S
struct _ast3127; // TemplateTypeParm S
struct _ast3128; // CXXMethod operator==
struct _ast3129; // ParmVar that
struct _ast3130; // LValueReference const Local<S> &
struct _ast3131; // TemplateSpecialization const Local<S>
struct _ast3132; // TemplateSpecialization Local<S>
struct _ast3133; // FunctionProto bool (const Local<S> &) const
struct _ast3134; // FunctionTemplate operator!=
struct _ast3135; // TemplateTypeParm S
struct _ast3136; // TemplateTypeParm S
struct _ast3137; // CXXMethod operator!=
struct _ast3138; // ParmVar that
struct _ast3139; // LValueReference const TracedGlobal<S> &
struct _ast3140; // TemplateSpecialization const TracedGlobal<S>
struct _ast3141; // TemplateSpecialization TracedGlobal<S>
struct _ast3142; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast3143; // FunctionTemplate operator!=
struct _ast3144; // TemplateTypeParm S
struct _ast3145; // TemplateTypeParm S
struct _ast3146; // CXXMethod operator!=
struct _ast3147; // ParmVar that
struct _ast3148; // LValueReference const Local<S> &
struct _ast3149; // TemplateSpecialization const Local<S>
struct _ast3150; // TemplateSpecialization Local<S>
struct _ast3151; // FunctionProto bool (const Local<S> &) const
struct _ast3152; // CXXMethod SetWrapperClassId
struct _ast3153; // ParmVar class_id
struct _ast3154; // CXXMethod WrapperClassId
struct _ast3155; // CXXMethod SetFinalizationCallback
struct _ast3156; // ParmVar parameter
struct _ast3157; // ParmVar callback
struct _ast3158; // CXXRecord HandleScope
struct _ast3159; // Record v8::HandleScope
struct _ast3160; // CXXRecord HandleScope
struct _ast3161; // CXXConstructor HandleScope
struct _ast3162; // ParmVar isolate
struct _ast3163; // FunctionProto void (v8::Isolate *)
struct _ast3164; // Pointer v8::HandleScope *
struct _ast3165; // CXXDestructor ~HandleScope
struct _ast3166; // FunctionProto void ()
struct _ast3167; // CXXMethod NumberOfHandles
struct _ast3168; // ParmVar isolate
struct _ast3169; // FunctionProto int (v8::Isolate *)
struct _ast3170; // CXXMethod GetIsolate
struct _ast3171; // Pointer const v8::HandleScope *
struct _ast3172; // Record const v8::HandleScope
struct _ast3173; // CXXConstructor HandleScope
struct _ast3174; // ParmVar 
struct _ast3175; // LValueReference const v8::HandleScope &
struct _ast3176; // FunctionProto void (const v8::HandleScope &)
struct _ast3177; // CXXMethod operator=
struct _ast3178; // ParmVar 
struct _ast3179; // CXXConstructor HandleScope
struct _ast3180; // FunctionProto void ()
struct _ast3181; // CXXMethod Initialize
struct _ast3182; // ParmVar isolate
struct _ast3183; // CXXMethod CreateHandle
struct _ast3184; // ParmVar isolate
struct _ast3185; // Pointer internal::Isolate *
struct _ast3186; // Elaborated internal::Isolate
struct _ast3187; // ParmVar value
struct _ast3188; // Elaborated internal::Address
struct _ast3189; // FunctionProto internal::Address *(internal::Isolate *, internal::Address)
struct _ast3190; // Pointer internal::Address *
struct _ast3191; // CXXRecord EscapableHandleScope
struct _ast3192; // CXXConstructor EscapableHandleScope
struct _ast3193; // ParmVar isolate
struct _ast3194; // Pointer v8::EscapableHandleScope *
struct _ast3195; // CXXDestructor ~EscapableHandleScope
struct _ast3196; // FunctionProto void ()
struct _ast3197; // FunctionTemplate Escape
struct _ast3198; // TemplateTypeParm T
struct _ast3199; // TemplateTypeParm T
struct _ast3200; // CXXMethod Escape
struct _ast3201; // ParmVar value
struct _ast3202; // TemplateSpecialization Local<T>
struct _ast3203; // FunctionProto Local<T> (Local<T>)
struct _ast3204; // TemplateSpecialization Local<T>
struct _ast3205; // FunctionTemplate EscapeMaybe
struct _ast3206; // TemplateTypeParm T
struct _ast3207; // TemplateTypeParm T
struct _ast3208; // CXXMethod EscapeMaybe
struct _ast3209; // ParmVar value
struct _ast3210; // TemplateSpecialization MaybeLocal<T>
struct _ast3211; // FunctionProto MaybeLocal<T> (MaybeLocal<T>)
struct _ast3212; // TemplateSpecialization MaybeLocal<T>
struct _ast3213; // CXXConstructor EscapableHandleScope
struct _ast3214; // ParmVar 
struct _ast3215; // LValueReference const v8::EscapableHandleScope &
struct _ast3216; // Record const v8::EscapableHandleScope
struct _ast3217; // FunctionProto void (const v8::EscapableHandleScope &)
struct _ast3218; // CXXMethod operator=
struct _ast3219; // ParmVar 
struct _ast3220; // CXXRecord SealHandleScope
struct _ast3221; // Record v8::SealHandleScope
struct _ast3222; // CXXRecord SealHandleScope
struct _ast3223; // CXXConstructor SealHandleScope
struct _ast3224; // ParmVar isolate
struct _ast3225; // Pointer v8::SealHandleScope *
struct _ast3226; // CXXDestructor ~SealHandleScope
struct _ast3227; // FunctionProto void ()
struct _ast3228; // CXXConstructor SealHandleScope
struct _ast3229; // ParmVar 
struct _ast3230; // LValueReference const v8::SealHandleScope &
struct _ast3231; // Record const v8::SealHandleScope
struct _ast3232; // FunctionProto void (const v8::SealHandleScope &)
struct _ast3233; // CXXMethod operator=
struct _ast3234; // ParmVar 
struct _ast3235; // CXXRecord Data
struct _ast3236; // CXXRecord ScriptOrModule
struct _ast3237; // Record v8::ScriptOrModule
struct _ast3238; // CXXRecord ScriptOrModule
struct _ast3239; // CXXMethod GetResourceName
struct _ast3240; // FunctionProto Local<v8::Value> ()
struct _ast3241; // TemplateSpecialization Local<v8::Value>
struct _ast3242; // Pointer v8::ScriptOrModule *
struct _ast3243; // CXXMethod GetHostDefinedOptions
struct _ast3244; // FunctionProto Local<v8::PrimitiveArray> ()
struct _ast3245; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast3246; // CXXRecord PrimitiveArray
struct _ast3247; // CXXMethod New
struct _ast3248; // ParmVar isolate
struct _ast3249; // ParmVar length
struct _ast3250; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _ast3251; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast3252; // CXXMethod Length
struct _ast3253; // FunctionProto int () const
struct _ast3254; // Pointer const v8::PrimitiveArray *
struct _ast3255; // Record const v8::PrimitiveArray
struct _ast3256; // CXXMethod Set
struct _ast3257; // ParmVar isolate
struct _ast3258; // ParmVar index
struct _ast3259; // ParmVar item
struct _ast3260; // TemplateSpecialization Local<v8::Primitive>
struct _ast3261; // FunctionProto void (v8::Isolate *, int, Local<v8::Primitive>)
struct _ast3262; // Pointer v8::PrimitiveArray *
struct _ast3263; // CXXMethod Get
struct _ast3264; // ParmVar isolate
struct _ast3265; // ParmVar index
struct _ast3266; // FunctionProto Local<v8::Primitive> (v8::Isolate *, int)
struct _ast3267; // TemplateSpecialization Local<v8::Primitive>
struct _ast3268; // CXXRecord ScriptOriginOptions
struct _ast3269; // Record v8::ScriptOriginOptions
struct _ast3270; // CXXRecord ScriptOriginOptions
struct _ast3271; // CXXConstructor ScriptOriginOptions
struct _ast3272; // ParmVar is_shared_cross_origin
struct _ast3273; // ParmVar is_opaque
struct _ast3274; // ParmVar is_wasm
struct _ast3275; // ParmVar is_module
struct _ast3276; // FunctionProto void (bool, bool, bool, bool)
struct _ast3277; // Pointer v8::ScriptOriginOptions *
struct _ast3278; // CXXConstructor ScriptOriginOptions
struct _ast3279; // ParmVar flags
struct _ast3280; // FunctionProto void (int)
struct _ast3281; // CXXMethod IsSharedCrossOrigin
struct _ast3282; // Pointer const v8::ScriptOriginOptions *
struct _ast3283; // Record const v8::ScriptOriginOptions
struct _ast3284; // CXXMethod IsOpaque
struct _ast3285; // CXXMethod IsWasm
struct _ast3286; // CXXMethod IsModule
struct _ast3287; // CXXMethod Flags
struct _ast3288; // CXXConstructor ScriptOriginOptions
struct _ast3289; // ParmVar 
struct _ast3290; // LValueReference const v8::ScriptOriginOptions &
struct _ast3291; // FunctionProto void (const v8::ScriptOriginOptions &) noexcept
struct _ast3292; // CXXConstructor ScriptOriginOptions
struct _ast3293; // ParmVar 
struct _ast3294; // RValueReference v8::ScriptOriginOptions &&
struct _ast3295; // FunctionProto void (v8::ScriptOriginOptions &&) noexcept
struct _ast3296; // CXXDestructor ~ScriptOriginOptions
struct _ast3297; // CXXMethod operator=
struct _ast3298; // ParmVar 
struct _ast3299; // FunctionProto v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
struct _ast3300; // LValueReference v8::ScriptOriginOptions &
struct _ast3301; // CXXMethod operator=
struct _ast3302; // ParmVar 
struct _ast3303; // FunctionProto v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _ast3304; // CXXRecord ScriptOrigin
struct _ast3305; // Record v8::ScriptOrigin
struct _ast3306; // CXXRecord ScriptOrigin
struct _ast3307; // CXXConstructor ScriptOrigin
struct _ast3308; // ParmVar resource_name
struct _ast3309; // TemplateSpecialization Local<v8::Value>
struct _ast3310; // ParmVar resource_line_offset
struct _ast3311; // TemplateSpecialization Local<v8::Integer>
struct _ast3312; // ParmVar resource_column_offset
struct _ast3313; // TemplateSpecialization Local<v8::Integer>
struct _ast3314; // ParmVar resource_is_shared_cross_origin
struct _ast3315; // TemplateSpecialization Local<v8::Boolean>
struct _ast3316; // ParmVar script_id
struct _ast3317; // TemplateSpecialization Local<v8::Integer>
struct _ast3318; // ParmVar source_map_url
struct _ast3319; // TemplateSpecialization Local<v8::Value>
struct _ast3320; // ParmVar resource_is_opaque
struct _ast3321; // TemplateSpecialization Local<v8::Boolean>
struct _ast3322; // ParmVar is_wasm
struct _ast3323; // TemplateSpecialization Local<v8::Boolean>
struct _ast3324; // ParmVar is_module
struct _ast3325; // TemplateSpecialization Local<v8::Boolean>
struct _ast3326; // ParmVar host_defined_options
struct _ast3327; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast3328; // FunctionProto void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _ast3329; // Pointer v8::ScriptOrigin *
struct _ast3330; // CXXMethod ResourceName
struct _ast3331; // FunctionProto Local<v8::Value> () const
struct _ast3332; // TemplateSpecialization Local<v8::Value>
struct _ast3333; // Pointer const v8::ScriptOrigin *
struct _ast3334; // Record const v8::ScriptOrigin
struct _ast3335; // CXXMethod ResourceLineOffset
struct _ast3336; // FunctionProto Local<v8::Integer> () const
struct _ast3337; // TemplateSpecialization Local<v8::Integer>
struct _ast3338; // CXXMethod ResourceColumnOffset
struct _ast3339; // FunctionProto Local<v8::Integer> () const
struct _ast3340; // TemplateSpecialization Local<v8::Integer>
struct _ast3341; // CXXMethod ScriptID
struct _ast3342; // FunctionProto Local<v8::Integer> () const
struct _ast3343; // TemplateSpecialization Local<v8::Integer>
struct _ast3344; // CXXMethod SourceMapUrl
struct _ast3345; // FunctionProto Local<v8::Value> () const
struct _ast3346; // TemplateSpecialization Local<v8::Value>
struct _ast3347; // CXXMethod HostDefinedOptions
struct _ast3348; // FunctionProto Local<v8::PrimitiveArray> () const
struct _ast3349; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast3350; // CXXMethod Options
struct _ast3351; // FunctionProto v8::ScriptOriginOptions () const
struct _ast3352; // CXXConstructor ScriptOrigin
struct _ast3353; // ParmVar 
struct _ast3354; // LValueReference const v8::ScriptOrigin &
struct _ast3355; // FunctionProto void (const v8::ScriptOrigin &)
struct _ast3356; // CXXMethod operator=
struct _ast3357; // ParmVar 
struct _ast3358; // RValueReference v8::ScriptOrigin &&
struct _ast3359; // FunctionProto v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ast3360; // LValueReference v8::ScriptOrigin &
struct _ast3361; // CXXConstructor ScriptOrigin
struct _ast3362; // ParmVar 
struct _ast3363; // FunctionProto void (v8::ScriptOrigin &&)
struct _ast3364; // CXXRecord UnboundScript
struct _ast3365; // Record v8::UnboundScript
struct _ast3366; // CXXRecord UnboundScript
struct _ast3367; // CXXMethod BindToCurrentContext
struct _ast3368; // FunctionProto Local<v8::Script> ()
struct _ast3369; // TemplateSpecialization Local<v8::Script>
struct _ast3370; // Pointer v8::UnboundScript *
struct _ast3371; // CXXMethod GetId
struct _ast3372; // FunctionProto int ()
struct _ast3373; // CXXMethod GetScriptName
struct _ast3374; // FunctionProto Local<v8::Value> ()
struct _ast3375; // TemplateSpecialization Local<v8::Value>
struct _ast3376; // CXXMethod GetSourceURL
struct _ast3377; // FunctionProto Local<v8::Value> ()
struct _ast3378; // TemplateSpecialization Local<v8::Value>
struct _ast3379; // CXXMethod GetSourceMappingURL
struct _ast3380; // FunctionProto Local<v8::Value> ()
struct _ast3381; // TemplateSpecialization Local<v8::Value>
struct _ast3382; // CXXMethod GetLineNumber
struct _ast3383; // ParmVar code_pos
struct _ast3384; // FunctionProto int (int)
struct _ast3385; // Var kNoScriptId
struct _ast3386; // CXXRecord UnboundModuleScript
struct _ast3387; // Record v8::UnboundModuleScript
struct _ast3388; // CXXRecord UnboundModuleScript
struct _ast3389; // CXXRecord Location
struct _ast3390; // Record v8::Location
struct _ast3391; // CXXRecord Location
struct _ast3392; // CXXMethod GetLineNumber
struct _ast3393; // Pointer v8::Location *
struct _ast3394; // CXXMethod GetColumnNumber
struct _ast3395; // CXXConstructor Location
struct _ast3396; // ParmVar line_number
struct _ast3397; // ParmVar column_number
struct _ast3398; // FunctionProto void (int, int)
struct _ast3399; // CXXRecord Module
struct _ast3400; // Record v8::Module
struct _ast3401; // CXXRecord Module
struct _ast3402; // Enum Status
struct _ast3403; // Enum v8::Module::Status
struct _ast3404; // EnumConstant kUninstantiated
struct _ast3405; // EnumConstant kInstantiating
struct _ast3406; // EnumConstant kInstantiated
struct _ast3407; // EnumConstant kEvaluating
struct _ast3408; // EnumConstant kEvaluated
struct _ast3409; // EnumConstant kErrored
struct _ast3410; // CXXMethod GetStatus
struct _ast3411; // FunctionProto v8::Module::Status () const
struct _ast3412; // Pointer const v8::Module *
struct _ast3413; // Record const v8::Module
struct _ast3414; // CXXMethod GetException
struct _ast3415; // FunctionProto Local<v8::Value> () const
struct _ast3416; // TemplateSpecialization Local<v8::Value>
struct _ast3417; // CXXMethod GetModuleRequestsLength
struct _ast3418; // CXXMethod GetModuleRequest
struct _ast3419; // ParmVar i
struct _ast3420; // FunctionProto Local<v8::String> (int) const
struct _ast3421; // TemplateSpecialization Local<v8::String>
struct _ast3422; // CXXMethod GetModuleRequestLocation
struct _ast3423; // ParmVar i
struct _ast3424; // FunctionProto v8::Location (int) const
struct _ast3425; // CXXMethod GetIdentityHash
struct _ast3426; // Typedef ResolveCallback
struct _ast3427; // Typedef v8::Module::ResolveCallback
struct _ast3428; // CXXMethod InstantiateModule
struct _ast3429; // ParmVar context
struct _ast3430; // TemplateSpecialization Local<v8::Context>
struct _ast3431; // ParmVar callback
struct _ast3432; // FunctionProto Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
struct _ast3433; // TemplateSpecialization Maybe<bool>
struct _ast3434; // Pointer v8::Module *
struct _ast3435; // CXXMethod Evaluate
struct _ast3436; // ParmVar context
struct _ast3437; // TemplateSpecialization Local<v8::Context>
struct _ast3438; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3439; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast3440; // CXXMethod GetModuleNamespace
struct _ast3441; // FunctionProto Local<v8::Value> ()
struct _ast3442; // TemplateSpecialization Local<v8::Value>
struct _ast3443; // CXXMethod GetUnboundModuleScript
struct _ast3444; // FunctionProto Local<v8::UnboundModuleScript> ()
struct _ast3445; // TemplateSpecialization Local<v8::UnboundModuleScript>
struct _ast3446; // CXXRecord Script
struct _ast3447; // CXXMethod Compile
struct _ast3448; // ParmVar context
struct _ast3449; // TemplateSpecialization Local<v8::Context>
struct _ast3450; // ParmVar source
struct _ast3451; // TemplateSpecialization Local<v8::String>
struct _ast3452; // ParmVar origin
struct _ast3453; // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _ast3454; // TemplateSpecialization MaybeLocal<v8::Script>
struct _ast3455; // CXXMethod Run
struct _ast3456; // ParmVar context
struct _ast3457; // TemplateSpecialization Local<v8::Context>
struct _ast3458; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3459; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast3460; // Pointer v8::Script *
struct _ast3461; // CXXMethod GetUnboundScript
struct _ast3462; // FunctionProto Local<v8::UnboundScript> ()
struct _ast3463; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast3464; // CXXRecord ScriptCompiler
struct _ast3465; // Record v8::ScriptCompiler
struct _ast3466; // CXXRecord ScriptCompiler
struct _ast3467; // CXXRecord CachedData
struct _ast3468; // Record v8::ScriptCompiler::CachedData
struct _ast3469; // CXXRecord CachedData
struct _ast3470; // Enum BufferPolicy
struct _ast3471; // Enum v8::ScriptCompiler::CachedData::BufferPolicy
struct _ast3472; // EnumConstant BufferNotOwned
struct _ast3473; // EnumConstant BufferOwned
struct _ast3474; // CXXConstructor CachedData
struct _ast3475; // Pointer v8::ScriptCompiler::CachedData *
struct _ast3476; // CXXConstructor CachedData
struct _ast3477; // ParmVar data
struct _ast3478; // Pointer const uint8_t *
struct _ast3479; // Typedef const uint8_t
struct _ast3480; // Typedef uint8_t
struct _ast3481; // ParmVar length
struct _ast3482; // ParmVar buffer_policy
struct _ast3483; // FunctionProto void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ast3484; // CXXDestructor ~CachedData
struct _ast3485; // Field data
struct _ast3486; // Field length
struct _ast3487; // Field rejected
struct _ast3488; // Field buffer_policy
struct _ast3489; // CXXConstructor CachedData
struct _ast3490; // ParmVar 
struct _ast3491; // LValueReference const v8::ScriptCompiler::CachedData &
struct _ast3492; // Record const v8::ScriptCompiler::CachedData
struct _ast3493; // FunctionProto void (const v8::ScriptCompiler::CachedData &)
struct _ast3494; // CXXMethod operator=
struct _ast3495; // ParmVar 
struct _ast3496; // FunctionProto v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
struct _ast3497; // LValueReference v8::ScriptCompiler::CachedData &
struct _ast3498; // CXXRecord Source
struct _ast3499; // Record v8::ScriptCompiler::Source
struct _ast3500; // CXXRecord Source
struct _ast3501; // CXXConstructor Source
struct _ast3502; // ParmVar source_string
struct _ast3503; // TemplateSpecialization Local<v8::String>
struct _ast3504; // ParmVar origin
struct _ast3505; // ParmVar cached_data
struct _ast3506; // FunctionProto void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _ast3507; // Pointer v8::ScriptCompiler::Source *
struct _ast3508; // CXXConstructor Source
struct _ast3509; // ParmVar source_string
struct _ast3510; // TemplateSpecialization Local<v8::String>
struct _ast3511; // ParmVar cached_data
struct _ast3512; // FunctionProto void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
struct _ast3513; // CXXDestructor ~Source
struct _ast3514; // CXXMethod GetCachedData
struct _ast3515; // FunctionProto const v8::ScriptCompiler::CachedData *() const
struct _ast3516; // Pointer const v8::ScriptCompiler::CachedData *
struct _ast3517; // Pointer const v8::ScriptCompiler::Source *
struct _ast3518; // Record const v8::ScriptCompiler::Source
struct _ast3519; // CXXMethod GetResourceOptions
struct _ast3520; // FunctionProto const v8::ScriptOriginOptions &() const
struct _ast3521; // CXXConstructor Source
struct _ast3522; // ParmVar 
struct _ast3523; // LValueReference const v8::ScriptCompiler::Source &
struct _ast3524; // FunctionProto void (const v8::ScriptCompiler::Source &)
struct _ast3525; // CXXMethod operator=
struct _ast3526; // ParmVar 
struct _ast3527; // FunctionProto v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
struct _ast3528; // LValueReference v8::ScriptCompiler::Source &
struct _ast3529; // CXXRecord ExternalSourceStream
struct _ast3530; // Record v8::ScriptCompiler::ExternalSourceStream
struct _ast3531; // CXXRecord ExternalSourceStream
struct _ast3532; // CXXDestructor ~ExternalSourceStream
struct _ast3533; // FunctionProto void ()
struct _ast3534; // Pointer v8::ScriptCompiler::ExternalSourceStream *
struct _ast3535; // CXXMethod GetMoreData
struct _ast3536; // ParmVar src
struct _ast3537; // Pointer const uint8_t **
struct _ast3538; // FunctionProto size_t (const uint8_t **)
struct _ast3539; // Typedef size_t
struct _ast3540; // CXXMethod SetBookmark
struct _ast3541; // FunctionProto bool ()
struct _ast3542; // CXXMethod ResetToBookmark
struct _ast3543; // CXXMethod operator=
struct _ast3544; // ParmVar 
struct _ast3545; // LValueReference const v8::ScriptCompiler::ExternalSourceStream &
struct _ast3546; // Record const v8::ScriptCompiler::ExternalSourceStream
struct _ast3547; // FunctionProto v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _ast3548; // LValueReference v8::ScriptCompiler::ExternalSourceStream &
struct _ast3549; // CXXRecord StreamedSource
struct _ast3550; // Record v8::ScriptCompiler::StreamedSource
struct _ast3551; // CXXRecord StreamedSource
struct _ast3552; // Enum Encoding
struct _ast3553; // Enum v8::ScriptCompiler::StreamedSource::Encoding
struct _ast3554; // EnumConstant ONE_BYTE
struct _ast3555; // EnumConstant TWO_BYTE
struct _ast3556; // EnumConstant UTF8
struct _ast3557; // CXXConstructor StreamedSource
struct _ast3558; // ParmVar source_stream
struct _ast3559; // ParmVar encoding
struct _ast3560; // FunctionProto void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3561; // Pointer v8::ScriptCompiler::StreamedSource *
struct _ast3562; // CXXConstructor StreamedSource
struct _ast3563; // ParmVar source_stream
struct _ast3564; // Elaborated std::unique_ptr<ExternalSourceStream>
struct _ast3565; // ParmVar encoding
struct _ast3566; // FunctionProto void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3567; // CXXDestructor ~StreamedSource
struct _ast3568; // FunctionProto void ()
struct _ast3569; // CXXMethod impl
struct _ast3570; // FunctionProto internal::ScriptStreamingData *() const
struct _ast3571; // Pointer internal::ScriptStreamingData *
struct _ast3572; // Elaborated internal::ScriptStreamingData
struct _ast3573; // Pointer const v8::ScriptCompiler::StreamedSource *
struct _ast3574; // Record const v8::ScriptCompiler::StreamedSource
struct _ast3575; // CXXConstructor StreamedSource
struct _ast3576; // ParmVar 
struct _ast3577; // LValueReference const v8::ScriptCompiler::StreamedSource &
struct _ast3578; // FunctionProto void (const v8::ScriptCompiler::StreamedSource &)
struct _ast3579; // CXXMethod operator=
struct _ast3580; // ParmVar 
struct _ast3581; // FunctionProto v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
struct _ast3582; // LValueReference v8::ScriptCompiler::StreamedSource &
struct _ast3583; // CXXRecord ScriptStreamingTask
struct _ast3584; // Record v8::ScriptCompiler::ScriptStreamingTask
struct _ast3585; // CXXRecord ScriptStreamingTask
struct _ast3586; // CXXMethod Run
struct _ast3587; // Pointer v8::ScriptCompiler::ScriptStreamingTask *
struct _ast3588; // Enum CompileOptions
struct _ast3589; // Enum v8::ScriptCompiler::CompileOptions
struct _ast3590; // EnumConstant kNoCompileOptions
struct _ast3591; // EnumConstant kConsumeCodeCache
struct _ast3592; // EnumConstant kEagerCompile
struct _ast3593; // Enum NoCacheReason
struct _ast3594; // Enum v8::ScriptCompiler::NoCacheReason
struct _ast3595; // EnumConstant kNoCacheNoReason
struct _ast3596; // EnumConstant kNoCacheBecauseCachingDisabled
struct _ast3597; // EnumConstant kNoCacheBecauseNoResource
struct _ast3598; // EnumConstant kNoCacheBecauseInlineScript
struct _ast3599; // EnumConstant kNoCacheBecauseModule
struct _ast3600; // EnumConstant kNoCacheBecauseStreamingSource
struct _ast3601; // EnumConstant kNoCacheBecauseInspector
struct _ast3602; // EnumConstant kNoCacheBecauseScriptTooSmall
struct _ast3603; // EnumConstant kNoCacheBecauseCacheTooCold
struct _ast3604; // EnumConstant kNoCacheBecauseV8Extension
struct _ast3605; // EnumConstant kNoCacheBecauseExtensionModule
struct _ast3606; // EnumConstant kNoCacheBecausePacScript
struct _ast3607; // EnumConstant kNoCacheBecauseInDocumentWrite
struct _ast3608; // EnumConstant kNoCacheBecauseResourceWithNoCacheHandler
struct _ast3609; // EnumConstant kNoCacheBecauseDeferredProduceCodeCache
struct _ast3610; // CXXMethod CompileUnboundScript
struct _ast3611; // ParmVar isolate
struct _ast3612; // ParmVar source
struct _ast3613; // ParmVar options
struct _ast3614; // ParmVar no_cache_reason
struct _ast3615; // FunctionProto MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3616; // TemplateSpecialization MaybeLocal<v8::UnboundScript>
struct _ast3617; // CXXMethod Compile
struct _ast3618; // ParmVar context
struct _ast3619; // TemplateSpecialization Local<v8::Context>
struct _ast3620; // ParmVar source
struct _ast3621; // ParmVar options
struct _ast3622; // ParmVar no_cache_reason
struct _ast3623; // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3624; // TemplateSpecialization MaybeLocal<v8::Script>
struct _ast3625; // CXXMethod StartStreamingScript
struct _ast3626; // ParmVar isolate
struct _ast3627; // ParmVar source
struct _ast3628; // ParmVar options
struct _ast3629; // FunctionProto v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _ast3630; // CXXMethod Compile
struct _ast3631; // ParmVar context
struct _ast3632; // TemplateSpecialization Local<v8::Context>
struct _ast3633; // ParmVar source
struct _ast3634; // ParmVar full_source_string
struct _ast3635; // TemplateSpecialization Local<v8::String>
struct _ast3636; // ParmVar origin
struct _ast3637; // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
struct _ast3638; // TemplateSpecialization MaybeLocal<v8::Script>
struct _ast3639; // CXXMethod CachedDataVersionTag
struct _ast3640; // FunctionProto uint32_t ()
struct _ast3641; // Typedef uint32_t
struct _ast3642; // CXXMethod CompileModule
struct _ast3643; // ParmVar isolate
struct _ast3644; // ParmVar source
struct _ast3645; // ParmVar options
struct _ast3646; // ParmVar no_cache_reason
struct _ast3647; // FunctionProto MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3648; // TemplateSpecialization MaybeLocal<v8::Module>
struct _ast3649; // CXXMethod CompileFunctionInContext
struct _ast3650; // ParmVar context
struct _ast3651; // TemplateSpecialization Local<v8::Context>
struct _ast3652; // ParmVar source
struct _ast3653; // ParmVar arguments_count
struct _ast3654; // ParmVar arguments
struct _ast3655; // Decayed Local<v8::String> *
struct _ast3656; // ParmVar context_extension_count
struct _ast3657; // ParmVar context_extensions
struct _ast3658; // Decayed Local<v8::Object> *
struct _ast3659; // ParmVar options
struct _ast3660; // ParmVar no_cache_reason
struct _ast3661; // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3662; // TemplateSpecialization MaybeLocal<v8::Function>
struct _ast3663; // CXXMethod CreateCodeCache
struct _ast3664; // ParmVar unbound_script
struct _ast3665; // TemplateSpecialization Local<v8::UnboundScript>
struct _ast3666; // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
struct _ast3667; // CXXMethod CreateCodeCache
struct _ast3668; // ParmVar unbound_module_script
struct _ast3669; // TemplateSpecialization Local<v8::UnboundModuleScript>
struct _ast3670; // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
struct _ast3671; // CXXMethod CreateCodeCacheForFunction
struct _ast3672; // ParmVar function
struct _ast3673; // TemplateSpecialization Local<v8::Function>
struct _ast3674; // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _ast3675; // CXXRecord Message
struct _ast3676; // Record v8::Message
struct _ast3677; // CXXRecord Message
struct _ast3678; // CXXMethod Get
struct _ast3679; // FunctionProto Local<v8::String> () const
struct _ast3680; // TemplateSpecialization Local<v8::String>
struct _ast3681; // Pointer const v8::Message *
struct _ast3682; // Record const v8::Message
struct _ast3683; // CXXMethod GetIsolate
struct _ast3684; // CXXMethod GetSourceLine
struct _ast3685; // ParmVar context
struct _ast3686; // TemplateSpecialization Local<v8::Context>
struct _ast3687; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3688; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast3689; // CXXMethod GetScriptOrigin
struct _ast3690; // FunctionProto v8::ScriptOrigin () const
struct _ast3691; // CXXMethod GetScriptResourceName
struct _ast3692; // FunctionProto Local<v8::Value> () const
struct _ast3693; // TemplateSpecialization Local<v8::Value>
struct _ast3694; // CXXMethod GetStackTrace
struct _ast3695; // FunctionProto Local<v8::StackTrace> () const
struct _ast3696; // TemplateSpecialization Local<v8::StackTrace>
struct _ast3697; // CXXMethod GetLineNumber
struct _ast3698; // ParmVar context
struct _ast3699; // TemplateSpecialization Local<v8::Context>
struct _ast3700; // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ast3701; // TemplateSpecialization Maybe<int>
struct _ast3702; // CXXMethod GetStartPosition
struct _ast3703; // CXXMethod GetEndPosition
struct _ast3704; // CXXMethod ErrorLevel
struct _ast3705; // CXXMethod GetStartColumn
struct _ast3706; // CXXMethod GetStartColumn
struct _ast3707; // ParmVar context
struct _ast3708; // TemplateSpecialization Local<v8::Context>
struct _ast3709; // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ast3710; // TemplateSpecialization Maybe<int>
struct _ast3711; // CXXMethod GetEndColumn
struct _ast3712; // CXXMethod GetEndColumn
struct _ast3713; // ParmVar context
struct _ast3714; // TemplateSpecialization Local<v8::Context>
struct _ast3715; // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ast3716; // TemplateSpecialization Maybe<int>
struct _ast3717; // CXXMethod IsSharedCrossOrigin
struct _ast3718; // CXXMethod IsOpaque
struct _ast3719; // CXXMethod PrintCurrentStackTrace
struct _ast3720; // ParmVar isolate
struct _ast3721; // ParmVar out
struct _ast3722; // Pointer FILE *
struct _ast3723; // Typedef FILE
struct _ast3724; // Typedef FILE
struct _ast3725; // FunctionProto void (v8::Isolate *, FILE *)
struct _ast3726; // Var kNoLineNumberInfo
struct _ast3727; // Var kNoColumnInfo
struct _ast3728; // Var kNoScriptIdInfo
struct _ast3729; // CXXRecord StackTrace
struct _ast3730; // Enum StackTraceOptions
struct _ast3731; // Enum v8::StackTrace::StackTraceOptions
struct _ast3732; // EnumConstant kLineNumber
struct _ast3733; // EnumConstant kColumnOffset
struct _ast3734; // EnumConstant kScriptName
struct _ast3735; // EnumConstant kFunctionName
struct _ast3736; // EnumConstant kIsEval
struct _ast3737; // EnumConstant kIsConstructor
struct _ast3738; // EnumConstant kScriptNameOrSourceURL
struct _ast3739; // EnumConstant kScriptId
struct _ast3740; // EnumConstant kExposeFramesAcrossSecurityOrigins
struct _ast3741; // EnumConstant kOverview
struct _ast3742; // EnumConstant kDetailed
struct _ast3743; // CXXMethod GetFrame
struct _ast3744; // ParmVar isolate
struct _ast3745; // ParmVar index
struct _ast3746; // FunctionProto Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _ast3747; // TemplateSpecialization Local<v8::StackFrame>
struct _ast3748; // Pointer const v8::StackTrace *
struct _ast3749; // Record const v8::StackTrace
struct _ast3750; // CXXMethod GetFrameCount
struct _ast3751; // CXXMethod CurrentStackTrace
struct _ast3752; // ParmVar isolate
struct _ast3753; // ParmVar frame_limit
struct _ast3754; // ParmVar options
struct _ast3755; // FunctionProto Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
struct _ast3756; // TemplateSpecialization Local<v8::StackTrace>
struct _ast3757; // CXXRecord StackFrame
struct _ast3758; // CXXMethod GetLineNumber
struct _ast3759; // Pointer const v8::StackFrame *
struct _ast3760; // Record const v8::StackFrame
struct _ast3761; // CXXMethod GetColumn
struct _ast3762; // CXXMethod GetScriptId
struct _ast3763; // CXXMethod GetScriptName
struct _ast3764; // FunctionProto Local<v8::String> () const
struct _ast3765; // TemplateSpecialization Local<v8::String>
struct _ast3766; // CXXMethod GetScriptNameOrSourceURL
struct _ast3767; // FunctionProto Local<v8::String> () const
struct _ast3768; // TemplateSpecialization Local<v8::String>
struct _ast3769; // CXXMethod GetFunctionName
struct _ast3770; // FunctionProto Local<v8::String> () const
struct _ast3771; // TemplateSpecialization Local<v8::String>
struct _ast3772; // CXXMethod IsEval
struct _ast3773; // CXXMethod IsConstructor
struct _ast3774; // CXXMethod IsWasm
struct _ast3775; // CXXMethod IsUserJavaScript
struct _ast3776; // Enum StateTag
struct _ast3777; // Enum v8::StateTag
struct _ast3778; // EnumConstant JS
struct _ast3779; // EnumConstant GC
struct _ast3780; // EnumConstant PARSER
struct _ast3781; // EnumConstant BYTECODE_COMPILER
struct _ast3782; // EnumConstant COMPILER
struct _ast3783; // EnumConstant OTHER
struct _ast3784; // EnumConstant EXTERNAL
struct _ast3785; // EnumConstant IDLE
struct _ast3786; // CXXRecord RegisterState
struct _ast3787; // Record v8::RegisterState
struct _ast3788; // CXXRecord RegisterState
struct _ast3789; // CXXConstructor RegisterState
struct _ast3790; // Pointer v8::RegisterState *
struct _ast3791; // Field pc
struct _ast3792; // Field sp
struct _ast3793; // Field fp
struct _ast3794; // Field lr
struct _ast3795; // CXXRecord SampleInfo
struct _ast3796; // Record v8::SampleInfo
struct _ast3797; // CXXRecord SampleInfo
struct _ast3798; // Field frames_count
struct _ast3799; // Field vm_state
struct _ast3800; // Field external_callback_entry
struct _ast3801; // CXXRecord MemoryRange
struct _ast3802; // Record v8::MemoryRange
struct _ast3803; // CXXRecord MemoryRange
struct _ast3804; // Field start
struct _ast3805; // Field length_in_bytes
struct _ast3806; // CXXRecord JSEntryStub
struct _ast3807; // Record v8::JSEntryStub
struct _ast3808; // CXXRecord JSEntryStub
struct _ast3809; // Field code
struct _ast3810; // CXXRecord UnwindState
struct _ast3811; // Record v8::UnwindState
struct _ast3812; // CXXRecord UnwindState
struct _ast3813; // Field code_range
struct _ast3814; // Field embedded_code_range
struct _ast3815; // Field js_entry_stub
struct _ast3816; // CXXRecord JSON
struct _ast3817; // Record v8::JSON
struct _ast3818; // CXXRecord JSON
struct _ast3819; // CXXMethod Parse
struct _ast3820; // ParmVar context
struct _ast3821; // TemplateSpecialization Local<v8::Context>
struct _ast3822; // ParmVar json_string
struct _ast3823; // TemplateSpecialization Local<v8::String>
struct _ast3824; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
struct _ast3825; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast3826; // CXXMethod Stringify
struct _ast3827; // ParmVar context
struct _ast3828; // TemplateSpecialization Local<v8::Context>
struct _ast3829; // ParmVar json_object
struct _ast3830; // TemplateSpecialization Local<v8::Value>
struct _ast3831; // ParmVar gap
struct _ast3832; // TemplateSpecialization Local<v8::String>
struct _ast3833; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _ast3834; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast3835; // CXXRecord ValueSerializer
struct _ast3836; // Record v8::ValueSerializer
struct _ast3837; // CXXRecord ValueSerializer
struct _ast3838; // CXXRecord Delegate
struct _ast3839; // Record v8::ValueSerializer::Delegate
struct _ast3840; // CXXRecord Delegate
struct _ast3841; // CXXDestructor ~Delegate
struct _ast3842; // FunctionProto void ()
struct _ast3843; // Pointer v8::ValueSerializer::Delegate *
struct _ast3844; // CXXMethod ThrowDataCloneError
struct _ast3845; // ParmVar message
struct _ast3846; // TemplateSpecialization Local<v8::String>
struct _ast3847; // FunctionProto void (Local<v8::String>)
struct _ast3848; // CXXMethod WriteHostObject
struct _ast3849; // ParmVar isolate
struct _ast3850; // ParmVar object
struct _ast3851; // TemplateSpecialization Local<v8::Object>
struct _ast3852; // FunctionProto Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _ast3853; // TemplateSpecialization Maybe<bool>
struct _ast3854; // CXXMethod GetSharedArrayBufferId
struct _ast3855; // ParmVar isolate
struct _ast3856; // ParmVar shared_array_buffer
struct _ast3857; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast3858; // FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
struct _ast3859; // TemplateSpecialization Maybe<uint32_t>
struct _ast3860; // CXXMethod GetWasmModuleTransferId
struct _ast3861; // ParmVar isolate
struct _ast3862; // ParmVar module
struct _ast3863; // TemplateSpecialization Local<v8::WasmModuleObject>
struct _ast3864; // FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
struct _ast3865; // TemplateSpecialization Maybe<uint32_t>
struct _ast3866; // CXXMethod ReallocateBufferMemory
struct _ast3867; // ParmVar old_buffer
struct _ast3868; // ParmVar size
struct _ast3869; // ParmVar actual_size
struct _ast3870; // Pointer size_t *
struct _ast3871; // FunctionProto void *(void *, size_t, size_t *)
struct _ast3872; // CXXMethod FreeBufferMemory
struct _ast3873; // ParmVar buffer
struct _ast3874; // FunctionProto void (void *)
struct _ast3875; // CXXMethod operator=
struct _ast3876; // ParmVar 
struct _ast3877; // LValueReference const v8::ValueSerializer::Delegate &
struct _ast3878; // Record const v8::ValueSerializer::Delegate
struct _ast3879; // FunctionProto v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
struct _ast3880; // LValueReference v8::ValueSerializer::Delegate &
struct _ast3881; // CXXConstructor ValueSerializer
struct _ast3882; // ParmVar isolate
struct _ast3883; // Pointer v8::ValueSerializer *
struct _ast3884; // CXXConstructor ValueSerializer
struct _ast3885; // ParmVar isolate
struct _ast3886; // ParmVar delegate
struct _ast3887; // FunctionProto void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _ast3888; // CXXDestructor ~ValueSerializer
struct _ast3889; // FunctionProto void ()
struct _ast3890; // CXXMethod WriteHeader
struct _ast3891; // CXXMethod WriteValue
struct _ast3892; // ParmVar context
struct _ast3893; // TemplateSpecialization Local<v8::Context>
struct _ast3894; // ParmVar value
struct _ast3895; // TemplateSpecialization Local<v8::Value>
struct _ast3896; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast3897; // TemplateSpecialization Maybe<bool>
struct _ast3898; // CXXMethod Release
struct _ast3899; // FunctionProto std::pair<uint8_t *, size_t> ()
struct _ast3900; // Elaborated std::pair<uint8_t *, size_t>
struct _ast3901; // CXXMethod TransferArrayBuffer
struct _ast3902; // ParmVar transfer_id
struct _ast3903; // ParmVar array_buffer
struct _ast3904; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast3905; // FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3906; // CXXMethod SetTreatArrayBufferViewsAsHostObjects
struct _ast3907; // ParmVar mode
struct _ast3908; // FunctionProto void (bool)
struct _ast3909; // CXXMethod WriteUint32
struct _ast3910; // ParmVar value
struct _ast3911; // FunctionProto void (uint32_t)
struct _ast3912; // CXXMethod WriteUint64
struct _ast3913; // ParmVar value
struct _ast3914; // Typedef uint64_t
struct _ast3915; // FunctionProto void (uint64_t)
struct _ast3916; // CXXMethod WriteDouble
struct _ast3917; // ParmVar value
struct _ast3918; // Builtin double
struct _ast3919; // FunctionProto void (double)
struct _ast3920; // CXXMethod WriteRawBytes
struct _ast3921; // ParmVar source
struct _ast3922; // Pointer const void *
struct _ast3923; // Builtin const void
struct _ast3924; // ParmVar length
struct _ast3925; // FunctionProto void (const void *, size_t)
struct _ast3926; // CXXConstructor ValueSerializer
struct _ast3927; // ParmVar 
struct _ast3928; // LValueReference const v8::ValueSerializer &
struct _ast3929; // Record const v8::ValueSerializer
struct _ast3930; // FunctionProto void (const v8::ValueSerializer &)
struct _ast3931; // CXXMethod operator=
struct _ast3932; // ParmVar 
struct _ast3933; // CXXRecord ValueDeserializer
struct _ast3934; // Record v8::ValueDeserializer
struct _ast3935; // CXXRecord ValueDeserializer
struct _ast3936; // CXXRecord Delegate
struct _ast3937; // Record v8::ValueDeserializer::Delegate
struct _ast3938; // CXXRecord Delegate
struct _ast3939; // CXXDestructor ~Delegate
struct _ast3940; // FunctionProto void ()
struct _ast3941; // Pointer v8::ValueDeserializer::Delegate *
struct _ast3942; // CXXMethod ReadHostObject
struct _ast3943; // ParmVar isolate
struct _ast3944; // FunctionProto MaybeLocal<v8::Object> (v8::Isolate *)
struct _ast3945; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast3946; // CXXMethod GetWasmModuleFromId
struct _ast3947; // ParmVar isolate
struct _ast3948; // ParmVar transfer_id
struct _ast3949; // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
struct _ast3950; // TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _ast3951; // CXXMethod GetSharedArrayBufferFromId
struct _ast3952; // ParmVar isolate
struct _ast3953; // ParmVar clone_id
struct _ast3954; // FunctionProto MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
struct _ast3955; // TemplateSpecialization MaybeLocal<v8::SharedArrayBuffer>
struct _ast3956; // CXXMethod operator=
struct _ast3957; // ParmVar 
struct _ast3958; // LValueReference const v8::ValueDeserializer::Delegate &
struct _ast3959; // Record const v8::ValueDeserializer::Delegate
struct _ast3960; // FunctionProto v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
struct _ast3961; // LValueReference v8::ValueDeserializer::Delegate &
struct _ast3962; // CXXConstructor ValueDeserializer
struct _ast3963; // ParmVar isolate
struct _ast3964; // ParmVar data
struct _ast3965; // ParmVar size
struct _ast3966; // FunctionProto void (v8::Isolate *, const uint8_t *, size_t)
struct _ast3967; // Pointer v8::ValueDeserializer *
struct _ast3968; // CXXConstructor ValueDeserializer
struct _ast3969; // ParmVar isolate
struct _ast3970; // ParmVar data
struct _ast3971; // ParmVar size
struct _ast3972; // ParmVar delegate
struct _ast3973; // FunctionProto void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
struct _ast3974; // CXXDestructor ~ValueDeserializer
struct _ast3975; // FunctionProto void ()
struct _ast3976; // CXXMethod ReadHeader
struct _ast3977; // ParmVar context
struct _ast3978; // TemplateSpecialization Local<v8::Context>
struct _ast3979; // FunctionProto Maybe<bool> (Local<v8::Context>)
struct _ast3980; // TemplateSpecialization Maybe<bool>
struct _ast3981; // CXXMethod ReadValue
struct _ast3982; // ParmVar context
struct _ast3983; // TemplateSpecialization Local<v8::Context>
struct _ast3984; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3985; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast3986; // CXXMethod TransferArrayBuffer
struct _ast3987; // ParmVar transfer_id
struct _ast3988; // ParmVar array_buffer
struct _ast3989; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast3990; // FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3991; // CXXMethod TransferSharedArrayBuffer
struct _ast3992; // ParmVar id
struct _ast3993; // ParmVar shared_array_buffer
struct _ast3994; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast3995; // FunctionProto void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _ast3996; // CXXMethod SetSupportsLegacyWireFormat
struct _ast3997; // ParmVar supports_legacy_wire_format
struct _ast3998; // CXXMethod SetExpectInlineWasm
struct _ast3999; // ParmVar allow_inline_wasm
struct _ast4000; // CXXMethod GetWireFormatVersion
struct _ast4001; // FunctionProto uint32_t () const
struct _ast4002; // Pointer const v8::ValueDeserializer *
struct _ast4003; // Record const v8::ValueDeserializer
struct _ast4004; // CXXMethod ReadUint32
struct _ast4005; // ParmVar value
struct _ast4006; // Pointer uint32_t *
struct _ast4007; // FunctionProto bool (uint32_t *)
struct _ast4008; // CXXMethod ReadUint64
struct _ast4009; // ParmVar value
struct _ast4010; // Pointer uint64_t *
struct _ast4011; // FunctionProto bool (uint64_t *)
struct _ast4012; // CXXMethod ReadDouble
struct _ast4013; // ParmVar value
struct _ast4014; // Pointer double *
struct _ast4015; // FunctionProto bool (double *)
struct _ast4016; // CXXMethod ReadRawBytes
struct _ast4017; // ParmVar length
struct _ast4018; // ParmVar data
struct _ast4019; // Pointer const void **
struct _ast4020; // FunctionProto bool (size_t, const void **)
struct _ast4021; // CXXConstructor ValueDeserializer
struct _ast4022; // ParmVar 
struct _ast4023; // LValueReference const v8::ValueDeserializer &
struct _ast4024; // FunctionProto void (const v8::ValueDeserializer &)
struct _ast4025; // CXXMethod operator=
struct _ast4026; // ParmVar 
struct _ast4027; // CXXRecord Value
struct _ast4028; // CXXMethod IsUndefined
struct _ast4029; // Pointer const v8::Value *
struct _ast4030; // Record const v8::Value
struct _ast4031; // CXXMethod IsNull
struct _ast4032; // CXXMethod IsNullOrUndefined
struct _ast4033; // CXXMethod IsTrue
struct _ast4034; // CXXMethod IsFalse
struct _ast4035; // CXXMethod IsName
struct _ast4036; // CXXMethod IsString
struct _ast4037; // CXXMethod IsSymbol
struct _ast4038; // CXXMethod IsFunction
struct _ast4039; // CXXMethod IsArray
struct _ast4040; // CXXMethod IsObject
struct _ast4041; // CXXMethod IsBigInt
struct _ast4042; // CXXMethod IsBoolean
struct _ast4043; // CXXMethod IsNumber
struct _ast4044; // CXXMethod IsExternal
struct _ast4045; // CXXMethod IsInt32
struct _ast4046; // CXXMethod IsUint32
struct _ast4047; // CXXMethod IsDate
struct _ast4048; // CXXMethod IsArgumentsObject
struct _ast4049; // CXXMethod IsBigIntObject
struct _ast4050; // CXXMethod IsBooleanObject
struct _ast4051; // CXXMethod IsNumberObject
struct _ast4052; // CXXMethod IsStringObject
struct _ast4053; // CXXMethod IsSymbolObject
struct _ast4054; // CXXMethod IsNativeError
struct _ast4055; // CXXMethod IsRegExp
struct _ast4056; // CXXMethod IsAsyncFunction
struct _ast4057; // CXXMethod IsGeneratorFunction
struct _ast4058; // CXXMethod IsGeneratorObject
struct _ast4059; // CXXMethod IsPromise
struct _ast4060; // CXXMethod IsMap
struct _ast4061; // CXXMethod IsSet
struct _ast4062; // CXXMethod IsMapIterator
struct _ast4063; // CXXMethod IsSetIterator
struct _ast4064; // CXXMethod IsWeakMap
struct _ast4065; // CXXMethod IsWeakSet
struct _ast4066; // CXXMethod IsArrayBuffer
struct _ast4067; // CXXMethod IsArrayBufferView
struct _ast4068; // CXXMethod IsTypedArray
struct _ast4069; // CXXMethod IsUint8Array
struct _ast4070; // CXXMethod IsUint8ClampedArray
struct _ast4071; // CXXMethod IsInt8Array
struct _ast4072; // CXXMethod IsUint16Array
struct _ast4073; // CXXMethod IsInt16Array
struct _ast4074; // CXXMethod IsUint32Array
struct _ast4075; // CXXMethod IsInt32Array
struct _ast4076; // CXXMethod IsFloat32Array
struct _ast4077; // CXXMethod IsFloat64Array
struct _ast4078; // CXXMethod IsBigInt64Array
struct _ast4079; // CXXMethod IsBigUint64Array
struct _ast4080; // CXXMethod IsDataView
struct _ast4081; // CXXMethod IsSharedArrayBuffer
struct _ast4082; // CXXMethod IsProxy
struct _ast4083; // CXXMethod IsWebAssemblyCompiledModule
struct _ast4084; // CXXMethod IsModuleNamespaceObject
struct _ast4085; // CXXMethod ToBigInt
struct _ast4086; // ParmVar context
struct _ast4087; // TemplateSpecialization Local<v8::Context>
struct _ast4088; // FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _ast4089; // TemplateSpecialization MaybeLocal<v8::BigInt>
struct _ast4090; // CXXMethod ToNumber
struct _ast4091; // ParmVar context
struct _ast4092; // TemplateSpecialization Local<v8::Context>
struct _ast4093; // FunctionProto MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _ast4094; // TemplateSpecialization MaybeLocal<v8::Number>
struct _ast4095; // CXXMethod ToString
struct _ast4096; // ParmVar context
struct _ast4097; // TemplateSpecialization Local<v8::Context>
struct _ast4098; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast4099; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4100; // CXXMethod ToDetailString
struct _ast4101; // ParmVar context
struct _ast4102; // TemplateSpecialization Local<v8::Context>
struct _ast4103; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast4104; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4105; // CXXMethod ToObject
struct _ast4106; // ParmVar context
struct _ast4107; // TemplateSpecialization Local<v8::Context>
struct _ast4108; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast4109; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast4110; // CXXMethod ToInteger
struct _ast4111; // ParmVar context
struct _ast4112; // TemplateSpecialization Local<v8::Context>
struct _ast4113; // FunctionProto MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _ast4114; // TemplateSpecialization MaybeLocal<v8::Integer>
struct _ast4115; // CXXMethod ToUint32
struct _ast4116; // ParmVar context
struct _ast4117; // TemplateSpecialization Local<v8::Context>
struct _ast4118; // FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast4119; // TemplateSpecialization MaybeLocal<v8::Uint32>
struct _ast4120; // CXXMethod ToInt32
struct _ast4121; // ParmVar context
struct _ast4122; // TemplateSpecialization Local<v8::Context>
struct _ast4123; // FunctionProto MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _ast4124; // TemplateSpecialization MaybeLocal<v8::Int32>
struct _ast4125; // CXXMethod ToBoolean
struct _ast4126; // ParmVar isolate
struct _ast4127; // FunctionProto Local<v8::Boolean> (v8::Isolate *) const
struct _ast4128; // TemplateSpecialization Local<v8::Boolean>
struct _ast4129; // CXXMethod ToArrayIndex
struct _ast4130; // ParmVar context
struct _ast4131; // TemplateSpecialization Local<v8::Context>
struct _ast4132; // FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast4133; // TemplateSpecialization MaybeLocal<v8::Uint32>
struct _ast4134; // CXXMethod BooleanValue
struct _ast4135; // ParmVar isolate
struct _ast4136; // FunctionProto bool (v8::Isolate *) const
struct _ast4137; // CXXMethod NumberValue
struct _ast4138; // ParmVar context
struct _ast4139; // TemplateSpecialization Local<v8::Context>
struct _ast4140; // FunctionProto Maybe<double> (Local<v8::Context>) const
struct _ast4141; // TemplateSpecialization Maybe<double>
struct _ast4142; // CXXMethod IntegerValue
struct _ast4143; // ParmVar context
struct _ast4144; // TemplateSpecialization Local<v8::Context>
struct _ast4145; // FunctionProto Maybe<int64_t> (Local<v8::Context>) const
struct _ast4146; // TemplateSpecialization Maybe<int64_t>
struct _ast4147; // CXXMethod Uint32Value
struct _ast4148; // ParmVar context
struct _ast4149; // TemplateSpecialization Local<v8::Context>
struct _ast4150; // FunctionProto Maybe<uint32_t> (Local<v8::Context>) const
struct _ast4151; // TemplateSpecialization Maybe<uint32_t>
struct _ast4152; // CXXMethod Int32Value
struct _ast4153; // ParmVar context
struct _ast4154; // TemplateSpecialization Local<v8::Context>
struct _ast4155; // FunctionProto Maybe<int32_t> (Local<v8::Context>) const
struct _ast4156; // TemplateSpecialization Maybe<int32_t>
struct _ast4157; // CXXMethod Equals
struct _ast4158; // ParmVar context
struct _ast4159; // TemplateSpecialization Local<v8::Context>
struct _ast4160; // ParmVar that
struct _ast4161; // TemplateSpecialization Local<v8::Value>
struct _ast4162; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _ast4163; // TemplateSpecialization Maybe<bool>
struct _ast4164; // CXXMethod StrictEquals
struct _ast4165; // ParmVar that
struct _ast4166; // TemplateSpecialization Local<v8::Value>
struct _ast4167; // FunctionProto bool (Local<v8::Value>) const
struct _ast4168; // CXXMethod SameValue
struct _ast4169; // ParmVar that
struct _ast4170; // TemplateSpecialization Local<v8::Value>
struct _ast4171; // FunctionProto bool (Local<v8::Value>) const
struct _ast4172; // FunctionTemplate Cast
struct _ast4173; // TemplateTypeParm T
struct _ast4174; // TemplateTypeParm T
struct _ast4175; // CXXMethod Cast
struct _ast4176; // ParmVar value
struct _ast4177; // Pointer T *
struct _ast4178; // FunctionProto v8::Value *(T *)
struct _ast4179; // Pointer v8::Value *
struct _ast4180; // CXXMethod TypeOf
struct _ast4181; // ParmVar 
struct _ast4182; // FunctionProto Local<v8::String> (v8::Isolate *)
struct _ast4183; // TemplateSpecialization Local<v8::String>
struct _ast4184; // CXXMethod InstanceOf
struct _ast4185; // ParmVar context
struct _ast4186; // TemplateSpecialization Local<v8::Context>
struct _ast4187; // ParmVar object
struct _ast4188; // TemplateSpecialization Local<v8::Object>
struct _ast4189; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _ast4190; // TemplateSpecialization Maybe<bool>
struct _ast4191; // CXXRecord Primitive
struct _ast4192; // CXXRecord Boolean
struct _ast4193; // CXXMethod Value
struct _ast4194; // Pointer const v8::Boolean *
struct _ast4195; // Record const v8::Boolean
struct _ast4196; // CXXMethod Cast
struct _ast4197; // ParmVar obj
struct _ast4198; // Pointer v8::Value *
struct _ast4199; // Elaborated v8::Value
struct _ast4200; // FunctionProto v8::Boolean *(v8::Value *)
struct _ast4201; // Pointer v8::Boolean *
struct _ast4202; // CXXMethod New
struct _ast4203; // ParmVar isolate
struct _ast4204; // ParmVar value
struct _ast4205; // FunctionProto Local<v8::Boolean> (v8::Isolate *, bool)
struct _ast4206; // TemplateSpecialization Local<v8::Boolean>
struct _ast4207; // CXXRecord Name
struct _ast4208; // CXXMethod GetIdentityHash
struct _ast4209; // Pointer v8::Name *
struct _ast4210; // CXXMethod Cast
struct _ast4211; // ParmVar obj
struct _ast4212; // FunctionProto v8::Name *(v8::Value *)
struct _ast4213; // Enum NewStringType
struct _ast4214; // Enum v8::NewStringType
struct _ast4215; // EnumConstant kNormal
struct _ast4216; // EnumConstant kInternalized
struct _ast4217; // CXXRecord String
struct _ast4218; // Var kMaxLength
struct _ast4219; // Enum Encoding
struct _ast4220; // Enum v8::String::Encoding
struct _ast4221; // EnumConstant UNKNOWN_ENCODING
struct _ast4222; // EnumConstant TWO_BYTE_ENCODING
struct _ast4223; // EnumConstant ONE_BYTE_ENCODING
struct _ast4224; // CXXMethod Length
struct _ast4225; // Pointer const v8::String *
struct _ast4226; // Record const v8::String
struct _ast4227; // CXXMethod Utf8Length
struct _ast4228; // ParmVar isolate
struct _ast4229; // FunctionProto int (v8::Isolate *) const
struct _ast4230; // CXXMethod IsOneByte
struct _ast4231; // CXXMethod ContainsOnlyOneByte
struct _ast4232; // Enum WriteOptions
struct _ast4233; // Enum v8::String::WriteOptions
struct _ast4234; // EnumConstant NO_OPTIONS
struct _ast4235; // EnumConstant HINT_MANY_WRITES_EXPECTED
struct _ast4236; // EnumConstant NO_NULL_TERMINATION
struct _ast4237; // EnumConstant PRESERVE_ONE_BYTE_NULL
struct _ast4238; // EnumConstant REPLACE_INVALID_UTF8
struct _ast4239; // CXXMethod Write
struct _ast4240; // ParmVar isolate
struct _ast4241; // ParmVar buffer
struct _ast4242; // Pointer uint16_t *
struct _ast4243; // ParmVar start
struct _ast4244; // ParmVar length
struct _ast4245; // ParmVar options
struct _ast4246; // FunctionProto int (v8::Isolate *, uint16_t *, int, int, int) const
struct _ast4247; // CXXMethod WriteOneByte
struct _ast4248; // ParmVar isolate
struct _ast4249; // ParmVar buffer
struct _ast4250; // Pointer uint8_t *
struct _ast4251; // ParmVar start
struct _ast4252; // ParmVar length
struct _ast4253; // ParmVar options
struct _ast4254; // FunctionProto int (v8::Isolate *, uint8_t *, int, int, int) const
struct _ast4255; // CXXMethod WriteUtf8
struct _ast4256; // ParmVar isolate
struct _ast4257; // ParmVar buffer
struct _ast4258; // Pointer char *
struct _ast4259; // ParmVar length
struct _ast4260; // ParmVar nchars_ref
struct _ast4261; // Pointer int *
struct _ast4262; // ParmVar options
struct _ast4263; // FunctionProto int (v8::Isolate *, char *, int, int *, int) const
struct _ast4264; // CXXMethod Empty
struct _ast4265; // ParmVar isolate
struct _ast4266; // FunctionProto Local<v8::String> (v8::Isolate *)
struct _ast4267; // TemplateSpecialization Local<v8::String>
struct _ast4268; // CXXMethod IsExternal
struct _ast4269; // CXXMethod IsExternalOneByte
struct _ast4270; // CXXRecord ExternalStringResourceBase
struct _ast4271; // Record v8::String::ExternalStringResourceBase
struct _ast4272; // CXXRecord ExternalStringResourceBase
struct _ast4273; // CXXDestructor ~ExternalStringResourceBase
struct _ast4274; // Pointer v8::String::ExternalStringResourceBase *
struct _ast4275; // CXXMethod IsCacheable
struct _ast4276; // Pointer const v8::String::ExternalStringResourceBase *
struct _ast4277; // Record const v8::String::ExternalStringResourceBase
struct _ast4278; // CXXConstructor ExternalStringResourceBase
struct _ast4279; // ParmVar 
struct _ast4280; // LValueReference const v8::String::ExternalStringResourceBase &
struct _ast4281; // FunctionProto void (const v8::String::ExternalStringResourceBase &)
struct _ast4282; // CXXMethod operator=
struct _ast4283; // ParmVar 
struct _ast4284; // CXXConstructor ExternalStringResourceBase
struct _ast4285; // FunctionProto void ()
struct _ast4286; // CXXMethod Dispose
struct _ast4287; // CXXMethod Lock
struct _ast4288; // FunctionProto void () const
struct _ast4289; // CXXMethod Unlock
struct _ast4290; // CXXRecord ExternalStringResource
struct _ast4291; // Record v8::String::ExternalStringResource
struct _ast4292; // CXXRecord ExternalStringResource
struct _ast4293; // CXXDestructor ~ExternalStringResource
struct _ast4294; // Pointer v8::String::ExternalStringResource *
struct _ast4295; // CXXMethod data
struct _ast4296; // FunctionProto const uint16_t *() const
struct _ast4297; // Pointer const uint16_t *
struct _ast4298; // Typedef const uint16_t
struct _ast4299; // Pointer const v8::String::ExternalStringResource *
struct _ast4300; // Record const v8::String::ExternalStringResource
struct _ast4301; // CXXMethod length
struct _ast4302; // FunctionProto size_t () const
struct _ast4303; // CXXConstructor ExternalStringResource
struct _ast4304; // FunctionProto void ()
struct _ast4305; // CXXConstructor ExternalStringResource
struct _ast4306; // ParmVar 
struct _ast4307; // LValueReference const v8::String::ExternalStringResource &
struct _ast4308; // FunctionProto void (const v8::String::ExternalStringResource &)
struct _ast4309; // CXXMethod operator=
struct _ast4310; // ParmVar 
struct _ast4311; // FunctionProto v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
struct _ast4312; // LValueReference v8::String::ExternalStringResource &
struct _ast4313; // CXXRecord ExternalOneByteStringResource
struct _ast4314; // Record v8::String::ExternalOneByteStringResource
struct _ast4315; // CXXRecord ExternalOneByteStringResource
struct _ast4316; // CXXDestructor ~ExternalOneByteStringResource
struct _ast4317; // Pointer v8::String::ExternalOneByteStringResource *
struct _ast4318; // CXXMethod data
struct _ast4319; // FunctionProto const char *() const
struct _ast4320; // Pointer const v8::String::ExternalOneByteStringResource *
struct _ast4321; // Record const v8::String::ExternalOneByteStringResource
struct _ast4322; // CXXMethod length
struct _ast4323; // CXXConstructor ExternalOneByteStringResource
struct _ast4324; // FunctionProto void ()
struct _ast4325; // CXXConstructor ExternalOneByteStringResource
struct _ast4326; // ParmVar 
struct _ast4327; // LValueReference const v8::String::ExternalOneByteStringResource &
struct _ast4328; // FunctionProto void (const v8::String::ExternalOneByteStringResource &)
struct _ast4329; // CXXMethod operator=
struct _ast4330; // ParmVar 
struct _ast4331; // FunctionProto v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
struct _ast4332; // LValueReference v8::String::ExternalOneByteStringResource &
struct _ast4333; // CXXMethod GetExternalStringResourceBase
struct _ast4334; // ParmVar encoding_out
struct _ast4335; // Pointer v8::String::Encoding *
struct _ast4336; // FunctionProto v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
struct _ast4337; // CXXMethod GetExternalStringResource
struct _ast4338; // FunctionProto v8::String::ExternalStringResource *() const
struct _ast4339; // CXXMethod GetExternalOneByteStringResource
struct _ast4340; // FunctionProto const v8::String::ExternalOneByteStringResource *() const
struct _ast4341; // CXXMethod Cast
struct _ast4342; // ParmVar obj
struct _ast4343; // FunctionProto v8::String *(v8::Value *)
struct _ast4344; // Pointer v8::String *
struct _ast4345; // CXXMethod NewFromUtf8
struct _ast4346; // ParmVar isolate
struct _ast4347; // ParmVar data
struct _ast4348; // ParmVar type
struct _ast4349; // ParmVar length
struct _ast4350; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
struct _ast4351; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4352; // CXXMethod NewFromOneByte
struct _ast4353; // ParmVar isolate
struct _ast4354; // ParmVar data
struct _ast4355; // ParmVar type
struct _ast4356; // ParmVar length
struct _ast4357; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
struct _ast4358; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4359; // CXXMethod NewFromTwoByte
struct _ast4360; // ParmVar isolate
struct _ast4361; // ParmVar data
struct _ast4362; // ParmVar type
struct _ast4363; // ParmVar length
struct _ast4364; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
struct _ast4365; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4366; // CXXMethod Concat
struct _ast4367; // ParmVar isolate
struct _ast4368; // ParmVar left
struct _ast4369; // TemplateSpecialization Local<v8::String>
struct _ast4370; // ParmVar right
struct _ast4371; // TemplateSpecialization Local<v8::String>
struct _ast4372; // FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
struct _ast4373; // TemplateSpecialization Local<v8::String>
struct _ast4374; // CXXMethod NewExternalTwoByte
struct _ast4375; // ParmVar isolate
struct _ast4376; // ParmVar resource
struct _ast4377; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
struct _ast4378; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4379; // CXXMethod MakeExternal
struct _ast4380; // ParmVar resource
struct _ast4381; // FunctionProto bool (v8::String::ExternalStringResource *)
struct _ast4382; // CXXMethod NewExternalOneByte
struct _ast4383; // ParmVar isolate
struct _ast4384; // ParmVar resource
struct _ast4385; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
struct _ast4386; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4387; // CXXMethod MakeExternal
struct _ast4388; // ParmVar resource
struct _ast4389; // FunctionProto bool (v8::String::ExternalOneByteStringResource *)
struct _ast4390; // CXXMethod CanMakeExternal
struct _ast4391; // CXXMethod StringEquals
struct _ast4392; // ParmVar str
struct _ast4393; // TemplateSpecialization Local<v8::String>
struct _ast4394; // FunctionProto bool (Local<v8::String>)
struct _ast4395; // CXXRecord Utf8Value
struct _ast4396; // Record v8::String::Utf8Value
struct _ast4397; // CXXRecord Utf8Value
struct _ast4398; // CXXConstructor Utf8Value
struct _ast4399; // ParmVar isolate
struct _ast4400; // ParmVar obj
struct _ast4401; // TemplateSpecialization Local<v8::Value>
struct _ast4402; // FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _ast4403; // Pointer v8::String::Utf8Value *
struct _ast4404; // CXXDestructor ~Utf8Value
struct _ast4405; // FunctionProto void ()
struct _ast4406; // CXXMethod operator*
struct _ast4407; // FunctionProto char *()
struct _ast4408; // CXXMethod operator*
struct _ast4409; // Pointer const v8::String::Utf8Value *
struct _ast4410; // Record const v8::String::Utf8Value
struct _ast4411; // CXXMethod length
struct _ast4412; // CXXConstructor Utf8Value
struct _ast4413; // ParmVar 
struct _ast4414; // LValueReference const v8::String::Utf8Value &
struct _ast4415; // FunctionProto void (const v8::String::Utf8Value &)
struct _ast4416; // CXXMethod operator=
struct _ast4417; // ParmVar 
struct _ast4418; // CXXRecord Value
struct _ast4419; // Record v8::String::Value
struct _ast4420; // CXXRecord Value
struct _ast4421; // CXXConstructor Value
struct _ast4422; // ParmVar isolate
struct _ast4423; // ParmVar obj
struct _ast4424; // TemplateSpecialization Local<v8::Value>
struct _ast4425; // FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _ast4426; // Pointer v8::String::Value *
struct _ast4427; // CXXDestructor ~Value
struct _ast4428; // FunctionProto void ()
struct _ast4429; // CXXMethod operator*
struct _ast4430; // FunctionProto uint16_t *()
struct _ast4431; // CXXMethod operator*
struct _ast4432; // Pointer const v8::String::Value *
struct _ast4433; // Record const v8::String::Value
struct _ast4434; // CXXMethod length
struct _ast4435; // CXXConstructor Value
struct _ast4436; // ParmVar 
struct _ast4437; // LValueReference const v8::String::Value &
struct _ast4438; // FunctionProto void (const v8::String::Value &)
struct _ast4439; // CXXMethod operator=
struct _ast4440; // ParmVar 
struct _ast4441; // CXXRecord Symbol
struct _ast4442; // CXXMethod Name
struct _ast4443; // FunctionProto Local<v8::Value> () const
struct _ast4444; // TemplateSpecialization Local<v8::Value>
struct _ast4445; // Pointer const v8::Symbol *
struct _ast4446; // Record const v8::Symbol
struct _ast4447; // CXXMethod New
struct _ast4448; // ParmVar isolate
struct _ast4449; // ParmVar name
struct _ast4450; // TemplateSpecialization Local<v8::String>
struct _ast4451; // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4452; // TemplateSpecialization Local<v8::Symbol>
struct _ast4453; // CXXMethod For
struct _ast4454; // ParmVar isolate
struct _ast4455; // ParmVar name
struct _ast4456; // TemplateSpecialization Local<v8::String>
struct _ast4457; // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4458; // TemplateSpecialization Local<v8::Symbol>
struct _ast4459; // CXXMethod ForApi
struct _ast4460; // ParmVar isolate
struct _ast4461; // ParmVar name
struct _ast4462; // TemplateSpecialization Local<v8::String>
struct _ast4463; // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4464; // TemplateSpecialization Local<v8::Symbol>
struct _ast4465; // CXXMethod GetAsyncIterator
struct _ast4466; // ParmVar isolate
struct _ast4467; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4468; // TemplateSpecialization Local<v8::Symbol>
struct _ast4469; // CXXMethod GetHasInstance
struct _ast4470; // ParmVar isolate
struct _ast4471; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4472; // TemplateSpecialization Local<v8::Symbol>
struct _ast4473; // CXXMethod GetIsConcatSpreadable
struct _ast4474; // ParmVar isolate
struct _ast4475; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4476; // TemplateSpecialization Local<v8::Symbol>
struct _ast4477; // CXXMethod GetIterator
struct _ast4478; // ParmVar isolate
struct _ast4479; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4480; // TemplateSpecialization Local<v8::Symbol>
struct _ast4481; // CXXMethod GetMatch
struct _ast4482; // ParmVar isolate
struct _ast4483; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4484; // TemplateSpecialization Local<v8::Symbol>
struct _ast4485; // CXXMethod GetReplace
struct _ast4486; // ParmVar isolate
struct _ast4487; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4488; // TemplateSpecialization Local<v8::Symbol>
struct _ast4489; // CXXMethod GetSearch
struct _ast4490; // ParmVar isolate
struct _ast4491; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4492; // TemplateSpecialization Local<v8::Symbol>
struct _ast4493; // CXXMethod GetSplit
struct _ast4494; // ParmVar isolate
struct _ast4495; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4496; // TemplateSpecialization Local<v8::Symbol>
struct _ast4497; // CXXMethod GetToPrimitive
struct _ast4498; // ParmVar isolate
struct _ast4499; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4500; // TemplateSpecialization Local<v8::Symbol>
struct _ast4501; // CXXMethod GetToStringTag
struct _ast4502; // ParmVar isolate
struct _ast4503; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4504; // TemplateSpecialization Local<v8::Symbol>
struct _ast4505; // CXXMethod GetUnscopables
struct _ast4506; // ParmVar isolate
struct _ast4507; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4508; // TemplateSpecialization Local<v8::Symbol>
struct _ast4509; // CXXMethod Cast
struct _ast4510; // ParmVar obj
struct _ast4511; // FunctionProto v8::Symbol *(v8::Value *)
struct _ast4512; // Pointer v8::Symbol *
struct _ast4513; // CXXRecord Private
struct _ast4514; // CXXMethod Name
struct _ast4515; // FunctionProto Local<v8::Value> () const
struct _ast4516; // TemplateSpecialization Local<v8::Value>
struct _ast4517; // Pointer const v8::Private *
struct _ast4518; // Record const v8::Private
struct _ast4519; // CXXMethod New
struct _ast4520; // ParmVar isolate
struct _ast4521; // ParmVar name
struct _ast4522; // TemplateSpecialization Local<v8::String>
struct _ast4523; // FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4524; // TemplateSpecialization Local<v8::Private>
struct _ast4525; // CXXMethod ForApi
struct _ast4526; // ParmVar isolate
struct _ast4527; // ParmVar name
struct _ast4528; // TemplateSpecialization Local<v8::String>
struct _ast4529; // FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4530; // TemplateSpecialization Local<v8::Private>
struct _ast4531; // CXXMethod Cast
struct _ast4532; // ParmVar data
struct _ast4533; // Pointer v8::Data *
struct _ast4534; // FunctionProto v8::Private *(v8::Data *)
struct _ast4535; // Pointer v8::Private *
struct _ast4536; // CXXRecord Number
struct _ast4537; // CXXMethod Value
struct _ast4538; // FunctionProto double () const
struct _ast4539; // Pointer const v8::Number *
struct _ast4540; // Record const v8::Number
struct _ast4541; // CXXMethod New
struct _ast4542; // ParmVar isolate
struct _ast4543; // ParmVar value
struct _ast4544; // FunctionProto Local<v8::Number> (v8::Isolate *, double)
struct _ast4545; // TemplateSpecialization Local<v8::Number>
struct _ast4546; // CXXMethod Cast
struct _ast4547; // ParmVar obj
struct _ast4548; // FunctionProto v8::Number *(v8::Value *)
struct _ast4549; // Pointer v8::Number *
struct _ast4550; // CXXRecord Integer
struct _ast4551; // CXXMethod New
struct _ast4552; // ParmVar isolate
struct _ast4553; // ParmVar value
struct _ast4554; // Typedef int32_t
struct _ast4555; // FunctionProto Local<v8::Integer> (v8::Isolate *, int32_t)
struct _ast4556; // TemplateSpecialization Local<v8::Integer>
struct _ast4557; // CXXMethod NewFromUnsigned
struct _ast4558; // ParmVar isolate
struct _ast4559; // ParmVar value
struct _ast4560; // FunctionProto Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _ast4561; // TemplateSpecialization Local<v8::Integer>
struct _ast4562; // CXXMethod Value
struct _ast4563; // FunctionProto int64_t () const
struct _ast4564; // Typedef int64_t
struct _ast4565; // Pointer const v8::Integer *
struct _ast4566; // Record const v8::Integer
struct _ast4567; // CXXMethod Cast
struct _ast4568; // ParmVar obj
struct _ast4569; // FunctionProto v8::Integer *(v8::Value *)
struct _ast4570; // Pointer v8::Integer *
struct _ast4571; // CXXRecord Int32
struct _ast4572; // CXXMethod Value
struct _ast4573; // FunctionProto int32_t () const
struct _ast4574; // Pointer const v8::Int32 *
struct _ast4575; // Record const v8::Int32
struct _ast4576; // CXXMethod Cast
struct _ast4577; // ParmVar obj
struct _ast4578; // FunctionProto v8::Int32 *(v8::Value *)
struct _ast4579; // Pointer v8::Int32 *
struct _ast4580; // CXXRecord Uint32
struct _ast4581; // CXXMethod Value
struct _ast4582; // Pointer const v8::Uint32 *
struct _ast4583; // Record const v8::Uint32
struct _ast4584; // CXXMethod Cast
struct _ast4585; // ParmVar obj
struct _ast4586; // FunctionProto v8::Uint32 *(v8::Value *)
struct _ast4587; // Pointer v8::Uint32 *
struct _ast4588; // CXXRecord BigInt
struct _ast4589; // CXXMethod New
struct _ast4590; // ParmVar isolate
struct _ast4591; // ParmVar value
struct _ast4592; // FunctionProto Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ast4593; // TemplateSpecialization Local<v8::BigInt>
struct _ast4594; // CXXMethod NewFromUnsigned
struct _ast4595; // ParmVar isolate
struct _ast4596; // ParmVar value
struct _ast4597; // FunctionProto Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _ast4598; // TemplateSpecialization Local<v8::BigInt>
struct _ast4599; // CXXMethod NewFromWords
struct _ast4600; // ParmVar context
struct _ast4601; // TemplateSpecialization Local<v8::Context>
struct _ast4602; // ParmVar sign_bit
struct _ast4603; // ParmVar word_count
struct _ast4604; // ParmVar words
struct _ast4605; // Pointer const uint64_t *
struct _ast4606; // Typedef const uint64_t
struct _ast4607; // FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
struct _ast4608; // TemplateSpecialization MaybeLocal<v8::BigInt>
struct _ast4609; // CXXMethod Uint64Value
struct _ast4610; // ParmVar lossless
struct _ast4611; // Pointer bool *
struct _ast4612; // FunctionProto uint64_t (bool *) const
struct _ast4613; // Pointer const v8::BigInt *
struct _ast4614; // Record const v8::BigInt
struct _ast4615; // CXXMethod Int64Value
struct _ast4616; // ParmVar lossless
struct _ast4617; // FunctionProto int64_t (bool *) const
struct _ast4618; // CXXMethod WordCount
struct _ast4619; // CXXMethod ToWordsArray
struct _ast4620; // ParmVar sign_bit
struct _ast4621; // ParmVar word_count
struct _ast4622; // ParmVar words
struct _ast4623; // FunctionProto void (int *, int *, uint64_t *) const
struct _ast4624; // CXXMethod Cast
struct _ast4625; // ParmVar obj
struct _ast4626; // FunctionProto v8::BigInt *(v8::Value *)
struct _ast4627; // Pointer v8::BigInt *
struct _ast4628; // Enum PropertyAttribute
struct _ast4629; // Enum v8::PropertyAttribute
struct _ast4630; // EnumConstant None
struct _ast4631; // EnumConstant ReadOnly
struct _ast4632; // EnumConstant DontEnum
struct _ast4633; // EnumConstant DontDelete
struct _ast4634; // Typedef AccessorGetterCallback
struct _ast4635; // Typedef v8::AccessorGetterCallback
struct _ast4636; // Typedef AccessorNameGetterCallback
struct _ast4637; // Typedef v8::AccessorNameGetterCallback
struct _ast4638; // Typedef AccessorSetterCallback
struct _ast4639; // Typedef v8::AccessorSetterCallback
struct _ast4640; // Typedef AccessorNameSetterCallback
struct _ast4641; // Typedef v8::AccessorNameSetterCallback
struct _ast4642; // Enum AccessControl
struct _ast4643; // Enum v8::AccessControl
struct _ast4644; // EnumConstant DEFAULT
struct _ast4645; // EnumConstant ALL_CAN_READ
struct _ast4646; // EnumConstant ALL_CAN_WRITE
struct _ast4647; // EnumConstant PROHIBITS_OVERWRITING
struct _ast4648; // Enum PropertyFilter
struct _ast4649; // Enum v8::PropertyFilter
struct _ast4650; // EnumConstant ALL_PROPERTIES
struct _ast4651; // EnumConstant ONLY_WRITABLE
struct _ast4652; // EnumConstant ONLY_ENUMERABLE
struct _ast4653; // EnumConstant ONLY_CONFIGURABLE
struct _ast4654; // EnumConstant SKIP_STRINGS
struct _ast4655; // EnumConstant SKIP_SYMBOLS
struct _ast4656; // Enum SideEffectType
struct _ast4657; // Enum v8::SideEffectType
struct _ast4658; // EnumConstant kHasSideEffect
struct _ast4659; // EnumConstant kHasNoSideEffect
struct _ast4660; // EnumConstant kHasSideEffectToReceiver
struct _ast4661; // Enum KeyCollectionMode
struct _ast4662; // Enum v8::KeyCollectionMode
struct _ast4663; // EnumConstant kOwnOnly
struct _ast4664; // EnumConstant kIncludePrototypes
struct _ast4665; // Enum IndexFilter
struct _ast4666; // Enum v8::IndexFilter
struct _ast4667; // EnumConstant kIncludeIndices
struct _ast4668; // EnumConstant kSkipIndices
struct _ast4669; // Enum KeyConversionMode
struct _ast4670; // Enum v8::KeyConversionMode
struct _ast4671; // EnumConstant kConvertToString
struct _ast4672; // EnumConstant kKeepNumbers
struct _ast4673; // Enum IntegrityLevel
struct _ast4674; // Enum v8::IntegrityLevel
struct _ast4675; // EnumConstant kFrozen
struct _ast4676; // EnumConstant kSealed
struct _ast4677; // CXXRecord Object
struct _ast4678; // CXXMethod Set
struct _ast4679; // ParmVar key
struct _ast4680; // TemplateSpecialization Local<v8::Value>
struct _ast4681; // ParmVar value
struct _ast4682; // TemplateSpecialization Local<v8::Value>
struct _ast4683; // FunctionProto bool (Local<v8::Value>, Local<v8::Value>)
struct _ast4684; // Pointer v8::Object *
struct _ast4685; // CXXMethod Set
struct _ast4686; // ParmVar context
struct _ast4687; // TemplateSpecialization Local<v8::Context>
struct _ast4688; // ParmVar key
struct _ast4689; // TemplateSpecialization Local<v8::Value>
struct _ast4690; // ParmVar value
struct _ast4691; // TemplateSpecialization Local<v8::Value>
struct _ast4692; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast4693; // TemplateSpecialization Maybe<bool>
struct _ast4694; // CXXMethod Set
struct _ast4695; // ParmVar index
struct _ast4696; // ParmVar value
struct _ast4697; // TemplateSpecialization Local<v8::Value>
struct _ast4698; // FunctionProto bool (uint32_t, Local<v8::Value>)
struct _ast4699; // CXXMethod Set
struct _ast4700; // ParmVar context
struct _ast4701; // TemplateSpecialization Local<v8::Context>
struct _ast4702; // ParmVar index
struct _ast4703; // ParmVar value
struct _ast4704; // TemplateSpecialization Local<v8::Value>
struct _ast4705; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4706; // TemplateSpecialization Maybe<bool>
struct _ast4707; // CXXMethod CreateDataProperty
struct _ast4708; // ParmVar context
struct _ast4709; // TemplateSpecialization Local<v8::Context>
struct _ast4710; // ParmVar key
struct _ast4711; // TemplateSpecialization Local<v8::Name>
struct _ast4712; // ParmVar value
struct _ast4713; // TemplateSpecialization Local<v8::Value>
struct _ast4714; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
struct _ast4715; // TemplateSpecialization Maybe<bool>
struct _ast4716; // CXXMethod CreateDataProperty
struct _ast4717; // ParmVar context
struct _ast4718; // TemplateSpecialization Local<v8::Context>
struct _ast4719; // ParmVar index
struct _ast4720; // ParmVar value
struct _ast4721; // TemplateSpecialization Local<v8::Value>
struct _ast4722; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4723; // TemplateSpecialization Maybe<bool>
struct _ast4724; // CXXMethod DefineOwnProperty
struct _ast4725; // ParmVar context
struct _ast4726; // TemplateSpecialization Local<v8::Context>
struct _ast4727; // ParmVar key
struct _ast4728; // TemplateSpecialization Local<v8::Name>
struct _ast4729; // ParmVar value
struct _ast4730; // TemplateSpecialization Local<v8::Value>
struct _ast4731; // ParmVar attributes
struct _ast4732; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _ast4733; // TemplateSpecialization Maybe<bool>
struct _ast4734; // CXXMethod DefineProperty
struct _ast4735; // ParmVar context
struct _ast4736; // TemplateSpecialization Local<v8::Context>
struct _ast4737; // ParmVar key
struct _ast4738; // TemplateSpecialization Local<v8::Name>
struct _ast4739; // ParmVar descriptor
struct _ast4740; // LValueReference v8::PropertyDescriptor &
struct _ast4741; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
struct _ast4742; // TemplateSpecialization Maybe<bool>
struct _ast4743; // CXXMethod Get
struct _ast4744; // ParmVar key
struct _ast4745; // TemplateSpecialization Local<v8::Value>
struct _ast4746; // FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _ast4747; // TemplateSpecialization Local<v8::Value>
struct _ast4748; // CXXMethod Get
struct _ast4749; // ParmVar context
struct _ast4750; // TemplateSpecialization Local<v8::Context>
struct _ast4751; // ParmVar key
struct _ast4752; // TemplateSpecialization Local<v8::Value>
struct _ast4753; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast4754; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast4755; // CXXMethod Get
struct _ast4756; // ParmVar index
struct _ast4757; // FunctionProto Local<v8::Value> (uint32_t)
struct _ast4758; // TemplateSpecialization Local<v8::Value>
struct _ast4759; // CXXMethod Get
struct _ast4760; // ParmVar context
struct _ast4761; // TemplateSpecialization Local<v8::Context>
struct _ast4762; // ParmVar index
struct _ast4763; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _ast4764; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast4765; // CXXMethod GetPropertyAttributes
struct _ast4766; // ParmVar context
struct _ast4767; // TemplateSpecialization Local<v8::Context>
struct _ast4768; // ParmVar key
struct _ast4769; // TemplateSpecialization Local<v8::Value>
struct _ast4770; // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
struct _ast4771; // TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _ast4772; // CXXMethod GetOwnPropertyDescriptor
struct _ast4773; // ParmVar context
struct _ast4774; // TemplateSpecialization Local<v8::Context>
struct _ast4775; // ParmVar key
struct _ast4776; // TemplateSpecialization Local<v8::Name>
struct _ast4777; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4778; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast4779; // CXXMethod Has
struct _ast4780; // ParmVar context
struct _ast4781; // TemplateSpecialization Local<v8::Context>
struct _ast4782; // ParmVar key
struct _ast4783; // TemplateSpecialization Local<v8::Value>
struct _ast4784; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4785; // TemplateSpecialization Maybe<bool>
struct _ast4786; // CXXMethod Delete
struct _ast4787; // ParmVar context
struct _ast4788; // TemplateSpecialization Local<v8::Context>
struct _ast4789; // ParmVar key
struct _ast4790; // TemplateSpecialization Local<v8::Value>
struct _ast4791; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4792; // TemplateSpecialization Maybe<bool>
struct _ast4793; // CXXMethod Has
struct _ast4794; // ParmVar context
struct _ast4795; // TemplateSpecialization Local<v8::Context>
struct _ast4796; // ParmVar index
struct _ast4797; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4798; // TemplateSpecialization Maybe<bool>
struct _ast4799; // CXXMethod Delete
struct _ast4800; // ParmVar context
struct _ast4801; // TemplateSpecialization Local<v8::Context>
struct _ast4802; // ParmVar index
struct _ast4803; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4804; // TemplateSpecialization Maybe<bool>
struct _ast4805; // CXXMethod SetAccessor
struct _ast4806; // ParmVar context
struct _ast4807; // TemplateSpecialization Local<v8::Context>
struct _ast4808; // ParmVar name
struct _ast4809; // TemplateSpecialization Local<v8::Name>
struct _ast4810; // ParmVar getter
struct _ast4811; // ParmVar setter
struct _ast4812; // ParmVar data
struct _ast4813; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast4814; // ParmVar settings
struct _ast4815; // ParmVar attribute
struct _ast4816; // ParmVar getter_side_effect_type
struct _ast4817; // ParmVar setter_side_effect_type
struct _ast4818; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4819; // TemplateSpecialization Maybe<bool>
struct _ast4820; // CXXMethod SetAccessorProperty
struct _ast4821; // ParmVar name
struct _ast4822; // TemplateSpecialization Local<v8::Name>
struct _ast4823; // ParmVar getter
struct _ast4824; // TemplateSpecialization Local<v8::Function>
struct _ast4825; // ParmVar setter
struct _ast4826; // TemplateSpecialization Local<v8::Function>
struct _ast4827; // ParmVar attribute
struct _ast4828; // ParmVar settings
struct _ast4829; // FunctionProto void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _ast4830; // CXXMethod SetNativeDataProperty
struct _ast4831; // ParmVar context
struct _ast4832; // TemplateSpecialization Local<v8::Context>
struct _ast4833; // ParmVar name
struct _ast4834; // TemplateSpecialization Local<v8::Name>
struct _ast4835; // ParmVar getter
struct _ast4836; // ParmVar setter
struct _ast4837; // ParmVar data
struct _ast4838; // TemplateSpecialization Local<v8::Value>
struct _ast4839; // ParmVar attributes
struct _ast4840; // ParmVar getter_side_effect_type
struct _ast4841; // ParmVar setter_side_effect_type
struct _ast4842; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4843; // TemplateSpecialization Maybe<bool>
struct _ast4844; // CXXMethod SetLazyDataProperty
struct _ast4845; // ParmVar context
struct _ast4846; // TemplateSpecialization Local<v8::Context>
struct _ast4847; // ParmVar name
struct _ast4848; // TemplateSpecialization Local<v8::Name>
struct _ast4849; // ParmVar getter
struct _ast4850; // ParmVar data
struct _ast4851; // TemplateSpecialization Local<v8::Value>
struct _ast4852; // ParmVar attributes
struct _ast4853; // ParmVar getter_side_effect_type
struct _ast4854; // ParmVar setter_side_effect_type
struct _ast4855; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4856; // TemplateSpecialization Maybe<bool>
struct _ast4857; // CXXMethod HasPrivate
struct _ast4858; // ParmVar context
struct _ast4859; // TemplateSpecialization Local<v8::Context>
struct _ast4860; // ParmVar key
struct _ast4861; // TemplateSpecialization Local<v8::Private>
struct _ast4862; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4863; // TemplateSpecialization Maybe<bool>
struct _ast4864; // CXXMethod SetPrivate
struct _ast4865; // ParmVar context
struct _ast4866; // TemplateSpecialization Local<v8::Context>
struct _ast4867; // ParmVar key
struct _ast4868; // TemplateSpecialization Local<v8::Private>
struct _ast4869; // ParmVar value
struct _ast4870; // TemplateSpecialization Local<v8::Value>
struct _ast4871; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
struct _ast4872; // TemplateSpecialization Maybe<bool>
struct _ast4873; // CXXMethod DeletePrivate
struct _ast4874; // ParmVar context
struct _ast4875; // TemplateSpecialization Local<v8::Context>
struct _ast4876; // ParmVar key
struct _ast4877; // TemplateSpecialization Local<v8::Private>
struct _ast4878; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4879; // TemplateSpecialization Maybe<bool>
struct _ast4880; // CXXMethod GetPrivate
struct _ast4881; // ParmVar context
struct _ast4882; // TemplateSpecialization Local<v8::Context>
struct _ast4883; // ParmVar key
struct _ast4884; // TemplateSpecialization Local<v8::Private>
struct _ast4885; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
struct _ast4886; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast4887; // CXXMethod GetPropertyNames
struct _ast4888; // ParmVar context
struct _ast4889; // TemplateSpecialization Local<v8::Context>
struct _ast4890; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4891; // TemplateSpecialization MaybeLocal<v8::Array>
struct _ast4892; // CXXMethod GetPropertyNames
struct _ast4893; // ParmVar context
struct _ast4894; // TemplateSpecialization Local<v8::Context>
struct _ast4895; // ParmVar mode
struct _ast4896; // ParmVar property_filter
struct _ast4897; // ParmVar index_filter
struct _ast4898; // ParmVar key_conversion
struct _ast4899; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
struct _ast4900; // TemplateSpecialization MaybeLocal<v8::Array>
struct _ast4901; // CXXMethod GetOwnPropertyNames
struct _ast4902; // ParmVar context
struct _ast4903; // TemplateSpecialization Local<v8::Context>
struct _ast4904; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4905; // TemplateSpecialization MaybeLocal<v8::Array>
struct _ast4906; // CXXMethod GetOwnPropertyNames
struct _ast4907; // ParmVar context
struct _ast4908; // TemplateSpecialization Local<v8::Context>
struct _ast4909; // ParmVar filter
struct _ast4910; // ParmVar key_conversion
struct _ast4911; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
struct _ast4912; // TemplateSpecialization MaybeLocal<v8::Array>
struct _ast4913; // CXXMethod GetPrototype
struct _ast4914; // FunctionProto Local<v8::Value> ()
struct _ast4915; // TemplateSpecialization Local<v8::Value>
struct _ast4916; // CXXMethod SetPrototype
struct _ast4917; // ParmVar context
struct _ast4918; // TemplateSpecialization Local<v8::Context>
struct _ast4919; // ParmVar prototype
struct _ast4920; // TemplateSpecialization Local<v8::Value>
struct _ast4921; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4922; // TemplateSpecialization Maybe<bool>
struct _ast4923; // CXXMethod FindInstanceInPrototypeChain
struct _ast4924; // ParmVar tmpl
struct _ast4925; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast4926; // FunctionProto Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _ast4927; // TemplateSpecialization Local<v8::Object>
struct _ast4928; // CXXMethod ObjectProtoToString
struct _ast4929; // ParmVar context
struct _ast4930; // TemplateSpecialization Local<v8::Context>
struct _ast4931; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>)
struct _ast4932; // TemplateSpecialization MaybeLocal<v8::String>
struct _ast4933; // CXXMethod GetConstructorName
struct _ast4934; // FunctionProto Local<v8::String> ()
struct _ast4935; // TemplateSpecialization Local<v8::String>
struct _ast4936; // CXXMethod SetIntegrityLevel
struct _ast4937; // ParmVar context
struct _ast4938; // TemplateSpecialization Local<v8::Context>
struct _ast4939; // ParmVar level
struct _ast4940; // FunctionProto Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _ast4941; // TemplateSpecialization Maybe<bool>
struct _ast4942; // CXXMethod InternalFieldCount
struct _ast4943; // CXXMethod InternalFieldCount
struct _ast4944; // ParmVar object
struct _ast4945; // LValueReference const PersistentBase<v8::Object> &
struct _ast4946; // TemplateSpecialization const PersistentBase<v8::Object>
struct _ast4947; // TemplateSpecialization PersistentBase<v8::Object>
struct _ast4948; // FunctionProto int (const PersistentBase<v8::Object> &)
struct _ast4949; // CXXMethod InternalFieldCount
struct _ast4950; // ParmVar object
struct _ast4951; // LValueReference const TracedGlobal<v8::Object> &
struct _ast4952; // TemplateSpecialization const TracedGlobal<v8::Object>
struct _ast4953; // TemplateSpecialization TracedGlobal<v8::Object>
struct _ast4954; // FunctionProto int (const TracedGlobal<v8::Object> &)
struct _ast4955; // CXXMethod GetInternalField
struct _ast4956; // ParmVar index
struct _ast4957; // FunctionProto Local<v8::Value> (int)
struct _ast4958; // TemplateSpecialization Local<v8::Value>
struct _ast4959; // CXXMethod SetInternalField
struct _ast4960; // ParmVar index
struct _ast4961; // ParmVar value
struct _ast4962; // TemplateSpecialization Local<v8::Value>
struct _ast4963; // FunctionProto void (int, Local<v8::Value>)
struct _ast4964; // CXXMethod GetAlignedPointerFromInternalField
struct _ast4965; // ParmVar index
struct _ast4966; // FunctionProto void *(int)
struct _ast4967; // CXXMethod GetAlignedPointerFromInternalField
struct _ast4968; // ParmVar object
struct _ast4969; // LValueReference const PersistentBase<v8::Object> &
struct _ast4970; // TemplateSpecialization const PersistentBase<v8::Object>
struct _ast4971; // TemplateSpecialization PersistentBase<v8::Object>
struct _ast4972; // ParmVar index
struct _ast4973; // FunctionProto void *(const PersistentBase<v8::Object> &, int)
struct _ast4974; // CXXMethod GetAlignedPointerFromInternalField
struct _ast4975; // ParmVar object
struct _ast4976; // LValueReference const TracedGlobal<v8::Object> &
struct _ast4977; // TemplateSpecialization const TracedGlobal<v8::Object>
struct _ast4978; // TemplateSpecialization TracedGlobal<v8::Object>
struct _ast4979; // ParmVar index
struct _ast4980; // FunctionProto void *(const TracedGlobal<v8::Object> &, int)
struct _ast4981; // CXXMethod SetAlignedPointerInInternalField
struct _ast4982; // ParmVar index
struct _ast4983; // ParmVar value
struct _ast4984; // FunctionProto void (int, void *)
struct _ast4985; // CXXMethod SetAlignedPointerInInternalFields
struct _ast4986; // ParmVar argc
struct _ast4987; // ParmVar indices
struct _ast4988; // Decayed int *
struct _ast4989; // ParmVar values
struct _ast4990; // Decayed void **
struct _ast4991; // FunctionProto void (int, int *, void **)
struct _ast4992; // CXXMethod HasOwnProperty
struct _ast4993; // ParmVar context
struct _ast4994; // TemplateSpecialization Local<v8::Context>
struct _ast4995; // ParmVar key
struct _ast4996; // TemplateSpecialization Local<v8::Name>
struct _ast4997; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4998; // TemplateSpecialization Maybe<bool>
struct _ast4999; // CXXMethod HasOwnProperty
struct _ast5000; // ParmVar context
struct _ast5001; // TemplateSpecialization Local<v8::Context>
struct _ast5002; // ParmVar index
struct _ast5003; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast5004; // TemplateSpecialization Maybe<bool>
struct _ast5005; // CXXMethod HasRealNamedProperty
struct _ast5006; // ParmVar context
struct _ast5007; // TemplateSpecialization Local<v8::Context>
struct _ast5008; // ParmVar key
struct _ast5009; // TemplateSpecialization Local<v8::Name>
struct _ast5010; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast5011; // TemplateSpecialization Maybe<bool>
struct _ast5012; // CXXMethod HasRealIndexedProperty
struct _ast5013; // ParmVar context
struct _ast5014; // TemplateSpecialization Local<v8::Context>
struct _ast5015; // ParmVar index
struct _ast5016; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast5017; // TemplateSpecialization Maybe<bool>
struct _ast5018; // CXXMethod HasRealNamedCallbackProperty
struct _ast5019; // ParmVar context
struct _ast5020; // TemplateSpecialization Local<v8::Context>
struct _ast5021; // ParmVar key
struct _ast5022; // TemplateSpecialization Local<v8::Name>
struct _ast5023; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast5024; // TemplateSpecialization Maybe<bool>
struct _ast5025; // CXXMethod GetRealNamedPropertyInPrototypeChain
struct _ast5026; // ParmVar context
struct _ast5027; // TemplateSpecialization Local<v8::Context>
struct _ast5028; // ParmVar key
struct _ast5029; // TemplateSpecialization Local<v8::Name>
struct _ast5030; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast5031; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5032; // CXXMethod GetRealNamedPropertyAttributesInPrototypeChain
struct _ast5033; // ParmVar context
struct _ast5034; // TemplateSpecialization Local<v8::Context>
struct _ast5035; // ParmVar key
struct _ast5036; // TemplateSpecialization Local<v8::Name>
struct _ast5037; // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast5038; // TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _ast5039; // CXXMethod GetRealNamedProperty
struct _ast5040; // ParmVar context
struct _ast5041; // TemplateSpecialization Local<v8::Context>
struct _ast5042; // ParmVar key
struct _ast5043; // TemplateSpecialization Local<v8::Name>
struct _ast5044; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast5045; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5046; // CXXMethod GetRealNamedPropertyAttributes
struct _ast5047; // ParmVar context
struct _ast5048; // TemplateSpecialization Local<v8::Context>
struct _ast5049; // ParmVar key
struct _ast5050; // TemplateSpecialization Local<v8::Name>
struct _ast5051; // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast5052; // TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _ast5053; // CXXMethod HasNamedLookupInterceptor
struct _ast5054; // CXXMethod HasIndexedLookupInterceptor
struct _ast5055; // CXXMethod GetIdentityHash
struct _ast5056; // CXXMethod Clone
struct _ast5057; // FunctionProto Local<v8::Object> ()
struct _ast5058; // TemplateSpecialization Local<v8::Object>
struct _ast5059; // CXXMethod CreationContext
struct _ast5060; // FunctionProto Local<v8::Context> ()
struct _ast5061; // TemplateSpecialization Local<v8::Context>
struct _ast5062; // CXXMethod CreationContext
struct _ast5063; // ParmVar object
struct _ast5064; // LValueReference const PersistentBase<v8::Object> &
struct _ast5065; // TemplateSpecialization const PersistentBase<v8::Object>
struct _ast5066; // TemplateSpecialization PersistentBase<v8::Object>
struct _ast5067; // FunctionProto Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _ast5068; // TemplateSpecialization Local<v8::Context>
struct _ast5069; // CXXMethod IsCallable
struct _ast5070; // CXXMethod IsConstructor
struct _ast5071; // CXXMethod CallAsFunction
struct _ast5072; // ParmVar context
struct _ast5073; // TemplateSpecialization Local<v8::Context>
struct _ast5074; // ParmVar recv
struct _ast5075; // TemplateSpecialization Local<v8::Value>
struct _ast5076; // ParmVar argc
struct _ast5077; // ParmVar argv
struct _ast5078; // Decayed Local<v8::Value> *
struct _ast5079; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5080; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5081; // CXXMethod CallAsConstructor
struct _ast5082; // ParmVar context
struct _ast5083; // TemplateSpecialization Local<v8::Context>
struct _ast5084; // ParmVar argc
struct _ast5085; // ParmVar argv
struct _ast5086; // Decayed Local<v8::Value> *
struct _ast5087; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
struct _ast5088; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5089; // CXXMethod GetIsolate
struct _ast5090; // FunctionProto v8::Isolate *()
struct _ast5091; // CXXMethod PreviewEntries
struct _ast5092; // ParmVar is_key_value
struct _ast5093; // FunctionProto MaybeLocal<v8::Array> (bool *)
struct _ast5094; // TemplateSpecialization MaybeLocal<v8::Array>
struct _ast5095; // CXXMethod New
struct _ast5096; // ParmVar isolate
struct _ast5097; // FunctionProto Local<v8::Object> (v8::Isolate *)
struct _ast5098; // TemplateSpecialization Local<v8::Object>
struct _ast5099; // CXXMethod New
struct _ast5100; // ParmVar isolate
struct _ast5101; // ParmVar prototype_or_null
struct _ast5102; // TemplateSpecialization Local<v8::Value>
struct _ast5103; // ParmVar names
struct _ast5104; // Pointer Local<v8::Name> *
struct _ast5105; // TemplateSpecialization Local<v8::Name>
struct _ast5106; // ParmVar values
struct _ast5107; // Pointer Local<v8::Value> *
struct _ast5108; // TemplateSpecialization Local<v8::Value>
struct _ast5109; // ParmVar length
struct _ast5110; // FunctionProto Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _ast5111; // TemplateSpecialization Local<v8::Object>
struct _ast5112; // CXXMethod Cast
struct _ast5113; // ParmVar obj
struct _ast5114; // FunctionProto v8::Object *(v8::Value *)
struct _ast5115; // CXXRecord Array
struct _ast5116; // CXXMethod Length
struct _ast5117; // Pointer const v8::Array *
struct _ast5118; // Record const v8::Array
struct _ast5119; // CXXMethod New
struct _ast5120; // ParmVar isolate
struct _ast5121; // ParmVar length
struct _ast5122; // FunctionProto Local<v8::Array> (v8::Isolate *, int)
struct _ast5123; // TemplateSpecialization Local<v8::Array>
struct _ast5124; // CXXMethod New
struct _ast5125; // ParmVar isolate
struct _ast5126; // ParmVar elements
struct _ast5127; // Pointer Local<v8::Value> *
struct _ast5128; // TemplateSpecialization Local<v8::Value>
struct _ast5129; // ParmVar length
struct _ast5130; // FunctionProto Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
struct _ast5131; // TemplateSpecialization Local<v8::Array>
struct _ast5132; // CXXMethod Cast
struct _ast5133; // ParmVar obj
struct _ast5134; // FunctionProto v8::Array *(v8::Value *)
struct _ast5135; // Pointer v8::Array *
struct _ast5136; // CXXRecord Map
struct _ast5137; // Record v8::Map
struct _ast5138; // CXXRecord Map
struct _ast5139; // CXXMethod Size
struct _ast5140; // Pointer const v8::Map *
struct _ast5141; // Record const v8::Map
struct _ast5142; // CXXMethod Clear
struct _ast5143; // Pointer v8::Map *
struct _ast5144; // CXXMethod Get
struct _ast5145; // ParmVar context
struct _ast5146; // TemplateSpecialization Local<v8::Context>
struct _ast5147; // ParmVar key
struct _ast5148; // TemplateSpecialization Local<v8::Value>
struct _ast5149; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast5150; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5151; // CXXMethod Set
struct _ast5152; // ParmVar context
struct _ast5153; // TemplateSpecialization Local<v8::Context>
struct _ast5154; // ParmVar key
struct _ast5155; // TemplateSpecialization Local<v8::Value>
struct _ast5156; // ParmVar value
struct _ast5157; // TemplateSpecialization Local<v8::Value>
struct _ast5158; // FunctionProto MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast5159; // TemplateSpecialization MaybeLocal<v8::Map>
struct _ast5160; // CXXMethod Has
struct _ast5161; // ParmVar context
struct _ast5162; // TemplateSpecialization Local<v8::Context>
struct _ast5163; // ParmVar key
struct _ast5164; // TemplateSpecialization Local<v8::Value>
struct _ast5165; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5166; // TemplateSpecialization Maybe<bool>
struct _ast5167; // CXXMethod Delete
struct _ast5168; // ParmVar context
struct _ast5169; // TemplateSpecialization Local<v8::Context>
struct _ast5170; // ParmVar key
struct _ast5171; // TemplateSpecialization Local<v8::Value>
struct _ast5172; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5173; // TemplateSpecialization Maybe<bool>
struct _ast5174; // CXXMethod AsArray
struct _ast5175; // FunctionProto Local<v8::Array> () const
struct _ast5176; // TemplateSpecialization Local<v8::Array>
struct _ast5177; // CXXMethod New
struct _ast5178; // ParmVar isolate
struct _ast5179; // FunctionProto Local<v8::Map> (v8::Isolate *)
struct _ast5180; // TemplateSpecialization Local<v8::Map>
struct _ast5181; // CXXMethod Cast
struct _ast5182; // ParmVar obj
struct _ast5183; // FunctionProto v8::Map *(v8::Value *)
struct _ast5184; // CXXRecord Set
struct _ast5185; // Record v8::Set
struct _ast5186; // CXXRecord Set
struct _ast5187; // CXXMethod Size
struct _ast5188; // Pointer const v8::Set *
struct _ast5189; // Record const v8::Set
struct _ast5190; // CXXMethod Clear
struct _ast5191; // Pointer v8::Set *
struct _ast5192; // CXXMethod Add
struct _ast5193; // ParmVar context
struct _ast5194; // TemplateSpecialization Local<v8::Context>
struct _ast5195; // ParmVar key
struct _ast5196; // TemplateSpecialization Local<v8::Value>
struct _ast5197; // FunctionProto MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
struct _ast5198; // TemplateSpecialization MaybeLocal<v8::Set>
struct _ast5199; // CXXMethod Has
struct _ast5200; // ParmVar context
struct _ast5201; // TemplateSpecialization Local<v8::Context>
struct _ast5202; // ParmVar key
struct _ast5203; // TemplateSpecialization Local<v8::Value>
struct _ast5204; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5205; // TemplateSpecialization Maybe<bool>
struct _ast5206; // CXXMethod Delete
struct _ast5207; // ParmVar context
struct _ast5208; // TemplateSpecialization Local<v8::Context>
struct _ast5209; // ParmVar key
struct _ast5210; // TemplateSpecialization Local<v8::Value>
struct _ast5211; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5212; // TemplateSpecialization Maybe<bool>
struct _ast5213; // CXXMethod AsArray
struct _ast5214; // FunctionProto Local<v8::Array> () const
struct _ast5215; // TemplateSpecialization Local<v8::Array>
struct _ast5216; // CXXMethod New
struct _ast5217; // ParmVar isolate
struct _ast5218; // FunctionProto Local<v8::Set> (v8::Isolate *)
struct _ast5219; // TemplateSpecialization Local<v8::Set>
struct _ast5220; // CXXMethod Cast
struct _ast5221; // ParmVar obj
struct _ast5222; // FunctionProto v8::Set *(v8::Value *)
struct _ast5223; // TemplateTypeParm T
struct _ast5224; // TemplateTypeParm T
struct _ast5225; // CXXRecord ReturnValue
struct _ast5226; // FunctionTemplate ReturnValue<T>
struct _ast5227; // TemplateTypeParm S
struct _ast5228; // TemplateTypeParm S
struct _ast5229; // CXXConstructor ReturnValue<T>
struct _ast5230; // ParmVar that
struct _ast5231; // LValueReference const ReturnValue<S> &
struct _ast5232; // TemplateSpecialization const ReturnValue<S>
struct _ast5233; // TemplateSpecialization ReturnValue<S>
struct _ast5234; // FunctionProto void (const ReturnValue<S> &)
struct _ast5235; // Pointer ReturnValue<T> *
struct _ast5236; // FunctionTemplate Set
struct _ast5237; // TemplateTypeParm S
struct _ast5238; // TemplateTypeParm S
struct _ast5239; // CXXMethod Set
struct _ast5240; // ParmVar handle
struct _ast5241; // LValueReference const Global<S> &
struct _ast5242; // TemplateSpecialization const Global<S>
struct _ast5243; // TemplateSpecialization Global<S>
struct _ast5244; // FunctionProto void (const Global<S> &)
struct _ast5245; // FunctionTemplate Set
struct _ast5246; // TemplateTypeParm S
struct _ast5247; // TemplateTypeParm S
struct _ast5248; // CXXMethod Set
struct _ast5249; // ParmVar handle
struct _ast5250; // LValueReference const TracedGlobal<S> &
struct _ast5251; // TemplateSpecialization const TracedGlobal<S>
struct _ast5252; // TemplateSpecialization TracedGlobal<S>
struct _ast5253; // FunctionProto void (const TracedGlobal<S> &)
struct _ast5254; // FunctionTemplate Set
struct _ast5255; // TemplateTypeParm S
struct _ast5256; // TemplateTypeParm S
struct _ast5257; // CXXMethod Set
struct _ast5258; // ParmVar handle
struct _ast5259; // TemplateSpecialization const Local<S>
struct _ast5260; // TemplateSpecialization Local<S>
struct _ast5261; // FunctionProto void (const Local<S>)
struct _ast5262; // CXXMethod Set
struct _ast5263; // ParmVar value
struct _ast5264; // CXXMethod Set
struct _ast5265; // ParmVar i
struct _ast5266; // CXXMethod Set
struct _ast5267; // ParmVar i
struct _ast5268; // FunctionProto void (int32_t)
struct _ast5269; // CXXMethod Set
struct _ast5270; // ParmVar i
struct _ast5271; // CXXMethod SetNull
struct _ast5272; // CXXMethod SetUndefined
struct _ast5273; // CXXMethod SetEmptyString
struct _ast5274; // CXXMethod GetIsolate
struct _ast5275; // Pointer const ReturnValue<T> *
struct _ast5276; // InjectedClassName const ReturnValue<T>
struct _ast5277; // FunctionTemplate Set
struct _ast5278; // TemplateTypeParm S
struct _ast5279; // TemplateTypeParm S
struct _ast5280; // CXXMethod Set
struct _ast5281; // ParmVar whatever
struct _ast5282; // Pointer S *
struct _ast5283; // FunctionProto void (S *)
struct _ast5284; // CXXMethod Get
struct _ast5285; // FunctionProto Local<v8::Value> () const
struct _ast5286; // TemplateSpecialization Local<v8::Value>
struct _ast5287; // TemplateTypeParm T
struct _ast5288; // TemplateTypeParm T
struct _ast5289; // CXXRecord FunctionCallbackInfo
struct _ast5290; // CXXMethod Length
struct _ast5291; // Pointer const FunctionCallbackInfo<T> *
struct _ast5292; // InjectedClassName const FunctionCallbackInfo<T>
struct _ast5293; // CXXMethod operator[]
struct _ast5294; // ParmVar i
struct _ast5295; // FunctionProto Local<v8::Value> (int) const
struct _ast5296; // TemplateSpecialization Local<v8::Value>
struct _ast5297; // CXXMethod This
struct _ast5298; // FunctionProto Local<v8::Object> () const
struct _ast5299; // TemplateSpecialization Local<v8::Object>
struct _ast5300; // CXXMethod Holder
struct _ast5301; // FunctionProto Local<v8::Object> () const
struct _ast5302; // TemplateSpecialization Local<v8::Object>
struct _ast5303; // CXXMethod NewTarget
struct _ast5304; // FunctionProto Local<v8::Value> () const
struct _ast5305; // TemplateSpecialization Local<v8::Value>
struct _ast5306; // CXXMethod IsConstructCall
struct _ast5307; // CXXMethod Data
struct _ast5308; // FunctionProto Local<v8::Value> () const
struct _ast5309; // TemplateSpecialization Local<v8::Value>
struct _ast5310; // CXXMethod GetIsolate
struct _ast5311; // CXXMethod GetReturnValue
struct _ast5312; // FunctionProto ReturnValue<T> () const
struct _ast5313; // TemplateSpecialization ReturnValue<T>
struct _ast5314; // Var kArgsLength
struct _ast5315; // Var kHolderIndex
struct _ast5316; // Var kIsolateIndex
struct _ast5317; // Var kReturnValueDefaultValueIndex
struct _ast5318; // Var kReturnValueIndex
struct _ast5319; // Var kDataIndex
struct _ast5320; // Var kNewTargetIndex
struct _ast5321; // CXXConstructor FunctionCallbackInfo<T>
struct _ast5322; // ParmVar implicit_args
struct _ast5323; // ParmVar values
struct _ast5324; // ParmVar length
struct _ast5325; // FunctionProto void (internal::Address *, internal::Address *, int)
struct _ast5326; // Pointer FunctionCallbackInfo<T> *
struct _ast5327; // Field implicit_args_
struct _ast5328; // Field values_
struct _ast5329; // Field length_
struct _ast5330; // TemplateTypeParm T
struct _ast5331; // TemplateTypeParm T
struct _ast5332; // CXXRecord PropertyCallbackInfo
struct _ast5333; // CXXMethod GetIsolate
struct _ast5334; // Pointer const PropertyCallbackInfo<T> *
struct _ast5335; // InjectedClassName const PropertyCallbackInfo<T>
struct _ast5336; // CXXMethod Data
struct _ast5337; // FunctionProto Local<v8::Value> () const
struct _ast5338; // TemplateSpecialization Local<v8::Value>
struct _ast5339; // CXXMethod This
struct _ast5340; // FunctionProto Local<v8::Object> () const
struct _ast5341; // TemplateSpecialization Local<v8::Object>
struct _ast5342; // CXXMethod Holder
struct _ast5343; // FunctionProto Local<v8::Object> () const
struct _ast5344; // TemplateSpecialization Local<v8::Object>
struct _ast5345; // CXXMethod GetReturnValue
struct _ast5346; // FunctionProto ReturnValue<T> () const
struct _ast5347; // TemplateSpecialization ReturnValue<T>
struct _ast5348; // CXXMethod ShouldThrowOnError
struct _ast5349; // Var kArgsLength
struct _ast5350; // Var kShouldThrowOnErrorIndex
struct _ast5351; // Var kHolderIndex
struct _ast5352; // Var kIsolateIndex
struct _ast5353; // Var kReturnValueDefaultValueIndex
struct _ast5354; // Var kReturnValueIndex
struct _ast5355; // Var kDataIndex
struct _ast5356; // Var kThisIndex
struct _ast5357; // CXXConstructor PropertyCallbackInfo<T>
struct _ast5358; // ParmVar args
struct _ast5359; // FunctionProto void (internal::Address *)
struct _ast5360; // Pointer PropertyCallbackInfo<T> *
struct _ast5361; // Field args_
struct _ast5362; // Typedef FunctionCallback
struct _ast5363; // Typedef v8::FunctionCallback
struct _ast5364; // Enum ConstructorBehavior
struct _ast5365; // Enum v8::ConstructorBehavior
struct _ast5366; // EnumConstant kThrow
struct _ast5367; // EnumConstant kAllow
struct _ast5368; // CXXRecord Function
struct _ast5369; // CXXMethod New
struct _ast5370; // ParmVar context
struct _ast5371; // TemplateSpecialization Local<v8::Context>
struct _ast5372; // ParmVar callback
struct _ast5373; // ParmVar data
struct _ast5374; // TemplateSpecialization Local<v8::Value>
struct _ast5375; // ParmVar length
struct _ast5376; // ParmVar behavior
struct _ast5377; // ParmVar side_effect_type
struct _ast5378; // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast5379; // TemplateSpecialization MaybeLocal<v8::Function>
struct _ast5380; // CXXMethod NewInstance
struct _ast5381; // ParmVar context
struct _ast5382; // TemplateSpecialization Local<v8::Context>
struct _ast5383; // ParmVar argc
struct _ast5384; // ParmVar argv
struct _ast5385; // Decayed Local<v8::Value> *
struct _ast5386; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
struct _ast5387; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast5388; // Pointer const v8::Function *
struct _ast5389; // Record const v8::Function
struct _ast5390; // CXXMethod NewInstance
struct _ast5391; // ParmVar context
struct _ast5392; // TemplateSpecialization Local<v8::Context>
struct _ast5393; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast5394; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast5395; // CXXMethod NewInstanceWithSideEffectType
struct _ast5396; // ParmVar context
struct _ast5397; // TemplateSpecialization Local<v8::Context>
struct _ast5398; // ParmVar argc
struct _ast5399; // ParmVar argv
struct _ast5400; // Decayed Local<v8::Value> *
struct _ast5401; // ParmVar side_effect_type
struct _ast5402; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
struct _ast5403; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast5404; // CXXMethod Call
struct _ast5405; // ParmVar context
struct _ast5406; // TemplateSpecialization Local<v8::Context>
struct _ast5407; // ParmVar recv
struct _ast5408; // TemplateSpecialization Local<v8::Value>
struct _ast5409; // ParmVar argc
struct _ast5410; // ParmVar argv
struct _ast5411; // Decayed Local<v8::Value> *
struct _ast5412; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5413; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5414; // Pointer v8::Function *
struct _ast5415; // CXXMethod SetName
struct _ast5416; // ParmVar name
struct _ast5417; // TemplateSpecialization Local<v8::String>
struct _ast5418; // FunctionProto void (Local<v8::String>)
struct _ast5419; // CXXMethod GetName
struct _ast5420; // FunctionProto Local<v8::Value> () const
struct _ast5421; // TemplateSpecialization Local<v8::Value>
struct _ast5422; // CXXMethod GetInferredName
struct _ast5423; // FunctionProto Local<v8::Value> () const
struct _ast5424; // TemplateSpecialization Local<v8::Value>
struct _ast5425; // CXXMethod GetDebugName
struct _ast5426; // FunctionProto Local<v8::Value> () const
struct _ast5427; // TemplateSpecialization Local<v8::Value>
struct _ast5428; // CXXMethod GetDisplayName
struct _ast5429; // FunctionProto Local<v8::Value> () const
struct _ast5430; // TemplateSpecialization Local<v8::Value>
struct _ast5431; // CXXMethod GetScriptLineNumber
struct _ast5432; // CXXMethod GetScriptColumnNumber
struct _ast5433; // CXXMethod ScriptId
struct _ast5434; // CXXMethod GetBoundFunction
struct _ast5435; // FunctionProto Local<v8::Value> () const
struct _ast5436; // TemplateSpecialization Local<v8::Value>
struct _ast5437; // CXXMethod GetScriptOrigin
struct _ast5438; // CXXMethod Cast
struct _ast5439; // ParmVar obj
struct _ast5440; // FunctionProto v8::Function *(v8::Value *)
struct _ast5441; // Var kLineOffsetNotFound
struct _ast5442; // CXXRecord Promise
struct _ast5443; // Enum PromiseState
struct _ast5444; // Enum v8::Promise::PromiseState
struct _ast5445; // EnumConstant kPending
struct _ast5446; // EnumConstant kFulfilled
struct _ast5447; // EnumConstant kRejected
struct _ast5448; // CXXRecord Resolver
struct _ast5449; // Record v8::Promise::Resolver
struct _ast5450; // CXXRecord Resolver
struct _ast5451; // CXXMethod New
struct _ast5452; // ParmVar context
struct _ast5453; // TemplateSpecialization Local<v8::Context>
struct _ast5454; // FunctionProto MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _ast5455; // TemplateSpecialization MaybeLocal<v8::Promise::Resolver>
struct _ast5456; // CXXMethod GetPromise
struct _ast5457; // FunctionProto Local<v8::Promise> ()
struct _ast5458; // TemplateSpecialization Local<v8::Promise>
struct _ast5459; // Pointer v8::Promise::Resolver *
struct _ast5460; // CXXMethod Resolve
struct _ast5461; // ParmVar context
struct _ast5462; // TemplateSpecialization Local<v8::Context>
struct _ast5463; // ParmVar value
struct _ast5464; // TemplateSpecialization Local<v8::Value>
struct _ast5465; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5466; // TemplateSpecialization Maybe<bool>
struct _ast5467; // CXXMethod Reject
struct _ast5468; // ParmVar context
struct _ast5469; // TemplateSpecialization Local<v8::Context>
struct _ast5470; // ParmVar value
struct _ast5471; // TemplateSpecialization Local<v8::Value>
struct _ast5472; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5473; // TemplateSpecialization Maybe<bool>
struct _ast5474; // CXXMethod Cast
struct _ast5475; // ParmVar obj
struct _ast5476; // FunctionProto v8::Promise::Resolver *(v8::Value *)
struct _ast5477; // CXXMethod Catch
struct _ast5478; // ParmVar context
struct _ast5479; // TemplateSpecialization Local<v8::Context>
struct _ast5480; // ParmVar handler
struct _ast5481; // TemplateSpecialization Local<v8::Function>
struct _ast5482; // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5483; // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ast5484; // Pointer v8::Promise *
struct _ast5485; // CXXMethod Then
struct _ast5486; // ParmVar context
struct _ast5487; // TemplateSpecialization Local<v8::Context>
struct _ast5488; // ParmVar handler
struct _ast5489; // TemplateSpecialization Local<v8::Function>
struct _ast5490; // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5491; // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ast5492; // CXXMethod Then
struct _ast5493; // ParmVar context
struct _ast5494; // TemplateSpecialization Local<v8::Context>
struct _ast5495; // ParmVar on_fulfilled
struct _ast5496; // TemplateSpecialization Local<v8::Function>
struct _ast5497; // ParmVar on_rejected
struct _ast5498; // TemplateSpecialization Local<v8::Function>
struct _ast5499; // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
struct _ast5500; // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ast5501; // CXXMethod HasHandler
struct _ast5502; // CXXMethod Result
struct _ast5503; // FunctionProto Local<v8::Value> ()
struct _ast5504; // TemplateSpecialization Local<v8::Value>
struct _ast5505; // CXXMethod State
struct _ast5506; // FunctionProto v8::Promise::PromiseState ()
struct _ast5507; // CXXMethod MarkAsHandled
struct _ast5508; // CXXMethod Cast
struct _ast5509; // ParmVar obj
struct _ast5510; // FunctionProto v8::Promise *(v8::Value *)
struct _ast5511; // Var kEmbedderFieldCount
struct _ast5512; // CXXRecord PropertyDescriptor
struct _ast5513; // CXXConstructor PropertyDescriptor
struct _ast5514; // Pointer v8::PropertyDescriptor *
struct _ast5515; // CXXConstructor PropertyDescriptor
struct _ast5516; // ParmVar value
struct _ast5517; // TemplateSpecialization Local<v8::Value>
struct _ast5518; // FunctionProto void (Local<v8::Value>)
struct _ast5519; // CXXConstructor PropertyDescriptor
struct _ast5520; // ParmVar value
struct _ast5521; // TemplateSpecialization Local<v8::Value>
struct _ast5522; // ParmVar writable
struct _ast5523; // FunctionProto void (Local<v8::Value>, bool)
struct _ast5524; // CXXConstructor PropertyDescriptor
struct _ast5525; // ParmVar get
struct _ast5526; // TemplateSpecialization Local<v8::Value>
struct _ast5527; // ParmVar set
struct _ast5528; // TemplateSpecialization Local<v8::Value>
struct _ast5529; // FunctionProto void (Local<v8::Value>, Local<v8::Value>)
struct _ast5530; // CXXDestructor ~PropertyDescriptor
struct _ast5531; // FunctionProto void ()
struct _ast5532; // CXXMethod value
struct _ast5533; // FunctionProto Local<v8::Value> () const
struct _ast5534; // TemplateSpecialization Local<v8::Value>
struct _ast5535; // Pointer const v8::PropertyDescriptor *
struct _ast5536; // Record const v8::PropertyDescriptor
struct _ast5537; // CXXMethod has_value
struct _ast5538; // CXXMethod get
struct _ast5539; // FunctionProto Local<v8::Value> () const
struct _ast5540; // TemplateSpecialization Local<v8::Value>
struct _ast5541; // CXXMethod has_get
struct _ast5542; // CXXMethod set
struct _ast5543; // FunctionProto Local<v8::Value> () const
struct _ast5544; // TemplateSpecialization Local<v8::Value>
struct _ast5545; // CXXMethod has_set
struct _ast5546; // CXXMethod set_enumerable
struct _ast5547; // ParmVar enumerable
struct _ast5548; // CXXMethod enumerable
struct _ast5549; // CXXMethod has_enumerable
struct _ast5550; // CXXMethod set_configurable
struct _ast5551; // ParmVar configurable
struct _ast5552; // CXXMethod configurable
struct _ast5553; // CXXMethod has_configurable
struct _ast5554; // CXXMethod writable
struct _ast5555; // CXXMethod has_writable
struct _ast5556; // CXXRecord PrivateData
struct _ast5557; // Record v8::PropertyDescriptor::PrivateData
struct _ast5558; // CXXMethod get_private
struct _ast5559; // FunctionProto v8::PropertyDescriptor::PrivateData *() const
struct _ast5560; // Pointer v8::PropertyDescriptor::PrivateData *
struct _ast5561; // CXXConstructor PropertyDescriptor
struct _ast5562; // ParmVar 
struct _ast5563; // LValueReference const v8::PropertyDescriptor &
struct _ast5564; // FunctionProto void (const v8::PropertyDescriptor &)
struct _ast5565; // CXXMethod operator=
struct _ast5566; // ParmVar 
struct _ast5567; // CXXRecord Proxy
struct _ast5568; // CXXMethod GetTarget
struct _ast5569; // FunctionProto Local<v8::Value> ()
struct _ast5570; // TemplateSpecialization Local<v8::Value>
struct _ast5571; // Pointer v8::Proxy *
struct _ast5572; // CXXMethod GetHandler
struct _ast5573; // FunctionProto Local<v8::Value> ()
struct _ast5574; // TemplateSpecialization Local<v8::Value>
struct _ast5575; // CXXMethod IsRevoked
struct _ast5576; // CXXMethod Revoke
struct _ast5577; // CXXMethod New
struct _ast5578; // ParmVar context
struct _ast5579; // TemplateSpecialization Local<v8::Context>
struct _ast5580; // ParmVar local_target
struct _ast5581; // TemplateSpecialization Local<v8::Object>
struct _ast5582; // ParmVar local_handler
struct _ast5583; // TemplateSpecialization Local<v8::Object>
struct _ast5584; // FunctionProto MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
struct _ast5585; // TemplateSpecialization MaybeLocal<v8::Proxy>
struct _ast5586; // CXXMethod Cast
struct _ast5587; // ParmVar obj
struct _ast5588; // FunctionProto v8::Proxy *(v8::Value *)
struct _ast5589; // ClassTemplate MemorySpan
struct _ast5590; // TemplateTypeParm T
struct _ast5591; // TemplateTypeParm T
struct _ast5592; // CXXRecord MemorySpan
struct _ast5593; // InjectedClassName MemorySpan<T>
struct _ast5594; // CXXRecord MemorySpan
struct _ast5595; // CXXConstructor MemorySpan<T>
struct _ast5596; // Pointer MemorySpan<T> *
struct _ast5597; // CXXConstructor MemorySpan<T>
struct _ast5598; // ParmVar data
struct _ast5599; // Pointer T *
struct _ast5600; // ParmVar size
struct _ast5601; // FunctionProto void (T *, size_t)
struct _ast5602; // CXXMethod data
struct _ast5603; // FunctionProto T *() const
struct _ast5604; // Pointer const MemorySpan<T> *
struct _ast5605; // InjectedClassName const MemorySpan<T>
struct _ast5606; // CXXMethod size
struct _ast5607; // ClassTemplateSpecialization MemorySpan
struct _ast5608; // Record v8::MemorySpan<const unsigned char>
struct _ast5609; // CXXConstructor MemorySpan
struct _ast5610; // FunctionProto void ()
struct _ast5611; // Pointer v8::MemorySpan<const unsigned char> *
struct _ast5612; // CXXConstructor MemorySpan
struct _ast5613; // ParmVar data
struct _ast5614; // Pointer const unsigned char *
struct _ast5615; // SubstTemplateTypeParm const unsigned char
struct _ast5616; // ParmVar size
struct _ast5617; // FunctionProto void (const unsigned char *, size_t)
struct _ast5618; // CXXMethod data
struct _ast5619; // FunctionProto const unsigned char *() const
struct _ast5620; // Pointer const v8::MemorySpan<const unsigned char> *
struct _ast5621; // Record const v8::MemorySpan<const unsigned char>
struct _ast5622; // CXXMethod size
struct _ast5623; // CXXConstructor MemorySpan
struct _ast5624; // ParmVar 
struct _ast5625; // LValueReference const v8::MemorySpan<const unsigned char> &
struct _ast5626; // FunctionProto void (const v8::MemorySpan<const unsigned char> &)
struct _ast5627; // CXXConstructor MemorySpan
struct _ast5628; // ParmVar 
struct _ast5629; // RValueReference v8::MemorySpan<const unsigned char> &&
struct _ast5630; // FunctionProto void (v8::MemorySpan<const unsigned char> &&)
struct _ast5631; // CXXRecord OwnedBuffer
struct _ast5632; // Record v8::OwnedBuffer
struct _ast5633; // CXXRecord OwnedBuffer
struct _ast5634; // Field buffer
struct _ast5635; // Field size
struct _ast5636; // CXXConstructor OwnedBuffer
struct _ast5637; // ParmVar buffer
struct _ast5638; // Elaborated std::unique_ptr<const uint8_t []>
struct _ast5639; // ParmVar size
struct _ast5640; // FunctionProto void (std::unique_ptr<const uint8_t []>, size_t)
struct _ast5641; // Pointer v8::OwnedBuffer *
struct _ast5642; // CXXConstructor OwnedBuffer
struct _ast5643; // FunctionProto void ()
struct _ast5644; // CXXConstructor OwnedBuffer
struct _ast5645; // ParmVar 
struct _ast5646; // LValueReference const v8::OwnedBuffer &
struct _ast5647; // Record const v8::OwnedBuffer
struct _ast5648; // FunctionProto void (const v8::OwnedBuffer &)
struct _ast5649; // CXXConstructor OwnedBuffer
struct _ast5650; // ParmVar 
struct _ast5651; // RValueReference v8::OwnedBuffer &&
struct _ast5652; // FunctionProto void (v8::OwnedBuffer &&) noexcept
struct _ast5653; // CXXMethod operator=
struct _ast5654; // ParmVar 
struct _ast5655; // FunctionProto v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ast5656; // LValueReference v8::OwnedBuffer &
struct _ast5657; // CXXDestructor ~OwnedBuffer
struct _ast5658; // CXXMethod operator=
struct _ast5659; // ParmVar 
struct _ast5660; // FunctionProto v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ast5661; // CXXRecord CompiledWasmModule
struct _ast5662; // Record v8::CompiledWasmModule
struct _ast5663; // CXXRecord CompiledWasmModule
struct _ast5664; // CXXMethod Serialize
struct _ast5665; // FunctionProto v8::OwnedBuffer ()
struct _ast5666; // Pointer v8::CompiledWasmModule *
struct _ast5667; // CXXMethod GetWireBytesRef
struct _ast5668; // FunctionProto MemorySpan<const uint8_t> ()
struct _ast5669; // TemplateSpecialization MemorySpan<const uint8_t>
struct _ast5670; // CXXConstructor CompiledWasmModule
struct _ast5671; // ParmVar 
struct _ast5672; // LValueReference const v8::CompiledWasmModule &
struct _ast5673; // Record const v8::CompiledWasmModule
struct _ast5674; // FunctionProto void (const v8::CompiledWasmModule &)
struct _ast5675; // CXXConstructor CompiledWasmModule
struct _ast5676; // ParmVar 
struct _ast5677; // RValueReference v8::CompiledWasmModule &&
struct _ast5678; // FunctionProto void (v8::CompiledWasmModule &&)
struct _ast5679; // CXXMethod operator=
struct _ast5680; // ParmVar 
struct _ast5681; // FunctionProto v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _ast5682; // LValueReference v8::CompiledWasmModule &
struct _ast5683; // CXXDestructor ~CompiledWasmModule
struct _ast5684; // FunctionProto void ()
struct _ast5685; // CXXRecord WasmModuleObject
struct _ast5686; // CXXRecord TransferrableModule
struct _ast5687; // Record v8::WasmModuleObject::TransferrableModule
struct _ast5688; // CXXRecord TransferrableModule
struct _ast5689; // CXXConstructor TransferrableModule
struct _ast5690; // ParmVar src
struct _ast5691; // RValueReference v8::WasmModuleObject::TransferrableModule &&
struct _ast5692; // FunctionProto void (v8::WasmModuleObject::TransferrableModule &&)
struct _ast5693; // Pointer v8::WasmModuleObject::TransferrableModule *
struct _ast5694; // CXXConstructor TransferrableModule
struct _ast5695; // ParmVar src
struct _ast5696; // LValueReference const v8::WasmModuleObject::TransferrableModule &
struct _ast5697; // Record const v8::WasmModuleObject::TransferrableModule
struct _ast5698; // FunctionProto void (const v8::WasmModuleObject::TransferrableModule &)
struct _ast5699; // CXXMethod operator=
struct _ast5700; // ParmVar src
struct _ast5701; // FunctionProto v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
struct _ast5702; // LValueReference v8::WasmModuleObject::TransferrableModule &
struct _ast5703; // CXXMethod operator=
struct _ast5704; // ParmVar src
struct _ast5705; // FunctionProto v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
struct _ast5706; // CXXDestructor ~TransferrableModule
struct _ast5707; // FunctionProto void ()
struct _ast5708; // CXXMethod GetTransferrableModule
struct _ast5709; // FunctionProto v8::WasmModuleObject::TransferrableModule ()
struct _ast5710; // Pointer v8::WasmModuleObject *
struct _ast5711; // CXXMethod FromTransferrableModule
struct _ast5712; // ParmVar isolate
struct _ast5713; // ParmVar 
struct _ast5714; // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
struct _ast5715; // TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _ast5716; // CXXMethod GetCompiledModule
struct _ast5717; // FunctionProto v8::CompiledWasmModule ()
struct _ast5718; // CXXMethod DeserializeOrCompile
struct _ast5719; // ParmVar isolate
struct _ast5720; // ParmVar serialized_module
struct _ast5721; // TemplateSpecialization MemorySpan<const uint8_t>
struct _ast5722; // ParmVar wire_bytes
struct _ast5723; // TemplateSpecialization MemorySpan<const uint8_t>
struct _ast5724; // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _ast5725; // TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _ast5726; // CXXMethod Cast
struct _ast5727; // ParmVar obj
struct _ast5728; // FunctionProto v8::WasmModuleObject *(v8::Value *)
struct _ast5729; // CXXRecord WasmStreaming
struct _ast5730; // Record v8::WasmStreaming
struct _ast5731; // CXXRecord WasmStreaming
struct _ast5732; // CXXRecord WasmStreamingImpl
struct _ast5733; // Record v8::WasmStreaming::WasmStreamingImpl
struct _ast5734; // CXXRecord Client
struct _ast5735; // Record v8::WasmStreaming::Client
struct _ast5736; // CXXRecord Client
struct _ast5737; // CXXDestructor ~Client
struct _ast5738; // FunctionProto void ()
struct _ast5739; // Pointer v8::WasmStreaming::Client *
struct _ast5740; // CXXMethod OnModuleCompiled
struct _ast5741; // ParmVar compiled_module
struct _ast5742; // FunctionProto void (v8::CompiledWasmModule)
struct _ast5743; // CXXMethod operator=
struct _ast5744; // ParmVar 
struct _ast5745; // LValueReference const v8::WasmStreaming::Client &
struct _ast5746; // Record const v8::WasmStreaming::Client
struct _ast5747; // FunctionProto v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
struct _ast5748; // LValueReference v8::WasmStreaming::Client &
struct _ast5749; // CXXConstructor WasmStreaming
struct _ast5750; // ParmVar impl
struct _ast5751; // Elaborated std::unique_ptr<WasmStreamingImpl>
struct _ast5752; // FunctionProto void (std::unique_ptr<WasmStreamingImpl>)
struct _ast5753; // Pointer v8::WasmStreaming *
struct _ast5754; // CXXDestructor ~WasmStreaming
struct _ast5755; // FunctionProto void ()
struct _ast5756; // CXXMethod OnBytesReceived
struct _ast5757; // ParmVar bytes
struct _ast5758; // ParmVar size
struct _ast5759; // FunctionProto void (const uint8_t *, size_t)
struct _ast5760; // CXXMethod Finish
struct _ast5761; // CXXMethod Abort
struct _ast5762; // ParmVar exception
struct _ast5763; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5764; // FunctionProto void (MaybeLocal<v8::Value>)
struct _ast5765; // CXXMethod SetCompiledModuleBytes
struct _ast5766; // ParmVar bytes
struct _ast5767; // ParmVar size
struct _ast5768; // FunctionProto bool (const uint8_t *, size_t)
struct _ast5769; // CXXMethod SetClient
struct _ast5770; // ParmVar client
struct _ast5771; // Elaborated std::shared_ptr<Client>
struct _ast5772; // FunctionProto void (std::shared_ptr<Client>)
struct _ast5773; // CXXMethod Unpack
struct _ast5774; // ParmVar isolate
struct _ast5775; // ParmVar value
struct _ast5776; // TemplateSpecialization Local<v8::Value>
struct _ast5777; // FunctionProto std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
struct _ast5778; // Elaborated std::shared_ptr<WasmStreaming>
struct _ast5779; // CXXConstructor WasmStreaming
struct _ast5780; // ParmVar 
struct _ast5781; // LValueReference const v8::WasmStreaming &
struct _ast5782; // Record const v8::WasmStreaming
struct _ast5783; // FunctionProto void (const v8::WasmStreaming &)
struct _ast5784; // CXXRecord WasmModuleObjectBuilderStreaming
struct _ast5785; // Record v8::WasmModuleObjectBuilderStreaming
struct _ast5786; // CXXRecord WasmModuleObjectBuilderStreaming
struct _ast5787; // CXXConstructor WasmModuleObjectBuilderStreaming
struct _ast5788; // ParmVar isolate
struct _ast5789; // Pointer v8::WasmModuleObjectBuilderStreaming *
struct _ast5790; // CXXMethod OnBytesReceived
struct _ast5791; // ParmVar 
struct _ast5792; // ParmVar size
struct _ast5793; // CXXMethod Finish
struct _ast5794; // CXXMethod Abort
struct _ast5795; // ParmVar exception
struct _ast5796; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast5797; // FunctionProto void (MaybeLocal<v8::Value>)
struct _ast5798; // CXXMethod GetPromise
struct _ast5799; // FunctionProto Local<v8::Promise> ()
struct _ast5800; // TemplateSpecialization Local<v8::Promise>
struct _ast5801; // CXXDestructor ~WasmModuleObjectBuilderStreaming
struct _ast5802; // FunctionProto void ()
struct _ast5803; // Enum ArrayBufferCreationMode
struct _ast5804; // Enum v8::ArrayBufferCreationMode
struct _ast5805; // EnumConstant kInternalized
struct _ast5806; // EnumConstant kExternalized
struct _ast5807; // CXXRecord ArrayBuffer
struct _ast5808; // CXXRecord Allocator
struct _ast5809; // Record v8::ArrayBuffer::Allocator
struct _ast5810; // CXXRecord Allocator
struct _ast5811; // CXXDestructor ~Allocator
struct _ast5812; // FunctionProto void ()
struct _ast5813; // Pointer v8::ArrayBuffer::Allocator *
struct _ast5814; // CXXMethod Allocate
struct _ast5815; // ParmVar length
struct _ast5816; // FunctionProto void *(size_t)
struct _ast5817; // CXXMethod AllocateUninitialized
struct _ast5818; // ParmVar length
struct _ast5819; // CXXMethod Free
struct _ast5820; // ParmVar data
struct _ast5821; // ParmVar length
struct _ast5822; // FunctionProto void (void *, size_t)
struct _ast5823; // Enum AllocationMode
struct _ast5824; // Enum v8::ArrayBuffer::Allocator::AllocationMode
struct _ast5825; // EnumConstant kNormal
struct _ast5826; // EnumConstant kReservation
struct _ast5827; // CXXMethod NewDefaultAllocator
struct _ast5828; // FunctionProto v8::ArrayBuffer::Allocator *()
struct _ast5829; // CXXMethod operator=
struct _ast5830; // ParmVar 
struct _ast5831; // LValueReference const v8::ArrayBuffer::Allocator &
struct _ast5832; // Record const v8::ArrayBuffer::Allocator
struct _ast5833; // FunctionProto v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
struct _ast5834; // LValueReference v8::ArrayBuffer::Allocator &
struct _ast5835; // CXXRecord Contents
struct _ast5836; // Record v8::ArrayBuffer::Contents
struct _ast5837; // CXXRecord Contents
struct _ast5838; // TypeAlias DeleterCallback
struct _ast5839; // Typedef v8::ArrayBuffer::Contents::DeleterCallback
struct _ast5840; // CXXConstructor Contents
struct _ast5841; // Pointer v8::ArrayBuffer::Contents *
struct _ast5842; // CXXMethod AllocationBase
struct _ast5843; // FunctionProto void *() const
struct _ast5844; // Pointer const v8::ArrayBuffer::Contents *
struct _ast5845; // Record const v8::ArrayBuffer::Contents
struct _ast5846; // CXXMethod AllocationLength
struct _ast5847; // CXXMethod AllocationMode
struct _ast5848; // FunctionProto Allocator::AllocationMode () const
struct _ast5849; // Elaborated Allocator::AllocationMode
struct _ast5850; // CXXMethod Data
struct _ast5851; // CXXMethod ByteLength
struct _ast5852; // CXXMethod Deleter
struct _ast5853; // FunctionProto v8::ArrayBuffer::Contents::DeleterCallback () const
struct _ast5854; // CXXMethod DeleterData
struct _ast5855; // CXXMethod ByteLength
struct _ast5856; // Pointer const v8::ArrayBuffer *
struct _ast5857; // Record const v8::ArrayBuffer
struct _ast5858; // CXXMethod New
struct _ast5859; // ParmVar isolate
struct _ast5860; // ParmVar byte_length
struct _ast5861; // FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _ast5862; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5863; // CXXMethod New
struct _ast5864; // ParmVar isolate
struct _ast5865; // ParmVar data
struct _ast5866; // ParmVar byte_length
struct _ast5867; // ParmVar mode
struct _ast5868; // FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5869; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5870; // CXXMethod IsExternal
struct _ast5871; // CXXMethod IsDetachable
struct _ast5872; // CXXMethod IsNeuterable
struct _ast5873; // CXXMethod Detach
struct _ast5874; // Pointer v8::ArrayBuffer *
struct _ast5875; // CXXMethod Neuter
struct _ast5876; // CXXMethod Externalize
struct _ast5877; // FunctionProto v8::ArrayBuffer::Contents ()
struct _ast5878; // CXXMethod GetContents
struct _ast5879; // CXXMethod Cast
struct _ast5880; // ParmVar obj
struct _ast5881; // FunctionProto v8::ArrayBuffer *(v8::Value *)
struct _ast5882; // Var kInternalFieldCount
struct _ast5883; // Var kEmbedderFieldCount
struct _ast5884; // CXXRecord ArrayBufferView
struct _ast5885; // Record v8::ArrayBufferView
struct _ast5886; // CXXRecord ArrayBufferView
struct _ast5887; // CXXMethod Buffer
struct _ast5888; // FunctionProto Local<v8::ArrayBuffer> ()
struct _ast5889; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5890; // Pointer v8::ArrayBufferView *
struct _ast5891; // CXXMethod ByteOffset
struct _ast5892; // FunctionProto size_t ()
struct _ast5893; // CXXMethod ByteLength
struct _ast5894; // CXXMethod CopyContents
struct _ast5895; // ParmVar dest
struct _ast5896; // ParmVar byte_length
struct _ast5897; // FunctionProto size_t (void *, size_t)
struct _ast5898; // CXXMethod HasBuffer
struct _ast5899; // Pointer const v8::ArrayBufferView *
struct _ast5900; // Record const v8::ArrayBufferView
struct _ast5901; // CXXMethod Cast
struct _ast5902; // ParmVar obj
struct _ast5903; // FunctionProto v8::ArrayBufferView *(v8::Value *)
struct _ast5904; // Var kInternalFieldCount
struct _ast5905; // Var kEmbedderFieldCount
struct _ast5906; // CXXRecord TypedArray
struct _ast5907; // Record v8::TypedArray
struct _ast5908; // CXXRecord TypedArray
struct _ast5909; // Var kMaxLength
struct _ast5910; // CXXMethod Length
struct _ast5911; // Pointer v8::TypedArray *
struct _ast5912; // CXXMethod Cast
struct _ast5913; // ParmVar obj
struct _ast5914; // FunctionProto v8::TypedArray *(v8::Value *)
struct _ast5915; // CXXRecord Uint8Array
struct _ast5916; // Record v8::Uint8Array
struct _ast5917; // CXXRecord Uint8Array
struct _ast5918; // CXXMethod New
struct _ast5919; // ParmVar array_buffer
struct _ast5920; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5921; // ParmVar byte_offset
struct _ast5922; // ParmVar length
struct _ast5923; // FunctionProto Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5924; // TemplateSpecialization Local<v8::Uint8Array>
struct _ast5925; // CXXMethod New
struct _ast5926; // ParmVar shared_array_buffer
struct _ast5927; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast5928; // ParmVar byte_offset
struct _ast5929; // ParmVar length
struct _ast5930; // FunctionProto Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5931; // TemplateSpecialization Local<v8::Uint8Array>
struct _ast5932; // CXXMethod Cast
struct _ast5933; // ParmVar obj
struct _ast5934; // FunctionProto v8::Uint8Array *(v8::Value *)
struct _ast5935; // Pointer v8::Uint8Array *
struct _ast5936; // CXXRecord Uint8ClampedArray
struct _ast5937; // Record v8::Uint8ClampedArray
struct _ast5938; // CXXRecord Uint8ClampedArray
struct _ast5939; // CXXMethod New
struct _ast5940; // ParmVar array_buffer
struct _ast5941; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5942; // ParmVar byte_offset
struct _ast5943; // ParmVar length
struct _ast5944; // FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5945; // TemplateSpecialization Local<v8::Uint8ClampedArray>
struct _ast5946; // CXXMethod New
struct _ast5947; // ParmVar shared_array_buffer
struct _ast5948; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast5949; // ParmVar byte_offset
struct _ast5950; // ParmVar length
struct _ast5951; // FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5952; // TemplateSpecialization Local<v8::Uint8ClampedArray>
struct _ast5953; // CXXMethod Cast
struct _ast5954; // ParmVar obj
struct _ast5955; // FunctionProto v8::Uint8ClampedArray *(v8::Value *)
struct _ast5956; // Pointer v8::Uint8ClampedArray *
struct _ast5957; // CXXRecord Int8Array
struct _ast5958; // Record v8::Int8Array
struct _ast5959; // CXXRecord Int8Array
struct _ast5960; // CXXMethod New
struct _ast5961; // ParmVar array_buffer
struct _ast5962; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5963; // ParmVar byte_offset
struct _ast5964; // ParmVar length
struct _ast5965; // FunctionProto Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5966; // TemplateSpecialization Local<v8::Int8Array>
struct _ast5967; // CXXMethod New
struct _ast5968; // ParmVar shared_array_buffer
struct _ast5969; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast5970; // ParmVar byte_offset
struct _ast5971; // ParmVar length
struct _ast5972; // FunctionProto Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5973; // TemplateSpecialization Local<v8::Int8Array>
struct _ast5974; // CXXMethod Cast
struct _ast5975; // ParmVar obj
struct _ast5976; // FunctionProto v8::Int8Array *(v8::Value *)
struct _ast5977; // Pointer v8::Int8Array *
struct _ast5978; // CXXRecord Uint16Array
struct _ast5979; // Record v8::Uint16Array
struct _ast5980; // CXXRecord Uint16Array
struct _ast5981; // CXXMethod New
struct _ast5982; // ParmVar array_buffer
struct _ast5983; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast5984; // ParmVar byte_offset
struct _ast5985; // ParmVar length
struct _ast5986; // FunctionProto Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5987; // TemplateSpecialization Local<v8::Uint16Array>
struct _ast5988; // CXXMethod New
struct _ast5989; // ParmVar shared_array_buffer
struct _ast5990; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast5991; // ParmVar byte_offset
struct _ast5992; // ParmVar length
struct _ast5993; // FunctionProto Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5994; // TemplateSpecialization Local<v8::Uint16Array>
struct _ast5995; // CXXMethod Cast
struct _ast5996; // ParmVar obj
struct _ast5997; // FunctionProto v8::Uint16Array *(v8::Value *)
struct _ast5998; // Pointer v8::Uint16Array *
struct _ast5999; // CXXRecord Int16Array
struct _ast6000; // Record v8::Int16Array
struct _ast6001; // CXXRecord Int16Array
struct _ast6002; // CXXMethod New
struct _ast6003; // ParmVar array_buffer
struct _ast6004; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6005; // ParmVar byte_offset
struct _ast6006; // ParmVar length
struct _ast6007; // FunctionProto Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6008; // TemplateSpecialization Local<v8::Int16Array>
struct _ast6009; // CXXMethod New
struct _ast6010; // ParmVar shared_array_buffer
struct _ast6011; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6012; // ParmVar byte_offset
struct _ast6013; // ParmVar length
struct _ast6014; // FunctionProto Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6015; // TemplateSpecialization Local<v8::Int16Array>
struct _ast6016; // CXXMethod Cast
struct _ast6017; // ParmVar obj
struct _ast6018; // FunctionProto v8::Int16Array *(v8::Value *)
struct _ast6019; // Pointer v8::Int16Array *
struct _ast6020; // CXXRecord Uint32Array
struct _ast6021; // Record v8::Uint32Array
struct _ast6022; // CXXRecord Uint32Array
struct _ast6023; // CXXMethod New
struct _ast6024; // ParmVar array_buffer
struct _ast6025; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6026; // ParmVar byte_offset
struct _ast6027; // ParmVar length
struct _ast6028; // FunctionProto Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6029; // TemplateSpecialization Local<v8::Uint32Array>
struct _ast6030; // CXXMethod New
struct _ast6031; // ParmVar shared_array_buffer
struct _ast6032; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6033; // ParmVar byte_offset
struct _ast6034; // ParmVar length
struct _ast6035; // FunctionProto Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6036; // TemplateSpecialization Local<v8::Uint32Array>
struct _ast6037; // CXXMethod Cast
struct _ast6038; // ParmVar obj
struct _ast6039; // FunctionProto v8::Uint32Array *(v8::Value *)
struct _ast6040; // Pointer v8::Uint32Array *
struct _ast6041; // CXXRecord Int32Array
struct _ast6042; // Record v8::Int32Array
struct _ast6043; // CXXRecord Int32Array
struct _ast6044; // CXXMethod New
struct _ast6045; // ParmVar array_buffer
struct _ast6046; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6047; // ParmVar byte_offset
struct _ast6048; // ParmVar length
struct _ast6049; // FunctionProto Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6050; // TemplateSpecialization Local<v8::Int32Array>
struct _ast6051; // CXXMethod New
struct _ast6052; // ParmVar shared_array_buffer
struct _ast6053; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6054; // ParmVar byte_offset
struct _ast6055; // ParmVar length
struct _ast6056; // FunctionProto Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6057; // TemplateSpecialization Local<v8::Int32Array>
struct _ast6058; // CXXMethod Cast
struct _ast6059; // ParmVar obj
struct _ast6060; // FunctionProto v8::Int32Array *(v8::Value *)
struct _ast6061; // Pointer v8::Int32Array *
struct _ast6062; // CXXRecord Float32Array
struct _ast6063; // Record v8::Float32Array
struct _ast6064; // CXXRecord Float32Array
struct _ast6065; // CXXMethod New
struct _ast6066; // ParmVar array_buffer
struct _ast6067; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6068; // ParmVar byte_offset
struct _ast6069; // ParmVar length
struct _ast6070; // FunctionProto Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6071; // TemplateSpecialization Local<v8::Float32Array>
struct _ast6072; // CXXMethod New
struct _ast6073; // ParmVar shared_array_buffer
struct _ast6074; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6075; // ParmVar byte_offset
struct _ast6076; // ParmVar length
struct _ast6077; // FunctionProto Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6078; // TemplateSpecialization Local<v8::Float32Array>
struct _ast6079; // CXXMethod Cast
struct _ast6080; // ParmVar obj
struct _ast6081; // FunctionProto v8::Float32Array *(v8::Value *)
struct _ast6082; // Pointer v8::Float32Array *
struct _ast6083; // CXXRecord Float64Array
struct _ast6084; // Record v8::Float64Array
struct _ast6085; // CXXRecord Float64Array
struct _ast6086; // CXXMethod New
struct _ast6087; // ParmVar array_buffer
struct _ast6088; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6089; // ParmVar byte_offset
struct _ast6090; // ParmVar length
struct _ast6091; // FunctionProto Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6092; // TemplateSpecialization Local<v8::Float64Array>
struct _ast6093; // CXXMethod New
struct _ast6094; // ParmVar shared_array_buffer
struct _ast6095; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6096; // ParmVar byte_offset
struct _ast6097; // ParmVar length
struct _ast6098; // FunctionProto Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6099; // TemplateSpecialization Local<v8::Float64Array>
struct _ast6100; // CXXMethod Cast
struct _ast6101; // ParmVar obj
struct _ast6102; // FunctionProto v8::Float64Array *(v8::Value *)
struct _ast6103; // Pointer v8::Float64Array *
struct _ast6104; // CXXRecord BigInt64Array
struct _ast6105; // Record v8::BigInt64Array
struct _ast6106; // CXXRecord BigInt64Array
struct _ast6107; // CXXMethod New
struct _ast6108; // ParmVar array_buffer
struct _ast6109; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6110; // ParmVar byte_offset
struct _ast6111; // ParmVar length
struct _ast6112; // FunctionProto Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6113; // TemplateSpecialization Local<v8::BigInt64Array>
struct _ast6114; // CXXMethod New
struct _ast6115; // ParmVar shared_array_buffer
struct _ast6116; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6117; // ParmVar byte_offset
struct _ast6118; // ParmVar length
struct _ast6119; // FunctionProto Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6120; // TemplateSpecialization Local<v8::BigInt64Array>
struct _ast6121; // CXXMethod Cast
struct _ast6122; // ParmVar obj
struct _ast6123; // FunctionProto v8::BigInt64Array *(v8::Value *)
struct _ast6124; // Pointer v8::BigInt64Array *
struct _ast6125; // CXXRecord BigUint64Array
struct _ast6126; // Record v8::BigUint64Array
struct _ast6127; // CXXRecord BigUint64Array
struct _ast6128; // CXXMethod New
struct _ast6129; // ParmVar array_buffer
struct _ast6130; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6131; // ParmVar byte_offset
struct _ast6132; // ParmVar length
struct _ast6133; // FunctionProto Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6134; // TemplateSpecialization Local<v8::BigUint64Array>
struct _ast6135; // CXXMethod New
struct _ast6136; // ParmVar shared_array_buffer
struct _ast6137; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6138; // ParmVar byte_offset
struct _ast6139; // ParmVar length
struct _ast6140; // FunctionProto Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6141; // TemplateSpecialization Local<v8::BigUint64Array>
struct _ast6142; // CXXMethod Cast
struct _ast6143; // ParmVar obj
struct _ast6144; // FunctionProto v8::BigUint64Array *(v8::Value *)
struct _ast6145; // Pointer v8::BigUint64Array *
struct _ast6146; // CXXRecord DataView
struct _ast6147; // Record v8::DataView
struct _ast6148; // CXXRecord DataView
struct _ast6149; // CXXMethod New
struct _ast6150; // ParmVar array_buffer
struct _ast6151; // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ast6152; // ParmVar byte_offset
struct _ast6153; // ParmVar length
struct _ast6154; // FunctionProto Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6155; // TemplateSpecialization Local<v8::DataView>
struct _ast6156; // CXXMethod New
struct _ast6157; // ParmVar shared_array_buffer
struct _ast6158; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6159; // ParmVar byte_offset
struct _ast6160; // ParmVar length
struct _ast6161; // FunctionProto Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6162; // TemplateSpecialization Local<v8::DataView>
struct _ast6163; // CXXMethod Cast
struct _ast6164; // ParmVar obj
struct _ast6165; // FunctionProto v8::DataView *(v8::Value *)
struct _ast6166; // Pointer v8::DataView *
struct _ast6167; // CXXRecord SharedArrayBuffer
struct _ast6168; // CXXRecord Contents
struct _ast6169; // Record v8::SharedArrayBuffer::Contents
struct _ast6170; // CXXRecord Contents
struct _ast6171; // TypeAlias Allocator
struct _ast6172; // Typedef v8::SharedArrayBuffer::Contents::Allocator
struct _ast6173; // TypeAlias DeleterCallback
struct _ast6174; // Typedef v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ast6175; // CXXConstructor Contents
struct _ast6176; // Pointer v8::SharedArrayBuffer::Contents *
struct _ast6177; // CXXMethod AllocationBase
struct _ast6178; // Pointer const v8::SharedArrayBuffer::Contents *
struct _ast6179; // Record const v8::SharedArrayBuffer::Contents
struct _ast6180; // CXXMethod AllocationLength
struct _ast6181; // CXXMethod AllocationMode
struct _ast6182; // FunctionProto Allocator::AllocationMode () const
struct _ast6183; // Elaborated Allocator::AllocationMode
struct _ast6184; // CXXMethod Data
struct _ast6185; // CXXMethod ByteLength
struct _ast6186; // CXXMethod Deleter
struct _ast6187; // FunctionProto v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _ast6188; // CXXMethod DeleterData
struct _ast6189; // CXXMethod ByteLength
struct _ast6190; // Pointer const v8::SharedArrayBuffer *
struct _ast6191; // Record const v8::SharedArrayBuffer
struct _ast6192; // CXXMethod New
struct _ast6193; // ParmVar isolate
struct _ast6194; // ParmVar byte_length
struct _ast6195; // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _ast6196; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6197; // CXXMethod New
struct _ast6198; // ParmVar isolate
struct _ast6199; // ParmVar data
struct _ast6200; // ParmVar byte_length
struct _ast6201; // ParmVar mode
struct _ast6202; // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast6203; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6204; // CXXMethod New
struct _ast6205; // ParmVar isolate
struct _ast6206; // ParmVar 
struct _ast6207; // LValueReference const SharedArrayBuffer::Contents &
struct _ast6208; // Elaborated const SharedArrayBuffer::Contents
struct _ast6209; // Elaborated SharedArrayBuffer::Contents
struct _ast6210; // ParmVar mode
struct _ast6211; // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _ast6212; // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ast6213; // CXXMethod IsExternal
struct _ast6214; // CXXMethod Externalize
struct _ast6215; // FunctionProto v8::SharedArrayBuffer::Contents ()
struct _ast6216; // Pointer v8::SharedArrayBuffer *
struct _ast6217; // CXXMethod GetContents
struct _ast6218; // CXXMethod Cast
struct _ast6219; // ParmVar obj
struct _ast6220; // FunctionProto v8::SharedArrayBuffer *(v8::Value *)
struct _ast6221; // Var kInternalFieldCount
struct _ast6222; // CXXRecord Date
struct _ast6223; // CXXMethod New
struct _ast6224; // ParmVar context
struct _ast6225; // TemplateSpecialization Local<v8::Context>
struct _ast6226; // ParmVar time
struct _ast6227; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _ast6228; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast6229; // CXXMethod ValueOf
struct _ast6230; // Pointer const v8::Date *
struct _ast6231; // Record const v8::Date
struct _ast6232; // CXXMethod Cast
struct _ast6233; // ParmVar obj
struct _ast6234; // FunctionProto v8::Date *(v8::Value *)
struct _ast6235; // Pointer v8::Date *
struct _ast6236; // CXXRecord NumberObject
struct _ast6237; // CXXMethod New
struct _ast6238; // ParmVar isolate
struct _ast6239; // ParmVar value
struct _ast6240; // FunctionProto Local<v8::Value> (v8::Isolate *, double)
struct _ast6241; // TemplateSpecialization Local<v8::Value>
struct _ast6242; // CXXMethod ValueOf
struct _ast6243; // Pointer const v8::NumberObject *
struct _ast6244; // Record const v8::NumberObject
struct _ast6245; // CXXMethod Cast
struct _ast6246; // ParmVar obj
struct _ast6247; // FunctionProto v8::NumberObject *(v8::Value *)
struct _ast6248; // Pointer v8::NumberObject *
struct _ast6249; // CXXRecord BigIntObject
struct _ast6250; // CXXMethod New
struct _ast6251; // ParmVar isolate
struct _ast6252; // ParmVar value
struct _ast6253; // FunctionProto Local<v8::Value> (v8::Isolate *, int64_t)
struct _ast6254; // TemplateSpecialization Local<v8::Value>
struct _ast6255; // CXXMethod ValueOf
struct _ast6256; // FunctionProto Local<v8::BigInt> () const
struct _ast6257; // TemplateSpecialization Local<v8::BigInt>
struct _ast6258; // Pointer const v8::BigIntObject *
struct _ast6259; // Record const v8::BigIntObject
struct _ast6260; // CXXMethod Cast
struct _ast6261; // ParmVar obj
struct _ast6262; // FunctionProto v8::BigIntObject *(v8::Value *)
struct _ast6263; // Pointer v8::BigIntObject *
struct _ast6264; // CXXRecord BooleanObject
struct _ast6265; // CXXMethod New
struct _ast6266; // ParmVar isolate
struct _ast6267; // ParmVar value
struct _ast6268; // FunctionProto Local<v8::Value> (v8::Isolate *, bool)
struct _ast6269; // TemplateSpecialization Local<v8::Value>
struct _ast6270; // CXXMethod ValueOf
struct _ast6271; // Pointer const v8::BooleanObject *
struct _ast6272; // Record const v8::BooleanObject
struct _ast6273; // CXXMethod Cast
struct _ast6274; // ParmVar obj
struct _ast6275; // FunctionProto v8::BooleanObject *(v8::Value *)
struct _ast6276; // Pointer v8::BooleanObject *
struct _ast6277; // CXXRecord StringObject
struct _ast6278; // CXXMethod New
struct _ast6279; // ParmVar isolate
struct _ast6280; // ParmVar value
struct _ast6281; // TemplateSpecialization Local<v8::String>
struct _ast6282; // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _ast6283; // TemplateSpecialization Local<v8::Value>
struct _ast6284; // CXXMethod ValueOf
struct _ast6285; // FunctionProto Local<v8::String> () const
struct _ast6286; // TemplateSpecialization Local<v8::String>
struct _ast6287; // Pointer const v8::StringObject *
struct _ast6288; // Record const v8::StringObject
struct _ast6289; // CXXMethod Cast
struct _ast6290; // ParmVar obj
struct _ast6291; // FunctionProto v8::StringObject *(v8::Value *)
struct _ast6292; // Pointer v8::StringObject *
struct _ast6293; // CXXRecord SymbolObject
struct _ast6294; // CXXMethod New
struct _ast6295; // ParmVar isolate
struct _ast6296; // ParmVar value
struct _ast6297; // TemplateSpecialization Local<v8::Symbol>
struct _ast6298; // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _ast6299; // TemplateSpecialization Local<v8::Value>
struct _ast6300; // CXXMethod ValueOf
struct _ast6301; // FunctionProto Local<v8::Symbol> () const
struct _ast6302; // TemplateSpecialization Local<v8::Symbol>
struct _ast6303; // Pointer const v8::SymbolObject *
struct _ast6304; // Record const v8::SymbolObject
struct _ast6305; // CXXMethod Cast
struct _ast6306; // ParmVar obj
struct _ast6307; // FunctionProto v8::SymbolObject *(v8::Value *)
struct _ast6308; // Pointer v8::SymbolObject *
struct _ast6309; // CXXRecord RegExp
struct _ast6310; // Record v8::RegExp
struct _ast6311; // CXXRecord RegExp
struct _ast6312; // Enum Flags
struct _ast6313; // Enum v8::RegExp::Flags
struct _ast6314; // EnumConstant kNone
struct _ast6315; // EnumConstant kGlobal
struct _ast6316; // EnumConstant kIgnoreCase
struct _ast6317; // EnumConstant kMultiline
struct _ast6318; // EnumConstant kSticky
struct _ast6319; // EnumConstant kUnicode
struct _ast6320; // EnumConstant kDotAll
struct _ast6321; // CXXMethod New
struct _ast6322; // ParmVar context
struct _ast6323; // TemplateSpecialization Local<v8::Context>
struct _ast6324; // ParmVar pattern
struct _ast6325; // TemplateSpecialization Local<v8::String>
struct _ast6326; // ParmVar flags
struct _ast6327; // FunctionProto MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _ast6328; // TemplateSpecialization MaybeLocal<v8::RegExp>
struct _ast6329; // CXXMethod GetSource
struct _ast6330; // FunctionProto Local<v8::String> () const
struct _ast6331; // TemplateSpecialization Local<v8::String>
struct _ast6332; // Pointer const v8::RegExp *
struct _ast6333; // Record const v8::RegExp
struct _ast6334; // CXXMethod GetFlags
struct _ast6335; // FunctionProto v8::RegExp::Flags () const
struct _ast6336; // CXXMethod Cast
struct _ast6337; // ParmVar obj
struct _ast6338; // FunctionProto v8::RegExp *(v8::Value *)
struct _ast6339; // Pointer v8::RegExp *
struct _ast6340; // CXXRecord External
struct _ast6341; // CXXMethod New
struct _ast6342; // ParmVar isolate
struct _ast6343; // ParmVar value
struct _ast6344; // FunctionProto Local<v8::External> (v8::Isolate *, void *)
struct _ast6345; // TemplateSpecialization Local<v8::External>
struct _ast6346; // CXXMethod Cast
struct _ast6347; // ParmVar obj
struct _ast6348; // FunctionProto v8::External *(v8::Value *)
struct _ast6349; // Pointer v8::External *
struct _ast6350; // CXXMethod Value
struct _ast6351; // Pointer const v8::External *
struct _ast6352; // Record const v8::External
struct _ast6353; // Enum Intrinsic
struct _ast6354; // Enum v8::Intrinsic
struct _ast6355; // EnumConstant kArrayProto_entries
struct _ast6356; // EnumConstant kArrayProto_forEach
struct _ast6357; // EnumConstant kArrayProto_keys
struct _ast6358; // EnumConstant kArrayProto_values
struct _ast6359; // EnumConstant kErrorPrototype
struct _ast6360; // EnumConstant kIteratorPrototype
struct _ast6361; // CXXRecord Template
struct _ast6362; // Record v8::Template
struct _ast6363; // CXXRecord Template
struct _ast6364; // CXXMethod Set
struct _ast6365; // ParmVar name
struct _ast6366; // TemplateSpecialization Local<v8::Name>
struct _ast6367; // ParmVar value
struct _ast6368; // TemplateSpecialization Local<v8::Data>
struct _ast6369; // ParmVar attributes
struct _ast6370; // FunctionProto void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6371; // Pointer v8::Template *
struct _ast6372; // CXXMethod SetPrivate
struct _ast6373; // ParmVar name
struct _ast6374; // TemplateSpecialization Local<v8::Private>
struct _ast6375; // ParmVar value
struct _ast6376; // TemplateSpecialization Local<v8::Data>
struct _ast6377; // ParmVar attributes
struct _ast6378; // FunctionProto void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6379; // CXXMethod Set
struct _ast6380; // ParmVar isolate
struct _ast6381; // ParmVar name
struct _ast6382; // ParmVar value
struct _ast6383; // TemplateSpecialization Local<v8::Data>
struct _ast6384; // FunctionProto void (v8::Isolate *, const char *, Local<v8::Data>)
struct _ast6385; // CXXMethod SetAccessorProperty
struct _ast6386; // ParmVar name
struct _ast6387; // TemplateSpecialization Local<v8::Name>
struct _ast6388; // ParmVar getter
struct _ast6389; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6390; // ParmVar setter
struct _ast6391; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6392; // ParmVar attribute
struct _ast6393; // ParmVar settings
struct _ast6394; // FunctionProto void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _ast6395; // CXXMethod SetNativeDataProperty
struct _ast6396; // ParmVar name
struct _ast6397; // TemplateSpecialization Local<v8::String>
struct _ast6398; // ParmVar getter
struct _ast6399; // ParmVar setter
struct _ast6400; // ParmVar data
struct _ast6401; // TemplateSpecialization Local<v8::Value>
struct _ast6402; // ParmVar attribute
struct _ast6403; // ParmVar signature
struct _ast6404; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast6405; // ParmVar settings
struct _ast6406; // ParmVar getter_side_effect_type
struct _ast6407; // ParmVar setter_side_effect_type
struct _ast6408; // FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6409; // CXXMethod SetNativeDataProperty
struct _ast6410; // ParmVar name
struct _ast6411; // TemplateSpecialization Local<v8::Name>
struct _ast6412; // ParmVar getter
struct _ast6413; // ParmVar setter
struct _ast6414; // ParmVar data
struct _ast6415; // TemplateSpecialization Local<v8::Value>
struct _ast6416; // ParmVar attribute
struct _ast6417; // ParmVar signature
struct _ast6418; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast6419; // ParmVar settings
struct _ast6420; // ParmVar getter_side_effect_type
struct _ast6421; // ParmVar setter_side_effect_type
struct _ast6422; // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6423; // CXXMethod SetLazyDataProperty
struct _ast6424; // ParmVar name
struct _ast6425; // TemplateSpecialization Local<v8::Name>
struct _ast6426; // ParmVar getter
struct _ast6427; // ParmVar data
struct _ast6428; // TemplateSpecialization Local<v8::Value>
struct _ast6429; // ParmVar attribute
struct _ast6430; // ParmVar getter_side_effect_type
struct _ast6431; // ParmVar setter_side_effect_type
struct _ast6432; // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast6433; // CXXMethod SetIntrinsicDataProperty
struct _ast6434; // ParmVar name
struct _ast6435; // TemplateSpecialization Local<v8::Name>
struct _ast6436; // ParmVar intrinsic
struct _ast6437; // ParmVar attribute
struct _ast6438; // FunctionProto void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
struct _ast6439; // Typedef GenericNamedPropertyGetterCallback
struct _ast6440; // Typedef v8::GenericNamedPropertyGetterCallback
struct _ast6441; // Typedef GenericNamedPropertySetterCallback
struct _ast6442; // Typedef v8::GenericNamedPropertySetterCallback
struct _ast6443; // Typedef GenericNamedPropertyQueryCallback
struct _ast6444; // Typedef v8::GenericNamedPropertyQueryCallback
struct _ast6445; // Typedef GenericNamedPropertyDeleterCallback
struct _ast6446; // Typedef v8::GenericNamedPropertyDeleterCallback
struct _ast6447; // Typedef GenericNamedPropertyEnumeratorCallback
struct _ast6448; // Typedef v8::GenericNamedPropertyEnumeratorCallback
struct _ast6449; // Typedef GenericNamedPropertyDefinerCallback
struct _ast6450; // Typedef v8::GenericNamedPropertyDefinerCallback
struct _ast6451; // Typedef GenericNamedPropertyDescriptorCallback
struct _ast6452; // Typedef v8::GenericNamedPropertyDescriptorCallback
struct _ast6453; // Typedef IndexedPropertyGetterCallback
struct _ast6454; // Typedef v8::IndexedPropertyGetterCallback
struct _ast6455; // Typedef IndexedPropertySetterCallback
struct _ast6456; // Typedef v8::IndexedPropertySetterCallback
struct _ast6457; // Typedef IndexedPropertyQueryCallback
struct _ast6458; // Typedef v8::IndexedPropertyQueryCallback
struct _ast6459; // Typedef IndexedPropertyDeleterCallback
struct _ast6460; // Typedef v8::IndexedPropertyDeleterCallback
struct _ast6461; // Typedef IndexedPropertyEnumeratorCallback
struct _ast6462; // Typedef v8::IndexedPropertyEnumeratorCallback
struct _ast6463; // Typedef IndexedPropertyDefinerCallback
struct _ast6464; // Typedef v8::IndexedPropertyDefinerCallback
struct _ast6465; // Typedef IndexedPropertyDescriptorCallback
struct _ast6466; // Typedef v8::IndexedPropertyDescriptorCallback
struct _ast6467; // Enum AccessType
struct _ast6468; // Enum v8::AccessType
struct _ast6469; // EnumConstant ACCESS_GET
struct _ast6470; // EnumConstant ACCESS_SET
struct _ast6471; // EnumConstant ACCESS_HAS
struct _ast6472; // EnumConstant ACCESS_DELETE
struct _ast6473; // EnumConstant ACCESS_KEYS
struct _ast6474; // Typedef AccessCheckCallback
struct _ast6475; // Typedef v8::AccessCheckCallback
struct _ast6476; // CXXRecord FunctionTemplate
struct _ast6477; // CXXMethod New
struct _ast6478; // ParmVar isolate
struct _ast6479; // ParmVar callback
struct _ast6480; // ParmVar data
struct _ast6481; // TemplateSpecialization Local<v8::Value>
struct _ast6482; // ParmVar signature
struct _ast6483; // TemplateSpecialization Local<v8::Signature>
struct _ast6484; // ParmVar length
struct _ast6485; // ParmVar behavior
struct _ast6486; // ParmVar side_effect_type
struct _ast6487; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast6488; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6489; // CXXMethod FromSnapshot
struct _ast6490; // ParmVar isolate
struct _ast6491; // ParmVar index
struct _ast6492; // FunctionProto MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _ast6493; // TemplateSpecialization MaybeLocal<v8::FunctionTemplate>
struct _ast6494; // CXXMethod NewWithCache
struct _ast6495; // ParmVar isolate
struct _ast6496; // ParmVar callback
struct _ast6497; // ParmVar cache_property
struct _ast6498; // TemplateSpecialization Local<v8::Private>
struct _ast6499; // ParmVar data
struct _ast6500; // TemplateSpecialization Local<v8::Value>
struct _ast6501; // ParmVar signature
struct _ast6502; // TemplateSpecialization Local<v8::Signature>
struct _ast6503; // ParmVar length
struct _ast6504; // ParmVar side_effect_type
struct _ast6505; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
struct _ast6506; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6507; // CXXMethod GetFunction
struct _ast6508; // ParmVar context
struct _ast6509; // TemplateSpecialization Local<v8::Context>
struct _ast6510; // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>)
struct _ast6511; // TemplateSpecialization MaybeLocal<v8::Function>
struct _ast6512; // Pointer v8::FunctionTemplate *
struct _ast6513; // CXXMethod NewRemoteInstance
struct _ast6514; // FunctionProto MaybeLocal<v8::Object> ()
struct _ast6515; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast6516; // CXXMethod SetCallHandler
struct _ast6517; // ParmVar callback
struct _ast6518; // ParmVar data
struct _ast6519; // TemplateSpecialization Local<v8::Value>
struct _ast6520; // ParmVar side_effect_type
struct _ast6521; // FunctionProto void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
struct _ast6522; // CXXMethod SetLength
struct _ast6523; // ParmVar length
struct _ast6524; // CXXMethod InstanceTemplate
struct _ast6525; // FunctionProto Local<v8::ObjectTemplate> ()
struct _ast6526; // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ast6527; // CXXMethod Inherit
struct _ast6528; // ParmVar parent
struct _ast6529; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6530; // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ast6531; // CXXMethod PrototypeTemplate
struct _ast6532; // FunctionProto Local<v8::ObjectTemplate> ()
struct _ast6533; // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ast6534; // CXXMethod SetPrototypeProviderTemplate
struct _ast6535; // ParmVar prototype_provider
struct _ast6536; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6537; // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ast6538; // CXXMethod SetClassName
struct _ast6539; // ParmVar name
struct _ast6540; // TemplateSpecialization Local<v8::String>
struct _ast6541; // FunctionProto void (Local<v8::String>)
struct _ast6542; // CXXMethod SetAcceptAnyReceiver
struct _ast6543; // ParmVar value
struct _ast6544; // CXXMethod ReadOnlyPrototype
struct _ast6545; // CXXMethod RemovePrototype
struct _ast6546; // CXXMethod HasInstance
struct _ast6547; // ParmVar object
struct _ast6548; // TemplateSpecialization Local<v8::Value>
struct _ast6549; // FunctionProto bool (Local<v8::Value>)
struct _ast6550; // CXXMethod Cast
struct _ast6551; // ParmVar data
struct _ast6552; // FunctionProto v8::FunctionTemplate *(v8::Data *)
struct _ast6553; // Enum PropertyHandlerFlags
struct _ast6554; // Enum v8::PropertyHandlerFlags
struct _ast6555; // EnumConstant kNone
struct _ast6556; // EnumConstant kAllCanRead
struct _ast6557; // EnumConstant kNonMasking
struct _ast6558; // EnumConstant kOnlyInterceptStrings
struct _ast6559; // EnumConstant kHasNoSideEffect
struct _ast6560; // CXXRecord NamedPropertyHandlerConfiguration
struct _ast6561; // Record v8::NamedPropertyHandlerConfiguration
struct _ast6562; // CXXRecord NamedPropertyHandlerConfiguration
struct _ast6563; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6564; // ParmVar getter
struct _ast6565; // ParmVar setter
struct _ast6566; // ParmVar query
struct _ast6567; // ParmVar deleter
struct _ast6568; // ParmVar enumerator
struct _ast6569; // ParmVar definer
struct _ast6570; // ParmVar descriptor
struct _ast6571; // ParmVar data
struct _ast6572; // TemplateSpecialization Local<v8::Value>
struct _ast6573; // ParmVar flags
struct _ast6574; // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6575; // Pointer v8::NamedPropertyHandlerConfiguration *
struct _ast6576; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6577; // ParmVar getter
struct _ast6578; // ParmVar setter
struct _ast6579; // ParmVar query
struct _ast6580; // ParmVar deleter
struct _ast6581; // ParmVar enumerator
struct _ast6582; // ParmVar data
struct _ast6583; // TemplateSpecialization Local<v8::Value>
struct _ast6584; // ParmVar flags
struct _ast6585; // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6586; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6587; // ParmVar getter
struct _ast6588; // ParmVar setter
struct _ast6589; // ParmVar descriptor
struct _ast6590; // ParmVar deleter
struct _ast6591; // ParmVar enumerator
struct _ast6592; // ParmVar definer
struct _ast6593; // ParmVar data
struct _ast6594; // TemplateSpecialization Local<v8::Value>
struct _ast6595; // ParmVar flags
struct _ast6596; // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6597; // Field getter
struct _ast6598; // Field setter
struct _ast6599; // Field query
struct _ast6600; // Field deleter
struct _ast6601; // Field enumerator
struct _ast6602; // Field definer
struct _ast6603; // Field descriptor
struct _ast6604; // Field data
struct _ast6605; // Field flags
struct _ast6606; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6607; // ParmVar 
struct _ast6608; // LValueReference const v8::NamedPropertyHandlerConfiguration &
struct _ast6609; // Record const v8::NamedPropertyHandlerConfiguration
struct _ast6610; // FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6611; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6612; // ParmVar 
struct _ast6613; // RValueReference v8::NamedPropertyHandlerConfiguration &&
struct _ast6614; // FunctionProto void (v8::NamedPropertyHandlerConfiguration &&)
struct _ast6615; // CXXRecord IndexedPropertyHandlerConfiguration
struct _ast6616; // Record v8::IndexedPropertyHandlerConfiguration
struct _ast6617; // CXXRecord IndexedPropertyHandlerConfiguration
struct _ast6618; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6619; // ParmVar getter
struct _ast6620; // ParmVar setter
struct _ast6621; // ParmVar query
struct _ast6622; // ParmVar deleter
struct _ast6623; // ParmVar enumerator
struct _ast6624; // ParmVar definer
struct _ast6625; // ParmVar descriptor
struct _ast6626; // ParmVar data
struct _ast6627; // TemplateSpecialization Local<v8::Value>
struct _ast6628; // ParmVar flags
struct _ast6629; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6630; // Pointer v8::IndexedPropertyHandlerConfiguration *
struct _ast6631; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6632; // ParmVar getter
struct _ast6633; // ParmVar setter
struct _ast6634; // ParmVar query
struct _ast6635; // ParmVar deleter
struct _ast6636; // ParmVar enumerator
struct _ast6637; // ParmVar data
struct _ast6638; // TemplateSpecialization Local<v8::Value>
struct _ast6639; // ParmVar flags
struct _ast6640; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6641; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6642; // ParmVar getter
struct _ast6643; // ParmVar setter
struct _ast6644; // ParmVar descriptor
struct _ast6645; // ParmVar deleter
struct _ast6646; // ParmVar enumerator
struct _ast6647; // ParmVar definer
struct _ast6648; // ParmVar data
struct _ast6649; // TemplateSpecialization Local<v8::Value>
struct _ast6650; // ParmVar flags
struct _ast6651; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6652; // Field getter
struct _ast6653; // Field setter
struct _ast6654; // Field query
struct _ast6655; // Field deleter
struct _ast6656; // Field enumerator
struct _ast6657; // Field definer
struct _ast6658; // Field descriptor
struct _ast6659; // Field data
struct _ast6660; // Field flags
struct _ast6661; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6662; // ParmVar 
struct _ast6663; // LValueReference const v8::IndexedPropertyHandlerConfiguration &
struct _ast6664; // Record const v8::IndexedPropertyHandlerConfiguration
struct _ast6665; // FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6666; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6667; // ParmVar 
struct _ast6668; // RValueReference v8::IndexedPropertyHandlerConfiguration &&
struct _ast6669; // FunctionProto void (v8::IndexedPropertyHandlerConfiguration &&)
struct _ast6670; // CXXDestructor ~IndexedPropertyHandlerConfiguration
struct _ast6671; // CXXRecord ObjectTemplate
struct _ast6672; // CXXMethod New
struct _ast6673; // ParmVar isolate
struct _ast6674; // ParmVar constructor
struct _ast6675; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6676; // FunctionProto Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6677; // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ast6678; // CXXMethod FromSnapshot
struct _ast6679; // ParmVar isolate
struct _ast6680; // ParmVar index
struct _ast6681; // FunctionProto MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _ast6682; // TemplateSpecialization MaybeLocal<v8::ObjectTemplate>
struct _ast6683; // CXXMethod NewInstance
struct _ast6684; // ParmVar context
struct _ast6685; // TemplateSpecialization Local<v8::Context>
struct _ast6686; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>)
struct _ast6687; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast6688; // Pointer v8::ObjectTemplate *
struct _ast6689; // CXXMethod SetAccessor
struct _ast6690; // ParmVar name
struct _ast6691; // TemplateSpecialization Local<v8::String>
struct _ast6692; // ParmVar getter
struct _ast6693; // ParmVar setter
struct _ast6694; // ParmVar data
struct _ast6695; // TemplateSpecialization Local<v8::Value>
struct _ast6696; // ParmVar settings
struct _ast6697; // ParmVar attribute
struct _ast6698; // ParmVar signature
struct _ast6699; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast6700; // ParmVar getter_side_effect_type
struct _ast6701; // ParmVar setter_side_effect_type
struct _ast6702; // FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6703; // CXXMethod SetAccessor
struct _ast6704; // ParmVar name
struct _ast6705; // TemplateSpecialization Local<v8::Name>
struct _ast6706; // ParmVar getter
struct _ast6707; // ParmVar setter
struct _ast6708; // ParmVar data
struct _ast6709; // TemplateSpecialization Local<v8::Value>
struct _ast6710; // ParmVar settings
struct _ast6711; // ParmVar attribute
struct _ast6712; // ParmVar signature
struct _ast6713; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast6714; // ParmVar getter_side_effect_type
struct _ast6715; // ParmVar setter_side_effect_type
struct _ast6716; // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6717; // CXXMethod SetHandler
struct _ast6718; // ParmVar configuration
struct _ast6719; // FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6720; // CXXMethod SetIndexedPropertyHandler
struct _ast6721; // ParmVar getter
struct _ast6722; // ParmVar setter
struct _ast6723; // ParmVar query
struct _ast6724; // ParmVar deleter
struct _ast6725; // ParmVar enumerator
struct _ast6726; // ParmVar data
struct _ast6727; // TemplateSpecialization Local<v8::Value>
struct _ast6728; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _ast6729; // CXXMethod SetHandler
struct _ast6730; // ParmVar configuration
struct _ast6731; // FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6732; // CXXMethod SetCallAsFunctionHandler
struct _ast6733; // ParmVar callback
struct _ast6734; // ParmVar data
struct _ast6735; // TemplateSpecialization Local<v8::Value>
struct _ast6736; // FunctionProto void (v8::FunctionCallback, Local<v8::Value>)
struct _ast6737; // CXXMethod MarkAsUndetectable
struct _ast6738; // CXXMethod SetAccessCheckCallback
struct _ast6739; // ParmVar callback
struct _ast6740; // ParmVar data
struct _ast6741; // TemplateSpecialization Local<v8::Value>
struct _ast6742; // FunctionProto void (v8::AccessCheckCallback, Local<v8::Value>)
struct _ast6743; // CXXMethod SetAccessCheckCallbackAndHandler
struct _ast6744; // ParmVar callback
struct _ast6745; // ParmVar named_handler
struct _ast6746; // ParmVar indexed_handler
struct _ast6747; // ParmVar data
struct _ast6748; // TemplateSpecialization Local<v8::Value>
struct _ast6749; // FunctionProto void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ast6750; // CXXMethod InternalFieldCount
struct _ast6751; // CXXMethod SetInternalFieldCount
struct _ast6752; // ParmVar value
struct _ast6753; // CXXMethod IsImmutableProto
struct _ast6754; // CXXMethod SetImmutableProto
struct _ast6755; // CXXMethod Cast
struct _ast6756; // ParmVar data
struct _ast6757; // FunctionProto v8::ObjectTemplate *(v8::Data *)
struct _ast6758; // CXXRecord Signature
struct _ast6759; // CXXMethod New
struct _ast6760; // ParmVar isolate
struct _ast6761; // ParmVar receiver
struct _ast6762; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6763; // FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6764; // TemplateSpecialization Local<v8::Signature>
struct _ast6765; // CXXMethod Cast
struct _ast6766; // ParmVar data
struct _ast6767; // FunctionProto v8::Signature *(v8::Data *)
struct _ast6768; // Pointer v8::Signature *
struct _ast6769; // CXXRecord AccessorSignature
struct _ast6770; // CXXMethod New
struct _ast6771; // ParmVar isolate
struct _ast6772; // ParmVar receiver
struct _ast6773; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6774; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6775; // TemplateSpecialization Local<v8::AccessorSignature>
struct _ast6776; // CXXMethod Cast
struct _ast6777; // ParmVar data
struct _ast6778; // FunctionProto v8::AccessorSignature *(v8::Data *)
struct _ast6779; // Pointer v8::AccessorSignature *
struct _ast6780; // CXXRecord Extension
struct _ast6781; // Record v8::Extension
struct _ast6782; // CXXRecord Extension
struct _ast6783; // CXXConstructor Extension
struct _ast6784; // ParmVar name
struct _ast6785; // ParmVar source
struct _ast6786; // ParmVar dep_count
struct _ast6787; // ParmVar deps
struct _ast6788; // Pointer const char **
struct _ast6789; // ParmVar source_length
struct _ast6790; // FunctionProto void (const char *, const char *, int, const char **, int)
struct _ast6791; // Pointer v8::Extension *
struct _ast6792; // CXXDestructor ~Extension
struct _ast6793; // CXXMethod GetNativeFunctionTemplate
struct _ast6794; // ParmVar isolate
struct _ast6795; // ParmVar name
struct _ast6796; // TemplateSpecialization Local<v8::String>
struct _ast6797; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
struct _ast6798; // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ast6799; // CXXMethod name
struct _ast6800; // Pointer const v8::Extension *
struct _ast6801; // Record const v8::Extension
struct _ast6802; // CXXMethod source_length
struct _ast6803; // CXXMethod source
struct _ast6804; // FunctionProto const String::ExternalOneByteStringResource *() const
struct _ast6805; // Pointer const String::ExternalOneByteStringResource *
struct _ast6806; // Elaborated const String::ExternalOneByteStringResource
struct _ast6807; // Elaborated String::ExternalOneByteStringResource
struct _ast6808; // CXXMethod dependency_count
struct _ast6809; // CXXMethod dependencies
struct _ast6810; // FunctionProto const char **() const
struct _ast6811; // CXXMethod set_auto_enable
struct _ast6812; // ParmVar value
struct _ast6813; // CXXMethod auto_enable
struct _ast6814; // CXXConstructor Extension
struct _ast6815; // ParmVar 
struct _ast6816; // LValueReference const v8::Extension &
struct _ast6817; // FunctionProto void (const v8::Extension &)
struct _ast6818; // CXXMethod operator=
struct _ast6819; // ParmVar 
struct _ast6820; // Function RegisterExtension
struct _ast6821; // ParmVar 
struct _ast6822; // Elaborated std::unique_ptr<Extension>
struct _ast6823; // FunctionProto void (std::unique_ptr<Extension>)
struct _ast6824; // Function Undefined
struct _ast6825; // ParmVar isolate
struct _ast6826; // FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _ast6827; // TemplateSpecialization Local<v8::Primitive>
struct _ast6828; // ParmVar isolate
struct _ast6829; // Function Null
struct _ast6830; // ParmVar isolate
struct _ast6831; // FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _ast6832; // TemplateSpecialization Local<v8::Primitive>
struct _ast6833; // ParmVar isolate
struct _ast6834; // Function True
struct _ast6835; // ParmVar isolate
struct _ast6836; // FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _ast6837; // TemplateSpecialization Local<v8::Boolean>
struct _ast6838; // ParmVar isolate
struct _ast6839; // Function False
struct _ast6840; // ParmVar isolate
struct _ast6841; // FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _ast6842; // TemplateSpecialization Local<v8::Boolean>
struct _ast6843; // ParmVar isolate
struct _ast6844; // CXXRecord ResourceConstraints
struct _ast6845; // Record v8::ResourceConstraints
struct _ast6846; // CXXRecord ResourceConstraints
struct _ast6847; // CXXMethod ConfigureDefaultsFromHeapSize
struct _ast6848; // ParmVar initial_heap_size_in_bytes
struct _ast6849; // ParmVar maximum_heap_size_in_bytes
struct _ast6850; // FunctionProto void (size_t, size_t)
struct _ast6851; // Pointer v8::ResourceConstraints *
struct _ast6852; // CXXMethod ConfigureDefaults
struct _ast6853; // ParmVar physical_memory
struct _ast6854; // ParmVar virtual_memory_limit
struct _ast6855; // FunctionProto void (uint64_t, uint64_t)
struct _ast6856; // CXXMethod stack_limit
struct _ast6857; // FunctionProto uint32_t *() const
struct _ast6858; // Pointer const v8::ResourceConstraints *
struct _ast6859; // Record const v8::ResourceConstraints
struct _ast6860; // CXXMethod set_stack_limit
struct _ast6861; // ParmVar value
struct _ast6862; // FunctionProto void (uint32_t *)
struct _ast6863; // CXXMethod code_range_size_in_bytes
struct _ast6864; // CXXMethod set_code_range_size_in_bytes
struct _ast6865; // ParmVar limit
struct _ast6866; // FunctionProto void (size_t)
struct _ast6867; // CXXMethod max_old_generation_size_in_bytes
struct _ast6868; // CXXMethod set_max_old_generation_size_in_bytes
struct _ast6869; // ParmVar limit
struct _ast6870; // CXXMethod max_young_generation_size_in_bytes
struct _ast6871; // CXXMethod set_max_young_generation_size_in_bytes
struct _ast6872; // ParmVar limit
struct _ast6873; // CXXMethod initial_old_generation_size_in_bytes
struct _ast6874; // CXXMethod set_initial_old_generation_size_in_bytes
struct _ast6875; // ParmVar initial_size
struct _ast6876; // CXXMethod initial_young_generation_size_in_bytes
struct _ast6877; // CXXMethod set_initial_young_generation_size_in_bytes
struct _ast6878; // ParmVar initial_size
struct _ast6879; // CXXMethod code_range_size
struct _ast6880; // CXXMethod set_code_range_size
struct _ast6881; // ParmVar limit_in_mb
struct _ast6882; // CXXMethod max_semi_space_size_in_kb
struct _ast6883; // CXXMethod set_max_semi_space_size_in_kb
struct _ast6884; // ParmVar limit_in_kb
struct _ast6885; // CXXMethod max_old_space_size
struct _ast6886; // CXXMethod set_max_old_space_size
struct _ast6887; // ParmVar limit_in_mb
struct _ast6888; // CXXMethod max_zone_pool_size
struct _ast6889; // CXXMethod set_max_zone_pool_size
struct _ast6890; // ParmVar bytes
struct _ast6891; // CXXConstructor ResourceConstraints
struct _ast6892; // CXXConstructor ResourceConstraints
struct _ast6893; // ParmVar 
struct _ast6894; // LValueReference const v8::ResourceConstraints &
struct _ast6895; // FunctionProto void (const v8::ResourceConstraints &)
struct _ast6896; // CXXConstructor ResourceConstraints
struct _ast6897; // ParmVar 
struct _ast6898; // RValueReference v8::ResourceConstraints &&
struct _ast6899; // FunctionProto void (v8::ResourceConstraints &&)
struct _ast6900; // Typedef FatalErrorCallback
struct _ast6901; // Typedef v8::FatalErrorCallback
struct _ast6902; // Typedef OOMErrorCallback
struct _ast6903; // Typedef v8::OOMErrorCallback
struct _ast6904; // Typedef DcheckErrorCallback
struct _ast6905; // Typedef v8::DcheckErrorCallback
struct _ast6906; // Typedef MessageCallback
struct _ast6907; // Typedef v8::MessageCallback
struct _ast6908; // Typedef LogEventCallback
struct _ast6909; // Typedef v8::LogEventCallback
struct _ast6910; // CXXRecord Exception
struct _ast6911; // Record v8::Exception
struct _ast6912; // CXXRecord Exception
struct _ast6913; // CXXMethod RangeError
struct _ast6914; // ParmVar message
struct _ast6915; // TemplateSpecialization Local<v8::String>
struct _ast6916; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6917; // TemplateSpecialization Local<v8::Value>
struct _ast6918; // CXXMethod ReferenceError
struct _ast6919; // ParmVar message
struct _ast6920; // TemplateSpecialization Local<v8::String>
struct _ast6921; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6922; // TemplateSpecialization Local<v8::Value>
struct _ast6923; // CXXMethod SyntaxError
struct _ast6924; // ParmVar message
struct _ast6925; // TemplateSpecialization Local<v8::String>
struct _ast6926; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6927; // TemplateSpecialization Local<v8::Value>
struct _ast6928; // CXXMethod TypeError
struct _ast6929; // ParmVar message
struct _ast6930; // TemplateSpecialization Local<v8::String>
struct _ast6931; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6932; // TemplateSpecialization Local<v8::Value>
struct _ast6933; // CXXMethod Error
struct _ast6934; // ParmVar message
struct _ast6935; // TemplateSpecialization Local<v8::String>
struct _ast6936; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6937; // TemplateSpecialization Local<v8::Value>
struct _ast6938; // CXXMethod CreateMessage
struct _ast6939; // ParmVar isolate
struct _ast6940; // ParmVar exception
struct _ast6941; // TemplateSpecialization Local<v8::Value>
struct _ast6942; // FunctionProto Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _ast6943; // TemplateSpecialization Local<v8::Message>
struct _ast6944; // CXXMethod GetStackTrace
struct _ast6945; // ParmVar exception
struct _ast6946; // TemplateSpecialization Local<v8::Value>
struct _ast6947; // FunctionProto Local<v8::StackTrace> (Local<v8::Value>)
struct _ast6948; // TemplateSpecialization Local<v8::StackTrace>
struct _ast6949; // Typedef CounterLookupCallback
struct _ast6950; // Typedef v8::CounterLookupCallback
struct _ast6951; // Typedef CreateHistogramCallback
struct _ast6952; // Typedef v8::CreateHistogramCallback
struct _ast6953; // Typedef AddHistogramSampleCallback
struct _ast6954; // Typedef v8::AddHistogramSampleCallback
struct _ast6955; // Typedef BeforeCallEnteredCallback
struct _ast6956; // Typedef v8::BeforeCallEnteredCallback
struct _ast6957; // Typedef CallCompletedCallback
struct _ast6958; // Typedef v8::CallCompletedCallback
struct _ast6959; // Typedef HostImportModuleDynamicallyCallback
struct _ast6960; // Typedef v8::HostImportModuleDynamicallyCallback
struct _ast6961; // Typedef HostInitializeImportMetaObjectCallback
struct _ast6962; // Typedef v8::HostInitializeImportMetaObjectCallback
struct _ast6963; // Typedef PrepareStackTraceCallback
struct _ast6964; // Typedef v8::PrepareStackTraceCallback
struct _ast6965; // Enum PromiseHookType
struct _ast6966; // Enum v8::PromiseHookType
struct _ast6967; // EnumConstant kInit
struct _ast6968; // EnumConstant kResolve
struct _ast6969; // EnumConstant kBefore
struct _ast6970; // EnumConstant kAfter
struct _ast6971; // Typedef PromiseHook
struct _ast6972; // Typedef v8::PromiseHook
struct _ast6973; // Enum PromiseRejectEvent
struct _ast6974; // Enum v8::PromiseRejectEvent
struct _ast6975; // EnumConstant kPromiseRejectWithNoHandler
struct _ast6976; // EnumConstant kPromiseHandlerAddedAfterReject
struct _ast6977; // EnumConstant kPromiseRejectAfterResolved
struct _ast6978; // EnumConstant kPromiseResolveAfterResolved
struct _ast6979; // CXXRecord PromiseRejectMessage
struct _ast6980; // Record v8::PromiseRejectMessage
struct _ast6981; // CXXRecord PromiseRejectMessage
struct _ast6982; // CXXConstructor PromiseRejectMessage
struct _ast6983; // ParmVar promise
struct _ast6984; // TemplateSpecialization Local<v8::Promise>
struct _ast6985; // ParmVar event
struct _ast6986; // ParmVar value
struct _ast6987; // TemplateSpecialization Local<v8::Value>
struct _ast6988; // FunctionProto void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
struct _ast6989; // Pointer v8::PromiseRejectMessage *
struct _ast6990; // CXXMethod GetPromise
struct _ast6991; // FunctionProto Local<v8::Promise> () const
struct _ast6992; // TemplateSpecialization Local<v8::Promise>
struct _ast6993; // Pointer const v8::PromiseRejectMessage *
struct _ast6994; // Record const v8::PromiseRejectMessage
struct _ast6995; // CXXMethod GetEvent
struct _ast6996; // FunctionProto v8::PromiseRejectEvent () const
struct _ast6997; // CXXMethod GetValue
struct _ast6998; // FunctionProto Local<v8::Value> () const
struct _ast6999; // TemplateSpecialization Local<v8::Value>
struct _ast7000; // Typedef PromiseRejectCallback
struct _ast7001; // Typedef v8::PromiseRejectCallback
struct _ast7002; // Typedef MicrotasksCompletedCallback
struct _ast7003; // Typedef v8::MicrotasksCompletedCallback
struct _ast7004; // Typedef MicrotasksCompletedCallbackWithData
struct _ast7005; // Typedef v8::MicrotasksCompletedCallbackWithData
struct _ast7006; // Typedef MicrotaskCallback
struct _ast7007; // Typedef v8::MicrotaskCallback
struct _ast7008; // Enum MicrotasksPolicy
struct _ast7009; // Enum v8::MicrotasksPolicy
struct _ast7010; // EnumConstant kExplicit
struct _ast7011; // EnumConstant kScoped
struct _ast7012; // EnumConstant kAuto
struct _ast7013; // CXXRecord MicrotaskQueue
struct _ast7014; // CXXMethod New
struct _ast7015; // ParmVar isolate
struct _ast7016; // ParmVar policy
struct _ast7017; // FunctionProto std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
struct _ast7018; // Elaborated std::unique_ptr<MicrotaskQueue>
struct _ast7019; // CXXDestructor ~MicrotaskQueue
struct _ast7020; // FunctionProto void ()
struct _ast7021; // Pointer v8::MicrotaskQueue *
struct _ast7022; // CXXMethod EnqueueMicrotask
struct _ast7023; // ParmVar isolate
struct _ast7024; // ParmVar microtask
struct _ast7025; // TemplateSpecialization Local<v8::Function>
struct _ast7026; // FunctionProto void (v8::Isolate *, Local<v8::Function>)
struct _ast7027; // CXXMethod EnqueueMicrotask
struct _ast7028; // ParmVar isolate
struct _ast7029; // Pointer v8::Isolate *
struct _ast7030; // Elaborated v8::Isolate
struct _ast7031; // ParmVar callback
struct _ast7032; // ParmVar data
struct _ast7033; // FunctionProto void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _ast7034; // CXXMethod AddMicrotasksCompletedCallback
struct _ast7035; // ParmVar callback
struct _ast7036; // ParmVar data
struct _ast7037; // FunctionProto void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ast7038; // CXXMethod RemoveMicrotasksCompletedCallback
struct _ast7039; // ParmVar callback
struct _ast7040; // ParmVar data
struct _ast7041; // CXXMethod PerformCheckpoint
struct _ast7042; // ParmVar isolate
struct _ast7043; // CXXMethod IsRunningMicrotasks
struct _ast7044; // Pointer const v8::MicrotaskQueue *
struct _ast7045; // Record const v8::MicrotaskQueue
struct _ast7046; // CXXMethod GetMicrotasksScopeDepth
struct _ast7047; // CXXConstructor MicrotaskQueue
struct _ast7048; // ParmVar 
struct _ast7049; // LValueReference const v8::MicrotaskQueue &
struct _ast7050; // FunctionProto void (const v8::MicrotaskQueue &)
struct _ast7051; // CXXMethod operator=
struct _ast7052; // ParmVar 
struct _ast7053; // FunctionProto v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _ast7054; // LValueReference v8::MicrotaskQueue &
struct _ast7055; // CXXRecord MicrotasksScope
struct _ast7056; // Record v8::MicrotasksScope
struct _ast7057; // CXXRecord MicrotasksScope
struct _ast7058; // Enum Type
struct _ast7059; // Enum v8::MicrotasksScope::Type
struct _ast7060; // EnumConstant kRunMicrotasks
struct _ast7061; // EnumConstant kDoNotRunMicrotasks
struct _ast7062; // CXXConstructor MicrotasksScope
struct _ast7063; // ParmVar isolate
struct _ast7064; // ParmVar type
struct _ast7065; // FunctionProto void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _ast7066; // Pointer v8::MicrotasksScope *
struct _ast7067; // CXXConstructor MicrotasksScope
struct _ast7068; // ParmVar isolate
struct _ast7069; // ParmVar microtask_queue
struct _ast7070; // ParmVar type
struct _ast7071; // FunctionProto void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
struct _ast7072; // CXXDestructor ~MicrotasksScope
struct _ast7073; // FunctionProto void ()
struct _ast7074; // CXXMethod PerformCheckpoint
struct _ast7075; // ParmVar isolate
struct _ast7076; // CXXMethod GetCurrentDepth
struct _ast7077; // ParmVar isolate
struct _ast7078; // CXXMethod IsRunningMicrotasks
struct _ast7079; // ParmVar isolate
struct _ast7080; // FunctionProto bool (v8::Isolate *)
struct _ast7081; // CXXConstructor MicrotasksScope
struct _ast7082; // ParmVar 
struct _ast7083; // LValueReference const v8::MicrotasksScope &
struct _ast7084; // Record const v8::MicrotasksScope
struct _ast7085; // FunctionProto void (const v8::MicrotasksScope &)
struct _ast7086; // CXXMethod operator=
struct _ast7087; // ParmVar 
struct _ast7088; // FunctionProto v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _ast7089; // LValueReference v8::MicrotasksScope &
struct _ast7090; // Typedef FailedAccessCheckCallback
struct _ast7091; // Typedef v8::FailedAccessCheckCallback
struct _ast7092; // Typedef AllowCodeGenerationFromStringsCallback
struct _ast7093; // Typedef v8::AllowCodeGenerationFromStringsCallback
struct _ast7094; // Typedef ExtensionCallback
struct _ast7095; // Typedef v8::ExtensionCallback
struct _ast7096; // Typedef AllowWasmCodeGenerationCallback
struct _ast7097; // Typedef v8::AllowWasmCodeGenerationCallback
struct _ast7098; // Typedef ApiImplementationCallback
struct _ast7099; // Typedef v8::ApiImplementationCallback
struct _ast7100; // Typedef WasmStreamingCallback
struct _ast7101; // Typedef v8::WasmStreamingCallback
struct _ast7102; // Typedef WasmThreadsEnabledCallback
struct _ast7103; // Typedef v8::WasmThreadsEnabledCallback
struct _ast7104; // Enum GCType
struct _ast7105; // Enum v8::GCType
struct _ast7106; // EnumConstant kGCTypeScavenge
struct _ast7107; // EnumConstant kGCTypeMarkSweepCompact
struct _ast7108; // EnumConstant kGCTypeIncrementalMarking
struct _ast7109; // EnumConstant kGCTypeProcessWeakCallbacks
struct _ast7110; // EnumConstant kGCTypeAll
struct _ast7111; // Enum GCCallbackFlags
struct _ast7112; // Enum v8::GCCallbackFlags
struct _ast7113; // EnumConstant kNoGCCallbackFlags
struct _ast7114; // EnumConstant kGCCallbackFlagConstructRetainedObjectInfos
struct _ast7115; // EnumConstant kGCCallbackFlagForced
struct _ast7116; // EnumConstant kGCCallbackFlagSynchronousPhantomCallbackProcessing
struct _ast7117; // EnumConstant kGCCallbackFlagCollectAllAvailableGarbage
struct _ast7118; // EnumConstant kGCCallbackFlagCollectAllExternalMemory
struct _ast7119; // EnumConstant kGCCallbackScheduleIdleGarbageCollection
struct _ast7120; // Typedef GCCallback
struct _ast7121; // Typedef v8::GCCallback
struct _ast7122; // Typedef InterruptCallback
struct _ast7123; // Typedef v8::InterruptCallback
struct _ast7124; // Typedef NearHeapLimitCallback
struct _ast7125; // Typedef v8::NearHeapLimitCallback
struct _ast7126; // CXXRecord HeapStatistics
struct _ast7127; // Record v8::HeapStatistics
struct _ast7128; // CXXRecord HeapStatistics
struct _ast7129; // CXXConstructor HeapStatistics
struct _ast7130; // Pointer v8::HeapStatistics *
struct _ast7131; // CXXMethod total_heap_size
struct _ast7132; // CXXMethod total_heap_size_executable
struct _ast7133; // CXXMethod total_physical_size
struct _ast7134; // CXXMethod total_available_size
struct _ast7135; // CXXMethod used_heap_size
struct _ast7136; // CXXMethod heap_size_limit
struct _ast7137; // CXXMethod malloced_memory
struct _ast7138; // CXXMethod external_memory
struct _ast7139; // CXXMethod peak_malloced_memory
struct _ast7140; // CXXMethod number_of_native_contexts
struct _ast7141; // CXXMethod number_of_detached_contexts
struct _ast7142; // CXXMethod does_zap_garbage
struct _ast7143; // CXXRecord HeapSpaceStatistics
struct _ast7144; // Record v8::HeapSpaceStatistics
struct _ast7145; // CXXRecord HeapSpaceStatistics
struct _ast7146; // CXXConstructor HeapSpaceStatistics
struct _ast7147; // Pointer v8::HeapSpaceStatistics *
struct _ast7148; // CXXMethod space_name
struct _ast7149; // FunctionProto const char *()
struct _ast7150; // CXXMethod space_size
struct _ast7151; // CXXMethod space_used_size
struct _ast7152; // CXXMethod space_available_size
struct _ast7153; // CXXMethod physical_space_size
struct _ast7154; // CXXRecord HeapObjectStatistics
struct _ast7155; // Record v8::HeapObjectStatistics
struct _ast7156; // CXXRecord HeapObjectStatistics
struct _ast7157; // CXXConstructor HeapObjectStatistics
struct _ast7158; // Pointer v8::HeapObjectStatistics *
struct _ast7159; // CXXMethod object_type
struct _ast7160; // CXXMethod object_sub_type
struct _ast7161; // CXXMethod object_count
struct _ast7162; // CXXMethod object_size
struct _ast7163; // CXXRecord HeapCodeStatistics
struct _ast7164; // Record v8::HeapCodeStatistics
struct _ast7165; // CXXRecord HeapCodeStatistics
struct _ast7166; // CXXConstructor HeapCodeStatistics
struct _ast7167; // Pointer v8::HeapCodeStatistics *
struct _ast7168; // CXXMethod code_and_metadata_size
struct _ast7169; // CXXMethod bytecode_and_metadata_size
struct _ast7170; // CXXMethod external_script_source_size
struct _ast7171; // CXXRecord JitCodeEvent
struct _ast7172; // Record v8::JitCodeEvent
struct _ast7173; // CXXRecord JitCodeEvent
struct _ast7174; // Enum EventType
struct _ast7175; // Enum v8::JitCodeEvent::EventType
struct _ast7176; // EnumConstant CODE_ADDED
struct _ast7177; // EnumConstant CODE_MOVED
struct _ast7178; // EnumConstant CODE_REMOVED
struct _ast7179; // EnumConstant CODE_ADD_LINE_POS_INFO
struct _ast7180; // EnumConstant CODE_START_LINE_INFO_RECORDING
struct _ast7181; // EnumConstant CODE_END_LINE_INFO_RECORDING
struct _ast7182; // Enum PositionType
struct _ast7183; // Enum v8::JitCodeEvent::PositionType
struct _ast7184; // EnumConstant POSITION
struct _ast7185; // EnumConstant STATEMENT_POSITION
struct _ast7186; // Enum CodeType
struct _ast7187; // Enum v8::JitCodeEvent::CodeType
struct _ast7188; // EnumConstant BYTE_CODE
struct _ast7189; // EnumConstant JIT_CODE
struct _ast7190; // Field type
struct _ast7191; // Field code_type
struct _ast7192; // Field code_start
struct _ast7193; // Field code_len
struct _ast7194; // Field script
struct _ast7195; // Field user_data
struct _ast7196; // CXXRecord name_t
struct _ast7197; // Record v8::JitCodeEvent::name_t
struct _ast7198; // CXXRecord name_t
struct _ast7199; // Field str
struct _ast7200; // Field len
struct _ast7201; // CXXRecord line_info_t
struct _ast7202; // Record v8::JitCodeEvent::line_info_t
struct _ast7203; // CXXRecord line_info_t
struct _ast7204; // Field offset
struct _ast7205; // Field pos
struct _ast7206; // Field position_type
struct _ast7207; // CXXRecord 
struct _ast7208; // Record v8::JitCodeEvent::(anonymous union at D:\gen8/v8/include/v8.h:7072:3)
struct _ast7209; // Field name
struct _ast7210; // Field line_info
struct _ast7211; // Field new_code_start
struct _ast7212; // Field 
struct _ast7213; // IndirectField name
struct _ast7214; // IndirectField line_info
struct _ast7215; // IndirectField new_code_start
struct _ast7216; // Field isolate
struct _ast7217; // Enum RAILMode
struct _ast7218; // Enum v8::RAILMode
struct _ast7219; // Builtin unsigned int
struct _ast7220; // EnumConstant PERFORMANCE_RESPONSE
struct _ast7221; // EnumConstant PERFORMANCE_ANIMATION
struct _ast7222; // EnumConstant PERFORMANCE_IDLE
struct _ast7223; // EnumConstant PERFORMANCE_LOAD
struct _ast7224; // Enum JitCodeEventOptions
struct _ast7225; // Enum v8::JitCodeEventOptions
struct _ast7226; // EnumConstant kJitCodeEventDefault
struct _ast7227; // EnumConstant kJitCodeEventEnumExisting
struct _ast7228; // Typedef JitCodeEventHandler
struct _ast7229; // Typedef v8::JitCodeEventHandler
struct _ast7230; // Typedef UnhandledExceptionCallback
struct _ast7231; // Typedef v8::UnhandledExceptionCallback
struct _ast7232; // CXXRecord ExternalResourceVisitor
struct _ast7233; // Record v8::ExternalResourceVisitor
struct _ast7234; // CXXRecord ExternalResourceVisitor
struct _ast7235; // CXXDestructor ~ExternalResourceVisitor
struct _ast7236; // FunctionProto void ()
struct _ast7237; // Pointer v8::ExternalResourceVisitor *
struct _ast7238; // CXXMethod VisitExternalString
struct _ast7239; // ParmVar string
struct _ast7240; // TemplateSpecialization Local<v8::String>
struct _ast7241; // FunctionProto void (Local<v8::String>)
struct _ast7242; // CXXMethod operator=
struct _ast7243; // ParmVar 
struct _ast7244; // LValueReference const v8::ExternalResourceVisitor &
struct _ast7245; // Record const v8::ExternalResourceVisitor
struct _ast7246; // FunctionProto v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
struct _ast7247; // LValueReference v8::ExternalResourceVisitor &
struct _ast7248; // CXXRecord PersistentHandleVisitor
struct _ast7249; // Record v8::PersistentHandleVisitor
struct _ast7250; // CXXRecord PersistentHandleVisitor
struct _ast7251; // CXXDestructor ~PersistentHandleVisitor
struct _ast7252; // FunctionProto void ()
struct _ast7253; // Pointer v8::PersistentHandleVisitor *
struct _ast7254; // CXXMethod VisitPersistentHandle
struct _ast7255; // ParmVar value
struct _ast7256; // Pointer Persistent<v8::Value> *
struct _ast7257; // TemplateSpecialization Persistent<v8::Value>
struct _ast7258; // ParmVar class_id
struct _ast7259; // FunctionProto void (Persistent<v8::Value> *, uint16_t)
struct _ast7260; // CXXMethod operator=
struct _ast7261; // ParmVar 
struct _ast7262; // LValueReference const v8::PersistentHandleVisitor &
struct _ast7263; // Record const v8::PersistentHandleVisitor
struct _ast7264; // FunctionProto v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
struct _ast7265; // LValueReference v8::PersistentHandleVisitor &
struct _ast7266; // Enum MemoryPressureLevel
struct _ast7267; // Enum v8::MemoryPressureLevel
struct _ast7268; // EnumConstant kNone
struct _ast7269; // EnumConstant kModerate
struct _ast7270; // EnumConstant kCritical
struct _ast7271; // CXXRecord EmbedderHeapTracer
struct _ast7272; // Record v8::EmbedderHeapTracer
struct _ast7273; // CXXRecord EmbedderHeapTracer
struct _ast7274; // Enum TraceFlags
struct _ast7275; // Enum v8::EmbedderHeapTracer::TraceFlags
struct _ast7276; // EnumConstant kNoFlags
struct _ast7277; // EnumConstant kReduceMemory
struct _ast7278; // Enum EmbedderStackState
struct _ast7279; // Enum v8::EmbedderHeapTracer::EmbedderStackState
struct _ast7280; // EnumConstant kUnknown
struct _ast7281; // EnumConstant kNonEmpty
struct _ast7282; // EnumConstant kEmpty
struct _ast7283; // CXXRecord TracedGlobalHandleVisitor
struct _ast7284; // Record v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7285; // CXXRecord TracedGlobalHandleVisitor
struct _ast7286; // CXXDestructor ~TracedGlobalHandleVisitor
struct _ast7287; // FunctionProto void ()
struct _ast7288; // Pointer v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ast7289; // CXXMethod VisitTracedGlobalHandle
struct _ast7290; // ParmVar value
struct _ast7291; // LValueReference const TracedGlobal<v8::Value> &
struct _ast7292; // TemplateSpecialization const TracedGlobal<v8::Value>
struct _ast7293; // TemplateSpecialization TracedGlobal<v8::Value>
struct _ast7294; // FunctionProto void (const TracedGlobal<v8::Value> &)
struct _ast7295; // CXXMethod operator=
struct _ast7296; // ParmVar 
struct _ast7297; // LValueReference const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7298; // Record const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7299; // FunctionProto v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ast7300; // LValueReference v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7301; // CXXRecord TraceSummary
struct _ast7302; // Record v8::EmbedderHeapTracer::TraceSummary
struct _ast7303; // CXXRecord TraceSummary
struct _ast7304; // Field time
struct _ast7305; // Field allocated_size
struct _ast7306; // CXXDestructor ~EmbedderHeapTracer
struct _ast7307; // FunctionProto void ()
struct _ast7308; // Pointer v8::EmbedderHeapTracer *
struct _ast7309; // CXXMethod IterateTracedGlobalHandles
struct _ast7310; // ParmVar visitor
struct _ast7311; // FunctionProto void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _ast7312; // CXXMethod RegisterV8References
struct _ast7313; // ParmVar embedder_fields
struct _ast7314; // LValueReference const std::vector<std::pair<void *, void *> > &
struct _ast7315; // Elaborated const std::vector<std::pair<void *, void *> >
struct _ast7316; // Elaborated std::vector<std::pair<void *, void *> >
struct _ast7317; // FunctionProto void (const std::vector<std::pair<void *, void *> > &)
struct _ast7318; // CXXMethod RegisterEmbedderReference
struct _ast7319; // ParmVar ref
struct _ast7320; // LValueReference const TracedGlobal<v8::Value> &
struct _ast7321; // TemplateSpecialization const TracedGlobal<v8::Value>
struct _ast7322; // TemplateSpecialization TracedGlobal<v8::Value>
struct _ast7323; // FunctionProto void (const TracedGlobal<v8::Value> &)
struct _ast7324; // CXXMethod TracePrologue
struct _ast7325; // CXXMethod TracePrologue
struct _ast7326; // ParmVar flags
struct _ast7327; // FunctionProto void (v8::EmbedderHeapTracer::TraceFlags)
struct _ast7328; // CXXMethod AdvanceTracing
struct _ast7329; // ParmVar deadline_in_ms
struct _ast7330; // FunctionProto bool (double)
struct _ast7331; // CXXMethod IsTracingDone
struct _ast7332; // CXXMethod TraceEpilogue
struct _ast7333; // CXXMethod TraceEpilogue
struct _ast7334; // ParmVar trace_summary
struct _ast7335; // Pointer v8::EmbedderHeapTracer::TraceSummary *
struct _ast7336; // FunctionProto void (v8::EmbedderHeapTracer::TraceSummary *)
struct _ast7337; // CXXMethod EnterFinalPause
struct _ast7338; // ParmVar stack_state
struct _ast7339; // FunctionProto void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ast7340; // CXXMethod FinalizeTracing
struct _ast7341; // CXXMethod IsRootForNonTracingGC
struct _ast7342; // ParmVar handle
struct _ast7343; // LValueReference const v8::TracedGlobal<v8::Value> &
struct _ast7344; // Elaborated const v8::TracedGlobal<v8::Value>
struct _ast7345; // Elaborated v8::TracedGlobal<v8::Value>
struct _ast7346; // FunctionProto bool (const v8::TracedGlobal<v8::Value> &)
struct _ast7347; // CXXMethod GarbageCollectionForTesting
struct _ast7348; // ParmVar stack_state
struct _ast7349; // CXXMethod IncreaseAllocatedSize
struct _ast7350; // ParmVar bytes
struct _ast7351; // CXXMethod DecreaseAllocatedSize
struct _ast7352; // ParmVar bytes
struct _ast7353; // CXXMethod isolate
struct _ast7354; // FunctionProto v8::Isolate *() const
struct _ast7355; // Pointer const v8::EmbedderHeapTracer *
struct _ast7356; // Record const v8::EmbedderHeapTracer
struct _ast7357; // Field isolate_
struct _ast7358; // CXXMethod operator=
struct _ast7359; // ParmVar 
struct _ast7360; // LValueReference const v8::EmbedderHeapTracer &
struct _ast7361; // FunctionProto v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _ast7362; // LValueReference v8::EmbedderHeapTracer &
struct _ast7363; // CXXRecord SerializeInternalFieldsCallback
struct _ast7364; // Record v8::SerializeInternalFieldsCallback
struct _ast7365; // CXXRecord SerializeInternalFieldsCallback
struct _ast7366; // Typedef CallbackFunction
struct _ast7367; // Typedef v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ast7368; // CXXConstructor SerializeInternalFieldsCallback
struct _ast7369; // ParmVar function
struct _ast7370; // ParmVar data_arg
struct _ast7371; // FunctionProto void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7372; // Pointer v8::SerializeInternalFieldsCallback *
struct _ast7373; // Field callback
struct _ast7374; // Field data
struct _ast7375; // CXXConstructor SerializeInternalFieldsCallback
struct _ast7376; // ParmVar 
struct _ast7377; // LValueReference const v8::SerializeInternalFieldsCallback &
struct _ast7378; // Record const v8::SerializeInternalFieldsCallback
struct _ast7379; // FunctionProto void (const v8::SerializeInternalFieldsCallback &)
struct _ast7380; // CXXConstructor SerializeInternalFieldsCallback
struct _ast7381; // ParmVar 
struct _ast7382; // RValueReference v8::SerializeInternalFieldsCallback &&
struct _ast7383; // FunctionProto void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _ast7384; // CXXDestructor ~SerializeInternalFieldsCallback
struct _ast7385; // Typedef SerializeEmbedderFieldsCallback
struct _ast7386; // Typedef v8::SerializeEmbedderFieldsCallback
struct _ast7387; // CXXRecord DeserializeInternalFieldsCallback
struct _ast7388; // Record v8::DeserializeInternalFieldsCallback
struct _ast7389; // CXXRecord DeserializeInternalFieldsCallback
struct _ast7390; // Typedef CallbackFunction
struct _ast7391; // Typedef v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ast7392; // CXXConstructor DeserializeInternalFieldsCallback
struct _ast7393; // ParmVar function
struct _ast7394; // ParmVar data_arg
struct _ast7395; // FunctionProto void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7396; // Pointer v8::DeserializeInternalFieldsCallback *
struct _ast7397; // Field callback
struct _ast7398; // Field data
struct _ast7399; // CXXConstructor DeserializeInternalFieldsCallback
struct _ast7400; // ParmVar 
struct _ast7401; // LValueReference const v8::DeserializeInternalFieldsCallback &
struct _ast7402; // Record const v8::DeserializeInternalFieldsCallback
struct _ast7403; // FunctionProto void (const v8::DeserializeInternalFieldsCallback &)
struct _ast7404; // CXXConstructor DeserializeInternalFieldsCallback
struct _ast7405; // ParmVar 
struct _ast7406; // RValueReference v8::DeserializeInternalFieldsCallback &&
struct _ast7407; // FunctionProto void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ast7408; // CXXDestructor ~DeserializeInternalFieldsCallback
struct _ast7409; // Typedef DeserializeEmbedderFieldsCallback
struct _ast7410; // Typedef v8::DeserializeEmbedderFieldsCallback
struct _ast7411; // CXXRecord Isolate
struct _ast7412; // CXXRecord CreateParams
struct _ast7413; // Record v8::Isolate::CreateParams
struct _ast7414; // CXXRecord CreateParams
struct _ast7415; // CXXConstructor CreateParams
struct _ast7416; // Pointer v8::Isolate::CreateParams *
struct _ast7417; // Field code_event_handler
struct _ast7418; // Field constraints
struct _ast7419; // Field snapshot_blob
struct _ast7420; // Field counter_lookup_callback
struct _ast7421; // Field create_histogram_callback
struct _ast7422; // Field add_histogram_sample_callback
struct _ast7423; // Field array_buffer_allocator
struct _ast7424; // Field external_references
struct _ast7425; // Field allow_atomics_wait
struct _ast7426; // Field only_terminate_in_safe_scope
struct _ast7427; // CXXRecord Scope
struct _ast7428; // Record v8::Isolate::Scope
struct _ast7429; // CXXRecord Scope
struct _ast7430; // CXXConstructor Scope
struct _ast7431; // ParmVar isolate
struct _ast7432; // Pointer v8::Isolate::Scope *
struct _ast7433; // CXXDestructor ~Scope
struct _ast7434; // CXXConstructor Scope
struct _ast7435; // ParmVar 
struct _ast7436; // LValueReference const v8::Isolate::Scope &
struct _ast7437; // Record const v8::Isolate::Scope
struct _ast7438; // FunctionProto void (const v8::Isolate::Scope &)
struct _ast7439; // CXXMethod operator=
struct _ast7440; // ParmVar 
struct _ast7441; // FunctionProto v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _ast7442; // LValueReference v8::Isolate::Scope &
struct _ast7443; // CXXRecord DisallowJavascriptExecutionScope
struct _ast7444; // Record v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7445; // CXXRecord DisallowJavascriptExecutionScope
struct _ast7446; // Enum OnFailure
struct _ast7447; // Enum v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ast7448; // EnumConstant CRASH_ON_FAILURE
struct _ast7449; // EnumConstant THROW_ON_FAILURE
struct _ast7450; // EnumConstant DUMP_ON_FAILURE
struct _ast7451; // CXXConstructor DisallowJavascriptExecutionScope
struct _ast7452; // ParmVar isolate
struct _ast7453; // ParmVar on_failure
struct _ast7454; // FunctionProto void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ast7455; // Pointer v8::Isolate::DisallowJavascriptExecutionScope *
struct _ast7456; // CXXDestructor ~DisallowJavascriptExecutionScope
struct _ast7457; // FunctionProto void ()
struct _ast7458; // CXXConstructor DisallowJavascriptExecutionScope
struct _ast7459; // ParmVar 
struct _ast7460; // LValueReference const v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7461; // Record const v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7462; // FunctionProto void (const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7463; // CXXMethod operator=
struct _ast7464; // ParmVar 
struct _ast7465; // FunctionProto v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7466; // LValueReference v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7467; // CXXRecord AllowJavascriptExecutionScope
struct _ast7468; // Record v8::Isolate::AllowJavascriptExecutionScope
struct _ast7469; // CXXRecord AllowJavascriptExecutionScope
struct _ast7470; // CXXConstructor AllowJavascriptExecutionScope
struct _ast7471; // ParmVar isolate
struct _ast7472; // Pointer v8::Isolate::AllowJavascriptExecutionScope *
struct _ast7473; // CXXDestructor ~AllowJavascriptExecutionScope
struct _ast7474; // FunctionProto void ()
struct _ast7475; // CXXConstructor AllowJavascriptExecutionScope
struct _ast7476; // ParmVar 
struct _ast7477; // LValueReference const v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7478; // Record const v8::Isolate::AllowJavascriptExecutionScope
struct _ast7479; // FunctionProto void (const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7480; // CXXMethod operator=
struct _ast7481; // ParmVar 
struct _ast7482; // FunctionProto v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7483; // LValueReference v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7484; // CXXRecord SuppressMicrotaskExecutionScope
struct _ast7485; // Record v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7486; // CXXRecord SuppressMicrotaskExecutionScope
struct _ast7487; // CXXConstructor SuppressMicrotaskExecutionScope
struct _ast7488; // ParmVar isolate
struct _ast7489; // Pointer v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ast7490; // CXXConstructor SuppressMicrotaskExecutionScope
struct _ast7491; // ParmVar microtask_queue
struct _ast7492; // FunctionProto void (v8::MicrotaskQueue *)
struct _ast7493; // CXXDestructor ~SuppressMicrotaskExecutionScope
struct _ast7494; // FunctionProto void ()
struct _ast7495; // CXXConstructor SuppressMicrotaskExecutionScope
struct _ast7496; // ParmVar 
struct _ast7497; // LValueReference const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7498; // Record const v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7499; // FunctionProto void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7500; // CXXMethod operator=
struct _ast7501; // ParmVar 
struct _ast7502; // FunctionProto v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7503; // LValueReference v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7504; // CXXRecord SafeForTerminationScope
struct _ast7505; // Record v8::Isolate::SafeForTerminationScope
struct _ast7506; // CXXRecord SafeForTerminationScope
struct _ast7507; // CXXConstructor SafeForTerminationScope
struct _ast7508; // ParmVar isolate
struct _ast7509; // FunctionProto void (v8::Isolate *)
struct _ast7510; // Pointer v8::Isolate::SafeForTerminationScope *
struct _ast7511; // CXXDestructor ~SafeForTerminationScope
struct _ast7512; // FunctionProto void ()
struct _ast7513; // CXXConstructor SafeForTerminationScope
struct _ast7514; // ParmVar 
struct _ast7515; // LValueReference const v8::Isolate::SafeForTerminationScope &
struct _ast7516; // Record const v8::Isolate::SafeForTerminationScope
struct _ast7517; // FunctionProto void (const v8::Isolate::SafeForTerminationScope &)
struct _ast7518; // CXXMethod operator=
struct _ast7519; // ParmVar 
struct _ast7520; // FunctionProto v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
struct _ast7521; // LValueReference v8::Isolate::SafeForTerminationScope &
struct _ast7522; // Enum GarbageCollectionType
struct _ast7523; // Enum v8::Isolate::GarbageCollectionType
struct _ast7524; // EnumConstant kFullGarbageCollection
struct _ast7525; // EnumConstant kMinorGarbageCollection
struct _ast7526; // Enum UseCounterFeature
struct _ast7527; // Enum v8::Isolate::UseCounterFeature
struct _ast7528; // EnumConstant kUseAsm
struct _ast7529; // EnumConstant kBreakIterator
struct _ast7530; // EnumConstant kLegacyConst
struct _ast7531; // EnumConstant kMarkDequeOverflow
struct _ast7532; // EnumConstant kStoreBufferOverflow
struct _ast7533; // EnumConstant kSlotsBufferOverflow
struct _ast7534; // EnumConstant kObjectObserve
struct _ast7535; // EnumConstant kForcedGC
struct _ast7536; // EnumConstant kSloppyMode
struct _ast7537; // EnumConstant kStrictMode
struct _ast7538; // EnumConstant kStrongMode
struct _ast7539; // EnumConstant kRegExpPrototypeStickyGetter
struct _ast7540; // EnumConstant kRegExpPrototypeToString
struct _ast7541; // EnumConstant kRegExpPrototypeUnicodeGetter
struct _ast7542; // EnumConstant kIntlV8Parse
struct _ast7543; // EnumConstant kIntlPattern
struct _ast7544; // EnumConstant kIntlResolved
struct _ast7545; // EnumConstant kPromiseChain
struct _ast7546; // EnumConstant kPromiseAccept
struct _ast7547; // EnumConstant kPromiseDefer
struct _ast7548; // EnumConstant kHtmlCommentInExternalScript
struct _ast7549; // EnumConstant kHtmlComment
struct _ast7550; // EnumConstant kSloppyModeBlockScopedFunctionRedefinition
struct _ast7551; // EnumConstant kForInInitializer
struct _ast7552; // EnumConstant kArrayProtectorDirtied
struct _ast7553; // EnumConstant kArraySpeciesModified
struct _ast7554; // EnumConstant kArrayPrototypeConstructorModified
struct _ast7555; // EnumConstant kArrayInstanceProtoModified
struct _ast7556; // EnumConstant kArrayInstanceConstructorModified
struct _ast7557; // EnumConstant kLegacyFunctionDeclaration
struct _ast7558; // EnumConstant kRegExpPrototypeSourceGetter
struct _ast7559; // EnumConstant kRegExpPrototypeOldFlagGetter
struct _ast7560; // EnumConstant kDecimalWithLeadingZeroInStrictMode
struct _ast7561; // EnumConstant kLegacyDateParser
struct _ast7562; // EnumConstant kDefineGetterOrSetterWouldThrow
struct _ast7563; // EnumConstant kFunctionConstructorReturnedUndefined
struct _ast7564; // EnumConstant kAssigmentExpressionLHSIsCallInSloppy
struct _ast7565; // EnumConstant kAssigmentExpressionLHSIsCallInStrict
struct _ast7566; // EnumConstant kPromiseConstructorReturnedUndefined
struct _ast7567; // EnumConstant kConstructorNonUndefinedPrimitiveReturn
struct _ast7568; // EnumConstant kLabeledExpressionStatement
struct _ast7569; // EnumConstant kLineOrParagraphSeparatorAsLineTerminator
struct _ast7570; // EnumConstant kIndexAccessor
struct _ast7571; // EnumConstant kErrorCaptureStackTrace
struct _ast7572; // EnumConstant kErrorPrepareStackTrace
struct _ast7573; // EnumConstant kErrorStackTraceLimit
struct _ast7574; // EnumConstant kWebAssemblyInstantiation
struct _ast7575; // EnumConstant kDeoptimizerDisableSpeculation
struct _ast7576; // EnumConstant kArrayPrototypeSortJSArrayModifiedPrototype
struct _ast7577; // EnumConstant kFunctionTokenOffsetTooLongForToString
struct _ast7578; // EnumConstant kWasmSharedMemory
struct _ast7579; // EnumConstant kWasmThreadOpcodes
struct _ast7580; // EnumConstant kAtomicsNotify
struct _ast7581; // EnumConstant kAtomicsWake
struct _ast7582; // EnumConstant kCollator
struct _ast7583; // EnumConstant kNumberFormat
struct _ast7584; // EnumConstant kDateTimeFormat
struct _ast7585; // EnumConstant kPluralRules
struct _ast7586; // EnumConstant kRelativeTimeFormat
struct _ast7587; // EnumConstant kLocale
struct _ast7588; // EnumConstant kListFormat
struct _ast7589; // EnumConstant kSegmenter
struct _ast7590; // EnumConstant kStringLocaleCompare
struct _ast7591; // EnumConstant kStringToLocaleUpperCase
struct _ast7592; // EnumConstant kStringToLocaleLowerCase
struct _ast7593; // EnumConstant kNumberToLocaleString
struct _ast7594; // EnumConstant kDateToLocaleString
struct _ast7595; // EnumConstant kDateToLocaleDateString
struct _ast7596; // EnumConstant kDateToLocaleTimeString
struct _ast7597; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeSloppy
struct _ast7598; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeStrict
struct _ast7599; // EnumConstant kOptimizedFunctionWithOneShotBytecode
struct _ast7600; // EnumConstant kRegExpMatchIsTrueishOnNonJSRegExp
struct _ast7601; // EnumConstant kRegExpMatchIsFalseishOnJSRegExp
struct _ast7602; // EnumConstant kDateGetTimezoneOffset
struct _ast7603; // EnumConstant kStringNormalize
struct _ast7604; // EnumConstant kUseCounterFeatureCount
struct _ast7605; // Enum MessageErrorLevel
struct _ast7606; // Enum v8::Isolate::MessageErrorLevel
struct _ast7607; // EnumConstant kMessageLog
struct _ast7608; // EnumConstant kMessageDebug
struct _ast7609; // EnumConstant kMessageInfo
struct _ast7610; // EnumConstant kMessageError
struct _ast7611; // EnumConstant kMessageWarning
struct _ast7612; // EnumConstant kMessageAll
struct _ast7613; // Typedef UseCounterCallback
struct _ast7614; // Typedef v8::Isolate::UseCounterCallback
struct _ast7615; // CXXMethod Allocate
struct _ast7616; // CXXMethod Initialize
struct _ast7617; // ParmVar isolate
struct _ast7618; // ParmVar params
struct _ast7619; // LValueReference const v8::Isolate::CreateParams &
struct _ast7620; // Record const v8::Isolate::CreateParams
struct _ast7621; // FunctionProto void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _ast7622; // CXXMethod New
struct _ast7623; // ParmVar params
struct _ast7624; // FunctionProto v8::Isolate *(const v8::Isolate::CreateParams &)
struct _ast7625; // CXXMethod GetCurrent
struct _ast7626; // Typedef AbortOnUncaughtExceptionCallback
struct _ast7627; // Typedef v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ast7628; // CXXMethod SetAbortOnUncaughtExceptionCallback
struct _ast7629; // ParmVar callback
struct _ast7630; // FunctionProto void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ast7631; // CXXMethod SetHostImportModuleDynamicallyCallback
struct _ast7632; // ParmVar callback
struct _ast7633; // FunctionProto void (v8::HostImportModuleDynamicallyCallback)
struct _ast7634; // CXXMethod SetHostInitializeImportMetaObjectCallback
struct _ast7635; // ParmVar callback
struct _ast7636; // FunctionProto void (v8::HostInitializeImportMetaObjectCallback)
struct _ast7637; // CXXMethod SetPrepareStackTraceCallback
struct _ast7638; // ParmVar callback
struct _ast7639; // FunctionProto void (v8::PrepareStackTraceCallback)
struct _ast7640; // CXXMethod MemoryPressureNotification
struct _ast7641; // ParmVar level
struct _ast7642; // FunctionProto void (v8::MemoryPressureLevel)
struct _ast7643; // CXXMethod Enter
struct _ast7644; // CXXMethod Exit
struct _ast7645; // CXXMethod Dispose
struct _ast7646; // CXXMethod DumpAndResetStats
struct _ast7647; // CXXMethod DiscardThreadSpecificMetadata
struct _ast7648; // CXXMethod SetData
struct _ast7649; // ParmVar slot
struct _ast7650; // ParmVar data
struct _ast7651; // FunctionProto void (uint32_t, void *)
struct _ast7652; // CXXMethod GetData
struct _ast7653; // ParmVar slot
struct _ast7654; // FunctionProto void *(uint32_t)
struct _ast7655; // CXXMethod GetNumberOfDataSlots
struct _ast7656; // FunctionTemplate GetDataFromSnapshotOnce
struct _ast7657; // TemplateTypeParm T
struct _ast7658; // TemplateTypeParm T
struct _ast7659; // CXXMethod GetDataFromSnapshotOnce
struct _ast7660; // ParmVar index
struct _ast7661; // FunctionProto MaybeLocal<T> (size_t)
struct _ast7662; // TemplateSpecialization MaybeLocal<T>
struct _ast7663; // CXXMethod GetHeapStatistics
struct _ast7664; // ParmVar heap_statistics
struct _ast7665; // FunctionProto void (v8::HeapStatistics *)
struct _ast7666; // CXXMethod NumberOfHeapSpaces
struct _ast7667; // CXXMethod GetHeapSpaceStatistics
struct _ast7668; // ParmVar space_statistics
struct _ast7669; // ParmVar index
struct _ast7670; // FunctionProto bool (v8::HeapSpaceStatistics *, size_t)
struct _ast7671; // CXXMethod NumberOfTrackedHeapObjectTypes
struct _ast7672; // CXXMethod GetHeapObjectStatisticsAtLastGC
struct _ast7673; // ParmVar object_statistics
struct _ast7674; // ParmVar type_index
struct _ast7675; // FunctionProto bool (v8::HeapObjectStatistics *, size_t)
struct _ast7676; // CXXMethod GetHeapCodeAndMetadataStatistics
struct _ast7677; // ParmVar object_statistics
struct _ast7678; // FunctionProto bool (v8::HeapCodeStatistics *)
struct _ast7679; // CXXMethod GetStackSample
struct _ast7680; // ParmVar state
struct _ast7681; // LValueReference const v8::RegisterState &
struct _ast7682; // Record const v8::RegisterState
struct _ast7683; // ParmVar frames
struct _ast7684; // Pointer void **
struct _ast7685; // ParmVar frames_limit
struct _ast7686; // ParmVar sample_info
struct _ast7687; // Pointer v8::SampleInfo *
struct _ast7688; // FunctionProto void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
struct _ast7689; // CXXMethod AdjustAmountOfExternalAllocatedMemory
struct _ast7690; // ParmVar change_in_bytes
struct _ast7691; // FunctionProto int64_t (int64_t)
struct _ast7692; // CXXMethod NumberOfPhantomHandleResetsSinceLastCall
struct _ast7693; // CXXMethod GetHeapProfiler
struct _ast7694; // FunctionProto v8::HeapProfiler *()
struct _ast7695; // Pointer v8::HeapProfiler *
struct _ast7696; // CXXMethod SetIdle
struct _ast7697; // ParmVar is_idle
struct _ast7698; // CXXMethod GetArrayBufferAllocator
struct _ast7699; // FunctionProto ArrayBuffer::Allocator *()
struct _ast7700; // Pointer ArrayBuffer::Allocator *
struct _ast7701; // Elaborated ArrayBuffer::Allocator
struct _ast7702; // CXXMethod InContext
struct _ast7703; // CXXMethod GetCurrentContext
struct _ast7704; // FunctionProto Local<v8::Context> ()
struct _ast7705; // TemplateSpecialization Local<v8::Context>
struct _ast7706; // CXXMethod GetEnteredContext
struct _ast7707; // FunctionProto Local<v8::Context> ()
struct _ast7708; // TemplateSpecialization Local<v8::Context>
struct _ast7709; // CXXMethod GetEnteredOrMicrotaskContext
struct _ast7710; // FunctionProto Local<v8::Context> ()
struct _ast7711; // TemplateSpecialization Local<v8::Context>
struct _ast7712; // CXXMethod GetIncumbentContext
struct _ast7713; // FunctionProto Local<v8::Context> ()
struct _ast7714; // TemplateSpecialization Local<v8::Context>
struct _ast7715; // CXXMethod ThrowException
struct _ast7716; // ParmVar exception
struct _ast7717; // TemplateSpecialization Local<v8::Value>
struct _ast7718; // FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _ast7719; // TemplateSpecialization Local<v8::Value>
struct _ast7720; // Typedef GCCallback
struct _ast7721; // Typedef v8::Isolate::GCCallback
struct _ast7722; // Typedef GCCallbackWithData
struct _ast7723; // Typedef v8::Isolate::GCCallbackWithData
struct _ast7724; // CXXMethod AddGCPrologueCallback
struct _ast7725; // ParmVar callback
struct _ast7726; // ParmVar data
struct _ast7727; // ParmVar gc_type_filter
struct _ast7728; // FunctionProto void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
struct _ast7729; // CXXMethod AddGCPrologueCallback
struct _ast7730; // ParmVar callback
struct _ast7731; // ParmVar gc_type_filter
struct _ast7732; // FunctionProto void (v8::Isolate::GCCallback, v8::GCType)
struct _ast7733; // CXXMethod RemoveGCPrologueCallback
struct _ast7734; // ParmVar 
struct _ast7735; // ParmVar data
struct _ast7736; // FunctionProto void (v8::Isolate::GCCallbackWithData, void *)
struct _ast7737; // CXXMethod RemoveGCPrologueCallback
struct _ast7738; // ParmVar callback
struct _ast7739; // FunctionProto void (v8::Isolate::GCCallback)
struct _ast7740; // CXXMethod SetEmbedderHeapTracer
struct _ast7741; // ParmVar tracer
struct _ast7742; // FunctionProto void (v8::EmbedderHeapTracer *)
struct _ast7743; // CXXMethod GetEmbedderHeapTracer
struct _ast7744; // FunctionProto v8::EmbedderHeapTracer *()
struct _ast7745; // Enum AtomicsWaitEvent
struct _ast7746; // Enum v8::Isolate::AtomicsWaitEvent
struct _ast7747; // EnumConstant kStartWait
struct _ast7748; // EnumConstant kWokenUp
struct _ast7749; // EnumConstant kTimedOut
struct _ast7750; // EnumConstant kTerminatedExecution
struct _ast7751; // EnumConstant kAPIStopped
struct _ast7752; // EnumConstant kNotEqual
struct _ast7753; // CXXRecord AtomicsWaitWakeHandle
struct _ast7754; // Record v8::Isolate::AtomicsWaitWakeHandle
struct _ast7755; // CXXRecord AtomicsWaitWakeHandle
struct _ast7756; // CXXMethod Wake
struct _ast7757; // Pointer v8::Isolate::AtomicsWaitWakeHandle *
struct _ast7758; // Typedef AtomicsWaitCallback
struct _ast7759; // Typedef v8::Isolate::AtomicsWaitCallback
struct _ast7760; // CXXMethod SetAtomicsWaitCallback
struct _ast7761; // ParmVar callback
struct _ast7762; // ParmVar data
struct _ast7763; // FunctionProto void (v8::Isolate::AtomicsWaitCallback, void *)
struct _ast7764; // CXXMethod AddGCEpilogueCallback
struct _ast7765; // ParmVar callback
struct _ast7766; // ParmVar data
struct _ast7767; // ParmVar gc_type_filter
struct _ast7768; // CXXMethod AddGCEpilogueCallback
struct _ast7769; // ParmVar callback
struct _ast7770; // ParmVar gc_type_filter
struct _ast7771; // CXXMethod RemoveGCEpilogueCallback
struct _ast7772; // ParmVar callback
struct _ast7773; // ParmVar data
struct _ast7774; // CXXMethod RemoveGCEpilogueCallback
struct _ast7775; // ParmVar callback
struct _ast7776; // Typedef GetExternallyAllocatedMemoryInBytesCallback
struct _ast7777; // Typedef v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ast7778; // CXXMethod SetGetExternallyAllocatedMemoryInBytesCallback
struct _ast7779; // ParmVar callback
struct _ast7780; // FunctionProto void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ast7781; // CXXMethod TerminateExecution
struct _ast7782; // CXXMethod IsExecutionTerminating
struct _ast7783; // CXXMethod CancelTerminateExecution
struct _ast7784; // CXXMethod RequestInterrupt
struct _ast7785; // ParmVar callback
struct _ast7786; // ParmVar data
struct _ast7787; // FunctionProto void (v8::InterruptCallback, void *)
struct _ast7788; // CXXMethod RequestGarbageCollectionForTesting
struct _ast7789; // ParmVar type
struct _ast7790; // FunctionProto void (v8::Isolate::GarbageCollectionType)
struct _ast7791; // CXXMethod SetEventLogger
struct _ast7792; // ParmVar that
struct _ast7793; // FunctionProto void (v8::LogEventCallback)
struct _ast7794; // CXXMethod AddBeforeCallEnteredCallback
struct _ast7795; // ParmVar callback
struct _ast7796; // FunctionProto void (v8::BeforeCallEnteredCallback)
struct _ast7797; // CXXMethod RemoveBeforeCallEnteredCallback
struct _ast7798; // ParmVar callback
struct _ast7799; // CXXMethod AddCallCompletedCallback
struct _ast7800; // ParmVar callback
struct _ast7801; // FunctionProto void (v8::CallCompletedCallback)
struct _ast7802; // CXXMethod RemoveCallCompletedCallback
struct _ast7803; // ParmVar callback
struct _ast7804; // CXXMethod SetPromiseHook
struct _ast7805; // ParmVar hook
struct _ast7806; // FunctionProto void (v8::PromiseHook)
struct _ast7807; // CXXMethod SetPromiseRejectCallback
struct _ast7808; // ParmVar callback
struct _ast7809; // FunctionProto void (v8::PromiseRejectCallback)
struct _ast7810; // CXXMethod RunMicrotasks
struct _ast7811; // CXXMethod EnqueueMicrotask
struct _ast7812; // ParmVar microtask
struct _ast7813; // TemplateSpecialization Local<v8::Function>
struct _ast7814; // FunctionProto void (Local<v8::Function>)
struct _ast7815; // CXXMethod EnqueueMicrotask
struct _ast7816; // ParmVar callback
struct _ast7817; // ParmVar data
struct _ast7818; // FunctionProto void (v8::MicrotaskCallback, void *)
struct _ast7819; // CXXMethod SetMicrotasksPolicy
struct _ast7820; // ParmVar policy
struct _ast7821; // FunctionProto void (v8::MicrotasksPolicy)
struct _ast7822; // CXXMethod GetMicrotasksPolicy
struct _ast7823; // FunctionProto v8::MicrotasksPolicy () const
struct _ast7824; // Pointer const v8::Isolate *
struct _ast7825; // Record const v8::Isolate
struct _ast7826; // CXXMethod AddMicrotasksCompletedCallback
struct _ast7827; // ParmVar callback
struct _ast7828; // FunctionProto void (v8::MicrotasksCompletedCallback)
struct _ast7829; // CXXMethod AddMicrotasksCompletedCallback
struct _ast7830; // ParmVar callback
struct _ast7831; // ParmVar data
struct _ast7832; // CXXMethod RemoveMicrotasksCompletedCallback
struct _ast7833; // ParmVar callback
struct _ast7834; // CXXMethod RemoveMicrotasksCompletedCallback
struct _ast7835; // ParmVar callback
struct _ast7836; // ParmVar data
struct _ast7837; // CXXMethod SetUseCounterCallback
struct _ast7838; // ParmVar callback
struct _ast7839; // FunctionProto void (v8::Isolate::UseCounterCallback)
struct _ast7840; // CXXMethod SetCounterFunction
struct _ast7841; // ParmVar 
struct _ast7842; // FunctionProto void (v8::CounterLookupCallback)
struct _ast7843; // CXXMethod SetCreateHistogramFunction
struct _ast7844; // ParmVar 
struct _ast7845; // FunctionProto void (v8::CreateHistogramCallback)
struct _ast7846; // CXXMethod SetAddHistogramSampleFunction
struct _ast7847; // ParmVar 
struct _ast7848; // FunctionProto void (v8::AddHistogramSampleCallback)
struct _ast7849; // CXXMethod IdleNotificationDeadline
struct _ast7850; // ParmVar deadline_in_seconds
struct _ast7851; // CXXMethod LowMemoryNotification
struct _ast7852; // CXXMethod ContextDisposedNotification
struct _ast7853; // ParmVar dependant_context
struct _ast7854; // FunctionProto int (bool)
struct _ast7855; // CXXMethod IsolateInForegroundNotification
struct _ast7856; // CXXMethod IsolateInBackgroundNotification
struct _ast7857; // CXXMethod EnableMemorySavingsMode
struct _ast7858; // CXXMethod DisableMemorySavingsMode
struct _ast7859; // CXXMethod SetRAILMode
struct _ast7860; // ParmVar rail_mode
struct _ast7861; // FunctionProto void (v8::RAILMode)
struct _ast7862; // CXXMethod IncreaseHeapLimitForDebugging
struct _ast7863; // CXXMethod RestoreOriginalHeapLimit
struct _ast7864; // CXXMethod IsHeapLimitIncreasedForDebugging
struct _ast7865; // CXXMethod SetJitCodeEventHandler
struct _ast7866; // ParmVar options
struct _ast7867; // ParmVar event_handler
struct _ast7868; // FunctionProto void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _ast7869; // CXXMethod SetStackLimit
struct _ast7870; // ParmVar stack_limit
struct _ast7871; // Typedef uintptr_t
struct _ast7872; // FunctionProto void (uintptr_t)
struct _ast7873; // CXXMethod GetCodeRange
struct _ast7874; // ParmVar start
struct _ast7875; // ParmVar length_in_bytes
struct _ast7876; // FunctionProto void (void **, size_t *)
struct _ast7877; // CXXMethod GetUnwindState
struct _ast7878; // FunctionProto v8::UnwindState ()
struct _ast7879; // CXXMethod SetFatalErrorHandler
struct _ast7880; // ParmVar that
struct _ast7881; // FunctionProto void (v8::FatalErrorCallback)
struct _ast7882; // CXXMethod SetOOMErrorHandler
struct _ast7883; // ParmVar that
struct _ast7884; // FunctionProto void (v8::OOMErrorCallback)
struct _ast7885; // CXXMethod AddNearHeapLimitCallback
struct _ast7886; // ParmVar callback
struct _ast7887; // ParmVar data
struct _ast7888; // FunctionProto void (v8::NearHeapLimitCallback, void *)
struct _ast7889; // CXXMethod RemoveNearHeapLimitCallback
struct _ast7890; // ParmVar callback
struct _ast7891; // ParmVar heap_limit
struct _ast7892; // FunctionProto void (v8::NearHeapLimitCallback, size_t)
struct _ast7893; // CXXMethod AutomaticallyRestoreInitialHeapLimit
struct _ast7894; // ParmVar threshold_percent
struct _ast7895; // CXXMethod SetAllowCodeGenerationFromStringsCallback
struct _ast7896; // ParmVar callback
struct _ast7897; // FunctionProto void (v8::AllowCodeGenerationFromStringsCallback)
struct _ast7898; // CXXMethod SetAllowWasmCodeGenerationCallback
struct _ast7899; // ParmVar callback
struct _ast7900; // FunctionProto void (v8::AllowWasmCodeGenerationCallback)
struct _ast7901; // CXXMethod SetWasmModuleCallback
struct _ast7902; // ParmVar callback
struct _ast7903; // FunctionProto void (v8::ExtensionCallback)
struct _ast7904; // CXXMethod SetWasmInstanceCallback
struct _ast7905; // ParmVar callback
struct _ast7906; // CXXMethod SetWasmStreamingCallback
struct _ast7907; // ParmVar callback
struct _ast7908; // FunctionProto void (v8::WasmStreamingCallback)
struct _ast7909; // CXXMethod SetWasmThreadsEnabledCallback
struct _ast7910; // ParmVar callback
struct _ast7911; // FunctionProto void (v8::WasmThreadsEnabledCallback)
struct _ast7912; // CXXMethod IsDead
struct _ast7913; // CXXMethod AddMessageListener
struct _ast7914; // ParmVar that
struct _ast7915; // ParmVar data
struct _ast7916; // TemplateSpecialization Local<v8::Value>
struct _ast7917; // FunctionProto bool (v8::MessageCallback, Local<v8::Value>)
struct _ast7918; // CXXMethod AddMessageListenerWithErrorLevel
struct _ast7919; // ParmVar that
struct _ast7920; // ParmVar message_levels
struct _ast7921; // ParmVar data
struct _ast7922; // TemplateSpecialization Local<v8::Value>
struct _ast7923; // FunctionProto bool (v8::MessageCallback, int, Local<v8::Value>)
struct _ast7924; // CXXMethod RemoveMessageListeners
struct _ast7925; // ParmVar that
struct _ast7926; // FunctionProto void (v8::MessageCallback)
struct _ast7927; // CXXMethod SetFailedAccessCheckCallbackFunction
struct _ast7928; // ParmVar 
struct _ast7929; // FunctionProto void (v8::FailedAccessCheckCallback)
struct _ast7930; // CXXMethod SetCaptureStackTraceForUncaughtExceptions
struct _ast7931; // ParmVar capture
struct _ast7932; // ParmVar frame_limit
struct _ast7933; // ParmVar options
struct _ast7934; // Elaborated StackTrace::StackTraceOptions
struct _ast7935; // FunctionProto void (bool, int, StackTrace::StackTraceOptions)
struct _ast7936; // CXXMethod VisitExternalResources
struct _ast7937; // ParmVar visitor
struct _ast7938; // FunctionProto void (v8::ExternalResourceVisitor *)
struct _ast7939; // CXXMethod VisitHandlesWithClassIds
struct _ast7940; // ParmVar visitor
struct _ast7941; // FunctionProto void (v8::PersistentHandleVisitor *)
struct _ast7942; // CXXMethod VisitWeakHandles
struct _ast7943; // ParmVar visitor
struct _ast7944; // CXXMethod IsInUse
struct _ast7945; // CXXMethod SetAllowAtomicsWait
struct _ast7946; // ParmVar allow
struct _ast7947; // Enum TimeZoneDetection
struct _ast7948; // Enum v8::Isolate::TimeZoneDetection
struct _ast7949; // EnumConstant kSkip
struct _ast7950; // EnumConstant kRedetect
struct _ast7951; // CXXMethod DateTimeConfigurationChangeNotification
struct _ast7952; // ParmVar time_zone_detection
struct _ast7953; // FunctionProto void (v8::Isolate::TimeZoneDetection)
struct _ast7954; // CXXMethod LocaleConfigurationChangeNotification
struct _ast7955; // CXXConstructor Isolate
struct _ast7956; // CXXDestructor ~Isolate
struct _ast7957; // FunctionProto void ()
struct _ast7958; // CXXConstructor Isolate
struct _ast7959; // ParmVar 
struct _ast7960; // LValueReference const v8::Isolate &
struct _ast7961; // FunctionProto void (const v8::Isolate &)
struct _ast7962; // CXXMethod operator=
struct _ast7963; // ParmVar 
struct _ast7964; // FunctionProto v8::Isolate &(const v8::Isolate &)
struct _ast7965; // LValueReference v8::Isolate &
struct _ast7966; // CXXMethod operator new
struct _ast7967; // ParmVar size
struct _ast7968; // CXXMethod operator new[]
struct _ast7969; // ParmVar size
struct _ast7970; // CXXMethod operator delete
struct _ast7971; // ParmVar 
struct _ast7972; // ParmVar 
struct _ast7973; // FunctionProto void (void *, size_t) noexcept
struct _ast7974; // CXXMethod operator delete[]
struct _ast7975; // ParmVar 
struct _ast7976; // ParmVar 
struct _ast7977; // CXXRecord StartupData
struct _ast7978; // CXXMethod CanBeRehashed
struct _ast7979; // Pointer const v8::StartupData *
struct _ast7980; // Record const v8::StartupData
struct _ast7981; // Field data
struct _ast7982; // Field raw_size
struct _ast7983; // Typedef EntropySource
struct _ast7984; // Typedef v8::EntropySource
struct _ast7985; // Typedef ReturnAddressLocationResolver
struct _ast7986; // Typedef v8::ReturnAddressLocationResolver
struct _ast7987; // CXXRecord V8
struct _ast7988; // Record v8::V8
struct _ast7989; // CXXRecord V8
struct _ast7990; // CXXMethod SetNativesDataBlob
struct _ast7991; // ParmVar startup_blob
struct _ast7992; // Pointer v8::StartupData *
struct _ast7993; // FunctionProto void (v8::StartupData *)
struct _ast7994; // CXXMethod SetSnapshotDataBlob
struct _ast7995; // ParmVar startup_blob
struct _ast7996; // CXXMethod SetDcheckErrorHandler
struct _ast7997; // ParmVar that
struct _ast7998; // FunctionProto void (v8::DcheckErrorCallback)
struct _ast7999; // CXXMethod SetFlagsFromString
struct _ast8000; // ParmVar str
struct _ast8001; // CXXMethod SetFlagsFromString
struct _ast8002; // ParmVar str
struct _ast8003; // ParmVar length
struct _ast8004; // FunctionProto void (const char *, size_t)
struct _ast8005; // CXXMethod SetFlagsFromString
struct _ast8006; // ParmVar str
struct _ast8007; // ParmVar length
struct _ast8008; // FunctionProto void (const char *, int)
struct _ast8009; // CXXMethod SetFlagsFromCommandLine
struct _ast8010; // ParmVar argc
struct _ast8011; // ParmVar argv
struct _ast8012; // Pointer char **
struct _ast8013; // ParmVar remove_flags
struct _ast8014; // FunctionProto void (int *, char **, bool)
struct _ast8015; // CXXMethod GetVersion
struct _ast8016; // CXXMethod Initialize
struct _ast8017; // CXXMethod SetEntropySource
struct _ast8018; // ParmVar source
struct _ast8019; // FunctionProto void (v8::EntropySource)
struct _ast8020; // CXXMethod SetReturnAddressLocationResolver
struct _ast8021; // ParmVar return_address_resolver
struct _ast8022; // FunctionProto void (v8::ReturnAddressLocationResolver)
struct _ast8023; // CXXMethod Dispose
struct _ast8024; // CXXMethod InitializeICU
struct _ast8025; // ParmVar icu_data_file
struct _ast8026; // FunctionProto bool (const char *)
struct _ast8027; // CXXMethod InitializeICUDefaultLocation
struct _ast8028; // ParmVar exec_path
struct _ast8029; // ParmVar icu_data_file
struct _ast8030; // FunctionProto bool (const char *, const char *)
struct _ast8031; // CXXMethod InitializeExternalStartupData
struct _ast8032; // ParmVar directory_path
struct _ast8033; // CXXMethod InitializeExternalStartupData
struct _ast8034; // ParmVar natives_blob
struct _ast8035; // ParmVar snapshot_blob
struct _ast8036; // FunctionProto void (const char *, const char *)
struct _ast8037; // CXXMethod InitializePlatform
struct _ast8038; // ParmVar platform
struct _ast8039; // Pointer v8::Platform *
struct _ast8040; // FunctionProto void (v8::Platform *)
struct _ast8041; // CXXMethod ShutdownPlatform
struct _ast8042; // CXXMethod EnableWebAssemblyTrapHandler
struct _ast8043; // ParmVar use_v8_signal_handler
struct _ast8044; // FunctionProto bool (bool)
struct _ast8045; // CXXMethod SetUnhandledExceptionCallback
struct _ast8046; // ParmVar unhandled_exception_callback
struct _ast8047; // FunctionProto void (v8::UnhandledExceptionCallback)
struct _ast8048; // CXXRecord SnapshotCreator
struct _ast8049; // Record v8::SnapshotCreator
struct _ast8050; // CXXRecord SnapshotCreator
struct _ast8051; // Enum FunctionCodeHandling
struct _ast8052; // Enum v8::SnapshotCreator::FunctionCodeHandling
struct _ast8053; // EnumConstant kClear
struct _ast8054; // EnumConstant kKeep
struct _ast8055; // CXXConstructor SnapshotCreator
struct _ast8056; // ParmVar isolate
struct _ast8057; // ParmVar external_references
struct _ast8058; // Pointer const intptr_t *
struct _ast8059; // Typedef const intptr_t
struct _ast8060; // Typedef intptr_t
struct _ast8061; // ParmVar existing_blob
struct _ast8062; // FunctionProto void (v8::Isolate *, const intptr_t *, v8::StartupData *)
struct _ast8063; // Pointer v8::SnapshotCreator *
struct _ast8064; // CXXConstructor SnapshotCreator
struct _ast8065; // ParmVar external_references
struct _ast8066; // ParmVar existing_blob
struct _ast8067; // FunctionProto void (const intptr_t *, v8::StartupData *)
struct _ast8068; // CXXDestructor ~SnapshotCreator
struct _ast8069; // FunctionProto void ()
struct _ast8070; // CXXMethod GetIsolate
struct _ast8071; // CXXMethod SetDefaultContext
struct _ast8072; // ParmVar context
struct _ast8073; // TemplateSpecialization Local<v8::Context>
struct _ast8074; // ParmVar callback
struct _ast8075; // FunctionProto void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8076; // CXXMethod AddContext
struct _ast8077; // ParmVar context
struct _ast8078; // TemplateSpecialization Local<v8::Context>
struct _ast8079; // ParmVar callback
struct _ast8080; // FunctionProto size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8081; // CXXMethod AddTemplate
struct _ast8082; // ParmVar template_obj
struct _ast8083; // TemplateSpecialization Local<v8::Template>
struct _ast8084; // FunctionProto size_t (Local<v8::Template>)
struct _ast8085; // FunctionTemplate AddData
struct _ast8086; // TemplateTypeParm T
struct _ast8087; // TemplateTypeParm T
struct _ast8088; // CXXMethod AddData
struct _ast8089; // ParmVar context
struct _ast8090; // TemplateSpecialization Local<v8::Context>
struct _ast8091; // ParmVar object
struct _ast8092; // TemplateSpecialization Local<T>
struct _ast8093; // FunctionProto size_t (Local<v8::Context>, Local<T>)
struct _ast8094; // FunctionTemplate AddData
struct _ast8095; // TemplateTypeParm T
struct _ast8096; // TemplateTypeParm T
struct _ast8097; // CXXMethod AddData
struct _ast8098; // ParmVar object
struct _ast8099; // TemplateSpecialization Local<T>
struct _ast8100; // FunctionProto size_t (Local<T>)
struct _ast8101; // CXXMethod CreateBlob
struct _ast8102; // ParmVar function_code_handling
struct _ast8103; // FunctionProto v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
struct _ast8104; // CXXConstructor SnapshotCreator
struct _ast8105; // ParmVar 
struct _ast8106; // LValueReference const v8::SnapshotCreator &
struct _ast8107; // Record const v8::SnapshotCreator
struct _ast8108; // FunctionProto void (const v8::SnapshotCreator &)
struct _ast8109; // CXXMethod operator=
struct _ast8110; // ParmVar 
struct _ast8111; // TemplateTypeParm T
struct _ast8112; // TemplateTypeParm T
struct _ast8113; // CXXRecord Maybe
struct _ast8114; // CXXMethod IsNothing
struct _ast8115; // Pointer const Maybe<T> *
struct _ast8116; // InjectedClassName const Maybe<T>
struct _ast8117; // CXXMethod IsJust
struct _ast8118; // CXXMethod ToChecked
struct _ast8119; // FunctionProto T () const
struct _ast8120; // CXXMethod Check
struct _ast8121; // CXXMethod To
struct _ast8122; // ParmVar out
struct _ast8123; // Pointer T *
struct _ast8124; // FunctionProto bool (T *) const
struct _ast8125; // CXXMethod FromJust
struct _ast8126; // CXXMethod FromMaybe
struct _ast8127; // ParmVar default_value
struct _ast8128; // LValueReference const T &
struct _ast8129; // TemplateTypeParm const T
struct _ast8130; // FunctionProto T (const T &) const
struct _ast8131; // CXXMethod operator==
struct _ast8132; // ParmVar other
struct _ast8133; // LValueReference const Maybe<T> &
struct _ast8134; // FunctionProto bool (const Maybe<T> &) const
struct _ast8135; // CXXMethod operator!=
struct _ast8136; // ParmVar other
struct _ast8137; // FunctionTemplate Nothing
struct _ast8138; // TemplateTypeParm T
struct _ast8139; // TemplateTypeParm T
struct _ast8140; // Function Nothing
struct _ast8141; // FunctionProto Maybe<T> ()
struct _ast8142; // TemplateSpecialization Maybe<T>
struct _ast8143; // FunctionTemplate Just
struct _ast8144; // TemplateTypeParm T
struct _ast8145; // TemplateTypeParm T
struct _ast8146; // Function Just
struct _ast8147; // ParmVar t
struct _ast8148; // LValueReference const T &
struct _ast8149; // TemplateTypeParm const T
struct _ast8150; // FunctionProto Maybe<T> (const T &)
struct _ast8151; // TemplateSpecialization Maybe<T>
struct _ast8152; // ClassTemplateSpecialization Maybe
struct _ast8153; // Record v8::Maybe<void>
struct _ast8154; // CXXRecord Maybe
struct _ast8155; // CXXMethod IsNothing
struct _ast8156; // Pointer const v8::Maybe<void> *
struct _ast8157; // Record const v8::Maybe<void>
struct _ast8158; // CXXMethod IsJust
struct _ast8159; // CXXMethod operator==
struct _ast8160; // ParmVar other
struct _ast8161; // LValueReference const v8::Maybe<void> &
struct _ast8162; // FunctionProto bool (const v8::Maybe<void> &) const
struct _ast8163; // CXXMethod operator!=
struct _ast8164; // ParmVar other
struct _ast8165; // CXXConstructor Maybe
struct _ast8166; // ParmVar 
struct _ast8167; // FunctionProto void (const v8::Maybe<void> &)
struct _ast8168; // Pointer v8::Maybe<void> *
struct _ast8169; // CXXConstructor Maybe
struct _ast8170; // ParmVar 
struct _ast8171; // RValueReference v8::Maybe<void> &&
struct _ast8172; // FunctionProto void (v8::Maybe<void> &&) noexcept
struct _ast8173; // CXXDestructor ~Maybe
struct _ast8174; // Function JustVoid
struct _ast8175; // FunctionProto Maybe<void> ()
struct _ast8176; // TemplateSpecialization Maybe<void>
struct _ast8177; // CXXRecord TryCatch
struct _ast8178; // Record v8::TryCatch
struct _ast8179; // CXXRecord TryCatch
struct _ast8180; // CXXConstructor TryCatch
struct _ast8181; // ParmVar isolate
struct _ast8182; // Pointer v8::TryCatch *
struct _ast8183; // CXXDestructor ~TryCatch
struct _ast8184; // FunctionProto void ()
struct _ast8185; // CXXMethod HasCaught
struct _ast8186; // Pointer const v8::TryCatch *
struct _ast8187; // Record const v8::TryCatch
struct _ast8188; // CXXMethod CanContinue
struct _ast8189; // CXXMethod HasTerminated
struct _ast8190; // CXXMethod ReThrow
struct _ast8191; // FunctionProto Local<v8::Value> ()
struct _ast8192; // TemplateSpecialization Local<v8::Value>
struct _ast8193; // CXXMethod Exception
struct _ast8194; // FunctionProto Local<v8::Value> () const
struct _ast8195; // TemplateSpecialization Local<v8::Value>
struct _ast8196; // CXXMethod StackTrace
struct _ast8197; // ParmVar context
struct _ast8198; // TemplateSpecialization Local<v8::Context>
struct _ast8199; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _ast8200; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast8201; // CXXMethod Message
struct _ast8202; // FunctionProto Local<v8::Message> () const
struct _ast8203; // TemplateSpecialization Local<v8::Message>
struct _ast8204; // CXXMethod Reset
struct _ast8205; // CXXMethod SetVerbose
struct _ast8206; // ParmVar value
struct _ast8207; // CXXMethod IsVerbose
struct _ast8208; // CXXMethod SetCaptureMessage
struct _ast8209; // ParmVar value
struct _ast8210; // CXXMethod JSStackComparableAddress
struct _ast8211; // ParmVar handler
struct _ast8212; // FunctionProto void *(v8::TryCatch *)
struct _ast8213; // CXXConstructor TryCatch
struct _ast8214; // ParmVar 
struct _ast8215; // LValueReference const v8::TryCatch &
struct _ast8216; // FunctionProto void (const v8::TryCatch &)
struct _ast8217; // CXXMethod operator=
struct _ast8218; // ParmVar 
struct _ast8219; // CXXRecord ExtensionConfiguration
struct _ast8220; // Record v8::ExtensionConfiguration
struct _ast8221; // CXXRecord ExtensionConfiguration
struct _ast8222; // CXXConstructor ExtensionConfiguration
struct _ast8223; // Pointer v8::ExtensionConfiguration *
struct _ast8224; // CXXConstructor ExtensionConfiguration
struct _ast8225; // ParmVar name_count
struct _ast8226; // ParmVar names
struct _ast8227; // Decayed const char **
struct _ast8228; // FunctionProto void (int, const char **)
struct _ast8229; // CXXMethod begin
struct _ast8230; // Pointer const v8::ExtensionConfiguration *
struct _ast8231; // Record const v8::ExtensionConfiguration
struct _ast8232; // CXXMethod end
struct _ast8233; // CXXRecord Context
struct _ast8234; // CXXMethod Global
struct _ast8235; // FunctionProto Local<v8::Object> ()
struct _ast8236; // TemplateSpecialization Local<v8::Object>
struct _ast8237; // Pointer v8::Context *
struct _ast8238; // CXXMethod DetachGlobal
struct _ast8239; // CXXMethod New
struct _ast8240; // ParmVar isolate
struct _ast8241; // ParmVar extensions
struct _ast8242; // ParmVar global_template
struct _ast8243; // TemplateSpecialization MaybeLocal<v8::ObjectTemplate>
struct _ast8244; // ParmVar global_object
struct _ast8245; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast8246; // ParmVar internal_fields_deserializer
struct _ast8247; // ParmVar microtask_queue
struct _ast8248; // FunctionProto Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _ast8249; // TemplateSpecialization Local<v8::Context>
struct _ast8250; // CXXMethod FromSnapshot
struct _ast8251; // ParmVar isolate
struct _ast8252; // ParmVar context_snapshot_index
struct _ast8253; // ParmVar embedder_fields_deserializer
struct _ast8254; // ParmVar extensions
struct _ast8255; // ParmVar global_object
struct _ast8256; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast8257; // ParmVar microtask_queue
struct _ast8258; // FunctionProto MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _ast8259; // TemplateSpecialization MaybeLocal<v8::Context>
struct _ast8260; // CXXMethod NewRemoteContext
struct _ast8261; // ParmVar isolate
struct _ast8262; // ParmVar global_template
struct _ast8263; // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ast8264; // ParmVar global_object
struct _ast8265; // TemplateSpecialization MaybeLocal<v8::Value>
struct _ast8266; // FunctionProto MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ast8267; // TemplateSpecialization MaybeLocal<v8::Object>
struct _ast8268; // CXXMethod SetSecurityToken
struct _ast8269; // ParmVar token
struct _ast8270; // TemplateSpecialization Local<v8::Value>
struct _ast8271; // FunctionProto void (Local<v8::Value>)
struct _ast8272; // CXXMethod UseDefaultSecurityToken
struct _ast8273; // CXXMethod GetSecurityToken
struct _ast8274; // FunctionProto Local<v8::Value> ()
struct _ast8275; // TemplateSpecialization Local<v8::Value>
struct _ast8276; // CXXMethod Enter
struct _ast8277; // CXXMethod Exit
struct _ast8278; // CXXMethod GetIsolate
struct _ast8279; // Enum EmbedderDataFields
struct _ast8280; // Enum v8::Context::EmbedderDataFields
struct _ast8281; // EnumConstant kDebugIdIndex
struct _ast8282; // CXXMethod GetNumberOfEmbedderDataFields
struct _ast8283; // CXXMethod GetEmbedderData
struct _ast8284; // ParmVar index
struct _ast8285; // FunctionProto Local<v8::Value> (int)
struct _ast8286; // TemplateSpecialization Local<v8::Value>
struct _ast8287; // CXXMethod GetExtrasBindingObject
struct _ast8288; // FunctionProto Local<v8::Object> ()
struct _ast8289; // TemplateSpecialization Local<v8::Object>
struct _ast8290; // CXXMethod SetEmbedderData
struct _ast8291; // ParmVar index
struct _ast8292; // ParmVar value
struct _ast8293; // TemplateSpecialization Local<v8::Value>
struct _ast8294; // FunctionProto void (int, Local<v8::Value>)
struct _ast8295; // CXXMethod GetAlignedPointerFromEmbedderData
struct _ast8296; // ParmVar index
struct _ast8297; // CXXMethod SetAlignedPointerInEmbedderData
struct _ast8298; // ParmVar index
struct _ast8299; // ParmVar value
struct _ast8300; // CXXMethod AllowCodeGenerationFromStrings
struct _ast8301; // ParmVar allow
struct _ast8302; // CXXMethod IsCodeGenerationFromStringsAllowed
struct _ast8303; // CXXMethod SetErrorMessageForCodeGenerationFromStrings
struct _ast8304; // ParmVar message
struct _ast8305; // TemplateSpecialization Local<v8::String>
struct _ast8306; // FunctionProto void (Local<v8::String>)
struct _ast8307; // FunctionTemplate GetDataFromSnapshotOnce
struct _ast8308; // TemplateTypeParm T
struct _ast8309; // TemplateTypeParm T
struct _ast8310; // CXXMethod GetDataFromSnapshotOnce
struct _ast8311; // ParmVar index
struct _ast8312; // FunctionProto MaybeLocal<T> (size_t)
struct _ast8313; // TemplateSpecialization MaybeLocal<T>
struct _ast8314; // Typedef AbortScriptExecutionCallback
struct _ast8315; // Typedef v8::Context::AbortScriptExecutionCallback
struct _ast8316; // CXXMethod SetAbortScriptExecution
struct _ast8317; // ParmVar callback
struct _ast8318; // FunctionProto void (v8::Context::AbortScriptExecutionCallback)
struct _ast8319; // CXXRecord Scope
struct _ast8320; // Record v8::Context::Scope
struct _ast8321; // CXXRecord Scope
struct _ast8322; // CXXConstructor Scope
struct _ast8323; // ParmVar context
struct _ast8324; // TemplateSpecialization Local<v8::Context>
struct _ast8325; // FunctionProto void (Local<v8::Context>)
struct _ast8326; // Pointer v8::Context::Scope *
struct _ast8327; // CXXDestructor ~Scope
struct _ast8328; // CXXRecord BackupIncumbentScope
struct _ast8329; // Record v8::Context::BackupIncumbentScope
struct _ast8330; // CXXRecord BackupIncumbentScope
struct _ast8331; // CXXConstructor BackupIncumbentScope
struct _ast8332; // ParmVar backup_incumbent_context
struct _ast8333; // TemplateSpecialization Local<v8::Context>
struct _ast8334; // FunctionProto void (Local<v8::Context>)
struct _ast8335; // Pointer v8::Context::BackupIncumbentScope *
struct _ast8336; // CXXDestructor ~BackupIncumbentScope
struct _ast8337; // FunctionProto void ()
struct _ast8338; // CXXMethod JSStackComparableAddress
struct _ast8339; // FunctionProto uintptr_t () const
struct _ast8340; // Pointer const v8::Context::BackupIncumbentScope *
struct _ast8341; // Record const v8::Context::BackupIncumbentScope
struct _ast8342; // CXXRecord Unlocker
struct _ast8343; // Record v8::Unlocker
struct _ast8344; // CXXRecord Unlocker
struct _ast8345; // CXXConstructor Unlocker
struct _ast8346; // ParmVar isolate
struct _ast8347; // Pointer v8::Unlocker *
struct _ast8348; // CXXDestructor ~Unlocker
struct _ast8349; // FunctionProto void ()
struct _ast8350; // CXXRecord Locker
struct _ast8351; // Record v8::Locker
struct _ast8352; // CXXRecord Locker
struct _ast8353; // CXXConstructor Locker
struct _ast8354; // ParmVar isolate
struct _ast8355; // Pointer v8::Locker *
struct _ast8356; // CXXDestructor ~Locker
struct _ast8357; // FunctionProto void ()
struct _ast8358; // CXXMethod IsLocked
struct _ast8359; // ParmVar isolate
struct _ast8360; // CXXMethod IsActive
struct _ast8361; // CXXConstructor Locker
struct _ast8362; // ParmVar 
struct _ast8363; // LValueReference const v8::Locker &
struct _ast8364; // Record const v8::Locker
struct _ast8365; // FunctionProto void (const v8::Locker &)
struct _ast8366; // CXXMethod operator=
struct _ast8367; // ParmVar 
struct _ast8368; // CXXRecord Unwinder
struct _ast8369; // Record v8::Unwinder
struct _ast8370; // CXXRecord Unwinder
struct _ast8371; // CXXMethod TryUnwindV8Frames
struct _ast8372; // ParmVar unwind_state
struct _ast8373; // LValueReference const v8::UnwindState &
struct _ast8374; // Record const v8::UnwindState
struct _ast8375; // ParmVar register_state
struct _ast8376; // ParmVar stack_base
struct _ast8377; // FunctionProto bool (const v8::UnwindState &, v8::RegisterState *, const void *)
struct _ast8378; // CXXMethod PCIsInV8
struct _ast8379; // ParmVar unwind_state
struct _ast8380; // ParmVar pc
struct _ast8381; // FunctionProto bool (const v8::UnwindState &, void *)
struct _ast8382; // ParmVar isolate
struct _ast8383; // ParmVar that
struct _ast8384; // TemplateSpecialization Local<T>
struct _ast8385; // ParmVar isolate
struct _ast8386; // ParmVar that
struct _ast8387; // LValueReference const PersistentBase<T> &
struct _ast8388; // TemplateSpecialization const PersistentBase<T>
struct _ast8389; // TemplateSpecialization PersistentBase<T>
struct _ast8390; // ParmVar isolate
struct _ast8391; // ParmVar that
struct _ast8392; // LValueReference const TracedGlobal<T> &
struct _ast8393; // TemplateSpecialization const TracedGlobal<T>
struct _ast8394; // TemplateSpecialization TracedGlobal<T>
struct _ast8395; // TemplateTypeParm S
struct _ast8396; // TemplateTypeParm S
struct _ast8397; // ParmVar isolate
struct _ast8398; // ParmVar handle
struct _ast8399; // TemplateSpecialization Local<S>
struct _ast8400; // ParmVar isolate
struct _ast8401; // ParmVar index
struct _ast8402; // TemplateTypeParm S
struct _ast8403; // TemplateTypeParm S
struct _ast8404; // ParmVar isolate
struct _ast8405; // ParmVar other
struct _ast8406; // LValueReference const Local<S> &
struct _ast8407; // TemplateSpecialization const Local<S>
struct _ast8408; // TemplateSpecialization Local<S>
struct _ast8409; // TemplateTypeParm S
struct _ast8410; // TemplateTypeParm S
struct _ast8411; // ParmVar isolate
struct _ast8412; // ParmVar other
struct _ast8413; // LValueReference const PersistentBase<S> &
struct _ast8414; // TemplateSpecialization const PersistentBase<S>
struct _ast8415; // TemplateSpecialization PersistentBase<S>
struct _ast8416; // TemplateTypeParm P
struct _ast8417; // TemplateTypeParm P
struct _ast8418; // ParmVar parameter
struct _ast8419; // Pointer P *
struct _ast8420; // ParmVar callback
struct _ast8421; // DependentName typename WeakCallbackInfo<P>::Callback
struct _ast8422; // ParmVar type
struct _ast8423; // TemplateTypeParm P
struct _ast8424; // TemplateTypeParm P
struct _ast8425; // ParmVar label
struct _ast8426; // ParmVar class_id
struct _ast8427; // ParmVar other
struct _ast8428; // TemplateTypeParm S
struct _ast8429; // TemplateTypeParm S
struct _ast8430; // ParmVar rhs
struct _ast8431; // RValueReference Global<S> &&
struct _ast8432; // TemplateSpecialization Global<S>
struct _ast8433; // TemplateTypeParm S
struct _ast8434; // TemplateTypeParm S
struct _ast8435; // ParmVar isolate
struct _ast8436; // ParmVar other
struct _ast8437; // LValueReference const Local<S> &
struct _ast8438; // TemplateSpecialization const Local<S>
struct _ast8439; // TemplateSpecialization Local<S>
struct _ast8440; // ParmVar other
struct _ast8441; // TemplateTypeParm S
struct _ast8442; // TemplateTypeParm S
struct _ast8443; // ParmVar rhs
struct _ast8444; // RValueReference TracedGlobal<S> &&
struct _ast8445; // TemplateSpecialization TracedGlobal<S>
struct _ast8446; // ParmVar class_id
struct _ast8447; // ParmVar parameter
struct _ast8448; // ParmVar callback
struct _ast8449; // Elaborated typename WeakCallbackInfo<void>::Callback
struct _ast8450; // TemplateTypeParm S
struct _ast8451; // TemplateTypeParm S
struct _ast8452; // ParmVar handle
struct _ast8453; // LValueReference const Global<S> &
struct _ast8454; // TemplateSpecialization const Global<S>
struct _ast8455; // TemplateSpecialization Global<S>
struct _ast8456; // TemplateTypeParm S
struct _ast8457; // TemplateTypeParm S
struct _ast8458; // ParmVar handle
struct _ast8459; // LValueReference const TracedGlobal<S> &
struct _ast8460; // TemplateSpecialization const TracedGlobal<S>
struct _ast8461; // TemplateSpecialization TracedGlobal<S>
struct _ast8462; // TemplateTypeParm S
struct _ast8463; // TemplateTypeParm S
struct _ast8464; // ParmVar handle
struct _ast8465; // TemplateSpecialization const Local<S>
struct _ast8466; // TemplateSpecialization Local<S>
struct _ast8467; // ParmVar i
struct _ast8468; // ParmVar i
struct _ast8469; // ParmVar i
struct _ast8470; // ParmVar value
struct _ast8471; // TemplateTypeParm S
struct _ast8472; // TemplateTypeParm S
struct _ast8473; // ParmVar whatever
struct _ast8474; // Pointer S *
struct _ast8475; // ParmVar implicit_args
struct _ast8476; // ParmVar values
struct _ast8477; // ParmVar length
struct _ast8478; // ParmVar i
struct _ast8479; // ParmVar resource_name
struct _ast8480; // TemplateSpecialization Local<v8::Value>
struct _ast8481; // ParmVar resource_line_offset
struct _ast8482; // TemplateSpecialization Local<v8::Integer>
struct _ast8483; // ParmVar resource_column_offset
struct _ast8484; // TemplateSpecialization Local<v8::Integer>
struct _ast8485; // ParmVar resource_is_shared_cross_origin
struct _ast8486; // TemplateSpecialization Local<v8::Boolean>
struct _ast8487; // ParmVar script_id
struct _ast8488; // TemplateSpecialization Local<v8::Integer>
struct _ast8489; // ParmVar source_map_url
struct _ast8490; // TemplateSpecialization Local<v8::Value>
struct _ast8491; // ParmVar resource_is_opaque
struct _ast8492; // TemplateSpecialization Local<v8::Boolean>
struct _ast8493; // ParmVar is_wasm
struct _ast8494; // TemplateSpecialization Local<v8::Boolean>
struct _ast8495; // ParmVar is_module
struct _ast8496; // TemplateSpecialization Local<v8::Boolean>
struct _ast8497; // ParmVar host_defined_options
struct _ast8498; // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ast8499; // ParmVar string
struct _ast8500; // TemplateSpecialization Local<v8::String>
struct _ast8501; // ParmVar origin
struct _ast8502; // ParmVar data
struct _ast8503; // ParmVar string
struct _ast8504; // TemplateSpecialization Local<v8::String>
struct _ast8505; // ParmVar data
struct _ast8506; // ParmVar isolate
struct _ast8507; // ParmVar value
struct _ast8508; // ParmVar isolate
struct _ast8509; // ParmVar name
struct _ast8510; // ParmVar value
struct _ast8511; // TemplateSpecialization Local<v8::Data>
struct _ast8512; // ParmVar data
struct _ast8513; // ParmVar data
struct _ast8514; // ParmVar data
struct _ast8515; // ParmVar data
struct _ast8516; // ParmVar index
struct _ast8517; // ParmVar index
struct _ast8518; // ParmVar value
struct _ast8519; // ParmVar isolate
struct _ast8520; // ParmVar encoding_out
struct _ast8521; // Pointer String::Encoding *
struct _ast8522; // Elaborated String::Encoding
struct _ast8523; // TemplateTypeParm T
struct _ast8524; // TemplateTypeParm T
struct _ast8525; // ParmVar value
struct _ast8526; // Pointer T *
struct _ast8527; // ParmVar value
struct _ast8528; // ParmVar value
struct _ast8529; // ParmVar value
struct _ast8530; // ParmVar data
struct _ast8531; // ParmVar value
struct _ast8532; // ParmVar value
struct _ast8533; // ParmVar value
struct _ast8534; // ParmVar value
struct _ast8535; // ParmVar value
struct _ast8536; // ParmVar value
struct _ast8537; // ParmVar value
struct _ast8538; // ParmVar value
struct _ast8539; // ParmVar value
struct _ast8540; // ParmVar value
struct _ast8541; // ParmVar value
struct _ast8542; // ParmVar value
struct _ast8543; // ParmVar value
struct _ast8544; // ParmVar value
struct _ast8545; // ParmVar value
struct _ast8546; // ParmVar value
struct _ast8547; // ParmVar value
struct _ast8548; // ParmVar value
struct _ast8549; // ParmVar value
struct _ast8550; // ParmVar value
struct _ast8551; // ParmVar value
struct _ast8552; // ParmVar value
struct _ast8553; // ParmVar value
struct _ast8554; // ParmVar value
struct _ast8555; // ParmVar value
struct _ast8556; // ParmVar value
struct _ast8557; // ParmVar value
struct _ast8558; // ParmVar value
struct _ast8559; // ParmVar value
struct _ast8560; // ParmVar value
struct _ast8561; // ParmVar value
struct _ast8562; // ParmVar value
struct _ast8563; // ParmVar value
struct _ast8564; // ParmVar value
struct _ast8565; // ParmVar value
struct _ast8566; // ParmVar value
struct _ast8567; // ParmVar value
struct _ast8568; // ParmVar value
struct _ast8569; // ParmVar isolate
struct _ast8570; // ParmVar isolate
struct _ast8571; // ParmVar isolate
struct _ast8572; // ParmVar isolate
struct _ast8573; // ParmVar slot
struct _ast8574; // ParmVar data
struct _ast8575; // ParmVar slot
struct _ast8576; // TemplateTypeParm T
struct _ast8577; // TemplateTypeParm T
struct _ast8578; // ParmVar index
struct _ast8579; // ParmVar change_in_bytes
struct _ast8580; // ParmVar index
struct _ast8581; // ParmVar index
struct _ast8582; // TemplateTypeParm T
struct _ast8583; // TemplateTypeParm T
struct _ast8584; // ParmVar index
struct _ast8585; // TemplateTypeParm T
struct _ast8586; // TemplateTypeParm T
struct _ast8587; // ParmVar context
struct _ast8588; // TemplateSpecialization Local<v8::Context>
struct _ast8589; // ParmVar object
struct _ast8590; // TemplateSpecialization Local<T>
struct _ast8591; // TemplateTypeParm T
struct _ast8592; // TemplateTypeParm T
struct _ast8593; // ParmVar object
struct _ast8594; // TemplateSpecialization Local<T>
struct _ast1: NamedDeclName<_str1> {}; // Namespace v8
struct _ast2: NamedDeclName<_str2>, TypeDecl<_ast3> {}; // CXXRecord Context
struct _ast3: StructOrClassRecordType<RecordType<_ast2>> {}; // Record v8::Context
struct _ast4: NamedDeclName<_str3>, TypeDecl<_ast5> {}; // CXXRecord Data
struct _ast5: StructOrClassRecordType<RecordType<_ast4>> {}; // Record v8::Data
struct _ast6: NamedDeclName<_str4>, TypeDecl<_ast7> {}; // CXXRecord Isolate
struct _ast7: StructOrClassRecordType<RecordType<_ast6>> {}; // Record v8::Isolate
struct _ast8: NamedDeclName<_str5>, TypeDecl<_ast9> {}; // CXXRecord AccessorSignature
struct _ast9: StructOrClassRecordType<RecordType<_ast8>> {}; // Record v8::AccessorSignature
struct _ast10: NamedDeclName<_str6>, TypeDecl<_ast11> {}; // CXXRecord Array
struct _ast11: StructOrClassRecordType<RecordType<_ast10>> {}; // Record v8::Array
struct _ast12: NamedDeclName<_str7>, TypeDecl<_ast13> {}; // CXXRecord ArrayBuffer
struct _ast13: StructOrClassRecordType<RecordType<_ast12>> {}; // Record v8::ArrayBuffer
struct _ast14: NamedDeclName<_str8>, TypeDecl<_ast15> {}; // CXXRecord BigInt
struct _ast15: StructOrClassRecordType<RecordType<_ast14>> {}; // Record v8::BigInt
struct _ast16: NamedDeclName<_str9>, TypeDecl<_ast17> {}; // CXXRecord BigIntObject
struct _ast17: StructOrClassRecordType<RecordType<_ast16>> {}; // Record v8::BigIntObject
struct _ast18: NamedDeclName<_str10>, TypeDecl<_ast19> {}; // CXXRecord Boolean
struct _ast19: StructOrClassRecordType<RecordType<_ast18>> {}; // Record v8::Boolean
struct _ast20: NamedDeclName<_str11>, TypeDecl<_ast21> {}; // CXXRecord BooleanObject
struct _ast21: StructOrClassRecordType<RecordType<_ast20>> {}; // Record v8::BooleanObject
struct _ast22: NamedDeclName<_str12>, TypeDecl<_ast23> {}; // CXXRecord Date
struct _ast23: StructOrClassRecordType<RecordType<_ast22>> {}; // Record v8::Date
struct _ast24: NamedDeclName<_str13>, TypeDecl<_ast25> {}; // CXXRecord External
struct _ast25: StructOrClassRecordType<RecordType<_ast24>> {}; // Record v8::External
struct _ast26: NamedDeclName<_str14>, TypeDecl<_ast27> {}; // CXXRecord Function
struct _ast27: StructOrClassRecordType<RecordType<_ast26>> {}; // Record v8::Function
struct _ast28: NamedDeclName<_str15>, TypeDecl<_ast29> {}; // CXXRecord FunctionTemplate
struct _ast29: StructOrClassRecordType<RecordType<_ast28>> {}; // Record v8::FunctionTemplate
struct _ast30: NamedDeclName<_str16>, TypeDecl<_ast31> {}; // CXXRecord HeapProfiler
struct _ast31: StructOrClassRecordType<RecordType<_ast30>> {}; // Record v8::HeapProfiler
struct _ast32: NamedDeclName<_str17>, TypeDecl<_ast33> {}; // CXXRecord ImplementationUtilities
struct _ast33: StructOrClassRecordType<RecordType<_ast32>> {}; // Record v8::ImplementationUtilities
struct _ast34: NamedDeclName<_str18>, TypeDecl<_ast35> {}; // CXXRecord Int32
struct _ast35: StructOrClassRecordType<RecordType<_ast34>> {}; // Record v8::Int32
struct _ast36: NamedDeclName<_str19>, TypeDecl<_ast37> {}; // CXXRecord Integer
struct _ast37: StructOrClassRecordType<RecordType<_ast36>> {}; // Record v8::Integer
struct _ast38: NamedDeclName<_str20> {}; // ClassTemplate Maybe
struct _ast39: NamedDeclName<_str21>, TypeDecl<_ast40> {}; // TemplateTypeParm T
struct _ast41: NamedDeclName<_str20>, TypeDecl<_ast42> {}; // CXXRecord Maybe
struct _ast43: NamedDeclName<_str20>, TypeDecl<_ast44> {}; // ClassTemplateSpecialization Maybe
struct _ast44: StructOrClassRecordType<RecordType<_ast43>> {}; // Record v8::Maybe<bool>
struct _ast45: NamedDeclName<_str20>, TypeDecl<_ast46> {}; // ClassTemplateSpecialization Maybe
struct _ast46: StructOrClassRecordType<RecordType<_ast45>> {}; // Record v8::Maybe<int>
struct _ast47: NamedDeclName<_str20>, TypeDecl<_ast48> {}; // ClassTemplateSpecialization Maybe
struct _ast48: StructOrClassRecordType<RecordType<_ast47>> {}; // Record v8::Maybe<unsigned int>
struct _ast49: NamedDeclName<_str20>, TypeDecl<_ast50> {}; // ClassTemplateSpecialization Maybe
struct _ast50: StructOrClassRecordType<RecordType<_ast49>> {}; // Record v8::Maybe<double>
struct _ast51: NamedDeclName<_str20>, TypeDecl<_ast52> {}; // ClassTemplateSpecialization Maybe
struct _ast52: StructOrClassRecordType<RecordType<_ast51>> {}; // Record v8::Maybe<long long>
struct _ast53: NamedDeclName<_str20>, TypeDecl<_ast54> {}; // ClassTemplateSpecialization Maybe
struct _ast54: StructOrClassRecordType<RecordType<_ast53>> {}; // Record v8::Maybe<v8::PropertyAttribute>
struct _ast55: NamedDeclName<_str22>, TypeDecl<_ast56> {}; // CXXRecord MicrotaskQueue
struct _ast56: StructOrClassRecordType<RecordType<_ast55>> {}; // Record v8::MicrotaskQueue
struct _ast57: NamedDeclName<_str23>, TypeDecl<_ast58> {}; // CXXRecord Name
struct _ast58: StructOrClassRecordType<RecordType<_ast57>> {}; // Record v8::Name
struct _ast59: NamedDeclName<_str24>, TypeDecl<_ast60> {}; // CXXRecord Number
struct _ast60: StructOrClassRecordType<RecordType<_ast59>> {}; // Record v8::Number
struct _ast61: NamedDeclName<_str25>, TypeDecl<_ast62> {}; // CXXRecord NumberObject
struct _ast62: StructOrClassRecordType<RecordType<_ast61>> {}; // Record v8::NumberObject
struct _ast63: NamedDeclName<_str26>, TypeDecl<_ast64> {}; // CXXRecord Object
struct _ast64: StructOrClassRecordType<RecordType<_ast63>> {}; // Record v8::Object
struct _ast65: NamedDeclName<_str27>, TypeDecl<_ast66> {}; // CXXRecord ObjectOperationDescriptor
struct _ast66: StructOrClassRecordType<RecordType<_ast65>> {}; // Record v8::ObjectOperationDescriptor
struct _ast67: NamedDeclName<_str28>, TypeDecl<_ast68> {}; // CXXRecord ObjectTemplate
struct _ast68: StructOrClassRecordType<RecordType<_ast67>> {}; // Record v8::ObjectTemplate
struct _ast69: NamedDeclName<_str29>, TypeDecl<_ast70> {}; // CXXRecord Platform
struct _ast70: StructOrClassRecordType<RecordType<_ast69>> {}; // Record v8::Platform
struct _ast71: NamedDeclName<_str30>, TypeDecl<_ast72> {}; // CXXRecord Primitive
struct _ast72: StructOrClassRecordType<RecordType<_ast71>> {}; // Record v8::Primitive
struct _ast73: NamedDeclName<_str31>, TypeDecl<_ast74> {}; // CXXRecord Promise
struct _ast74: StructOrClassRecordType<RecordType<_ast73>> {}; // Record v8::Promise
struct _ast75: NamedDeclName<_str32>, TypeDecl<_ast76> {}; // CXXRecord PropertyDescriptor
struct _ast76: StructOrClassRecordType<RecordType<_ast75>> {}; // Record v8::PropertyDescriptor
struct _ast77: NamedDeclName<_str33>, TypeDecl<_ast78> {}; // CXXRecord Proxy
struct _ast78: StructOrClassRecordType<RecordType<_ast77>> {}; // Record v8::Proxy
struct _ast79: NamedDeclName<_str34>, TypeDecl<_ast80> {}; // CXXRecord RawOperationDescriptor
struct _ast80: StructOrClassRecordType<RecordType<_ast79>> {}; // Record v8::RawOperationDescriptor
struct _ast81: NamedDeclName<_str35>, TypeDecl<_ast82> {}; // CXXRecord Script
struct _ast82: StructOrClassRecordType<RecordType<_ast81>> {}; // Record v8::Script
struct _ast83: NamedDeclName<_str36>, TypeDecl<_ast84> {}; // CXXRecord SharedArrayBuffer
struct _ast84: StructOrClassRecordType<RecordType<_ast83>> {}; // Record v8::SharedArrayBuffer
struct _ast85: NamedDeclName<_str37>, TypeDecl<_ast86> {}; // CXXRecord Signature
struct _ast86: StructOrClassRecordType<RecordType<_ast85>> {}; // Record v8::Signature
struct _ast87: NamedDeclName<_str38>, TypeDecl<_ast88> {}; // CXXRecord StartupData
struct _ast88: StructOrClassRecordType<RecordType<_ast87>> {}; // Record v8::StartupData
struct _ast89: NamedDeclName<_str39>, TypeDecl<_ast90> {}; // CXXRecord StackFrame
struct _ast90: StructOrClassRecordType<RecordType<_ast89>> {}; // Record v8::StackFrame
struct _ast91: NamedDeclName<_str40>, TypeDecl<_ast92> {}; // CXXRecord StackTrace
struct _ast92: StructOrClassRecordType<RecordType<_ast91>> {}; // Record v8::StackTrace
struct _ast93: NamedDeclName<_str41>, TypeDecl<_ast94> {}; // CXXRecord String
struct _ast94: StructOrClassRecordType<RecordType<_ast93>> {}; // Record v8::String
struct _ast95: NamedDeclName<_str42>, TypeDecl<_ast96> {}; // CXXRecord StringObject
struct _ast96: StructOrClassRecordType<RecordType<_ast95>> {}; // Record v8::StringObject
struct _ast97: NamedDeclName<_str43>, TypeDecl<_ast98> {}; // CXXRecord Symbol
struct _ast98: StructOrClassRecordType<RecordType<_ast97>> {}; // Record v8::Symbol
struct _ast99: NamedDeclName<_str44>, TypeDecl<_ast100> {}; // CXXRecord SymbolObject
struct _ast100: StructOrClassRecordType<RecordType<_ast99>> {}; // Record v8::SymbolObject
struct _ast101: NamedDeclName<_str45>, TypeDecl<_ast102> {}; // CXXRecord PrimitiveArray
struct _ast102: StructOrClassRecordType<RecordType<_ast101>> {}; // Record v8::PrimitiveArray
struct _ast103: NamedDeclName<_str46>, TypeDecl<_ast104> {}; // CXXRecord Private
struct _ast104: StructOrClassRecordType<RecordType<_ast103>> {}; // Record v8::Private
struct _ast105: NamedDeclName<_str47>, TypeDecl<_ast106> {}; // CXXRecord Uint32
struct _ast106: StructOrClassRecordType<RecordType<_ast105>> {}; // Record v8::Uint32
struct _ast107: NamedDeclName<_str48>, TypeDecl<_ast108> {}; // CXXRecord Utils
struct _ast108: StructOrClassRecordType<RecordType<_ast107>> {}; // Record v8::Utils
struct _ast109: NamedDeclName<_str49>, TypeDecl<_ast110> {}; // CXXRecord Value
struct _ast110: StructOrClassRecordType<RecordType<_ast109>> {}; // Record v8::Value
struct _ast111: NamedDeclName<_str50>, TypeDecl<_ast112> {}; // CXXRecord WasmModuleObject
struct _ast112: StructOrClassRecordType<RecordType<_ast111>> {}; // Record v8::WasmModuleObject
struct _ast113: NamedDeclName<_str51> {}; // ClassTemplate Local
struct _ast114: NamedDeclName<_str21>, TypeDecl<_ast115> {}; // TemplateTypeParm T
struct _ast116: NamedDeclName<_str51>, TypeDecl<_ast117> {}; // CXXRecord Local
struct _ast118: NamedDeclName<_str51>, TypeDecl<_ast119> {}; // ClassTemplateSpecialization Local
struct _ast119: StructOrClassRecordType<RecordType<_ast118>> {}; // Record v8::Local<v8::Primitive>
struct _ast120: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast123>> {}; // CXXConstructor Local
struct _ast121: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast122: VoidType {}; // Builtin void
struct _ast123: PointerType<_ast119> {}; // Pointer v8::Local<v8::Primitive> *
struct _ast124: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast125: NamedDeclName<_str52>, TypeDecl<_ast126> {}; // TemplateTypeParm S
struct _ast127: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast130, Pack<_ast128>>>, _ast123>> {}; // CXXConstructor Local
struct _ast128: NamedDeclName<_str53>, ParmVarDecl<_ast129> {}; // ParmVar that
struct _ast130: FunctionProtoType<_ast122, Pack<_ast129>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast131: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast134, Pack<_ast132>>>, _ast123>> {}; // CXXConstructor Local
struct _ast132: NamedDeclName<_str53>, ParmVarDecl<_ast133> {}; // ParmVar that
struct _ast134: FunctionProtoType<_ast122, Pack<_ast133>, SameType> {}; // FunctionProto void (Local<v8::Primitive>)
struct _ast135: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast138>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast136: FunctionProtoType<_ast137, Pack<>, ConstQualifiedType> {}; // FunctionProto bool () const
struct _ast137: BoolType {}; // Builtin bool
struct _ast138: PointerType<_ast139> {}; // Pointer const v8::Local<v8::Primitive> *
struct _ast139: ConstQualifiedType<_ast119> {}; // Record const v8::Local<v8::Primitive>
struct _ast140: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast123>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast141: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast142, Pack<>>>, _ast138>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast142: FunctionProtoType<_ast143, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Primitive *() const
struct _ast143: PointerType<_ast144> {}; // Pointer v8::Primitive *
struct _ast145: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast142, Pack<>>>, _ast138>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast146: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast147: NamedDeclName<_str52>, TypeDecl<_ast148> {}; // TemplateTypeParm S
struct _ast149: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast154, Pack<_ast150>>>, _ast138>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast150: NamedDeclName<_str53>, ParmVarDecl<_ast151> {}; // ParmVar that
struct _ast151: LValueReferenceType<ReferenceType<_ast152>> {}; // LValueReference const Local<S> &
struct _ast152: ConstQualifiedType<_ast153> {}; // TemplateSpecialization const Local<S>
struct _ast154: FunctionProtoType<_ast137, Pack<_ast151>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast155: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast156: NamedDeclName<_str52>, TypeDecl<_ast157> {}; // TemplateTypeParm S
struct _ast158: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast163, Pack<_ast159>>>, _ast138>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast159: NamedDeclName<_str53>, ParmVarDecl<_ast160> {}; // ParmVar that
struct _ast160: LValueReferenceType<ReferenceType<_ast161>> {}; // LValueReference const PersistentBase<S> &
struct _ast161: ConstQualifiedType<_ast162> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast163: FunctionProtoType<_ast137, Pack<_ast160>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast164: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast165: NamedDeclName<_str52>, TypeDecl<_ast166> {}; // TemplateTypeParm S
struct _ast167: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast172, Pack<_ast168>>>, _ast138>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast168: NamedDeclName<_str53>, ParmVarDecl<_ast169> {}; // ParmVar that
struct _ast169: LValueReferenceType<ReferenceType<_ast170>> {}; // LValueReference const Local<S> &
struct _ast170: ConstQualifiedType<_ast171> {}; // TemplateSpecialization const Local<S>
struct _ast172: FunctionProtoType<_ast137, Pack<_ast169>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast173: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast174: NamedDeclName<_str52>, TypeDecl<_ast175> {}; // TemplateTypeParm S
struct _ast176: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast181, Pack<_ast177>>>, _ast138>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast177: NamedDeclName<_str53>, ParmVarDecl<_ast178> {}; // ParmVar that
struct _ast178: LValueReferenceType<ReferenceType<_ast179>> {}; // LValueReference const Persistent<S> &
struct _ast179: ConstQualifiedType<_ast180> {}; // TemplateSpecialization const Persistent<S>
struct _ast181: FunctionProtoType<_ast137, Pack<_ast178>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast182: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast183: NamedDeclName<_str52>, TypeDecl<_ast184> {}; // TemplateTypeParm S
struct _ast185: MethodDecl<FunctionDecl<_ast188, Pack<_ast186>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast186: NamedDeclName<_str53>, ParmVarDecl<_ast187> {}; // ParmVar that
struct _ast188: FunctionProtoType<_ast189, Pack<_ast187>, SameType> {}; // FunctionProto Local<v8::Primitive> (Local<S>)
struct _ast190: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast191: NamedDeclName<_str52>, TypeDecl<_ast192> {}; // TemplateTypeParm S
struct _ast193: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast194, Pack<>>>, _ast138>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast194: FunctionProtoType<_ast195, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast196: MethodDecl<FunctionDecl<_ast201, Pack<_ast197, _ast199>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast197: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast198: PointerType<_ast7> {}; // Pointer v8::Isolate *
struct _ast199: NamedDeclName<_str53>, ParmVarDecl<_ast200> {}; // ParmVar that
struct _ast201: FunctionProtoType<_ast202, Pack<_ast198, _ast200>, SameType> {}; // FunctionProto Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
struct _ast203: MethodDecl<FunctionDecl<_ast209, Pack<_ast204, _ast205>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast204: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast205: NamedDeclName<_str53>, ParmVarDecl<_ast206> {}; // ParmVar that
struct _ast206: LValueReferenceType<ReferenceType<_ast207>> {}; // LValueReference const PersistentBase<v8::Primitive> &
struct _ast207: ConstQualifiedType<_ast208> {}; // TemplateSpecialization const PersistentBase<v8::Primitive>
struct _ast209: FunctionProtoType<_ast210, Pack<_ast198, _ast206>, SameType> {}; // FunctionProto Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
struct _ast211: MethodDecl<FunctionDecl<_ast217, Pack<_ast212, _ast213>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast212: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast213: NamedDeclName<_str53>, ParmVarDecl<_ast214> {}; // ParmVar that
struct _ast214: LValueReferenceType<ReferenceType<_ast215>> {}; // LValueReference const TracedGlobal<v8::Primitive> &
struct _ast215: ConstQualifiedType<_ast216> {}; // TemplateSpecialization const TracedGlobal<v8::Primitive>
struct _ast217: FunctionProtoType<_ast218, Pack<_ast198, _ast214>, SameType> {}; // FunctionProto Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
struct _ast219: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast222, Pack<_ast220>>>, _ast123>> {}; // CXXConstructor Local
struct _ast220: NamedDeclAnon<_str64>, ParmVarDecl<_ast221> {}; // ParmVar 
struct _ast221: LValueReferenceType<ReferenceType<_ast139>> {}; // LValueReference const v8::Local<v8::Primitive> &
struct _ast222: FunctionProtoType<_ast122, Pack<_ast221>, SameType> {}; // FunctionProto void (const v8::Local<v8::Primitive> &)
struct _ast223: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast226, Pack<_ast224>>>, _ast123>> {}; // CXXConstructor Local
struct _ast224: NamedDeclAnon<_str64>, ParmVarDecl<_ast225> {}; // ParmVar 
struct _ast225: RValueReferenceType<ReferenceType<_ast119>> {}; // RValueReference v8::Local<v8::Primitive> &&
struct _ast226: FunctionProtoType<_ast122, Pack<_ast225>, SameType> {}; // FunctionProto void (v8::Local<v8::Primitive> &&) noexcept
struct _ast227: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast123>> {}; // CXXDestructor ~Local
struct _ast228: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void () noexcept
struct _ast229: NamedDeclName<_str51>, TypeDecl<_ast230> {}; // ClassTemplateSpecialization Local
struct _ast230: StructOrClassRecordType<RecordType<_ast229>> {}; // Record v8::Local<v8::Boolean>
struct _ast231: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast232>> {}; // CXXConstructor Local
struct _ast232: PointerType<_ast230> {}; // Pointer v8::Local<v8::Boolean> *
struct _ast233: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast234: NamedDeclName<_str52>, TypeDecl<_ast235> {}; // TemplateTypeParm S
struct _ast236: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast239, Pack<_ast237>>>, _ast232>> {}; // CXXConstructor Local
struct _ast237: NamedDeclName<_str53>, ParmVarDecl<_ast238> {}; // ParmVar that
struct _ast239: FunctionProtoType<_ast122, Pack<_ast238>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast240: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast243, Pack<_ast241>>>, _ast232>> {}; // CXXConstructor Local
struct _ast241: NamedDeclName<_str53>, ParmVarDecl<_ast242> {}; // ParmVar that
struct _ast243: FunctionProtoType<_ast122, Pack<_ast242>, SameType> {}; // FunctionProto void (Local<v8::Boolean>)
struct _ast244: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast245>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast245: PointerType<_ast246> {}; // Pointer const v8::Local<v8::Boolean> *
struct _ast246: ConstQualifiedType<_ast230> {}; // Record const v8::Local<v8::Boolean>
struct _ast247: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast232>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast248: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast249, Pack<>>>, _ast245>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast249: FunctionProtoType<_ast250, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Boolean *() const
struct _ast250: PointerType<_ast251> {}; // Pointer v8::Boolean *
struct _ast252: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast249, Pack<>>>, _ast245>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast253: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast254: NamedDeclName<_str52>, TypeDecl<_ast255> {}; // TemplateTypeParm S
struct _ast256: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast261, Pack<_ast257>>>, _ast245>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast257: NamedDeclName<_str53>, ParmVarDecl<_ast258> {}; // ParmVar that
struct _ast258: LValueReferenceType<ReferenceType<_ast259>> {}; // LValueReference const Local<S> &
struct _ast259: ConstQualifiedType<_ast260> {}; // TemplateSpecialization const Local<S>
struct _ast261: FunctionProtoType<_ast137, Pack<_ast258>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast262: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast263: NamedDeclName<_str52>, TypeDecl<_ast264> {}; // TemplateTypeParm S
struct _ast265: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast270, Pack<_ast266>>>, _ast245>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast266: NamedDeclName<_str53>, ParmVarDecl<_ast267> {}; // ParmVar that
struct _ast267: LValueReferenceType<ReferenceType<_ast268>> {}; // LValueReference const PersistentBase<S> &
struct _ast268: ConstQualifiedType<_ast269> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast270: FunctionProtoType<_ast137, Pack<_ast267>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast271: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast272: NamedDeclName<_str52>, TypeDecl<_ast273> {}; // TemplateTypeParm S
struct _ast274: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast279, Pack<_ast275>>>, _ast245>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast275: NamedDeclName<_str53>, ParmVarDecl<_ast276> {}; // ParmVar that
struct _ast276: LValueReferenceType<ReferenceType<_ast277>> {}; // LValueReference const Local<S> &
struct _ast277: ConstQualifiedType<_ast278> {}; // TemplateSpecialization const Local<S>
struct _ast279: FunctionProtoType<_ast137, Pack<_ast276>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast280: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast281: NamedDeclName<_str52>, TypeDecl<_ast282> {}; // TemplateTypeParm S
struct _ast283: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast288, Pack<_ast284>>>, _ast245>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast284: NamedDeclName<_str53>, ParmVarDecl<_ast285> {}; // ParmVar that
struct _ast285: LValueReferenceType<ReferenceType<_ast286>> {}; // LValueReference const Persistent<S> &
struct _ast286: ConstQualifiedType<_ast287> {}; // TemplateSpecialization const Persistent<S>
struct _ast288: FunctionProtoType<_ast137, Pack<_ast285>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast289: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast290: NamedDeclName<_str52>, TypeDecl<_ast291> {}; // TemplateTypeParm S
struct _ast292: MethodDecl<FunctionDecl<_ast295, Pack<_ast293>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast293: NamedDeclName<_str53>, ParmVarDecl<_ast294> {}; // ParmVar that
struct _ast295: FunctionProtoType<_ast296, Pack<_ast294>, SameType> {}; // FunctionProto Local<v8::Boolean> (Local<S>)
struct _ast297: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast298: NamedDeclName<_str52>, TypeDecl<_ast299> {}; // TemplateTypeParm S
struct _ast300: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast301, Pack<>>>, _ast245>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast301: FunctionProtoType<_ast302, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast303: MethodDecl<FunctionDecl<_ast307, Pack<_ast304, _ast305>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast304: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast305: NamedDeclName<_str53>, ParmVarDecl<_ast306> {}; // ParmVar that
struct _ast307: FunctionProtoType<_ast308, Pack<_ast198, _ast306>, SameType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _ast309: MethodDecl<FunctionDecl<_ast315, Pack<_ast310, _ast311>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast310: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast311: NamedDeclName<_str53>, ParmVarDecl<_ast312> {}; // ParmVar that
struct _ast312: LValueReferenceType<ReferenceType<_ast313>> {}; // LValueReference const PersistentBase<v8::Boolean> &
struct _ast313: ConstQualifiedType<_ast314> {}; // TemplateSpecialization const PersistentBase<v8::Boolean>
struct _ast315: FunctionProtoType<_ast316, Pack<_ast198, _ast312>, SameType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
struct _ast317: MethodDecl<FunctionDecl<_ast323, Pack<_ast318, _ast319>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast318: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast319: NamedDeclName<_str53>, ParmVarDecl<_ast320> {}; // ParmVar that
struct _ast320: LValueReferenceType<ReferenceType<_ast321>> {}; // LValueReference const TracedGlobal<v8::Boolean> &
struct _ast321: ConstQualifiedType<_ast322> {}; // TemplateSpecialization const TracedGlobal<v8::Boolean>
struct _ast323: FunctionProtoType<_ast324, Pack<_ast198, _ast320>, SameType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
struct _ast325: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast328, Pack<_ast326>>>, _ast232>> {}; // CXXConstructor Local
struct _ast326: NamedDeclAnon<_str64>, ParmVarDecl<_ast327> {}; // ParmVar 
struct _ast327: LValueReferenceType<ReferenceType<_ast246>> {}; // LValueReference const v8::Local<v8::Boolean> &
struct _ast328: FunctionProtoType<_ast122, Pack<_ast327>, SameType> {}; // FunctionProto void (const v8::Local<v8::Boolean> &)
struct _ast329: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast332, Pack<_ast330>>>, _ast232>> {}; // CXXConstructor Local
struct _ast330: NamedDeclAnon<_str64>, ParmVarDecl<_ast331> {}; // ParmVar 
struct _ast331: RValueReferenceType<ReferenceType<_ast230>> {}; // RValueReference v8::Local<v8::Boolean> &&
struct _ast332: FunctionProtoType<_ast122, Pack<_ast331>, SameType> {}; // FunctionProto void (v8::Local<v8::Boolean> &&) noexcept
struct _ast333: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast232>> {}; // CXXDestructor ~Local
struct _ast334: NamedDeclName<_str51>, TypeDecl<_ast335> {}; // ClassTemplateSpecialization Local
struct _ast335: StructOrClassRecordType<RecordType<_ast334>> {}; // Record v8::Local<v8::Value>
struct _ast336: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast337>> {}; // CXXConstructor Local
struct _ast337: PointerType<_ast335> {}; // Pointer v8::Local<v8::Value> *
struct _ast338: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast339: NamedDeclName<_str52>, TypeDecl<_ast340> {}; // TemplateTypeParm S
struct _ast341: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast344, Pack<_ast342>>>, _ast337>> {}; // CXXConstructor Local
struct _ast342: NamedDeclName<_str53>, ParmVarDecl<_ast343> {}; // ParmVar that
struct _ast344: FunctionProtoType<_ast122, Pack<_ast343>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast345: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast348, Pack<_ast346>>>, _ast337>> {}; // CXXConstructor Local
struct _ast346: NamedDeclName<_str53>, ParmVarDecl<_ast347> {}; // ParmVar that
struct _ast348: FunctionProtoType<_ast122, Pack<_ast347>, SameType> {}; // FunctionProto void (Local<v8::Value>)
struct _ast349: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast350>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast350: PointerType<_ast351> {}; // Pointer const v8::Local<v8::Value> *
struct _ast351: ConstQualifiedType<_ast335> {}; // Record const v8::Local<v8::Value>
struct _ast352: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast337>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast353: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast354, Pack<>>>, _ast350>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast354: FunctionProtoType<_ast355, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Value *() const
struct _ast355: PointerType<_ast356> {}; // Pointer v8::Value *
struct _ast357: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast354, Pack<>>>, _ast350>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast358: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast359: NamedDeclName<_str52>, TypeDecl<_ast360> {}; // TemplateTypeParm S
struct _ast361: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast366, Pack<_ast362>>>, _ast350>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast362: NamedDeclName<_str53>, ParmVarDecl<_ast363> {}; // ParmVar that
struct _ast363: LValueReferenceType<ReferenceType<_ast364>> {}; // LValueReference const Local<S> &
struct _ast364: ConstQualifiedType<_ast365> {}; // TemplateSpecialization const Local<S>
struct _ast366: FunctionProtoType<_ast137, Pack<_ast363>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast367: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast368: NamedDeclName<_str52>, TypeDecl<_ast369> {}; // TemplateTypeParm S
struct _ast370: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast375, Pack<_ast371>>>, _ast350>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast371: NamedDeclName<_str53>, ParmVarDecl<_ast372> {}; // ParmVar that
struct _ast372: LValueReferenceType<ReferenceType<_ast373>> {}; // LValueReference const PersistentBase<S> &
struct _ast373: ConstQualifiedType<_ast374> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast375: FunctionProtoType<_ast137, Pack<_ast372>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast376: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast377: NamedDeclName<_str52>, TypeDecl<_ast378> {}; // TemplateTypeParm S
struct _ast379: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast384, Pack<_ast380>>>, _ast350>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast380: NamedDeclName<_str53>, ParmVarDecl<_ast381> {}; // ParmVar that
struct _ast381: LValueReferenceType<ReferenceType<_ast382>> {}; // LValueReference const Local<S> &
struct _ast382: ConstQualifiedType<_ast383> {}; // TemplateSpecialization const Local<S>
struct _ast384: FunctionProtoType<_ast137, Pack<_ast381>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast385: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast386: NamedDeclName<_str52>, TypeDecl<_ast387> {}; // TemplateTypeParm S
struct _ast388: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast393, Pack<_ast389>>>, _ast350>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast389: NamedDeclName<_str53>, ParmVarDecl<_ast390> {}; // ParmVar that
struct _ast390: LValueReferenceType<ReferenceType<_ast391>> {}; // LValueReference const Persistent<S> &
struct _ast391: ConstQualifiedType<_ast392> {}; // TemplateSpecialization const Persistent<S>
struct _ast393: FunctionProtoType<_ast137, Pack<_ast390>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast394: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast395: NamedDeclName<_str52>, TypeDecl<_ast396> {}; // TemplateTypeParm S
struct _ast397: MethodDecl<FunctionDecl<_ast400, Pack<_ast398>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast398: NamedDeclName<_str53>, ParmVarDecl<_ast399> {}; // ParmVar that
struct _ast400: FunctionProtoType<_ast401, Pack<_ast399>, SameType> {}; // FunctionProto Local<v8::Value> (Local<S>)
struct _ast402: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast403: NamedDeclName<_str52>, TypeDecl<_ast404> {}; // TemplateTypeParm S
struct _ast405: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast406, Pack<>>>, _ast350>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast406: FunctionProtoType<_ast407, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast408: MethodDecl<FunctionDecl<_ast412, Pack<_ast409, _ast410>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast409: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast410: NamedDeclName<_str53>, ParmVarDecl<_ast411> {}; // ParmVar that
struct _ast412: FunctionProtoType<_ast413, Pack<_ast198, _ast411>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _ast414: MethodDecl<FunctionDecl<_ast420, Pack<_ast415, _ast416>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast415: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast416: NamedDeclName<_str53>, ParmVarDecl<_ast417> {}; // ParmVar that
struct _ast417: LValueReferenceType<ReferenceType<_ast418>> {}; // LValueReference const PersistentBase<v8::Value> &
struct _ast418: ConstQualifiedType<_ast419> {}; // TemplateSpecialization const PersistentBase<v8::Value>
struct _ast420: FunctionProtoType<_ast421, Pack<_ast198, _ast417>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
struct _ast422: MethodDecl<FunctionDecl<_ast428, Pack<_ast423, _ast424>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast423: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast424: NamedDeclName<_str53>, ParmVarDecl<_ast425> {}; // ParmVar that
struct _ast425: LValueReferenceType<ReferenceType<_ast426>> {}; // LValueReference const TracedGlobal<v8::Value> &
struct _ast426: ConstQualifiedType<_ast427> {}; // TemplateSpecialization const TracedGlobal<v8::Value>
struct _ast428: FunctionProtoType<_ast429, Pack<_ast198, _ast425>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
struct _ast430: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast433, Pack<_ast431>>>, _ast337>> {}; // CXXConstructor Local
struct _ast431: NamedDeclAnon<_str64>, ParmVarDecl<_ast432> {}; // ParmVar 
struct _ast432: LValueReferenceType<ReferenceType<_ast351>> {}; // LValueReference const v8::Local<v8::Value> &
struct _ast433: FunctionProtoType<_ast122, Pack<_ast432>, SameType> {}; // FunctionProto void (const v8::Local<v8::Value> &) noexcept
struct _ast434: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast437, Pack<_ast435>>>, _ast337>> {}; // CXXConstructor Local
struct _ast435: NamedDeclAnon<_str64>, ParmVarDecl<_ast436> {}; // ParmVar 
struct _ast436: RValueReferenceType<ReferenceType<_ast335>> {}; // RValueReference v8::Local<v8::Value> &&
struct _ast437: FunctionProtoType<_ast122, Pack<_ast436>, SameType> {}; // FunctionProto void (v8::Local<v8::Value> &&) noexcept
struct _ast438: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast337>> {}; // CXXDestructor ~Local
struct _ast439: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast441, Pack<_ast440>>>, _ast337>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast440: NamedDeclAnon<_str64>, ParmVarDecl<_ast432> {}; // ParmVar 
struct _ast441: FunctionProtoType<_ast442, Pack<_ast432>, SameType> {}; // FunctionProto v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _ast442: LValueReferenceType<ReferenceType<_ast335>> {}; // LValueReference v8::Local<v8::Value> &
struct _ast443: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast445, Pack<_ast444>>>, _ast337>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast444: NamedDeclAnon<_str64>, ParmVarDecl<_ast436> {}; // ParmVar 
struct _ast445: FunctionProtoType<_ast442, Pack<_ast436>, SameType> {}; // FunctionProto v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _ast446: NamedDeclName<_str51>, TypeDecl<_ast447> {}; // ClassTemplateSpecialization Local
struct _ast447: StructOrClassRecordType<RecordType<_ast446>> {}; // Record v8::Local<v8::PrimitiveArray>
struct _ast448: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast449>> {}; // CXXConstructor Local
struct _ast449: PointerType<_ast447> {}; // Pointer v8::Local<v8::PrimitiveArray> *
struct _ast450: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast451: NamedDeclName<_str52>, TypeDecl<_ast452> {}; // TemplateTypeParm S
struct _ast453: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast456, Pack<_ast454>>>, _ast449>> {}; // CXXConstructor Local
struct _ast454: NamedDeclName<_str53>, ParmVarDecl<_ast455> {}; // ParmVar that
struct _ast456: FunctionProtoType<_ast122, Pack<_ast455>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast457: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast460, Pack<_ast458>>>, _ast449>> {}; // CXXConstructor Local
struct _ast458: NamedDeclName<_str53>, ParmVarDecl<_ast459> {}; // ParmVar that
struct _ast460: FunctionProtoType<_ast122, Pack<_ast459>, SameType> {}; // FunctionProto void (Local<v8::PrimitiveArray>)
struct _ast461: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast462>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast462: PointerType<_ast463> {}; // Pointer const v8::Local<v8::PrimitiveArray> *
struct _ast463: ConstQualifiedType<_ast447> {}; // Record const v8::Local<v8::PrimitiveArray>
struct _ast464: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast449>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast465: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast466, Pack<>>>, _ast462>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast466: FunctionProtoType<_ast467, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::PrimitiveArray *() const
struct _ast467: PointerType<_ast468> {}; // Pointer v8::PrimitiveArray *
struct _ast469: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast466, Pack<>>>, _ast462>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast470: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast471: NamedDeclName<_str52>, TypeDecl<_ast472> {}; // TemplateTypeParm S
struct _ast473: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast478, Pack<_ast474>>>, _ast462>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast474: NamedDeclName<_str53>, ParmVarDecl<_ast475> {}; // ParmVar that
struct _ast475: LValueReferenceType<ReferenceType<_ast476>> {}; // LValueReference const Local<S> &
struct _ast476: ConstQualifiedType<_ast477> {}; // TemplateSpecialization const Local<S>
struct _ast478: FunctionProtoType<_ast137, Pack<_ast475>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast479: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast480: NamedDeclName<_str52>, TypeDecl<_ast481> {}; // TemplateTypeParm S
struct _ast482: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast487, Pack<_ast483>>>, _ast462>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast483: NamedDeclName<_str53>, ParmVarDecl<_ast484> {}; // ParmVar that
struct _ast484: LValueReferenceType<ReferenceType<_ast485>> {}; // LValueReference const PersistentBase<S> &
struct _ast485: ConstQualifiedType<_ast486> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast487: FunctionProtoType<_ast137, Pack<_ast484>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast488: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast489: NamedDeclName<_str52>, TypeDecl<_ast490> {}; // TemplateTypeParm S
struct _ast491: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast496, Pack<_ast492>>>, _ast462>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast492: NamedDeclName<_str53>, ParmVarDecl<_ast493> {}; // ParmVar that
struct _ast493: LValueReferenceType<ReferenceType<_ast494>> {}; // LValueReference const Local<S> &
struct _ast494: ConstQualifiedType<_ast495> {}; // TemplateSpecialization const Local<S>
struct _ast496: FunctionProtoType<_ast137, Pack<_ast493>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast497: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast498: NamedDeclName<_str52>, TypeDecl<_ast499> {}; // TemplateTypeParm S
struct _ast500: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast505, Pack<_ast501>>>, _ast462>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast501: NamedDeclName<_str53>, ParmVarDecl<_ast502> {}; // ParmVar that
struct _ast502: LValueReferenceType<ReferenceType<_ast503>> {}; // LValueReference const Persistent<S> &
struct _ast503: ConstQualifiedType<_ast504> {}; // TemplateSpecialization const Persistent<S>
struct _ast505: FunctionProtoType<_ast137, Pack<_ast502>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast506: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast507: NamedDeclName<_str52>, TypeDecl<_ast508> {}; // TemplateTypeParm S
struct _ast509: MethodDecl<FunctionDecl<_ast512, Pack<_ast510>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast510: NamedDeclName<_str53>, ParmVarDecl<_ast511> {}; // ParmVar that
struct _ast512: FunctionProtoType<_ast513, Pack<_ast511>, SameType> {}; // FunctionProto Local<v8::PrimitiveArray> (Local<S>)
struct _ast514: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast515: NamedDeclName<_str52>, TypeDecl<_ast516> {}; // TemplateTypeParm S
struct _ast517: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast518, Pack<>>>, _ast462>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast518: FunctionProtoType<_ast519, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast520: MethodDecl<FunctionDecl<_ast524, Pack<_ast521, _ast522>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast521: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast522: NamedDeclName<_str53>, ParmVarDecl<_ast523> {}; // ParmVar that
struct _ast524: FunctionProtoType<_ast525, Pack<_ast198, _ast523>, SameType> {}; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
struct _ast526: MethodDecl<FunctionDecl<_ast532, Pack<_ast527, _ast528>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast527: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast528: NamedDeclName<_str53>, ParmVarDecl<_ast529> {}; // ParmVar that
struct _ast529: LValueReferenceType<ReferenceType<_ast530>> {}; // LValueReference const PersistentBase<v8::PrimitiveArray> &
struct _ast530: ConstQualifiedType<_ast531> {}; // TemplateSpecialization const PersistentBase<v8::PrimitiveArray>
struct _ast532: FunctionProtoType<_ast533, Pack<_ast198, _ast529>, SameType> {}; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
struct _ast534: MethodDecl<FunctionDecl<_ast540, Pack<_ast535, _ast536>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast535: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast536: NamedDeclName<_str53>, ParmVarDecl<_ast537> {}; // ParmVar that
struct _ast537: LValueReferenceType<ReferenceType<_ast538>> {}; // LValueReference const TracedGlobal<v8::PrimitiveArray> &
struct _ast538: ConstQualifiedType<_ast539> {}; // TemplateSpecialization const TracedGlobal<v8::PrimitiveArray>
struct _ast540: FunctionProtoType<_ast541, Pack<_ast198, _ast537>, SameType> {}; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
struct _ast542: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast545, Pack<_ast543>>>, _ast449>> {}; // CXXConstructor Local
struct _ast543: NamedDeclAnon<_str64>, ParmVarDecl<_ast544> {}; // ParmVar 
struct _ast544: LValueReferenceType<ReferenceType<_ast463>> {}; // LValueReference const v8::Local<v8::PrimitiveArray> &
struct _ast545: FunctionProtoType<_ast122, Pack<_ast544>, SameType> {}; // FunctionProto void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _ast546: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast549, Pack<_ast547>>>, _ast449>> {}; // CXXConstructor Local
struct _ast547: NamedDeclAnon<_str64>, ParmVarDecl<_ast548> {}; // ParmVar 
struct _ast548: RValueReferenceType<ReferenceType<_ast447>> {}; // RValueReference v8::Local<v8::PrimitiveArray> &&
struct _ast549: FunctionProtoType<_ast122, Pack<_ast548>, SameType> {}; // FunctionProto void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _ast550: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast449>> {}; // CXXDestructor ~Local
struct _ast551: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast553, Pack<_ast552>>>, _ast449>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast552: NamedDeclAnon<_str64>, ParmVarDecl<_ast544> {}; // ParmVar 
struct _ast553: FunctionProtoType<_ast554, Pack<_ast544>, SameType> {}; // FunctionProto v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
struct _ast554: LValueReferenceType<ReferenceType<_ast447>> {}; // LValueReference v8::Local<v8::PrimitiveArray> &
struct _ast555: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast557, Pack<_ast556>>>, _ast449>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast556: NamedDeclAnon<_str64>, ParmVarDecl<_ast548> {}; // ParmVar 
struct _ast557: FunctionProtoType<_ast554, Pack<_ast548>, SameType> {}; // FunctionProto v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
struct _ast558: NamedDeclName<_str51>, TypeDecl<_ast559> {}; // ClassTemplateSpecialization Local
struct _ast559: StructOrClassRecordType<RecordType<_ast558>> {}; // Record v8::Local<v8::Integer>
struct _ast560: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast561>> {}; // CXXConstructor Local
struct _ast561: PointerType<_ast559> {}; // Pointer v8::Local<v8::Integer> *
struct _ast562: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast563: NamedDeclName<_str52>, TypeDecl<_ast564> {}; // TemplateTypeParm S
struct _ast565: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast568, Pack<_ast566>>>, _ast561>> {}; // CXXConstructor Local
struct _ast566: NamedDeclName<_str53>, ParmVarDecl<_ast567> {}; // ParmVar that
struct _ast568: FunctionProtoType<_ast122, Pack<_ast567>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast569: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast572, Pack<_ast570>>>, _ast561>> {}; // CXXConstructor Local
struct _ast570: NamedDeclName<_str53>, ParmVarDecl<_ast571> {}; // ParmVar that
struct _ast572: FunctionProtoType<_ast122, Pack<_ast571>, SameType> {}; // FunctionProto void (Local<v8::Integer>)
struct _ast573: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast574>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast574: PointerType<_ast575> {}; // Pointer const v8::Local<v8::Integer> *
struct _ast575: ConstQualifiedType<_ast559> {}; // Record const v8::Local<v8::Integer>
struct _ast576: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast561>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast577: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast578, Pack<>>>, _ast574>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast578: FunctionProtoType<_ast579, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Integer *() const
struct _ast579: PointerType<_ast580> {}; // Pointer v8::Integer *
struct _ast581: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast578, Pack<>>>, _ast574>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast582: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast583: NamedDeclName<_str52>, TypeDecl<_ast584> {}; // TemplateTypeParm S
struct _ast585: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast590, Pack<_ast586>>>, _ast574>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast586: NamedDeclName<_str53>, ParmVarDecl<_ast587> {}; // ParmVar that
struct _ast587: LValueReferenceType<ReferenceType<_ast588>> {}; // LValueReference const Local<S> &
struct _ast588: ConstQualifiedType<_ast589> {}; // TemplateSpecialization const Local<S>
struct _ast590: FunctionProtoType<_ast137, Pack<_ast587>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast591: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast592: NamedDeclName<_str52>, TypeDecl<_ast593> {}; // TemplateTypeParm S
struct _ast594: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast599, Pack<_ast595>>>, _ast574>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast595: NamedDeclName<_str53>, ParmVarDecl<_ast596> {}; // ParmVar that
struct _ast596: LValueReferenceType<ReferenceType<_ast597>> {}; // LValueReference const PersistentBase<S> &
struct _ast597: ConstQualifiedType<_ast598> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast599: FunctionProtoType<_ast137, Pack<_ast596>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast600: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast601: NamedDeclName<_str52>, TypeDecl<_ast602> {}; // TemplateTypeParm S
struct _ast603: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast608, Pack<_ast604>>>, _ast574>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast604: NamedDeclName<_str53>, ParmVarDecl<_ast605> {}; // ParmVar that
struct _ast605: LValueReferenceType<ReferenceType<_ast606>> {}; // LValueReference const Local<S> &
struct _ast606: ConstQualifiedType<_ast607> {}; // TemplateSpecialization const Local<S>
struct _ast608: FunctionProtoType<_ast137, Pack<_ast605>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast609: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast610: NamedDeclName<_str52>, TypeDecl<_ast611> {}; // TemplateTypeParm S
struct _ast612: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast617, Pack<_ast613>>>, _ast574>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast613: NamedDeclName<_str53>, ParmVarDecl<_ast614> {}; // ParmVar that
struct _ast614: LValueReferenceType<ReferenceType<_ast615>> {}; // LValueReference const Persistent<S> &
struct _ast615: ConstQualifiedType<_ast616> {}; // TemplateSpecialization const Persistent<S>
struct _ast617: FunctionProtoType<_ast137, Pack<_ast614>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast618: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast619: NamedDeclName<_str52>, TypeDecl<_ast620> {}; // TemplateTypeParm S
struct _ast621: MethodDecl<FunctionDecl<_ast624, Pack<_ast622>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast622: NamedDeclName<_str53>, ParmVarDecl<_ast623> {}; // ParmVar that
struct _ast624: FunctionProtoType<_ast625, Pack<_ast623>, SameType> {}; // FunctionProto Local<v8::Integer> (Local<S>)
struct _ast626: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast627: NamedDeclName<_str52>, TypeDecl<_ast628> {}; // TemplateTypeParm S
struct _ast629: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast630, Pack<>>>, _ast574>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast630: FunctionProtoType<_ast631, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast632: MethodDecl<FunctionDecl<_ast636, Pack<_ast633, _ast634>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast633: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast634: NamedDeclName<_str53>, ParmVarDecl<_ast635> {}; // ParmVar that
struct _ast636: FunctionProtoType<_ast637, Pack<_ast198, _ast635>, SameType> {}; // FunctionProto Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _ast638: MethodDecl<FunctionDecl<_ast644, Pack<_ast639, _ast640>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast639: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast640: NamedDeclName<_str53>, ParmVarDecl<_ast641> {}; // ParmVar that
struct _ast641: LValueReferenceType<ReferenceType<_ast642>> {}; // LValueReference const PersistentBase<v8::Integer> &
struct _ast642: ConstQualifiedType<_ast643> {}; // TemplateSpecialization const PersistentBase<v8::Integer>
struct _ast644: FunctionProtoType<_ast645, Pack<_ast198, _ast641>, SameType> {}; // FunctionProto Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
struct _ast646: MethodDecl<FunctionDecl<_ast652, Pack<_ast647, _ast648>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast647: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast648: NamedDeclName<_str53>, ParmVarDecl<_ast649> {}; // ParmVar that
struct _ast649: LValueReferenceType<ReferenceType<_ast650>> {}; // LValueReference const TracedGlobal<v8::Integer> &
struct _ast650: ConstQualifiedType<_ast651> {}; // TemplateSpecialization const TracedGlobal<v8::Integer>
struct _ast652: FunctionProtoType<_ast653, Pack<_ast198, _ast649>, SameType> {}; // FunctionProto Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
struct _ast654: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast657, Pack<_ast655>>>, _ast561>> {}; // CXXConstructor Local
struct _ast655: NamedDeclAnon<_str64>, ParmVarDecl<_ast656> {}; // ParmVar 
struct _ast656: LValueReferenceType<ReferenceType<_ast575>> {}; // LValueReference const v8::Local<v8::Integer> &
struct _ast657: FunctionProtoType<_ast122, Pack<_ast656>, SameType> {}; // FunctionProto void (const v8::Local<v8::Integer> &) noexcept
struct _ast658: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast661, Pack<_ast659>>>, _ast561>> {}; // CXXConstructor Local
struct _ast659: NamedDeclAnon<_str64>, ParmVarDecl<_ast660> {}; // ParmVar 
struct _ast660: RValueReferenceType<ReferenceType<_ast559>> {}; // RValueReference v8::Local<v8::Integer> &&
struct _ast661: FunctionProtoType<_ast122, Pack<_ast660>, SameType> {}; // FunctionProto void (v8::Local<v8::Integer> &&) noexcept
struct _ast662: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast561>> {}; // CXXDestructor ~Local
struct _ast663: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast665, Pack<_ast664>>>, _ast561>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast664: NamedDeclAnon<_str64>, ParmVarDecl<_ast656> {}; // ParmVar 
struct _ast665: FunctionProtoType<_ast666, Pack<_ast656>, SameType> {}; // FunctionProto v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _ast666: LValueReferenceType<ReferenceType<_ast559>> {}; // LValueReference v8::Local<v8::Integer> &
struct _ast667: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast669, Pack<_ast668>>>, _ast561>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast668: NamedDeclAnon<_str64>, ParmVarDecl<_ast660> {}; // ParmVar 
struct _ast669: FunctionProtoType<_ast666, Pack<_ast660>, SameType> {}; // FunctionProto v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _ast670: NamedDeclName<_str51>, TypeDecl<_ast671> {}; // ClassTemplateSpecialization Local
struct _ast671: StructOrClassRecordType<RecordType<_ast670>> {}; // Record v8::Local<v8::Script>
struct _ast672: NamedDeclName<_str51>, TypeDecl<_ast673> {}; // ClassTemplateSpecialization Local
struct _ast673: StructOrClassRecordType<RecordType<_ast672>> {}; // Record v8::Local<v8::String>
struct _ast674: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast675>> {}; // CXXConstructor Local
struct _ast675: PointerType<_ast673> {}; // Pointer v8::Local<v8::String> *
struct _ast676: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast677: NamedDeclName<_str52>, TypeDecl<_ast678> {}; // TemplateTypeParm S
struct _ast679: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast682, Pack<_ast680>>>, _ast675>> {}; // CXXConstructor Local
struct _ast680: NamedDeclName<_str53>, ParmVarDecl<_ast681> {}; // ParmVar that
struct _ast682: FunctionProtoType<_ast122, Pack<_ast681>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast683: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast686, Pack<_ast684>>>, _ast675>> {}; // CXXConstructor Local
struct _ast684: NamedDeclName<_str53>, ParmVarDecl<_ast685> {}; // ParmVar that
struct _ast686: FunctionProtoType<_ast122, Pack<_ast685>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast687: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast688>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast688: PointerType<_ast689> {}; // Pointer const v8::Local<v8::String> *
struct _ast689: ConstQualifiedType<_ast673> {}; // Record const v8::Local<v8::String>
struct _ast690: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast675>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast691: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast692, Pack<>>>, _ast688>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast692: FunctionProtoType<_ast693, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::String *() const
struct _ast693: PointerType<_ast694> {}; // Pointer v8::String *
struct _ast695: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast692, Pack<>>>, _ast688>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast696: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast697: NamedDeclName<_str52>, TypeDecl<_ast698> {}; // TemplateTypeParm S
struct _ast699: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast704, Pack<_ast700>>>, _ast688>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast700: NamedDeclName<_str53>, ParmVarDecl<_ast701> {}; // ParmVar that
struct _ast701: LValueReferenceType<ReferenceType<_ast702>> {}; // LValueReference const Local<S> &
struct _ast702: ConstQualifiedType<_ast703> {}; // TemplateSpecialization const Local<S>
struct _ast704: FunctionProtoType<_ast137, Pack<_ast701>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast705: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast706: NamedDeclName<_str52>, TypeDecl<_ast707> {}; // TemplateTypeParm S
struct _ast708: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast713, Pack<_ast709>>>, _ast688>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast709: NamedDeclName<_str53>, ParmVarDecl<_ast710> {}; // ParmVar that
struct _ast710: LValueReferenceType<ReferenceType<_ast711>> {}; // LValueReference const PersistentBase<S> &
struct _ast711: ConstQualifiedType<_ast712> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast713: FunctionProtoType<_ast137, Pack<_ast710>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast714: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast715: NamedDeclName<_str52>, TypeDecl<_ast716> {}; // TemplateTypeParm S
struct _ast717: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast722, Pack<_ast718>>>, _ast688>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast718: NamedDeclName<_str53>, ParmVarDecl<_ast719> {}; // ParmVar that
struct _ast719: LValueReferenceType<ReferenceType<_ast720>> {}; // LValueReference const Local<S> &
struct _ast720: ConstQualifiedType<_ast721> {}; // TemplateSpecialization const Local<S>
struct _ast722: FunctionProtoType<_ast137, Pack<_ast719>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast723: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast724: NamedDeclName<_str52>, TypeDecl<_ast725> {}; // TemplateTypeParm S
struct _ast726: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast731, Pack<_ast727>>>, _ast688>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast727: NamedDeclName<_str53>, ParmVarDecl<_ast728> {}; // ParmVar that
struct _ast728: LValueReferenceType<ReferenceType<_ast729>> {}; // LValueReference const Persistent<S> &
struct _ast729: ConstQualifiedType<_ast730> {}; // TemplateSpecialization const Persistent<S>
struct _ast731: FunctionProtoType<_ast137, Pack<_ast728>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast732: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast733: NamedDeclName<_str52>, TypeDecl<_ast734> {}; // TemplateTypeParm S
struct _ast735: MethodDecl<FunctionDecl<_ast738, Pack<_ast736>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast736: NamedDeclName<_str53>, ParmVarDecl<_ast737> {}; // ParmVar that
struct _ast738: FunctionProtoType<_ast739, Pack<_ast737>, SameType> {}; // FunctionProto Local<v8::String> (Local<S>)
struct _ast740: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast741: NamedDeclName<_str52>, TypeDecl<_ast742> {}; // TemplateTypeParm S
struct _ast743: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast744, Pack<>>>, _ast688>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast744: FunctionProtoType<_ast745, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast746: MethodDecl<FunctionDecl<_ast750, Pack<_ast747, _ast748>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast747: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast748: NamedDeclName<_str53>, ParmVarDecl<_ast749> {}; // ParmVar that
struct _ast750: FunctionProtoType<_ast751, Pack<_ast198, _ast749>, SameType> {}; // FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _ast752: MethodDecl<FunctionDecl<_ast758, Pack<_ast753, _ast754>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast753: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast754: NamedDeclName<_str53>, ParmVarDecl<_ast755> {}; // ParmVar that
struct _ast755: LValueReferenceType<ReferenceType<_ast756>> {}; // LValueReference const PersistentBase<v8::String> &
struct _ast756: ConstQualifiedType<_ast757> {}; // TemplateSpecialization const PersistentBase<v8::String>
struct _ast758: FunctionProtoType<_ast759, Pack<_ast198, _ast755>, SameType> {}; // FunctionProto Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
struct _ast760: MethodDecl<FunctionDecl<_ast766, Pack<_ast761, _ast762>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast761: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast762: NamedDeclName<_str53>, ParmVarDecl<_ast763> {}; // ParmVar that
struct _ast763: LValueReferenceType<ReferenceType<_ast764>> {}; // LValueReference const TracedGlobal<v8::String> &
struct _ast764: ConstQualifiedType<_ast765> {}; // TemplateSpecialization const TracedGlobal<v8::String>
struct _ast766: FunctionProtoType<_ast767, Pack<_ast198, _ast763>, SameType> {}; // FunctionProto Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
struct _ast768: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast771, Pack<_ast769>>>, _ast675>> {}; // CXXConstructor Local
struct _ast769: NamedDeclAnon<_str64>, ParmVarDecl<_ast770> {}; // ParmVar 
struct _ast770: LValueReferenceType<ReferenceType<_ast689>> {}; // LValueReference const v8::Local<v8::String> &
struct _ast771: FunctionProtoType<_ast122, Pack<_ast770>, SameType> {}; // FunctionProto void (const v8::Local<v8::String> &) noexcept
struct _ast772: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast775, Pack<_ast773>>>, _ast675>> {}; // CXXConstructor Local
struct _ast773: NamedDeclAnon<_str64>, ParmVarDecl<_ast774> {}; // ParmVar 
struct _ast774: RValueReferenceType<ReferenceType<_ast673>> {}; // RValueReference v8::Local<v8::String> &&
struct _ast775: FunctionProtoType<_ast122, Pack<_ast774>, SameType> {}; // FunctionProto void (v8::Local<v8::String> &&) noexcept
struct _ast776: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast778, Pack<_ast777>>>, _ast675>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast777: NamedDeclAnon<_str64>, ParmVarDecl<_ast770> {}; // ParmVar 
struct _ast778: FunctionProtoType<_ast779, Pack<_ast770>, SameType> {}; // FunctionProto v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _ast779: LValueReferenceType<ReferenceType<_ast673>> {}; // LValueReference v8::Local<v8::String> &
struct _ast780: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast782, Pack<_ast781>>>, _ast675>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast781: NamedDeclAnon<_str64>, ParmVarDecl<_ast774> {}; // ParmVar 
struct _ast782: FunctionProtoType<_ast779, Pack<_ast774>, SameType> {}; // FunctionProto v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _ast783: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast675>> {}; // CXXDestructor ~Local
struct _ast784: NamedDeclName<_str51>, TypeDecl<_ast785> {}; // ClassTemplateSpecialization Local
struct _ast785: StructOrClassRecordType<RecordType<_ast784>> {}; // Record v8::Local<v8::Context>
struct _ast786: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast787>> {}; // CXXConstructor Local
struct _ast787: PointerType<_ast785> {}; // Pointer v8::Local<v8::Context> *
struct _ast788: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast789: NamedDeclName<_str52>, TypeDecl<_ast790> {}; // TemplateTypeParm S
struct _ast791: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast794, Pack<_ast792>>>, _ast787>> {}; // CXXConstructor Local
struct _ast792: NamedDeclName<_str53>, ParmVarDecl<_ast793> {}; // ParmVar that
struct _ast794: FunctionProtoType<_ast122, Pack<_ast793>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast795: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast798, Pack<_ast796>>>, _ast787>> {}; // CXXConstructor Local
struct _ast796: NamedDeclName<_str53>, ParmVarDecl<_ast797> {}; // ParmVar that
struct _ast798: FunctionProtoType<_ast122, Pack<_ast797>, SameType> {}; // FunctionProto void (Local<v8::Context>)
struct _ast799: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast800>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast800: PointerType<_ast801> {}; // Pointer const v8::Local<v8::Context> *
struct _ast801: ConstQualifiedType<_ast785> {}; // Record const v8::Local<v8::Context>
struct _ast802: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast787>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast803: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast804, Pack<>>>, _ast800>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast804: FunctionProtoType<_ast805, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Context *() const
struct _ast805: PointerType<_ast806> {}; // Pointer v8::Context *
struct _ast807: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast804, Pack<>>>, _ast800>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast808: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast809: NamedDeclName<_str52>, TypeDecl<_ast810> {}; // TemplateTypeParm S
struct _ast811: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast816, Pack<_ast812>>>, _ast800>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast812: NamedDeclName<_str53>, ParmVarDecl<_ast813> {}; // ParmVar that
struct _ast813: LValueReferenceType<ReferenceType<_ast814>> {}; // LValueReference const Local<S> &
struct _ast814: ConstQualifiedType<_ast815> {}; // TemplateSpecialization const Local<S>
struct _ast816: FunctionProtoType<_ast137, Pack<_ast813>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast817: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast818: NamedDeclName<_str52>, TypeDecl<_ast819> {}; // TemplateTypeParm S
struct _ast820: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast825, Pack<_ast821>>>, _ast800>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast821: NamedDeclName<_str53>, ParmVarDecl<_ast822> {}; // ParmVar that
struct _ast822: LValueReferenceType<ReferenceType<_ast823>> {}; // LValueReference const PersistentBase<S> &
struct _ast823: ConstQualifiedType<_ast824> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast825: FunctionProtoType<_ast137, Pack<_ast822>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast826: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast827: NamedDeclName<_str52>, TypeDecl<_ast828> {}; // TemplateTypeParm S
struct _ast829: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast834, Pack<_ast830>>>, _ast800>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast830: NamedDeclName<_str53>, ParmVarDecl<_ast831> {}; // ParmVar that
struct _ast831: LValueReferenceType<ReferenceType<_ast832>> {}; // LValueReference const Local<S> &
struct _ast832: ConstQualifiedType<_ast833> {}; // TemplateSpecialization const Local<S>
struct _ast834: FunctionProtoType<_ast137, Pack<_ast831>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast835: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast836: NamedDeclName<_str52>, TypeDecl<_ast837> {}; // TemplateTypeParm S
struct _ast838: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast843, Pack<_ast839>>>, _ast800>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast839: NamedDeclName<_str53>, ParmVarDecl<_ast840> {}; // ParmVar that
struct _ast840: LValueReferenceType<ReferenceType<_ast841>> {}; // LValueReference const Persistent<S> &
struct _ast841: ConstQualifiedType<_ast842> {}; // TemplateSpecialization const Persistent<S>
struct _ast843: FunctionProtoType<_ast137, Pack<_ast840>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast844: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast845: NamedDeclName<_str52>, TypeDecl<_ast846> {}; // TemplateTypeParm S
struct _ast847: MethodDecl<FunctionDecl<_ast850, Pack<_ast848>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast848: NamedDeclName<_str53>, ParmVarDecl<_ast849> {}; // ParmVar that
struct _ast850: FunctionProtoType<_ast851, Pack<_ast849>, SameType> {}; // FunctionProto Local<v8::Context> (Local<S>)
struct _ast852: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast853: NamedDeclName<_str52>, TypeDecl<_ast854> {}; // TemplateTypeParm S
struct _ast855: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast856, Pack<>>>, _ast800>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast856: FunctionProtoType<_ast857, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast858: MethodDecl<FunctionDecl<_ast862, Pack<_ast859, _ast860>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast859: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast860: NamedDeclName<_str53>, ParmVarDecl<_ast861> {}; // ParmVar that
struct _ast862: FunctionProtoType<_ast863, Pack<_ast198, _ast861>, SameType> {}; // FunctionProto Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _ast864: MethodDecl<FunctionDecl<_ast870, Pack<_ast865, _ast866>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast865: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast866: NamedDeclName<_str53>, ParmVarDecl<_ast867> {}; // ParmVar that
struct _ast867: LValueReferenceType<ReferenceType<_ast868>> {}; // LValueReference const PersistentBase<v8::Context> &
struct _ast868: ConstQualifiedType<_ast869> {}; // TemplateSpecialization const PersistentBase<v8::Context>
struct _ast870: FunctionProtoType<_ast871, Pack<_ast198, _ast867>, SameType> {}; // FunctionProto Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
struct _ast872: MethodDecl<FunctionDecl<_ast878, Pack<_ast873, _ast874>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast873: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast874: NamedDeclName<_str53>, ParmVarDecl<_ast875> {}; // ParmVar that
struct _ast875: LValueReferenceType<ReferenceType<_ast876>> {}; // LValueReference const TracedGlobal<v8::Context> &
struct _ast876: ConstQualifiedType<_ast877> {}; // TemplateSpecialization const TracedGlobal<v8::Context>
struct _ast878: FunctionProtoType<_ast879, Pack<_ast198, _ast875>, SameType> {}; // FunctionProto Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
struct _ast880: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast787>> {}; // CXXDestructor ~Local
struct _ast881: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast884, Pack<_ast882>>>, _ast787>> {}; // CXXConstructor Local
struct _ast882: NamedDeclAnon<_str64>, ParmVarDecl<_ast883> {}; // ParmVar 
struct _ast883: LValueReferenceType<ReferenceType<_ast801>> {}; // LValueReference const v8::Local<v8::Context> &
struct _ast884: FunctionProtoType<_ast122, Pack<_ast883>, SameType> {}; // FunctionProto void (const v8::Local<v8::Context> &) noexcept
struct _ast885: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast888, Pack<_ast886>>>, _ast787>> {}; // CXXConstructor Local
struct _ast886: NamedDeclAnon<_str64>, ParmVarDecl<_ast887> {}; // ParmVar 
struct _ast887: RValueReferenceType<ReferenceType<_ast785>> {}; // RValueReference v8::Local<v8::Context> &&
struct _ast888: FunctionProtoType<_ast122, Pack<_ast887>, SameType> {}; // FunctionProto void (v8::Local<v8::Context> &&) noexcept
struct _ast889: NamedDeclName<_str51>, TypeDecl<_ast890> {}; // ClassTemplateSpecialization Local
struct _ast890: StructOrClassRecordType<RecordType<_ast889>> {}; // Record v8::Local<v8::Module>
struct _ast891: NamedDeclName<_str51>, TypeDecl<_ast892> {}; // ClassTemplateSpecialization Local
struct _ast892: StructOrClassRecordType<RecordType<_ast891>> {}; // Record v8::Local<v8::UnboundModuleScript>
struct _ast893: NamedDeclName<_str51>, TypeDecl<_ast894> {}; // ClassTemplateSpecialization Local
struct _ast894: StructOrClassRecordType<RecordType<_ast893>> {}; // Record v8::Local<v8::UnboundScript>
struct _ast895: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast896>> {}; // CXXConstructor Local
struct _ast896: PointerType<_ast894> {}; // Pointer v8::Local<v8::UnboundScript> *
struct _ast897: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast898: NamedDeclName<_str52>, TypeDecl<_ast899> {}; // TemplateTypeParm S
struct _ast900: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast903, Pack<_ast901>>>, _ast896>> {}; // CXXConstructor Local
struct _ast901: NamedDeclName<_str53>, ParmVarDecl<_ast902> {}; // ParmVar that
struct _ast903: FunctionProtoType<_ast122, Pack<_ast902>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast904: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast905>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast905: PointerType<_ast906> {}; // Pointer const v8::Local<v8::UnboundScript> *
struct _ast906: ConstQualifiedType<_ast894> {}; // Record const v8::Local<v8::UnboundScript>
struct _ast907: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast896>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast908: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast909, Pack<>>>, _ast905>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast909: FunctionProtoType<_ast910, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::UnboundScript *() const
struct _ast910: PointerType<_ast911> {}; // Pointer v8::UnboundScript *
struct _ast912: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast909, Pack<>>>, _ast905>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast913: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast914: NamedDeclName<_str52>, TypeDecl<_ast915> {}; // TemplateTypeParm S
struct _ast916: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast921, Pack<_ast917>>>, _ast905>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast917: NamedDeclName<_str53>, ParmVarDecl<_ast918> {}; // ParmVar that
struct _ast918: LValueReferenceType<ReferenceType<_ast919>> {}; // LValueReference const Local<S> &
struct _ast919: ConstQualifiedType<_ast920> {}; // TemplateSpecialization const Local<S>
struct _ast921: FunctionProtoType<_ast137, Pack<_ast918>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast922: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast923: NamedDeclName<_str52>, TypeDecl<_ast924> {}; // TemplateTypeParm S
struct _ast925: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast930, Pack<_ast926>>>, _ast905>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast926: NamedDeclName<_str53>, ParmVarDecl<_ast927> {}; // ParmVar that
struct _ast927: LValueReferenceType<ReferenceType<_ast928>> {}; // LValueReference const PersistentBase<S> &
struct _ast928: ConstQualifiedType<_ast929> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast930: FunctionProtoType<_ast137, Pack<_ast927>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast931: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast932: NamedDeclName<_str52>, TypeDecl<_ast933> {}; // TemplateTypeParm S
struct _ast934: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast939, Pack<_ast935>>>, _ast905>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast935: NamedDeclName<_str53>, ParmVarDecl<_ast936> {}; // ParmVar that
struct _ast936: LValueReferenceType<ReferenceType<_ast937>> {}; // LValueReference const Local<S> &
struct _ast937: ConstQualifiedType<_ast938> {}; // TemplateSpecialization const Local<S>
struct _ast939: FunctionProtoType<_ast137, Pack<_ast936>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast940: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast941: NamedDeclName<_str52>, TypeDecl<_ast942> {}; // TemplateTypeParm S
struct _ast943: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast948, Pack<_ast944>>>, _ast905>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast944: NamedDeclName<_str53>, ParmVarDecl<_ast945> {}; // ParmVar that
struct _ast945: LValueReferenceType<ReferenceType<_ast946>> {}; // LValueReference const Persistent<S> &
struct _ast946: ConstQualifiedType<_ast947> {}; // TemplateSpecialization const Persistent<S>
struct _ast948: FunctionProtoType<_ast137, Pack<_ast945>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast949: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast950: NamedDeclName<_str52>, TypeDecl<_ast951> {}; // TemplateTypeParm S
struct _ast952: MethodDecl<FunctionDecl<_ast955, Pack<_ast953>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast953: NamedDeclName<_str53>, ParmVarDecl<_ast954> {}; // ParmVar that
struct _ast955: FunctionProtoType<_ast956, Pack<_ast954>, SameType> {}; // FunctionProto Local<v8::UnboundScript> (Local<S>)
struct _ast957: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast958: NamedDeclName<_str52>, TypeDecl<_ast959> {}; // TemplateTypeParm S
struct _ast960: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast961, Pack<>>>, _ast905>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast961: FunctionProtoType<_ast962, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast963: MethodDecl<FunctionDecl<_ast967, Pack<_ast964, _ast965>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast964: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast965: NamedDeclName<_str53>, ParmVarDecl<_ast966> {}; // ParmVar that
struct _ast967: FunctionProtoType<_ast968, Pack<_ast198, _ast966>, SameType> {}; // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
struct _ast969: MethodDecl<FunctionDecl<_ast975, Pack<_ast970, _ast971>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast970: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast971: NamedDeclName<_str53>, ParmVarDecl<_ast972> {}; // ParmVar that
struct _ast972: LValueReferenceType<ReferenceType<_ast973>> {}; // LValueReference const PersistentBase<v8::UnboundScript> &
struct _ast973: ConstQualifiedType<_ast974> {}; // TemplateSpecialization const PersistentBase<v8::UnboundScript>
struct _ast975: FunctionProtoType<_ast976, Pack<_ast198, _ast972>, SameType> {}; // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
struct _ast977: MethodDecl<FunctionDecl<_ast983, Pack<_ast978, _ast979>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast978: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast979: NamedDeclName<_str53>, ParmVarDecl<_ast980> {}; // ParmVar that
struct _ast980: LValueReferenceType<ReferenceType<_ast981>> {}; // LValueReference const TracedGlobal<v8::UnboundScript> &
struct _ast981: ConstQualifiedType<_ast982> {}; // TemplateSpecialization const TracedGlobal<v8::UnboundScript>
struct _ast983: FunctionProtoType<_ast984, Pack<_ast198, _ast980>, SameType> {}; // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
struct _ast985: NamedDeclName<_str51>, TypeDecl<_ast986> {}; // ClassTemplateSpecialization Local
struct _ast986: StructOrClassRecordType<RecordType<_ast985>> {}; // Record v8::Local<v8::Object>
struct _ast987: NamedDeclName<_str51>, TypeDecl<_ast988> {}; // ClassTemplateSpecialization Local
struct _ast988: StructOrClassRecordType<RecordType<_ast987>> {}; // Record v8::Local<v8::Function>
struct _ast989: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast990>> {}; // CXXConstructor Local
struct _ast990: PointerType<_ast988> {}; // Pointer v8::Local<v8::Function> *
struct _ast991: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast992: NamedDeclName<_str52>, TypeDecl<_ast993> {}; // TemplateTypeParm S
struct _ast994: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast997, Pack<_ast995>>>, _ast990>> {}; // CXXConstructor Local
struct _ast995: NamedDeclName<_str53>, ParmVarDecl<_ast996> {}; // ParmVar that
struct _ast997: FunctionProtoType<_ast122, Pack<_ast996>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast998: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1001, Pack<_ast999>>>, _ast990>> {}; // CXXConstructor Local
struct _ast999: NamedDeclName<_str53>, ParmVarDecl<_ast1000> {}; // ParmVar that
struct _ast1001: FunctionProtoType<_ast122, Pack<_ast1000>, SameType> {}; // FunctionProto void (Local<v8::Function>)
struct _ast1002: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1003>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1003: PointerType<_ast1004> {}; // Pointer const v8::Local<v8::Function> *
struct _ast1004: ConstQualifiedType<_ast988> {}; // Record const v8::Local<v8::Function>
struct _ast1005: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast990>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1006: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1007, Pack<>>>, _ast1003>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1007: FunctionProtoType<_ast1008, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Function *() const
struct _ast1008: PointerType<_ast1009> {}; // Pointer v8::Function *
struct _ast1010: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1007, Pack<>>>, _ast1003>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1011: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1012: NamedDeclName<_str52>, TypeDecl<_ast1013> {}; // TemplateTypeParm S
struct _ast1014: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1019, Pack<_ast1015>>>, _ast1003>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1015: NamedDeclName<_str53>, ParmVarDecl<_ast1016> {}; // ParmVar that
struct _ast1016: LValueReferenceType<ReferenceType<_ast1017>> {}; // LValueReference const Local<S> &
struct _ast1017: ConstQualifiedType<_ast1018> {}; // TemplateSpecialization const Local<S>
struct _ast1019: FunctionProtoType<_ast137, Pack<_ast1016>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1020: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1021: NamedDeclName<_str52>, TypeDecl<_ast1022> {}; // TemplateTypeParm S
struct _ast1023: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1028, Pack<_ast1024>>>, _ast1003>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1024: NamedDeclName<_str53>, ParmVarDecl<_ast1025> {}; // ParmVar that
struct _ast1025: LValueReferenceType<ReferenceType<_ast1026>> {}; // LValueReference const PersistentBase<S> &
struct _ast1026: ConstQualifiedType<_ast1027> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1028: FunctionProtoType<_ast137, Pack<_ast1025>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1029: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1030: NamedDeclName<_str52>, TypeDecl<_ast1031> {}; // TemplateTypeParm S
struct _ast1032: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1037, Pack<_ast1033>>>, _ast1003>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1033: NamedDeclName<_str53>, ParmVarDecl<_ast1034> {}; // ParmVar that
struct _ast1034: LValueReferenceType<ReferenceType<_ast1035>> {}; // LValueReference const Local<S> &
struct _ast1035: ConstQualifiedType<_ast1036> {}; // TemplateSpecialization const Local<S>
struct _ast1037: FunctionProtoType<_ast137, Pack<_ast1034>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1038: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1039: NamedDeclName<_str52>, TypeDecl<_ast1040> {}; // TemplateTypeParm S
struct _ast1041: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1046, Pack<_ast1042>>>, _ast1003>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1042: NamedDeclName<_str53>, ParmVarDecl<_ast1043> {}; // ParmVar that
struct _ast1043: LValueReferenceType<ReferenceType<_ast1044>> {}; // LValueReference const Persistent<S> &
struct _ast1044: ConstQualifiedType<_ast1045> {}; // TemplateSpecialization const Persistent<S>
struct _ast1046: FunctionProtoType<_ast137, Pack<_ast1043>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1047: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1048: NamedDeclName<_str52>, TypeDecl<_ast1049> {}; // TemplateTypeParm S
struct _ast1050: MethodDecl<FunctionDecl<_ast1053, Pack<_ast1051>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1051: NamedDeclName<_str53>, ParmVarDecl<_ast1052> {}; // ParmVar that
struct _ast1053: FunctionProtoType<_ast1054, Pack<_ast1052>, SameType> {}; // FunctionProto Local<v8::Function> (Local<S>)
struct _ast1055: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1056: NamedDeclName<_str52>, TypeDecl<_ast1057> {}; // TemplateTypeParm S
struct _ast1058: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1059, Pack<>>>, _ast1003>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1059: FunctionProtoType<_ast1060, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1061: MethodDecl<FunctionDecl<_ast1065, Pack<_ast1062, _ast1063>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1062: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1063: NamedDeclName<_str53>, ParmVarDecl<_ast1064> {}; // ParmVar that
struct _ast1065: FunctionProtoType<_ast1066, Pack<_ast198, _ast1064>, SameType> {}; // FunctionProto Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _ast1067: MethodDecl<FunctionDecl<_ast1073, Pack<_ast1068, _ast1069>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1068: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1069: NamedDeclName<_str53>, ParmVarDecl<_ast1070> {}; // ParmVar that
struct _ast1070: LValueReferenceType<ReferenceType<_ast1071>> {}; // LValueReference const PersistentBase<v8::Function> &
struct _ast1071: ConstQualifiedType<_ast1072> {}; // TemplateSpecialization const PersistentBase<v8::Function>
struct _ast1073: FunctionProtoType<_ast1074, Pack<_ast198, _ast1070>, SameType> {}; // FunctionProto Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
struct _ast1075: MethodDecl<FunctionDecl<_ast1081, Pack<_ast1076, _ast1077>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1076: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1077: NamedDeclName<_str53>, ParmVarDecl<_ast1078> {}; // ParmVar that
struct _ast1078: LValueReferenceType<ReferenceType<_ast1079>> {}; // LValueReference const TracedGlobal<v8::Function> &
struct _ast1079: ConstQualifiedType<_ast1080> {}; // TemplateSpecialization const TracedGlobal<v8::Function>
struct _ast1081: FunctionProtoType<_ast1082, Pack<_ast198, _ast1078>, SameType> {}; // FunctionProto Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
struct _ast1083: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1086, Pack<_ast1084>>>, _ast990>> {}; // CXXConstructor Local
struct _ast1084: NamedDeclAnon<_str64>, ParmVarDecl<_ast1085> {}; // ParmVar 
struct _ast1085: LValueReferenceType<ReferenceType<_ast1004>> {}; // LValueReference const v8::Local<v8::Function> &
struct _ast1086: FunctionProtoType<_ast122, Pack<_ast1085>, SameType> {}; // FunctionProto void (const v8::Local<v8::Function> &)
struct _ast1087: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1090, Pack<_ast1088>>>, _ast990>> {}; // CXXConstructor Local
struct _ast1088: NamedDeclAnon<_str64>, ParmVarDecl<_ast1089> {}; // ParmVar 
struct _ast1089: RValueReferenceType<ReferenceType<_ast988>> {}; // RValueReference v8::Local<v8::Function> &&
struct _ast1090: FunctionProtoType<_ast122, Pack<_ast1089>, SameType> {}; // FunctionProto void (v8::Local<v8::Function> &&) noexcept
struct _ast1091: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast990>> {}; // CXXDestructor ~Local
struct _ast1092: NamedDeclName<_str51>, TypeDecl<_ast1093> {}; // ClassTemplateSpecialization Local
struct _ast1093: StructOrClassRecordType<RecordType<_ast1092>> {}; // Record v8::Local<v8::StackTrace>
struct _ast1094: NamedDeclName<_str51>, TypeDecl<_ast1095> {}; // ClassTemplateSpecialization Local
struct _ast1095: StructOrClassRecordType<RecordType<_ast1094>> {}; // Record v8::Local<v8::StackFrame>
struct _ast1096: NamedDeclName<_str51>, TypeDecl<_ast1097> {}; // ClassTemplateSpecialization Local
struct _ast1097: StructOrClassRecordType<RecordType<_ast1096>> {}; // Record v8::Local<v8::SharedArrayBuffer>
struct _ast1098: NamedDeclName<_str51>, TypeDecl<_ast1099> {}; // ClassTemplateSpecialization Local
struct _ast1099: StructOrClassRecordType<RecordType<_ast1098>> {}; // Record v8::Local<v8::WasmModuleObject>
struct _ast1100: NamedDeclName<_str51>, TypeDecl<_ast1101> {}; // ClassTemplateSpecialization Local
struct _ast1101: StructOrClassRecordType<RecordType<_ast1100>> {}; // Record v8::Local<v8::ArrayBuffer>
struct _ast1102: NamedDeclName<_str51>, TypeDecl<_ast1103> {}; // ClassTemplateSpecialization Local
struct _ast1103: StructOrClassRecordType<RecordType<_ast1102>> {}; // Record v8::Local<v8::Symbol>
struct _ast1104: NamedDeclName<_str51>, TypeDecl<_ast1105> {}; // ClassTemplateSpecialization Local
struct _ast1105: StructOrClassRecordType<RecordType<_ast1104>> {}; // Record v8::Local<v8::Private>
struct _ast1106: NamedDeclName<_str51>, TypeDecl<_ast1107> {}; // ClassTemplateSpecialization Local
struct _ast1107: StructOrClassRecordType<RecordType<_ast1106>> {}; // Record v8::Local<v8::Number>
struct _ast1108: NamedDeclName<_str51>, TypeDecl<_ast1109> {}; // ClassTemplateSpecialization Local
struct _ast1109: StructOrClassRecordType<RecordType<_ast1108>> {}; // Record v8::Local<v8::BigInt>
struct _ast1110: NamedDeclName<_str51>, TypeDecl<_ast1111> {}; // ClassTemplateSpecialization Local
struct _ast1111: StructOrClassRecordType<RecordType<_ast1110>> {}; // Record v8::Local<v8::Name>
struct _ast1112: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1113>> {}; // CXXConstructor Local
struct _ast1113: PointerType<_ast1111> {}; // Pointer v8::Local<v8::Name> *
struct _ast1114: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast1115: NamedDeclName<_str52>, TypeDecl<_ast1116> {}; // TemplateTypeParm S
struct _ast1117: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1120, Pack<_ast1118>>>, _ast1113>> {}; // CXXConstructor Local
struct _ast1118: NamedDeclName<_str53>, ParmVarDecl<_ast1119> {}; // ParmVar that
struct _ast1120: FunctionProtoType<_ast122, Pack<_ast1119>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1121: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1124, Pack<_ast1122>>>, _ast1113>> {}; // CXXConstructor Local
struct _ast1122: NamedDeclName<_str53>, ParmVarDecl<_ast1123> {}; // ParmVar that
struct _ast1124: FunctionProtoType<_ast122, Pack<_ast1123>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast1125: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1128, Pack<_ast1126>>>, _ast1113>> {}; // CXXConstructor Local
struct _ast1126: NamedDeclName<_str53>, ParmVarDecl<_ast1127> {}; // ParmVar that
struct _ast1128: FunctionProtoType<_ast122, Pack<_ast1127>, SameType> {}; // FunctionProto void (Local<v8::Name>)
struct _ast1129: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1130>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1130: PointerType<_ast1131> {}; // Pointer const v8::Local<v8::Name> *
struct _ast1131: ConstQualifiedType<_ast1111> {}; // Record const v8::Local<v8::Name>
struct _ast1132: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1113>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1133: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1134, Pack<>>>, _ast1130>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1134: FunctionProtoType<_ast1135, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Name *() const
struct _ast1135: PointerType<_ast1136> {}; // Pointer v8::Name *
struct _ast1137: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1134, Pack<>>>, _ast1130>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1138: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1139: NamedDeclName<_str52>, TypeDecl<_ast1140> {}; // TemplateTypeParm S
struct _ast1141: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1146, Pack<_ast1142>>>, _ast1130>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1142: NamedDeclName<_str53>, ParmVarDecl<_ast1143> {}; // ParmVar that
struct _ast1143: LValueReferenceType<ReferenceType<_ast1144>> {}; // LValueReference const Local<S> &
struct _ast1144: ConstQualifiedType<_ast1145> {}; // TemplateSpecialization const Local<S>
struct _ast1146: FunctionProtoType<_ast137, Pack<_ast1143>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1147: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1148: NamedDeclName<_str52>, TypeDecl<_ast1149> {}; // TemplateTypeParm S
struct _ast1150: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1155, Pack<_ast1151>>>, _ast1130>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1151: NamedDeclName<_str53>, ParmVarDecl<_ast1152> {}; // ParmVar that
struct _ast1152: LValueReferenceType<ReferenceType<_ast1153>> {}; // LValueReference const PersistentBase<S> &
struct _ast1153: ConstQualifiedType<_ast1154> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1155: FunctionProtoType<_ast137, Pack<_ast1152>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1156: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1157: NamedDeclName<_str52>, TypeDecl<_ast1158> {}; // TemplateTypeParm S
struct _ast1159: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1164, Pack<_ast1160>>>, _ast1130>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1160: NamedDeclName<_str53>, ParmVarDecl<_ast1161> {}; // ParmVar that
struct _ast1161: LValueReferenceType<ReferenceType<_ast1162>> {}; // LValueReference const Local<S> &
struct _ast1162: ConstQualifiedType<_ast1163> {}; // TemplateSpecialization const Local<S>
struct _ast1164: FunctionProtoType<_ast137, Pack<_ast1161>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1165: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1166: NamedDeclName<_str52>, TypeDecl<_ast1167> {}; // TemplateTypeParm S
struct _ast1168: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1173, Pack<_ast1169>>>, _ast1130>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1169: NamedDeclName<_str53>, ParmVarDecl<_ast1170> {}; // ParmVar that
struct _ast1170: LValueReferenceType<ReferenceType<_ast1171>> {}; // LValueReference const Persistent<S> &
struct _ast1171: ConstQualifiedType<_ast1172> {}; // TemplateSpecialization const Persistent<S>
struct _ast1173: FunctionProtoType<_ast137, Pack<_ast1170>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1174: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1175: NamedDeclName<_str52>, TypeDecl<_ast1176> {}; // TemplateTypeParm S
struct _ast1177: MethodDecl<FunctionDecl<_ast1180, Pack<_ast1178>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1178: NamedDeclName<_str53>, ParmVarDecl<_ast1179> {}; // ParmVar that
struct _ast1180: FunctionProtoType<_ast1181, Pack<_ast1179>, SameType> {}; // FunctionProto Local<v8::Name> (Local<S>)
struct _ast1182: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1183: NamedDeclName<_str52>, TypeDecl<_ast1184> {}; // TemplateTypeParm S
struct _ast1185: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1186, Pack<>>>, _ast1130>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1186: FunctionProtoType<_ast1187, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1188: MethodDecl<FunctionDecl<_ast1192, Pack<_ast1189, _ast1190>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1189: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1190: NamedDeclName<_str53>, ParmVarDecl<_ast1191> {}; // ParmVar that
struct _ast1192: FunctionProtoType<_ast1193, Pack<_ast198, _ast1191>, SameType> {}; // FunctionProto Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _ast1194: MethodDecl<FunctionDecl<_ast1200, Pack<_ast1195, _ast1196>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1195: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1196: NamedDeclName<_str53>, ParmVarDecl<_ast1197> {}; // ParmVar that
struct _ast1197: LValueReferenceType<ReferenceType<_ast1198>> {}; // LValueReference const PersistentBase<v8::Name> &
struct _ast1198: ConstQualifiedType<_ast1199> {}; // TemplateSpecialization const PersistentBase<v8::Name>
struct _ast1200: FunctionProtoType<_ast1201, Pack<_ast198, _ast1197>, SameType> {}; // FunctionProto Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
struct _ast1202: MethodDecl<FunctionDecl<_ast1208, Pack<_ast1203, _ast1204>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1203: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1204: NamedDeclName<_str53>, ParmVarDecl<_ast1205> {}; // ParmVar that
struct _ast1205: LValueReferenceType<ReferenceType<_ast1206>> {}; // LValueReference const TracedGlobal<v8::Name> &
struct _ast1206: ConstQualifiedType<_ast1207> {}; // TemplateSpecialization const TracedGlobal<v8::Name>
struct _ast1208: FunctionProtoType<_ast1209, Pack<_ast198, _ast1205>, SameType> {}; // FunctionProto Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
struct _ast1210: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1213, Pack<_ast1211>>>, _ast1113>> {}; // CXXConstructor Local
struct _ast1211: NamedDeclAnon<_str64>, ParmVarDecl<_ast1212> {}; // ParmVar 
struct _ast1212: LValueReferenceType<ReferenceType<_ast1131>> {}; // LValueReference const v8::Local<v8::Name> &
struct _ast1213: FunctionProtoType<_ast122, Pack<_ast1212>, SameType> {}; // FunctionProto void (const v8::Local<v8::Name> &)
struct _ast1214: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1217, Pack<_ast1215>>>, _ast1113>> {}; // CXXConstructor Local
struct _ast1215: NamedDeclAnon<_str64>, ParmVarDecl<_ast1216> {}; // ParmVar 
struct _ast1216: RValueReferenceType<ReferenceType<_ast1111>> {}; // RValueReference v8::Local<v8::Name> &&
struct _ast1217: FunctionProtoType<_ast122, Pack<_ast1216>, SameType> {}; // FunctionProto void (v8::Local<v8::Name> &&) noexcept
struct _ast1218: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1113>> {}; // CXXDestructor ~Local
struct _ast1219: NamedDeclName<_str51>, TypeDecl<_ast1220> {}; // ClassTemplateSpecialization Local
struct _ast1220: StructOrClassRecordType<RecordType<_ast1219>> {}; // Record v8::Local<v8::FunctionTemplate>
struct _ast1221: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1222>> {}; // CXXConstructor Local
struct _ast1222: PointerType<_ast1220> {}; // Pointer v8::Local<v8::FunctionTemplate> *
struct _ast1223: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast1224: NamedDeclName<_str52>, TypeDecl<_ast1225> {}; // TemplateTypeParm S
struct _ast1226: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1229, Pack<_ast1227>>>, _ast1222>> {}; // CXXConstructor Local
struct _ast1227: NamedDeclName<_str53>, ParmVarDecl<_ast1228> {}; // ParmVar that
struct _ast1229: FunctionProtoType<_ast122, Pack<_ast1228>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1230: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1233, Pack<_ast1231>>>, _ast1222>> {}; // CXXConstructor Local
struct _ast1231: NamedDeclName<_str53>, ParmVarDecl<_ast1232> {}; // ParmVar that
struct _ast1233: FunctionProtoType<_ast122, Pack<_ast1232>, SameType> {}; // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ast1234: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1235>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1235: PointerType<_ast1236> {}; // Pointer const v8::Local<v8::FunctionTemplate> *
struct _ast1236: ConstQualifiedType<_ast1220> {}; // Record const v8::Local<v8::FunctionTemplate>
struct _ast1237: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1222>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1238: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1239, Pack<>>>, _ast1235>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1239: FunctionProtoType<_ast1240, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::FunctionTemplate *() const
struct _ast1240: PointerType<_ast1241> {}; // Pointer v8::FunctionTemplate *
struct _ast1242: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1239, Pack<>>>, _ast1235>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1243: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1244: NamedDeclName<_str52>, TypeDecl<_ast1245> {}; // TemplateTypeParm S
struct _ast1246: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1251, Pack<_ast1247>>>, _ast1235>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1247: NamedDeclName<_str53>, ParmVarDecl<_ast1248> {}; // ParmVar that
struct _ast1248: LValueReferenceType<ReferenceType<_ast1249>> {}; // LValueReference const Local<S> &
struct _ast1249: ConstQualifiedType<_ast1250> {}; // TemplateSpecialization const Local<S>
struct _ast1251: FunctionProtoType<_ast137, Pack<_ast1248>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1252: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1253: NamedDeclName<_str52>, TypeDecl<_ast1254> {}; // TemplateTypeParm S
struct _ast1255: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1260, Pack<_ast1256>>>, _ast1235>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1256: NamedDeclName<_str53>, ParmVarDecl<_ast1257> {}; // ParmVar that
struct _ast1257: LValueReferenceType<ReferenceType<_ast1258>> {}; // LValueReference const PersistentBase<S> &
struct _ast1258: ConstQualifiedType<_ast1259> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1260: FunctionProtoType<_ast137, Pack<_ast1257>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1261: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1262: NamedDeclName<_str52>, TypeDecl<_ast1263> {}; // TemplateTypeParm S
struct _ast1264: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1269, Pack<_ast1265>>>, _ast1235>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1265: NamedDeclName<_str53>, ParmVarDecl<_ast1266> {}; // ParmVar that
struct _ast1266: LValueReferenceType<ReferenceType<_ast1267>> {}; // LValueReference const Local<S> &
struct _ast1267: ConstQualifiedType<_ast1268> {}; // TemplateSpecialization const Local<S>
struct _ast1269: FunctionProtoType<_ast137, Pack<_ast1266>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1270: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1271: NamedDeclName<_str52>, TypeDecl<_ast1272> {}; // TemplateTypeParm S
struct _ast1273: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1278, Pack<_ast1274>>>, _ast1235>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1274: NamedDeclName<_str53>, ParmVarDecl<_ast1275> {}; // ParmVar that
struct _ast1275: LValueReferenceType<ReferenceType<_ast1276>> {}; // LValueReference const Persistent<S> &
struct _ast1276: ConstQualifiedType<_ast1277> {}; // TemplateSpecialization const Persistent<S>
struct _ast1278: FunctionProtoType<_ast137, Pack<_ast1275>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1279: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1280: NamedDeclName<_str52>, TypeDecl<_ast1281> {}; // TemplateTypeParm S
struct _ast1282: MethodDecl<FunctionDecl<_ast1285, Pack<_ast1283>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1283: NamedDeclName<_str53>, ParmVarDecl<_ast1284> {}; // ParmVar that
struct _ast1285: FunctionProtoType<_ast1286, Pack<_ast1284>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (Local<S>)
struct _ast1287: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1288: NamedDeclName<_str52>, TypeDecl<_ast1289> {}; // TemplateTypeParm S
struct _ast1290: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1291, Pack<>>>, _ast1235>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1291: FunctionProtoType<_ast1292, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1293: MethodDecl<FunctionDecl<_ast1297, Pack<_ast1294, _ast1295>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1294: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1295: NamedDeclName<_str53>, ParmVarDecl<_ast1296> {}; // ParmVar that
struct _ast1297: FunctionProtoType<_ast1298, Pack<_ast198, _ast1296>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast1299: MethodDecl<FunctionDecl<_ast1305, Pack<_ast1300, _ast1301>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1300: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1301: NamedDeclName<_str53>, ParmVarDecl<_ast1302> {}; // ParmVar that
struct _ast1302: LValueReferenceType<ReferenceType<_ast1303>> {}; // LValueReference const PersistentBase<v8::FunctionTemplate> &
struct _ast1303: ConstQualifiedType<_ast1304> {}; // TemplateSpecialization const PersistentBase<v8::FunctionTemplate>
struct _ast1305: FunctionProtoType<_ast1306, Pack<_ast198, _ast1302>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
struct _ast1307: MethodDecl<FunctionDecl<_ast1313, Pack<_ast1308, _ast1309>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1308: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1309: NamedDeclName<_str53>, ParmVarDecl<_ast1310> {}; // ParmVar that
struct _ast1310: LValueReferenceType<ReferenceType<_ast1311>> {}; // LValueReference const TracedGlobal<v8::FunctionTemplate> &
struct _ast1311: ConstQualifiedType<_ast1312> {}; // TemplateSpecialization const TracedGlobal<v8::FunctionTemplate>
struct _ast1313: FunctionProtoType<_ast1314, Pack<_ast198, _ast1310>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
struct _ast1315: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1318, Pack<_ast1316>>>, _ast1222>> {}; // CXXConstructor Local
struct _ast1316: NamedDeclAnon<_str64>, ParmVarDecl<_ast1317> {}; // ParmVar 
struct _ast1317: LValueReferenceType<ReferenceType<_ast1236>> {}; // LValueReference const v8::Local<v8::FunctionTemplate> &
struct _ast1318: FunctionProtoType<_ast122, Pack<_ast1317>, SameType> {}; // FunctionProto void (const v8::Local<v8::FunctionTemplate> &)
struct _ast1319: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1322, Pack<_ast1320>>>, _ast1222>> {}; // CXXConstructor Local
struct _ast1320: NamedDeclAnon<_str64>, ParmVarDecl<_ast1321> {}; // ParmVar 
struct _ast1321: RValueReferenceType<ReferenceType<_ast1220>> {}; // RValueReference v8::Local<v8::FunctionTemplate> &&
struct _ast1322: FunctionProtoType<_ast122, Pack<_ast1321>, SameType> {}; // FunctionProto void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _ast1323: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1222>> {}; // CXXDestructor ~Local
struct _ast1324: NamedDeclName<_str51>, TypeDecl<_ast1325> {}; // ClassTemplateSpecialization Local
struct _ast1325: StructOrClassRecordType<RecordType<_ast1324>> {}; // Record v8::Local<v8::Array>
struct _ast1326: NamedDeclName<_str51>, TypeDecl<_ast1327> {}; // ClassTemplateSpecialization Local
struct _ast1327: StructOrClassRecordType<RecordType<_ast1326>> {}; // Record v8::Local<v8::Map>
struct _ast1328: NamedDeclName<_str51>, TypeDecl<_ast1329> {}; // ClassTemplateSpecialization Local
struct _ast1329: StructOrClassRecordType<RecordType<_ast1328>> {}; // Record v8::Local<v8::Set>
struct _ast1330: NamedDeclName<_str51>, TypeDecl<_ast1331> {}; // ClassTemplateSpecialization Local
struct _ast1331: StructOrClassRecordType<RecordType<_ast1330>> {}; // Record v8::Local<v8::Promise>
struct _ast1332: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1333>> {}; // CXXConstructor Local
struct _ast1333: PointerType<_ast1331> {}; // Pointer v8::Local<v8::Promise> *
struct _ast1334: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast1335: NamedDeclName<_str52>, TypeDecl<_ast1336> {}; // TemplateTypeParm S
struct _ast1337: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1340, Pack<_ast1338>>>, _ast1333>> {}; // CXXConstructor Local
struct _ast1338: NamedDeclName<_str53>, ParmVarDecl<_ast1339> {}; // ParmVar that
struct _ast1340: FunctionProtoType<_ast122, Pack<_ast1339>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1341: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1344, Pack<_ast1342>>>, _ast1333>> {}; // CXXConstructor Local
struct _ast1342: NamedDeclName<_str53>, ParmVarDecl<_ast1343> {}; // ParmVar that
struct _ast1344: FunctionProtoType<_ast122, Pack<_ast1343>, SameType> {}; // FunctionProto void (Local<v8::Promise>)
struct _ast1345: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1346>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1346: PointerType<_ast1347> {}; // Pointer const v8::Local<v8::Promise> *
struct _ast1347: ConstQualifiedType<_ast1331> {}; // Record const v8::Local<v8::Promise>
struct _ast1348: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1333>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1349: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1350, Pack<>>>, _ast1346>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1350: FunctionProtoType<_ast1351, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Promise *() const
struct _ast1351: PointerType<_ast1352> {}; // Pointer v8::Promise *
struct _ast1353: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1350, Pack<>>>, _ast1346>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1354: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1355: NamedDeclName<_str52>, TypeDecl<_ast1356> {}; // TemplateTypeParm S
struct _ast1357: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1362, Pack<_ast1358>>>, _ast1346>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1358: NamedDeclName<_str53>, ParmVarDecl<_ast1359> {}; // ParmVar that
struct _ast1359: LValueReferenceType<ReferenceType<_ast1360>> {}; // LValueReference const Local<S> &
struct _ast1360: ConstQualifiedType<_ast1361> {}; // TemplateSpecialization const Local<S>
struct _ast1362: FunctionProtoType<_ast137, Pack<_ast1359>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1363: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1364: NamedDeclName<_str52>, TypeDecl<_ast1365> {}; // TemplateTypeParm S
struct _ast1366: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1371, Pack<_ast1367>>>, _ast1346>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1367: NamedDeclName<_str53>, ParmVarDecl<_ast1368> {}; // ParmVar that
struct _ast1368: LValueReferenceType<ReferenceType<_ast1369>> {}; // LValueReference const PersistentBase<S> &
struct _ast1369: ConstQualifiedType<_ast1370> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1371: FunctionProtoType<_ast137, Pack<_ast1368>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1372: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1373: NamedDeclName<_str52>, TypeDecl<_ast1374> {}; // TemplateTypeParm S
struct _ast1375: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1380, Pack<_ast1376>>>, _ast1346>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1376: NamedDeclName<_str53>, ParmVarDecl<_ast1377> {}; // ParmVar that
struct _ast1377: LValueReferenceType<ReferenceType<_ast1378>> {}; // LValueReference const Local<S> &
struct _ast1378: ConstQualifiedType<_ast1379> {}; // TemplateSpecialization const Local<S>
struct _ast1380: FunctionProtoType<_ast137, Pack<_ast1377>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1381: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1382: NamedDeclName<_str52>, TypeDecl<_ast1383> {}; // TemplateTypeParm S
struct _ast1384: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1389, Pack<_ast1385>>>, _ast1346>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1385: NamedDeclName<_str53>, ParmVarDecl<_ast1386> {}; // ParmVar that
struct _ast1386: LValueReferenceType<ReferenceType<_ast1387>> {}; // LValueReference const Persistent<S> &
struct _ast1387: ConstQualifiedType<_ast1388> {}; // TemplateSpecialization const Persistent<S>
struct _ast1389: FunctionProtoType<_ast137, Pack<_ast1386>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1390: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1391: NamedDeclName<_str52>, TypeDecl<_ast1392> {}; // TemplateTypeParm S
struct _ast1393: MethodDecl<FunctionDecl<_ast1396, Pack<_ast1394>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1394: NamedDeclName<_str53>, ParmVarDecl<_ast1395> {}; // ParmVar that
struct _ast1396: FunctionProtoType<_ast1397, Pack<_ast1395>, SameType> {}; // FunctionProto Local<v8::Promise> (Local<S>)
struct _ast1398: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1399: NamedDeclName<_str52>, TypeDecl<_ast1400> {}; // TemplateTypeParm S
struct _ast1401: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1402, Pack<>>>, _ast1346>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1402: FunctionProtoType<_ast1403, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1404: MethodDecl<FunctionDecl<_ast1408, Pack<_ast1405, _ast1406>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1405: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1406: NamedDeclName<_str53>, ParmVarDecl<_ast1407> {}; // ParmVar that
struct _ast1408: FunctionProtoType<_ast1409, Pack<_ast198, _ast1407>, SameType> {}; // FunctionProto Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _ast1410: MethodDecl<FunctionDecl<_ast1416, Pack<_ast1411, _ast1412>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1411: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1412: NamedDeclName<_str53>, ParmVarDecl<_ast1413> {}; // ParmVar that
struct _ast1413: LValueReferenceType<ReferenceType<_ast1414>> {}; // LValueReference const PersistentBase<v8::Promise> &
struct _ast1414: ConstQualifiedType<_ast1415> {}; // TemplateSpecialization const PersistentBase<v8::Promise>
struct _ast1416: FunctionProtoType<_ast1417, Pack<_ast198, _ast1413>, SameType> {}; // FunctionProto Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
struct _ast1418: MethodDecl<FunctionDecl<_ast1424, Pack<_ast1419, _ast1420>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1419: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1420: NamedDeclName<_str53>, ParmVarDecl<_ast1421> {}; // ParmVar that
struct _ast1421: LValueReferenceType<ReferenceType<_ast1422>> {}; // LValueReference const TracedGlobal<v8::Promise> &
struct _ast1422: ConstQualifiedType<_ast1423> {}; // TemplateSpecialization const TracedGlobal<v8::Promise>
struct _ast1424: FunctionProtoType<_ast1425, Pack<_ast198, _ast1421>, SameType> {}; // FunctionProto Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
struct _ast1426: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1429, Pack<_ast1427>>>, _ast1333>> {}; // CXXConstructor Local
struct _ast1427: NamedDeclAnon<_str64>, ParmVarDecl<_ast1428> {}; // ParmVar 
struct _ast1428: LValueReferenceType<ReferenceType<_ast1347>> {}; // LValueReference const v8::Local<v8::Promise> &
struct _ast1429: FunctionProtoType<_ast122, Pack<_ast1428>, SameType> {}; // FunctionProto void (const v8::Local<v8::Promise> &) noexcept
struct _ast1430: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1433, Pack<_ast1431>>>, _ast1333>> {}; // CXXConstructor Local
struct _ast1431: NamedDeclAnon<_str64>, ParmVarDecl<_ast1432> {}; // ParmVar 
struct _ast1432: RValueReferenceType<ReferenceType<_ast1331>> {}; // RValueReference v8::Local<v8::Promise> &&
struct _ast1433: FunctionProtoType<_ast122, Pack<_ast1432>, SameType> {}; // FunctionProto void (v8::Local<v8::Promise> &&)
struct _ast1434: NamedDeclName<_str51>, TypeDecl<_ast1435> {}; // ClassTemplateSpecialization Local
struct _ast1435: StructOrClassRecordType<RecordType<_ast1434>> {}; // Record v8::Local<v8::Uint8Array>
struct _ast1436: NamedDeclName<_str51>, TypeDecl<_ast1437> {}; // ClassTemplateSpecialization Local
struct _ast1437: StructOrClassRecordType<RecordType<_ast1436>> {}; // Record v8::Local<v8::Uint8ClampedArray>
struct _ast1438: NamedDeclName<_str51>, TypeDecl<_ast1439> {}; // ClassTemplateSpecialization Local
struct _ast1439: StructOrClassRecordType<RecordType<_ast1438>> {}; // Record v8::Local<v8::Int8Array>
struct _ast1440: NamedDeclName<_str51>, TypeDecl<_ast1441> {}; // ClassTemplateSpecialization Local
struct _ast1441: StructOrClassRecordType<RecordType<_ast1440>> {}; // Record v8::Local<v8::Uint16Array>
struct _ast1442: NamedDeclName<_str51>, TypeDecl<_ast1443> {}; // ClassTemplateSpecialization Local
struct _ast1443: StructOrClassRecordType<RecordType<_ast1442>> {}; // Record v8::Local<v8::Int16Array>
struct _ast1444: NamedDeclName<_str51>, TypeDecl<_ast1445> {}; // ClassTemplateSpecialization Local
struct _ast1445: StructOrClassRecordType<RecordType<_ast1444>> {}; // Record v8::Local<v8::Uint32Array>
struct _ast1446: NamedDeclName<_str51>, TypeDecl<_ast1447> {}; // ClassTemplateSpecialization Local
struct _ast1447: StructOrClassRecordType<RecordType<_ast1446>> {}; // Record v8::Local<v8::Int32Array>
struct _ast1448: NamedDeclName<_str51>, TypeDecl<_ast1449> {}; // ClassTemplateSpecialization Local
struct _ast1449: StructOrClassRecordType<RecordType<_ast1448>> {}; // Record v8::Local<v8::Float32Array>
struct _ast1450: NamedDeclName<_str51>, TypeDecl<_ast1451> {}; // ClassTemplateSpecialization Local
struct _ast1451: StructOrClassRecordType<RecordType<_ast1450>> {}; // Record v8::Local<v8::Float64Array>
struct _ast1452: NamedDeclName<_str51>, TypeDecl<_ast1453> {}; // ClassTemplateSpecialization Local
struct _ast1453: StructOrClassRecordType<RecordType<_ast1452>> {}; // Record v8::Local<v8::BigInt64Array>
struct _ast1454: NamedDeclName<_str51>, TypeDecl<_ast1455> {}; // ClassTemplateSpecialization Local
struct _ast1455: StructOrClassRecordType<RecordType<_ast1454>> {}; // Record v8::Local<v8::BigUint64Array>
struct _ast1456: NamedDeclName<_str51>, TypeDecl<_ast1457> {}; // ClassTemplateSpecialization Local
struct _ast1457: StructOrClassRecordType<RecordType<_ast1456>> {}; // Record v8::Local<v8::DataView>
struct _ast1458: NamedDeclName<_str51>, TypeDecl<_ast1459> {}; // ClassTemplateSpecialization Local
struct _ast1459: StructOrClassRecordType<RecordType<_ast1458>> {}; // Record v8::Local<v8::External>
struct _ast1460: NamedDeclName<_str51>, TypeDecl<_ast1461> {}; // ClassTemplateSpecialization Local
struct _ast1461: StructOrClassRecordType<RecordType<_ast1460>> {}; // Record v8::Local<v8::Data>
struct _ast1462: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1463>> {}; // CXXConstructor Local
struct _ast1463: PointerType<_ast1461> {}; // Pointer v8::Local<v8::Data> *
struct _ast1464: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast1465: NamedDeclName<_str52>, TypeDecl<_ast1466> {}; // TemplateTypeParm S
struct _ast1467: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1470, Pack<_ast1468>>>, _ast1463>> {}; // CXXConstructor Local
struct _ast1468: NamedDeclName<_str53>, ParmVarDecl<_ast1469> {}; // ParmVar that
struct _ast1470: FunctionProtoType<_ast122, Pack<_ast1469>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1471: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1474, Pack<_ast1472>>>, _ast1463>> {}; // CXXConstructor Local
struct _ast1472: NamedDeclName<_str53>, ParmVarDecl<_ast1473> {}; // ParmVar that
struct _ast1474: FunctionProtoType<_ast122, Pack<_ast1473>, SameType> {}; // FunctionProto void (Local<v8::Data>)
struct _ast1475: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1476>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1476: PointerType<_ast1477> {}; // Pointer const v8::Local<v8::Data> *
struct _ast1477: ConstQualifiedType<_ast1461> {}; // Record const v8::Local<v8::Data>
struct _ast1478: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1463>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1479: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1480, Pack<>>>, _ast1476>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1480: FunctionProtoType<_ast1481, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Data *() const
struct _ast1481: PointerType<_ast1482> {}; // Pointer v8::Data *
struct _ast1483: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1480, Pack<>>>, _ast1476>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1484: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1485: NamedDeclName<_str52>, TypeDecl<_ast1486> {}; // TemplateTypeParm S
struct _ast1487: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1492, Pack<_ast1488>>>, _ast1476>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1488: NamedDeclName<_str53>, ParmVarDecl<_ast1489> {}; // ParmVar that
struct _ast1489: LValueReferenceType<ReferenceType<_ast1490>> {}; // LValueReference const Local<S> &
struct _ast1490: ConstQualifiedType<_ast1491> {}; // TemplateSpecialization const Local<S>
struct _ast1492: FunctionProtoType<_ast137, Pack<_ast1489>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1493: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1494: NamedDeclName<_str52>, TypeDecl<_ast1495> {}; // TemplateTypeParm S
struct _ast1496: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1501, Pack<_ast1497>>>, _ast1476>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1497: NamedDeclName<_str53>, ParmVarDecl<_ast1498> {}; // ParmVar that
struct _ast1498: LValueReferenceType<ReferenceType<_ast1499>> {}; // LValueReference const PersistentBase<S> &
struct _ast1499: ConstQualifiedType<_ast1500> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1501: FunctionProtoType<_ast137, Pack<_ast1498>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1502: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1503: NamedDeclName<_str52>, TypeDecl<_ast1504> {}; // TemplateTypeParm S
struct _ast1505: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1510, Pack<_ast1506>>>, _ast1476>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1506: NamedDeclName<_str53>, ParmVarDecl<_ast1507> {}; // ParmVar that
struct _ast1507: LValueReferenceType<ReferenceType<_ast1508>> {}; // LValueReference const Local<S> &
struct _ast1508: ConstQualifiedType<_ast1509> {}; // TemplateSpecialization const Local<S>
struct _ast1510: FunctionProtoType<_ast137, Pack<_ast1507>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1511: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1512: NamedDeclName<_str52>, TypeDecl<_ast1513> {}; // TemplateTypeParm S
struct _ast1514: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1519, Pack<_ast1515>>>, _ast1476>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1515: NamedDeclName<_str53>, ParmVarDecl<_ast1516> {}; // ParmVar that
struct _ast1516: LValueReferenceType<ReferenceType<_ast1517>> {}; // LValueReference const Persistent<S> &
struct _ast1517: ConstQualifiedType<_ast1518> {}; // TemplateSpecialization const Persistent<S>
struct _ast1519: FunctionProtoType<_ast137, Pack<_ast1516>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1520: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1521: NamedDeclName<_str52>, TypeDecl<_ast1522> {}; // TemplateTypeParm S
struct _ast1523: MethodDecl<FunctionDecl<_ast1526, Pack<_ast1524>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1524: NamedDeclName<_str53>, ParmVarDecl<_ast1525> {}; // ParmVar that
struct _ast1526: FunctionProtoType<_ast1527, Pack<_ast1525>, SameType> {}; // FunctionProto Local<v8::Data> (Local<S>)
struct _ast1528: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1529: NamedDeclName<_str52>, TypeDecl<_ast1530> {}; // TemplateTypeParm S
struct _ast1531: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1532, Pack<>>>, _ast1476>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1532: FunctionProtoType<_ast1533, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1534: MethodDecl<FunctionDecl<_ast1538, Pack<_ast1535, _ast1536>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1535: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1536: NamedDeclName<_str53>, ParmVarDecl<_ast1537> {}; // ParmVar that
struct _ast1538: FunctionProtoType<_ast1539, Pack<_ast198, _ast1537>, SameType> {}; // FunctionProto Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _ast1540: MethodDecl<FunctionDecl<_ast1546, Pack<_ast1541, _ast1542>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1541: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1542: NamedDeclName<_str53>, ParmVarDecl<_ast1543> {}; // ParmVar that
struct _ast1543: LValueReferenceType<ReferenceType<_ast1544>> {}; // LValueReference const PersistentBase<v8::Data> &
struct _ast1544: ConstQualifiedType<_ast1545> {}; // TemplateSpecialization const PersistentBase<v8::Data>
struct _ast1546: FunctionProtoType<_ast1547, Pack<_ast198, _ast1543>, SameType> {}; // FunctionProto Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
struct _ast1548: MethodDecl<FunctionDecl<_ast1554, Pack<_ast1549, _ast1550>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1549: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1550: NamedDeclName<_str53>, ParmVarDecl<_ast1551> {}; // ParmVar that
struct _ast1551: LValueReferenceType<ReferenceType<_ast1552>> {}; // LValueReference const TracedGlobal<v8::Data> &
struct _ast1552: ConstQualifiedType<_ast1553> {}; // TemplateSpecialization const TracedGlobal<v8::Data>
struct _ast1554: FunctionProtoType<_ast1555, Pack<_ast198, _ast1551>, SameType> {}; // FunctionProto Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
struct _ast1556: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1559, Pack<_ast1557>>>, _ast1463>> {}; // CXXConstructor Local
struct _ast1557: NamedDeclAnon<_str64>, ParmVarDecl<_ast1558> {}; // ParmVar 
struct _ast1558: LValueReferenceType<ReferenceType<_ast1477>> {}; // LValueReference const v8::Local<v8::Data> &
struct _ast1559: FunctionProtoType<_ast122, Pack<_ast1558>, SameType> {}; // FunctionProto void (const v8::Local<v8::Data> &) noexcept
struct _ast1560: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1563, Pack<_ast1561>>>, _ast1463>> {}; // CXXConstructor Local
struct _ast1561: NamedDeclAnon<_str64>, ParmVarDecl<_ast1562> {}; // ParmVar 
struct _ast1562: RValueReferenceType<ReferenceType<_ast1461>> {}; // RValueReference v8::Local<v8::Data> &&
struct _ast1563: FunctionProtoType<_ast122, Pack<_ast1562>, SameType> {}; // FunctionProto void (v8::Local<v8::Data> &&)
struct _ast1564: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1463>> {}; // CXXDestructor ~Local
struct _ast1565: NamedDeclName<_str51>, TypeDecl<_ast1566> {}; // ClassTemplateSpecialization Local
struct _ast1566: StructOrClassRecordType<RecordType<_ast1565>> {}; // Record v8::Local<v8::AccessorSignature>
struct _ast1567: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1568>> {}; // CXXConstructor Local
struct _ast1568: PointerType<_ast1566> {}; // Pointer v8::Local<v8::AccessorSignature> *
struct _ast1569: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast1570: NamedDeclName<_str52>, TypeDecl<_ast1571> {}; // TemplateTypeParm S
struct _ast1572: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1575, Pack<_ast1573>>>, _ast1568>> {}; // CXXConstructor Local
struct _ast1573: NamedDeclName<_str53>, ParmVarDecl<_ast1574> {}; // ParmVar that
struct _ast1575: FunctionProtoType<_ast122, Pack<_ast1574>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1576: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1579, Pack<_ast1577>>>, _ast1568>> {}; // CXXConstructor Local
struct _ast1577: NamedDeclName<_str53>, ParmVarDecl<_ast1578> {}; // ParmVar that
struct _ast1579: FunctionProtoType<_ast122, Pack<_ast1578>, SameType> {}; // FunctionProto void (Local<v8::AccessorSignature>)
struct _ast1580: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1581>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1581: PointerType<_ast1582> {}; // Pointer const v8::Local<v8::AccessorSignature> *
struct _ast1582: ConstQualifiedType<_ast1566> {}; // Record const v8::Local<v8::AccessorSignature>
struct _ast1583: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1568>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1584: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1585, Pack<>>>, _ast1581>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1585: FunctionProtoType<_ast1586, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::AccessorSignature *() const
struct _ast1586: PointerType<_ast1587> {}; // Pointer v8::AccessorSignature *
struct _ast1588: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1585, Pack<>>>, _ast1581>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1589: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1590: NamedDeclName<_str52>, TypeDecl<_ast1591> {}; // TemplateTypeParm S
struct _ast1592: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1597, Pack<_ast1593>>>, _ast1581>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1593: NamedDeclName<_str53>, ParmVarDecl<_ast1594> {}; // ParmVar that
struct _ast1594: LValueReferenceType<ReferenceType<_ast1595>> {}; // LValueReference const Local<S> &
struct _ast1595: ConstQualifiedType<_ast1596> {}; // TemplateSpecialization const Local<S>
struct _ast1597: FunctionProtoType<_ast137, Pack<_ast1594>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1598: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1599: NamedDeclName<_str52>, TypeDecl<_ast1600> {}; // TemplateTypeParm S
struct _ast1601: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1606, Pack<_ast1602>>>, _ast1581>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1602: NamedDeclName<_str53>, ParmVarDecl<_ast1603> {}; // ParmVar that
struct _ast1603: LValueReferenceType<ReferenceType<_ast1604>> {}; // LValueReference const PersistentBase<S> &
struct _ast1604: ConstQualifiedType<_ast1605> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1606: FunctionProtoType<_ast137, Pack<_ast1603>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1607: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1608: NamedDeclName<_str52>, TypeDecl<_ast1609> {}; // TemplateTypeParm S
struct _ast1610: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1615, Pack<_ast1611>>>, _ast1581>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1611: NamedDeclName<_str53>, ParmVarDecl<_ast1612> {}; // ParmVar that
struct _ast1612: LValueReferenceType<ReferenceType<_ast1613>> {}; // LValueReference const Local<S> &
struct _ast1613: ConstQualifiedType<_ast1614> {}; // TemplateSpecialization const Local<S>
struct _ast1615: FunctionProtoType<_ast137, Pack<_ast1612>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1616: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1617: NamedDeclName<_str52>, TypeDecl<_ast1618> {}; // TemplateTypeParm S
struct _ast1619: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1624, Pack<_ast1620>>>, _ast1581>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1620: NamedDeclName<_str53>, ParmVarDecl<_ast1621> {}; // ParmVar that
struct _ast1621: LValueReferenceType<ReferenceType<_ast1622>> {}; // LValueReference const Persistent<S> &
struct _ast1622: ConstQualifiedType<_ast1623> {}; // TemplateSpecialization const Persistent<S>
struct _ast1624: FunctionProtoType<_ast137, Pack<_ast1621>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1625: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1626: NamedDeclName<_str52>, TypeDecl<_ast1627> {}; // TemplateTypeParm S
struct _ast1628: MethodDecl<FunctionDecl<_ast1631, Pack<_ast1629>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1629: NamedDeclName<_str53>, ParmVarDecl<_ast1630> {}; // ParmVar that
struct _ast1631: FunctionProtoType<_ast1632, Pack<_ast1630>, SameType> {}; // FunctionProto Local<v8::AccessorSignature> (Local<S>)
struct _ast1633: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1634: NamedDeclName<_str52>, TypeDecl<_ast1635> {}; // TemplateTypeParm S
struct _ast1636: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1637, Pack<>>>, _ast1581>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1637: FunctionProtoType<_ast1638, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1639: MethodDecl<FunctionDecl<_ast1643, Pack<_ast1640, _ast1641>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1640: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1641: NamedDeclName<_str53>, ParmVarDecl<_ast1642> {}; // ParmVar that
struct _ast1643: FunctionProtoType<_ast1644, Pack<_ast198, _ast1642>, SameType> {}; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
struct _ast1645: MethodDecl<FunctionDecl<_ast1651, Pack<_ast1646, _ast1647>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1646: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1647: NamedDeclName<_str53>, ParmVarDecl<_ast1648> {}; // ParmVar that
struct _ast1648: LValueReferenceType<ReferenceType<_ast1649>> {}; // LValueReference const PersistentBase<v8::AccessorSignature> &
struct _ast1649: ConstQualifiedType<_ast1650> {}; // TemplateSpecialization const PersistentBase<v8::AccessorSignature>
struct _ast1651: FunctionProtoType<_ast1652, Pack<_ast198, _ast1648>, SameType> {}; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
struct _ast1653: MethodDecl<FunctionDecl<_ast1659, Pack<_ast1654, _ast1655>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1654: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1655: NamedDeclName<_str53>, ParmVarDecl<_ast1656> {}; // ParmVar that
struct _ast1656: LValueReferenceType<ReferenceType<_ast1657>> {}; // LValueReference const TracedGlobal<v8::AccessorSignature> &
struct _ast1657: ConstQualifiedType<_ast1658> {}; // TemplateSpecialization const TracedGlobal<v8::AccessorSignature>
struct _ast1659: FunctionProtoType<_ast1660, Pack<_ast198, _ast1656>, SameType> {}; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
struct _ast1661: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1664, Pack<_ast1662>>>, _ast1568>> {}; // CXXConstructor Local
struct _ast1662: NamedDeclAnon<_str64>, ParmVarDecl<_ast1663> {}; // ParmVar 
struct _ast1663: LValueReferenceType<ReferenceType<_ast1582>> {}; // LValueReference const v8::Local<v8::AccessorSignature> &
struct _ast1664: FunctionProtoType<_ast122, Pack<_ast1663>, SameType> {}; // FunctionProto void (const v8::Local<v8::AccessorSignature> &)
struct _ast1665: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1668, Pack<_ast1666>>>, _ast1568>> {}; // CXXConstructor Local
struct _ast1666: NamedDeclAnon<_str64>, ParmVarDecl<_ast1667> {}; // ParmVar 
struct _ast1667: RValueReferenceType<ReferenceType<_ast1566>> {}; // RValueReference v8::Local<v8::AccessorSignature> &&
struct _ast1668: FunctionProtoType<_ast122, Pack<_ast1667>, SameType> {}; // FunctionProto void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _ast1669: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1568>> {}; // CXXDestructor ~Local
struct _ast1670: NamedDeclName<_str51>, TypeDecl<_ast1671> {}; // ClassTemplateSpecialization Local
struct _ast1671: StructOrClassRecordType<RecordType<_ast1670>> {}; // Record v8::Local<v8::Signature>
struct _ast1672: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1673>> {}; // CXXConstructor Local
struct _ast1673: PointerType<_ast1671> {}; // Pointer v8::Local<v8::Signature> *
struct _ast1674: NamedDeclName<_str51> {}; // FunctionTemplate Local
struct _ast1675: NamedDeclName<_str52>, TypeDecl<_ast1676> {}; // TemplateTypeParm S
struct _ast1677: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1680, Pack<_ast1678>>>, _ast1673>> {}; // CXXConstructor Local
struct _ast1678: NamedDeclName<_str53>, ParmVarDecl<_ast1679> {}; // ParmVar that
struct _ast1680: FunctionProtoType<_ast122, Pack<_ast1679>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1681: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1684, Pack<_ast1682>>>, _ast1673>> {}; // CXXConstructor Local
struct _ast1682: NamedDeclName<_str53>, ParmVarDecl<_ast1683> {}; // ParmVar that
struct _ast1684: FunctionProtoType<_ast122, Pack<_ast1683>, SameType> {}; // FunctionProto void (Local<v8::Signature>)
struct _ast1685: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1686>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1686: PointerType<_ast1687> {}; // Pointer const v8::Local<v8::Signature> *
struct _ast1687: ConstQualifiedType<_ast1671> {}; // Record const v8::Local<v8::Signature>
struct _ast1688: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1673>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast1689: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1690, Pack<>>>, _ast1686>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast1690: FunctionProtoType<_ast1691, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Signature *() const
struct _ast1691: PointerType<_ast1692> {}; // Pointer v8::Signature *
struct _ast1693: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1690, Pack<>>>, _ast1686>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast1694: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1695: NamedDeclName<_str52>, TypeDecl<_ast1696> {}; // TemplateTypeParm S
struct _ast1697: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1702, Pack<_ast1698>>>, _ast1686>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1698: NamedDeclName<_str53>, ParmVarDecl<_ast1699> {}; // ParmVar that
struct _ast1699: LValueReferenceType<ReferenceType<_ast1700>> {}; // LValueReference const Local<S> &
struct _ast1700: ConstQualifiedType<_ast1701> {}; // TemplateSpecialization const Local<S>
struct _ast1702: FunctionProtoType<_ast137, Pack<_ast1699>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1703: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast1704: NamedDeclName<_str52>, TypeDecl<_ast1705> {}; // TemplateTypeParm S
struct _ast1706: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1711, Pack<_ast1707>>>, _ast1686>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast1707: NamedDeclName<_str53>, ParmVarDecl<_ast1708> {}; // ParmVar that
struct _ast1708: LValueReferenceType<ReferenceType<_ast1709>> {}; // LValueReference const PersistentBase<S> &
struct _ast1709: ConstQualifiedType<_ast1710> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast1711: FunctionProtoType<_ast137, Pack<_ast1708>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast1712: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1713: NamedDeclName<_str52>, TypeDecl<_ast1714> {}; // TemplateTypeParm S
struct _ast1715: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1720, Pack<_ast1716>>>, _ast1686>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1716: NamedDeclName<_str53>, ParmVarDecl<_ast1717> {}; // ParmVar that
struct _ast1717: LValueReferenceType<ReferenceType<_ast1718>> {}; // LValueReference const Local<S> &
struct _ast1718: ConstQualifiedType<_ast1719> {}; // TemplateSpecialization const Local<S>
struct _ast1720: FunctionProtoType<_ast137, Pack<_ast1717>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast1721: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast1722: NamedDeclName<_str52>, TypeDecl<_ast1723> {}; // TemplateTypeParm S
struct _ast1724: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1729, Pack<_ast1725>>>, _ast1686>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast1725: NamedDeclName<_str53>, ParmVarDecl<_ast1726> {}; // ParmVar that
struct _ast1726: LValueReferenceType<ReferenceType<_ast1727>> {}; // LValueReference const Persistent<S> &
struct _ast1727: ConstQualifiedType<_ast1728> {}; // TemplateSpecialization const Persistent<S>
struct _ast1729: FunctionProtoType<_ast137, Pack<_ast1726>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast1730: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast1731: NamedDeclName<_str52>, TypeDecl<_ast1732> {}; // TemplateTypeParm S
struct _ast1733: MethodDecl<FunctionDecl<_ast1736, Pack<_ast1734>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast1734: NamedDeclName<_str53>, ParmVarDecl<_ast1735> {}; // ParmVar that
struct _ast1736: FunctionProtoType<_ast1737, Pack<_ast1735>, SameType> {}; // FunctionProto Local<v8::Signature> (Local<S>)
struct _ast1738: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast1739: NamedDeclName<_str52>, TypeDecl<_ast1740> {}; // TemplateTypeParm S
struct _ast1741: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1742, Pack<>>>, _ast1686>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast1742: FunctionProtoType<_ast1743, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast1744: MethodDecl<FunctionDecl<_ast1748, Pack<_ast1745, _ast1746>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1745: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1746: NamedDeclName<_str53>, ParmVarDecl<_ast1747> {}; // ParmVar that
struct _ast1748: FunctionProtoType<_ast1749, Pack<_ast198, _ast1747>, SameType> {}; // FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
struct _ast1750: MethodDecl<FunctionDecl<_ast1756, Pack<_ast1751, _ast1752>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1751: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1752: NamedDeclName<_str53>, ParmVarDecl<_ast1753> {}; // ParmVar that
struct _ast1753: LValueReferenceType<ReferenceType<_ast1754>> {}; // LValueReference const PersistentBase<v8::Signature> &
struct _ast1754: ConstQualifiedType<_ast1755> {}; // TemplateSpecialization const PersistentBase<v8::Signature>
struct _ast1756: FunctionProtoType<_ast1757, Pack<_ast198, _ast1753>, SameType> {}; // FunctionProto Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
struct _ast1758: MethodDecl<FunctionDecl<_ast1764, Pack<_ast1759, _ast1760>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast1759: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast1760: NamedDeclName<_str53>, ParmVarDecl<_ast1761> {}; // ParmVar that
struct _ast1761: LValueReferenceType<ReferenceType<_ast1762>> {}; // LValueReference const TracedGlobal<v8::Signature> &
struct _ast1762: ConstQualifiedType<_ast1763> {}; // TemplateSpecialization const TracedGlobal<v8::Signature>
struct _ast1764: FunctionProtoType<_ast1765, Pack<_ast198, _ast1761>, SameType> {}; // FunctionProto Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
struct _ast1766: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1769, Pack<_ast1767>>>, _ast1673>> {}; // CXXConstructor Local
struct _ast1767: NamedDeclAnon<_str64>, ParmVarDecl<_ast1768> {}; // ParmVar 
struct _ast1768: LValueReferenceType<ReferenceType<_ast1687>> {}; // LValueReference const v8::Local<v8::Signature> &
struct _ast1769: FunctionProtoType<_ast122, Pack<_ast1768>, SameType> {}; // FunctionProto void (const v8::Local<v8::Signature> &)
struct _ast1770: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1773, Pack<_ast1771>>>, _ast1673>> {}; // CXXConstructor Local
struct _ast1771: NamedDeclAnon<_str64>, ParmVarDecl<_ast1772> {}; // ParmVar 
struct _ast1772: RValueReferenceType<ReferenceType<_ast1671>> {}; // RValueReference v8::Local<v8::Signature> &&
struct _ast1773: FunctionProtoType<_ast122, Pack<_ast1772>, SameType> {}; // FunctionProto void (v8::Local<v8::Signature> &&) noexcept
struct _ast1774: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1673>> {}; // CXXDestructor ~Local
struct _ast1775: NamedDeclName<_str51>, TypeDecl<_ast1776> {}; // ClassTemplateSpecialization Local
struct _ast1776: StructOrClassRecordType<RecordType<_ast1775>> {}; // Record v8::Local<v8::ObjectTemplate>
struct _ast1777: NamedDeclName<_str51>, TypeDecl<_ast1778> {}; // ClassTemplateSpecialization Local
struct _ast1778: StructOrClassRecordType<RecordType<_ast1777>> {}; // Record v8::Local<v8::Message>
struct _ast1779: NamedDeclName<_str51>, TypeDecl<_ast1780> {}; // ClassTemplateSpecialization Local
struct _ast1780: StructOrClassRecordType<RecordType<_ast1779>> {}; // Record v8::Local<v8::ScriptOrModule>
struct _ast1781: NamedDeclName<_str51>, TypeDecl<_ast1782> {}; // ClassTemplateSpecialization Local
struct _ast1782: StructOrClassRecordType<RecordType<_ast1781>> {}; // Record v8::Local<v8::Template>
struct _ast1783: NamedDeclName<_str66> {}; // ClassTemplate MaybeLocal
struct _ast1784: NamedDeclName<_str21>, TypeDecl<_ast1785> {}; // TemplateTypeParm T
struct _ast1786: NamedDeclName<_str66>, TypeDecl<_ast1787> {}; // CXXRecord MaybeLocal
struct _ast1788: NamedDeclName<_str66>, TypeDecl<_ast1789> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1789: StructOrClassRecordType<RecordType<_ast1788>> {}; // Record v8::MaybeLocal<v8::Module>
struct _ast1790: NamedDeclName<_str66>, TypeDecl<_ast1791> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1791: StructOrClassRecordType<RecordType<_ast1790>> {}; // Record v8::MaybeLocal<v8::Value>
struct _ast1792: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1793>> {}; // CXXConstructor MaybeLocal
struct _ast1793: PointerType<_ast1791> {}; // Pointer v8::MaybeLocal<v8::Value> *
struct _ast1794: NamedDeclName<_str66> {}; // FunctionTemplate MaybeLocal
struct _ast1795: NamedDeclName<_str52>, TypeDecl<_ast1796> {}; // TemplateTypeParm S
struct _ast1797: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1800, Pack<_ast1798>>>, _ast1793>> {}; // CXXConstructor MaybeLocal
struct _ast1798: NamedDeclName<_str53>, ParmVarDecl<_ast1799> {}; // ParmVar that
struct _ast1800: FunctionProtoType<_ast122, Pack<_ast1799>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1801: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1802>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1802: PointerType<_ast1803> {}; // Pointer const v8::MaybeLocal<v8::Value> *
struct _ast1803: ConstQualifiedType<_ast1791> {}; // Record const v8::MaybeLocal<v8::Value>
struct _ast1804: NamedDeclName<_str67> {}; // FunctionTemplate ToLocal
struct _ast1805: NamedDeclName<_str52>, TypeDecl<_ast1806> {}; // TemplateTypeParm S
struct _ast1807: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1811, Pack<_ast1808>>>, _ast1802>, NamedDeclName<_str67> {}; // CXXMethod ToLocal
struct _ast1808: NamedDeclName<_str68>, ParmVarDecl<_ast1809> {}; // ParmVar out
struct _ast1809: PointerType<_ast1810> {}; // Pointer Local<S> *
struct _ast1811: FunctionProtoType<_ast137, Pack<_ast1809>, ConstQualifiedType> {}; // FunctionProto bool (Local<S> *) const
struct _ast1812: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1813, Pack<>>>, _ast1793>, NamedDeclName<_str69> {}; // CXXMethod ToLocalChecked
struct _ast1813: FunctionProtoType<_ast1814, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast1815: NamedDeclName<_str70> {}; // FunctionTemplate FromMaybe
struct _ast1816: NamedDeclName<_str52>, TypeDecl<_ast1817> {}; // TemplateTypeParm S
struct _ast1818: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1821, Pack<_ast1819>>>, _ast1802>, NamedDeclName<_str70> {}; // CXXMethod FromMaybe
struct _ast1819: NamedDeclName<_str71>, ParmVarDecl<_ast1820> {}; // ParmVar default_value
struct _ast1821: FunctionProtoType<_ast1822, Pack<_ast1820>, ConstQualifiedType> {}; // FunctionProto Local<S> (Local<S>) const
struct _ast1823: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1826, Pack<_ast1824>>>, _ast1793>> {}; // CXXConstructor MaybeLocal
struct _ast1824: NamedDeclAnon<_str64>, ParmVarDecl<_ast1825> {}; // ParmVar 
struct _ast1825: LValueReferenceType<ReferenceType<_ast1803>> {}; // LValueReference const v8::MaybeLocal<v8::Value> &
struct _ast1826: FunctionProtoType<_ast122, Pack<_ast1825>, SameType> {}; // FunctionProto void (const v8::MaybeLocal<v8::Value> &)
struct _ast1827: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1830, Pack<_ast1828>>>, _ast1793>> {}; // CXXConstructor MaybeLocal
struct _ast1828: NamedDeclAnon<_str64>, ParmVarDecl<_ast1829> {}; // ParmVar 
struct _ast1829: RValueReferenceType<ReferenceType<_ast1791>> {}; // RValueReference v8::MaybeLocal<v8::Value> &&
struct _ast1830: FunctionProtoType<_ast122, Pack<_ast1829>, SameType> {}; // FunctionProto void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _ast1831: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1793>> {}; // CXXDestructor ~MaybeLocal
struct _ast1832: NamedDeclName<_str66>, TypeDecl<_ast1833> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1833: StructOrClassRecordType<RecordType<_ast1832>> {}; // Record v8::MaybeLocal<v8::Script>
struct _ast1834: NamedDeclName<_str66>, TypeDecl<_ast1835> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1835: StructOrClassRecordType<RecordType<_ast1834>> {}; // Record v8::MaybeLocal<v8::UnboundScript>
struct _ast1836: NamedDeclName<_str66>, TypeDecl<_ast1837> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1837: StructOrClassRecordType<RecordType<_ast1836>> {}; // Record v8::MaybeLocal<v8::Function>
struct _ast1838: NamedDeclName<_str66>, TypeDecl<_ast1839> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1839: StructOrClassRecordType<RecordType<_ast1838>> {}; // Record v8::MaybeLocal<v8::String>
struct _ast1840: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1841>> {}; // CXXConstructor MaybeLocal
struct _ast1841: PointerType<_ast1839> {}; // Pointer v8::MaybeLocal<v8::String> *
struct _ast1842: NamedDeclName<_str66> {}; // FunctionTemplate MaybeLocal
struct _ast1843: NamedDeclName<_str52>, TypeDecl<_ast1844> {}; // TemplateTypeParm S
struct _ast1845: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1848, Pack<_ast1846>>>, _ast1841>> {}; // CXXConstructor MaybeLocal
struct _ast1846: NamedDeclName<_str53>, ParmVarDecl<_ast1847> {}; // ParmVar that
struct _ast1848: FunctionProtoType<_ast122, Pack<_ast1847>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1849: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1850>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1850: PointerType<_ast1851> {}; // Pointer const v8::MaybeLocal<v8::String> *
struct _ast1851: ConstQualifiedType<_ast1839> {}; // Record const v8::MaybeLocal<v8::String>
struct _ast1852: NamedDeclName<_str67> {}; // FunctionTemplate ToLocal
struct _ast1853: NamedDeclName<_str52>, TypeDecl<_ast1854> {}; // TemplateTypeParm S
struct _ast1855: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1859, Pack<_ast1856>>>, _ast1850>, NamedDeclName<_str67> {}; // CXXMethod ToLocal
struct _ast1856: NamedDeclName<_str68>, ParmVarDecl<_ast1857> {}; // ParmVar out
struct _ast1857: PointerType<_ast1858> {}; // Pointer Local<S> *
struct _ast1859: FunctionProtoType<_ast137, Pack<_ast1857>, ConstQualifiedType> {}; // FunctionProto bool (Local<S> *) const
struct _ast1860: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1861, Pack<>>>, _ast1841>, NamedDeclName<_str69> {}; // CXXMethod ToLocalChecked
struct _ast1861: FunctionProtoType<_ast1862, Pack<>, SameType> {}; // FunctionProto Local<v8::String> ()
struct _ast1863: NamedDeclName<_str70> {}; // FunctionTemplate FromMaybe
struct _ast1864: NamedDeclName<_str52>, TypeDecl<_ast1865> {}; // TemplateTypeParm S
struct _ast1866: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1869, Pack<_ast1867>>>, _ast1850>, NamedDeclName<_str70> {}; // CXXMethod FromMaybe
struct _ast1867: NamedDeclName<_str71>, ParmVarDecl<_ast1868> {}; // ParmVar default_value
struct _ast1869: FunctionProtoType<_ast1870, Pack<_ast1868>, ConstQualifiedType> {}; // FunctionProto Local<S> (Local<S>) const
struct _ast1871: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1841>> {}; // CXXDestructor ~MaybeLocal
struct _ast1872: NamedDeclName<_str66>, TypeDecl<_ast1873> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1873: StructOrClassRecordType<RecordType<_ast1872>> {}; // Record v8::MaybeLocal<v8::Object>
struct _ast1874: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1875>> {}; // CXXConstructor MaybeLocal
struct _ast1875: PointerType<_ast1873> {}; // Pointer v8::MaybeLocal<v8::Object> *
struct _ast1876: NamedDeclName<_str66> {}; // FunctionTemplate MaybeLocal
struct _ast1877: NamedDeclName<_str52>, TypeDecl<_ast1878> {}; // TemplateTypeParm S
struct _ast1879: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1882, Pack<_ast1880>>>, _ast1875>> {}; // CXXConstructor MaybeLocal
struct _ast1880: NamedDeclName<_str53>, ParmVarDecl<_ast1881> {}; // ParmVar that
struct _ast1882: FunctionProtoType<_ast122, Pack<_ast1881>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1883: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1884>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1884: PointerType<_ast1885> {}; // Pointer const v8::MaybeLocal<v8::Object> *
struct _ast1885: ConstQualifiedType<_ast1873> {}; // Record const v8::MaybeLocal<v8::Object>
struct _ast1886: NamedDeclName<_str67> {}; // FunctionTemplate ToLocal
struct _ast1887: NamedDeclName<_str52>, TypeDecl<_ast1888> {}; // TemplateTypeParm S
struct _ast1889: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1893, Pack<_ast1890>>>, _ast1884>, NamedDeclName<_str67> {}; // CXXMethod ToLocal
struct _ast1890: NamedDeclName<_str68>, ParmVarDecl<_ast1891> {}; // ParmVar out
struct _ast1891: PointerType<_ast1892> {}; // Pointer Local<S> *
struct _ast1893: FunctionProtoType<_ast137, Pack<_ast1891>, ConstQualifiedType> {}; // FunctionProto bool (Local<S> *) const
struct _ast1894: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1895, Pack<>>>, _ast1875>, NamedDeclName<_str69> {}; // CXXMethod ToLocalChecked
struct _ast1895: FunctionProtoType<_ast1896, Pack<>, SameType> {}; // FunctionProto Local<v8::Object> ()
struct _ast1897: NamedDeclName<_str70> {}; // FunctionTemplate FromMaybe
struct _ast1898: NamedDeclName<_str52>, TypeDecl<_ast1899> {}; // TemplateTypeParm S
struct _ast1900: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1903, Pack<_ast1901>>>, _ast1884>, NamedDeclName<_str70> {}; // CXXMethod FromMaybe
struct _ast1901: NamedDeclName<_str71>, ParmVarDecl<_ast1902> {}; // ParmVar default_value
struct _ast1903: FunctionProtoType<_ast1904, Pack<_ast1902>, ConstQualifiedType> {}; // FunctionProto Local<S> (Local<S>) const
struct _ast1905: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1875>> {}; // CXXDestructor ~MaybeLocal
struct _ast1906: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1909, Pack<_ast1907>>>, _ast1875>> {}; // CXXConstructor MaybeLocal
struct _ast1907: NamedDeclAnon<_str64>, ParmVarDecl<_ast1908> {}; // ParmVar 
struct _ast1908: LValueReferenceType<ReferenceType<_ast1885>> {}; // LValueReference const v8::MaybeLocal<v8::Object> &
struct _ast1909: FunctionProtoType<_ast122, Pack<_ast1908>, SameType> {}; // FunctionProto void (const v8::MaybeLocal<v8::Object> &)
struct _ast1910: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1913, Pack<_ast1911>>>, _ast1875>> {}; // CXXConstructor MaybeLocal
struct _ast1911: NamedDeclAnon<_str64>, ParmVarDecl<_ast1912> {}; // ParmVar 
struct _ast1912: RValueReferenceType<ReferenceType<_ast1873>> {}; // RValueReference v8::MaybeLocal<v8::Object> &&
struct _ast1913: FunctionProtoType<_ast122, Pack<_ast1912>, SameType> {}; // FunctionProto void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _ast1914: NamedDeclName<_str66>, TypeDecl<_ast1915> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1915: StructOrClassRecordType<RecordType<_ast1914>> {}; // Record v8::MaybeLocal<v8::WasmModuleObject>
struct _ast1916: NamedDeclName<_str66>, TypeDecl<_ast1917> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1917: StructOrClassRecordType<RecordType<_ast1916>> {}; // Record v8::MaybeLocal<v8::SharedArrayBuffer>
struct _ast1918: NamedDeclName<_str66>, TypeDecl<_ast1919> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1919: StructOrClassRecordType<RecordType<_ast1918>> {}; // Record v8::MaybeLocal<v8::BigInt>
struct _ast1920: NamedDeclName<_str66>, TypeDecl<_ast1921> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1921: StructOrClassRecordType<RecordType<_ast1920>> {}; // Record v8::MaybeLocal<v8::Number>
struct _ast1922: NamedDeclName<_str66>, TypeDecl<_ast1923> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1923: StructOrClassRecordType<RecordType<_ast1922>> {}; // Record v8::MaybeLocal<v8::Integer>
struct _ast1924: NamedDeclName<_str66>, TypeDecl<_ast1925> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1925: StructOrClassRecordType<RecordType<_ast1924>> {}; // Record v8::MaybeLocal<v8::Uint32>
struct _ast1926: NamedDeclName<_str66>, TypeDecl<_ast1927> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1927: StructOrClassRecordType<RecordType<_ast1926>> {}; // Record v8::MaybeLocal<v8::Int32>
struct _ast1928: NamedDeclName<_str66>, TypeDecl<_ast1929> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1929: StructOrClassRecordType<RecordType<_ast1928>> {}; // Record v8::MaybeLocal<v8::Array>
struct _ast1930: NamedDeclName<_str66>, TypeDecl<_ast1931> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1931: StructOrClassRecordType<RecordType<_ast1930>> {}; // Record v8::MaybeLocal<v8::Map>
struct _ast1932: NamedDeclName<_str66>, TypeDecl<_ast1933> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1933: StructOrClassRecordType<RecordType<_ast1932>> {}; // Record v8::MaybeLocal<v8::Set>
struct _ast1934: NamedDeclName<_str66>, TypeDecl<_ast1935> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1935: StructOrClassRecordType<RecordType<_ast1934>> {}; // Record v8::MaybeLocal<v8::Promise::Resolver>
struct _ast1936: NamedDeclName<_str66>, TypeDecl<_ast1937> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1937: StructOrClassRecordType<RecordType<_ast1936>> {}; // Record v8::MaybeLocal<v8::Promise>
struct _ast1938: NamedDeclName<_str66>, TypeDecl<_ast1939> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1939: StructOrClassRecordType<RecordType<_ast1938>> {}; // Record v8::MaybeLocal<v8::Proxy>
struct _ast1940: NamedDeclName<_str66>, TypeDecl<_ast1941> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1941: StructOrClassRecordType<RecordType<_ast1940>> {}; // Record v8::MaybeLocal<v8::RegExp>
struct _ast1942: NamedDeclName<_str66>, TypeDecl<_ast1943> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1943: StructOrClassRecordType<RecordType<_ast1942>> {}; // Record v8::MaybeLocal<v8::FunctionTemplate>
struct _ast1944: NamedDeclName<_str66>, TypeDecl<_ast1945> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1945: StructOrClassRecordType<RecordType<_ast1944>> {}; // Record v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1946: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast1947>> {}; // CXXConstructor MaybeLocal
struct _ast1947: PointerType<_ast1945> {}; // Pointer v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1948: NamedDeclName<_str66> {}; // FunctionTemplate MaybeLocal
struct _ast1949: NamedDeclName<_str52>, TypeDecl<_ast1950> {}; // TemplateTypeParm S
struct _ast1951: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1954, Pack<_ast1952>>>, _ast1947>> {}; // CXXConstructor MaybeLocal
struct _ast1952: NamedDeclName<_str53>, ParmVarDecl<_ast1953> {}; // ParmVar that
struct _ast1954: FunctionProtoType<_ast122, Pack<_ast1953>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast1955: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast1956>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast1956: PointerType<_ast1957> {}; // Pointer const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1957: ConstQualifiedType<_ast1945> {}; // Record const v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1958: NamedDeclName<_str67> {}; // FunctionTemplate ToLocal
struct _ast1959: NamedDeclName<_str52>, TypeDecl<_ast1960> {}; // TemplateTypeParm S
struct _ast1961: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1965, Pack<_ast1962>>>, _ast1956>, NamedDeclName<_str67> {}; // CXXMethod ToLocal
struct _ast1962: NamedDeclName<_str68>, ParmVarDecl<_ast1963> {}; // ParmVar out
struct _ast1963: PointerType<_ast1964> {}; // Pointer Local<S> *
struct _ast1965: FunctionProtoType<_ast137, Pack<_ast1963>, ConstQualifiedType> {}; // FunctionProto bool (Local<S> *) const
struct _ast1966: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1967, Pack<>>>, _ast1947>, NamedDeclName<_str69> {}; // CXXMethod ToLocalChecked
struct _ast1967: FunctionProtoType<_ast1968, Pack<>, SameType> {}; // FunctionProto Local<v8::ObjectTemplate> ()
struct _ast1969: NamedDeclName<_str70> {}; // FunctionTemplate FromMaybe
struct _ast1970: NamedDeclName<_str52>, TypeDecl<_ast1971> {}; // TemplateTypeParm S
struct _ast1972: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1975, Pack<_ast1973>>>, _ast1956>, NamedDeclName<_str70> {}; // CXXMethod FromMaybe
struct _ast1973: NamedDeclName<_str71>, ParmVarDecl<_ast1974> {}; // ParmVar default_value
struct _ast1975: FunctionProtoType<_ast1976, Pack<_ast1974>, ConstQualifiedType> {}; // FunctionProto Local<S> (Local<S>) const
struct _ast1977: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1980, Pack<_ast1978>>>, _ast1947>> {}; // CXXConstructor MaybeLocal
struct _ast1978: NamedDeclAnon<_str64>, ParmVarDecl<_ast1979> {}; // ParmVar 
struct _ast1979: LValueReferenceType<ReferenceType<_ast1957>> {}; // LValueReference const v8::MaybeLocal<v8::ObjectTemplate> &
struct _ast1980: FunctionProtoType<_ast122, Pack<_ast1979>, SameType> {}; // FunctionProto void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ast1981: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast1984, Pack<_ast1982>>>, _ast1947>> {}; // CXXConstructor MaybeLocal
struct _ast1982: NamedDeclAnon<_str64>, ParmVarDecl<_ast1983> {}; // ParmVar 
struct _ast1983: RValueReferenceType<ReferenceType<_ast1945>> {}; // RValueReference v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ast1984: FunctionProtoType<_ast122, Pack<_ast1983>, SameType> {}; // FunctionProto void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _ast1985: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast1947>> {}; // CXXDestructor ~MaybeLocal
struct _ast1986: NamedDeclName<_str66>, TypeDecl<_ast1987> {}; // ClassTemplateSpecialization MaybeLocal
struct _ast1987: StructOrClassRecordType<RecordType<_ast1986>> {}; // Record v8::MaybeLocal<v8::Context>
struct _ast1988: NamedDeclName<_str72> {}; // ClassTemplate Eternal
struct _ast1989: NamedDeclName<_str21>, TypeDecl<_ast1990> {}; // TemplateTypeParm T
struct _ast1991: NamedDeclName<_str72>, TypeDecl<_ast1992> {}; // CXXRecord Eternal
struct _ast1993: NamedDeclName<_str73> {}; // ClassTemplate NonCopyablePersistentTraits
struct _ast1994: NamedDeclName<_str21>, TypeDecl<_ast1995> {}; // TemplateTypeParm T
struct _ast1996: NamedDeclName<_str73>, TypeDecl<_ast1997> {}; // CXXRecord NonCopyablePersistentTraits
struct _ast1998: NamedDeclName<_str73>, TypeDecl<_ast1999> {}; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _ast1999: StructOrClassRecordType<RecordType<_ast1998>> {}; // Record v8::NonCopyablePersistentTraits<v8::Promise>
struct _ast2000: NamedDeclName<_str73>, TypeDecl<_ast2001> {}; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _ast2001: StructOrClassRecordType<RecordType<_ast2000>> {}; // Record v8::NonCopyablePersistentTraits<v8::Value>
struct _ast2002: NamedDeclName<_str74> {}; // ClassTemplate PersistentBase
struct _ast2003: NamedDeclName<_str21>, TypeDecl<_ast2004> {}; // TemplateTypeParm T
struct _ast2005: NamedDeclName<_str74>, TypeDecl<_ast2006> {}; // CXXRecord PersistentBase
struct _ast2007: NamedDeclName<_str74>, TypeDecl<_ast2008> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2008: StructOrClassRecordType<RecordType<_ast2007>> {}; // Record v8::PersistentBase<v8::Value>
struct _ast2009: NamedDeclName<_str74>, TypeDecl<_ast2010> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2010: StructOrClassRecordType<RecordType<_ast2009>> {}; // Record v8::PersistentBase<v8::Integer>
struct _ast2011: NamedDeclName<_str74>, TypeDecl<_ast2012> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2012: StructOrClassRecordType<RecordType<_ast2011>> {}; // Record v8::PersistentBase<v8::PrimitiveArray>
struct _ast2013: NamedDeclName<_str74>, TypeDecl<_ast2014> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2014: StructOrClassRecordType<RecordType<_ast2013>> {}; // Record v8::PersistentBase<v8::Boolean>
struct _ast2015: NamedDeclName<_str74>, TypeDecl<_ast2016> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2016: StructOrClassRecordType<RecordType<_ast2015>> {}; // Record v8::PersistentBase<v8::String>
struct _ast2017: NamedDeclName<_str74>, TypeDecl<_ast2018> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2018: StructOrClassRecordType<RecordType<_ast2017>> {}; // Record v8::PersistentBase<v8::Object>
struct _ast2019: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2020>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2020: PointerType<_ast2018> {}; // Pointer v8::PersistentBase<v8::Object> *
struct _ast2021: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2022: NamedDeclName<_str52>, TypeDecl<_ast2023> {}; // TemplateTypeParm S
struct _ast2024: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2030, Pack<_ast2025, _ast2026>>>, _ast2020>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2025: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2026: NamedDeclName<_str76>, ParmVarDecl<_ast2027> {}; // ParmVar other
struct _ast2027: LValueReferenceType<ReferenceType<_ast2028>> {}; // LValueReference const Local<S> &
struct _ast2028: ConstQualifiedType<_ast2029> {}; // TemplateSpecialization const Local<S>
struct _ast2030: FunctionProtoType<_ast122, Pack<_ast198, _ast2027>, SameType> {}; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2031: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2032: NamedDeclName<_str52>, TypeDecl<_ast2033> {}; // TemplateTypeParm S
struct _ast2034: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2040, Pack<_ast2035, _ast2036>>>, _ast2020>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2035: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2036: NamedDeclName<_str76>, ParmVarDecl<_ast2037> {}; // ParmVar other
struct _ast2037: LValueReferenceType<ReferenceType<_ast2038>> {}; // LValueReference const PersistentBase<S> &
struct _ast2038: ConstQualifiedType<_ast2039> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2040: FunctionProtoType<_ast122, Pack<_ast198, _ast2037>, SameType> {}; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2041: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2042>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2042: PointerType<_ast2043> {}; // Pointer const v8::PersistentBase<v8::Object> *
struct _ast2043: ConstQualifiedType<_ast2018> {}; // Record const v8::PersistentBase<v8::Object>
struct _ast2044: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2020>, NamedDeclName<_str77> {}; // CXXMethod Empty
struct _ast2045: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2047, Pack<_ast2046>>>, _ast2042>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast2046: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2047: FunctionProtoType<_ast2048, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _ast2049: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2050: NamedDeclName<_str52>, TypeDecl<_ast2051> {}; // TemplateTypeParm S
struct _ast2052: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2057, Pack<_ast2053>>>, _ast2042>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2053: NamedDeclName<_str53>, ParmVarDecl<_ast2054> {}; // ParmVar that
struct _ast2054: LValueReferenceType<ReferenceType<_ast2055>> {}; // LValueReference const PersistentBase<S> &
struct _ast2055: ConstQualifiedType<_ast2056> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2057: FunctionProtoType<_ast137, Pack<_ast2054>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2058: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2059: NamedDeclName<_str52>, TypeDecl<_ast2060> {}; // TemplateTypeParm S
struct _ast2061: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2066, Pack<_ast2062>>>, _ast2042>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2062: NamedDeclName<_str53>, ParmVarDecl<_ast2063> {}; // ParmVar that
struct _ast2063: LValueReferenceType<ReferenceType<_ast2064>> {}; // LValueReference const Local<S> &
struct _ast2064: ConstQualifiedType<_ast2065> {}; // TemplateSpecialization const Local<S>
struct _ast2066: FunctionProtoType<_ast137, Pack<_ast2063>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2067: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2068: NamedDeclName<_str52>, TypeDecl<_ast2069> {}; // TemplateTypeParm S
struct _ast2070: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2075, Pack<_ast2071>>>, _ast2042>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2071: NamedDeclName<_str53>, ParmVarDecl<_ast2072> {}; // ParmVar that
struct _ast2072: LValueReferenceType<ReferenceType<_ast2073>> {}; // LValueReference const PersistentBase<S> &
struct _ast2073: ConstQualifiedType<_ast2074> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2075: FunctionProtoType<_ast137, Pack<_ast2072>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2076: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2077: NamedDeclName<_str52>, TypeDecl<_ast2078> {}; // TemplateTypeParm S
struct _ast2079: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2084, Pack<_ast2080>>>, _ast2042>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2080: NamedDeclName<_str53>, ParmVarDecl<_ast2081> {}; // ParmVar that
struct _ast2081: LValueReferenceType<ReferenceType<_ast2082>> {}; // LValueReference const Local<S> &
struct _ast2082: ConstQualifiedType<_ast2083> {}; // TemplateSpecialization const Local<S>
struct _ast2084: FunctionProtoType<_ast137, Pack<_ast2081>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2085: NamedDeclName<_str79> {}; // FunctionTemplate SetWeak
struct _ast2086: NamedDeclName<_str80>, TypeDecl<_ast2087> {}; // TemplateTypeParm P
struct _ast2088: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2097, Pack<_ast2089, _ast2091, _ast2093>>>, _ast2020>, NamedDeclName<_str79> {}; // CXXMethod SetWeak
struct _ast2089: NamedDeclName<_str81>, ParmVarDecl<_ast2090> {}; // ParmVar parameter
struct _ast2090: PointerType<_ast2087> {}; // Pointer P *
struct _ast2091: NamedDeclName<_str82>, ParmVarDecl<_ast2092> {}; // ParmVar callback
struct _ast2093: NamedDeclName<_str83>, ParmVarDecl<_ast2094> {}; // ParmVar type
struct _ast2094: EnumType<_ast2096, _ast2095> {}; // Enum v8::WeakCallbackType
struct _ast2095: ABIIndependentSizeType<SignedIntegerType, 4> {}; // Builtin int
struct _ast2096: NamedDeclName<_str84>, TypeDecl<_ast2094> {}; // Enum WeakCallbackType
struct _ast2097: FunctionProtoType<_ast122, Pack<_ast2090, _ast2092, _ast2094>, SameType> {}; // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2098: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2020>, NamedDeclName<_str79> {}; // CXXMethod SetWeak
struct _ast2099: NamedDeclName<_str85> {}; // FunctionTemplate ClearWeak
struct _ast2100: NamedDeclName<_str80>, TypeDecl<_ast2101> {}; // TemplateTypeParm P
struct _ast2102: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2103, Pack<>>>, _ast2020>, NamedDeclName<_str85> {}; // CXXMethod ClearWeak
struct _ast2103: FunctionProtoType<_ast2104, Pack<>, SameType> {}; // FunctionProto P *()
struct _ast2104: PointerType<_ast2101> {}; // Pointer P *
struct _ast2105: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2020>, NamedDeclName<_str85> {}; // CXXMethod ClearWeak
struct _ast2106: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2111, Pack<_ast2107>>>, _ast2020>, NamedDeclName<_str86> {}; // CXXMethod AnnotateStrongRetainer
struct _ast2107: NamedDeclName<_str87>, ParmVarDecl<_ast2108> {}; // ParmVar label
struct _ast2108: PointerType<_ast2109> {}; // Pointer const char *
struct _ast2109: ConstQualifiedType<_ast2110> {}; // Builtin const char
struct _ast2110: ABIIndependentSizeType<SignedIntegerType, 1> {}; // Builtin char
struct _ast2111: FunctionProtoType<_ast122, Pack<_ast2108>, SameType> {}; // FunctionProto void (const char *)
struct _ast2112: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2042>, NamedDeclName<_str88> {}; // CXXMethod IsWeak
struct _ast2113: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2116, Pack<_ast2114>>>, _ast2020>, NamedDeclName<_str89> {}; // CXXMethod SetWrapperClassId
struct _ast2114: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast2115: ABIIndependentSizeType<UnsignedIntegerType, 2> {}; // Typedef uint16_t
struct _ast2116: FunctionProtoType<_ast122, Pack<_ast2115>, SameType> {}; // FunctionProto void (uint16_t)
struct _ast2117: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2118, Pack<>>>, _ast2042>, NamedDeclName<_str91> {}; // CXXMethod WrapperClassId
struct _ast2118: FunctionProtoType<_ast2115, Pack<>, ConstQualifiedType> {}; // FunctionProto uint16_t () const
struct _ast2119: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2122, Pack<_ast2120>>>, _ast2020>> {}; // CXXConstructor PersistentBase
struct _ast2120: NamedDeclName<_str76>, ParmVarDecl<_ast2121> {}; // ParmVar other
struct _ast2121: LValueReferenceType<ReferenceType<_ast2043>> {}; // LValueReference const v8::PersistentBase<v8::Object> &
struct _ast2122: FunctionProtoType<_ast122, Pack<_ast2121>, SameType> {}; // FunctionProto void (const v8::PersistentBase<v8::Object> &)
struct _ast2123: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2122, Pack<_ast2124>>>, _ast2020>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2124: NamedDeclAnon<_str64>, ParmVarDecl<_ast2121> {}; // ParmVar 
struct _ast2125: NamedDeclName<_str74>, TypeDecl<_ast2126> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2126: StructOrClassRecordType<RecordType<_ast2125>> {}; // Record v8::PersistentBase<v8::Function>
struct _ast2127: NamedDeclName<_str74>, TypeDecl<_ast2128> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2128: StructOrClassRecordType<RecordType<_ast2127>> {}; // Record v8::PersistentBase<v8::Context>
struct _ast2129: NamedDeclName<_str74>, TypeDecl<_ast2130> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2130: StructOrClassRecordType<RecordType<_ast2129>> {}; // Record v8::PersistentBase<v8::Promise>
struct _ast2131: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2132>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2132: PointerType<_ast2130> {}; // Pointer v8::PersistentBase<v8::Promise> *
struct _ast2133: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2134: NamedDeclName<_str52>, TypeDecl<_ast2135> {}; // TemplateTypeParm S
struct _ast2136: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2142, Pack<_ast2137, _ast2138>>>, _ast2132>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2137: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2138: NamedDeclName<_str76>, ParmVarDecl<_ast2139> {}; // ParmVar other
struct _ast2139: LValueReferenceType<ReferenceType<_ast2140>> {}; // LValueReference const Local<S> &
struct _ast2140: ConstQualifiedType<_ast2141> {}; // TemplateSpecialization const Local<S>
struct _ast2142: FunctionProtoType<_ast122, Pack<_ast198, _ast2139>, SameType> {}; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2143: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2144: NamedDeclName<_str52>, TypeDecl<_ast2145> {}; // TemplateTypeParm S
struct _ast2146: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2152, Pack<_ast2147, _ast2148>>>, _ast2132>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2147: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2148: NamedDeclName<_str76>, ParmVarDecl<_ast2149> {}; // ParmVar other
struct _ast2149: LValueReferenceType<ReferenceType<_ast2150>> {}; // LValueReference const PersistentBase<S> &
struct _ast2150: ConstQualifiedType<_ast2151> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2152: FunctionProtoType<_ast122, Pack<_ast198, _ast2149>, SameType> {}; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2153: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2154>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2154: PointerType<_ast2155> {}; // Pointer const v8::PersistentBase<v8::Promise> *
struct _ast2155: ConstQualifiedType<_ast2130> {}; // Record const v8::PersistentBase<v8::Promise>
struct _ast2156: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2132>, NamedDeclName<_str77> {}; // CXXMethod Empty
struct _ast2157: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2159, Pack<_ast2158>>>, _ast2154>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast2158: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2159: FunctionProtoType<_ast2160, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<v8::Promise> (v8::Isolate *) const
struct _ast2161: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2162: NamedDeclName<_str52>, TypeDecl<_ast2163> {}; // TemplateTypeParm S
struct _ast2164: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2169, Pack<_ast2165>>>, _ast2154>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2165: NamedDeclName<_str53>, ParmVarDecl<_ast2166> {}; // ParmVar that
struct _ast2166: LValueReferenceType<ReferenceType<_ast2167>> {}; // LValueReference const PersistentBase<S> &
struct _ast2167: ConstQualifiedType<_ast2168> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2169: FunctionProtoType<_ast137, Pack<_ast2166>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2170: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2171: NamedDeclName<_str52>, TypeDecl<_ast2172> {}; // TemplateTypeParm S
struct _ast2173: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2178, Pack<_ast2174>>>, _ast2154>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2174: NamedDeclName<_str53>, ParmVarDecl<_ast2175> {}; // ParmVar that
struct _ast2175: LValueReferenceType<ReferenceType<_ast2176>> {}; // LValueReference const Local<S> &
struct _ast2176: ConstQualifiedType<_ast2177> {}; // TemplateSpecialization const Local<S>
struct _ast2178: FunctionProtoType<_ast137, Pack<_ast2175>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2179: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2180: NamedDeclName<_str52>, TypeDecl<_ast2181> {}; // TemplateTypeParm S
struct _ast2182: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2187, Pack<_ast2183>>>, _ast2154>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2183: NamedDeclName<_str53>, ParmVarDecl<_ast2184> {}; // ParmVar that
struct _ast2184: LValueReferenceType<ReferenceType<_ast2185>> {}; // LValueReference const PersistentBase<S> &
struct _ast2185: ConstQualifiedType<_ast2186> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2187: FunctionProtoType<_ast137, Pack<_ast2184>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2188: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2189: NamedDeclName<_str52>, TypeDecl<_ast2190> {}; // TemplateTypeParm S
struct _ast2191: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2196, Pack<_ast2192>>>, _ast2154>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2192: NamedDeclName<_str53>, ParmVarDecl<_ast2193> {}; // ParmVar that
struct _ast2193: LValueReferenceType<ReferenceType<_ast2194>> {}; // LValueReference const Local<S> &
struct _ast2194: ConstQualifiedType<_ast2195> {}; // TemplateSpecialization const Local<S>
struct _ast2196: FunctionProtoType<_ast137, Pack<_ast2193>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2197: NamedDeclName<_str79> {}; // FunctionTemplate SetWeak
struct _ast2198: NamedDeclName<_str80>, TypeDecl<_ast2199> {}; // TemplateTypeParm P
struct _ast2200: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2206, Pack<_ast2201, _ast2203, _ast2205>>>, _ast2132>, NamedDeclName<_str79> {}; // CXXMethod SetWeak
struct _ast2201: NamedDeclName<_str81>, ParmVarDecl<_ast2202> {}; // ParmVar parameter
struct _ast2202: PointerType<_ast2199> {}; // Pointer P *
struct _ast2203: NamedDeclName<_str82>, ParmVarDecl<_ast2204> {}; // ParmVar callback
struct _ast2205: NamedDeclName<_str83>, ParmVarDecl<_ast2094> {}; // ParmVar type
struct _ast2206: FunctionProtoType<_ast122, Pack<_ast2202, _ast2204, _ast2094>, SameType> {}; // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2207: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2132>, NamedDeclName<_str79> {}; // CXXMethod SetWeak
struct _ast2208: NamedDeclName<_str85> {}; // FunctionTemplate ClearWeak
struct _ast2209: NamedDeclName<_str80>, TypeDecl<_ast2210> {}; // TemplateTypeParm P
struct _ast2211: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2212, Pack<>>>, _ast2132>, NamedDeclName<_str85> {}; // CXXMethod ClearWeak
struct _ast2212: FunctionProtoType<_ast2213, Pack<>, SameType> {}; // FunctionProto P *()
struct _ast2213: PointerType<_ast2210> {}; // Pointer P *
struct _ast2214: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2132>, NamedDeclName<_str85> {}; // CXXMethod ClearWeak
struct _ast2215: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2111, Pack<_ast2216>>>, _ast2132>, NamedDeclName<_str86> {}; // CXXMethod AnnotateStrongRetainer
struct _ast2216: NamedDeclName<_str87>, ParmVarDecl<_ast2108> {}; // ParmVar label
struct _ast2217: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2154>, NamedDeclName<_str88> {}; // CXXMethod IsWeak
struct _ast2218: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2116, Pack<_ast2219>>>, _ast2132>, NamedDeclName<_str89> {}; // CXXMethod SetWrapperClassId
struct _ast2219: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast2220: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2118, Pack<>>>, _ast2154>, NamedDeclName<_str91> {}; // CXXMethod WrapperClassId
struct _ast2221: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2224, Pack<_ast2222>>>, _ast2132>> {}; // CXXConstructor PersistentBase
struct _ast2222: NamedDeclName<_str76>, ParmVarDecl<_ast2223> {}; // ParmVar other
struct _ast2223: LValueReferenceType<ReferenceType<_ast2155>> {}; // LValueReference const v8::PersistentBase<v8::Promise> &
struct _ast2224: FunctionProtoType<_ast122, Pack<_ast2223>, SameType> {}; // FunctionProto void (const v8::PersistentBase<v8::Promise> &)
struct _ast2225: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2224, Pack<_ast2226>>>, _ast2132>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2226: NamedDeclAnon<_str64>, ParmVarDecl<_ast2223> {}; // ParmVar 
struct _ast2227: NamedDeclName<_str74>, TypeDecl<_ast2228> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2228: StructOrClassRecordType<RecordType<_ast2227>> {}; // Record v8::PersistentBase<v8::FunctionTemplate>
struct _ast2229: NamedDeclName<_str74>, TypeDecl<_ast2230> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2230: StructOrClassRecordType<RecordType<_ast2229>> {}; // Record v8::PersistentBase<v8::AccessorSignature>
struct _ast2231: NamedDeclName<_str74>, TypeDecl<_ast2232> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2232: StructOrClassRecordType<RecordType<_ast2231>> {}; // Record v8::PersistentBase<v8::Signature>
struct _ast2233: NamedDeclName<_str74>, TypeDecl<_ast2234> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2234: StructOrClassRecordType<RecordType<_ast2233>> {}; // Record v8::PersistentBase<v8::UnboundScript>
struct _ast2235: NamedDeclName<_str74>, TypeDecl<_ast2236> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2236: StructOrClassRecordType<RecordType<_ast2235>> {}; // Record v8::PersistentBase<v8::Data>
struct _ast2237: NamedDeclName<_str74>, TypeDecl<_ast2238> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2238: StructOrClassRecordType<RecordType<_ast2237>> {}; // Record v8::PersistentBase<v8::Name>
struct _ast2239: NamedDeclName<_str74>, TypeDecl<_ast2240> {}; // ClassTemplateSpecialization PersistentBase
struct _ast2240: StructOrClassRecordType<RecordType<_ast2239>> {}; // Record v8::PersistentBase<v8::Primitive>
struct _ast2241: NamedDeclName<_str92> {}; // ClassTemplate Persistent
struct _ast2242: NamedDeclName<_str21>, TypeDecl<_ast2243> {}; // TemplateTypeParm T
struct _ast2244: NamedDeclName<_str93>, TypeDecl<_ast2245> {}; // TemplateTypeParm M
struct _ast2246: NamedDeclName<_str92>, TypeDecl<_ast2247> {}; // CXXRecord Persistent
struct _ast2248: NamedDeclName<_str92>, TypeDecl<_ast2249> {}; // ClassTemplateSpecialization Persistent
struct _ast2249: StructOrClassRecordType<RecordType<_ast2248>> {}; // Record v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2250: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2251>> {}; // CXXConstructor Persistent
struct _ast2251: PointerType<_ast2249> {}; // Pointer v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2252: NamedDeclName<_str92> {}; // FunctionTemplate Persistent
struct _ast2253: NamedDeclName<_str52>, TypeDecl<_ast2254> {}; // TemplateTypeParm S
struct _ast2255: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2259, Pack<_ast2256, _ast2257>>>, _ast2251>> {}; // CXXConstructor Persistent
struct _ast2256: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2257: NamedDeclName<_str53>, ParmVarDecl<_ast2258> {}; // ParmVar that
struct _ast2259: FunctionProtoType<_ast122, Pack<_ast198, _ast2258>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2260: NamedDeclName<_str92> {}; // FunctionTemplate Persistent
struct _ast2261: NamedDeclName<_str52>, TypeDecl<_ast2262> {}; // TemplateTypeParm S
struct _ast2263: NamedDeclName<_str94>, TypeDecl<_ast2264> {}; // TemplateTypeParm M2
struct _ast2265: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2271, Pack<_ast2266, _ast2267>>>, _ast2251>> {}; // CXXConstructor Persistent
struct _ast2266: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2267: NamedDeclName<_str53>, ParmVarDecl<_ast2268> {}; // ParmVar that
struct _ast2268: LValueReferenceType<ReferenceType<_ast2269>> {}; // LValueReference const Persistent<S, M2> &
struct _ast2269: ConstQualifiedType<_ast2270> {}; // TemplateSpecialization const Persistent<S, M2>
struct _ast2271: FunctionProtoType<_ast122, Pack<_ast198, _ast2268>, SameType> {}; // FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2272: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2276, Pack<_ast2273>>>, _ast2251>> {}; // CXXConstructor Persistent
struct _ast2273: NamedDeclName<_str53>, ParmVarDecl<_ast2274> {}; // ParmVar that
struct _ast2274: LValueReferenceType<ReferenceType<_ast2275>> {}; // LValueReference const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2275: ConstQualifiedType<_ast2249> {}; // Record const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2276: FunctionProtoType<_ast122, Pack<_ast2274>, SameType> {}; // FunctionProto void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2277: NamedDeclName<_str92> {}; // FunctionTemplate Persistent
struct _ast2278: NamedDeclName<_str52>, TypeDecl<_ast2279> {}; // TemplateTypeParm S
struct _ast2280: NamedDeclName<_str94>, TypeDecl<_ast2281> {}; // TemplateTypeParm M2
struct _ast2282: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2287, Pack<_ast2283>>>, _ast2251>> {}; // CXXConstructor Persistent
struct _ast2283: NamedDeclName<_str53>, ParmVarDecl<_ast2284> {}; // ParmVar that
struct _ast2284: LValueReferenceType<ReferenceType<_ast2285>> {}; // LValueReference const Persistent<S, M2> &
struct _ast2285: ConstQualifiedType<_ast2286> {}; // TemplateSpecialization const Persistent<S, M2>
struct _ast2287: FunctionProtoType<_ast122, Pack<_ast2284>, SameType> {}; // FunctionProto void (const Persistent<S, M2> &)
struct _ast2288: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2293, Pack<_ast2289>>>, _ast2251>> {}; // CXXConstructor Persistent
struct _ast2289: NamedDeclName<_str53>, ParmVarDecl<_ast2290> {}; // ParmVar that
struct _ast2290: LValueReferenceType<ReferenceType<_ast2291>> {}; // LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2291: ConstQualifiedType<_ast2292> {}; // TemplateSpecialization const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2293: FunctionProtoType<_ast122, Pack<_ast2290>, SameType> {}; // FunctionProto void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2294: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2296, Pack<_ast2295>>>, _ast2251>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2295: NamedDeclName<_str53>, ParmVarDecl<_ast2274> {}; // ParmVar that
struct _ast2296: FunctionProtoType<_ast2297, Pack<_ast2274>, SameType> {}; // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2297: LValueReferenceType<ReferenceType<_ast2249>> {}; // LValueReference v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2298: NamedDeclName<_str65> {}; // FunctionTemplate operator=
struct _ast2299: NamedDeclName<_str52>, TypeDecl<_ast2300> {}; // TemplateTypeParm S
struct _ast2301: NamedDeclName<_str94>, TypeDecl<_ast2302> {}; // TemplateTypeParm M2
struct _ast2303: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2308, Pack<_ast2304>>>, _ast2251>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2304: NamedDeclName<_str53>, ParmVarDecl<_ast2305> {}; // ParmVar that
struct _ast2305: LValueReferenceType<ReferenceType<_ast2306>> {}; // LValueReference const Persistent<S, M2> &
struct _ast2306: ConstQualifiedType<_ast2307> {}; // TemplateSpecialization const Persistent<S, M2>
struct _ast2308: FunctionProtoType<_ast2297, Pack<_ast2305>, SameType> {}; // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _ast2309: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2314, Pack<_ast2310>>>, _ast2251>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2310: NamedDeclName<_str53>, ParmVarDecl<_ast2311> {}; // ParmVar that
struct _ast2311: LValueReferenceType<ReferenceType<_ast2312>> {}; // LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2312: ConstQualifiedType<_ast2313> {}; // TemplateSpecialization const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2314: FunctionProtoType<_ast2297, Pack<_ast2311>, SameType> {}; // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2315: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2316, Pack<>>>, _ast2251>> {}; // CXXDestructor ~Persistent
struct _ast2316: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast2317: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast2318: NamedDeclName<_str52>, TypeDecl<_ast2319> {}; // TemplateTypeParm S
struct _ast2320: MethodDecl<FunctionDecl<_ast2325, Pack<_ast2321>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast2321: NamedDeclName<_str53>, ParmVarDecl<_ast2322> {}; // ParmVar that
struct _ast2322: LValueReferenceType<ReferenceType<_ast2323>> {}; // LValueReference const Persistent<S> &
struct _ast2323: ConstQualifiedType<_ast2324> {}; // TemplateSpecialization const Persistent<S>
struct _ast2325: FunctionProtoType<_ast2326, Pack<_ast2322>, SameType> {}; // FunctionProto Persistent<v8::Promise> &(const Persistent<S> &)
struct _ast2326: LValueReferenceType<ReferenceType<_ast2327>> {}; // LValueReference Persistent<v8::Promise> &
struct _ast2328: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast2329: NamedDeclName<_str52>, TypeDecl<_ast2330> {}; // TemplateTypeParm S
struct _ast2331: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2332, Pack<>>>, _ast2335>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast2332: FunctionProtoType<_ast2333, Pack<>, ConstQualifiedType> {}; // FunctionProto Persistent<S> &() const
struct _ast2333: LValueReferenceType<ReferenceType<_ast2334>> {}; // LValueReference Persistent<S> &
struct _ast2335: PointerType<_ast2275> {}; // Pointer const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2336: NamedDeclName<_str92>, TypeDecl<_ast2337> {}; // ClassTemplateSpecialization Persistent
struct _ast2337: StructOrClassRecordType<RecordType<_ast2336>> {}; // Record v8::Persistent<v8::Promise, v8::NonCopyablePersistentTraits<v8::Promise> >
struct _ast2338: NamedDeclName<_str92>, TypeDecl<_ast2339> {}; // ClassTemplateSpecialization Persistent
struct _ast2339: StructOrClassRecordType<RecordType<_ast2338>> {}; // Record v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >
struct _ast2340: NamedDeclName<_str95> {}; // ClassTemplate Global
struct _ast2341: NamedDeclName<_str21>, TypeDecl<_ast2342> {}; // TemplateTypeParm T
struct _ast2343: NamedDeclName<_str95>, TypeDecl<_ast2344> {}; // CXXRecord Global
struct _ast2345: NamedDeclName<_str96> {}; // ClassTemplate TracedGlobal
struct _ast2346: NamedDeclName<_str21>, TypeDecl<_ast2347> {}; // TemplateTypeParm T
struct _ast2348: NamedDeclName<_str96>, TypeDecl<_ast2349> {}; // CXXRecord TracedGlobal
struct _ast2350: NamedDeclName<_str96>, TypeDecl<_ast2351> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2351: StructOrClassRecordType<RecordType<_ast2350>> {}; // Record v8::TracedGlobal<v8::Value>
struct _ast2352: NamedDeclName<_str96>, TypeDecl<_ast2353> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2353: StructOrClassRecordType<RecordType<_ast2352>> {}; // Record v8::TracedGlobal<v8::Integer>
struct _ast2354: NamedDeclName<_str96>, TypeDecl<_ast2355> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2355: StructOrClassRecordType<RecordType<_ast2354>> {}; // Record v8::TracedGlobal<v8::PrimitiveArray>
struct _ast2356: NamedDeclName<_str96>, TypeDecl<_ast2357> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2357: StructOrClassRecordType<RecordType<_ast2356>> {}; // Record v8::TracedGlobal<v8::Boolean>
struct _ast2358: NamedDeclName<_str96>, TypeDecl<_ast2359> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2359: StructOrClassRecordType<RecordType<_ast2358>> {}; // Record v8::TracedGlobal<v8::String>
struct _ast2360: NamedDeclName<_str96>, TypeDecl<_ast2361> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2361: StructOrClassRecordType<RecordType<_ast2360>> {}; // Record v8::TracedGlobal<v8::Object>
struct _ast2362: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2363, Pack<>>>, _ast2364>> {}; // CXXConstructor TracedGlobal
struct _ast2363: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast2364: PointerType<_ast2361> {}; // Pointer v8::TracedGlobal<v8::Object> *
struct _ast2365: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2366, Pack<>>>, _ast2364>> {}; // CXXDestructor ~TracedGlobal
struct _ast2366: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast2367: NamedDeclName<_str96> {}; // FunctionTemplate TracedGlobal
struct _ast2368: NamedDeclName<_str52>, TypeDecl<_ast2369> {}; // TemplateTypeParm S
struct _ast2370: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2374, Pack<_ast2371, _ast2372>>>, _ast2364>> {}; // CXXConstructor TracedGlobal
struct _ast2371: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2372: NamedDeclName<_str53>, ParmVarDecl<_ast2373> {}; // ParmVar that
struct _ast2374: FunctionProtoType<_ast122, Pack<_ast198, _ast2373>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2375: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2378, Pack<_ast2376>>>, _ast2364>> {}; // CXXConstructor TracedGlobal
struct _ast2376: NamedDeclName<_str76>, ParmVarDecl<_ast2377> {}; // ParmVar other
struct _ast2377: RValueReferenceType<ReferenceType<_ast2361>> {}; // RValueReference v8::TracedGlobal<v8::Object> &&
struct _ast2378: FunctionProtoType<_ast122, Pack<_ast2377>, SameType> {}; // FunctionProto void (v8::TracedGlobal<v8::Object> &&)
struct _ast2379: NamedDeclName<_str65> {}; // FunctionTemplate operator=
struct _ast2380: NamedDeclName<_str52>, TypeDecl<_ast2381> {}; // TemplateTypeParm S
struct _ast2382: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2386, Pack<_ast2383>>>, _ast2364>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2383: NamedDeclName<_str97>, ParmVarDecl<_ast2384> {}; // ParmVar rhs
struct _ast2384: RValueReferenceType<ReferenceType<_ast2385>> {}; // RValueReference TracedGlobal<S> &&
struct _ast2386: FunctionProtoType<_ast2387, Pack<_ast2384>, SameType> {}; // FunctionProto v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _ast2387: LValueReferenceType<ReferenceType<_ast2361>> {}; // LValueReference v8::TracedGlobal<v8::Object> &
struct _ast2388: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2392, Pack<_ast2389>>>, _ast2364>> {}; // CXXConstructor TracedGlobal
struct _ast2389: NamedDeclAnon<_str64>, ParmVarDecl<_ast2390> {}; // ParmVar 
struct _ast2390: LValueReferenceType<ReferenceType<_ast2391>> {}; // LValueReference const v8::TracedGlobal<v8::Object> &
struct _ast2391: ConstQualifiedType<_ast2361> {}; // Record const v8::TracedGlobal<v8::Object>
struct _ast2392: FunctionProtoType<_ast122, Pack<_ast2390>, SameType> {}; // FunctionProto void (const v8::TracedGlobal<v8::Object> &)
struct _ast2393: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2392, Pack<_ast2394>>>, _ast2364>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2394: NamedDeclAnon<_str64>, ParmVarDecl<_ast2390> {}; // ParmVar 
struct _ast2395: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2396>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2396: PointerType<_ast2391> {}; // Pointer const v8::TracedGlobal<v8::Object> *
struct _ast2397: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2364>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2398: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2399: NamedDeclName<_str52>, TypeDecl<_ast2400> {}; // TemplateTypeParm S
struct _ast2401: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2407, Pack<_ast2402, _ast2403>>>, _ast2364>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2402: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2403: NamedDeclName<_str76>, ParmVarDecl<_ast2404> {}; // ParmVar other
struct _ast2404: LValueReferenceType<ReferenceType<_ast2405>> {}; // LValueReference const Local<S> &
struct _ast2405: ConstQualifiedType<_ast2406> {}; // TemplateSpecialization const Local<S>
struct _ast2407: FunctionProtoType<_ast122, Pack<_ast198, _ast2404>, SameType> {}; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2408: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2410, Pack<_ast2409>>>, _ast2396>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast2409: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2410: FunctionProtoType<_ast2411, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _ast2412: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast2413: NamedDeclName<_str52>, TypeDecl<_ast2414> {}; // TemplateTypeParm S
struct _ast2415: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2416, Pack<>>>, _ast2396>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast2416: FunctionProtoType<_ast2417, Pack<>, ConstQualifiedType> {}; // FunctionProto TracedGlobal<S> &() const
struct _ast2417: LValueReferenceType<ReferenceType<_ast2418>> {}; // LValueReference TracedGlobal<S> &
struct _ast2419: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2420: NamedDeclName<_str52>, TypeDecl<_ast2421> {}; // TemplateTypeParm S
struct _ast2422: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2427, Pack<_ast2423>>>, _ast2396>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2423: NamedDeclName<_str53>, ParmVarDecl<_ast2424> {}; // ParmVar that
struct _ast2424: LValueReferenceType<ReferenceType<_ast2425>> {}; // LValueReference const TracedGlobal<S> &
struct _ast2425: ConstQualifiedType<_ast2426> {}; // TemplateSpecialization const TracedGlobal<S>
struct _ast2427: FunctionProtoType<_ast137, Pack<_ast2424>, ConstQualifiedType> {}; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast2428: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2429: NamedDeclName<_str52>, TypeDecl<_ast2430> {}; // TemplateTypeParm S
struct _ast2431: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2436, Pack<_ast2432>>>, _ast2396>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2432: NamedDeclName<_str53>, ParmVarDecl<_ast2433> {}; // ParmVar that
struct _ast2433: LValueReferenceType<ReferenceType<_ast2434>> {}; // LValueReference const Local<S> &
struct _ast2434: ConstQualifiedType<_ast2435> {}; // TemplateSpecialization const Local<S>
struct _ast2436: FunctionProtoType<_ast137, Pack<_ast2433>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2437: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2438: NamedDeclName<_str52>, TypeDecl<_ast2439> {}; // TemplateTypeParm S
struct _ast2440: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2445, Pack<_ast2441>>>, _ast2396>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2441: NamedDeclName<_str53>, ParmVarDecl<_ast2442> {}; // ParmVar that
struct _ast2442: LValueReferenceType<ReferenceType<_ast2443>> {}; // LValueReference const TracedGlobal<S> &
struct _ast2443: ConstQualifiedType<_ast2444> {}; // TemplateSpecialization const TracedGlobal<S>
struct _ast2445: FunctionProtoType<_ast137, Pack<_ast2442>, ConstQualifiedType> {}; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast2446: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2447: NamedDeclName<_str52>, TypeDecl<_ast2448> {}; // TemplateTypeParm S
struct _ast2449: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2454, Pack<_ast2450>>>, _ast2396>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2450: NamedDeclName<_str53>, ParmVarDecl<_ast2451> {}; // ParmVar that
struct _ast2451: LValueReferenceType<ReferenceType<_ast2452>> {}; // LValueReference const Local<S> &
struct _ast2452: ConstQualifiedType<_ast2453> {}; // TemplateSpecialization const Local<S>
struct _ast2454: FunctionProtoType<_ast137, Pack<_ast2451>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2455: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2116, Pack<_ast2456>>>, _ast2364>, NamedDeclName<_str89> {}; // CXXMethod SetWrapperClassId
struct _ast2456: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast2457: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2118, Pack<>>>, _ast2396>, NamedDeclName<_str91> {}; // CXXMethod WrapperClassId
struct _ast2458: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2463, Pack<_ast2459, _ast2461>>>, _ast2364>, NamedDeclName<_str98> {}; // CXXMethod SetFinalizationCallback
struct _ast2459: NamedDeclName<_str81>, ParmVarDecl<_ast2460> {}; // ParmVar parameter
struct _ast2460: PointerType<_ast122> {}; // Pointer void *
struct _ast2461: NamedDeclName<_str82>, ParmVarDecl<_ast2462> {}; // ParmVar callback
struct _ast2463: FunctionProtoType<_ast122, Pack<_ast2460, _ast2462>, SameType> {}; // FunctionProto void (void *, WeakCallbackInfo<void>::Callback)
struct _ast2464: NamedDeclName<_str96>, TypeDecl<_ast2465> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2465: StructOrClassRecordType<RecordType<_ast2464>> {}; // Record v8::TracedGlobal<v8::Function>
struct _ast2466: NamedDeclName<_str96>, TypeDecl<_ast2467> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2467: StructOrClassRecordType<RecordType<_ast2466>> {}; // Record v8::TracedGlobal<v8::Context>
struct _ast2468: NamedDeclName<_str96>, TypeDecl<_ast2469> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2469: StructOrClassRecordType<RecordType<_ast2468>> {}; // Record v8::TracedGlobal<v8::FunctionTemplate>
struct _ast2470: NamedDeclName<_str96>, TypeDecl<_ast2471> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2471: StructOrClassRecordType<RecordType<_ast2470>> {}; // Record v8::TracedGlobal<v8::AccessorSignature>
struct _ast2472: NamedDeclName<_str96>, TypeDecl<_ast2473> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2473: StructOrClassRecordType<RecordType<_ast2472>> {}; // Record v8::TracedGlobal<v8::Signature>
struct _ast2474: NamedDeclName<_str96>, TypeDecl<_ast2475> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2475: StructOrClassRecordType<RecordType<_ast2474>> {}; // Record v8::TracedGlobal<v8::Promise>
struct _ast2476: NamedDeclName<_str96>, TypeDecl<_ast2477> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2477: StructOrClassRecordType<RecordType<_ast2476>> {}; // Record v8::TracedGlobal<v8::UnboundScript>
struct _ast2478: NamedDeclName<_str96>, TypeDecl<_ast2479> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2479: StructOrClassRecordType<RecordType<_ast2478>> {}; // Record v8::TracedGlobal<v8::Data>
struct _ast2480: NamedDeclName<_str96>, TypeDecl<_ast2481> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2481: StructOrClassRecordType<RecordType<_ast2480>> {}; // Record v8::TracedGlobal<v8::Name>
struct _ast2482: NamedDeclName<_str96>, TypeDecl<_ast2483> {}; // ClassTemplateSpecialization TracedGlobal
struct _ast2483: StructOrClassRecordType<RecordType<_ast2482>> {}; // Record v8::TracedGlobal<v8::Primitive>
struct _ast2484: NamedDeclName<_str99> {}; // ClassTemplate PersistentValueMap
struct _ast2485: NamedDeclName<_str100>, TypeDecl<_ast2486> {}; // TemplateTypeParm K
struct _ast2487: NamedDeclName<_str101>, TypeDecl<_ast2488> {}; // TemplateTypeParm V
struct _ast2489: NamedDeclName<_str21>, TypeDecl<_ast2490> {}; // TemplateTypeParm T
struct _ast2491: NamedDeclName<_str99>, TypeDecl<_ast2492> {}; // CXXRecord PersistentValueMap
struct _ast2493: NamedDeclName<_str102> {}; // ClassTemplate PersistentValueMapBase
struct _ast2494: NamedDeclName<_str100>, TypeDecl<_ast2495> {}; // TemplateTypeParm K
struct _ast2496: NamedDeclName<_str101>, TypeDecl<_ast2497> {}; // TemplateTypeParm V
struct _ast2498: NamedDeclName<_str21>, TypeDecl<_ast2499> {}; // TemplateTypeParm T
struct _ast2500: NamedDeclName<_str102>, TypeDecl<_ast2501> {}; // CXXRecord PersistentValueMapBase
struct _ast2502: NamedDeclName<_str103> {}; // ClassTemplate GlobalValueMap
struct _ast2503: NamedDeclName<_str100>, TypeDecl<_ast2504> {}; // TemplateTypeParm K
struct _ast2505: NamedDeclName<_str101>, TypeDecl<_ast2506> {}; // TemplateTypeParm V
struct _ast2507: NamedDeclName<_str21>, TypeDecl<_ast2508> {}; // TemplateTypeParm T
struct _ast2509: NamedDeclName<_str103>, TypeDecl<_ast2510> {}; // CXXRecord GlobalValueMap
struct _ast2511: NamedDeclName<_str104> {}; // ClassTemplate PersistentValueVector
struct _ast2512: NamedDeclName<_str101>, TypeDecl<_ast2513> {}; // TemplateTypeParm V
struct _ast2514: NamedDeclName<_str21>, TypeDecl<_ast2515> {}; // TemplateTypeParm T
struct _ast2516: NamedDeclName<_str104>, TypeDecl<_ast2517> {}; // CXXRecord PersistentValueVector
struct _ast2518: NamedDeclName<_str105> {}; // ClassTemplate WeakCallbackObject
struct _ast2519: NamedDeclName<_str21>, TypeDecl<_ast2520> {}; // TemplateTypeParm T
struct _ast2521: NamedDeclName<_str80>, TypeDecl<_ast2522> {}; // TemplateTypeParm P
struct _ast2523: NamedDeclName<_str105>, TypeDecl<_ast2524> {}; // CXXRecord WeakCallbackObject
struct _ast2525: NamedDeclName<_str106> {}; // ClassTemplate FunctionCallbackInfo
struct _ast2526: NamedDeclName<_str21>, TypeDecl<_ast2527> {}; // TemplateTypeParm T
struct _ast2528: NamedDeclName<_str106>, TypeDecl<_ast2529> {}; // CXXRecord FunctionCallbackInfo
struct _ast2530: NamedDeclName<_str106>, TypeDecl<_ast2531> {}; // ClassTemplateSpecialization FunctionCallbackInfo
struct _ast2531: StructOrClassRecordType<RecordType<_ast2530>> {}; // Record v8::FunctionCallbackInfo<v8::Value>
struct _ast2532: NamedDeclName<_str107> {}; // ClassTemplate PropertyCallbackInfo
struct _ast2533: NamedDeclName<_str21>, TypeDecl<_ast2534> {}; // TemplateTypeParm T
struct _ast2535: NamedDeclName<_str107>, TypeDecl<_ast2536> {}; // CXXRecord PropertyCallbackInfo
struct _ast2537: NamedDeclName<_str107>, TypeDecl<_ast2538> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2538: StructOrClassRecordType<RecordType<_ast2537>> {}; // Record v8::PropertyCallbackInfo<v8::Value>
struct _ast2539: NamedDeclName<_str107>, TypeDecl<_ast2540> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2540: StructOrClassRecordType<RecordType<_ast2539>> {}; // Record v8::PropertyCallbackInfo<void>
struct _ast2541: NamedDeclName<_str107>, TypeDecl<_ast2542> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2542: StructOrClassRecordType<RecordType<_ast2541>> {}; // Record v8::PropertyCallbackInfo<v8::Integer>
struct _ast2543: NamedDeclName<_str107>, TypeDecl<_ast2544> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2544: StructOrClassRecordType<RecordType<_ast2543>> {}; // Record v8::PropertyCallbackInfo<v8::Boolean>
struct _ast2545: NamedDeclName<_str107>, TypeDecl<_ast2546> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _ast2546: StructOrClassRecordType<RecordType<_ast2545>> {}; // Record v8::PropertyCallbackInfo<v8::Array>
struct _ast2547: NamedDeclName<_str108>, TypeDecl<_ast2548> {}; // CXXRecord CallHandlerHelper
struct _ast2548: StructOrClassRecordType<RecordType<_ast2547>> {}; // Record v8::CallHandlerHelper
struct _ast2549: NamedDeclName<_str109>, TypeDecl<_ast2550> {}; // CXXRecord EscapableHandleScope
struct _ast2550: StructOrClassRecordType<RecordType<_ast2549>> {}; // Record v8::EscapableHandleScope
struct _ast2551: NamedDeclName<_str110> {}; // ClassTemplate ReturnValue
struct _ast2552: NamedDeclName<_str21>, TypeDecl<_ast2553> {}; // TemplateTypeParm T
struct _ast2554: NamedDeclName<_str110>, TypeDecl<_ast2555> {}; // CXXRecord ReturnValue
struct _ast2556: NamedDeclName<_str111> {}; // Namespace debug
struct _ast2557: NamedDeclName<_str112>, TypeDecl<_ast2558> {}; // CXXRecord ConsoleCallArguments
struct _ast2558: StructOrClassRecordType<RecordType<_ast2557>> {}; // Record v8::debug::ConsoleCallArguments
struct _ast2559: NamedDeclName<_str21>, TypeDecl<_ast2560> {}; // TemplateTypeParm T
struct _ast2561: NamedDeclName<_str51>, TypeDecl<_ast117> {}; // CXXRecord Local
struct _ast2562: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2563>> {}; // CXXConstructor Local<T>
struct _ast2563: PointerType<_ast117> {}; // Pointer Local<T> *
struct _ast2564: NamedDeclName<_str113> {}; // FunctionTemplate Local<T>
struct _ast2565: NamedDeclName<_str52>, TypeDecl<_ast2566> {}; // TemplateTypeParm S
struct _ast2567: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2570, Pack<_ast2568>>>, _ast2563>> {}; // CXXConstructor Local<T>
struct _ast2568: NamedDeclName<_str53>, ParmVarDecl<_ast2569> {}; // ParmVar that
struct _ast2570: FunctionProtoType<_ast122, Pack<_ast2569>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast2571: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2572>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2572: PointerType<_ast2573> {}; // Pointer const Local<T> *
struct _ast2573: ConstQualifiedType<_ast117> {}; // InjectedClassName const Local<T>
struct _ast2574: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2563>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast2575: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2576, Pack<>>>, _ast2572>, NamedDeclName<_str56> {}; // CXXMethod operator->
struct _ast2576: FunctionProtoType<_ast2577, Pack<>, ConstQualifiedType> {}; // FunctionProto T *() const
struct _ast2577: PointerType<_ast2560> {}; // Pointer T *
struct _ast2578: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2576, Pack<>>>, _ast2572>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast2579: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2580: NamedDeclName<_str52>, TypeDecl<_ast2581> {}; // TemplateTypeParm S
struct _ast2582: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2587, Pack<_ast2583>>>, _ast2572>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2583: NamedDeclName<_str53>, ParmVarDecl<_ast2584> {}; // ParmVar that
struct _ast2584: LValueReferenceType<ReferenceType<_ast2585>> {}; // LValueReference const Local<S> &
struct _ast2585: ConstQualifiedType<_ast2586> {}; // TemplateSpecialization const Local<S>
struct _ast2587: FunctionProtoType<_ast137, Pack<_ast2584>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2588: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2589: NamedDeclName<_str52>, TypeDecl<_ast2590> {}; // TemplateTypeParm S
struct _ast2591: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2596, Pack<_ast2592>>>, _ast2572>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2592: NamedDeclName<_str53>, ParmVarDecl<_ast2593> {}; // ParmVar that
struct _ast2593: LValueReferenceType<ReferenceType<_ast2594>> {}; // LValueReference const PersistentBase<S> &
struct _ast2594: ConstQualifiedType<_ast2595> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2596: FunctionProtoType<_ast137, Pack<_ast2593>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2597: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2598: NamedDeclName<_str52>, TypeDecl<_ast2599> {}; // TemplateTypeParm S
struct _ast2600: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2605, Pack<_ast2601>>>, _ast2572>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2601: NamedDeclName<_str53>, ParmVarDecl<_ast2602> {}; // ParmVar that
struct _ast2602: LValueReferenceType<ReferenceType<_ast2603>> {}; // LValueReference const Local<S> &
struct _ast2603: ConstQualifiedType<_ast2604> {}; // TemplateSpecialization const Local<S>
struct _ast2605: FunctionProtoType<_ast137, Pack<_ast2602>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2606: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2607: NamedDeclName<_str52>, TypeDecl<_ast2608> {}; // TemplateTypeParm S
struct _ast2609: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2614, Pack<_ast2610>>>, _ast2572>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2610: NamedDeclName<_str53>, ParmVarDecl<_ast2611> {}; // ParmVar that
struct _ast2611: LValueReferenceType<ReferenceType<_ast2612>> {}; // LValueReference const Persistent<S> &
struct _ast2612: ConstQualifiedType<_ast2613> {}; // TemplateSpecialization const Persistent<S>
struct _ast2614: FunctionProtoType<_ast137, Pack<_ast2611>, ConstQualifiedType> {}; // FunctionProto bool (const Persistent<S> &) const
struct _ast2615: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast2616: NamedDeclName<_str52>, TypeDecl<_ast2617> {}; // TemplateTypeParm S
struct _ast2618: MethodDecl<FunctionDecl<_ast2621, Pack<_ast2619>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast2619: NamedDeclName<_str53>, ParmVarDecl<_ast2620> {}; // ParmVar that
struct _ast2621: FunctionProtoType<_ast2622, Pack<_ast2620>, SameType> {}; // FunctionProto Local<T> (Local<S>)
struct _ast2623: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast2624: NamedDeclName<_str52>, TypeDecl<_ast2625> {}; // TemplateTypeParm S
struct _ast2626: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2627, Pack<>>>, _ast2572>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast2627: FunctionProtoType<_ast2628, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<S> () const
struct _ast2629: MethodDecl<FunctionDecl<_ast2633, Pack<_ast2630, _ast2631>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast2630: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2631: NamedDeclName<_str53>, ParmVarDecl<_ast2632> {}; // ParmVar that
struct _ast2633: FunctionProtoType<_ast2634, Pack<_ast198, _ast2632>, SameType> {}; // FunctionProto Local<T> (v8::Isolate *, Local<T>)
struct _ast2635: MethodDecl<FunctionDecl<_ast2641, Pack<_ast2636, _ast2637>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast2636: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2637: NamedDeclName<_str53>, ParmVarDecl<_ast2638> {}; // ParmVar that
struct _ast2638: LValueReferenceType<ReferenceType<_ast2639>> {}; // LValueReference const PersistentBase<T> &
struct _ast2639: ConstQualifiedType<_ast2640> {}; // TemplateSpecialization const PersistentBase<T>
struct _ast2641: FunctionProtoType<_ast2642, Pack<_ast198, _ast2638>, SameType> {}; // FunctionProto Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _ast2643: MethodDecl<FunctionDecl<_ast2649, Pack<_ast2644, _ast2645>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast2644: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2645: NamedDeclName<_str53>, ParmVarDecl<_ast2646> {}; // ParmVar that
struct _ast2646: LValueReferenceType<ReferenceType<_ast2647>> {}; // LValueReference const TracedGlobal<T> &
struct _ast2647: ConstQualifiedType<_ast2648> {}; // TemplateSpecialization const TracedGlobal<T>
struct _ast2649: FunctionProtoType<_ast2650, Pack<_ast198, _ast2646>, SameType> {}; // FunctionProto Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _ast2651: NamedDeclName<_str114> {}; // TypeAliasTemplate Handle
struct _ast2652: NamedDeclName<_str114>, TypeDecl<_ast2653> {}; // TypeAlias Handle
struct _ast2653: TypedefType<_ast2652> {}; // Typedef v8::Handle
struct _ast2654: NamedDeclName<_str21>, TypeDecl<_ast2655> {}; // TemplateTypeParm T
struct _ast2656: NamedDeclName<_str21>, TypeDecl<_ast2657> {}; // TemplateTypeParm T
struct _ast2658: NamedDeclName<_str66>, TypeDecl<_ast1787> {}; // CXXRecord MaybeLocal
struct _ast2659: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2660>> {}; // CXXConstructor MaybeLocal<T>
struct _ast2660: PointerType<_ast1787> {}; // Pointer MaybeLocal<T> *
struct _ast2661: NamedDeclName<_str115> {}; // FunctionTemplate MaybeLocal<T>
struct _ast2662: NamedDeclName<_str52>, TypeDecl<_ast2663> {}; // TemplateTypeParm S
struct _ast2664: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2667, Pack<_ast2665>>>, _ast2660>> {}; // CXXConstructor MaybeLocal<T>
struct _ast2665: NamedDeclName<_str53>, ParmVarDecl<_ast2666> {}; // ParmVar that
struct _ast2667: FunctionProtoType<_ast122, Pack<_ast2666>, SameType> {}; // FunctionProto void (Local<S>)
struct _ast2668: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2669>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2669: PointerType<_ast2670> {}; // Pointer const MaybeLocal<T> *
struct _ast2670: ConstQualifiedType<_ast1787> {}; // InjectedClassName const MaybeLocal<T>
struct _ast2671: NamedDeclName<_str67> {}; // FunctionTemplate ToLocal
struct _ast2672: NamedDeclName<_str52>, TypeDecl<_ast2673> {}; // TemplateTypeParm S
struct _ast2674: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2678, Pack<_ast2675>>>, _ast2669>, NamedDeclName<_str67> {}; // CXXMethod ToLocal
struct _ast2675: NamedDeclName<_str68>, ParmVarDecl<_ast2676> {}; // ParmVar out
struct _ast2676: PointerType<_ast2677> {}; // Pointer Local<S> *
struct _ast2678: FunctionProtoType<_ast137, Pack<_ast2676>, ConstQualifiedType> {}; // FunctionProto bool (Local<S> *) const
struct _ast2679: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2680, Pack<>>>, _ast2660>, NamedDeclName<_str69> {}; // CXXMethod ToLocalChecked
struct _ast2680: FunctionProtoType<_ast2681, Pack<>, SameType> {}; // FunctionProto Local<T> ()
struct _ast2682: NamedDeclName<_str70> {}; // FunctionTemplate FromMaybe
struct _ast2683: NamedDeclName<_str52>, TypeDecl<_ast2684> {}; // TemplateTypeParm S
struct _ast2685: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2688, Pack<_ast2686>>>, _ast2669>, NamedDeclName<_str70> {}; // CXXMethod FromMaybe
struct _ast2686: NamedDeclName<_str71>, ParmVarDecl<_ast2687> {}; // ParmVar default_value
struct _ast2688: FunctionProtoType<_ast2689, Pack<_ast2687>, ConstQualifiedType> {}; // FunctionProto Local<S> (Local<S>) const
struct _ast2690: NamedDeclName<_str21>, TypeDecl<_ast2691> {}; // TemplateTypeParm T
struct _ast2692: NamedDeclName<_str72>, TypeDecl<_ast1992> {}; // CXXRecord Eternal
struct _ast2693: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2694>> {}; // CXXConstructor Eternal<T>
struct _ast2694: PointerType<_ast1992> {}; // Pointer Eternal<T> *
struct _ast2695: NamedDeclName<_str116> {}; // FunctionTemplate Eternal<T>
struct _ast2696: NamedDeclName<_str52>, TypeDecl<_ast2697> {}; // TemplateTypeParm S
struct _ast2698: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2702, Pack<_ast2699, _ast2700>>>, _ast2694>> {}; // CXXConstructor Eternal<T>
struct _ast2699: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2700: NamedDeclName<_str117>, ParmVarDecl<_ast2701> {}; // ParmVar handle
struct _ast2702: FunctionProtoType<_ast122, Pack<_ast198, _ast2701>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2703: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2705, Pack<_ast2704>>>, _ast2707>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast2704: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2705: FunctionProtoType<_ast2706, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<T> (v8::Isolate *) const
struct _ast2707: PointerType<_ast2708> {}; // Pointer const Eternal<T> *
struct _ast2708: ConstQualifiedType<_ast1992> {}; // InjectedClassName const Eternal<T>
struct _ast2709: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2707>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2710: NamedDeclName<_str118> {}; // FunctionTemplate Set
struct _ast2711: NamedDeclName<_str52>, TypeDecl<_ast2712> {}; // TemplateTypeParm S
struct _ast2713: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2717, Pack<_ast2714, _ast2715>>>, _ast2694>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast2714: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2715: NamedDeclName<_str117>, ParmVarDecl<_ast2716> {}; // ParmVar handle
struct _ast2717: FunctionProtoType<_ast122, Pack<_ast198, _ast2716>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2718: NamedDeclName<_str119> {}; // Var kInternalFieldsInWeakCallback
struct _ast2719: NamedDeclName<_str120> {}; // Var kEmbedderFieldsInWeakCallback
struct _ast2720: NamedDeclName<_str121> {}; // ClassTemplate WeakCallbackInfo
struct _ast2721: NamedDeclName<_str21>, TypeDecl<_ast2722> {}; // TemplateTypeParm T
struct _ast2723: NamedDeclName<_str121>, TypeDecl<_ast2724> {}; // CXXRecord WeakCallbackInfo
struct _ast2725: NamedDeclName<_str121>, TypeDecl<_ast2724> {}; // CXXRecord WeakCallbackInfo
struct _ast2726: NamedDeclName<_str122>, TypeDecl<_ast2727> {}; // Typedef Callback
struct _ast2727: TypedefType<_ast2726> {}; // Typedef v8::WeakCallbackInfo::Callback
struct _ast2728: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2736, Pack<_ast2729, _ast2730, _ast2732, _ast2734>>>, _ast2737>> {}; // CXXConstructor WeakCallbackInfo<T>
struct _ast2729: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2730: NamedDeclName<_str81>, ParmVarDecl<_ast2731> {}; // ParmVar parameter
struct _ast2731: PointerType<_ast2722> {}; // Pointer T *
struct _ast2732: NamedDeclName<_str123>, ParmVarDecl<_ast2733> {}; // ParmVar embedder_fields
struct _ast2734: NamedDeclName<_str82>, ParmVarDecl<_ast2735> {}; // ParmVar callback
struct _ast2735: PointerType<_ast2727> {}; // Pointer v8::WeakCallbackInfo::Callback *
struct _ast2736: FunctionProtoType<_ast122, Pack<_ast198, _ast2731, _ast2733, _ast2735>, SameType> {}; // FunctionProto void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
struct _ast2737: PointerType<_ast2724> {}; // Pointer WeakCallbackInfo<T> *
struct _ast2738: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast2740>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast2739: FunctionProtoType<_ast198, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Isolate *() const
struct _ast2740: PointerType<_ast2741> {}; // Pointer const WeakCallbackInfo<T> *
struct _ast2741: ConstQualifiedType<_ast2724> {}; // InjectedClassName const WeakCallbackInfo<T>
struct _ast2742: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2743, Pack<>>>, _ast2740>, NamedDeclName<_str125> {}; // CXXMethod GetParameter
struct _ast2743: FunctionProtoType<_ast2731, Pack<>, ConstQualifiedType> {}; // FunctionProto T *() const
struct _ast2744: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2746, Pack<_ast2745>>>, _ast2740>, NamedDeclName<_str126> {}; // CXXMethod GetInternalField
struct _ast2745: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast2746: FunctionProtoType<_ast2460, Pack<_ast2095>, ConstQualifiedType> {}; // FunctionProto void *(int) const
struct _ast2747: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2749, Pack<_ast2748>>>, _ast2740>, NamedDeclName<_str128> {}; // CXXMethod SetSecondPassCallback
struct _ast2748: NamedDeclName<_str82>, ParmVarDecl<_ast2727> {}; // ParmVar callback
struct _ast2749: FunctionProtoType<_ast122, Pack<_ast2727>, ConstQualifiedType> {}; // FunctionProto void (v8::WeakCallbackInfo::Callback) const
struct _ast2750: NamedDeclName<_str121>, TypeDecl<_ast2751> {}; // ClassTemplateSpecialization WeakCallbackInfo
struct _ast2751: StructOrClassRecordType<RecordType<_ast2750>> {}; // Record v8::WeakCallbackInfo<void>
struct _ast2752: NamedDeclName<_str122>, TypeDecl<_ast2753> {}; // Typedef Callback
struct _ast2753: TypedefType<_ast2752> {}; // Typedef v8::WeakCallbackInfo<void>::Callback
struct _ast2754: NamedDeclName<_str129>, ParmVarDecl<_ast2755> {}; // ParmVar data
struct _ast2755: LValueReferenceType<ReferenceType<_ast2756>> {}; // LValueReference const WeakCallbackInfo<void> &
struct _ast2756: ConstQualifiedType<_ast2757> {}; // TemplateSpecialization const WeakCallbackInfo<void>
struct _ast2758: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2766, Pack<_ast2759, _ast2760, _ast2763, _ast2764>>>, _ast2767>> {}; // CXXConstructor WeakCallbackInfo
struct _ast2759: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2760: NamedDeclName<_str81>, ParmVarDecl<_ast2761> {}; // ParmVar parameter
struct _ast2761: PointerType<_ast2762> {}; // Pointer void *
struct _ast2763: NamedDeclName<_str123>, ParmVarDecl<_ast2733> {}; // ParmVar embedder_fields
struct _ast2764: NamedDeclName<_str82>, ParmVarDecl<_ast2765> {}; // ParmVar callback
struct _ast2765: PointerType<_ast2753> {}; // Pointer v8::WeakCallbackInfo<void>::Callback *
struct _ast2766: FunctionProtoType<_ast122, Pack<_ast198, _ast2761, _ast2733, _ast2765>, SameType> {}; // FunctionProto void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
struct _ast2767: PointerType<_ast2751> {}; // Pointer v8::WeakCallbackInfo<void> *
struct _ast2768: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast2769>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast2769: PointerType<_ast2770> {}; // Pointer const v8::WeakCallbackInfo<void> *
struct _ast2770: ConstQualifiedType<_ast2751> {}; // Record const v8::WeakCallbackInfo<void>
struct _ast2771: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2772, Pack<>>>, _ast2769>, NamedDeclName<_str125> {}; // CXXMethod GetParameter
struct _ast2772: FunctionProtoType<_ast2761, Pack<>, ConstQualifiedType> {}; // FunctionProto void *() const
struct _ast2773: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2746, Pack<_ast2774>>>, _ast2769>, NamedDeclName<_str126> {}; // CXXMethod GetInternalField
struct _ast2774: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast2775: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2777, Pack<_ast2776>>>, _ast2769>, NamedDeclName<_str128> {}; // CXXMethod SetSecondPassCallback
struct _ast2776: NamedDeclName<_str82>, ParmVarDecl<_ast2753> {}; // ParmVar callback
struct _ast2777: FunctionProtoType<_ast122, Pack<_ast2753>, ConstQualifiedType> {}; // FunctionProto void (v8::WeakCallbackInfo<void>::Callback) const
struct _ast2778: NamedDeclName<_str130> {}; // EnumConstant kParameter
struct _ast2779: NamedDeclName<_str131> {}; // EnumConstant kInternalFields
struct _ast2780: NamedDeclName<_str132> {}; // EnumConstant kFinalizer
struct _ast2781: NamedDeclName<_str21>, TypeDecl<_ast2782> {}; // TemplateTypeParm T
struct _ast2783: NamedDeclName<_str74>, TypeDecl<_ast2006> {}; // CXXRecord PersistentBase
struct _ast2784: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2785>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2785: PointerType<_ast2006> {}; // Pointer PersistentBase<T> *
struct _ast2786: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2787: NamedDeclName<_str52>, TypeDecl<_ast2788> {}; // TemplateTypeParm S
struct _ast2789: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2795, Pack<_ast2790, _ast2791>>>, _ast2785>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2790: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2791: NamedDeclName<_str76>, ParmVarDecl<_ast2792> {}; // ParmVar other
struct _ast2792: LValueReferenceType<ReferenceType<_ast2793>> {}; // LValueReference const Local<S> &
struct _ast2793: ConstQualifiedType<_ast2794> {}; // TemplateSpecialization const Local<S>
struct _ast2795: FunctionProtoType<_ast122, Pack<_ast198, _ast2792>, SameType> {}; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast2796: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast2797: NamedDeclName<_str52>, TypeDecl<_ast2798> {}; // TemplateTypeParm S
struct _ast2799: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2805, Pack<_ast2800, _ast2801>>>, _ast2785>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast2800: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2801: NamedDeclName<_str76>, ParmVarDecl<_ast2802> {}; // ParmVar other
struct _ast2802: LValueReferenceType<ReferenceType<_ast2803>> {}; // LValueReference const PersistentBase<S> &
struct _ast2803: ConstQualifiedType<_ast2804> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2805: FunctionProtoType<_ast122, Pack<_ast198, _ast2802>, SameType> {}; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2806: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2807>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast2807: PointerType<_ast2808> {}; // Pointer const PersistentBase<T> *
struct _ast2808: ConstQualifiedType<_ast2006> {}; // InjectedClassName const PersistentBase<T>
struct _ast2809: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2785>, NamedDeclName<_str77> {}; // CXXMethod Empty
struct _ast2810: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2812, Pack<_ast2811>>>, _ast2807>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast2811: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2812: FunctionProtoType<_ast2813, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<T> (v8::Isolate *) const
struct _ast2814: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2815: NamedDeclName<_str52>, TypeDecl<_ast2816> {}; // TemplateTypeParm S
struct _ast2817: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2822, Pack<_ast2818>>>, _ast2807>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2818: NamedDeclName<_str53>, ParmVarDecl<_ast2819> {}; // ParmVar that
struct _ast2819: LValueReferenceType<ReferenceType<_ast2820>> {}; // LValueReference const PersistentBase<S> &
struct _ast2820: ConstQualifiedType<_ast2821> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2822: FunctionProtoType<_ast137, Pack<_ast2819>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2823: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast2824: NamedDeclName<_str52>, TypeDecl<_ast2825> {}; // TemplateTypeParm S
struct _ast2826: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2831, Pack<_ast2827>>>, _ast2807>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast2827: NamedDeclName<_str53>, ParmVarDecl<_ast2828> {}; // ParmVar that
struct _ast2828: LValueReferenceType<ReferenceType<_ast2829>> {}; // LValueReference const Local<S> &
struct _ast2829: ConstQualifiedType<_ast2830> {}; // TemplateSpecialization const Local<S>
struct _ast2831: FunctionProtoType<_ast137, Pack<_ast2828>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2832: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2833: NamedDeclName<_str52>, TypeDecl<_ast2834> {}; // TemplateTypeParm S
struct _ast2835: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2840, Pack<_ast2836>>>, _ast2807>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2836: NamedDeclName<_str53>, ParmVarDecl<_ast2837> {}; // ParmVar that
struct _ast2837: LValueReferenceType<ReferenceType<_ast2838>> {}; // LValueReference const PersistentBase<S> &
struct _ast2838: ConstQualifiedType<_ast2839> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast2840: FunctionProtoType<_ast137, Pack<_ast2837>, ConstQualifiedType> {}; // FunctionProto bool (const PersistentBase<S> &) const
struct _ast2841: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast2842: NamedDeclName<_str52>, TypeDecl<_ast2843> {}; // TemplateTypeParm S
struct _ast2844: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2849, Pack<_ast2845>>>, _ast2807>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast2845: NamedDeclName<_str53>, ParmVarDecl<_ast2846> {}; // ParmVar that
struct _ast2846: LValueReferenceType<ReferenceType<_ast2847>> {}; // LValueReference const Local<S> &
struct _ast2847: ConstQualifiedType<_ast2848> {}; // TemplateSpecialization const Local<S>
struct _ast2849: FunctionProtoType<_ast137, Pack<_ast2846>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast2850: NamedDeclName<_str79> {}; // FunctionTemplate SetWeak
struct _ast2851: NamedDeclName<_str80>, TypeDecl<_ast2852> {}; // TemplateTypeParm P
struct _ast2853: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2859, Pack<_ast2854, _ast2856, _ast2858>>>, _ast2785>, NamedDeclName<_str79> {}; // CXXMethod SetWeak
struct _ast2854: NamedDeclName<_str81>, ParmVarDecl<_ast2855> {}; // ParmVar parameter
struct _ast2855: PointerType<_ast2852> {}; // Pointer P *
struct _ast2856: NamedDeclName<_str82>, ParmVarDecl<_ast2857> {}; // ParmVar callback
struct _ast2858: NamedDeclName<_str83>, ParmVarDecl<_ast2094> {}; // ParmVar type
struct _ast2859: FunctionProtoType<_ast122, Pack<_ast2855, _ast2857, _ast2094>, SameType> {}; // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2860: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2785>, NamedDeclName<_str79> {}; // CXXMethod SetWeak
struct _ast2861: NamedDeclName<_str85> {}; // FunctionTemplate ClearWeak
struct _ast2862: NamedDeclName<_str80>, TypeDecl<_ast2863> {}; // TemplateTypeParm P
struct _ast2864: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2865, Pack<>>>, _ast2785>, NamedDeclName<_str85> {}; // CXXMethod ClearWeak
struct _ast2865: FunctionProtoType<_ast2866, Pack<>, SameType> {}; // FunctionProto P *()
struct _ast2866: PointerType<_ast2863> {}; // Pointer P *
struct _ast2867: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2785>, NamedDeclName<_str85> {}; // CXXMethod ClearWeak
struct _ast2868: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2111, Pack<_ast2869>>>, _ast2785>, NamedDeclName<_str86> {}; // CXXMethod AnnotateStrongRetainer
struct _ast2869: NamedDeclName<_str87>, ParmVarDecl<_ast2108> {}; // ParmVar label
struct _ast2870: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast2807>, NamedDeclName<_str88> {}; // CXXMethod IsWeak
struct _ast2871: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2116, Pack<_ast2872>>>, _ast2785>, NamedDeclName<_str89> {}; // CXXMethod SetWrapperClassId
struct _ast2872: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast2873: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2118, Pack<>>>, _ast2807>, NamedDeclName<_str91> {}; // CXXMethod WrapperClassId
struct _ast2874: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2877, Pack<_ast2875>>>, _ast2785>> {}; // CXXConstructor PersistentBase<T>
struct _ast2875: NamedDeclName<_str76>, ParmVarDecl<_ast2876> {}; // ParmVar other
struct _ast2876: LValueReferenceType<ReferenceType<_ast2808>> {}; // LValueReference const PersistentBase<T> &
struct _ast2877: FunctionProtoType<_ast122, Pack<_ast2876>, SameType> {}; // FunctionProto void (const PersistentBase<T> &)
struct _ast2878: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2877, Pack<_ast2879>>>, _ast2785>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2879: NamedDeclAnon<_str64>, ParmVarDecl<_ast2876> {}; // ParmVar 
struct _ast2880: NamedDeclName<_str21>, TypeDecl<_ast2881> {}; // TemplateTypeParm T
struct _ast2882: NamedDeclName<_str73>, TypeDecl<_ast1997> {}; // CXXRecord NonCopyablePersistentTraits
struct _ast2883: NamedDeclName<_str133>, TypeDecl<_ast2884> {}; // Typedef NonCopyablePersistent
struct _ast2884: TypedefType<_ast2883> {}; // Typedef v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ast2885: NamedDeclName<_str134> {}; // Var kResetInDestructor
struct _ast2886: NamedDeclName<_str135> {}; // FunctionTemplate Copy
struct _ast2887: NamedDeclName<_str52>, TypeDecl<_ast2888> {}; // TemplateTypeParm S
struct _ast2889: NamedDeclName<_str93>, TypeDecl<_ast2890> {}; // TemplateTypeParm M
struct _ast2891: MethodDecl<FunctionDecl<_ast2898, Pack<_ast2892, _ast2896>>>, NamedDeclName<_str135> {}; // CXXMethod Copy
struct _ast2892: NamedDeclName<_str136>, ParmVarDecl<_ast2893> {}; // ParmVar source
struct _ast2893: LValueReferenceType<ReferenceType<_ast2894>> {}; // LValueReference const Persistent<S, M> &
struct _ast2894: ConstQualifiedType<_ast2895> {}; // TemplateSpecialization const Persistent<S, M>
struct _ast2896: NamedDeclName<_str137>, ParmVarDecl<_ast2897> {}; // ParmVar dest
struct _ast2897: PointerType<_ast2884> {}; // Pointer v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ast2898: FunctionProtoType<_ast122, Pack<_ast2893, _ast2897>, SameType> {}; // FunctionProto void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ast2899: NamedDeclName<_str138> {}; // FunctionTemplate Uncompilable
struct _ast2900: NamedDeclName<_str139>, TypeDecl<_ast2901> {}; // TemplateTypeParm O
struct _ast2902: MethodDecl<FunctionDecl<_ast121, Pack<>>>, NamedDeclName<_str138> {}; // CXXMethod Uncompilable
struct _ast2903: NamedDeclName<_str140> {}; // ClassTemplate CopyablePersistentTraits
struct _ast2904: NamedDeclName<_str21>, TypeDecl<_ast2905> {}; // TemplateTypeParm T
struct _ast2906: NamedDeclName<_str140>, TypeDecl<_ast2907> {}; // CXXRecord CopyablePersistentTraits
struct _ast2908: NamedDeclName<_str140>, TypeDecl<_ast2907> {}; // CXXRecord CopyablePersistentTraits
struct _ast2909: NamedDeclName<_str141>, TypeDecl<_ast2910> {}; // Typedef CopyablePersistent
struct _ast2910: TypedefType<_ast2909> {}; // Typedef v8::CopyablePersistentTraits::CopyablePersistent
struct _ast2911: NamedDeclName<_str134> {}; // Var kResetInDestructor
struct _ast2912: NamedDeclName<_str135> {}; // FunctionTemplate Copy
struct _ast2913: NamedDeclName<_str52>, TypeDecl<_ast2914> {}; // TemplateTypeParm S
struct _ast2915: NamedDeclName<_str93>, TypeDecl<_ast2916> {}; // TemplateTypeParm M
struct _ast2917: MethodDecl<FunctionDecl<_ast2924, Pack<_ast2918, _ast2922>>>, NamedDeclName<_str135> {}; // CXXMethod Copy
struct _ast2918: NamedDeclName<_str136>, ParmVarDecl<_ast2919> {}; // ParmVar source
struct _ast2919: LValueReferenceType<ReferenceType<_ast2920>> {}; // LValueReference const Persistent<S, M> &
struct _ast2920: ConstQualifiedType<_ast2921> {}; // TemplateSpecialization const Persistent<S, M>
struct _ast2922: NamedDeclName<_str137>, ParmVarDecl<_ast2923> {}; // ParmVar dest
struct _ast2923: PointerType<_ast2910> {}; // Pointer v8::CopyablePersistentTraits::CopyablePersistent *
struct _ast2924: FunctionProtoType<_ast122, Pack<_ast2919, _ast2923>, SameType> {}; // FunctionProto void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ast2925: NamedDeclName<_str140>, TypeDecl<_ast2926> {}; // ClassTemplateSpecialization CopyablePersistentTraits
struct _ast2926: StructOrClassRecordType<RecordType<_ast2925>> {}; // Record v8::CopyablePersistentTraits<v8::Promise>
struct _ast2927: NamedDeclName<_str21>, TypeDecl<_ast2928> {}; // TemplateTypeParm T
struct _ast2929: NamedDeclName<_str93>, TypeDecl<_ast2930> {}; // TemplateTypeParm M
struct _ast2931: NamedDeclName<_str92>, TypeDecl<_ast2247> {}; // CXXRecord Persistent
struct _ast2932: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2933>> {}; // CXXConstructor Persistent<T, M>
struct _ast2933: PointerType<_ast2247> {}; // Pointer Persistent<T, M> *
struct _ast2934: NamedDeclName<_str142> {}; // FunctionTemplate Persistent<T, M>
struct _ast2935: NamedDeclName<_str52>, TypeDecl<_ast2936> {}; // TemplateTypeParm S
struct _ast2937: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2941, Pack<_ast2938, _ast2939>>>, _ast2933>> {}; // CXXConstructor Persistent<T, M>
struct _ast2938: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2939: NamedDeclName<_str53>, ParmVarDecl<_ast2940> {}; // ParmVar that
struct _ast2941: FunctionProtoType<_ast122, Pack<_ast198, _ast2940>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast2942: NamedDeclName<_str142> {}; // FunctionTemplate Persistent<T, M>
struct _ast2943: NamedDeclName<_str52>, TypeDecl<_ast2944> {}; // TemplateTypeParm S
struct _ast2945: NamedDeclName<_str94>, TypeDecl<_ast2946> {}; // TemplateTypeParm M2
struct _ast2947: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2953, Pack<_ast2948, _ast2949>>>, _ast2933>> {}; // CXXConstructor Persistent<T, M>
struct _ast2948: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast2949: NamedDeclName<_str53>, ParmVarDecl<_ast2950> {}; // ParmVar that
struct _ast2950: LValueReferenceType<ReferenceType<_ast2951>> {}; // LValueReference const Persistent<S, M2> &
struct _ast2951: ConstQualifiedType<_ast2952> {}; // TemplateSpecialization const Persistent<S, M2>
struct _ast2953: FunctionProtoType<_ast122, Pack<_ast198, _ast2950>, SameType> {}; // FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2954: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2958, Pack<_ast2955>>>, _ast2933>> {}; // CXXConstructor Persistent<T, M>
struct _ast2955: NamedDeclName<_str53>, ParmVarDecl<_ast2956> {}; // ParmVar that
struct _ast2956: LValueReferenceType<ReferenceType<_ast2957>> {}; // LValueReference const Persistent<T, M> &
struct _ast2957: ConstQualifiedType<_ast2247> {}; // InjectedClassName const Persistent<T, M>
struct _ast2958: FunctionProtoType<_ast122, Pack<_ast2956>, SameType> {}; // FunctionProto void (const Persistent<T, M> &)
struct _ast2959: NamedDeclName<_str142> {}; // FunctionTemplate Persistent<T, M>
struct _ast2960: NamedDeclName<_str52>, TypeDecl<_ast2961> {}; // TemplateTypeParm S
struct _ast2962: NamedDeclName<_str94>, TypeDecl<_ast2963> {}; // TemplateTypeParm M2
struct _ast2964: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2969, Pack<_ast2965>>>, _ast2933>> {}; // CXXConstructor Persistent<T, M>
struct _ast2965: NamedDeclName<_str53>, ParmVarDecl<_ast2966> {}; // ParmVar that
struct _ast2966: LValueReferenceType<ReferenceType<_ast2967>> {}; // LValueReference const Persistent<S, M2> &
struct _ast2967: ConstQualifiedType<_ast2968> {}; // TemplateSpecialization const Persistent<S, M2>
struct _ast2969: FunctionProtoType<_ast122, Pack<_ast2966>, SameType> {}; // FunctionProto void (const Persistent<S, M2> &)
struct _ast2970: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2972, Pack<_ast2971>>>, _ast2933>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2971: NamedDeclName<_str53>, ParmVarDecl<_ast2956> {}; // ParmVar that
struct _ast2972: FunctionProtoType<_ast2973, Pack<_ast2956>, SameType> {}; // FunctionProto Persistent<T, M> &(const Persistent<T, M> &)
struct _ast2973: LValueReferenceType<ReferenceType<_ast2247>> {}; // LValueReference Persistent<T, M> &
struct _ast2974: NamedDeclName<_str65> {}; // FunctionTemplate operator=
struct _ast2975: NamedDeclName<_str52>, TypeDecl<_ast2976> {}; // TemplateTypeParm S
struct _ast2977: NamedDeclName<_str94>, TypeDecl<_ast2978> {}; // TemplateTypeParm M2
struct _ast2979: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2984, Pack<_ast2980>>>, _ast2933>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast2980: NamedDeclName<_str53>, ParmVarDecl<_ast2981> {}; // ParmVar that
struct _ast2981: LValueReferenceType<ReferenceType<_ast2982>> {}; // LValueReference const Persistent<S, M2> &
struct _ast2982: ConstQualifiedType<_ast2983> {}; // TemplateSpecialization const Persistent<S, M2>
struct _ast2984: FunctionProtoType<_ast2973, Pack<_ast2981>, SameType> {}; // FunctionProto Persistent<T, M> &(const Persistent<S, M2> &)
struct _ast2985: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast2933>> {}; // CXXDestructor ~Persistent<T, M>
struct _ast2986: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast2987: NamedDeclName<_str52>, TypeDecl<_ast2988> {}; // TemplateTypeParm S
struct _ast2989: MethodDecl<FunctionDecl<_ast2994, Pack<_ast2990>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast2990: NamedDeclName<_str53>, ParmVarDecl<_ast2991> {}; // ParmVar that
struct _ast2991: LValueReferenceType<ReferenceType<_ast2992>> {}; // LValueReference const Persistent<S> &
struct _ast2992: ConstQualifiedType<_ast2993> {}; // TemplateSpecialization const Persistent<S>
struct _ast2994: FunctionProtoType<_ast2995, Pack<_ast2991>, SameType> {}; // FunctionProto Persistent<T> &(const Persistent<S> &)
struct _ast2995: LValueReferenceType<ReferenceType<_ast2996>> {}; // LValueReference Persistent<T> &
struct _ast2997: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast2998: NamedDeclName<_str52>, TypeDecl<_ast2999> {}; // TemplateTypeParm S
struct _ast3000: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3001, Pack<>>>, _ast3004>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast3001: FunctionProtoType<_ast3002, Pack<>, ConstQualifiedType> {}; // FunctionProto Persistent<S> &() const
struct _ast3002: LValueReferenceType<ReferenceType<_ast3003>> {}; // LValueReference Persistent<S> &
struct _ast3004: PointerType<_ast2957> {}; // Pointer const Persistent<T, M> *
struct _ast3005: NamedDeclName<_str21>, TypeDecl<_ast3006> {}; // TemplateTypeParm T
struct _ast3007: NamedDeclName<_str95>, TypeDecl<_ast2344> {}; // CXXRecord Global
struct _ast3008: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3009>> {}; // CXXConstructor Global<T>
struct _ast3009: PointerType<_ast2344> {}; // Pointer Global<T> *
struct _ast3010: NamedDeclName<_str143> {}; // FunctionTemplate Global<T>
struct _ast3011: NamedDeclName<_str52>, TypeDecl<_ast3012> {}; // TemplateTypeParm S
struct _ast3013: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3017, Pack<_ast3014, _ast3015>>>, _ast3009>> {}; // CXXConstructor Global<T>
struct _ast3014: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3015: NamedDeclName<_str53>, ParmVarDecl<_ast3016> {}; // ParmVar that
struct _ast3017: FunctionProtoType<_ast122, Pack<_ast198, _ast3016>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast3018: NamedDeclName<_str143> {}; // FunctionTemplate Global<T>
struct _ast3019: NamedDeclName<_str52>, TypeDecl<_ast3020> {}; // TemplateTypeParm S
struct _ast3021: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3027, Pack<_ast3022, _ast3023>>>, _ast3009>> {}; // CXXConstructor Global<T>
struct _ast3022: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3023: NamedDeclName<_str53>, ParmVarDecl<_ast3024> {}; // ParmVar that
struct _ast3024: LValueReferenceType<ReferenceType<_ast3025>> {}; // LValueReference const PersistentBase<S> &
struct _ast3025: ConstQualifiedType<_ast3026> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast3027: FunctionProtoType<_ast122, Pack<_ast198, _ast3024>, SameType> {}; // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ast3028: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3031, Pack<_ast3029>>>, _ast3009>> {}; // CXXConstructor Global<T>
struct _ast3029: NamedDeclName<_str76>, ParmVarDecl<_ast3030> {}; // ParmVar other
struct _ast3030: RValueReferenceType<ReferenceType<_ast2344>> {}; // RValueReference Global<T> &&
struct _ast3031: FunctionProtoType<_ast122, Pack<_ast3030>, SameType> {}; // FunctionProto void (Global<T> &&)
struct _ast3032: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3009>> {}; // CXXDestructor ~Global<T>
struct _ast3033: NamedDeclName<_str65> {}; // FunctionTemplate operator=
struct _ast3034: NamedDeclName<_str52>, TypeDecl<_ast3035> {}; // TemplateTypeParm S
struct _ast3036: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3040, Pack<_ast3037>>>, _ast3009>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3037: NamedDeclName<_str97>, ParmVarDecl<_ast3038> {}; // ParmVar rhs
struct _ast3038: RValueReferenceType<ReferenceType<_ast3039>> {}; // RValueReference Global<S> &&
struct _ast3040: FunctionProtoType<_ast3041, Pack<_ast3038>, SameType> {}; // FunctionProto Global<T> &(Global<S> &&)
struct _ast3041: LValueReferenceType<ReferenceType<_ast2344>> {}; // LValueReference Global<T> &
struct _ast3042: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3043, Pack<>>>, _ast3009>, NamedDeclName<_str144> {}; // CXXMethod Pass
struct _ast3043: FunctionProtoType<_ast2344, Pack<>, SameType> {}; // FunctionProto Global<T> ()
struct _ast3044: NamedDeclName<_str145>, TypeDecl<_ast3045> {}; // Typedef MoveOnlyTypeForCPP03
struct _ast3045: TypedefType<_ast3044> {}; // Typedef v8::Global::MoveOnlyTypeForCPP03
struct _ast3046: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3050, Pack<_ast3047>>>, _ast3009>> {}; // CXXConstructor Global<T>
struct _ast3047: NamedDeclAnon<_str64>, ParmVarDecl<_ast3048> {}; // ParmVar 
struct _ast3048: LValueReferenceType<ReferenceType<_ast3049>> {}; // LValueReference const Global<T> &
struct _ast3049: ConstQualifiedType<_ast2344> {}; // InjectedClassName const Global<T>
struct _ast3050: FunctionProtoType<_ast122, Pack<_ast3048>, SameType> {}; // FunctionProto void (const Global<T> &)
struct _ast3051: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3050, Pack<_ast3052>>>, _ast3009>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3052: NamedDeclAnon<_str64>, ParmVarDecl<_ast3048> {}; // ParmVar 
struct _ast3053: NamedDeclName<_str146> {}; // TypeAliasTemplate UniquePersistent
struct _ast3054: NamedDeclName<_str146>, TypeDecl<_ast3055> {}; // TypeAlias UniquePersistent
struct _ast3055: TypedefType<_ast3054> {}; // Typedef v8::UniquePersistent
struct _ast3056: NamedDeclName<_str21>, TypeDecl<_ast3057> {}; // TemplateTypeParm T
struct _ast3058: NamedDeclName<_str21>, TypeDecl<_ast3059> {}; // TemplateTypeParm T
struct _ast3060: NamedDeclName<_str96>, TypeDecl<_ast2349> {}; // CXXRecord TracedGlobal
struct _ast3061: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3062>> {}; // CXXConstructor TracedGlobal<T>
struct _ast3062: PointerType<_ast2349> {}; // Pointer TracedGlobal<T> *
struct _ast3063: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3062>> {}; // CXXDestructor ~TracedGlobal<T>
struct _ast3064: NamedDeclName<_str147> {}; // FunctionTemplate TracedGlobal<T>
struct _ast3065: NamedDeclName<_str52>, TypeDecl<_ast3066> {}; // TemplateTypeParm S
struct _ast3067: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3071, Pack<_ast3068, _ast3069>>>, _ast3062>> {}; // CXXConstructor TracedGlobal<T>
struct _ast3068: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3069: NamedDeclName<_str53>, ParmVarDecl<_ast3070> {}; // ParmVar that
struct _ast3071: FunctionProtoType<_ast122, Pack<_ast198, _ast3070>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<S>)
struct _ast3072: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3075, Pack<_ast3073>>>, _ast3062>> {}; // CXXConstructor TracedGlobal<T>
struct _ast3073: NamedDeclName<_str76>, ParmVarDecl<_ast3074> {}; // ParmVar other
struct _ast3074: RValueReferenceType<ReferenceType<_ast2349>> {}; // RValueReference TracedGlobal<T> &&
struct _ast3075: FunctionProtoType<_ast122, Pack<_ast3074>, SameType> {}; // FunctionProto void (TracedGlobal<T> &&)
struct _ast3076: NamedDeclName<_str65> {}; // FunctionTemplate operator=
struct _ast3077: NamedDeclName<_str52>, TypeDecl<_ast3078> {}; // TemplateTypeParm S
struct _ast3079: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3083, Pack<_ast3080>>>, _ast3062>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3080: NamedDeclName<_str97>, ParmVarDecl<_ast3081> {}; // ParmVar rhs
struct _ast3081: RValueReferenceType<ReferenceType<_ast3082>> {}; // RValueReference TracedGlobal<S> &&
struct _ast3083: FunctionProtoType<_ast3084, Pack<_ast3081>, SameType> {}; // FunctionProto TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ast3084: LValueReferenceType<ReferenceType<_ast2349>> {}; // LValueReference TracedGlobal<T> &
struct _ast3085: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3089, Pack<_ast3086>>>, _ast3062>> {}; // CXXConstructor TracedGlobal<T>
struct _ast3086: NamedDeclAnon<_str64>, ParmVarDecl<_ast3087> {}; // ParmVar 
struct _ast3087: LValueReferenceType<ReferenceType<_ast3088>> {}; // LValueReference const TracedGlobal<T> &
struct _ast3088: ConstQualifiedType<_ast2349> {}; // InjectedClassName const TracedGlobal<T>
struct _ast3089: FunctionProtoType<_ast122, Pack<_ast3087>, SameType> {}; // FunctionProto void (const TracedGlobal<T> &)
struct _ast3090: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3089, Pack<_ast3091>>>, _ast3062>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3091: NamedDeclAnon<_str64>, ParmVarDecl<_ast3087> {}; // ParmVar 
struct _ast3092: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3093>, NamedDeclName<_str54> {}; // CXXMethod IsEmpty
struct _ast3093: PointerType<_ast3088> {}; // Pointer const TracedGlobal<T> *
struct _ast3094: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3062>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast3095: NamedDeclName<_str75> {}; // FunctionTemplate Reset
struct _ast3096: NamedDeclName<_str52>, TypeDecl<_ast3097> {}; // TemplateTypeParm S
struct _ast3098: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3104, Pack<_ast3099, _ast3100>>>, _ast3062>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast3099: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3100: NamedDeclName<_str76>, ParmVarDecl<_ast3101> {}; // ParmVar other
struct _ast3101: LValueReferenceType<ReferenceType<_ast3102>> {}; // LValueReference const Local<S> &
struct _ast3102: ConstQualifiedType<_ast3103> {}; // TemplateSpecialization const Local<S>
struct _ast3104: FunctionProtoType<_ast122, Pack<_ast198, _ast3101>, SameType> {}; // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ast3105: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3107, Pack<_ast3106>>>, _ast3093>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast3106: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3107: FunctionProtoType<_ast3108, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<T> (v8::Isolate *) const
struct _ast3109: NamedDeclName<_str61> {}; // FunctionTemplate As
struct _ast3110: NamedDeclName<_str52>, TypeDecl<_ast3111> {}; // TemplateTypeParm S
struct _ast3112: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3113, Pack<>>>, _ast3093>, NamedDeclName<_str61> {}; // CXXMethod As
struct _ast3113: FunctionProtoType<_ast3114, Pack<>, ConstQualifiedType> {}; // FunctionProto TracedGlobal<S> &() const
struct _ast3114: LValueReferenceType<ReferenceType<_ast3115>> {}; // LValueReference TracedGlobal<S> &
struct _ast3116: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast3117: NamedDeclName<_str52>, TypeDecl<_ast3118> {}; // TemplateTypeParm S
struct _ast3119: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3124, Pack<_ast3120>>>, _ast3093>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast3120: NamedDeclName<_str53>, ParmVarDecl<_ast3121> {}; // ParmVar that
struct _ast3121: LValueReferenceType<ReferenceType<_ast3122>> {}; // LValueReference const TracedGlobal<S> &
struct _ast3122: ConstQualifiedType<_ast3123> {}; // TemplateSpecialization const TracedGlobal<S>
struct _ast3124: FunctionProtoType<_ast137, Pack<_ast3121>, ConstQualifiedType> {}; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast3125: NamedDeclName<_str58> {}; // FunctionTemplate operator==
struct _ast3126: NamedDeclName<_str52>, TypeDecl<_ast3127> {}; // TemplateTypeParm S
struct _ast3128: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3133, Pack<_ast3129>>>, _ast3093>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast3129: NamedDeclName<_str53>, ParmVarDecl<_ast3130> {}; // ParmVar that
struct _ast3130: LValueReferenceType<ReferenceType<_ast3131>> {}; // LValueReference const Local<S> &
struct _ast3131: ConstQualifiedType<_ast3132> {}; // TemplateSpecialization const Local<S>
struct _ast3133: FunctionProtoType<_ast137, Pack<_ast3130>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast3134: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast3135: NamedDeclName<_str52>, TypeDecl<_ast3136> {}; // TemplateTypeParm S
struct _ast3137: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3142, Pack<_ast3138>>>, _ast3093>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast3138: NamedDeclName<_str53>, ParmVarDecl<_ast3139> {}; // ParmVar that
struct _ast3139: LValueReferenceType<ReferenceType<_ast3140>> {}; // LValueReference const TracedGlobal<S> &
struct _ast3140: ConstQualifiedType<_ast3141> {}; // TemplateSpecialization const TracedGlobal<S>
struct _ast3142: FunctionProtoType<_ast137, Pack<_ast3139>, ConstQualifiedType> {}; // FunctionProto bool (const TracedGlobal<S> &) const
struct _ast3143: NamedDeclName<_str59> {}; // FunctionTemplate operator!=
struct _ast3144: NamedDeclName<_str52>, TypeDecl<_ast3145> {}; // TemplateTypeParm S
struct _ast3146: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3151, Pack<_ast3147>>>, _ast3093>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast3147: NamedDeclName<_str53>, ParmVarDecl<_ast3148> {}; // ParmVar that
struct _ast3148: LValueReferenceType<ReferenceType<_ast3149>> {}; // LValueReference const Local<S> &
struct _ast3149: ConstQualifiedType<_ast3150> {}; // TemplateSpecialization const Local<S>
struct _ast3151: FunctionProtoType<_ast137, Pack<_ast3148>, ConstQualifiedType> {}; // FunctionProto bool (const Local<S> &) const
struct _ast3152: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2116, Pack<_ast3153>>>, _ast3062>, NamedDeclName<_str89> {}; // CXXMethod SetWrapperClassId
struct _ast3153: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast3154: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2118, Pack<>>>, _ast3093>, NamedDeclName<_str91> {}; // CXXMethod WrapperClassId
struct _ast3155: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2463, Pack<_ast3156, _ast3157>>>, _ast3062>, NamedDeclName<_str98> {}; // CXXMethod SetFinalizationCallback
struct _ast3156: NamedDeclName<_str81>, ParmVarDecl<_ast2460> {}; // ParmVar parameter
struct _ast3157: NamedDeclName<_str82>, ParmVarDecl<_ast2462> {}; // ParmVar callback
struct _ast3158: NamedDeclName<_str148>, TypeDecl<_ast3159> {}; // CXXRecord HandleScope
struct _ast3159: StructOrClassRecordType<RecordType<_ast3158>> {}; // Record v8::HandleScope
struct _ast3160: NamedDeclName<_str148>, TypeDecl<_ast3159> {}; // CXXRecord HandleScope
struct _ast3161: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast3162>>>, _ast3164>> {}; // CXXConstructor HandleScope
struct _ast3162: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3163: FunctionProtoType<_ast122, Pack<_ast198>, SameType> {}; // FunctionProto void (v8::Isolate *)
struct _ast3164: PointerType<_ast3159> {}; // Pointer v8::HandleScope *
struct _ast3165: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3166, Pack<>>>, _ast3164>> {}; // CXXDestructor ~HandleScope
struct _ast3166: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3167: MethodDecl<FunctionDecl<_ast3169, Pack<_ast3168>>>, NamedDeclName<_str149> {}; // CXXMethod NumberOfHandles
struct _ast3168: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3169: FunctionProtoType<_ast2095, Pack<_ast198>, SameType> {}; // FunctionProto int (v8::Isolate *)
struct _ast3170: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast3171>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast3171: PointerType<_ast3172> {}; // Pointer const v8::HandleScope *
struct _ast3172: ConstQualifiedType<_ast3159> {}; // Record const v8::HandleScope
struct _ast3173: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3176, Pack<_ast3174>>>, _ast3164>> {}; // CXXConstructor HandleScope
struct _ast3174: NamedDeclAnon<_str64>, ParmVarDecl<_ast3175> {}; // ParmVar 
struct _ast3175: LValueReferenceType<ReferenceType<_ast3172>> {}; // LValueReference const v8::HandleScope &
struct _ast3176: FunctionProtoType<_ast122, Pack<_ast3175>, SameType> {}; // FunctionProto void (const v8::HandleScope &)
struct _ast3177: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3176, Pack<_ast3178>>>, _ast3164>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3178: NamedDeclAnon<_str64>, ParmVarDecl<_ast3175> {}; // ParmVar 
struct _ast3179: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3180, Pack<>>>, _ast3164>> {}; // CXXConstructor HandleScope
struct _ast3180: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3181: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast3182>>>, _ast3164>, NamedDeclName<_str150> {}; // CXXMethod Initialize
struct _ast3182: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3183: MethodDecl<FunctionDecl<_ast3189, Pack<_ast3184, _ast3187>>>, NamedDeclName<_str151> {}; // CXXMethod CreateHandle
struct _ast3184: NamedDeclName<_str63>, ParmVarDecl<_ast3185> {}; // ParmVar isolate
struct _ast3185: PointerType<_ast3186> {}; // Pointer internal::Isolate *
struct _ast3187: NamedDeclName<_str152>, ParmVarDecl<_ast3188> {}; // ParmVar value
struct _ast3189: FunctionProtoType<_ast3190, Pack<_ast3185, _ast3188>, SameType> {}; // FunctionProto internal::Address *(internal::Isolate *, internal::Address)
struct _ast3190: PointerType<_ast3188> {}; // Pointer internal::Address *
struct _ast3191: NamedDeclName<_str109>, TypeDecl<_ast2550> {}; // CXXRecord EscapableHandleScope
struct _ast3192: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast3193>>>, _ast3194>> {}; // CXXConstructor EscapableHandleScope
struct _ast3193: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3194: PointerType<_ast2550> {}; // Pointer v8::EscapableHandleScope *
struct _ast3195: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3196, Pack<>>>, _ast3194>> {}; // CXXDestructor ~EscapableHandleScope
struct _ast3196: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3197: NamedDeclName<_str153> {}; // FunctionTemplate Escape
struct _ast3198: NamedDeclName<_str21>, TypeDecl<_ast3199> {}; // TemplateTypeParm T
struct _ast3200: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3203, Pack<_ast3201>>>, _ast3194>, NamedDeclName<_str153> {}; // CXXMethod Escape
struct _ast3201: NamedDeclName<_str152>, ParmVarDecl<_ast3202> {}; // ParmVar value
struct _ast3203: FunctionProtoType<_ast3204, Pack<_ast3202>, SameType> {}; // FunctionProto Local<T> (Local<T>)
struct _ast3205: NamedDeclName<_str154> {}; // FunctionTemplate EscapeMaybe
struct _ast3206: NamedDeclName<_str21>, TypeDecl<_ast3207> {}; // TemplateTypeParm T
struct _ast3208: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3211, Pack<_ast3209>>>, _ast3194>, NamedDeclName<_str154> {}; // CXXMethod EscapeMaybe
struct _ast3209: NamedDeclName<_str152>, ParmVarDecl<_ast3210> {}; // ParmVar value
struct _ast3211: FunctionProtoType<_ast3212, Pack<_ast3210>, SameType> {}; // FunctionProto MaybeLocal<T> (MaybeLocal<T>)
struct _ast3213: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3217, Pack<_ast3214>>>, _ast3194>> {}; // CXXConstructor EscapableHandleScope
struct _ast3214: NamedDeclAnon<_str64>, ParmVarDecl<_ast3215> {}; // ParmVar 
struct _ast3215: LValueReferenceType<ReferenceType<_ast3216>> {}; // LValueReference const v8::EscapableHandleScope &
struct _ast3216: ConstQualifiedType<_ast2550> {}; // Record const v8::EscapableHandleScope
struct _ast3217: FunctionProtoType<_ast122, Pack<_ast3215>, SameType> {}; // FunctionProto void (const v8::EscapableHandleScope &)
struct _ast3218: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3217, Pack<_ast3219>>>, _ast3194>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3219: NamedDeclAnon<_str64>, ParmVarDecl<_ast3215> {}; // ParmVar 
struct _ast3220: NamedDeclName<_str155>, TypeDecl<_ast3221> {}; // CXXRecord SealHandleScope
struct _ast3221: StructOrClassRecordType<RecordType<_ast3220>> {}; // Record v8::SealHandleScope
struct _ast3222: NamedDeclName<_str155>, TypeDecl<_ast3221> {}; // CXXRecord SealHandleScope
struct _ast3223: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast3224>>>, _ast3225>> {}; // CXXConstructor SealHandleScope
struct _ast3224: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3225: PointerType<_ast3221> {}; // Pointer v8::SealHandleScope *
struct _ast3226: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3227, Pack<>>>, _ast3225>> {}; // CXXDestructor ~SealHandleScope
struct _ast3227: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3228: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3232, Pack<_ast3229>>>, _ast3225>> {}; // CXXConstructor SealHandleScope
struct _ast3229: NamedDeclAnon<_str64>, ParmVarDecl<_ast3230> {}; // ParmVar 
struct _ast3230: LValueReferenceType<ReferenceType<_ast3231>> {}; // LValueReference const v8::SealHandleScope &
struct _ast3231: ConstQualifiedType<_ast3221> {}; // Record const v8::SealHandleScope
struct _ast3232: FunctionProtoType<_ast122, Pack<_ast3230>, SameType> {}; // FunctionProto void (const v8::SealHandleScope &)
struct _ast3233: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3232, Pack<_ast3234>>>, _ast3225>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3234: NamedDeclAnon<_str64>, ParmVarDecl<_ast3230> {}; // ParmVar 
struct _ast3235: NamedDeclName<_str3>, TypeDecl<_ast5> {}; // CXXRecord Data
struct _ast3236: NamedDeclName<_str156>, TypeDecl<_ast3237> {}; // CXXRecord ScriptOrModule
struct _ast3237: StructOrClassRecordType<RecordType<_ast3236>> {}; // Record v8::ScriptOrModule
struct _ast3238: NamedDeclName<_str156>, TypeDecl<_ast3237> {}; // CXXRecord ScriptOrModule
struct _ast3239: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3240, Pack<>>>, _ast3242>, NamedDeclName<_str157> {}; // CXXMethod GetResourceName
struct _ast3240: FunctionProtoType<_ast3241, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast3242: PointerType<_ast3237> {}; // Pointer v8::ScriptOrModule *
struct _ast3243: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3244, Pack<>>>, _ast3242>, NamedDeclName<_str158> {}; // CXXMethod GetHostDefinedOptions
struct _ast3244: FunctionProtoType<_ast3245, Pack<>, SameType> {}; // FunctionProto Local<v8::PrimitiveArray> ()
struct _ast3246: NamedDeclName<_str45>, TypeDecl<_ast102> {}; // CXXRecord PrimitiveArray
struct _ast3247: MethodDecl<FunctionDecl<_ast3250, Pack<_ast3248, _ast3249>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast3248: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3249: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast3250: FunctionProtoType<_ast3251, Pack<_ast198, _ast2095>, SameType> {}; // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _ast3252: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3254>, NamedDeclName<_str160> {}; // CXXMethod Length
struct _ast3253: FunctionProtoType<_ast2095, Pack<>, ConstQualifiedType> {}; // FunctionProto int () const
struct _ast3254: PointerType<_ast3255> {}; // Pointer const v8::PrimitiveArray *
struct _ast3255: ConstQualifiedType<_ast102> {}; // Record const v8::PrimitiveArray
struct _ast3256: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3261, Pack<_ast3257, _ast3258, _ast3259>>>, _ast3262>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast3257: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3258: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast3259: NamedDeclName<_str161>, ParmVarDecl<_ast3260> {}; // ParmVar item
struct _ast3261: FunctionProtoType<_ast122, Pack<_ast198, _ast2095, _ast3260>, SameType> {}; // FunctionProto void (v8::Isolate *, int, Local<v8::Primitive>)
struct _ast3262: PointerType<_ast102> {}; // Pointer v8::PrimitiveArray *
struct _ast3263: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3266, Pack<_ast3264, _ast3265>>>, _ast3262>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast3264: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3265: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast3266: FunctionProtoType<_ast3267, Pack<_ast198, _ast2095>, SameType> {}; // FunctionProto Local<v8::Primitive> (v8::Isolate *, int)
struct _ast3268: NamedDeclName<_str162>, TypeDecl<_ast3269> {}; // CXXRecord ScriptOriginOptions
struct _ast3269: StructOrClassRecordType<RecordType<_ast3268>> {}; // Record v8::ScriptOriginOptions
struct _ast3270: NamedDeclName<_str162>, TypeDecl<_ast3269> {}; // CXXRecord ScriptOriginOptions
struct _ast3271: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3276, Pack<_ast3272, _ast3273, _ast3274, _ast3275>>>, _ast3277>> {}; // CXXConstructor ScriptOriginOptions
struct _ast3272: NamedDeclName<_str163>, ParmVarDecl<_ast137> {}; // ParmVar is_shared_cross_origin
struct _ast3273: NamedDeclName<_str164>, ParmVarDecl<_ast137> {}; // ParmVar is_opaque
struct _ast3274: NamedDeclName<_str165>, ParmVarDecl<_ast137> {}; // ParmVar is_wasm
struct _ast3275: NamedDeclName<_str166>, ParmVarDecl<_ast137> {}; // ParmVar is_module
struct _ast3276: FunctionProtoType<_ast122, Pack<_ast137, _ast137, _ast137, _ast137>, SameType> {}; // FunctionProto void (bool, bool, bool, bool)
struct _ast3277: PointerType<_ast3269> {}; // Pointer v8::ScriptOriginOptions *
struct _ast3278: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3280, Pack<_ast3279>>>, _ast3277>> {}; // CXXConstructor ScriptOriginOptions
struct _ast3279: NamedDeclName<_str167>, ParmVarDecl<_ast2095> {}; // ParmVar flags
struct _ast3280: FunctionProtoType<_ast122, Pack<_ast2095>, SameType> {}; // FunctionProto void (int)
struct _ast3281: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3282>, NamedDeclName<_str168> {}; // CXXMethod IsSharedCrossOrigin
struct _ast3282: PointerType<_ast3283> {}; // Pointer const v8::ScriptOriginOptions *
struct _ast3283: ConstQualifiedType<_ast3269> {}; // Record const v8::ScriptOriginOptions
struct _ast3284: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3282>, NamedDeclName<_str169> {}; // CXXMethod IsOpaque
struct _ast3285: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3282>, NamedDeclName<_str170> {}; // CXXMethod IsWasm
struct _ast3286: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3282>, NamedDeclName<_str171> {}; // CXXMethod IsModule
struct _ast3287: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3282>, NamedDeclName<_str172> {}; // CXXMethod Flags
struct _ast3288: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3291, Pack<_ast3289>>>, _ast3277>> {}; // CXXConstructor ScriptOriginOptions
struct _ast3289: NamedDeclAnon<_str64>, ParmVarDecl<_ast3290> {}; // ParmVar 
struct _ast3290: LValueReferenceType<ReferenceType<_ast3283>> {}; // LValueReference const v8::ScriptOriginOptions &
struct _ast3291: FunctionProtoType<_ast122, Pack<_ast3290>, SameType> {}; // FunctionProto void (const v8::ScriptOriginOptions &) noexcept
struct _ast3292: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3295, Pack<_ast3293>>>, _ast3277>> {}; // CXXConstructor ScriptOriginOptions
struct _ast3293: NamedDeclAnon<_str64>, ParmVarDecl<_ast3294> {}; // ParmVar 
struct _ast3294: RValueReferenceType<ReferenceType<_ast3269>> {}; // RValueReference v8::ScriptOriginOptions &&
struct _ast3295: FunctionProtoType<_ast122, Pack<_ast3294>, SameType> {}; // FunctionProto void (v8::ScriptOriginOptions &&) noexcept
struct _ast3296: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast3277>> {}; // CXXDestructor ~ScriptOriginOptions
struct _ast3297: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3299, Pack<_ast3298>>>, _ast3277>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3298: NamedDeclAnon<_str64>, ParmVarDecl<_ast3290> {}; // ParmVar 
struct _ast3299: FunctionProtoType<_ast3300, Pack<_ast3290>, SameType> {}; // FunctionProto v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
struct _ast3300: LValueReferenceType<ReferenceType<_ast3269>> {}; // LValueReference v8::ScriptOriginOptions &
struct _ast3301: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3303, Pack<_ast3302>>>, _ast3277>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3302: NamedDeclAnon<_str64>, ParmVarDecl<_ast3294> {}; // ParmVar 
struct _ast3303: FunctionProtoType<_ast3300, Pack<_ast3294>, SameType> {}; // FunctionProto v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _ast3304: NamedDeclName<_str173>, TypeDecl<_ast3305> {}; // CXXRecord ScriptOrigin
struct _ast3305: StructOrClassRecordType<RecordType<_ast3304>> {}; // Record v8::ScriptOrigin
struct _ast3306: NamedDeclName<_str173>, TypeDecl<_ast3305> {}; // CXXRecord ScriptOrigin
struct _ast3307: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3328, Pack<_ast3308, _ast3310, _ast3312, _ast3314, _ast3316, _ast3318, _ast3320, _ast3322, _ast3324, _ast3326>>>, _ast3329>> {}; // CXXConstructor ScriptOrigin
struct _ast3308: NamedDeclName<_str174>, ParmVarDecl<_ast3309> {}; // ParmVar resource_name
struct _ast3310: NamedDeclName<_str175>, ParmVarDecl<_ast3311> {}; // ParmVar resource_line_offset
struct _ast3312: NamedDeclName<_str176>, ParmVarDecl<_ast3313> {}; // ParmVar resource_column_offset
struct _ast3314: NamedDeclName<_str177>, ParmVarDecl<_ast3315> {}; // ParmVar resource_is_shared_cross_origin
struct _ast3316: NamedDeclName<_str178>, ParmVarDecl<_ast3317> {}; // ParmVar script_id
struct _ast3318: NamedDeclName<_str179>, ParmVarDecl<_ast3319> {}; // ParmVar source_map_url
struct _ast3320: NamedDeclName<_str180>, ParmVarDecl<_ast3321> {}; // ParmVar resource_is_opaque
struct _ast3322: NamedDeclName<_str165>, ParmVarDecl<_ast3323> {}; // ParmVar is_wasm
struct _ast3324: NamedDeclName<_str166>, ParmVarDecl<_ast3325> {}; // ParmVar is_module
struct _ast3326: NamedDeclName<_str181>, ParmVarDecl<_ast3327> {}; // ParmVar host_defined_options
struct _ast3328: FunctionProtoType<_ast122, Pack<_ast3309, _ast3311, _ast3313, _ast3315, _ast3317, _ast3319, _ast3321, _ast3323, _ast3325, _ast3327>, SameType> {}; // FunctionProto void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _ast3329: PointerType<_ast3305> {}; // Pointer v8::ScriptOrigin *
struct _ast3330: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3331, Pack<>>>, _ast3333>, NamedDeclName<_str182> {}; // CXXMethod ResourceName
struct _ast3331: FunctionProtoType<_ast3332, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast3333: PointerType<_ast3334> {}; // Pointer const v8::ScriptOrigin *
struct _ast3334: ConstQualifiedType<_ast3305> {}; // Record const v8::ScriptOrigin
struct _ast3335: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3336, Pack<>>>, _ast3333>, NamedDeclName<_str183> {}; // CXXMethod ResourceLineOffset
struct _ast3336: FunctionProtoType<_ast3337, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Integer> () const
struct _ast3338: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3339, Pack<>>>, _ast3333>, NamedDeclName<_str184> {}; // CXXMethod ResourceColumnOffset
struct _ast3339: FunctionProtoType<_ast3340, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Integer> () const
struct _ast3341: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3342, Pack<>>>, _ast3333>, NamedDeclName<_str185> {}; // CXXMethod ScriptID
struct _ast3342: FunctionProtoType<_ast3343, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Integer> () const
struct _ast3344: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3345, Pack<>>>, _ast3333>, NamedDeclName<_str186> {}; // CXXMethod SourceMapUrl
struct _ast3345: FunctionProtoType<_ast3346, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast3347: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3348, Pack<>>>, _ast3333>, NamedDeclName<_str187> {}; // CXXMethod HostDefinedOptions
struct _ast3348: FunctionProtoType<_ast3349, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::PrimitiveArray> () const
struct _ast3350: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3351, Pack<>>>, _ast3333>, NamedDeclName<_str188> {}; // CXXMethod Options
struct _ast3351: FunctionProtoType<_ast3269, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::ScriptOriginOptions () const
struct _ast3352: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3355, Pack<_ast3353>>>, _ast3329>> {}; // CXXConstructor ScriptOrigin
struct _ast3353: NamedDeclAnon<_str64>, ParmVarDecl<_ast3354> {}; // ParmVar 
struct _ast3354: LValueReferenceType<ReferenceType<_ast3334>> {}; // LValueReference const v8::ScriptOrigin &
struct _ast3355: FunctionProtoType<_ast122, Pack<_ast3354>, SameType> {}; // FunctionProto void (const v8::ScriptOrigin &)
struct _ast3356: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3359, Pack<_ast3357>>>, _ast3329>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3357: NamedDeclAnon<_str64>, ParmVarDecl<_ast3358> {}; // ParmVar 
struct _ast3358: RValueReferenceType<ReferenceType<_ast3305>> {}; // RValueReference v8::ScriptOrigin &&
struct _ast3359: FunctionProtoType<_ast3360, Pack<_ast3358>, SameType> {}; // FunctionProto v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ast3360: LValueReferenceType<ReferenceType<_ast3305>> {}; // LValueReference v8::ScriptOrigin &
struct _ast3361: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3363, Pack<_ast3362>>>, _ast3329>> {}; // CXXConstructor ScriptOrigin
struct _ast3362: NamedDeclAnon<_str64>, ParmVarDecl<_ast3358> {}; // ParmVar 
struct _ast3363: FunctionProtoType<_ast122, Pack<_ast3358>, SameType> {}; // FunctionProto void (v8::ScriptOrigin &&)
struct _ast3364: NamedDeclName<_str189>, TypeDecl<_ast3365> {}; // CXXRecord UnboundScript
struct _ast3365: StructOrClassRecordType<RecordType<_ast3364>> {}; // Record v8::UnboundScript
struct _ast3366: NamedDeclName<_str189>, TypeDecl<_ast3365> {}; // CXXRecord UnboundScript
struct _ast3367: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3368, Pack<>>>, _ast3370>, NamedDeclName<_str190> {}; // CXXMethod BindToCurrentContext
struct _ast3368: FunctionProtoType<_ast3369, Pack<>, SameType> {}; // FunctionProto Local<v8::Script> ()
struct _ast3370: PointerType<_ast3365> {}; // Pointer v8::UnboundScript *
struct _ast3371: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast3370>, NamedDeclName<_str191> {}; // CXXMethod GetId
struct _ast3372: FunctionProtoType<_ast2095, Pack<>, SameType> {}; // FunctionProto int ()
struct _ast3373: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3374, Pack<>>>, _ast3370>, NamedDeclName<_str192> {}; // CXXMethod GetScriptName
struct _ast3374: FunctionProtoType<_ast3375, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast3376: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3377, Pack<>>>, _ast3370>, NamedDeclName<_str193> {}; // CXXMethod GetSourceURL
struct _ast3377: FunctionProtoType<_ast3378, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast3379: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3380, Pack<>>>, _ast3370>, NamedDeclName<_str194> {}; // CXXMethod GetSourceMappingURL
struct _ast3380: FunctionProtoType<_ast3381, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast3382: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3384, Pack<_ast3383>>>, _ast3370>, NamedDeclName<_str195> {}; // CXXMethod GetLineNumber
struct _ast3383: NamedDeclName<_str196>, ParmVarDecl<_ast2095> {}; // ParmVar code_pos
struct _ast3384: FunctionProtoType<_ast2095, Pack<_ast2095>, SameType> {}; // FunctionProto int (int)
struct _ast3385: NamedDeclName<_str197> {}; // Var kNoScriptId
struct _ast3386: NamedDeclName<_str198>, TypeDecl<_ast3387> {}; // CXXRecord UnboundModuleScript
struct _ast3387: StructOrClassRecordType<RecordType<_ast3386>> {}; // Record v8::UnboundModuleScript
struct _ast3388: NamedDeclName<_str198>, TypeDecl<_ast3387> {}; // CXXRecord UnboundModuleScript
struct _ast3389: NamedDeclName<_str199>, TypeDecl<_ast3390> {}; // CXXRecord Location
struct _ast3390: StructOrClassRecordType<RecordType<_ast3389>> {}; // Record v8::Location
struct _ast3391: NamedDeclName<_str199>, TypeDecl<_ast3390> {}; // CXXRecord Location
struct _ast3392: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast3393>, NamedDeclName<_str195> {}; // CXXMethod GetLineNumber
struct _ast3393: PointerType<_ast3390> {}; // Pointer v8::Location *
struct _ast3394: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast3393>, NamedDeclName<_str200> {}; // CXXMethod GetColumnNumber
struct _ast3395: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3398, Pack<_ast3396, _ast3397>>>, _ast3393>> {}; // CXXConstructor Location
struct _ast3396: NamedDeclName<_str201>, ParmVarDecl<_ast2095> {}; // ParmVar line_number
struct _ast3397: NamedDeclName<_str202>, ParmVarDecl<_ast2095> {}; // ParmVar column_number
struct _ast3398: FunctionProtoType<_ast122, Pack<_ast2095, _ast2095>, SameType> {}; // FunctionProto void (int, int)
struct _ast3399: NamedDeclName<_str203>, TypeDecl<_ast3400> {}; // CXXRecord Module
struct _ast3400: StructOrClassRecordType<RecordType<_ast3399>> {}; // Record v8::Module
struct _ast3401: NamedDeclName<_str203>, TypeDecl<_ast3400> {}; // CXXRecord Module
struct _ast3402: NamedDeclName<_str204>, TypeDecl<_ast3403> {}; // Enum Status
struct _ast3403: EnumType<_ast3402, _ast2095> {}; // Enum v8::Module::Status
struct _ast3404: NamedDeclName<_str205> {}; // EnumConstant kUninstantiated
struct _ast3405: NamedDeclName<_str206> {}; // EnumConstant kInstantiating
struct _ast3406: NamedDeclName<_str207> {}; // EnumConstant kInstantiated
struct _ast3407: NamedDeclName<_str208> {}; // EnumConstant kEvaluating
struct _ast3408: NamedDeclName<_str209> {}; // EnumConstant kEvaluated
struct _ast3409: NamedDeclName<_str210> {}; // EnumConstant kErrored
struct _ast3410: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3411, Pack<>>>, _ast3412>, NamedDeclName<_str211> {}; // CXXMethod GetStatus
struct _ast3411: FunctionProtoType<_ast3403, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Module::Status () const
struct _ast3412: PointerType<_ast3413> {}; // Pointer const v8::Module *
struct _ast3413: ConstQualifiedType<_ast3400> {}; // Record const v8::Module
struct _ast3414: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3415, Pack<>>>, _ast3412>, NamedDeclName<_str212> {}; // CXXMethod GetException
struct _ast3415: FunctionProtoType<_ast3416, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast3417: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3412>, NamedDeclName<_str213> {}; // CXXMethod GetModuleRequestsLength
struct _ast3418: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3420, Pack<_ast3419>>>, _ast3412>, NamedDeclName<_str214> {}; // CXXMethod GetModuleRequest
struct _ast3419: NamedDeclName<_str215>, ParmVarDecl<_ast2095> {}; // ParmVar i
struct _ast3420: FunctionProtoType<_ast3421, Pack<_ast2095>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> (int) const
struct _ast3422: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3424, Pack<_ast3423>>>, _ast3412>, NamedDeclName<_str216> {}; // CXXMethod GetModuleRequestLocation
struct _ast3423: NamedDeclName<_str215>, ParmVarDecl<_ast2095> {}; // ParmVar i
struct _ast3424: FunctionProtoType<_ast3390, Pack<_ast2095>, ConstQualifiedType> {}; // FunctionProto v8::Location (int) const
struct _ast3425: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3412>, NamedDeclName<_str217> {}; // CXXMethod GetIdentityHash
struct _ast3426: NamedDeclName<_str218>, TypeDecl<_ast3427> {}; // Typedef ResolveCallback
struct _ast3427: TypedefType<_ast3426> {}; // Typedef v8::Module::ResolveCallback
struct _ast3428: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3432, Pack<_ast3429, _ast3431>>>, _ast3434>, NamedDeclName<_str219> {}; // CXXMethod InstantiateModule
struct _ast3429: NamedDeclName<_str220>, ParmVarDecl<_ast3430> {}; // ParmVar context
struct _ast3431: NamedDeclName<_str82>, ParmVarDecl<_ast3427> {}; // ParmVar callback
struct _ast3432: FunctionProtoType<_ast3433, Pack<_ast3430, _ast3427>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
struct _ast3434: PointerType<_ast3400> {}; // Pointer v8::Module *
struct _ast3435: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3438, Pack<_ast3436>>>, _ast3434>, NamedDeclName<_str221> {}; // CXXMethod Evaluate
struct _ast3436: NamedDeclName<_str220>, ParmVarDecl<_ast3437> {}; // ParmVar context
struct _ast3438: FunctionProtoType<_ast3439, Pack<_ast3437>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3440: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3441, Pack<>>>, _ast3434>, NamedDeclName<_str222> {}; // CXXMethod GetModuleNamespace
struct _ast3441: FunctionProtoType<_ast3442, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast3443: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3444, Pack<>>>, _ast3434>, NamedDeclName<_str223> {}; // CXXMethod GetUnboundModuleScript
struct _ast3444: FunctionProtoType<_ast3445, Pack<>, SameType> {}; // FunctionProto Local<v8::UnboundModuleScript> ()
struct _ast3446: NamedDeclName<_str35>, TypeDecl<_ast82> {}; // CXXRecord Script
struct _ast3447: MethodDecl<FunctionDecl<_ast3453, Pack<_ast3448, _ast3450, _ast3452>>>, NamedDeclName<_str224> {}; // CXXMethod Compile
struct _ast3448: NamedDeclName<_str220>, ParmVarDecl<_ast3449> {}; // ParmVar context
struct _ast3450: NamedDeclName<_str136>, ParmVarDecl<_ast3451> {}; // ParmVar source
struct _ast3452: NamedDeclName<_str225>, ParmVarDecl<_ast3329> {}; // ParmVar origin
struct _ast3453: FunctionProtoType<_ast3454, Pack<_ast3449, _ast3451, _ast3329>, SameType> {}; // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _ast3455: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3458, Pack<_ast3456>>>, _ast3460>, NamedDeclName<_str226> {}; // CXXMethod Run
struct _ast3456: NamedDeclName<_str220>, ParmVarDecl<_ast3457> {}; // ParmVar context
struct _ast3458: FunctionProtoType<_ast3459, Pack<_ast3457>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3460: PointerType<_ast82> {}; // Pointer v8::Script *
struct _ast3461: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3462, Pack<>>>, _ast3460>, NamedDeclName<_str227> {}; // CXXMethod GetUnboundScript
struct _ast3462: FunctionProtoType<_ast3463, Pack<>, SameType> {}; // FunctionProto Local<v8::UnboundScript> ()
struct _ast3464: NamedDeclName<_str228>, TypeDecl<_ast3465> {}; // CXXRecord ScriptCompiler
struct _ast3465: StructOrClassRecordType<RecordType<_ast3464>> {}; // Record v8::ScriptCompiler
struct _ast3466: NamedDeclName<_str228>, TypeDecl<_ast3465> {}; // CXXRecord ScriptCompiler
struct _ast3467: NamedDeclName<_str229>, TypeDecl<_ast3468> {}; // CXXRecord CachedData
struct _ast3468: StructOrClassRecordType<RecordType<_ast3467>> {}; // Record v8::ScriptCompiler::CachedData
struct _ast3469: NamedDeclName<_str229>, TypeDecl<_ast3468> {}; // CXXRecord CachedData
struct _ast3470: NamedDeclName<_str230>, TypeDecl<_ast3471> {}; // Enum BufferPolicy
struct _ast3471: EnumType<_ast3470, _ast2095> {}; // Enum v8::ScriptCompiler::CachedData::BufferPolicy
struct _ast3472: NamedDeclName<_str231> {}; // EnumConstant BufferNotOwned
struct _ast3473: NamedDeclName<_str232> {}; // EnumConstant BufferOwned
struct _ast3474: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3475>> {}; // CXXConstructor CachedData
struct _ast3475: PointerType<_ast3468> {}; // Pointer v8::ScriptCompiler::CachedData *
struct _ast3476: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3483, Pack<_ast3477, _ast3481, _ast3482>>>, _ast3475>> {}; // CXXConstructor CachedData
struct _ast3477: NamedDeclName<_str129>, ParmVarDecl<_ast3478> {}; // ParmVar data
struct _ast3478: PointerType<_ast3479> {}; // Pointer const uint8_t *
struct _ast3479: ConstQualifiedType<_ast3480> {}; // Typedef const uint8_t
struct _ast3480: ABIIndependentSizeType<UnsignedIntegerType, 1> {}; // Typedef uint8_t
struct _ast3481: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast3482: NamedDeclName<_str233>, ParmVarDecl<_ast3471> {}; // ParmVar buffer_policy
struct _ast3483: FunctionProtoType<_ast122, Pack<_ast3478, _ast2095, _ast3471>, SameType> {}; // FunctionProto void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ast3484: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast3475>> {}; // CXXDestructor ~CachedData
struct _ast3485: NamedDeclName<_str129> {}; // Field data
struct _ast3486: NamedDeclName<_str159> {}; // Field length
struct _ast3487: NamedDeclName<_str234> {}; // Field rejected
struct _ast3488: NamedDeclName<_str233> {}; // Field buffer_policy
struct _ast3489: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3493, Pack<_ast3490>>>, _ast3475>> {}; // CXXConstructor CachedData
struct _ast3490: NamedDeclAnon<_str64>, ParmVarDecl<_ast3491> {}; // ParmVar 
struct _ast3491: LValueReferenceType<ReferenceType<_ast3492>> {}; // LValueReference const v8::ScriptCompiler::CachedData &
struct _ast3492: ConstQualifiedType<_ast3468> {}; // Record const v8::ScriptCompiler::CachedData
struct _ast3493: FunctionProtoType<_ast122, Pack<_ast3491>, SameType> {}; // FunctionProto void (const v8::ScriptCompiler::CachedData &)
struct _ast3494: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3496, Pack<_ast3495>>>, _ast3475>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3495: NamedDeclAnon<_str64>, ParmVarDecl<_ast3491> {}; // ParmVar 
struct _ast3496: FunctionProtoType<_ast3497, Pack<_ast3491>, SameType> {}; // FunctionProto v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
struct _ast3497: LValueReferenceType<ReferenceType<_ast3468>> {}; // LValueReference v8::ScriptCompiler::CachedData &
struct _ast3498: NamedDeclName<_str235>, TypeDecl<_ast3499> {}; // CXXRecord Source
struct _ast3499: StructOrClassRecordType<RecordType<_ast3498>> {}; // Record v8::ScriptCompiler::Source
struct _ast3500: NamedDeclName<_str235>, TypeDecl<_ast3499> {}; // CXXRecord Source
struct _ast3501: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3506, Pack<_ast3502, _ast3504, _ast3505>>>, _ast3507>> {}; // CXXConstructor Source
struct _ast3502: NamedDeclName<_str236>, ParmVarDecl<_ast3503> {}; // ParmVar source_string
struct _ast3504: NamedDeclName<_str225>, ParmVarDecl<_ast3354> {}; // ParmVar origin
struct _ast3505: NamedDeclName<_str237>, ParmVarDecl<_ast3475> {}; // ParmVar cached_data
struct _ast3506: FunctionProtoType<_ast122, Pack<_ast3503, _ast3354, _ast3475>, SameType> {}; // FunctionProto void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _ast3507: PointerType<_ast3499> {}; // Pointer v8::ScriptCompiler::Source *
struct _ast3508: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3512, Pack<_ast3509, _ast3511>>>, _ast3507>> {}; // CXXConstructor Source
struct _ast3509: NamedDeclName<_str236>, ParmVarDecl<_ast3510> {}; // ParmVar source_string
struct _ast3511: NamedDeclName<_str237>, ParmVarDecl<_ast3475> {}; // ParmVar cached_data
struct _ast3512: FunctionProtoType<_ast122, Pack<_ast3510, _ast3475>, SameType> {}; // FunctionProto void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
struct _ast3513: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast3507>> {}; // CXXDestructor ~Source
struct _ast3514: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3515, Pack<>>>, _ast3517>, NamedDeclName<_str238> {}; // CXXMethod GetCachedData
struct _ast3515: FunctionProtoType<_ast3516, Pack<>, ConstQualifiedType> {}; // FunctionProto const v8::ScriptCompiler::CachedData *() const
struct _ast3516: PointerType<_ast3492> {}; // Pointer const v8::ScriptCompiler::CachedData *
struct _ast3517: PointerType<_ast3518> {}; // Pointer const v8::ScriptCompiler::Source *
struct _ast3518: ConstQualifiedType<_ast3499> {}; // Record const v8::ScriptCompiler::Source
struct _ast3519: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3520, Pack<>>>, _ast3517>, NamedDeclName<_str239> {}; // CXXMethod GetResourceOptions
struct _ast3520: FunctionProtoType<_ast3290, Pack<>, ConstQualifiedType> {}; // FunctionProto const v8::ScriptOriginOptions &() const
struct _ast3521: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3524, Pack<_ast3522>>>, _ast3507>> {}; // CXXConstructor Source
struct _ast3522: NamedDeclAnon<_str64>, ParmVarDecl<_ast3523> {}; // ParmVar 
struct _ast3523: LValueReferenceType<ReferenceType<_ast3518>> {}; // LValueReference const v8::ScriptCompiler::Source &
struct _ast3524: FunctionProtoType<_ast122, Pack<_ast3523>, SameType> {}; // FunctionProto void (const v8::ScriptCompiler::Source &)
struct _ast3525: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3527, Pack<_ast3526>>>, _ast3507>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3526: NamedDeclAnon<_str64>, ParmVarDecl<_ast3523> {}; // ParmVar 
struct _ast3527: FunctionProtoType<_ast3528, Pack<_ast3523>, SameType> {}; // FunctionProto v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
struct _ast3528: LValueReferenceType<ReferenceType<_ast3499>> {}; // LValueReference v8::ScriptCompiler::Source &
struct _ast3529: NamedDeclName<_str240>, TypeDecl<_ast3530> {}; // CXXRecord ExternalSourceStream
struct _ast3530: StructOrClassRecordType<RecordType<_ast3529>> {}; // Record v8::ScriptCompiler::ExternalSourceStream
struct _ast3531: NamedDeclName<_str240>, TypeDecl<_ast3530> {}; // CXXRecord ExternalSourceStream
struct _ast3532: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3533, Pack<>>>, _ast3534>>> {}; // CXXDestructor ~ExternalSourceStream
struct _ast3533: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3534: PointerType<_ast3530> {}; // Pointer v8::ScriptCompiler::ExternalSourceStream *
struct _ast3535: NamedDeclName<_str241>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3538, Pack<_ast3536>>>, _ast3534>> {}; // CXXMethod GetMoreData
struct _ast3536: NamedDeclName<_str242>, ParmVarDecl<_ast3537> {}; // ParmVar src
struct _ast3537: PointerType<_ast3478> {}; // Pointer const uint8_t **
struct _ast3538: FunctionProtoType<_ast3539, Pack<_ast3537>, SameType> {}; // FunctionProto size_t (const uint8_t **)
struct _ast3539: PointerSizeType<UnsignedIntegerType> {}; // Typedef size_t
struct _ast3540: NamedDeclName<_str243>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast3534>> {}; // CXXMethod SetBookmark
struct _ast3541: FunctionProtoType<_ast137, Pack<>, SameType> {}; // FunctionProto bool ()
struct _ast3542: NamedDeclName<_str244>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3534>> {}; // CXXMethod ResetToBookmark
struct _ast3543: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3547, Pack<_ast3544>>>, _ast3534>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3544: NamedDeclAnon<_str64>, ParmVarDecl<_ast3545> {}; // ParmVar 
struct _ast3545: LValueReferenceType<ReferenceType<_ast3546>> {}; // LValueReference const v8::ScriptCompiler::ExternalSourceStream &
struct _ast3546: ConstQualifiedType<_ast3530> {}; // Record const v8::ScriptCompiler::ExternalSourceStream
struct _ast3547: FunctionProtoType<_ast3548, Pack<_ast3545>, SameType> {}; // FunctionProto v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _ast3548: LValueReferenceType<ReferenceType<_ast3530>> {}; // LValueReference v8::ScriptCompiler::ExternalSourceStream &
struct _ast3549: NamedDeclName<_str245>, TypeDecl<_ast3550> {}; // CXXRecord StreamedSource
struct _ast3550: StructOrClassRecordType<RecordType<_ast3549>> {}; // Record v8::ScriptCompiler::StreamedSource
struct _ast3551: NamedDeclName<_str245>, TypeDecl<_ast3550> {}; // CXXRecord StreamedSource
struct _ast3552: NamedDeclName<_str246>, TypeDecl<_ast3553> {}; // Enum Encoding
struct _ast3553: EnumType<_ast3552, _ast2095> {}; // Enum v8::ScriptCompiler::StreamedSource::Encoding
struct _ast3554: NamedDeclName<_str247> {}; // EnumConstant ONE_BYTE
struct _ast3555: NamedDeclName<_str248> {}; // EnumConstant TWO_BYTE
struct _ast3556: NamedDeclName<_str249> {}; // EnumConstant UTF8
struct _ast3557: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3560, Pack<_ast3558, _ast3559>>>, _ast3561>> {}; // CXXConstructor StreamedSource
struct _ast3558: NamedDeclName<_str250>, ParmVarDecl<_ast3534> {}; // ParmVar source_stream
struct _ast3559: NamedDeclName<_str251>, ParmVarDecl<_ast3553> {}; // ParmVar encoding
struct _ast3560: FunctionProtoType<_ast122, Pack<_ast3534, _ast3553>, SameType> {}; // FunctionProto void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3561: PointerType<_ast3550> {}; // Pointer v8::ScriptCompiler::StreamedSource *
struct _ast3562: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3566, Pack<_ast3563, _ast3565>>>, _ast3561>> {}; // CXXConstructor StreamedSource
struct _ast3563: NamedDeclName<_str250>, ParmVarDecl<_ast3564> {}; // ParmVar source_stream
struct _ast3565: NamedDeclName<_str251>, ParmVarDecl<_ast3553> {}; // ParmVar encoding
struct _ast3566: FunctionProtoType<_ast122, Pack<_ast3564, _ast3553>, SameType> {}; // FunctionProto void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3567: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3568, Pack<>>>, _ast3561>> {}; // CXXDestructor ~StreamedSource
struct _ast3568: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3569: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3570, Pack<>>>, _ast3573>, NamedDeclName<_str252> {}; // CXXMethod impl
struct _ast3570: FunctionProtoType<_ast3571, Pack<>, ConstQualifiedType> {}; // FunctionProto internal::ScriptStreamingData *() const
struct _ast3571: PointerType<_ast3572> {}; // Pointer internal::ScriptStreamingData *
struct _ast3573: PointerType<_ast3574> {}; // Pointer const v8::ScriptCompiler::StreamedSource *
struct _ast3574: ConstQualifiedType<_ast3550> {}; // Record const v8::ScriptCompiler::StreamedSource
struct _ast3575: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3578, Pack<_ast3576>>>, _ast3561>> {}; // CXXConstructor StreamedSource
struct _ast3576: NamedDeclAnon<_str64>, ParmVarDecl<_ast3577> {}; // ParmVar 
struct _ast3577: LValueReferenceType<ReferenceType<_ast3574>> {}; // LValueReference const v8::ScriptCompiler::StreamedSource &
struct _ast3578: FunctionProtoType<_ast122, Pack<_ast3577>, SameType> {}; // FunctionProto void (const v8::ScriptCompiler::StreamedSource &)
struct _ast3579: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3581, Pack<_ast3580>>>, _ast3561>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3580: NamedDeclAnon<_str64>, ParmVarDecl<_ast3577> {}; // ParmVar 
struct _ast3581: FunctionProtoType<_ast3582, Pack<_ast3577>, SameType> {}; // FunctionProto v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
struct _ast3582: LValueReferenceType<ReferenceType<_ast3550>> {}; // LValueReference v8::ScriptCompiler::StreamedSource &
struct _ast3583: NamedDeclName<_str253>, TypeDecl<_ast3584> {}; // CXXRecord ScriptStreamingTask
struct _ast3584: StructOrClassRecordType<RecordType<_ast3583>> {}; // Record v8::ScriptCompiler::ScriptStreamingTask
struct _ast3585: NamedDeclName<_str253>, TypeDecl<_ast3584> {}; // CXXRecord ScriptStreamingTask
struct _ast3586: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3587>, NamedDeclName<_str226> {}; // CXXMethod Run
struct _ast3587: PointerType<_ast3584> {}; // Pointer v8::ScriptCompiler::ScriptStreamingTask *
struct _ast3588: NamedDeclName<_str254>, TypeDecl<_ast3589> {}; // Enum CompileOptions
struct _ast3589: EnumType<_ast3588, _ast2095> {}; // Enum v8::ScriptCompiler::CompileOptions
struct _ast3590: NamedDeclName<_str255> {}; // EnumConstant kNoCompileOptions
struct _ast3591: NamedDeclName<_str256> {}; // EnumConstant kConsumeCodeCache
struct _ast3592: NamedDeclName<_str257> {}; // EnumConstant kEagerCompile
struct _ast3593: NamedDeclName<_str258>, TypeDecl<_ast3594> {}; // Enum NoCacheReason
struct _ast3594: EnumType<_ast3593, _ast2095> {}; // Enum v8::ScriptCompiler::NoCacheReason
struct _ast3595: NamedDeclName<_str259> {}; // EnumConstant kNoCacheNoReason
struct _ast3596: NamedDeclName<_str260> {}; // EnumConstant kNoCacheBecauseCachingDisabled
struct _ast3597: NamedDeclName<_str261> {}; // EnumConstant kNoCacheBecauseNoResource
struct _ast3598: NamedDeclName<_str262> {}; // EnumConstant kNoCacheBecauseInlineScript
struct _ast3599: NamedDeclName<_str263> {}; // EnumConstant kNoCacheBecauseModule
struct _ast3600: NamedDeclName<_str264> {}; // EnumConstant kNoCacheBecauseStreamingSource
struct _ast3601: NamedDeclName<_str265> {}; // EnumConstant kNoCacheBecauseInspector
struct _ast3602: NamedDeclName<_str266> {}; // EnumConstant kNoCacheBecauseScriptTooSmall
struct _ast3603: NamedDeclName<_str267> {}; // EnumConstant kNoCacheBecauseCacheTooCold
struct _ast3604: NamedDeclName<_str268> {}; // EnumConstant kNoCacheBecauseV8Extension
struct _ast3605: NamedDeclName<_str269> {}; // EnumConstant kNoCacheBecauseExtensionModule
struct _ast3606: NamedDeclName<_str270> {}; // EnumConstant kNoCacheBecausePacScript
struct _ast3607: NamedDeclName<_str271> {}; // EnumConstant kNoCacheBecauseInDocumentWrite
struct _ast3608: NamedDeclName<_str272> {}; // EnumConstant kNoCacheBecauseResourceWithNoCacheHandler
struct _ast3609: NamedDeclName<_str273> {}; // EnumConstant kNoCacheBecauseDeferredProduceCodeCache
struct _ast3610: MethodDecl<FunctionDecl<_ast3615, Pack<_ast3611, _ast3612, _ast3613, _ast3614>>>, NamedDeclName<_str274> {}; // CXXMethod CompileUnboundScript
struct _ast3611: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3612: NamedDeclName<_str136>, ParmVarDecl<_ast3507> {}; // ParmVar source
struct _ast3613: NamedDeclName<_str275>, ParmVarDecl<_ast3589> {}; // ParmVar options
struct _ast3614: NamedDeclName<_str276>, ParmVarDecl<_ast3594> {}; // ParmVar no_cache_reason
struct _ast3615: FunctionProtoType<_ast3616, Pack<_ast198, _ast3507, _ast3589, _ast3594>, SameType> {}; // FunctionProto MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3617: MethodDecl<FunctionDecl<_ast3623, Pack<_ast3618, _ast3620, _ast3621, _ast3622>>>, NamedDeclName<_str224> {}; // CXXMethod Compile
struct _ast3618: NamedDeclName<_str220>, ParmVarDecl<_ast3619> {}; // ParmVar context
struct _ast3620: NamedDeclName<_str136>, ParmVarDecl<_ast3507> {}; // ParmVar source
struct _ast3621: NamedDeclName<_str275>, ParmVarDecl<_ast3589> {}; // ParmVar options
struct _ast3622: NamedDeclName<_str276>, ParmVarDecl<_ast3594> {}; // ParmVar no_cache_reason
struct _ast3623: FunctionProtoType<_ast3624, Pack<_ast3619, _ast3507, _ast3589, _ast3594>, SameType> {}; // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3625: MethodDecl<FunctionDecl<_ast3629, Pack<_ast3626, _ast3627, _ast3628>>>, NamedDeclName<_str277> {}; // CXXMethod StartStreamingScript
struct _ast3626: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3627: NamedDeclName<_str136>, ParmVarDecl<_ast3561> {}; // ParmVar source
struct _ast3628: NamedDeclName<_str275>, ParmVarDecl<_ast3589> {}; // ParmVar options
struct _ast3629: FunctionProtoType<_ast3587, Pack<_ast198, _ast3561, _ast3589>, SameType> {}; // FunctionProto v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _ast3630: MethodDecl<FunctionDecl<_ast3637, Pack<_ast3631, _ast3633, _ast3634, _ast3636>>>, NamedDeclName<_str224> {}; // CXXMethod Compile
struct _ast3631: NamedDeclName<_str220>, ParmVarDecl<_ast3632> {}; // ParmVar context
struct _ast3633: NamedDeclName<_str136>, ParmVarDecl<_ast3561> {}; // ParmVar source
struct _ast3634: NamedDeclName<_str278>, ParmVarDecl<_ast3635> {}; // ParmVar full_source_string
struct _ast3636: NamedDeclName<_str225>, ParmVarDecl<_ast3354> {}; // ParmVar origin
struct _ast3637: FunctionProtoType<_ast3638, Pack<_ast3632, _ast3561, _ast3635, _ast3354>, SameType> {}; // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
struct _ast3639: MethodDecl<FunctionDecl<_ast3640, Pack<>>>, NamedDeclName<_str279> {}; // CXXMethod CachedDataVersionTag
struct _ast3640: FunctionProtoType<_ast3641, Pack<>, SameType> {}; // FunctionProto uint32_t ()
struct _ast3641: ABIIndependentSizeType<UnsignedIntegerType, 4> {}; // Typedef uint32_t
struct _ast3642: MethodDecl<FunctionDecl<_ast3647, Pack<_ast3643, _ast3644, _ast3645, _ast3646>>>, NamedDeclName<_str280> {}; // CXXMethod CompileModule
struct _ast3643: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3644: NamedDeclName<_str136>, ParmVarDecl<_ast3507> {}; // ParmVar source
struct _ast3645: NamedDeclName<_str275>, ParmVarDecl<_ast3589> {}; // ParmVar options
struct _ast3646: NamedDeclName<_str276>, ParmVarDecl<_ast3594> {}; // ParmVar no_cache_reason
struct _ast3647: FunctionProtoType<_ast3648, Pack<_ast198, _ast3507, _ast3589, _ast3594>, SameType> {}; // FunctionProto MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3649: MethodDecl<FunctionDecl<_ast3661, Pack<_ast3650, _ast3652, _ast3653, _ast3654, _ast3656, _ast3657, _ast3659, _ast3660>>>, NamedDeclName<_str281> {}; // CXXMethod CompileFunctionInContext
struct _ast3650: NamedDeclName<_str220>, ParmVarDecl<_ast3651> {}; // ParmVar context
struct _ast3652: NamedDeclName<_str136>, ParmVarDecl<_ast3507> {}; // ParmVar source
struct _ast3653: NamedDeclName<_str282>, ParmVarDecl<_ast3539> {}; // ParmVar arguments_count
struct _ast3654: NamedDeclName<_str283>, ParmVarDecl<_ast3655> {}; // ParmVar arguments
struct _ast3656: NamedDeclName<_str284>, ParmVarDecl<_ast3539> {}; // ParmVar context_extension_count
struct _ast3657: NamedDeclName<_str285>, ParmVarDecl<_ast3658> {}; // ParmVar context_extensions
struct _ast3659: NamedDeclName<_str275>, ParmVarDecl<_ast3589> {}; // ParmVar options
struct _ast3660: NamedDeclName<_str276>, ParmVarDecl<_ast3594> {}; // ParmVar no_cache_reason
struct _ast3661: FunctionProtoType<_ast3662, Pack<_ast3651, _ast3507, _ast3539, _ast3655, _ast3539, _ast3658, _ast3589, _ast3594>, SameType> {}; // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3663: MethodDecl<FunctionDecl<_ast3666, Pack<_ast3664>>>, NamedDeclName<_str286> {}; // CXXMethod CreateCodeCache
struct _ast3664: NamedDeclName<_str287>, ParmVarDecl<_ast3665> {}; // ParmVar unbound_script
struct _ast3666: FunctionProtoType<_ast3475, Pack<_ast3665>, SameType> {}; // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
struct _ast3667: MethodDecl<FunctionDecl<_ast3670, Pack<_ast3668>>>, NamedDeclName<_str286> {}; // CXXMethod CreateCodeCache
struct _ast3668: NamedDeclName<_str288>, ParmVarDecl<_ast3669> {}; // ParmVar unbound_module_script
struct _ast3670: FunctionProtoType<_ast3475, Pack<_ast3669>, SameType> {}; // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
struct _ast3671: MethodDecl<FunctionDecl<_ast3674, Pack<_ast3672>>>, NamedDeclName<_str289> {}; // CXXMethod CreateCodeCacheForFunction
struct _ast3672: NamedDeclName<_str290>, ParmVarDecl<_ast3673> {}; // ParmVar function
struct _ast3674: FunctionProtoType<_ast3475, Pack<_ast3673>, SameType> {}; // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _ast3675: NamedDeclName<_str291>, TypeDecl<_ast3676> {}; // CXXRecord Message
struct _ast3676: StructOrClassRecordType<RecordType<_ast3675>> {}; // Record v8::Message
struct _ast3677: NamedDeclName<_str291>, TypeDecl<_ast3676> {}; // CXXRecord Message
struct _ast3678: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3679, Pack<>>>, _ast3681>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast3679: FunctionProtoType<_ast3680, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> () const
struct _ast3681: PointerType<_ast3682> {}; // Pointer const v8::Message *
struct _ast3682: ConstQualifiedType<_ast3676> {}; // Record const v8::Message
struct _ast3683: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast3681>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast3684: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3687, Pack<_ast3685>>>, _ast3681>, NamedDeclName<_str292> {}; // CXXMethod GetSourceLine
struct _ast3685: NamedDeclName<_str220>, ParmVarDecl<_ast3686> {}; // ParmVar context
struct _ast3687: FunctionProtoType<_ast3688, Pack<_ast3686>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3689: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3690, Pack<>>>, _ast3681>, NamedDeclName<_str293> {}; // CXXMethod GetScriptOrigin
struct _ast3690: FunctionProtoType<_ast3305, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::ScriptOrigin () const
struct _ast3691: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3692, Pack<>>>, _ast3681>, NamedDeclName<_str294> {}; // CXXMethod GetScriptResourceName
struct _ast3692: FunctionProtoType<_ast3693, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast3694: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3695, Pack<>>>, _ast3681>, NamedDeclName<_str295> {}; // CXXMethod GetStackTrace
struct _ast3695: FunctionProtoType<_ast3696, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::StackTrace> () const
struct _ast3697: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3700, Pack<_ast3698>>>, _ast3681>, NamedDeclName<_str195> {}; // CXXMethod GetLineNumber
struct _ast3698: NamedDeclName<_str220>, ParmVarDecl<_ast3699> {}; // ParmVar context
struct _ast3700: FunctionProtoType<_ast3701, Pack<_ast3699>, ConstQualifiedType> {}; // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ast3702: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3681>, NamedDeclName<_str296> {}; // CXXMethod GetStartPosition
struct _ast3703: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3681>, NamedDeclName<_str297> {}; // CXXMethod GetEndPosition
struct _ast3704: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3681>, NamedDeclName<_str298> {}; // CXXMethod ErrorLevel
struct _ast3705: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3681>, NamedDeclName<_str299> {}; // CXXMethod GetStartColumn
struct _ast3706: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3709, Pack<_ast3707>>>, _ast3681>, NamedDeclName<_str299> {}; // CXXMethod GetStartColumn
struct _ast3707: NamedDeclName<_str220>, ParmVarDecl<_ast3708> {}; // ParmVar context
struct _ast3709: FunctionProtoType<_ast3710, Pack<_ast3708>, ConstQualifiedType> {}; // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ast3711: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3681>, NamedDeclName<_str300> {}; // CXXMethod GetEndColumn
struct _ast3712: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3715, Pack<_ast3713>>>, _ast3681>, NamedDeclName<_str300> {}; // CXXMethod GetEndColumn
struct _ast3713: NamedDeclName<_str220>, ParmVarDecl<_ast3714> {}; // ParmVar context
struct _ast3715: FunctionProtoType<_ast3716, Pack<_ast3714>, ConstQualifiedType> {}; // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ast3717: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3681>, NamedDeclName<_str168> {}; // CXXMethod IsSharedCrossOrigin
struct _ast3718: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3681>, NamedDeclName<_str169> {}; // CXXMethod IsOpaque
struct _ast3719: MethodDecl<FunctionDecl<_ast3725, Pack<_ast3720, _ast3721>>>, NamedDeclName<_str301> {}; // CXXMethod PrintCurrentStackTrace
struct _ast3720: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3721: NamedDeclName<_str68>, ParmVarDecl<_ast3722> {}; // ParmVar out
struct _ast3722: PointerType<_ast3723> {}; // Pointer FILE *
struct _ast3723: TypedefType<_ast3724> {}; // Typedef FILE
struct _ast3724: NamedDeclName<_str302>, TypeDecl<_ast3723> {}; // Typedef FILE
struct _ast3725: FunctionProtoType<_ast122, Pack<_ast198, _ast3722>, SameType> {}; // FunctionProto void (v8::Isolate *, FILE *)
struct _ast3726: NamedDeclName<_str303> {}; // Var kNoLineNumberInfo
struct _ast3727: NamedDeclName<_str304> {}; // Var kNoColumnInfo
struct _ast3728: NamedDeclName<_str305> {}; // Var kNoScriptIdInfo
struct _ast3729: NamedDeclName<_str40>, TypeDecl<_ast92> {}; // CXXRecord StackTrace
struct _ast3730: NamedDeclName<_str306>, TypeDecl<_ast3731> {}; // Enum StackTraceOptions
struct _ast3731: EnumType<_ast3730, _ast2095> {}; // Enum v8::StackTrace::StackTraceOptions
struct _ast3732: NamedDeclName<_str307> {}; // EnumConstant kLineNumber
struct _ast3733: NamedDeclName<_str308> {}; // EnumConstant kColumnOffset
struct _ast3734: NamedDeclName<_str309> {}; // EnumConstant kScriptName
struct _ast3735: NamedDeclName<_str310> {}; // EnumConstant kFunctionName
struct _ast3736: NamedDeclName<_str311> {}; // EnumConstant kIsEval
struct _ast3737: NamedDeclName<_str312> {}; // EnumConstant kIsConstructor
struct _ast3738: NamedDeclName<_str313> {}; // EnumConstant kScriptNameOrSourceURL
struct _ast3739: NamedDeclName<_str314> {}; // EnumConstant kScriptId
struct _ast3740: NamedDeclName<_str315> {}; // EnumConstant kExposeFramesAcrossSecurityOrigins
struct _ast3741: NamedDeclName<_str316> {}; // EnumConstant kOverview
struct _ast3742: NamedDeclName<_str317> {}; // EnumConstant kDetailed
struct _ast3743: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3746, Pack<_ast3744, _ast3745>>>, _ast3748>, NamedDeclName<_str318> {}; // CXXMethod GetFrame
struct _ast3744: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3745: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast3746: FunctionProtoType<_ast3747, Pack<_ast198, _ast3641>, ConstQualifiedType> {}; // FunctionProto Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _ast3748: PointerType<_ast3749> {}; // Pointer const v8::StackTrace *
struct _ast3749: ConstQualifiedType<_ast92> {}; // Record const v8::StackTrace
struct _ast3750: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3748>, NamedDeclName<_str319> {}; // CXXMethod GetFrameCount
struct _ast3751: MethodDecl<FunctionDecl<_ast3755, Pack<_ast3752, _ast3753, _ast3754>>>, NamedDeclName<_str320> {}; // CXXMethod CurrentStackTrace
struct _ast3752: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3753: NamedDeclName<_str321>, ParmVarDecl<_ast2095> {}; // ParmVar frame_limit
struct _ast3754: NamedDeclName<_str275>, ParmVarDecl<_ast3731> {}; // ParmVar options
struct _ast3755: FunctionProtoType<_ast3756, Pack<_ast198, _ast2095, _ast3731>, SameType> {}; // FunctionProto Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
struct _ast3757: NamedDeclName<_str39>, TypeDecl<_ast90> {}; // CXXRecord StackFrame
struct _ast3758: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3759>, NamedDeclName<_str195> {}; // CXXMethod GetLineNumber
struct _ast3759: PointerType<_ast3760> {}; // Pointer const v8::StackFrame *
struct _ast3760: ConstQualifiedType<_ast90> {}; // Record const v8::StackFrame
struct _ast3761: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3759>, NamedDeclName<_str322> {}; // CXXMethod GetColumn
struct _ast3762: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast3759>, NamedDeclName<_str323> {}; // CXXMethod GetScriptId
struct _ast3763: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3764, Pack<>>>, _ast3759>, NamedDeclName<_str192> {}; // CXXMethod GetScriptName
struct _ast3764: FunctionProtoType<_ast3765, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> () const
struct _ast3766: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3767, Pack<>>>, _ast3759>, NamedDeclName<_str324> {}; // CXXMethod GetScriptNameOrSourceURL
struct _ast3767: FunctionProtoType<_ast3768, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> () const
struct _ast3769: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3770, Pack<>>>, _ast3759>, NamedDeclName<_str325> {}; // CXXMethod GetFunctionName
struct _ast3770: FunctionProtoType<_ast3771, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> () const
struct _ast3772: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3759>, NamedDeclName<_str326> {}; // CXXMethod IsEval
struct _ast3773: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3759>, NamedDeclName<_str327> {}; // CXXMethod IsConstructor
struct _ast3774: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3759>, NamedDeclName<_str170> {}; // CXXMethod IsWasm
struct _ast3775: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast3759>, NamedDeclName<_str328> {}; // CXXMethod IsUserJavaScript
struct _ast3776: NamedDeclName<_str329>, TypeDecl<_ast3777> {}; // Enum StateTag
struct _ast3777: EnumType<_ast3776, _ast2095> {}; // Enum v8::StateTag
struct _ast3778: NamedDeclName<_str330> {}; // EnumConstant JS
struct _ast3779: NamedDeclName<_str331> {}; // EnumConstant GC
struct _ast3780: NamedDeclName<_str332> {}; // EnumConstant PARSER
struct _ast3781: NamedDeclName<_str333> {}; // EnumConstant BYTECODE_COMPILER
struct _ast3782: NamedDeclName<_str334> {}; // EnumConstant COMPILER
struct _ast3783: NamedDeclName<_str335> {}; // EnumConstant OTHER
struct _ast3784: NamedDeclName<_str336> {}; // EnumConstant EXTERNAL
struct _ast3785: NamedDeclName<_str337> {}; // EnumConstant IDLE
struct _ast3786: NamedDeclName<_str338>, TypeDecl<_ast3787> {}; // CXXRecord RegisterState
struct _ast3787: StructOrClassRecordType<RecordType<_ast3786>> {}; // Record v8::RegisterState
struct _ast3788: NamedDeclName<_str338>, TypeDecl<_ast3787> {}; // CXXRecord RegisterState
struct _ast3789: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3790>> {}; // CXXConstructor RegisterState
struct _ast3790: PointerType<_ast3787> {}; // Pointer v8::RegisterState *
struct _ast3791: NamedDeclName<_str339> {}; // Field pc
struct _ast3792: NamedDeclName<_str340> {}; // Field sp
struct _ast3793: NamedDeclName<_str341> {}; // Field fp
struct _ast3794: NamedDeclName<_str342> {}; // Field lr
struct _ast3795: NamedDeclName<_str343>, TypeDecl<_ast3796> {}; // CXXRecord SampleInfo
struct _ast3796: StructOrClassRecordType<RecordType<_ast3795>> {}; // Record v8::SampleInfo
struct _ast3797: NamedDeclName<_str343>, TypeDecl<_ast3796> {}; // CXXRecord SampleInfo
struct _ast3798: NamedDeclName<_str344> {}; // Field frames_count
struct _ast3799: NamedDeclName<_str345> {}; // Field vm_state
struct _ast3800: NamedDeclName<_str346> {}; // Field external_callback_entry
struct _ast3801: NamedDeclName<_str347>, TypeDecl<_ast3802> {}; // CXXRecord MemoryRange
struct _ast3802: StructOrClassRecordType<RecordType<_ast3801>> {}; // Record v8::MemoryRange
struct _ast3803: NamedDeclName<_str347>, TypeDecl<_ast3802> {}; // CXXRecord MemoryRange
struct _ast3804: NamedDeclName<_str348> {}; // Field start
struct _ast3805: NamedDeclName<_str349> {}; // Field length_in_bytes
struct _ast3806: NamedDeclName<_str350>, TypeDecl<_ast3807> {}; // CXXRecord JSEntryStub
struct _ast3807: StructOrClassRecordType<RecordType<_ast3806>> {}; // Record v8::JSEntryStub
struct _ast3808: NamedDeclName<_str350>, TypeDecl<_ast3807> {}; // CXXRecord JSEntryStub
struct _ast3809: NamedDeclName<_str351> {}; // Field code
struct _ast3810: NamedDeclName<_str352>, TypeDecl<_ast3811> {}; // CXXRecord UnwindState
struct _ast3811: StructOrClassRecordType<RecordType<_ast3810>> {}; // Record v8::UnwindState
struct _ast3812: NamedDeclName<_str352>, TypeDecl<_ast3811> {}; // CXXRecord UnwindState
struct _ast3813: NamedDeclName<_str353> {}; // Field code_range
struct _ast3814: NamedDeclName<_str354> {}; // Field embedded_code_range
struct _ast3815: NamedDeclName<_str355> {}; // Field js_entry_stub
struct _ast3816: NamedDeclName<_str356>, TypeDecl<_ast3817> {}; // CXXRecord JSON
struct _ast3817: StructOrClassRecordType<RecordType<_ast3816>> {}; // Record v8::JSON
struct _ast3818: NamedDeclName<_str356>, TypeDecl<_ast3817> {}; // CXXRecord JSON
struct _ast3819: MethodDecl<FunctionDecl<_ast3824, Pack<_ast3820, _ast3822>>>, NamedDeclName<_str357> {}; // CXXMethod Parse
struct _ast3820: NamedDeclName<_str220>, ParmVarDecl<_ast3821> {}; // ParmVar context
struct _ast3822: NamedDeclName<_str358>, ParmVarDecl<_ast3823> {}; // ParmVar json_string
struct _ast3824: FunctionProtoType<_ast3825, Pack<_ast3821, _ast3823>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
struct _ast3826: MethodDecl<FunctionDecl<_ast3833, Pack<_ast3827, _ast3829, _ast3831>>>, NamedDeclName<_str359> {}; // CXXMethod Stringify
struct _ast3827: NamedDeclName<_str220>, ParmVarDecl<_ast3828> {}; // ParmVar context
struct _ast3829: NamedDeclName<_str360>, ParmVarDecl<_ast3830> {}; // ParmVar json_object
struct _ast3831: NamedDeclName<_str361>, ParmVarDecl<_ast3832> {}; // ParmVar gap
struct _ast3833: FunctionProtoType<_ast3834, Pack<_ast3828, _ast3830, _ast3832>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _ast3835: NamedDeclName<_str362>, TypeDecl<_ast3836> {}; // CXXRecord ValueSerializer
struct _ast3836: StructOrClassRecordType<RecordType<_ast3835>> {}; // Record v8::ValueSerializer
struct _ast3837: NamedDeclName<_str362>, TypeDecl<_ast3836> {}; // CXXRecord ValueSerializer
struct _ast3838: NamedDeclName<_str363>, TypeDecl<_ast3839> {}; // CXXRecord Delegate
struct _ast3839: StructOrClassRecordType<RecordType<_ast3838>> {}; // Record v8::ValueSerializer::Delegate
struct _ast3840: NamedDeclName<_str363>, TypeDecl<_ast3839> {}; // CXXRecord Delegate
struct _ast3841: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3842, Pack<>>>, _ast3843>>> {}; // CXXDestructor ~Delegate
struct _ast3842: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3843: PointerType<_ast3839> {}; // Pointer v8::ValueSerializer::Delegate *
struct _ast3844: NamedDeclName<_str364>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3847, Pack<_ast3845>>>, _ast3843>> {}; // CXXMethod ThrowDataCloneError
struct _ast3845: NamedDeclName<_str365>, ParmVarDecl<_ast3846> {}; // ParmVar message
struct _ast3847: FunctionProtoType<_ast122, Pack<_ast3846>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast3848: NamedDeclName<_str366>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3852, Pack<_ast3849, _ast3850>>>, _ast3843>> {}; // CXXMethod WriteHostObject
struct _ast3849: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3850: NamedDeclName<_str367>, ParmVarDecl<_ast3851> {}; // ParmVar object
struct _ast3852: FunctionProtoType<_ast3853, Pack<_ast198, _ast3851>, SameType> {}; // FunctionProto Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _ast3854: NamedDeclName<_str368>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3858, Pack<_ast3855, _ast3856>>>, _ast3843>> {}; // CXXMethod GetSharedArrayBufferId
struct _ast3855: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3856: NamedDeclName<_str369>, ParmVarDecl<_ast3857> {}; // ParmVar shared_array_buffer
struct _ast3858: FunctionProtoType<_ast3859, Pack<_ast198, _ast3857>, SameType> {}; // FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
struct _ast3860: NamedDeclName<_str370>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3864, Pack<_ast3861, _ast3862>>>, _ast3843>> {}; // CXXMethod GetWasmModuleTransferId
struct _ast3861: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3862: NamedDeclName<_str371>, ParmVarDecl<_ast3863> {}; // ParmVar module
struct _ast3864: FunctionProtoType<_ast3865, Pack<_ast198, _ast3863>, SameType> {}; // FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
struct _ast3866: NamedDeclName<_str372>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3871, Pack<_ast3867, _ast3868, _ast3869>>>, _ast3843>> {}; // CXXMethod ReallocateBufferMemory
struct _ast3867: NamedDeclName<_str373>, ParmVarDecl<_ast2460> {}; // ParmVar old_buffer
struct _ast3868: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast3869: NamedDeclName<_str375>, ParmVarDecl<_ast3870> {}; // ParmVar actual_size
struct _ast3870: PointerType<_ast3539> {}; // Pointer size_t *
struct _ast3871: FunctionProtoType<_ast2460, Pack<_ast2460, _ast3539, _ast3870>, SameType> {}; // FunctionProto void *(void *, size_t, size_t *)
struct _ast3872: NamedDeclName<_str376>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3874, Pack<_ast3873>>>, _ast3843>> {}; // CXXMethod FreeBufferMemory
struct _ast3873: NamedDeclName<_str377>, ParmVarDecl<_ast2460> {}; // ParmVar buffer
struct _ast3874: FunctionProtoType<_ast122, Pack<_ast2460>, SameType> {}; // FunctionProto void (void *)
struct _ast3875: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3879, Pack<_ast3876>>>, _ast3843>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3876: NamedDeclAnon<_str64>, ParmVarDecl<_ast3877> {}; // ParmVar 
struct _ast3877: LValueReferenceType<ReferenceType<_ast3878>> {}; // LValueReference const v8::ValueSerializer::Delegate &
struct _ast3878: ConstQualifiedType<_ast3839> {}; // Record const v8::ValueSerializer::Delegate
struct _ast3879: FunctionProtoType<_ast3880, Pack<_ast3877>, SameType> {}; // FunctionProto v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
struct _ast3880: LValueReferenceType<ReferenceType<_ast3839>> {}; // LValueReference v8::ValueSerializer::Delegate &
struct _ast3881: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast3882>>>, _ast3883>> {}; // CXXConstructor ValueSerializer
struct _ast3882: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3883: PointerType<_ast3836> {}; // Pointer v8::ValueSerializer *
struct _ast3884: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3887, Pack<_ast3885, _ast3886>>>, _ast3883>> {}; // CXXConstructor ValueSerializer
struct _ast3885: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3886: NamedDeclName<_str378>, ParmVarDecl<_ast3843> {}; // ParmVar delegate
struct _ast3887: FunctionProtoType<_ast122, Pack<_ast198, _ast3843>, SameType> {}; // FunctionProto void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _ast3888: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3889, Pack<>>>, _ast3883>> {}; // CXXDestructor ~ValueSerializer
struct _ast3889: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3890: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast3883>, NamedDeclName<_str379> {}; // CXXMethod WriteHeader
struct _ast3891: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3896, Pack<_ast3892, _ast3894>>>, _ast3883>, NamedDeclName<_str380> {}; // CXXMethod WriteValue
struct _ast3892: NamedDeclName<_str220>, ParmVarDecl<_ast3893> {}; // ParmVar context
struct _ast3894: NamedDeclName<_str152>, ParmVarDecl<_ast3895> {}; // ParmVar value
struct _ast3896: FunctionProtoType<_ast3897, Pack<_ast3893, _ast3895>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast3898: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3899, Pack<>>>, _ast3883>, NamedDeclName<_str381> {}; // CXXMethod Release
struct _ast3899: FunctionProtoType<_ast3900, Pack<>, SameType> {}; // FunctionProto std::pair<uint8_t *, size_t> ()
struct _ast3901: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3905, Pack<_ast3902, _ast3903>>>, _ast3883>, NamedDeclName<_str382> {}; // CXXMethod TransferArrayBuffer
struct _ast3902: NamedDeclName<_str383>, ParmVarDecl<_ast3641> {}; // ParmVar transfer_id
struct _ast3903: NamedDeclName<_str384>, ParmVarDecl<_ast3904> {}; // ParmVar array_buffer
struct _ast3905: FunctionProtoType<_ast122, Pack<_ast3641, _ast3904>, SameType> {}; // FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3906: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast3907>>>, _ast3883>, NamedDeclName<_str385> {}; // CXXMethod SetTreatArrayBufferViewsAsHostObjects
struct _ast3907: NamedDeclName<_str386>, ParmVarDecl<_ast137> {}; // ParmVar mode
struct _ast3908: FunctionProtoType<_ast122, Pack<_ast137>, SameType> {}; // FunctionProto void (bool)
struct _ast3909: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3911, Pack<_ast3910>>>, _ast3883>, NamedDeclName<_str387> {}; // CXXMethod WriteUint32
struct _ast3910: NamedDeclName<_str152>, ParmVarDecl<_ast3641> {}; // ParmVar value
struct _ast3911: FunctionProtoType<_ast122, Pack<_ast3641>, SameType> {}; // FunctionProto void (uint32_t)
struct _ast3912: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3915, Pack<_ast3913>>>, _ast3883>, NamedDeclName<_str388> {}; // CXXMethod WriteUint64
struct _ast3913: NamedDeclName<_str152>, ParmVarDecl<_ast3914> {}; // ParmVar value
struct _ast3914: ABIIndependentSizeType<UnsignedIntegerType, 8> {}; // Typedef uint64_t
struct _ast3915: FunctionProtoType<_ast122, Pack<_ast3914>, SameType> {}; // FunctionProto void (uint64_t)
struct _ast3916: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3919, Pack<_ast3917>>>, _ast3883>, NamedDeclName<_str389> {}; // CXXMethod WriteDouble
struct _ast3917: NamedDeclName<_str152>, ParmVarDecl<_ast3918> {}; // ParmVar value
struct _ast3918: ABIIndependentSizeType<FloatingPointType, 8> {}; // Builtin double
struct _ast3919: FunctionProtoType<_ast122, Pack<_ast3918>, SameType> {}; // FunctionProto void (double)
struct _ast3920: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3925, Pack<_ast3921, _ast3924>>>, _ast3883>, NamedDeclName<_str390> {}; // CXXMethod WriteRawBytes
struct _ast3921: NamedDeclName<_str136>, ParmVarDecl<_ast3922> {}; // ParmVar source
struct _ast3922: PointerType<_ast3923> {}; // Pointer const void *
struct _ast3923: ConstQualifiedType<_ast122> {}; // Builtin const void
struct _ast3924: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast3925: FunctionProtoType<_ast122, Pack<_ast3922, _ast3539>, SameType> {}; // FunctionProto void (const void *, size_t)
struct _ast3926: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3930, Pack<_ast3927>>>, _ast3883>> {}; // CXXConstructor ValueSerializer
struct _ast3927: NamedDeclAnon<_str64>, ParmVarDecl<_ast3928> {}; // ParmVar 
struct _ast3928: LValueReferenceType<ReferenceType<_ast3929>> {}; // LValueReference const v8::ValueSerializer &
struct _ast3929: ConstQualifiedType<_ast3836> {}; // Record const v8::ValueSerializer
struct _ast3930: FunctionProtoType<_ast122, Pack<_ast3928>, SameType> {}; // FunctionProto void (const v8::ValueSerializer &)
struct _ast3931: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3930, Pack<_ast3932>>>, _ast3883>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3932: NamedDeclAnon<_str64>, ParmVarDecl<_ast3928> {}; // ParmVar 
struct _ast3933: NamedDeclName<_str391>, TypeDecl<_ast3934> {}; // CXXRecord ValueDeserializer
struct _ast3934: StructOrClassRecordType<RecordType<_ast3933>> {}; // Record v8::ValueDeserializer
struct _ast3935: NamedDeclName<_str391>, TypeDecl<_ast3934> {}; // CXXRecord ValueDeserializer
struct _ast3936: NamedDeclName<_str363>, TypeDecl<_ast3937> {}; // CXXRecord Delegate
struct _ast3937: StructOrClassRecordType<RecordType<_ast3936>> {}; // Record v8::ValueDeserializer::Delegate
struct _ast3938: NamedDeclName<_str363>, TypeDecl<_ast3937> {}; // CXXRecord Delegate
struct _ast3939: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3940, Pack<>>>, _ast3941>>> {}; // CXXDestructor ~Delegate
struct _ast3940: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3941: PointerType<_ast3937> {}; // Pointer v8::ValueDeserializer::Delegate *
struct _ast3942: NamedDeclName<_str392>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3944, Pack<_ast3943>>>, _ast3941>> {}; // CXXMethod ReadHostObject
struct _ast3943: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3944: FunctionProtoType<_ast3945, Pack<_ast198>, SameType> {}; // FunctionProto MaybeLocal<v8::Object> (v8::Isolate *)
struct _ast3946: NamedDeclName<_str393>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3949, Pack<_ast3947, _ast3948>>>, _ast3941>> {}; // CXXMethod GetWasmModuleFromId
struct _ast3947: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3948: NamedDeclName<_str383>, ParmVarDecl<_ast3641> {}; // ParmVar transfer_id
struct _ast3949: FunctionProtoType<_ast3950, Pack<_ast198, _ast3641>, SameType> {}; // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
struct _ast3951: NamedDeclName<_str394>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3954, Pack<_ast3952, _ast3953>>>, _ast3941>> {}; // CXXMethod GetSharedArrayBufferFromId
struct _ast3952: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3953: NamedDeclName<_str395>, ParmVarDecl<_ast3641> {}; // ParmVar clone_id
struct _ast3954: FunctionProtoType<_ast3955, Pack<_ast198, _ast3641>, SameType> {}; // FunctionProto MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
struct _ast3956: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3960, Pack<_ast3957>>>, _ast3941>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast3957: NamedDeclAnon<_str64>, ParmVarDecl<_ast3958> {}; // ParmVar 
struct _ast3958: LValueReferenceType<ReferenceType<_ast3959>> {}; // LValueReference const v8::ValueDeserializer::Delegate &
struct _ast3959: ConstQualifiedType<_ast3937> {}; // Record const v8::ValueDeserializer::Delegate
struct _ast3960: FunctionProtoType<_ast3961, Pack<_ast3958>, SameType> {}; // FunctionProto v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
struct _ast3961: LValueReferenceType<ReferenceType<_ast3937>> {}; // LValueReference v8::ValueDeserializer::Delegate &
struct _ast3962: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3966, Pack<_ast3963, _ast3964, _ast3965>>>, _ast3967>> {}; // CXXConstructor ValueDeserializer
struct _ast3963: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3964: NamedDeclName<_str129>, ParmVarDecl<_ast3478> {}; // ParmVar data
struct _ast3965: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast3966: FunctionProtoType<_ast122, Pack<_ast198, _ast3478, _ast3539>, SameType> {}; // FunctionProto void (v8::Isolate *, const uint8_t *, size_t)
struct _ast3967: PointerType<_ast3934> {}; // Pointer v8::ValueDeserializer *
struct _ast3968: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3973, Pack<_ast3969, _ast3970, _ast3971, _ast3972>>>, _ast3967>> {}; // CXXConstructor ValueDeserializer
struct _ast3969: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast3970: NamedDeclName<_str129>, ParmVarDecl<_ast3478> {}; // ParmVar data
struct _ast3971: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast3972: NamedDeclName<_str378>, ParmVarDecl<_ast3941> {}; // ParmVar delegate
struct _ast3973: FunctionProtoType<_ast122, Pack<_ast198, _ast3478, _ast3539, _ast3941>, SameType> {}; // FunctionProto void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
struct _ast3974: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3975, Pack<>>>, _ast3967>> {}; // CXXDestructor ~ValueDeserializer
struct _ast3975: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast3976: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3979, Pack<_ast3977>>>, _ast3967>, NamedDeclName<_str396> {}; // CXXMethod ReadHeader
struct _ast3977: NamedDeclName<_str220>, ParmVarDecl<_ast3978> {}; // ParmVar context
struct _ast3979: FunctionProtoType<_ast3980, Pack<_ast3978>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>)
struct _ast3981: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3984, Pack<_ast3982>>>, _ast3967>, NamedDeclName<_str397> {}; // CXXMethod ReadValue
struct _ast3982: NamedDeclName<_str220>, ParmVarDecl<_ast3983> {}; // ParmVar context
struct _ast3984: FunctionProtoType<_ast3985, Pack<_ast3983>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3986: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3990, Pack<_ast3987, _ast3988>>>, _ast3967>, NamedDeclName<_str382> {}; // CXXMethod TransferArrayBuffer
struct _ast3987: NamedDeclName<_str383>, ParmVarDecl<_ast3641> {}; // ParmVar transfer_id
struct _ast3988: NamedDeclName<_str384>, ParmVarDecl<_ast3989> {}; // ParmVar array_buffer
struct _ast3990: FunctionProtoType<_ast122, Pack<_ast3641, _ast3989>, SameType> {}; // FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3991: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3995, Pack<_ast3992, _ast3993>>>, _ast3967>, NamedDeclName<_str398> {}; // CXXMethod TransferSharedArrayBuffer
struct _ast3992: NamedDeclName<_str399>, ParmVarDecl<_ast3641> {}; // ParmVar id
struct _ast3993: NamedDeclName<_str369>, ParmVarDecl<_ast3994> {}; // ParmVar shared_array_buffer
struct _ast3995: FunctionProtoType<_ast122, Pack<_ast3641, _ast3994>, SameType> {}; // FunctionProto void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _ast3996: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast3997>>>, _ast3967>, NamedDeclName<_str400> {}; // CXXMethod SetSupportsLegacyWireFormat
struct _ast3997: NamedDeclName<_str401>, ParmVarDecl<_ast137> {}; // ParmVar supports_legacy_wire_format
struct _ast3998: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast3999>>>, _ast3967>, NamedDeclName<_str402> {}; // CXXMethod SetExpectInlineWasm
struct _ast3999: NamedDeclName<_str403>, ParmVarDecl<_ast137> {}; // ParmVar allow_inline_wasm
struct _ast4000: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4001, Pack<>>>, _ast4002>, NamedDeclName<_str404> {}; // CXXMethod GetWireFormatVersion
struct _ast4001: FunctionProtoType<_ast3641, Pack<>, ConstQualifiedType> {}; // FunctionProto uint32_t () const
struct _ast4002: PointerType<_ast4003> {}; // Pointer const v8::ValueDeserializer *
struct _ast4003: ConstQualifiedType<_ast3934> {}; // Record const v8::ValueDeserializer
struct _ast4004: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4007, Pack<_ast4005>>>, _ast3967>, NamedDeclName<_str405> {}; // CXXMethod ReadUint32
struct _ast4005: NamedDeclName<_str152>, ParmVarDecl<_ast4006> {}; // ParmVar value
struct _ast4006: PointerType<_ast3641> {}; // Pointer uint32_t *
struct _ast4007: FunctionProtoType<_ast137, Pack<_ast4006>, SameType> {}; // FunctionProto bool (uint32_t *)
struct _ast4008: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4011, Pack<_ast4009>>>, _ast3967>, NamedDeclName<_str406> {}; // CXXMethod ReadUint64
struct _ast4009: NamedDeclName<_str152>, ParmVarDecl<_ast4010> {}; // ParmVar value
struct _ast4010: PointerType<_ast3914> {}; // Pointer uint64_t *
struct _ast4011: FunctionProtoType<_ast137, Pack<_ast4010>, SameType> {}; // FunctionProto bool (uint64_t *)
struct _ast4012: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4015, Pack<_ast4013>>>, _ast3967>, NamedDeclName<_str407> {}; // CXXMethod ReadDouble
struct _ast4013: NamedDeclName<_str152>, ParmVarDecl<_ast4014> {}; // ParmVar value
struct _ast4014: PointerType<_ast3918> {}; // Pointer double *
struct _ast4015: FunctionProtoType<_ast137, Pack<_ast4014>, SameType> {}; // FunctionProto bool (double *)
struct _ast4016: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4020, Pack<_ast4017, _ast4018>>>, _ast3967>, NamedDeclName<_str408> {}; // CXXMethod ReadRawBytes
struct _ast4017: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast4018: NamedDeclName<_str129>, ParmVarDecl<_ast4019> {}; // ParmVar data
struct _ast4019: PointerType<_ast3922> {}; // Pointer const void **
struct _ast4020: FunctionProtoType<_ast137, Pack<_ast3539, _ast4019>, SameType> {}; // FunctionProto bool (size_t, const void **)
struct _ast4021: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4024, Pack<_ast4022>>>, _ast3967>> {}; // CXXConstructor ValueDeserializer
struct _ast4022: NamedDeclAnon<_str64>, ParmVarDecl<_ast4023> {}; // ParmVar 
struct _ast4023: LValueReferenceType<ReferenceType<_ast4003>> {}; // LValueReference const v8::ValueDeserializer &
struct _ast4024: FunctionProtoType<_ast122, Pack<_ast4023>, SameType> {}; // FunctionProto void (const v8::ValueDeserializer &)
struct _ast4025: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4024, Pack<_ast4026>>>, _ast3967>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast4026: NamedDeclAnon<_str64>, ParmVarDecl<_ast4023> {}; // ParmVar 
struct _ast4027: NamedDeclName<_str49>, TypeDecl<_ast110> {}; // CXXRecord Value
struct _ast4028: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str409> {}; // CXXMethod IsUndefined
struct _ast4029: PointerType<_ast4030> {}; // Pointer const v8::Value *
struct _ast4030: ConstQualifiedType<_ast110> {}; // Record const v8::Value
struct _ast4031: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str410> {}; // CXXMethod IsNull
struct _ast4032: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str411> {}; // CXXMethod IsNullOrUndefined
struct _ast4033: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str412> {}; // CXXMethod IsTrue
struct _ast4034: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str413> {}; // CXXMethod IsFalse
struct _ast4035: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str414> {}; // CXXMethod IsName
struct _ast4036: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str415> {}; // CXXMethod IsString
struct _ast4037: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str416> {}; // CXXMethod IsSymbol
struct _ast4038: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str417> {}; // CXXMethod IsFunction
struct _ast4039: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str418> {}; // CXXMethod IsArray
struct _ast4040: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str419> {}; // CXXMethod IsObject
struct _ast4041: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str420> {}; // CXXMethod IsBigInt
struct _ast4042: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str421> {}; // CXXMethod IsBoolean
struct _ast4043: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str422> {}; // CXXMethod IsNumber
struct _ast4044: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str423> {}; // CXXMethod IsExternal
struct _ast4045: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str424> {}; // CXXMethod IsInt32
struct _ast4046: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str425> {}; // CXXMethod IsUint32
struct _ast4047: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str426> {}; // CXXMethod IsDate
struct _ast4048: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str427> {}; // CXXMethod IsArgumentsObject
struct _ast4049: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str428> {}; // CXXMethod IsBigIntObject
struct _ast4050: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str429> {}; // CXXMethod IsBooleanObject
struct _ast4051: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str430> {}; // CXXMethod IsNumberObject
struct _ast4052: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str431> {}; // CXXMethod IsStringObject
struct _ast4053: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str432> {}; // CXXMethod IsSymbolObject
struct _ast4054: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str433> {}; // CXXMethod IsNativeError
struct _ast4055: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str434> {}; // CXXMethod IsRegExp
struct _ast4056: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str435> {}; // CXXMethod IsAsyncFunction
struct _ast4057: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str436> {}; // CXXMethod IsGeneratorFunction
struct _ast4058: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str437> {}; // CXXMethod IsGeneratorObject
struct _ast4059: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str438> {}; // CXXMethod IsPromise
struct _ast4060: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str439> {}; // CXXMethod IsMap
struct _ast4061: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str440> {}; // CXXMethod IsSet
struct _ast4062: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str441> {}; // CXXMethod IsMapIterator
struct _ast4063: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str442> {}; // CXXMethod IsSetIterator
struct _ast4064: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str443> {}; // CXXMethod IsWeakMap
struct _ast4065: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str444> {}; // CXXMethod IsWeakSet
struct _ast4066: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str445> {}; // CXXMethod IsArrayBuffer
struct _ast4067: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str446> {}; // CXXMethod IsArrayBufferView
struct _ast4068: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str447> {}; // CXXMethod IsTypedArray
struct _ast4069: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str448> {}; // CXXMethod IsUint8Array
struct _ast4070: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str449> {}; // CXXMethod IsUint8ClampedArray
struct _ast4071: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str450> {}; // CXXMethod IsInt8Array
struct _ast4072: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str451> {}; // CXXMethod IsUint16Array
struct _ast4073: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str452> {}; // CXXMethod IsInt16Array
struct _ast4074: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str453> {}; // CXXMethod IsUint32Array
struct _ast4075: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str454> {}; // CXXMethod IsInt32Array
struct _ast4076: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str455> {}; // CXXMethod IsFloat32Array
struct _ast4077: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str456> {}; // CXXMethod IsFloat64Array
struct _ast4078: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str457> {}; // CXXMethod IsBigInt64Array
struct _ast4079: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str458> {}; // CXXMethod IsBigUint64Array
struct _ast4080: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str459> {}; // CXXMethod IsDataView
struct _ast4081: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str460> {}; // CXXMethod IsSharedArrayBuffer
struct _ast4082: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str461> {}; // CXXMethod IsProxy
struct _ast4083: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str462> {}; // CXXMethod IsWebAssemblyCompiledModule
struct _ast4084: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4029>, NamedDeclName<_str463> {}; // CXXMethod IsModuleNamespaceObject
struct _ast4085: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4088, Pack<_ast4086>>>, _ast4029>, NamedDeclName<_str464> {}; // CXXMethod ToBigInt
struct _ast4086: NamedDeclName<_str220>, ParmVarDecl<_ast4087> {}; // ParmVar context
struct _ast4088: FunctionProtoType<_ast4089, Pack<_ast4087>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _ast4090: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4093, Pack<_ast4091>>>, _ast4029>, NamedDeclName<_str465> {}; // CXXMethod ToNumber
struct _ast4091: NamedDeclName<_str220>, ParmVarDecl<_ast4092> {}; // ParmVar context
struct _ast4093: FunctionProtoType<_ast4094, Pack<_ast4092>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _ast4095: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4098, Pack<_ast4096>>>, _ast4029>, NamedDeclName<_str466> {}; // CXXMethod ToString
struct _ast4096: NamedDeclName<_str220>, ParmVarDecl<_ast4097> {}; // ParmVar context
struct _ast4098: FunctionProtoType<_ast4099, Pack<_ast4097>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast4100: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4103, Pack<_ast4101>>>, _ast4029>, NamedDeclName<_str467> {}; // CXXMethod ToDetailString
struct _ast4101: NamedDeclName<_str220>, ParmVarDecl<_ast4102> {}; // ParmVar context
struct _ast4103: FunctionProtoType<_ast4104, Pack<_ast4102>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast4105: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4108, Pack<_ast4106>>>, _ast4029>, NamedDeclName<_str468> {}; // CXXMethod ToObject
struct _ast4106: NamedDeclName<_str220>, ParmVarDecl<_ast4107> {}; // ParmVar context
struct _ast4108: FunctionProtoType<_ast4109, Pack<_ast4107>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast4110: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4113, Pack<_ast4111>>>, _ast4029>, NamedDeclName<_str469> {}; // CXXMethod ToInteger
struct _ast4111: NamedDeclName<_str220>, ParmVarDecl<_ast4112> {}; // ParmVar context
struct _ast4113: FunctionProtoType<_ast4114, Pack<_ast4112>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _ast4115: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4118, Pack<_ast4116>>>, _ast4029>, NamedDeclName<_str470> {}; // CXXMethod ToUint32
struct _ast4116: NamedDeclName<_str220>, ParmVarDecl<_ast4117> {}; // ParmVar context
struct _ast4118: FunctionProtoType<_ast4119, Pack<_ast4117>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast4120: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4123, Pack<_ast4121>>>, _ast4029>, NamedDeclName<_str471> {}; // CXXMethod ToInt32
struct _ast4121: NamedDeclName<_str220>, ParmVarDecl<_ast4122> {}; // ParmVar context
struct _ast4123: FunctionProtoType<_ast4124, Pack<_ast4122>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _ast4125: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4127, Pack<_ast4126>>>, _ast4029>, NamedDeclName<_str472> {}; // CXXMethod ToBoolean
struct _ast4126: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4127: FunctionProtoType<_ast4128, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *) const
struct _ast4129: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4132, Pack<_ast4130>>>, _ast4029>, NamedDeclName<_str473> {}; // CXXMethod ToArrayIndex
struct _ast4130: NamedDeclName<_str220>, ParmVarDecl<_ast4131> {}; // ParmVar context
struct _ast4132: FunctionProtoType<_ast4133, Pack<_ast4131>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast4134: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4136, Pack<_ast4135>>>, _ast4029>, NamedDeclName<_str474> {}; // CXXMethod BooleanValue
struct _ast4135: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4136: FunctionProtoType<_ast137, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto bool (v8::Isolate *) const
struct _ast4137: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4140, Pack<_ast4138>>>, _ast4029>, NamedDeclName<_str475> {}; // CXXMethod NumberValue
struct _ast4138: NamedDeclName<_str220>, ParmVarDecl<_ast4139> {}; // ParmVar context
struct _ast4140: FunctionProtoType<_ast4141, Pack<_ast4139>, ConstQualifiedType> {}; // FunctionProto Maybe<double> (Local<v8::Context>) const
struct _ast4142: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4145, Pack<_ast4143>>>, _ast4029>, NamedDeclName<_str476> {}; // CXXMethod IntegerValue
struct _ast4143: NamedDeclName<_str220>, ParmVarDecl<_ast4144> {}; // ParmVar context
struct _ast4145: FunctionProtoType<_ast4146, Pack<_ast4144>, ConstQualifiedType> {}; // FunctionProto Maybe<int64_t> (Local<v8::Context>) const
struct _ast4147: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4150, Pack<_ast4148>>>, _ast4029>, NamedDeclName<_str477> {}; // CXXMethod Uint32Value
struct _ast4148: NamedDeclName<_str220>, ParmVarDecl<_ast4149> {}; // ParmVar context
struct _ast4150: FunctionProtoType<_ast4151, Pack<_ast4149>, ConstQualifiedType> {}; // FunctionProto Maybe<uint32_t> (Local<v8::Context>) const
struct _ast4152: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4155, Pack<_ast4153>>>, _ast4029>, NamedDeclName<_str478> {}; // CXXMethod Int32Value
struct _ast4153: NamedDeclName<_str220>, ParmVarDecl<_ast4154> {}; // ParmVar context
struct _ast4155: FunctionProtoType<_ast4156, Pack<_ast4154>, ConstQualifiedType> {}; // FunctionProto Maybe<int32_t> (Local<v8::Context>) const
struct _ast4157: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4162, Pack<_ast4158, _ast4160>>>, _ast4029>, NamedDeclName<_str479> {}; // CXXMethod Equals
struct _ast4158: NamedDeclName<_str220>, ParmVarDecl<_ast4159> {}; // ParmVar context
struct _ast4160: NamedDeclName<_str53>, ParmVarDecl<_ast4161> {}; // ParmVar that
struct _ast4162: FunctionProtoType<_ast4163, Pack<_ast4159, _ast4161>, ConstQualifiedType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _ast4164: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4167, Pack<_ast4165>>>, _ast4029>, NamedDeclName<_str480> {}; // CXXMethod StrictEquals
struct _ast4165: NamedDeclName<_str53>, ParmVarDecl<_ast4166> {}; // ParmVar that
struct _ast4167: FunctionProtoType<_ast137, Pack<_ast4166>, ConstQualifiedType> {}; // FunctionProto bool (Local<v8::Value>) const
struct _ast4168: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4171, Pack<_ast4169>>>, _ast4029>, NamedDeclName<_str481> {}; // CXXMethod SameValue
struct _ast4169: NamedDeclName<_str53>, ParmVarDecl<_ast4170> {}; // ParmVar that
struct _ast4171: FunctionProtoType<_ast137, Pack<_ast4170>, ConstQualifiedType> {}; // FunctionProto bool (Local<v8::Value>) const
struct _ast4172: NamedDeclName<_str60> {}; // FunctionTemplate Cast
struct _ast4173: NamedDeclName<_str21>, TypeDecl<_ast4174> {}; // TemplateTypeParm T
struct _ast4175: MethodDecl<FunctionDecl<_ast4178, Pack<_ast4176>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4176: NamedDeclName<_str152>, ParmVarDecl<_ast4177> {}; // ParmVar value
struct _ast4177: PointerType<_ast4174> {}; // Pointer T *
struct _ast4178: FunctionProtoType<_ast4179, Pack<_ast4177>, SameType> {}; // FunctionProto v8::Value *(T *)
struct _ast4179: PointerType<_ast110> {}; // Pointer v8::Value *
struct _ast4180: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4182, Pack<_ast4181>>>, _ast4179>, NamedDeclName<_str482> {}; // CXXMethod TypeOf
struct _ast4181: NamedDeclAnon<_str64>, ParmVarDecl<_ast198> {}; // ParmVar 
struct _ast4182: FunctionProtoType<_ast4183, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::String> (v8::Isolate *)
struct _ast4184: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4189, Pack<_ast4185, _ast4187>>>, _ast4179>, NamedDeclName<_str483> {}; // CXXMethod InstanceOf
struct _ast4185: NamedDeclName<_str220>, ParmVarDecl<_ast4186> {}; // ParmVar context
struct _ast4187: NamedDeclName<_str367>, ParmVarDecl<_ast4188> {}; // ParmVar object
struct _ast4189: FunctionProtoType<_ast4190, Pack<_ast4186, _ast4188>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _ast4191: NamedDeclName<_str30>, TypeDecl<_ast72> {}; // CXXRecord Primitive
struct _ast4192: NamedDeclName<_str10>, TypeDecl<_ast19> {}; // CXXRecord Boolean
struct _ast4193: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4194>, NamedDeclName<_str49> {}; // CXXMethod Value
struct _ast4194: PointerType<_ast4195> {}; // Pointer const v8::Boolean *
struct _ast4195: ConstQualifiedType<_ast19> {}; // Record const v8::Boolean
struct _ast4196: MethodDecl<FunctionDecl<_ast4200, Pack<_ast4197>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4197: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4198: PointerType<_ast4199> {}; // Pointer v8::Value *
struct _ast4200: FunctionProtoType<_ast4201, Pack<_ast4198>, SameType> {}; // FunctionProto v8::Boolean *(v8::Value *)
struct _ast4201: PointerType<_ast19> {}; // Pointer v8::Boolean *
struct _ast4202: MethodDecl<FunctionDecl<_ast4205, Pack<_ast4203, _ast4204>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast4203: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4204: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast4205: FunctionProtoType<_ast4206, Pack<_ast198, _ast137>, SameType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *, bool)
struct _ast4207: NamedDeclName<_str23>, TypeDecl<_ast58> {}; // CXXRecord Name
struct _ast4208: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast4209>, NamedDeclName<_str217> {}; // CXXMethod GetIdentityHash
struct _ast4209: PointerType<_ast58> {}; // Pointer v8::Name *
struct _ast4210: MethodDecl<FunctionDecl<_ast4212, Pack<_ast4211>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4211: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast4212: FunctionProtoType<_ast4209, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Name *(v8::Value *)
struct _ast4213: NamedDeclName<_str485>, TypeDecl<_ast4214> {}; // Enum NewStringType
struct _ast4214: EnumType<_ast4213, _ast2095> {}; // Enum v8::NewStringType
struct _ast4215: NamedDeclName<_str486> {}; // EnumConstant kNormal
struct _ast4216: NamedDeclName<_str487> {}; // EnumConstant kInternalized
struct _ast4217: NamedDeclName<_str41>, TypeDecl<_ast94> {}; // CXXRecord String
struct _ast4218: NamedDeclName<_str488> {}; // Var kMaxLength
struct _ast4219: NamedDeclName<_str246>, TypeDecl<_ast4220> {}; // Enum Encoding
struct _ast4220: EnumType<_ast4219, _ast2095> {}; // Enum v8::String::Encoding
struct _ast4221: NamedDeclName<_str489> {}; // EnumConstant UNKNOWN_ENCODING
struct _ast4222: NamedDeclName<_str490> {}; // EnumConstant TWO_BYTE_ENCODING
struct _ast4223: NamedDeclName<_str491> {}; // EnumConstant ONE_BYTE_ENCODING
struct _ast4224: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast4225>, NamedDeclName<_str160> {}; // CXXMethod Length
struct _ast4225: PointerType<_ast4226> {}; // Pointer const v8::String *
struct _ast4226: ConstQualifiedType<_ast94> {}; // Record const v8::String
struct _ast4227: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4229, Pack<_ast4228>>>, _ast4225>, NamedDeclName<_str492> {}; // CXXMethod Utf8Length
struct _ast4228: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4229: FunctionProtoType<_ast2095, Pack<_ast198>, ConstQualifiedType> {}; // FunctionProto int (v8::Isolate *) const
struct _ast4230: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4225>, NamedDeclName<_str493> {}; // CXXMethod IsOneByte
struct _ast4231: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4225>, NamedDeclName<_str494> {}; // CXXMethod ContainsOnlyOneByte
struct _ast4232: NamedDeclName<_str495>, TypeDecl<_ast4233> {}; // Enum WriteOptions
struct _ast4233: EnumType<_ast4232, _ast2095> {}; // Enum v8::String::WriteOptions
struct _ast4234: NamedDeclName<_str496> {}; // EnumConstant NO_OPTIONS
struct _ast4235: NamedDeclName<_str497> {}; // EnumConstant HINT_MANY_WRITES_EXPECTED
struct _ast4236: NamedDeclName<_str498> {}; // EnumConstant NO_NULL_TERMINATION
struct _ast4237: NamedDeclName<_str499> {}; // EnumConstant PRESERVE_ONE_BYTE_NULL
struct _ast4238: NamedDeclName<_str500> {}; // EnumConstant REPLACE_INVALID_UTF8
struct _ast4239: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4246, Pack<_ast4240, _ast4241, _ast4243, _ast4244, _ast4245>>>, _ast4225>, NamedDeclName<_str501> {}; // CXXMethod Write
struct _ast4240: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4241: NamedDeclName<_str377>, ParmVarDecl<_ast4242> {}; // ParmVar buffer
struct _ast4242: PointerType<_ast2115> {}; // Pointer uint16_t *
struct _ast4243: NamedDeclName<_str348>, ParmVarDecl<_ast2095> {}; // ParmVar start
struct _ast4244: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast4245: NamedDeclName<_str275>, ParmVarDecl<_ast2095> {}; // ParmVar options
struct _ast4246: FunctionProtoType<_ast2095, Pack<_ast198, _ast4242, _ast2095, _ast2095, _ast2095>, ConstQualifiedType> {}; // FunctionProto int (v8::Isolate *, uint16_t *, int, int, int) const
struct _ast4247: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4254, Pack<_ast4248, _ast4249, _ast4251, _ast4252, _ast4253>>>, _ast4225>, NamedDeclName<_str502> {}; // CXXMethod WriteOneByte
struct _ast4248: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4249: NamedDeclName<_str377>, ParmVarDecl<_ast4250> {}; // ParmVar buffer
struct _ast4250: PointerType<_ast3480> {}; // Pointer uint8_t *
struct _ast4251: NamedDeclName<_str348>, ParmVarDecl<_ast2095> {}; // ParmVar start
struct _ast4252: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast4253: NamedDeclName<_str275>, ParmVarDecl<_ast2095> {}; // ParmVar options
struct _ast4254: FunctionProtoType<_ast2095, Pack<_ast198, _ast4250, _ast2095, _ast2095, _ast2095>, ConstQualifiedType> {}; // FunctionProto int (v8::Isolate *, uint8_t *, int, int, int) const
struct _ast4255: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4263, Pack<_ast4256, _ast4257, _ast4259, _ast4260, _ast4262>>>, _ast4225>, NamedDeclName<_str503> {}; // CXXMethod WriteUtf8
struct _ast4256: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4257: NamedDeclName<_str377>, ParmVarDecl<_ast4258> {}; // ParmVar buffer
struct _ast4258: PointerType<_ast2110> {}; // Pointer char *
struct _ast4259: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast4260: NamedDeclName<_str504>, ParmVarDecl<_ast4261> {}; // ParmVar nchars_ref
struct _ast4261: PointerType<_ast2095> {}; // Pointer int *
struct _ast4262: NamedDeclName<_str275>, ParmVarDecl<_ast2095> {}; // ParmVar options
struct _ast4263: FunctionProtoType<_ast2095, Pack<_ast198, _ast4258, _ast2095, _ast4261, _ast2095>, ConstQualifiedType> {}; // FunctionProto int (v8::Isolate *, char *, int, int *, int) const
struct _ast4264: MethodDecl<FunctionDecl<_ast4266, Pack<_ast4265>>>, NamedDeclName<_str77> {}; // CXXMethod Empty
struct _ast4265: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4266: FunctionProtoType<_ast4267, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::String> (v8::Isolate *)
struct _ast4268: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4225>, NamedDeclName<_str423> {}; // CXXMethod IsExternal
struct _ast4269: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4225>, NamedDeclName<_str505> {}; // CXXMethod IsExternalOneByte
struct _ast4270: NamedDeclName<_str506>, TypeDecl<_ast4271> {}; // CXXRecord ExternalStringResourceBase
struct _ast4271: StructOrClassRecordType<RecordType<_ast4270>> {}; // Record v8::String::ExternalStringResourceBase
struct _ast4272: NamedDeclName<_str506>, TypeDecl<_ast4271> {}; // CXXRecord ExternalStringResourceBase
struct _ast4273: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast4274>>> {}; // CXXDestructor ~ExternalStringResourceBase
struct _ast4274: PointerType<_ast4271> {}; // Pointer v8::String::ExternalStringResourceBase *
struct _ast4275: NamedDeclName<_str507>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast4276>> {}; // CXXMethod IsCacheable
struct _ast4276: PointerType<_ast4277> {}; // Pointer const v8::String::ExternalStringResourceBase *
struct _ast4277: ConstQualifiedType<_ast4271> {}; // Record const v8::String::ExternalStringResourceBase
struct _ast4278: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4281, Pack<_ast4279>>>, _ast4274>> {}; // CXXConstructor ExternalStringResourceBase
struct _ast4279: NamedDeclAnon<_str64>, ParmVarDecl<_ast4280> {}; // ParmVar 
struct _ast4280: LValueReferenceType<ReferenceType<_ast4277>> {}; // LValueReference const v8::String::ExternalStringResourceBase &
struct _ast4281: FunctionProtoType<_ast122, Pack<_ast4280>, SameType> {}; // FunctionProto void (const v8::String::ExternalStringResourceBase &)
struct _ast4282: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4281, Pack<_ast4283>>>, _ast4274>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast4283: NamedDeclAnon<_str64>, ParmVarDecl<_ast4280> {}; // ParmVar 
struct _ast4284: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4285, Pack<>>>, _ast4274>> {}; // CXXConstructor ExternalStringResourceBase
struct _ast4285: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast4286: NamedDeclName<_str508>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast4274>> {}; // CXXMethod Dispose
struct _ast4287: NamedDeclName<_str509>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4288, Pack<>>>, _ast4276>> {}; // CXXMethod Lock
struct _ast4288: FunctionProtoType<_ast122, Pack<>, ConstQualifiedType> {}; // FunctionProto void () const
struct _ast4289: NamedDeclName<_str510>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4288, Pack<>>>, _ast4276>> {}; // CXXMethod Unlock
struct _ast4290: NamedDeclName<_str511>, TypeDecl<_ast4291> {}; // CXXRecord ExternalStringResource
struct _ast4291: StructOrClassRecordType<RecordType<_ast4290>> {}; // Record v8::String::ExternalStringResource
struct _ast4292: NamedDeclName<_str511>, TypeDecl<_ast4291> {}; // CXXRecord ExternalStringResource
struct _ast4293: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast4294>>> {}; // CXXDestructor ~ExternalStringResource
struct _ast4294: PointerType<_ast4291> {}; // Pointer v8::String::ExternalStringResource *
struct _ast4295: NamedDeclName<_str129>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4296, Pack<>>>, _ast4299>> {}; // CXXMethod data
struct _ast4296: FunctionProtoType<_ast4297, Pack<>, ConstQualifiedType> {}; // FunctionProto const uint16_t *() const
struct _ast4297: PointerType<_ast4298> {}; // Pointer const uint16_t *
struct _ast4298: ConstQualifiedType<_ast2115> {}; // Typedef const uint16_t
struct _ast4299: PointerType<_ast4300> {}; // Pointer const v8::String::ExternalStringResource *
struct _ast4300: ConstQualifiedType<_ast4291> {}; // Record const v8::String::ExternalStringResource
struct _ast4301: NamedDeclName<_str159>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast4299>> {}; // CXXMethod length
struct _ast4302: FunctionProtoType<_ast3539, Pack<>, ConstQualifiedType> {}; // FunctionProto size_t () const
struct _ast4303: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4304, Pack<>>>, _ast4294>> {}; // CXXConstructor ExternalStringResource
struct _ast4304: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast4305: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4308, Pack<_ast4306>>>, _ast4294>> {}; // CXXConstructor ExternalStringResource
struct _ast4306: NamedDeclAnon<_str64>, ParmVarDecl<_ast4307> {}; // ParmVar 
struct _ast4307: LValueReferenceType<ReferenceType<_ast4300>> {}; // LValueReference const v8::String::ExternalStringResource &
struct _ast4308: FunctionProtoType<_ast122, Pack<_ast4307>, SameType> {}; // FunctionProto void (const v8::String::ExternalStringResource &)
struct _ast4309: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4311, Pack<_ast4310>>>, _ast4294>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast4310: NamedDeclAnon<_str64>, ParmVarDecl<_ast4307> {}; // ParmVar 
struct _ast4311: FunctionProtoType<_ast4312, Pack<_ast4307>, SameType> {}; // FunctionProto v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
struct _ast4312: LValueReferenceType<ReferenceType<_ast4291>> {}; // LValueReference v8::String::ExternalStringResource &
struct _ast4313: NamedDeclName<_str512>, TypeDecl<_ast4314> {}; // CXXRecord ExternalOneByteStringResource
struct _ast4314: StructOrClassRecordType<RecordType<_ast4313>> {}; // Record v8::String::ExternalOneByteStringResource
struct _ast4315: NamedDeclName<_str512>, TypeDecl<_ast4314> {}; // CXXRecord ExternalOneByteStringResource
struct _ast4316: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast4317>>> {}; // CXXDestructor ~ExternalOneByteStringResource
struct _ast4317: PointerType<_ast4314> {}; // Pointer v8::String::ExternalOneByteStringResource *
struct _ast4318: NamedDeclName<_str129>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4319, Pack<>>>, _ast4320>> {}; // CXXMethod data
struct _ast4319: FunctionProtoType<_ast2108, Pack<>, ConstQualifiedType> {}; // FunctionProto const char *() const
struct _ast4320: PointerType<_ast4321> {}; // Pointer const v8::String::ExternalOneByteStringResource *
struct _ast4321: ConstQualifiedType<_ast4314> {}; // Record const v8::String::ExternalOneByteStringResource
struct _ast4322: NamedDeclName<_str159>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast4320>> {}; // CXXMethod length
struct _ast4323: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4324, Pack<>>>, _ast4317>> {}; // CXXConstructor ExternalOneByteStringResource
struct _ast4324: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast4325: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4328, Pack<_ast4326>>>, _ast4317>> {}; // CXXConstructor ExternalOneByteStringResource
struct _ast4326: NamedDeclAnon<_str64>, ParmVarDecl<_ast4327> {}; // ParmVar 
struct _ast4327: LValueReferenceType<ReferenceType<_ast4321>> {}; // LValueReference const v8::String::ExternalOneByteStringResource &
struct _ast4328: FunctionProtoType<_ast122, Pack<_ast4327>, SameType> {}; // FunctionProto void (const v8::String::ExternalOneByteStringResource &)
struct _ast4329: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4331, Pack<_ast4330>>>, _ast4317>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast4330: NamedDeclAnon<_str64>, ParmVarDecl<_ast4327> {}; // ParmVar 
struct _ast4331: FunctionProtoType<_ast4332, Pack<_ast4327>, SameType> {}; // FunctionProto v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
struct _ast4332: LValueReferenceType<ReferenceType<_ast4314>> {}; // LValueReference v8::String::ExternalOneByteStringResource &
struct _ast4333: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4336, Pack<_ast4334>>>, _ast4225>, NamedDeclName<_str513> {}; // CXXMethod GetExternalStringResourceBase
struct _ast4334: NamedDeclName<_str514>, ParmVarDecl<_ast4335> {}; // ParmVar encoding_out
struct _ast4335: PointerType<_ast4220> {}; // Pointer v8::String::Encoding *
struct _ast4336: FunctionProtoType<_ast4274, Pack<_ast4335>, ConstQualifiedType> {}; // FunctionProto v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
struct _ast4337: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4338, Pack<>>>, _ast4225>, NamedDeclName<_str515> {}; // CXXMethod GetExternalStringResource
struct _ast4338: FunctionProtoType<_ast4294, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::String::ExternalStringResource *() const
struct _ast4339: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4340, Pack<>>>, _ast4225>, NamedDeclName<_str516> {}; // CXXMethod GetExternalOneByteStringResource
struct _ast4340: FunctionProtoType<_ast4320, Pack<>, ConstQualifiedType> {}; // FunctionProto const v8::String::ExternalOneByteStringResource *() const
struct _ast4341: MethodDecl<FunctionDecl<_ast4343, Pack<_ast4342>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4342: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4343: FunctionProtoType<_ast4344, Pack<_ast4198>, SameType> {}; // FunctionProto v8::String *(v8::Value *)
struct _ast4344: PointerType<_ast94> {}; // Pointer v8::String *
struct _ast4345: MethodDecl<FunctionDecl<_ast4350, Pack<_ast4346, _ast4347, _ast4348, _ast4349>>>, NamedDeclName<_str517> {}; // CXXMethod NewFromUtf8
struct _ast4346: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4347: NamedDeclName<_str129>, ParmVarDecl<_ast2108> {}; // ParmVar data
struct _ast4348: NamedDeclName<_str83>, ParmVarDecl<_ast4214> {}; // ParmVar type
struct _ast4349: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast4350: FunctionProtoType<_ast4351, Pack<_ast198, _ast2108, _ast4214, _ast2095>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
struct _ast4352: MethodDecl<FunctionDecl<_ast4357, Pack<_ast4353, _ast4354, _ast4355, _ast4356>>>, NamedDeclName<_str518> {}; // CXXMethod NewFromOneByte
struct _ast4353: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4354: NamedDeclName<_str129>, ParmVarDecl<_ast3478> {}; // ParmVar data
struct _ast4355: NamedDeclName<_str83>, ParmVarDecl<_ast4214> {}; // ParmVar type
struct _ast4356: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast4357: FunctionProtoType<_ast4358, Pack<_ast198, _ast3478, _ast4214, _ast2095>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
struct _ast4359: MethodDecl<FunctionDecl<_ast4364, Pack<_ast4360, _ast4361, _ast4362, _ast4363>>>, NamedDeclName<_str519> {}; // CXXMethod NewFromTwoByte
struct _ast4360: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4361: NamedDeclName<_str129>, ParmVarDecl<_ast4297> {}; // ParmVar data
struct _ast4362: NamedDeclName<_str83>, ParmVarDecl<_ast4214> {}; // ParmVar type
struct _ast4363: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast4364: FunctionProtoType<_ast4365, Pack<_ast198, _ast4297, _ast4214, _ast2095>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
struct _ast4366: MethodDecl<FunctionDecl<_ast4372, Pack<_ast4367, _ast4368, _ast4370>>>, NamedDeclName<_str520> {}; // CXXMethod Concat
struct _ast4367: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4368: NamedDeclName<_str521>, ParmVarDecl<_ast4369> {}; // ParmVar left
struct _ast4370: NamedDeclName<_str522>, ParmVarDecl<_ast4371> {}; // ParmVar right
struct _ast4372: FunctionProtoType<_ast4373, Pack<_ast198, _ast4369, _ast4371>, SameType> {}; // FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
struct _ast4374: MethodDecl<FunctionDecl<_ast4377, Pack<_ast4375, _ast4376>>>, NamedDeclName<_str523> {}; // CXXMethod NewExternalTwoByte
struct _ast4375: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4376: NamedDeclName<_str524>, ParmVarDecl<_ast4294> {}; // ParmVar resource
struct _ast4377: FunctionProtoType<_ast4378, Pack<_ast198, _ast4294>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
struct _ast4379: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4381, Pack<_ast4380>>>, _ast4344>, NamedDeclName<_str525> {}; // CXXMethod MakeExternal
struct _ast4380: NamedDeclName<_str524>, ParmVarDecl<_ast4294> {}; // ParmVar resource
struct _ast4381: FunctionProtoType<_ast137, Pack<_ast4294>, SameType> {}; // FunctionProto bool (v8::String::ExternalStringResource *)
struct _ast4382: MethodDecl<FunctionDecl<_ast4385, Pack<_ast4383, _ast4384>>>, NamedDeclName<_str526> {}; // CXXMethod NewExternalOneByte
struct _ast4383: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4384: NamedDeclName<_str524>, ParmVarDecl<_ast4317> {}; // ParmVar resource
struct _ast4385: FunctionProtoType<_ast4386, Pack<_ast198, _ast4317>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
struct _ast4387: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4389, Pack<_ast4388>>>, _ast4344>, NamedDeclName<_str525> {}; // CXXMethod MakeExternal
struct _ast4388: NamedDeclName<_str524>, ParmVarDecl<_ast4317> {}; // ParmVar resource
struct _ast4389: FunctionProtoType<_ast137, Pack<_ast4317>, SameType> {}; // FunctionProto bool (v8::String::ExternalOneByteStringResource *)
struct _ast4390: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast4344>, NamedDeclName<_str527> {}; // CXXMethod CanMakeExternal
struct _ast4391: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4394, Pack<_ast4392>>>, _ast4344>, NamedDeclName<_str528> {}; // CXXMethod StringEquals
struct _ast4392: NamedDeclName<_str529>, ParmVarDecl<_ast4393> {}; // ParmVar str
struct _ast4394: FunctionProtoType<_ast137, Pack<_ast4393>, SameType> {}; // FunctionProto bool (Local<v8::String>)
struct _ast4395: NamedDeclName<_str530>, TypeDecl<_ast4396> {}; // CXXRecord Utf8Value
struct _ast4396: StructOrClassRecordType<RecordType<_ast4395>> {}; // Record v8::String::Utf8Value
struct _ast4397: NamedDeclName<_str530>, TypeDecl<_ast4396> {}; // CXXRecord Utf8Value
struct _ast4398: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4402, Pack<_ast4399, _ast4400>>>, _ast4403>> {}; // CXXConstructor Utf8Value
struct _ast4399: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4400: NamedDeclName<_str484>, ParmVarDecl<_ast4401> {}; // ParmVar obj
struct _ast4402: FunctionProtoType<_ast122, Pack<_ast198, _ast4401>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _ast4403: PointerType<_ast4396> {}; // Pointer v8::String::Utf8Value *
struct _ast4404: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4405, Pack<>>>, _ast4403>> {}; // CXXDestructor ~Utf8Value
struct _ast4405: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast4406: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4407, Pack<>>>, _ast4403>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast4407: FunctionProtoType<_ast4258, Pack<>, SameType> {}; // FunctionProto char *()
struct _ast4408: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4319, Pack<>>>, _ast4409>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast4409: PointerType<_ast4410> {}; // Pointer const v8::String::Utf8Value *
struct _ast4410: ConstQualifiedType<_ast4396> {}; // Record const v8::String::Utf8Value
struct _ast4411: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast4409>, NamedDeclName<_str159> {}; // CXXMethod length
struct _ast4412: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4415, Pack<_ast4413>>>, _ast4403>> {}; // CXXConstructor Utf8Value
struct _ast4413: NamedDeclAnon<_str64>, ParmVarDecl<_ast4414> {}; // ParmVar 
struct _ast4414: LValueReferenceType<ReferenceType<_ast4410>> {}; // LValueReference const v8::String::Utf8Value &
struct _ast4415: FunctionProtoType<_ast122, Pack<_ast4414>, SameType> {}; // FunctionProto void (const v8::String::Utf8Value &)
struct _ast4416: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4415, Pack<_ast4417>>>, _ast4403>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast4417: NamedDeclAnon<_str64>, ParmVarDecl<_ast4414> {}; // ParmVar 
struct _ast4418: NamedDeclName<_str49>, TypeDecl<_ast4419> {}; // CXXRecord Value
struct _ast4419: StructOrClassRecordType<RecordType<_ast4418>> {}; // Record v8::String::Value
struct _ast4420: NamedDeclName<_str49>, TypeDecl<_ast4419> {}; // CXXRecord Value
struct _ast4421: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4425, Pack<_ast4422, _ast4423>>>, _ast4426>> {}; // CXXConstructor Value
struct _ast4422: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4423: NamedDeclName<_str484>, ParmVarDecl<_ast4424> {}; // ParmVar obj
struct _ast4425: FunctionProtoType<_ast122, Pack<_ast198, _ast4424>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _ast4426: PointerType<_ast4419> {}; // Pointer v8::String::Value *
struct _ast4427: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4428, Pack<>>>, _ast4426>> {}; // CXXDestructor ~Value
struct _ast4428: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast4429: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4430, Pack<>>>, _ast4426>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast4430: FunctionProtoType<_ast4242, Pack<>, SameType> {}; // FunctionProto uint16_t *()
struct _ast4431: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4296, Pack<>>>, _ast4432>, NamedDeclName<_str57> {}; // CXXMethod operator*
struct _ast4432: PointerType<_ast4433> {}; // Pointer const v8::String::Value *
struct _ast4433: ConstQualifiedType<_ast4419> {}; // Record const v8::String::Value
struct _ast4434: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast4432>, NamedDeclName<_str159> {}; // CXXMethod length
struct _ast4435: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4438, Pack<_ast4436>>>, _ast4426>> {}; // CXXConstructor Value
struct _ast4436: NamedDeclAnon<_str64>, ParmVarDecl<_ast4437> {}; // ParmVar 
struct _ast4437: LValueReferenceType<ReferenceType<_ast4433>> {}; // LValueReference const v8::String::Value &
struct _ast4438: FunctionProtoType<_ast122, Pack<_ast4437>, SameType> {}; // FunctionProto void (const v8::String::Value &)
struct _ast4439: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4438, Pack<_ast4440>>>, _ast4426>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast4440: NamedDeclAnon<_str64>, ParmVarDecl<_ast4437> {}; // ParmVar 
struct _ast4441: NamedDeclName<_str43>, TypeDecl<_ast98> {}; // CXXRecord Symbol
struct _ast4442: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4443, Pack<>>>, _ast4445>, NamedDeclName<_str23> {}; // CXXMethod Name
struct _ast4443: FunctionProtoType<_ast4444, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast4445: PointerType<_ast4446> {}; // Pointer const v8::Symbol *
struct _ast4446: ConstQualifiedType<_ast98> {}; // Record const v8::Symbol
struct _ast4447: MethodDecl<FunctionDecl<_ast4451, Pack<_ast4448, _ast4449>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast4448: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4449: NamedDeclName<_str531>, ParmVarDecl<_ast4450> {}; // ParmVar name
struct _ast4451: FunctionProtoType<_ast4452, Pack<_ast198, _ast4450>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4453: MethodDecl<FunctionDecl<_ast4457, Pack<_ast4454, _ast4455>>>, NamedDeclName<_str532> {}; // CXXMethod For
struct _ast4454: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4455: NamedDeclName<_str531>, ParmVarDecl<_ast4456> {}; // ParmVar name
struct _ast4457: FunctionProtoType<_ast4458, Pack<_ast198, _ast4456>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4459: MethodDecl<FunctionDecl<_ast4463, Pack<_ast4460, _ast4461>>>, NamedDeclName<_str533> {}; // CXXMethod ForApi
struct _ast4460: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4461: NamedDeclName<_str531>, ParmVarDecl<_ast4462> {}; // ParmVar name
struct _ast4463: FunctionProtoType<_ast4464, Pack<_ast198, _ast4462>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4465: MethodDecl<FunctionDecl<_ast4467, Pack<_ast4466>>>, NamedDeclName<_str534> {}; // CXXMethod GetAsyncIterator
struct _ast4466: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4467: FunctionProtoType<_ast4468, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4469: MethodDecl<FunctionDecl<_ast4471, Pack<_ast4470>>>, NamedDeclName<_str535> {}; // CXXMethod GetHasInstance
struct _ast4470: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4471: FunctionProtoType<_ast4472, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4473: MethodDecl<FunctionDecl<_ast4475, Pack<_ast4474>>>, NamedDeclName<_str536> {}; // CXXMethod GetIsConcatSpreadable
struct _ast4474: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4475: FunctionProtoType<_ast4476, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4477: MethodDecl<FunctionDecl<_ast4479, Pack<_ast4478>>>, NamedDeclName<_str537> {}; // CXXMethod GetIterator
struct _ast4478: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4479: FunctionProtoType<_ast4480, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4481: MethodDecl<FunctionDecl<_ast4483, Pack<_ast4482>>>, NamedDeclName<_str538> {}; // CXXMethod GetMatch
struct _ast4482: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4483: FunctionProtoType<_ast4484, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4485: MethodDecl<FunctionDecl<_ast4487, Pack<_ast4486>>>, NamedDeclName<_str539> {}; // CXXMethod GetReplace
struct _ast4486: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4487: FunctionProtoType<_ast4488, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4489: MethodDecl<FunctionDecl<_ast4491, Pack<_ast4490>>>, NamedDeclName<_str540> {}; // CXXMethod GetSearch
struct _ast4490: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4491: FunctionProtoType<_ast4492, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4493: MethodDecl<FunctionDecl<_ast4495, Pack<_ast4494>>>, NamedDeclName<_str541> {}; // CXXMethod GetSplit
struct _ast4494: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4495: FunctionProtoType<_ast4496, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4497: MethodDecl<FunctionDecl<_ast4499, Pack<_ast4498>>>, NamedDeclName<_str542> {}; // CXXMethod GetToPrimitive
struct _ast4498: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4499: FunctionProtoType<_ast4500, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4501: MethodDecl<FunctionDecl<_ast4503, Pack<_ast4502>>>, NamedDeclName<_str543> {}; // CXXMethod GetToStringTag
struct _ast4502: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4503: FunctionProtoType<_ast4504, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4505: MethodDecl<FunctionDecl<_ast4507, Pack<_ast4506>>>, NamedDeclName<_str544> {}; // CXXMethod GetUnscopables
struct _ast4506: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4507: FunctionProtoType<_ast4508, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ast4509: MethodDecl<FunctionDecl<_ast4511, Pack<_ast4510>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4510: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast4511: FunctionProtoType<_ast4512, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Symbol *(v8::Value *)
struct _ast4512: PointerType<_ast98> {}; // Pointer v8::Symbol *
struct _ast4513: NamedDeclName<_str46>, TypeDecl<_ast104> {}; // CXXRecord Private
struct _ast4514: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4515, Pack<>>>, _ast4517>, NamedDeclName<_str23> {}; // CXXMethod Name
struct _ast4515: FunctionProtoType<_ast4516, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast4517: PointerType<_ast4518> {}; // Pointer const v8::Private *
struct _ast4518: ConstQualifiedType<_ast104> {}; // Record const v8::Private
struct _ast4519: MethodDecl<FunctionDecl<_ast4523, Pack<_ast4520, _ast4521>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast4520: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4521: NamedDeclName<_str531>, ParmVarDecl<_ast4522> {}; // ParmVar name
struct _ast4523: FunctionProtoType<_ast4524, Pack<_ast198, _ast4522>, SameType> {}; // FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4525: MethodDecl<FunctionDecl<_ast4529, Pack<_ast4526, _ast4527>>>, NamedDeclName<_str533> {}; // CXXMethod ForApi
struct _ast4526: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4527: NamedDeclName<_str531>, ParmVarDecl<_ast4528> {}; // ParmVar name
struct _ast4529: FunctionProtoType<_ast4530, Pack<_ast198, _ast4528>, SameType> {}; // FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4531: MethodDecl<FunctionDecl<_ast4534, Pack<_ast4532>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4532: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast4533: PointerType<_ast5> {}; // Pointer v8::Data *
struct _ast4534: FunctionProtoType<_ast4535, Pack<_ast4533>, SameType> {}; // FunctionProto v8::Private *(v8::Data *)
struct _ast4535: PointerType<_ast104> {}; // Pointer v8::Private *
struct _ast4536: NamedDeclName<_str24>, TypeDecl<_ast60> {}; // CXXRecord Number
struct _ast4537: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4538, Pack<>>>, _ast4539>, NamedDeclName<_str49> {}; // CXXMethod Value
struct _ast4538: FunctionProtoType<_ast3918, Pack<>, ConstQualifiedType> {}; // FunctionProto double () const
struct _ast4539: PointerType<_ast4540> {}; // Pointer const v8::Number *
struct _ast4540: ConstQualifiedType<_ast60> {}; // Record const v8::Number
struct _ast4541: MethodDecl<FunctionDecl<_ast4544, Pack<_ast4542, _ast4543>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast4542: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4543: NamedDeclName<_str152>, ParmVarDecl<_ast3918> {}; // ParmVar value
struct _ast4544: FunctionProtoType<_ast4545, Pack<_ast198, _ast3918>, SameType> {}; // FunctionProto Local<v8::Number> (v8::Isolate *, double)
struct _ast4546: MethodDecl<FunctionDecl<_ast4548, Pack<_ast4547>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4547: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4548: FunctionProtoType<_ast4549, Pack<_ast4198>, SameType> {}; // FunctionProto v8::Number *(v8::Value *)
struct _ast4549: PointerType<_ast60> {}; // Pointer v8::Number *
struct _ast4550: NamedDeclName<_str19>, TypeDecl<_ast37> {}; // CXXRecord Integer
struct _ast4551: MethodDecl<FunctionDecl<_ast4555, Pack<_ast4552, _ast4553>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast4552: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4553: NamedDeclName<_str152>, ParmVarDecl<_ast4554> {}; // ParmVar value
struct _ast4554: ABIIndependentSizeType<SignedIntegerType, 4> {}; // Typedef int32_t
struct _ast4555: FunctionProtoType<_ast4556, Pack<_ast198, _ast4554>, SameType> {}; // FunctionProto Local<v8::Integer> (v8::Isolate *, int32_t)
struct _ast4557: MethodDecl<FunctionDecl<_ast4560, Pack<_ast4558, _ast4559>>>, NamedDeclName<_str545> {}; // CXXMethod NewFromUnsigned
struct _ast4558: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4559: NamedDeclName<_str152>, ParmVarDecl<_ast3641> {}; // ParmVar value
struct _ast4560: FunctionProtoType<_ast4561, Pack<_ast198, _ast3641>, SameType> {}; // FunctionProto Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _ast4562: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4563, Pack<>>>, _ast4565>, NamedDeclName<_str49> {}; // CXXMethod Value
struct _ast4563: FunctionProtoType<_ast4564, Pack<>, ConstQualifiedType> {}; // FunctionProto int64_t () const
struct _ast4564: ABIIndependentSizeType<SignedIntegerType, 8> {}; // Typedef int64_t
struct _ast4565: PointerType<_ast4566> {}; // Pointer const v8::Integer *
struct _ast4566: ConstQualifiedType<_ast37> {}; // Record const v8::Integer
struct _ast4567: MethodDecl<FunctionDecl<_ast4569, Pack<_ast4568>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4568: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4569: FunctionProtoType<_ast4570, Pack<_ast4198>, SameType> {}; // FunctionProto v8::Integer *(v8::Value *)
struct _ast4570: PointerType<_ast37> {}; // Pointer v8::Integer *
struct _ast4571: NamedDeclName<_str18>, TypeDecl<_ast35> {}; // CXXRecord Int32
struct _ast4572: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4573, Pack<>>>, _ast4574>, NamedDeclName<_str49> {}; // CXXMethod Value
struct _ast4573: FunctionProtoType<_ast4554, Pack<>, ConstQualifiedType> {}; // FunctionProto int32_t () const
struct _ast4574: PointerType<_ast4575> {}; // Pointer const v8::Int32 *
struct _ast4575: ConstQualifiedType<_ast35> {}; // Record const v8::Int32
struct _ast4576: MethodDecl<FunctionDecl<_ast4578, Pack<_ast4577>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4577: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4578: FunctionProtoType<_ast4579, Pack<_ast4198>, SameType> {}; // FunctionProto v8::Int32 *(v8::Value *)
struct _ast4579: PointerType<_ast35> {}; // Pointer v8::Int32 *
struct _ast4580: NamedDeclName<_str47>, TypeDecl<_ast106> {}; // CXXRecord Uint32
struct _ast4581: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4001, Pack<>>>, _ast4582>, NamedDeclName<_str49> {}; // CXXMethod Value
struct _ast4582: PointerType<_ast4583> {}; // Pointer const v8::Uint32 *
struct _ast4583: ConstQualifiedType<_ast106> {}; // Record const v8::Uint32
struct _ast4584: MethodDecl<FunctionDecl<_ast4586, Pack<_ast4585>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4585: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4586: FunctionProtoType<_ast4587, Pack<_ast4198>, SameType> {}; // FunctionProto v8::Uint32 *(v8::Value *)
struct _ast4587: PointerType<_ast106> {}; // Pointer v8::Uint32 *
struct _ast4588: NamedDeclName<_str8>, TypeDecl<_ast15> {}; // CXXRecord BigInt
struct _ast4589: MethodDecl<FunctionDecl<_ast4592, Pack<_ast4590, _ast4591>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast4590: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4591: NamedDeclName<_str152>, ParmVarDecl<_ast4564> {}; // ParmVar value
struct _ast4592: FunctionProtoType<_ast4593, Pack<_ast198, _ast4564>, SameType> {}; // FunctionProto Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ast4594: MethodDecl<FunctionDecl<_ast4597, Pack<_ast4595, _ast4596>>>, NamedDeclName<_str545> {}; // CXXMethod NewFromUnsigned
struct _ast4595: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast4596: NamedDeclName<_str152>, ParmVarDecl<_ast3914> {}; // ParmVar value
struct _ast4597: FunctionProtoType<_ast4598, Pack<_ast198, _ast3914>, SameType> {}; // FunctionProto Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _ast4599: MethodDecl<FunctionDecl<_ast4607, Pack<_ast4600, _ast4602, _ast4603, _ast4604>>>, NamedDeclName<_str546> {}; // CXXMethod NewFromWords
struct _ast4600: NamedDeclName<_str220>, ParmVarDecl<_ast4601> {}; // ParmVar context
struct _ast4602: NamedDeclName<_str547>, ParmVarDecl<_ast2095> {}; // ParmVar sign_bit
struct _ast4603: NamedDeclName<_str548>, ParmVarDecl<_ast2095> {}; // ParmVar word_count
struct _ast4604: NamedDeclName<_str549>, ParmVarDecl<_ast4605> {}; // ParmVar words
struct _ast4605: PointerType<_ast4606> {}; // Pointer const uint64_t *
struct _ast4606: ConstQualifiedType<_ast3914> {}; // Typedef const uint64_t
struct _ast4607: FunctionProtoType<_ast4608, Pack<_ast4601, _ast2095, _ast2095, _ast4605>, SameType> {}; // FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
struct _ast4609: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4612, Pack<_ast4610>>>, _ast4613>, NamedDeclName<_str550> {}; // CXXMethod Uint64Value
struct _ast4610: NamedDeclName<_str551>, ParmVarDecl<_ast4611> {}; // ParmVar lossless
struct _ast4611: PointerType<_ast137> {}; // Pointer bool *
struct _ast4612: FunctionProtoType<_ast3914, Pack<_ast4611>, ConstQualifiedType> {}; // FunctionProto uint64_t (bool *) const
struct _ast4613: PointerType<_ast4614> {}; // Pointer const v8::BigInt *
struct _ast4614: ConstQualifiedType<_ast15> {}; // Record const v8::BigInt
struct _ast4615: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4617, Pack<_ast4616>>>, _ast4613>, NamedDeclName<_str552> {}; // CXXMethod Int64Value
struct _ast4616: NamedDeclName<_str551>, ParmVarDecl<_ast4611> {}; // ParmVar lossless
struct _ast4617: FunctionProtoType<_ast4564, Pack<_ast4611>, ConstQualifiedType> {}; // FunctionProto int64_t (bool *) const
struct _ast4618: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast4613>, NamedDeclName<_str553> {}; // CXXMethod WordCount
struct _ast4619: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4623, Pack<_ast4620, _ast4621, _ast4622>>>, _ast4613>, NamedDeclName<_str554> {}; // CXXMethod ToWordsArray
struct _ast4620: NamedDeclName<_str547>, ParmVarDecl<_ast4261> {}; // ParmVar sign_bit
struct _ast4621: NamedDeclName<_str548>, ParmVarDecl<_ast4261> {}; // ParmVar word_count
struct _ast4622: NamedDeclName<_str549>, ParmVarDecl<_ast4010> {}; // ParmVar words
struct _ast4623: FunctionProtoType<_ast122, Pack<_ast4261, _ast4261, _ast4010>, ConstQualifiedType> {}; // FunctionProto void (int *, int *, uint64_t *) const
struct _ast4624: MethodDecl<FunctionDecl<_ast4626, Pack<_ast4625>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast4625: NamedDeclName<_str484>, ParmVarDecl<_ast4198> {}; // ParmVar obj
struct _ast4626: FunctionProtoType<_ast4627, Pack<_ast4198>, SameType> {}; // FunctionProto v8::BigInt *(v8::Value *)
struct _ast4627: PointerType<_ast15> {}; // Pointer v8::BigInt *
struct _ast4628: NamedDeclName<_str555>, TypeDecl<_ast4629> {}; // Enum PropertyAttribute
struct _ast4629: EnumType<_ast4628, _ast2095> {}; // Enum v8::PropertyAttribute
struct _ast4630: NamedDeclName<_str556> {}; // EnumConstant None
struct _ast4631: NamedDeclName<_str557> {}; // EnumConstant ReadOnly
struct _ast4632: NamedDeclName<_str558> {}; // EnumConstant DontEnum
struct _ast4633: NamedDeclName<_str559> {}; // EnumConstant DontDelete
struct _ast4634: NamedDeclName<_str560>, TypeDecl<_ast4635> {}; // Typedef AccessorGetterCallback
struct _ast4635: TypedefType<_ast4634> {}; // Typedef v8::AccessorGetterCallback
struct _ast4636: NamedDeclName<_str561>, TypeDecl<_ast4637> {}; // Typedef AccessorNameGetterCallback
struct _ast4637: TypedefType<_ast4636> {}; // Typedef v8::AccessorNameGetterCallback
struct _ast4638: NamedDeclName<_str562>, TypeDecl<_ast4639> {}; // Typedef AccessorSetterCallback
struct _ast4639: TypedefType<_ast4638> {}; // Typedef v8::AccessorSetterCallback
struct _ast4640: NamedDeclName<_str563>, TypeDecl<_ast4641> {}; // Typedef AccessorNameSetterCallback
struct _ast4641: TypedefType<_ast4640> {}; // Typedef v8::AccessorNameSetterCallback
struct _ast4642: NamedDeclName<_str564>, TypeDecl<_ast4643> {}; // Enum AccessControl
struct _ast4643: EnumType<_ast4642, _ast2095> {}; // Enum v8::AccessControl
struct _ast4644: NamedDeclName<_str565> {}; // EnumConstant DEFAULT
struct _ast4645: NamedDeclName<_str566> {}; // EnumConstant ALL_CAN_READ
struct _ast4646: NamedDeclName<_str567> {}; // EnumConstant ALL_CAN_WRITE
struct _ast4647: NamedDeclName<_str568> {}; // EnumConstant PROHIBITS_OVERWRITING
struct _ast4648: NamedDeclName<_str569>, TypeDecl<_ast4649> {}; // Enum PropertyFilter
struct _ast4649: EnumType<_ast4648, _ast2095> {}; // Enum v8::PropertyFilter
struct _ast4650: NamedDeclName<_str570> {}; // EnumConstant ALL_PROPERTIES
struct _ast4651: NamedDeclName<_str571> {}; // EnumConstant ONLY_WRITABLE
struct _ast4652: NamedDeclName<_str572> {}; // EnumConstant ONLY_ENUMERABLE
struct _ast4653: NamedDeclName<_str573> {}; // EnumConstant ONLY_CONFIGURABLE
struct _ast4654: NamedDeclName<_str574> {}; // EnumConstant SKIP_STRINGS
struct _ast4655: NamedDeclName<_str575> {}; // EnumConstant SKIP_SYMBOLS
struct _ast4656: NamedDeclName<_str576>, TypeDecl<_ast4657> {}; // Enum SideEffectType
struct _ast4657: EnumType<_ast4656, _ast2095> {}; // Enum v8::SideEffectType
struct _ast4658: NamedDeclName<_str577> {}; // EnumConstant kHasSideEffect
struct _ast4659: NamedDeclName<_str578> {}; // EnumConstant kHasNoSideEffect
struct _ast4660: NamedDeclName<_str579> {}; // EnumConstant kHasSideEffectToReceiver
struct _ast4661: NamedDeclName<_str580>, TypeDecl<_ast4662> {}; // Enum KeyCollectionMode
struct _ast4662: EnumType<_ast4661, _ast2095> {}; // Enum v8::KeyCollectionMode
struct _ast4663: NamedDeclName<_str581> {}; // EnumConstant kOwnOnly
struct _ast4664: NamedDeclName<_str582> {}; // EnumConstant kIncludePrototypes
struct _ast4665: NamedDeclName<_str583>, TypeDecl<_ast4666> {}; // Enum IndexFilter
struct _ast4666: EnumType<_ast4665, _ast2095> {}; // Enum v8::IndexFilter
struct _ast4667: NamedDeclName<_str584> {}; // EnumConstant kIncludeIndices
struct _ast4668: NamedDeclName<_str585> {}; // EnumConstant kSkipIndices
struct _ast4669: NamedDeclName<_str586>, TypeDecl<_ast4670> {}; // Enum KeyConversionMode
struct _ast4670: EnumType<_ast4669, _ast2095> {}; // Enum v8::KeyConversionMode
struct _ast4671: NamedDeclName<_str587> {}; // EnumConstant kConvertToString
struct _ast4672: NamedDeclName<_str588> {}; // EnumConstant kKeepNumbers
struct _ast4673: NamedDeclName<_str589>, TypeDecl<_ast4674> {}; // Enum IntegrityLevel
struct _ast4674: EnumType<_ast4673, _ast2095> {}; // Enum v8::IntegrityLevel
struct _ast4675: NamedDeclName<_str590> {}; // EnumConstant kFrozen
struct _ast4676: NamedDeclName<_str591> {}; // EnumConstant kSealed
struct _ast4677: NamedDeclName<_str26>, TypeDecl<_ast64> {}; // CXXRecord Object
struct _ast4678: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4683, Pack<_ast4679, _ast4681>>>, _ast4684>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast4679: NamedDeclName<_str592>, ParmVarDecl<_ast4680> {}; // ParmVar key
struct _ast4681: NamedDeclName<_str152>, ParmVarDecl<_ast4682> {}; // ParmVar value
struct _ast4683: FunctionProtoType<_ast137, Pack<_ast4680, _ast4682>, SameType> {}; // FunctionProto bool (Local<v8::Value>, Local<v8::Value>)
struct _ast4684: PointerType<_ast64> {}; // Pointer v8::Object *
struct _ast4685: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4692, Pack<_ast4686, _ast4688, _ast4690>>>, _ast4684>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast4686: NamedDeclName<_str220>, ParmVarDecl<_ast4687> {}; // ParmVar context
struct _ast4688: NamedDeclName<_str592>, ParmVarDecl<_ast4689> {}; // ParmVar key
struct _ast4690: NamedDeclName<_str152>, ParmVarDecl<_ast4691> {}; // ParmVar value
struct _ast4692: FunctionProtoType<_ast4693, Pack<_ast4687, _ast4689, _ast4691>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast4694: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4698, Pack<_ast4695, _ast4696>>>, _ast4684>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast4695: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4696: NamedDeclName<_str152>, ParmVarDecl<_ast4697> {}; // ParmVar value
struct _ast4698: FunctionProtoType<_ast137, Pack<_ast3641, _ast4697>, SameType> {}; // FunctionProto bool (uint32_t, Local<v8::Value>)
struct _ast4699: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4705, Pack<_ast4700, _ast4702, _ast4703>>>, _ast4684>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast4700: NamedDeclName<_str220>, ParmVarDecl<_ast4701> {}; // ParmVar context
struct _ast4702: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4703: NamedDeclName<_str152>, ParmVarDecl<_ast4704> {}; // ParmVar value
struct _ast4705: FunctionProtoType<_ast4706, Pack<_ast4701, _ast3641, _ast4704>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4707: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4714, Pack<_ast4708, _ast4710, _ast4712>>>, _ast4684>, NamedDeclName<_str593> {}; // CXXMethod CreateDataProperty
struct _ast4708: NamedDeclName<_str220>, ParmVarDecl<_ast4709> {}; // ParmVar context
struct _ast4710: NamedDeclName<_str592>, ParmVarDecl<_ast4711> {}; // ParmVar key
struct _ast4712: NamedDeclName<_str152>, ParmVarDecl<_ast4713> {}; // ParmVar value
struct _ast4714: FunctionProtoType<_ast4715, Pack<_ast4709, _ast4711, _ast4713>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
struct _ast4716: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4722, Pack<_ast4717, _ast4719, _ast4720>>>, _ast4684>, NamedDeclName<_str593> {}; // CXXMethod CreateDataProperty
struct _ast4717: NamedDeclName<_str220>, ParmVarDecl<_ast4718> {}; // ParmVar context
struct _ast4719: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4720: NamedDeclName<_str152>, ParmVarDecl<_ast4721> {}; // ParmVar value
struct _ast4722: FunctionProtoType<_ast4723, Pack<_ast4718, _ast3641, _ast4721>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4724: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4732, Pack<_ast4725, _ast4727, _ast4729, _ast4731>>>, _ast4684>, NamedDeclName<_str594> {}; // CXXMethod DefineOwnProperty
struct _ast4725: NamedDeclName<_str220>, ParmVarDecl<_ast4726> {}; // ParmVar context
struct _ast4727: NamedDeclName<_str592>, ParmVarDecl<_ast4728> {}; // ParmVar key
struct _ast4729: NamedDeclName<_str152>, ParmVarDecl<_ast4730> {}; // ParmVar value
struct _ast4731: NamedDeclName<_str595>, ParmVarDecl<_ast4629> {}; // ParmVar attributes
struct _ast4732: FunctionProtoType<_ast4733, Pack<_ast4726, _ast4728, _ast4730, _ast4629>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _ast4734: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4741, Pack<_ast4735, _ast4737, _ast4739>>>, _ast4684>, NamedDeclName<_str596> {}; // CXXMethod DefineProperty
struct _ast4735: NamedDeclName<_str220>, ParmVarDecl<_ast4736> {}; // ParmVar context
struct _ast4737: NamedDeclName<_str592>, ParmVarDecl<_ast4738> {}; // ParmVar key
struct _ast4739: NamedDeclName<_str597>, ParmVarDecl<_ast4740> {}; // ParmVar descriptor
struct _ast4740: LValueReferenceType<ReferenceType<_ast76>> {}; // LValueReference v8::PropertyDescriptor &
struct _ast4741: FunctionProtoType<_ast4742, Pack<_ast4736, _ast4738, _ast4740>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
struct _ast4743: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4746, Pack<_ast4744>>>, _ast4684>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast4744: NamedDeclName<_str592>, ParmVarDecl<_ast4745> {}; // ParmVar key
struct _ast4746: FunctionProtoType<_ast4747, Pack<_ast4745>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _ast4748: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4753, Pack<_ast4749, _ast4751>>>, _ast4684>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast4749: NamedDeclName<_str220>, ParmVarDecl<_ast4750> {}; // ParmVar context
struct _ast4751: NamedDeclName<_str592>, ParmVarDecl<_ast4752> {}; // ParmVar key
struct _ast4753: FunctionProtoType<_ast4754, Pack<_ast4750, _ast4752>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast4755: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4757, Pack<_ast4756>>>, _ast4684>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast4756: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4757: FunctionProtoType<_ast4758, Pack<_ast3641>, SameType> {}; // FunctionProto Local<v8::Value> (uint32_t)
struct _ast4759: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4763, Pack<_ast4760, _ast4762>>>, _ast4684>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast4760: NamedDeclName<_str220>, ParmVarDecl<_ast4761> {}; // ParmVar context
struct _ast4762: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4763: FunctionProtoType<_ast4764, Pack<_ast4761, _ast3641>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _ast4765: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4770, Pack<_ast4766, _ast4768>>>, _ast4684>, NamedDeclName<_str598> {}; // CXXMethod GetPropertyAttributes
struct _ast4766: NamedDeclName<_str220>, ParmVarDecl<_ast4767> {}; // ParmVar context
struct _ast4768: NamedDeclName<_str592>, ParmVarDecl<_ast4769> {}; // ParmVar key
struct _ast4770: FunctionProtoType<_ast4771, Pack<_ast4767, _ast4769>, SameType> {}; // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
struct _ast4772: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4777, Pack<_ast4773, _ast4775>>>, _ast4684>, NamedDeclName<_str599> {}; // CXXMethod GetOwnPropertyDescriptor
struct _ast4773: NamedDeclName<_str220>, ParmVarDecl<_ast4774> {}; // ParmVar context
struct _ast4775: NamedDeclName<_str592>, ParmVarDecl<_ast4776> {}; // ParmVar key
struct _ast4777: FunctionProtoType<_ast4778, Pack<_ast4774, _ast4776>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4779: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4784, Pack<_ast4780, _ast4782>>>, _ast4684>, NamedDeclName<_str600> {}; // CXXMethod Has
struct _ast4780: NamedDeclName<_str220>, ParmVarDecl<_ast4781> {}; // ParmVar context
struct _ast4782: NamedDeclName<_str592>, ParmVarDecl<_ast4783> {}; // ParmVar key
struct _ast4784: FunctionProtoType<_ast4785, Pack<_ast4781, _ast4783>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4786: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4791, Pack<_ast4787, _ast4789>>>, _ast4684>, NamedDeclName<_str601> {}; // CXXMethod Delete
struct _ast4787: NamedDeclName<_str220>, ParmVarDecl<_ast4788> {}; // ParmVar context
struct _ast4789: NamedDeclName<_str592>, ParmVarDecl<_ast4790> {}; // ParmVar key
struct _ast4791: FunctionProtoType<_ast4792, Pack<_ast4788, _ast4790>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4793: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4797, Pack<_ast4794, _ast4796>>>, _ast4684>, NamedDeclName<_str600> {}; // CXXMethod Has
struct _ast4794: NamedDeclName<_str220>, ParmVarDecl<_ast4795> {}; // ParmVar context
struct _ast4796: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4797: FunctionProtoType<_ast4798, Pack<_ast4795, _ast3641>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4799: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4803, Pack<_ast4800, _ast4802>>>, _ast4684>, NamedDeclName<_str601> {}; // CXXMethod Delete
struct _ast4800: NamedDeclName<_str220>, ParmVarDecl<_ast4801> {}; // ParmVar context
struct _ast4802: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast4803: FunctionProtoType<_ast4804, Pack<_ast4801, _ast3641>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4805: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4818, Pack<_ast4806, _ast4808, _ast4810, _ast4811, _ast4812, _ast4814, _ast4815, _ast4816, _ast4817>>>, _ast4684>, NamedDeclName<_str602> {}; // CXXMethod SetAccessor
struct _ast4806: NamedDeclName<_str220>, ParmVarDecl<_ast4807> {}; // ParmVar context
struct _ast4808: NamedDeclName<_str531>, ParmVarDecl<_ast4809> {}; // ParmVar name
struct _ast4810: NamedDeclName<_str603>, ParmVarDecl<_ast4637> {}; // ParmVar getter
struct _ast4811: NamedDeclName<_str604>, ParmVarDecl<_ast4641> {}; // ParmVar setter
struct _ast4812: NamedDeclName<_str129>, ParmVarDecl<_ast4813> {}; // ParmVar data
struct _ast4814: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast4815: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast4816: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast4817: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast4818: FunctionProtoType<_ast4819, Pack<_ast4807, _ast4809, _ast4637, _ast4641, _ast4813, _ast4643, _ast4629, _ast4657, _ast4657>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4820: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4829, Pack<_ast4821, _ast4823, _ast4825, _ast4827, _ast4828>>>, _ast4684>, NamedDeclName<_str609> {}; // CXXMethod SetAccessorProperty
struct _ast4821: NamedDeclName<_str531>, ParmVarDecl<_ast4822> {}; // ParmVar name
struct _ast4823: NamedDeclName<_str603>, ParmVarDecl<_ast4824> {}; // ParmVar getter
struct _ast4825: NamedDeclName<_str604>, ParmVarDecl<_ast4826> {}; // ParmVar setter
struct _ast4827: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast4828: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast4829: FunctionProtoType<_ast122, Pack<_ast4822, _ast4824, _ast4826, _ast4629, _ast4643>, SameType> {}; // FunctionProto void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _ast4830: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4842, Pack<_ast4831, _ast4833, _ast4835, _ast4836, _ast4837, _ast4839, _ast4840, _ast4841>>>, _ast4684>, NamedDeclName<_str610> {}; // CXXMethod SetNativeDataProperty
struct _ast4831: NamedDeclName<_str220>, ParmVarDecl<_ast4832> {}; // ParmVar context
struct _ast4833: NamedDeclName<_str531>, ParmVarDecl<_ast4834> {}; // ParmVar name
struct _ast4835: NamedDeclName<_str603>, ParmVarDecl<_ast4637> {}; // ParmVar getter
struct _ast4836: NamedDeclName<_str604>, ParmVarDecl<_ast4641> {}; // ParmVar setter
struct _ast4837: NamedDeclName<_str129>, ParmVarDecl<_ast4838> {}; // ParmVar data
struct _ast4839: NamedDeclName<_str595>, ParmVarDecl<_ast4629> {}; // ParmVar attributes
struct _ast4840: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast4841: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast4842: FunctionProtoType<_ast4843, Pack<_ast4832, _ast4834, _ast4637, _ast4641, _ast4838, _ast4629, _ast4657, _ast4657>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4844: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4855, Pack<_ast4845, _ast4847, _ast4849, _ast4850, _ast4852, _ast4853, _ast4854>>>, _ast4684>, NamedDeclName<_str611> {}; // CXXMethod SetLazyDataProperty
struct _ast4845: NamedDeclName<_str220>, ParmVarDecl<_ast4846> {}; // ParmVar context
struct _ast4847: NamedDeclName<_str531>, ParmVarDecl<_ast4848> {}; // ParmVar name
struct _ast4849: NamedDeclName<_str603>, ParmVarDecl<_ast4637> {}; // ParmVar getter
struct _ast4850: NamedDeclName<_str129>, ParmVarDecl<_ast4851> {}; // ParmVar data
struct _ast4852: NamedDeclName<_str595>, ParmVarDecl<_ast4629> {}; // ParmVar attributes
struct _ast4853: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast4854: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast4855: FunctionProtoType<_ast4856, Pack<_ast4846, _ast4848, _ast4637, _ast4851, _ast4629, _ast4657, _ast4657>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4857: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4862, Pack<_ast4858, _ast4860>>>, _ast4684>, NamedDeclName<_str612> {}; // CXXMethod HasPrivate
struct _ast4858: NamedDeclName<_str220>, ParmVarDecl<_ast4859> {}; // ParmVar context
struct _ast4860: NamedDeclName<_str592>, ParmVarDecl<_ast4861> {}; // ParmVar key
struct _ast4862: FunctionProtoType<_ast4863, Pack<_ast4859, _ast4861>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4864: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4871, Pack<_ast4865, _ast4867, _ast4869>>>, _ast4684>, NamedDeclName<_str613> {}; // CXXMethod SetPrivate
struct _ast4865: NamedDeclName<_str220>, ParmVarDecl<_ast4866> {}; // ParmVar context
struct _ast4867: NamedDeclName<_str592>, ParmVarDecl<_ast4868> {}; // ParmVar key
struct _ast4869: NamedDeclName<_str152>, ParmVarDecl<_ast4870> {}; // ParmVar value
struct _ast4871: FunctionProtoType<_ast4872, Pack<_ast4866, _ast4868, _ast4870>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
struct _ast4873: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4878, Pack<_ast4874, _ast4876>>>, _ast4684>, NamedDeclName<_str614> {}; // CXXMethod DeletePrivate
struct _ast4874: NamedDeclName<_str220>, ParmVarDecl<_ast4875> {}; // ParmVar context
struct _ast4876: NamedDeclName<_str592>, ParmVarDecl<_ast4877> {}; // ParmVar key
struct _ast4878: FunctionProtoType<_ast4879, Pack<_ast4875, _ast4877>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4880: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4885, Pack<_ast4881, _ast4883>>>, _ast4684>, NamedDeclName<_str615> {}; // CXXMethod GetPrivate
struct _ast4881: NamedDeclName<_str220>, ParmVarDecl<_ast4882> {}; // ParmVar context
struct _ast4883: NamedDeclName<_str592>, ParmVarDecl<_ast4884> {}; // ParmVar key
struct _ast4885: FunctionProtoType<_ast4886, Pack<_ast4882, _ast4884>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
struct _ast4887: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4890, Pack<_ast4888>>>, _ast4684>, NamedDeclName<_str616> {}; // CXXMethod GetPropertyNames
struct _ast4888: NamedDeclName<_str220>, ParmVarDecl<_ast4889> {}; // ParmVar context
struct _ast4890: FunctionProtoType<_ast4891, Pack<_ast4889>, SameType> {}; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4892: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4899, Pack<_ast4893, _ast4895, _ast4896, _ast4897, _ast4898>>>, _ast4684>, NamedDeclName<_str616> {}; // CXXMethod GetPropertyNames
struct _ast4893: NamedDeclName<_str220>, ParmVarDecl<_ast4894> {}; // ParmVar context
struct _ast4895: NamedDeclName<_str386>, ParmVarDecl<_ast4662> {}; // ParmVar mode
struct _ast4896: NamedDeclName<_str617>, ParmVarDecl<_ast4649> {}; // ParmVar property_filter
struct _ast4897: NamedDeclName<_str618>, ParmVarDecl<_ast4666> {}; // ParmVar index_filter
struct _ast4898: NamedDeclName<_str619>, ParmVarDecl<_ast4670> {}; // ParmVar key_conversion
struct _ast4899: FunctionProtoType<_ast4900, Pack<_ast4894, _ast4662, _ast4649, _ast4666, _ast4670>, SameType> {}; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
struct _ast4901: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4904, Pack<_ast4902>>>, _ast4684>, NamedDeclName<_str620> {}; // CXXMethod GetOwnPropertyNames
struct _ast4902: NamedDeclName<_str220>, ParmVarDecl<_ast4903> {}; // ParmVar context
struct _ast4904: FunctionProtoType<_ast4905, Pack<_ast4903>, SameType> {}; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4906: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4911, Pack<_ast4907, _ast4909, _ast4910>>>, _ast4684>, NamedDeclName<_str620> {}; // CXXMethod GetOwnPropertyNames
struct _ast4907: NamedDeclName<_str220>, ParmVarDecl<_ast4908> {}; // ParmVar context
struct _ast4909: NamedDeclName<_str621>, ParmVarDecl<_ast4649> {}; // ParmVar filter
struct _ast4910: NamedDeclName<_str619>, ParmVarDecl<_ast4670> {}; // ParmVar key_conversion
struct _ast4911: FunctionProtoType<_ast4912, Pack<_ast4908, _ast4649, _ast4670>, SameType> {}; // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
struct _ast4913: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4914, Pack<>>>, _ast4684>, NamedDeclName<_str622> {}; // CXXMethod GetPrototype
struct _ast4914: FunctionProtoType<_ast4915, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast4916: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4921, Pack<_ast4917, _ast4919>>>, _ast4684>, NamedDeclName<_str623> {}; // CXXMethod SetPrototype
struct _ast4917: NamedDeclName<_str220>, ParmVarDecl<_ast4918> {}; // ParmVar context
struct _ast4919: NamedDeclName<_str624>, ParmVarDecl<_ast4920> {}; // ParmVar prototype
struct _ast4921: FunctionProtoType<_ast4922, Pack<_ast4918, _ast4920>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4923: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4926, Pack<_ast4924>>>, _ast4684>, NamedDeclName<_str625> {}; // CXXMethod FindInstanceInPrototypeChain
struct _ast4924: NamedDeclName<_str626>, ParmVarDecl<_ast4925> {}; // ParmVar tmpl
struct _ast4926: FunctionProtoType<_ast4927, Pack<_ast4925>, SameType> {}; // FunctionProto Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _ast4928: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4931, Pack<_ast4929>>>, _ast4684>, NamedDeclName<_str627> {}; // CXXMethod ObjectProtoToString
struct _ast4929: NamedDeclName<_str220>, ParmVarDecl<_ast4930> {}; // ParmVar context
struct _ast4931: FunctionProtoType<_ast4932, Pack<_ast4930>, SameType> {}; // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>)
struct _ast4933: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4934, Pack<>>>, _ast4684>, NamedDeclName<_str628> {}; // CXXMethod GetConstructorName
struct _ast4934: FunctionProtoType<_ast4935, Pack<>, SameType> {}; // FunctionProto Local<v8::String> ()
struct _ast4936: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4940, Pack<_ast4937, _ast4939>>>, _ast4684>, NamedDeclName<_str629> {}; // CXXMethod SetIntegrityLevel
struct _ast4937: NamedDeclName<_str220>, ParmVarDecl<_ast4938> {}; // ParmVar context
struct _ast4939: NamedDeclName<_str630>, ParmVarDecl<_ast4674> {}; // ParmVar level
struct _ast4940: FunctionProtoType<_ast4941, Pack<_ast4938, _ast4674>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _ast4942: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast4684>, NamedDeclName<_str631> {}; // CXXMethod InternalFieldCount
struct _ast4943: MethodDecl<FunctionDecl<_ast4948, Pack<_ast4944>>>, NamedDeclName<_str631> {}; // CXXMethod InternalFieldCount
struct _ast4944: NamedDeclName<_str367>, ParmVarDecl<_ast4945> {}; // ParmVar object
struct _ast4945: LValueReferenceType<ReferenceType<_ast4946>> {}; // LValueReference const PersistentBase<v8::Object> &
struct _ast4946: ConstQualifiedType<_ast4947> {}; // TemplateSpecialization const PersistentBase<v8::Object>
struct _ast4948: FunctionProtoType<_ast2095, Pack<_ast4945>, SameType> {}; // FunctionProto int (const PersistentBase<v8::Object> &)
struct _ast4949: MethodDecl<FunctionDecl<_ast4954, Pack<_ast4950>>>, NamedDeclName<_str631> {}; // CXXMethod InternalFieldCount
struct _ast4950: NamedDeclName<_str367>, ParmVarDecl<_ast4951> {}; // ParmVar object
struct _ast4951: LValueReferenceType<ReferenceType<_ast4952>> {}; // LValueReference const TracedGlobal<v8::Object> &
struct _ast4952: ConstQualifiedType<_ast4953> {}; // TemplateSpecialization const TracedGlobal<v8::Object>
struct _ast4954: FunctionProtoType<_ast2095, Pack<_ast4951>, SameType> {}; // FunctionProto int (const TracedGlobal<v8::Object> &)
struct _ast4955: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4957, Pack<_ast4956>>>, _ast4684>, NamedDeclName<_str126> {}; // CXXMethod GetInternalField
struct _ast4956: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast4957: FunctionProtoType<_ast4958, Pack<_ast2095>, SameType> {}; // FunctionProto Local<v8::Value> (int)
struct _ast4959: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4963, Pack<_ast4960, _ast4961>>>, _ast4684>, NamedDeclName<_str632> {}; // CXXMethod SetInternalField
struct _ast4960: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast4961: NamedDeclName<_str152>, ParmVarDecl<_ast4962> {}; // ParmVar value
struct _ast4963: FunctionProtoType<_ast122, Pack<_ast2095, _ast4962>, SameType> {}; // FunctionProto void (int, Local<v8::Value>)
struct _ast4964: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4966, Pack<_ast4965>>>, _ast4684>, NamedDeclName<_str633> {}; // CXXMethod GetAlignedPointerFromInternalField
struct _ast4965: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast4966: FunctionProtoType<_ast2460, Pack<_ast2095>, SameType> {}; // FunctionProto void *(int)
struct _ast4967: MethodDecl<FunctionDecl<_ast4973, Pack<_ast4968, _ast4972>>>, NamedDeclName<_str633> {}; // CXXMethod GetAlignedPointerFromInternalField
struct _ast4968: NamedDeclName<_str367>, ParmVarDecl<_ast4969> {}; // ParmVar object
struct _ast4969: LValueReferenceType<ReferenceType<_ast4970>> {}; // LValueReference const PersistentBase<v8::Object> &
struct _ast4970: ConstQualifiedType<_ast4971> {}; // TemplateSpecialization const PersistentBase<v8::Object>
struct _ast4972: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast4973: FunctionProtoType<_ast2460, Pack<_ast4969, _ast2095>, SameType> {}; // FunctionProto void *(const PersistentBase<v8::Object> &, int)
struct _ast4974: MethodDecl<FunctionDecl<_ast4980, Pack<_ast4975, _ast4979>>>, NamedDeclName<_str633> {}; // CXXMethod GetAlignedPointerFromInternalField
struct _ast4975: NamedDeclName<_str367>, ParmVarDecl<_ast4976> {}; // ParmVar object
struct _ast4976: LValueReferenceType<ReferenceType<_ast4977>> {}; // LValueReference const TracedGlobal<v8::Object> &
struct _ast4977: ConstQualifiedType<_ast4978> {}; // TemplateSpecialization const TracedGlobal<v8::Object>
struct _ast4979: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast4980: FunctionProtoType<_ast2460, Pack<_ast4976, _ast2095>, SameType> {}; // FunctionProto void *(const TracedGlobal<v8::Object> &, int)
struct _ast4981: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4984, Pack<_ast4982, _ast4983>>>, _ast4684>, NamedDeclName<_str634> {}; // CXXMethod SetAlignedPointerInInternalField
struct _ast4982: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast4983: NamedDeclName<_str152>, ParmVarDecl<_ast2460> {}; // ParmVar value
struct _ast4984: FunctionProtoType<_ast122, Pack<_ast2095, _ast2460>, SameType> {}; // FunctionProto void (int, void *)
struct _ast4985: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4991, Pack<_ast4986, _ast4987, _ast4989>>>, _ast4684>, NamedDeclName<_str635> {}; // CXXMethod SetAlignedPointerInInternalFields
struct _ast4986: NamedDeclName<_str636>, ParmVarDecl<_ast2095> {}; // ParmVar argc
struct _ast4987: NamedDeclName<_str637>, ParmVarDecl<_ast4988> {}; // ParmVar indices
struct _ast4989: NamedDeclName<_str638>, ParmVarDecl<_ast4990> {}; // ParmVar values
struct _ast4991: FunctionProtoType<_ast122, Pack<_ast2095, _ast4988, _ast4990>, SameType> {}; // FunctionProto void (int, int *, void **)
struct _ast4992: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4997, Pack<_ast4993, _ast4995>>>, _ast4684>, NamedDeclName<_str639> {}; // CXXMethod HasOwnProperty
struct _ast4993: NamedDeclName<_str220>, ParmVarDecl<_ast4994> {}; // ParmVar context
struct _ast4995: NamedDeclName<_str592>, ParmVarDecl<_ast4996> {}; // ParmVar key
struct _ast4997: FunctionProtoType<_ast4998, Pack<_ast4994, _ast4996>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4999: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5003, Pack<_ast5000, _ast5002>>>, _ast4684>, NamedDeclName<_str639> {}; // CXXMethod HasOwnProperty
struct _ast5000: NamedDeclName<_str220>, ParmVarDecl<_ast5001> {}; // ParmVar context
struct _ast5002: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast5003: FunctionProtoType<_ast5004, Pack<_ast5001, _ast3641>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast5005: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5010, Pack<_ast5006, _ast5008>>>, _ast4684>, NamedDeclName<_str640> {}; // CXXMethod HasRealNamedProperty
struct _ast5006: NamedDeclName<_str220>, ParmVarDecl<_ast5007> {}; // ParmVar context
struct _ast5008: NamedDeclName<_str592>, ParmVarDecl<_ast5009> {}; // ParmVar key
struct _ast5010: FunctionProtoType<_ast5011, Pack<_ast5007, _ast5009>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast5012: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5016, Pack<_ast5013, _ast5015>>>, _ast4684>, NamedDeclName<_str641> {}; // CXXMethod HasRealIndexedProperty
struct _ast5013: NamedDeclName<_str220>, ParmVarDecl<_ast5014> {}; // ParmVar context
struct _ast5015: NamedDeclName<_str127>, ParmVarDecl<_ast3641> {}; // ParmVar index
struct _ast5016: FunctionProtoType<_ast5017, Pack<_ast5014, _ast3641>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast5018: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5023, Pack<_ast5019, _ast5021>>>, _ast4684>, NamedDeclName<_str642> {}; // CXXMethod HasRealNamedCallbackProperty
struct _ast5019: NamedDeclName<_str220>, ParmVarDecl<_ast5020> {}; // ParmVar context
struct _ast5021: NamedDeclName<_str592>, ParmVarDecl<_ast5022> {}; // ParmVar key
struct _ast5023: FunctionProtoType<_ast5024, Pack<_ast5020, _ast5022>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast5025: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5030, Pack<_ast5026, _ast5028>>>, _ast4684>, NamedDeclName<_str643> {}; // CXXMethod GetRealNamedPropertyInPrototypeChain
struct _ast5026: NamedDeclName<_str220>, ParmVarDecl<_ast5027> {}; // ParmVar context
struct _ast5028: NamedDeclName<_str592>, ParmVarDecl<_ast5029> {}; // ParmVar key
struct _ast5030: FunctionProtoType<_ast5031, Pack<_ast5027, _ast5029>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast5032: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5037, Pack<_ast5033, _ast5035>>>, _ast4684>, NamedDeclName<_str644> {}; // CXXMethod GetRealNamedPropertyAttributesInPrototypeChain
struct _ast5033: NamedDeclName<_str220>, ParmVarDecl<_ast5034> {}; // ParmVar context
struct _ast5035: NamedDeclName<_str592>, ParmVarDecl<_ast5036> {}; // ParmVar key
struct _ast5037: FunctionProtoType<_ast5038, Pack<_ast5034, _ast5036>, SameType> {}; // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast5039: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5044, Pack<_ast5040, _ast5042>>>, _ast4684>, NamedDeclName<_str645> {}; // CXXMethod GetRealNamedProperty
struct _ast5040: NamedDeclName<_str220>, ParmVarDecl<_ast5041> {}; // ParmVar context
struct _ast5042: NamedDeclName<_str592>, ParmVarDecl<_ast5043> {}; // ParmVar key
struct _ast5044: FunctionProtoType<_ast5045, Pack<_ast5041, _ast5043>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast5046: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5051, Pack<_ast5047, _ast5049>>>, _ast4684>, NamedDeclName<_str646> {}; // CXXMethod GetRealNamedPropertyAttributes
struct _ast5047: NamedDeclName<_str220>, ParmVarDecl<_ast5048> {}; // ParmVar context
struct _ast5049: NamedDeclName<_str592>, ParmVarDecl<_ast5050> {}; // ParmVar key
struct _ast5051: FunctionProtoType<_ast5052, Pack<_ast5048, _ast5050>, SameType> {}; // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast5053: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast4684>, NamedDeclName<_str647> {}; // CXXMethod HasNamedLookupInterceptor
struct _ast5054: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast4684>, NamedDeclName<_str648> {}; // CXXMethod HasIndexedLookupInterceptor
struct _ast5055: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast4684>, NamedDeclName<_str217> {}; // CXXMethod GetIdentityHash
struct _ast5056: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5057, Pack<>>>, _ast4684>, NamedDeclName<_str649> {}; // CXXMethod Clone
struct _ast5057: FunctionProtoType<_ast5058, Pack<>, SameType> {}; // FunctionProto Local<v8::Object> ()
struct _ast5059: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5060, Pack<>>>, _ast4684>, NamedDeclName<_str650> {}; // CXXMethod CreationContext
struct _ast5060: FunctionProtoType<_ast5061, Pack<>, SameType> {}; // FunctionProto Local<v8::Context> ()
struct _ast5062: MethodDecl<FunctionDecl<_ast5067, Pack<_ast5063>>>, NamedDeclName<_str650> {}; // CXXMethod CreationContext
struct _ast5063: NamedDeclName<_str367>, ParmVarDecl<_ast5064> {}; // ParmVar object
struct _ast5064: LValueReferenceType<ReferenceType<_ast5065>> {}; // LValueReference const PersistentBase<v8::Object> &
struct _ast5065: ConstQualifiedType<_ast5066> {}; // TemplateSpecialization const PersistentBase<v8::Object>
struct _ast5067: FunctionProtoType<_ast5068, Pack<_ast5064>, SameType> {}; // FunctionProto Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _ast5069: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast4684>, NamedDeclName<_str651> {}; // CXXMethod IsCallable
struct _ast5070: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast4684>, NamedDeclName<_str327> {}; // CXXMethod IsConstructor
struct _ast5071: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5079, Pack<_ast5072, _ast5074, _ast5076, _ast5077>>>, _ast4684>, NamedDeclName<_str652> {}; // CXXMethod CallAsFunction
struct _ast5072: NamedDeclName<_str220>, ParmVarDecl<_ast5073> {}; // ParmVar context
struct _ast5074: NamedDeclName<_str653>, ParmVarDecl<_ast5075> {}; // ParmVar recv
struct _ast5076: NamedDeclName<_str636>, ParmVarDecl<_ast2095> {}; // ParmVar argc
struct _ast5077: NamedDeclName<_str654>, ParmVarDecl<_ast5078> {}; // ParmVar argv
struct _ast5079: FunctionProtoType<_ast5080, Pack<_ast5073, _ast5075, _ast2095, _ast5078>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5081: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5087, Pack<_ast5082, _ast5084, _ast5085>>>, _ast4684>, NamedDeclName<_str655> {}; // CXXMethod CallAsConstructor
struct _ast5082: NamedDeclName<_str220>, ParmVarDecl<_ast5083> {}; // ParmVar context
struct _ast5084: NamedDeclName<_str636>, ParmVarDecl<_ast2095> {}; // ParmVar argc
struct _ast5085: NamedDeclName<_str654>, ParmVarDecl<_ast5086> {}; // ParmVar argv
struct _ast5087: FunctionProtoType<_ast5088, Pack<_ast5083, _ast2095, _ast5086>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
struct _ast5089: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5090, Pack<>>>, _ast4684>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast5090: FunctionProtoType<_ast198, Pack<>, SameType> {}; // FunctionProto v8::Isolate *()
struct _ast5091: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5093, Pack<_ast5092>>>, _ast4684>, NamedDeclName<_str656> {}; // CXXMethod PreviewEntries
struct _ast5092: NamedDeclName<_str657>, ParmVarDecl<_ast4611> {}; // ParmVar is_key_value
struct _ast5093: FunctionProtoType<_ast5094, Pack<_ast4611>, SameType> {}; // FunctionProto MaybeLocal<v8::Array> (bool *)
struct _ast5095: MethodDecl<FunctionDecl<_ast5097, Pack<_ast5096>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5096: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5097: FunctionProtoType<_ast5098, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Object> (v8::Isolate *)
struct _ast5099: MethodDecl<FunctionDecl<_ast5110, Pack<_ast5100, _ast5101, _ast5103, _ast5106, _ast5109>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5100: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5101: NamedDeclName<_str658>, ParmVarDecl<_ast5102> {}; // ParmVar prototype_or_null
struct _ast5103: NamedDeclName<_str659>, ParmVarDecl<_ast5104> {}; // ParmVar names
struct _ast5104: PointerType<_ast5105> {}; // Pointer Local<v8::Name> *
struct _ast5106: NamedDeclName<_str638>, ParmVarDecl<_ast5107> {}; // ParmVar values
struct _ast5107: PointerType<_ast5108> {}; // Pointer Local<v8::Value> *
struct _ast5109: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5110: FunctionProtoType<_ast5111, Pack<_ast198, _ast5102, _ast5104, _ast5107, _ast3539>, SameType> {}; // FunctionProto Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _ast5112: MethodDecl<FunctionDecl<_ast5114, Pack<_ast5113>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5113: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5114: FunctionProtoType<_ast4684, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Object *(v8::Value *)
struct _ast5115: NamedDeclName<_str6>, TypeDecl<_ast11> {}; // CXXRecord Array
struct _ast5116: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4001, Pack<>>>, _ast5117>, NamedDeclName<_str160> {}; // CXXMethod Length
struct _ast5117: PointerType<_ast5118> {}; // Pointer const v8::Array *
struct _ast5118: ConstQualifiedType<_ast11> {}; // Record const v8::Array
struct _ast5119: MethodDecl<FunctionDecl<_ast5122, Pack<_ast5120, _ast5121>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5120: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5121: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast5122: FunctionProtoType<_ast5123, Pack<_ast198, _ast2095>, SameType> {}; // FunctionProto Local<v8::Array> (v8::Isolate *, int)
struct _ast5124: MethodDecl<FunctionDecl<_ast5130, Pack<_ast5125, _ast5126, _ast5129>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5125: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5126: NamedDeclName<_str660>, ParmVarDecl<_ast5127> {}; // ParmVar elements
struct _ast5127: PointerType<_ast5128> {}; // Pointer Local<v8::Value> *
struct _ast5129: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5130: FunctionProtoType<_ast5131, Pack<_ast198, _ast5127, _ast3539>, SameType> {}; // FunctionProto Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
struct _ast5132: MethodDecl<FunctionDecl<_ast5134, Pack<_ast5133>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5133: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5134: FunctionProtoType<_ast5135, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Array *(v8::Value *)
struct _ast5135: PointerType<_ast11> {}; // Pointer v8::Array *
struct _ast5136: NamedDeclName<_str661>, TypeDecl<_ast5137> {}; // CXXRecord Map
struct _ast5137: StructOrClassRecordType<RecordType<_ast5136>> {}; // Record v8::Map
struct _ast5138: NamedDeclName<_str661>, TypeDecl<_ast5137> {}; // CXXRecord Map
struct _ast5139: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5140>, NamedDeclName<_str662> {}; // CXXMethod Size
struct _ast5140: PointerType<_ast5141> {}; // Pointer const v8::Map *
struct _ast5141: ConstQualifiedType<_ast5137> {}; // Record const v8::Map
struct _ast5142: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5143>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast5143: PointerType<_ast5137> {}; // Pointer v8::Map *
struct _ast5144: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5149, Pack<_ast5145, _ast5147>>>, _ast5143>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast5145: NamedDeclName<_str220>, ParmVarDecl<_ast5146> {}; // ParmVar context
struct _ast5147: NamedDeclName<_str592>, ParmVarDecl<_ast5148> {}; // ParmVar key
struct _ast5149: FunctionProtoType<_ast5150, Pack<_ast5146, _ast5148>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast5151: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5158, Pack<_ast5152, _ast5154, _ast5156>>>, _ast5143>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5152: NamedDeclName<_str220>, ParmVarDecl<_ast5153> {}; // ParmVar context
struct _ast5154: NamedDeclName<_str592>, ParmVarDecl<_ast5155> {}; // ParmVar key
struct _ast5156: NamedDeclName<_str152>, ParmVarDecl<_ast5157> {}; // ParmVar value
struct _ast5158: FunctionProtoType<_ast5159, Pack<_ast5153, _ast5155, _ast5157>, SameType> {}; // FunctionProto MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast5160: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5165, Pack<_ast5161, _ast5163>>>, _ast5143>, NamedDeclName<_str600> {}; // CXXMethod Has
struct _ast5161: NamedDeclName<_str220>, ParmVarDecl<_ast5162> {}; // ParmVar context
struct _ast5163: NamedDeclName<_str592>, ParmVarDecl<_ast5164> {}; // ParmVar key
struct _ast5165: FunctionProtoType<_ast5166, Pack<_ast5162, _ast5164>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5167: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5172, Pack<_ast5168, _ast5170>>>, _ast5143>, NamedDeclName<_str601> {}; // CXXMethod Delete
struct _ast5168: NamedDeclName<_str220>, ParmVarDecl<_ast5169> {}; // ParmVar context
struct _ast5170: NamedDeclName<_str592>, ParmVarDecl<_ast5171> {}; // ParmVar key
struct _ast5172: FunctionProtoType<_ast5173, Pack<_ast5169, _ast5171>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5174: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5175, Pack<>>>, _ast5140>, NamedDeclName<_str663> {}; // CXXMethod AsArray
struct _ast5175: FunctionProtoType<_ast5176, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Array> () const
struct _ast5177: MethodDecl<FunctionDecl<_ast5179, Pack<_ast5178>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5178: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5179: FunctionProtoType<_ast5180, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Map> (v8::Isolate *)
struct _ast5181: MethodDecl<FunctionDecl<_ast5183, Pack<_ast5182>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5182: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5183: FunctionProtoType<_ast5143, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Map *(v8::Value *)
struct _ast5184: NamedDeclName<_str118>, TypeDecl<_ast5185> {}; // CXXRecord Set
struct _ast5185: StructOrClassRecordType<RecordType<_ast5184>> {}; // Record v8::Set
struct _ast5186: NamedDeclName<_str118>, TypeDecl<_ast5185> {}; // CXXRecord Set
struct _ast5187: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5188>, NamedDeclName<_str662> {}; // CXXMethod Size
struct _ast5188: PointerType<_ast5189> {}; // Pointer const v8::Set *
struct _ast5189: ConstQualifiedType<_ast5185> {}; // Record const v8::Set
struct _ast5190: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5191>, NamedDeclName<_str55> {}; // CXXMethod Clear
struct _ast5191: PointerType<_ast5185> {}; // Pointer v8::Set *
struct _ast5192: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5197, Pack<_ast5193, _ast5195>>>, _ast5191>, NamedDeclName<_str664> {}; // CXXMethod Add
struct _ast5193: NamedDeclName<_str220>, ParmVarDecl<_ast5194> {}; // ParmVar context
struct _ast5195: NamedDeclName<_str592>, ParmVarDecl<_ast5196> {}; // ParmVar key
struct _ast5197: FunctionProtoType<_ast5198, Pack<_ast5194, _ast5196>, SameType> {}; // FunctionProto MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
struct _ast5199: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5204, Pack<_ast5200, _ast5202>>>, _ast5191>, NamedDeclName<_str600> {}; // CXXMethod Has
struct _ast5200: NamedDeclName<_str220>, ParmVarDecl<_ast5201> {}; // ParmVar context
struct _ast5202: NamedDeclName<_str592>, ParmVarDecl<_ast5203> {}; // ParmVar key
struct _ast5204: FunctionProtoType<_ast5205, Pack<_ast5201, _ast5203>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5206: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5211, Pack<_ast5207, _ast5209>>>, _ast5191>, NamedDeclName<_str601> {}; // CXXMethod Delete
struct _ast5207: NamedDeclName<_str220>, ParmVarDecl<_ast5208> {}; // ParmVar context
struct _ast5209: NamedDeclName<_str592>, ParmVarDecl<_ast5210> {}; // ParmVar key
struct _ast5211: FunctionProtoType<_ast5212, Pack<_ast5208, _ast5210>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5213: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5214, Pack<>>>, _ast5188>, NamedDeclName<_str663> {}; // CXXMethod AsArray
struct _ast5214: FunctionProtoType<_ast5215, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Array> () const
struct _ast5216: MethodDecl<FunctionDecl<_ast5218, Pack<_ast5217>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5217: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5218: FunctionProtoType<_ast5219, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Set> (v8::Isolate *)
struct _ast5220: MethodDecl<FunctionDecl<_ast5222, Pack<_ast5221>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5221: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5222: FunctionProtoType<_ast5191, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Set *(v8::Value *)
struct _ast5223: NamedDeclName<_str21>, TypeDecl<_ast5224> {}; // TemplateTypeParm T
struct _ast5225: NamedDeclName<_str110>, TypeDecl<_ast2555> {}; // CXXRecord ReturnValue
struct _ast5226: NamedDeclName<_str665> {}; // FunctionTemplate ReturnValue<T>
struct _ast5227: NamedDeclName<_str52>, TypeDecl<_ast5228> {}; // TemplateTypeParm S
struct _ast5229: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5234, Pack<_ast5230>>>, _ast5235>> {}; // CXXConstructor ReturnValue<T>
struct _ast5230: NamedDeclName<_str53>, ParmVarDecl<_ast5231> {}; // ParmVar that
struct _ast5231: LValueReferenceType<ReferenceType<_ast5232>> {}; // LValueReference const ReturnValue<S> &
struct _ast5232: ConstQualifiedType<_ast5233> {}; // TemplateSpecialization const ReturnValue<S>
struct _ast5234: FunctionProtoType<_ast122, Pack<_ast5231>, SameType> {}; // FunctionProto void (const ReturnValue<S> &)
struct _ast5235: PointerType<_ast2555> {}; // Pointer ReturnValue<T> *
struct _ast5236: NamedDeclName<_str118> {}; // FunctionTemplate Set
struct _ast5237: NamedDeclName<_str52>, TypeDecl<_ast5238> {}; // TemplateTypeParm S
struct _ast5239: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5244, Pack<_ast5240>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5240: NamedDeclName<_str117>, ParmVarDecl<_ast5241> {}; // ParmVar handle
struct _ast5241: LValueReferenceType<ReferenceType<_ast5242>> {}; // LValueReference const Global<S> &
struct _ast5242: ConstQualifiedType<_ast5243> {}; // TemplateSpecialization const Global<S>
struct _ast5244: FunctionProtoType<_ast122, Pack<_ast5241>, SameType> {}; // FunctionProto void (const Global<S> &)
struct _ast5245: NamedDeclName<_str118> {}; // FunctionTemplate Set
struct _ast5246: NamedDeclName<_str52>, TypeDecl<_ast5247> {}; // TemplateTypeParm S
struct _ast5248: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5253, Pack<_ast5249>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5249: NamedDeclName<_str117>, ParmVarDecl<_ast5250> {}; // ParmVar handle
struct _ast5250: LValueReferenceType<ReferenceType<_ast5251>> {}; // LValueReference const TracedGlobal<S> &
struct _ast5251: ConstQualifiedType<_ast5252> {}; // TemplateSpecialization const TracedGlobal<S>
struct _ast5253: FunctionProtoType<_ast122, Pack<_ast5250>, SameType> {}; // FunctionProto void (const TracedGlobal<S> &)
struct _ast5254: NamedDeclName<_str118> {}; // FunctionTemplate Set
struct _ast5255: NamedDeclName<_str52>, TypeDecl<_ast5256> {}; // TemplateTypeParm S
struct _ast5257: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5261, Pack<_ast5258>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5258: NamedDeclName<_str117>, ParmVarDecl<_ast5259> {}; // ParmVar handle
struct _ast5259: ConstQualifiedType<_ast5260> {}; // TemplateSpecialization const Local<S>
struct _ast5261: FunctionProtoType<_ast122, Pack<_ast5259>, SameType> {}; // FunctionProto void (const Local<S>)
struct _ast5262: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast5263>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5263: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast5264: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3919, Pack<_ast5265>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5265: NamedDeclName<_str215>, ParmVarDecl<_ast3918> {}; // ParmVar i
struct _ast5266: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5268, Pack<_ast5267>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5267: NamedDeclName<_str215>, ParmVarDecl<_ast4554> {}; // ParmVar i
struct _ast5268: FunctionProtoType<_ast122, Pack<_ast4554>, SameType> {}; // FunctionProto void (int32_t)
struct _ast5269: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3911, Pack<_ast5270>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5270: NamedDeclName<_str215>, ParmVarDecl<_ast3641> {}; // ParmVar i
struct _ast5271: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5235>, NamedDeclName<_str666> {}; // CXXMethod SetNull
struct _ast5272: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5235>, NamedDeclName<_str667> {}; // CXXMethod SetUndefined
struct _ast5273: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5235>, NamedDeclName<_str668> {}; // CXXMethod SetEmptyString
struct _ast5274: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast5275>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast5275: PointerType<_ast5276> {}; // Pointer const ReturnValue<T> *
struct _ast5276: ConstQualifiedType<_ast2555> {}; // InjectedClassName const ReturnValue<T>
struct _ast5277: NamedDeclName<_str118> {}; // FunctionTemplate Set
struct _ast5278: NamedDeclName<_str52>, TypeDecl<_ast5279> {}; // TemplateTypeParm S
struct _ast5280: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5283, Pack<_ast5281>>>, _ast5235>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast5281: NamedDeclName<_str669>, ParmVarDecl<_ast5282> {}; // ParmVar whatever
struct _ast5282: PointerType<_ast5279> {}; // Pointer S *
struct _ast5283: FunctionProtoType<_ast122, Pack<_ast5282>, SameType> {}; // FunctionProto void (S *)
struct _ast5284: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5285, Pack<>>>, _ast5275>, NamedDeclName<_str78> {}; // CXXMethod Get
struct _ast5285: FunctionProtoType<_ast5286, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5287: NamedDeclName<_str21>, TypeDecl<_ast5288> {}; // TemplateTypeParm T
struct _ast5289: NamedDeclName<_str106>, TypeDecl<_ast2529> {}; // CXXRecord FunctionCallbackInfo
struct _ast5290: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast5291>, NamedDeclName<_str160> {}; // CXXMethod Length
struct _ast5291: PointerType<_ast5292> {}; // Pointer const FunctionCallbackInfo<T> *
struct _ast5292: ConstQualifiedType<_ast2529> {}; // InjectedClassName const FunctionCallbackInfo<T>
struct _ast5293: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5295, Pack<_ast5294>>>, _ast5291>, NamedDeclName<_str670> {}; // CXXMethod operator[]
struct _ast5294: NamedDeclName<_str215>, ParmVarDecl<_ast2095> {}; // ParmVar i
struct _ast5295: FunctionProtoType<_ast5296, Pack<_ast2095>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> (int) const
struct _ast5297: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5298, Pack<>>>, _ast5291>, NamedDeclName<_str671> {}; // CXXMethod This
struct _ast5298: FunctionProtoType<_ast5299, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Object> () const
struct _ast5300: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5301, Pack<>>>, _ast5291>, NamedDeclName<_str672> {}; // CXXMethod Holder
struct _ast5301: FunctionProtoType<_ast5302, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Object> () const
struct _ast5303: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5304, Pack<>>>, _ast5291>, NamedDeclName<_str673> {}; // CXXMethod NewTarget
struct _ast5304: FunctionProtoType<_ast5305, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5306: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5291>, NamedDeclName<_str674> {}; // CXXMethod IsConstructCall
struct _ast5307: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5308, Pack<>>>, _ast5291>, NamedDeclName<_str3> {}; // CXXMethod Data
struct _ast5308: FunctionProtoType<_ast5309, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5310: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast5291>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast5311: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5312, Pack<>>>, _ast5291>, NamedDeclName<_str675> {}; // CXXMethod GetReturnValue
struct _ast5312: FunctionProtoType<_ast5313, Pack<>, ConstQualifiedType> {}; // FunctionProto ReturnValue<T> () const
struct _ast5314: NamedDeclName<_str676> {}; // Var kArgsLength
struct _ast5315: NamedDeclName<_str677> {}; // Var kHolderIndex
struct _ast5316: NamedDeclName<_str678> {}; // Var kIsolateIndex
struct _ast5317: NamedDeclName<_str679> {}; // Var kReturnValueDefaultValueIndex
struct _ast5318: NamedDeclName<_str680> {}; // Var kReturnValueIndex
struct _ast5319: NamedDeclName<_str681> {}; // Var kDataIndex
struct _ast5320: NamedDeclName<_str682> {}; // Var kNewTargetIndex
struct _ast5321: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5325, Pack<_ast5322, _ast5323, _ast5324>>>, _ast5326>> {}; // CXXConstructor FunctionCallbackInfo<T>
struct _ast5322: NamedDeclName<_str683>, ParmVarDecl<_ast3190> {}; // ParmVar implicit_args
struct _ast5323: NamedDeclName<_str638>, ParmVarDecl<_ast3190> {}; // ParmVar values
struct _ast5324: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast5325: FunctionProtoType<_ast122, Pack<_ast3190, _ast3190, _ast2095>, SameType> {}; // FunctionProto void (internal::Address *, internal::Address *, int)
struct _ast5326: PointerType<_ast2529> {}; // Pointer FunctionCallbackInfo<T> *
struct _ast5327: NamedDeclName<_str684> {}; // Field implicit_args_
struct _ast5328: NamedDeclName<_str685> {}; // Field values_
struct _ast5329: NamedDeclName<_str686> {}; // Field length_
struct _ast5330: NamedDeclName<_str21>, TypeDecl<_ast5331> {}; // TemplateTypeParm T
struct _ast5332: NamedDeclName<_str107>, TypeDecl<_ast2536> {}; // CXXRecord PropertyCallbackInfo
struct _ast5333: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast2739, Pack<>>>, _ast5334>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast5334: PointerType<_ast5335> {}; // Pointer const PropertyCallbackInfo<T> *
struct _ast5335: ConstQualifiedType<_ast2536> {}; // InjectedClassName const PropertyCallbackInfo<T>
struct _ast5336: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5337, Pack<>>>, _ast5334>, NamedDeclName<_str3> {}; // CXXMethod Data
struct _ast5337: FunctionProtoType<_ast5338, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5339: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5340, Pack<>>>, _ast5334>, NamedDeclName<_str671> {}; // CXXMethod This
struct _ast5340: FunctionProtoType<_ast5341, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Object> () const
struct _ast5342: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5343, Pack<>>>, _ast5334>, NamedDeclName<_str672> {}; // CXXMethod Holder
struct _ast5343: FunctionProtoType<_ast5344, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Object> () const
struct _ast5345: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5346, Pack<>>>, _ast5334>, NamedDeclName<_str675> {}; // CXXMethod GetReturnValue
struct _ast5346: FunctionProtoType<_ast5347, Pack<>, ConstQualifiedType> {}; // FunctionProto ReturnValue<T> () const
struct _ast5348: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5334>, NamedDeclName<_str687> {}; // CXXMethod ShouldThrowOnError
struct _ast5349: NamedDeclName<_str676> {}; // Var kArgsLength
struct _ast5350: NamedDeclName<_str688> {}; // Var kShouldThrowOnErrorIndex
struct _ast5351: NamedDeclName<_str677> {}; // Var kHolderIndex
struct _ast5352: NamedDeclName<_str678> {}; // Var kIsolateIndex
struct _ast5353: NamedDeclName<_str679> {}; // Var kReturnValueDefaultValueIndex
struct _ast5354: NamedDeclName<_str680> {}; // Var kReturnValueIndex
struct _ast5355: NamedDeclName<_str681> {}; // Var kDataIndex
struct _ast5356: NamedDeclName<_str689> {}; // Var kThisIndex
struct _ast5357: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5359, Pack<_ast5358>>>, _ast5360>> {}; // CXXConstructor PropertyCallbackInfo<T>
struct _ast5358: NamedDeclName<_str690>, ParmVarDecl<_ast3190> {}; // ParmVar args
struct _ast5359: FunctionProtoType<_ast122, Pack<_ast3190>, SameType> {}; // FunctionProto void (internal::Address *)
struct _ast5360: PointerType<_ast2536> {}; // Pointer PropertyCallbackInfo<T> *
struct _ast5361: NamedDeclName<_str691> {}; // Field args_
struct _ast5362: NamedDeclName<_str692>, TypeDecl<_ast5363> {}; // Typedef FunctionCallback
struct _ast5363: TypedefType<_ast5362> {}; // Typedef v8::FunctionCallback
struct _ast5364: NamedDeclName<_str693>, TypeDecl<_ast5365> {}; // Enum ConstructorBehavior
struct _ast5365: EnumType<_ast5364, _ast2095> {}; // Enum v8::ConstructorBehavior
struct _ast5366: NamedDeclName<_str694> {}; // EnumConstant kThrow
struct _ast5367: NamedDeclName<_str695> {}; // EnumConstant kAllow
struct _ast5368: NamedDeclName<_str14>, TypeDecl<_ast27> {}; // CXXRecord Function
struct _ast5369: MethodDecl<FunctionDecl<_ast5378, Pack<_ast5370, _ast5372, _ast5373, _ast5375, _ast5376, _ast5377>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5370: NamedDeclName<_str220>, ParmVarDecl<_ast5371> {}; // ParmVar context
struct _ast5372: NamedDeclName<_str82>, ParmVarDecl<_ast5363> {}; // ParmVar callback
struct _ast5373: NamedDeclName<_str129>, ParmVarDecl<_ast5374> {}; // ParmVar data
struct _ast5375: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast5376: NamedDeclName<_str696>, ParmVarDecl<_ast5365> {}; // ParmVar behavior
struct _ast5377: NamedDeclName<_str697>, ParmVarDecl<_ast4657> {}; // ParmVar side_effect_type
struct _ast5378: FunctionProtoType<_ast5379, Pack<_ast5371, _ast5363, _ast5374, _ast2095, _ast5365, _ast4657>, SameType> {}; // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast5380: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5386, Pack<_ast5381, _ast5383, _ast5384>>>, _ast5388>, NamedDeclName<_str698> {}; // CXXMethod NewInstance
struct _ast5381: NamedDeclName<_str220>, ParmVarDecl<_ast5382> {}; // ParmVar context
struct _ast5383: NamedDeclName<_str636>, ParmVarDecl<_ast2095> {}; // ParmVar argc
struct _ast5384: NamedDeclName<_str654>, ParmVarDecl<_ast5385> {}; // ParmVar argv
struct _ast5386: FunctionProtoType<_ast5387, Pack<_ast5382, _ast2095, _ast5385>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
struct _ast5388: PointerType<_ast5389> {}; // Pointer const v8::Function *
struct _ast5389: ConstQualifiedType<_ast27> {}; // Record const v8::Function
struct _ast5390: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5393, Pack<_ast5391>>>, _ast5388>, NamedDeclName<_str698> {}; // CXXMethod NewInstance
struct _ast5391: NamedDeclName<_str220>, ParmVarDecl<_ast5392> {}; // ParmVar context
struct _ast5393: FunctionProtoType<_ast5394, Pack<_ast5392>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast5395: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5402, Pack<_ast5396, _ast5398, _ast5399, _ast5401>>>, _ast5388>, NamedDeclName<_str699> {}; // CXXMethod NewInstanceWithSideEffectType
struct _ast5396: NamedDeclName<_str220>, ParmVarDecl<_ast5397> {}; // ParmVar context
struct _ast5398: NamedDeclName<_str636>, ParmVarDecl<_ast2095> {}; // ParmVar argc
struct _ast5399: NamedDeclName<_str654>, ParmVarDecl<_ast5400> {}; // ParmVar argv
struct _ast5401: NamedDeclName<_str697>, ParmVarDecl<_ast4657> {}; // ParmVar side_effect_type
struct _ast5402: FunctionProtoType<_ast5403, Pack<_ast5397, _ast2095, _ast5400, _ast4657>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
struct _ast5404: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5412, Pack<_ast5405, _ast5407, _ast5409, _ast5410>>>, _ast5414>, NamedDeclName<_str700> {}; // CXXMethod Call
struct _ast5405: NamedDeclName<_str220>, ParmVarDecl<_ast5406> {}; // ParmVar context
struct _ast5407: NamedDeclName<_str653>, ParmVarDecl<_ast5408> {}; // ParmVar recv
struct _ast5409: NamedDeclName<_str636>, ParmVarDecl<_ast2095> {}; // ParmVar argc
struct _ast5410: NamedDeclName<_str654>, ParmVarDecl<_ast5411> {}; // ParmVar argv
struct _ast5412: FunctionProtoType<_ast5413, Pack<_ast5406, _ast5408, _ast2095, _ast5411>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5414: PointerType<_ast27> {}; // Pointer v8::Function *
struct _ast5415: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5418, Pack<_ast5416>>>, _ast5414>, NamedDeclName<_str701> {}; // CXXMethod SetName
struct _ast5416: NamedDeclName<_str531>, ParmVarDecl<_ast5417> {}; // ParmVar name
struct _ast5418: FunctionProtoType<_ast122, Pack<_ast5417>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast5419: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5420, Pack<>>>, _ast5388>, NamedDeclName<_str702> {}; // CXXMethod GetName
struct _ast5420: FunctionProtoType<_ast5421, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5422: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5423, Pack<>>>, _ast5388>, NamedDeclName<_str703> {}; // CXXMethod GetInferredName
struct _ast5423: FunctionProtoType<_ast5424, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5425: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5426, Pack<>>>, _ast5388>, NamedDeclName<_str704> {}; // CXXMethod GetDebugName
struct _ast5426: FunctionProtoType<_ast5427, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5428: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5429, Pack<>>>, _ast5388>, NamedDeclName<_str705> {}; // CXXMethod GetDisplayName
struct _ast5429: FunctionProtoType<_ast5430, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5431: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast5388>, NamedDeclName<_str706> {}; // CXXMethod GetScriptLineNumber
struct _ast5432: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast5388>, NamedDeclName<_str707> {}; // CXXMethod GetScriptColumnNumber
struct _ast5433: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast5388>, NamedDeclName<_str708> {}; // CXXMethod ScriptId
struct _ast5434: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5435, Pack<>>>, _ast5388>, NamedDeclName<_str709> {}; // CXXMethod GetBoundFunction
struct _ast5435: FunctionProtoType<_ast5436, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5437: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3690, Pack<>>>, _ast5388>, NamedDeclName<_str293> {}; // CXXMethod GetScriptOrigin
struct _ast5438: MethodDecl<FunctionDecl<_ast5440, Pack<_ast5439>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5439: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5440: FunctionProtoType<_ast5414, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Function *(v8::Value *)
struct _ast5441: NamedDeclName<_str710> {}; // Var kLineOffsetNotFound
struct _ast5442: NamedDeclName<_str31>, TypeDecl<_ast74> {}; // CXXRecord Promise
struct _ast5443: NamedDeclName<_str711>, TypeDecl<_ast5444> {}; // Enum PromiseState
struct _ast5444: EnumType<_ast5443, _ast2095> {}; // Enum v8::Promise::PromiseState
struct _ast5445: NamedDeclName<_str712> {}; // EnumConstant kPending
struct _ast5446: NamedDeclName<_str713> {}; // EnumConstant kFulfilled
struct _ast5447: NamedDeclName<_str714> {}; // EnumConstant kRejected
struct _ast5448: NamedDeclName<_str715>, TypeDecl<_ast5449> {}; // CXXRecord Resolver
struct _ast5449: StructOrClassRecordType<RecordType<_ast5448>> {}; // Record v8::Promise::Resolver
struct _ast5450: NamedDeclName<_str715>, TypeDecl<_ast5449> {}; // CXXRecord Resolver
struct _ast5451: MethodDecl<FunctionDecl<_ast5454, Pack<_ast5452>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5452: NamedDeclName<_str220>, ParmVarDecl<_ast5453> {}; // ParmVar context
struct _ast5454: FunctionProtoType<_ast5455, Pack<_ast5453>, SameType> {}; // FunctionProto MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _ast5456: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5457, Pack<>>>, _ast5459>, NamedDeclName<_str716> {}; // CXXMethod GetPromise
struct _ast5457: FunctionProtoType<_ast5458, Pack<>, SameType> {}; // FunctionProto Local<v8::Promise> ()
struct _ast5459: PointerType<_ast5449> {}; // Pointer v8::Promise::Resolver *
struct _ast5460: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5465, Pack<_ast5461, _ast5463>>>, _ast5459>, NamedDeclName<_str717> {}; // CXXMethod Resolve
struct _ast5461: NamedDeclName<_str220>, ParmVarDecl<_ast5462> {}; // ParmVar context
struct _ast5463: NamedDeclName<_str152>, ParmVarDecl<_ast5464> {}; // ParmVar value
struct _ast5465: FunctionProtoType<_ast5466, Pack<_ast5462, _ast5464>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5467: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5472, Pack<_ast5468, _ast5470>>>, _ast5459>, NamedDeclName<_str718> {}; // CXXMethod Reject
struct _ast5468: NamedDeclName<_str220>, ParmVarDecl<_ast5469> {}; // ParmVar context
struct _ast5470: NamedDeclName<_str152>, ParmVarDecl<_ast5471> {}; // ParmVar value
struct _ast5472: FunctionProtoType<_ast5473, Pack<_ast5469, _ast5471>, SameType> {}; // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5474: MethodDecl<FunctionDecl<_ast5476, Pack<_ast5475>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5475: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5476: FunctionProtoType<_ast5459, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Promise::Resolver *(v8::Value *)
struct _ast5477: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5482, Pack<_ast5478, _ast5480>>>, _ast5484>, NamedDeclName<_str719> {}; // CXXMethod Catch
struct _ast5478: NamedDeclName<_str220>, ParmVarDecl<_ast5479> {}; // ParmVar context
struct _ast5480: NamedDeclName<_str720>, ParmVarDecl<_ast5481> {}; // ParmVar handler
struct _ast5482: FunctionProtoType<_ast5483, Pack<_ast5479, _ast5481>, SameType> {}; // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5484: PointerType<_ast74> {}; // Pointer v8::Promise *
struct _ast5485: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5490, Pack<_ast5486, _ast5488>>>, _ast5484>, NamedDeclName<_str721> {}; // CXXMethod Then
struct _ast5486: NamedDeclName<_str220>, ParmVarDecl<_ast5487> {}; // ParmVar context
struct _ast5488: NamedDeclName<_str720>, ParmVarDecl<_ast5489> {}; // ParmVar handler
struct _ast5490: FunctionProtoType<_ast5491, Pack<_ast5487, _ast5489>, SameType> {}; // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5492: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5499, Pack<_ast5493, _ast5495, _ast5497>>>, _ast5484>, NamedDeclName<_str721> {}; // CXXMethod Then
struct _ast5493: NamedDeclName<_str220>, ParmVarDecl<_ast5494> {}; // ParmVar context
struct _ast5495: NamedDeclName<_str722>, ParmVarDecl<_ast5496> {}; // ParmVar on_fulfilled
struct _ast5497: NamedDeclName<_str723>, ParmVarDecl<_ast5498> {}; // ParmVar on_rejected
struct _ast5499: FunctionProtoType<_ast5500, Pack<_ast5494, _ast5496, _ast5498>, SameType> {}; // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
struct _ast5501: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast5484>, NamedDeclName<_str724> {}; // CXXMethod HasHandler
struct _ast5502: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5503, Pack<>>>, _ast5484>, NamedDeclName<_str725> {}; // CXXMethod Result
struct _ast5503: FunctionProtoType<_ast5504, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast5505: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5506, Pack<>>>, _ast5484>, NamedDeclName<_str726> {}; // CXXMethod State
struct _ast5506: FunctionProtoType<_ast5444, Pack<>, SameType> {}; // FunctionProto v8::Promise::PromiseState ()
struct _ast5507: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5484>, NamedDeclName<_str727> {}; // CXXMethod MarkAsHandled
struct _ast5508: MethodDecl<FunctionDecl<_ast5510, Pack<_ast5509>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5509: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5510: FunctionProtoType<_ast5484, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Promise *(v8::Value *)
struct _ast5511: NamedDeclName<_str728> {}; // Var kEmbedderFieldCount
struct _ast5512: NamedDeclName<_str32>, TypeDecl<_ast76> {}; // CXXRecord PropertyDescriptor
struct _ast5513: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5514>> {}; // CXXConstructor PropertyDescriptor
struct _ast5514: PointerType<_ast76> {}; // Pointer v8::PropertyDescriptor *
struct _ast5515: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5518, Pack<_ast5516>>>, _ast5514>> {}; // CXXConstructor PropertyDescriptor
struct _ast5516: NamedDeclName<_str152>, ParmVarDecl<_ast5517> {}; // ParmVar value
struct _ast5518: FunctionProtoType<_ast122, Pack<_ast5517>, SameType> {}; // FunctionProto void (Local<v8::Value>)
struct _ast5519: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5523, Pack<_ast5520, _ast5522>>>, _ast5514>> {}; // CXXConstructor PropertyDescriptor
struct _ast5520: NamedDeclName<_str152>, ParmVarDecl<_ast5521> {}; // ParmVar value
struct _ast5522: NamedDeclName<_str729>, ParmVarDecl<_ast137> {}; // ParmVar writable
struct _ast5523: FunctionProtoType<_ast122, Pack<_ast5521, _ast137>, SameType> {}; // FunctionProto void (Local<v8::Value>, bool)
struct _ast5524: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5529, Pack<_ast5525, _ast5527>>>, _ast5514>> {}; // CXXConstructor PropertyDescriptor
struct _ast5525: NamedDeclName<_str730>, ParmVarDecl<_ast5526> {}; // ParmVar get
struct _ast5527: NamedDeclName<_str731>, ParmVarDecl<_ast5528> {}; // ParmVar set
struct _ast5529: FunctionProtoType<_ast122, Pack<_ast5526, _ast5528>, SameType> {}; // FunctionProto void (Local<v8::Value>, Local<v8::Value>)
struct _ast5530: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5531, Pack<>>>, _ast5514>> {}; // CXXDestructor ~PropertyDescriptor
struct _ast5531: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5532: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5533, Pack<>>>, _ast5535>, NamedDeclName<_str152> {}; // CXXMethod value
struct _ast5533: FunctionProtoType<_ast5534, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5535: PointerType<_ast5536> {}; // Pointer const v8::PropertyDescriptor *
struct _ast5536: ConstQualifiedType<_ast76> {}; // Record const v8::PropertyDescriptor
struct _ast5537: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str732> {}; // CXXMethod has_value
struct _ast5538: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5539, Pack<>>>, _ast5535>, NamedDeclName<_str730> {}; // CXXMethod get
struct _ast5539: FunctionProtoType<_ast5540, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5541: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str733> {}; // CXXMethod has_get
struct _ast5542: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5543, Pack<>>>, _ast5535>, NamedDeclName<_str731> {}; // CXXMethod set
struct _ast5543: FunctionProtoType<_ast5544, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast5545: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str734> {}; // CXXMethod has_set
struct _ast5546: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast5547>>>, _ast5514>, NamedDeclName<_str735> {}; // CXXMethod set_enumerable
struct _ast5547: NamedDeclName<_str736>, ParmVarDecl<_ast137> {}; // ParmVar enumerable
struct _ast5548: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str736> {}; // CXXMethod enumerable
struct _ast5549: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str737> {}; // CXXMethod has_enumerable
struct _ast5550: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast5551>>>, _ast5514>, NamedDeclName<_str738> {}; // CXXMethod set_configurable
struct _ast5551: NamedDeclName<_str739>, ParmVarDecl<_ast137> {}; // ParmVar configurable
struct _ast5552: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str739> {}; // CXXMethod configurable
struct _ast5553: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str740> {}; // CXXMethod has_configurable
struct _ast5554: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str729> {}; // CXXMethod writable
struct _ast5555: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5535>, NamedDeclName<_str741> {}; // CXXMethod has_writable
struct _ast5556: NamedDeclName<_str742>, TypeDecl<_ast5557> {}; // CXXRecord PrivateData
struct _ast5557: StructOrClassRecordType<RecordType<_ast5556>> {}; // Record v8::PropertyDescriptor::PrivateData
struct _ast5558: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5559, Pack<>>>, _ast5535>, NamedDeclName<_str743> {}; // CXXMethod get_private
struct _ast5559: FunctionProtoType<_ast5560, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::PropertyDescriptor::PrivateData *() const
struct _ast5560: PointerType<_ast5557> {}; // Pointer v8::PropertyDescriptor::PrivateData *
struct _ast5561: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5564, Pack<_ast5562>>>, _ast5514>> {}; // CXXConstructor PropertyDescriptor
struct _ast5562: NamedDeclAnon<_str64>, ParmVarDecl<_ast5563> {}; // ParmVar 
struct _ast5563: LValueReferenceType<ReferenceType<_ast5536>> {}; // LValueReference const v8::PropertyDescriptor &
struct _ast5564: FunctionProtoType<_ast122, Pack<_ast5563>, SameType> {}; // FunctionProto void (const v8::PropertyDescriptor &)
struct _ast5565: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5564, Pack<_ast5566>>>, _ast5514>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5566: NamedDeclAnon<_str64>, ParmVarDecl<_ast5563> {}; // ParmVar 
struct _ast5567: NamedDeclName<_str33>, TypeDecl<_ast78> {}; // CXXRecord Proxy
struct _ast5568: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5569, Pack<>>>, _ast5571>, NamedDeclName<_str744> {}; // CXXMethod GetTarget
struct _ast5569: FunctionProtoType<_ast5570, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast5571: PointerType<_ast78> {}; // Pointer v8::Proxy *
struct _ast5572: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5573, Pack<>>>, _ast5571>, NamedDeclName<_str745> {}; // CXXMethod GetHandler
struct _ast5573: FunctionProtoType<_ast5574, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast5575: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast5571>, NamedDeclName<_str746> {}; // CXXMethod IsRevoked
struct _ast5576: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5571>, NamedDeclName<_str747> {}; // CXXMethod Revoke
struct _ast5577: MethodDecl<FunctionDecl<_ast5584, Pack<_ast5578, _ast5580, _ast5582>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5578: NamedDeclName<_str220>, ParmVarDecl<_ast5579> {}; // ParmVar context
struct _ast5580: NamedDeclName<_str748>, ParmVarDecl<_ast5581> {}; // ParmVar local_target
struct _ast5582: NamedDeclName<_str749>, ParmVarDecl<_ast5583> {}; // ParmVar local_handler
struct _ast5584: FunctionProtoType<_ast5585, Pack<_ast5579, _ast5581, _ast5583>, SameType> {}; // FunctionProto MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
struct _ast5586: MethodDecl<FunctionDecl<_ast5588, Pack<_ast5587>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5587: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5588: FunctionProtoType<_ast5571, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Proxy *(v8::Value *)
struct _ast5589: NamedDeclName<_str750> {}; // ClassTemplate MemorySpan
struct _ast5590: NamedDeclName<_str21>, TypeDecl<_ast5591> {}; // TemplateTypeParm T
struct _ast5592: NamedDeclName<_str750>, TypeDecl<_ast5593> {}; // CXXRecord MemorySpan
struct _ast5594: NamedDeclName<_str750>, TypeDecl<_ast5593> {}; // CXXRecord MemorySpan
struct _ast5595: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5596>> {}; // CXXConstructor MemorySpan<T>
struct _ast5596: PointerType<_ast5593> {}; // Pointer MemorySpan<T> *
struct _ast5597: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5601, Pack<_ast5598, _ast5600>>>, _ast5596>> {}; // CXXConstructor MemorySpan<T>
struct _ast5598: NamedDeclName<_str129>, ParmVarDecl<_ast5599> {}; // ParmVar data
struct _ast5599: PointerType<_ast5591> {}; // Pointer T *
struct _ast5600: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast5601: FunctionProtoType<_ast122, Pack<_ast5599, _ast3539>, SameType> {}; // FunctionProto void (T *, size_t)
struct _ast5602: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5603, Pack<>>>, _ast5604>, NamedDeclName<_str129> {}; // CXXMethod data
struct _ast5603: FunctionProtoType<_ast5599, Pack<>, ConstQualifiedType> {}; // FunctionProto T *() const
struct _ast5604: PointerType<_ast5605> {}; // Pointer const MemorySpan<T> *
struct _ast5605: ConstQualifiedType<_ast5593> {}; // InjectedClassName const MemorySpan<T>
struct _ast5606: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5604>, NamedDeclName<_str374> {}; // CXXMethod size
struct _ast5607: NamedDeclName<_str750>, TypeDecl<_ast5608> {}; // ClassTemplateSpecialization MemorySpan
struct _ast5608: StructOrClassRecordType<RecordType<_ast5607>> {}; // Record v8::MemorySpan<const unsigned char>
struct _ast5609: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5610, Pack<>>>, _ast5611>> {}; // CXXConstructor MemorySpan
struct _ast5610: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5611: PointerType<_ast5608> {}; // Pointer v8::MemorySpan<const unsigned char> *
struct _ast5612: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5617, Pack<_ast5613, _ast5616>>>, _ast5611>> {}; // CXXConstructor MemorySpan
struct _ast5613: NamedDeclName<_str129>, ParmVarDecl<_ast5614> {}; // ParmVar data
struct _ast5614: PointerType<_ast5615> {}; // Pointer const unsigned char *
struct _ast5616: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast5617: FunctionProtoType<_ast122, Pack<_ast5614, _ast3539>, SameType> {}; // FunctionProto void (const unsigned char *, size_t)
struct _ast5618: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5619, Pack<>>>, _ast5620>, NamedDeclName<_str129> {}; // CXXMethod data
struct _ast5619: FunctionProtoType<_ast5614, Pack<>, ConstQualifiedType> {}; // FunctionProto const unsigned char *() const
struct _ast5620: PointerType<_ast5621> {}; // Pointer const v8::MemorySpan<const unsigned char> *
struct _ast5621: ConstQualifiedType<_ast5608> {}; // Record const v8::MemorySpan<const unsigned char>
struct _ast5622: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5620>, NamedDeclName<_str374> {}; // CXXMethod size
struct _ast5623: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5626, Pack<_ast5624>>>, _ast5611>> {}; // CXXConstructor MemorySpan
struct _ast5624: NamedDeclAnon<_str64>, ParmVarDecl<_ast5625> {}; // ParmVar 
struct _ast5625: LValueReferenceType<ReferenceType<_ast5621>> {}; // LValueReference const v8::MemorySpan<const unsigned char> &
struct _ast5626: FunctionProtoType<_ast122, Pack<_ast5625>, SameType> {}; // FunctionProto void (const v8::MemorySpan<const unsigned char> &)
struct _ast5627: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5630, Pack<_ast5628>>>, _ast5611>> {}; // CXXConstructor MemorySpan
struct _ast5628: NamedDeclAnon<_str64>, ParmVarDecl<_ast5629> {}; // ParmVar 
struct _ast5629: RValueReferenceType<ReferenceType<_ast5608>> {}; // RValueReference v8::MemorySpan<const unsigned char> &&
struct _ast5630: FunctionProtoType<_ast122, Pack<_ast5629>, SameType> {}; // FunctionProto void (v8::MemorySpan<const unsigned char> &&)
struct _ast5631: NamedDeclName<_str751>, TypeDecl<_ast5632> {}; // CXXRecord OwnedBuffer
struct _ast5632: StructOrClassRecordType<RecordType<_ast5631>> {}; // Record v8::OwnedBuffer
struct _ast5633: NamedDeclName<_str751>, TypeDecl<_ast5632> {}; // CXXRecord OwnedBuffer
struct _ast5634: NamedDeclName<_str377> {}; // Field buffer
struct _ast5635: NamedDeclName<_str374> {}; // Field size
struct _ast5636: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5640, Pack<_ast5637, _ast5639>>>, _ast5641>> {}; // CXXConstructor OwnedBuffer
struct _ast5637: NamedDeclName<_str377>, ParmVarDecl<_ast5638> {}; // ParmVar buffer
struct _ast5639: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast5640: FunctionProtoType<_ast122, Pack<_ast5638, _ast3539>, SameType> {}; // FunctionProto void (std::unique_ptr<const uint8_t []>, size_t)
struct _ast5641: PointerType<_ast5632> {}; // Pointer v8::OwnedBuffer *
struct _ast5642: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5643, Pack<>>>, _ast5641>> {}; // CXXConstructor OwnedBuffer
struct _ast5643: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5644: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5648, Pack<_ast5645>>>, _ast5641>> {}; // CXXConstructor OwnedBuffer
struct _ast5645: NamedDeclAnon<_str64>, ParmVarDecl<_ast5646> {}; // ParmVar 
struct _ast5646: LValueReferenceType<ReferenceType<_ast5647>> {}; // LValueReference const v8::OwnedBuffer &
struct _ast5647: ConstQualifiedType<_ast5632> {}; // Record const v8::OwnedBuffer
struct _ast5648: FunctionProtoType<_ast122, Pack<_ast5646>, SameType> {}; // FunctionProto void (const v8::OwnedBuffer &)
struct _ast5649: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5652, Pack<_ast5650>>>, _ast5641>> {}; // CXXConstructor OwnedBuffer
struct _ast5650: NamedDeclAnon<_str64>, ParmVarDecl<_ast5651> {}; // ParmVar 
struct _ast5651: RValueReferenceType<ReferenceType<_ast5632>> {}; // RValueReference v8::OwnedBuffer &&
struct _ast5652: FunctionProtoType<_ast122, Pack<_ast5651>, SameType> {}; // FunctionProto void (v8::OwnedBuffer &&) noexcept
struct _ast5653: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5655, Pack<_ast5654>>>, _ast5641>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5654: NamedDeclAnon<_str64>, ParmVarDecl<_ast5651> {}; // ParmVar 
struct _ast5655: FunctionProtoType<_ast5656, Pack<_ast5651>, SameType> {}; // FunctionProto v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ast5656: LValueReferenceType<ReferenceType<_ast5632>> {}; // LValueReference v8::OwnedBuffer &
struct _ast5657: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast5641>> {}; // CXXDestructor ~OwnedBuffer
struct _ast5658: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5660, Pack<_ast5659>>>, _ast5641>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5659: NamedDeclAnon<_str64>, ParmVarDecl<_ast5646> {}; // ParmVar 
struct _ast5660: FunctionProtoType<_ast5656, Pack<_ast5646>, SameType> {}; // FunctionProto v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ast5661: NamedDeclName<_str752>, TypeDecl<_ast5662> {}; // CXXRecord CompiledWasmModule
struct _ast5662: StructOrClassRecordType<RecordType<_ast5661>> {}; // Record v8::CompiledWasmModule
struct _ast5663: NamedDeclName<_str752>, TypeDecl<_ast5662> {}; // CXXRecord CompiledWasmModule
struct _ast5664: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5665, Pack<>>>, _ast5666>, NamedDeclName<_str753> {}; // CXXMethod Serialize
struct _ast5665: FunctionProtoType<_ast5632, Pack<>, SameType> {}; // FunctionProto v8::OwnedBuffer ()
struct _ast5666: PointerType<_ast5662> {}; // Pointer v8::CompiledWasmModule *
struct _ast5667: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5668, Pack<>>>, _ast5666>, NamedDeclName<_str754> {}; // CXXMethod GetWireBytesRef
struct _ast5668: FunctionProtoType<_ast5669, Pack<>, SameType> {}; // FunctionProto MemorySpan<const uint8_t> ()
struct _ast5670: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5674, Pack<_ast5671>>>, _ast5666>> {}; // CXXConstructor CompiledWasmModule
struct _ast5671: NamedDeclAnon<_str64>, ParmVarDecl<_ast5672> {}; // ParmVar 
struct _ast5672: LValueReferenceType<ReferenceType<_ast5673>> {}; // LValueReference const v8::CompiledWasmModule &
struct _ast5673: ConstQualifiedType<_ast5662> {}; // Record const v8::CompiledWasmModule
struct _ast5674: FunctionProtoType<_ast122, Pack<_ast5672>, SameType> {}; // FunctionProto void (const v8::CompiledWasmModule &)
struct _ast5675: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5678, Pack<_ast5676>>>, _ast5666>> {}; // CXXConstructor CompiledWasmModule
struct _ast5676: NamedDeclAnon<_str64>, ParmVarDecl<_ast5677> {}; // ParmVar 
struct _ast5677: RValueReferenceType<ReferenceType<_ast5662>> {}; // RValueReference v8::CompiledWasmModule &&
struct _ast5678: FunctionProtoType<_ast122, Pack<_ast5677>, SameType> {}; // FunctionProto void (v8::CompiledWasmModule &&)
struct _ast5679: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5681, Pack<_ast5680>>>, _ast5666>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5680: NamedDeclAnon<_str64>, ParmVarDecl<_ast5677> {}; // ParmVar 
struct _ast5681: FunctionProtoType<_ast5682, Pack<_ast5677>, SameType> {}; // FunctionProto v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _ast5682: LValueReferenceType<ReferenceType<_ast5662>> {}; // LValueReference v8::CompiledWasmModule &
struct _ast5683: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5684, Pack<>>>, _ast5666>> {}; // CXXDestructor ~CompiledWasmModule
struct _ast5684: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5685: NamedDeclName<_str50>, TypeDecl<_ast112> {}; // CXXRecord WasmModuleObject
struct _ast5686: NamedDeclName<_str755>, TypeDecl<_ast5687> {}; // CXXRecord TransferrableModule
struct _ast5687: StructOrClassRecordType<RecordType<_ast5686>> {}; // Record v8::WasmModuleObject::TransferrableModule
struct _ast5688: NamedDeclName<_str755>, TypeDecl<_ast5687> {}; // CXXRecord TransferrableModule
struct _ast5689: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5692, Pack<_ast5690>>>, _ast5693>> {}; // CXXConstructor TransferrableModule
struct _ast5690: NamedDeclName<_str242>, ParmVarDecl<_ast5691> {}; // ParmVar src
struct _ast5691: RValueReferenceType<ReferenceType<_ast5687>> {}; // RValueReference v8::WasmModuleObject::TransferrableModule &&
struct _ast5692: FunctionProtoType<_ast122, Pack<_ast5691>, SameType> {}; // FunctionProto void (v8::WasmModuleObject::TransferrableModule &&)
struct _ast5693: PointerType<_ast5687> {}; // Pointer v8::WasmModuleObject::TransferrableModule *
struct _ast5694: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5698, Pack<_ast5695>>>, _ast5693>> {}; // CXXConstructor TransferrableModule
struct _ast5695: NamedDeclName<_str242>, ParmVarDecl<_ast5696> {}; // ParmVar src
struct _ast5696: LValueReferenceType<ReferenceType<_ast5697>> {}; // LValueReference const v8::WasmModuleObject::TransferrableModule &
struct _ast5697: ConstQualifiedType<_ast5687> {}; // Record const v8::WasmModuleObject::TransferrableModule
struct _ast5698: FunctionProtoType<_ast122, Pack<_ast5696>, SameType> {}; // FunctionProto void (const v8::WasmModuleObject::TransferrableModule &)
struct _ast5699: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5701, Pack<_ast5700>>>, _ast5693>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5700: NamedDeclName<_str242>, ParmVarDecl<_ast5691> {}; // ParmVar src
struct _ast5701: FunctionProtoType<_ast5702, Pack<_ast5691>, SameType> {}; // FunctionProto v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
struct _ast5702: LValueReferenceType<ReferenceType<_ast5687>> {}; // LValueReference v8::WasmModuleObject::TransferrableModule &
struct _ast5703: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5705, Pack<_ast5704>>>, _ast5693>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5704: NamedDeclName<_str242>, ParmVarDecl<_ast5696> {}; // ParmVar src
struct _ast5705: FunctionProtoType<_ast5702, Pack<_ast5696>, SameType> {}; // FunctionProto v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
struct _ast5706: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5707, Pack<>>>, _ast5693>> {}; // CXXDestructor ~TransferrableModule
struct _ast5707: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5708: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5709, Pack<>>>, _ast5710>, NamedDeclName<_str756> {}; // CXXMethod GetTransferrableModule
struct _ast5709: FunctionProtoType<_ast5687, Pack<>, SameType> {}; // FunctionProto v8::WasmModuleObject::TransferrableModule ()
struct _ast5710: PointerType<_ast112> {}; // Pointer v8::WasmModuleObject *
struct _ast5711: MethodDecl<FunctionDecl<_ast5714, Pack<_ast5712, _ast5713>>>, NamedDeclName<_str757> {}; // CXXMethod FromTransferrableModule
struct _ast5712: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5713: NamedDeclAnon<_str64>, ParmVarDecl<_ast5696> {}; // ParmVar 
struct _ast5714: FunctionProtoType<_ast5715, Pack<_ast198, _ast5696>, SameType> {}; // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
struct _ast5716: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5717, Pack<>>>, _ast5710>, NamedDeclName<_str758> {}; // CXXMethod GetCompiledModule
struct _ast5717: FunctionProtoType<_ast5662, Pack<>, SameType> {}; // FunctionProto v8::CompiledWasmModule ()
struct _ast5718: MethodDecl<FunctionDecl<_ast5724, Pack<_ast5719, _ast5720, _ast5722>>>, NamedDeclName<_str759> {}; // CXXMethod DeserializeOrCompile
struct _ast5719: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5720: NamedDeclName<_str760>, ParmVarDecl<_ast5721> {}; // ParmVar serialized_module
struct _ast5722: NamedDeclName<_str761>, ParmVarDecl<_ast5723> {}; // ParmVar wire_bytes
struct _ast5724: FunctionProtoType<_ast5725, Pack<_ast198, _ast5721, _ast5723>, SameType> {}; // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _ast5726: MethodDecl<FunctionDecl<_ast5728, Pack<_ast5727>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5727: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5728: FunctionProtoType<_ast5710, Pack<_ast4179>, SameType> {}; // FunctionProto v8::WasmModuleObject *(v8::Value *)
struct _ast5729: NamedDeclName<_str762>, TypeDecl<_ast5730> {}; // CXXRecord WasmStreaming
struct _ast5730: StructOrClassRecordType<RecordType<_ast5729>> {}; // Record v8::WasmStreaming
struct _ast5731: NamedDeclName<_str762>, TypeDecl<_ast5730> {}; // CXXRecord WasmStreaming
struct _ast5732: NamedDeclName<_str763>, TypeDecl<_ast5733> {}; // CXXRecord WasmStreamingImpl
struct _ast5733: StructOrClassRecordType<RecordType<_ast5732>> {}; // Record v8::WasmStreaming::WasmStreamingImpl
struct _ast5734: NamedDeclName<_str764>, TypeDecl<_ast5735> {}; // CXXRecord Client
struct _ast5735: StructOrClassRecordType<RecordType<_ast5734>> {}; // Record v8::WasmStreaming::Client
struct _ast5736: NamedDeclName<_str764>, TypeDecl<_ast5735> {}; // CXXRecord Client
struct _ast5737: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5738, Pack<>>>, _ast5739>>> {}; // CXXDestructor ~Client
struct _ast5738: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5739: PointerType<_ast5735> {}; // Pointer v8::WasmStreaming::Client *
struct _ast5740: NamedDeclName<_str765>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5742, Pack<_ast5741>>>, _ast5739>> {}; // CXXMethod OnModuleCompiled
struct _ast5741: NamedDeclName<_str766>, ParmVarDecl<_ast5662> {}; // ParmVar compiled_module
struct _ast5742: FunctionProtoType<_ast122, Pack<_ast5662>, SameType> {}; // FunctionProto void (v8::CompiledWasmModule)
struct _ast5743: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5747, Pack<_ast5744>>>, _ast5739>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5744: NamedDeclAnon<_str64>, ParmVarDecl<_ast5745> {}; // ParmVar 
struct _ast5745: LValueReferenceType<ReferenceType<_ast5746>> {}; // LValueReference const v8::WasmStreaming::Client &
struct _ast5746: ConstQualifiedType<_ast5735> {}; // Record const v8::WasmStreaming::Client
struct _ast5747: FunctionProtoType<_ast5748, Pack<_ast5745>, SameType> {}; // FunctionProto v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
struct _ast5748: LValueReferenceType<ReferenceType<_ast5735>> {}; // LValueReference v8::WasmStreaming::Client &
struct _ast5749: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5752, Pack<_ast5750>>>, _ast5753>> {}; // CXXConstructor WasmStreaming
struct _ast5750: NamedDeclName<_str252>, ParmVarDecl<_ast5751> {}; // ParmVar impl
struct _ast5752: FunctionProtoType<_ast122, Pack<_ast5751>, SameType> {}; // FunctionProto void (std::unique_ptr<WasmStreamingImpl>)
struct _ast5753: PointerType<_ast5730> {}; // Pointer v8::WasmStreaming *
struct _ast5754: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5755, Pack<>>>, _ast5753>> {}; // CXXDestructor ~WasmStreaming
struct _ast5755: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5756: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5759, Pack<_ast5757, _ast5758>>>, _ast5753>, NamedDeclName<_str767> {}; // CXXMethod OnBytesReceived
struct _ast5757: NamedDeclName<_str768>, ParmVarDecl<_ast3478> {}; // ParmVar bytes
struct _ast5758: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast5759: FunctionProtoType<_ast122, Pack<_ast3478, _ast3539>, SameType> {}; // FunctionProto void (const uint8_t *, size_t)
struct _ast5760: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5753>, NamedDeclName<_str769> {}; // CXXMethod Finish
struct _ast5761: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5764, Pack<_ast5762>>>, _ast5753>, NamedDeclName<_str770> {}; // CXXMethod Abort
struct _ast5762: NamedDeclName<_str771>, ParmVarDecl<_ast5763> {}; // ParmVar exception
struct _ast5764: FunctionProtoType<_ast122, Pack<_ast5763>, SameType> {}; // FunctionProto void (MaybeLocal<v8::Value>)
struct _ast5765: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5768, Pack<_ast5766, _ast5767>>>, _ast5753>, NamedDeclName<_str772> {}; // CXXMethod SetCompiledModuleBytes
struct _ast5766: NamedDeclName<_str768>, ParmVarDecl<_ast3478> {}; // ParmVar bytes
struct _ast5767: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast5768: FunctionProtoType<_ast137, Pack<_ast3478, _ast3539>, SameType> {}; // FunctionProto bool (const uint8_t *, size_t)
struct _ast5769: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5772, Pack<_ast5770>>>, _ast5753>, NamedDeclName<_str773> {}; // CXXMethod SetClient
struct _ast5770: NamedDeclName<_str774>, ParmVarDecl<_ast5771> {}; // ParmVar client
struct _ast5772: FunctionProtoType<_ast122, Pack<_ast5771>, SameType> {}; // FunctionProto void (std::shared_ptr<Client>)
struct _ast5773: MethodDecl<FunctionDecl<_ast5777, Pack<_ast5774, _ast5775>>>, NamedDeclName<_str775> {}; // CXXMethod Unpack
struct _ast5774: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5775: NamedDeclName<_str152>, ParmVarDecl<_ast5776> {}; // ParmVar value
struct _ast5777: FunctionProtoType<_ast5778, Pack<_ast198, _ast5776>, SameType> {}; // FunctionProto std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
struct _ast5779: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5783, Pack<_ast5780>>>, _ast5753>> {}; // CXXConstructor WasmStreaming
struct _ast5780: NamedDeclAnon<_str64>, ParmVarDecl<_ast5781> {}; // ParmVar 
struct _ast5781: LValueReferenceType<ReferenceType<_ast5782>> {}; // LValueReference const v8::WasmStreaming &
struct _ast5782: ConstQualifiedType<_ast5730> {}; // Record const v8::WasmStreaming
struct _ast5783: FunctionProtoType<_ast122, Pack<_ast5781>, SameType> {}; // FunctionProto void (const v8::WasmStreaming &)
struct _ast5784: NamedDeclName<_str776>, TypeDecl<_ast5785> {}; // CXXRecord WasmModuleObjectBuilderStreaming
struct _ast5785: StructOrClassRecordType<RecordType<_ast5784>> {}; // Record v8::WasmModuleObjectBuilderStreaming
struct _ast5786: NamedDeclName<_str776>, TypeDecl<_ast5785> {}; // CXXRecord WasmModuleObjectBuilderStreaming
struct _ast5787: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast5788>>>, _ast5789>> {}; // CXXConstructor WasmModuleObjectBuilderStreaming
struct _ast5788: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5789: PointerType<_ast5785> {}; // Pointer v8::WasmModuleObjectBuilderStreaming *
struct _ast5790: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5759, Pack<_ast5791, _ast5792>>>, _ast5789>, NamedDeclName<_str767> {}; // CXXMethod OnBytesReceived
struct _ast5791: NamedDeclAnon<_str64>, ParmVarDecl<_ast3478> {}; // ParmVar 
struct _ast5792: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast5793: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5789>, NamedDeclName<_str769> {}; // CXXMethod Finish
struct _ast5794: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5797, Pack<_ast5795>>>, _ast5789>, NamedDeclName<_str770> {}; // CXXMethod Abort
struct _ast5795: NamedDeclName<_str771>, ParmVarDecl<_ast5796> {}; // ParmVar exception
struct _ast5797: FunctionProtoType<_ast122, Pack<_ast5796>, SameType> {}; // FunctionProto void (MaybeLocal<v8::Value>)
struct _ast5798: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5799, Pack<>>>, _ast5789>, NamedDeclName<_str716> {}; // CXXMethod GetPromise
struct _ast5799: FunctionProtoType<_ast5800, Pack<>, SameType> {}; // FunctionProto Local<v8::Promise> ()
struct _ast5801: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5802, Pack<>>>, _ast5789>> {}; // CXXDestructor ~WasmModuleObjectBuilderStreaming
struct _ast5802: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5803: NamedDeclName<_str777>, TypeDecl<_ast5804> {}; // Enum ArrayBufferCreationMode
struct _ast5804: EnumType<_ast5803, _ast2095> {}; // Enum v8::ArrayBufferCreationMode
struct _ast5805: NamedDeclName<_str487> {}; // EnumConstant kInternalized
struct _ast5806: NamedDeclName<_str778> {}; // EnumConstant kExternalized
struct _ast5807: NamedDeclName<_str7>, TypeDecl<_ast13> {}; // CXXRecord ArrayBuffer
struct _ast5808: NamedDeclName<_str779>, TypeDecl<_ast5809> {}; // CXXRecord Allocator
struct _ast5809: StructOrClassRecordType<RecordType<_ast5808>> {}; // Record v8::ArrayBuffer::Allocator
struct _ast5810: NamedDeclName<_str779>, TypeDecl<_ast5809> {}; // CXXRecord Allocator
struct _ast5811: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5812, Pack<>>>, _ast5813>>> {}; // CXXDestructor ~Allocator
struct _ast5812: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast5813: PointerType<_ast5809> {}; // Pointer v8::ArrayBuffer::Allocator *
struct _ast5814: NamedDeclName<_str780>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5816, Pack<_ast5815>>>, _ast5813>> {}; // CXXMethod Allocate
struct _ast5815: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5816: FunctionProtoType<_ast2460, Pack<_ast3539>, SameType> {}; // FunctionProto void *(size_t)
struct _ast5817: NamedDeclName<_str781>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5816, Pack<_ast5818>>>, _ast5813>> {}; // CXXMethod AllocateUninitialized
struct _ast5818: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5819: NamedDeclName<_str782>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5822, Pack<_ast5820, _ast5821>>>, _ast5813>> {}; // CXXMethod Free
struct _ast5820: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast5821: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5822: FunctionProtoType<_ast122, Pack<_ast2460, _ast3539>, SameType> {}; // FunctionProto void (void *, size_t)
struct _ast5823: NamedDeclName<_str783>, TypeDecl<_ast5824> {}; // Enum AllocationMode
struct _ast5824: EnumType<_ast5823, _ast2095> {}; // Enum v8::ArrayBuffer::Allocator::AllocationMode
struct _ast5825: NamedDeclName<_str486> {}; // EnumConstant kNormal
struct _ast5826: NamedDeclName<_str784> {}; // EnumConstant kReservation
struct _ast5827: MethodDecl<FunctionDecl<_ast5828, Pack<>>>, NamedDeclName<_str785> {}; // CXXMethod NewDefaultAllocator
struct _ast5828: FunctionProtoType<_ast5813, Pack<>, SameType> {}; // FunctionProto v8::ArrayBuffer::Allocator *()
struct _ast5829: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5833, Pack<_ast5830>>>, _ast5813>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast5830: NamedDeclAnon<_str64>, ParmVarDecl<_ast5831> {}; // ParmVar 
struct _ast5831: LValueReferenceType<ReferenceType<_ast5832>> {}; // LValueReference const v8::ArrayBuffer::Allocator &
struct _ast5832: ConstQualifiedType<_ast5809> {}; // Record const v8::ArrayBuffer::Allocator
struct _ast5833: FunctionProtoType<_ast5834, Pack<_ast5831>, SameType> {}; // FunctionProto v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
struct _ast5834: LValueReferenceType<ReferenceType<_ast5809>> {}; // LValueReference v8::ArrayBuffer::Allocator &
struct _ast5835: NamedDeclName<_str786>, TypeDecl<_ast5836> {}; // CXXRecord Contents
struct _ast5836: StructOrClassRecordType<RecordType<_ast5835>> {}; // Record v8::ArrayBuffer::Contents
struct _ast5837: NamedDeclName<_str786>, TypeDecl<_ast5836> {}; // CXXRecord Contents
struct _ast5838: NamedDeclName<_str787>, TypeDecl<_ast5839> {}; // TypeAlias DeleterCallback
struct _ast5839: TypedefType<_ast5838> {}; // Typedef v8::ArrayBuffer::Contents::DeleterCallback
struct _ast5840: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5841>> {}; // CXXConstructor Contents
struct _ast5841: PointerType<_ast5836> {}; // Pointer v8::ArrayBuffer::Contents *
struct _ast5842: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast5844>, NamedDeclName<_str788> {}; // CXXMethod AllocationBase
struct _ast5843: FunctionProtoType<_ast2460, Pack<>, ConstQualifiedType> {}; // FunctionProto void *() const
struct _ast5844: PointerType<_ast5845> {}; // Pointer const v8::ArrayBuffer::Contents *
struct _ast5845: ConstQualifiedType<_ast5836> {}; // Record const v8::ArrayBuffer::Contents
struct _ast5846: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5844>, NamedDeclName<_str789> {}; // CXXMethod AllocationLength
struct _ast5847: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5848, Pack<>>>, _ast5844>, NamedDeclName<_str783> {}; // CXXMethod AllocationMode
struct _ast5848: FunctionProtoType<_ast5849, Pack<>, ConstQualifiedType> {}; // FunctionProto Allocator::AllocationMode () const
struct _ast5850: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast5844>, NamedDeclName<_str3> {}; // CXXMethod Data
struct _ast5851: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5844>, NamedDeclName<_str790> {}; // CXXMethod ByteLength
struct _ast5852: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5853, Pack<>>>, _ast5844>, NamedDeclName<_str791> {}; // CXXMethod Deleter
struct _ast5853: FunctionProtoType<_ast5839, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::ArrayBuffer::Contents::DeleterCallback () const
struct _ast5854: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast5844>, NamedDeclName<_str792> {}; // CXXMethod DeleterData
struct _ast5855: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast5856>, NamedDeclName<_str790> {}; // CXXMethod ByteLength
struct _ast5856: PointerType<_ast5857> {}; // Pointer const v8::ArrayBuffer *
struct _ast5857: ConstQualifiedType<_ast13> {}; // Record const v8::ArrayBuffer
struct _ast5858: MethodDecl<FunctionDecl<_ast5861, Pack<_ast5859, _ast5860>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5859: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5860: NamedDeclName<_str793>, ParmVarDecl<_ast3539> {}; // ParmVar byte_length
struct _ast5861: FunctionProtoType<_ast5862, Pack<_ast198, _ast3539>, SameType> {}; // FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _ast5863: MethodDecl<FunctionDecl<_ast5868, Pack<_ast5864, _ast5865, _ast5866, _ast5867>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5864: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast5865: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast5866: NamedDeclName<_str793>, ParmVarDecl<_ast3539> {}; // ParmVar byte_length
struct _ast5867: NamedDeclName<_str386>, ParmVarDecl<_ast5804> {}; // ParmVar mode
struct _ast5868: FunctionProtoType<_ast5869, Pack<_ast198, _ast2460, _ast3539, _ast5804>, SameType> {}; // FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5870: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5856>, NamedDeclName<_str423> {}; // CXXMethod IsExternal
struct _ast5871: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5856>, NamedDeclName<_str794> {}; // CXXMethod IsDetachable
struct _ast5872: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5856>, NamedDeclName<_str795> {}; // CXXMethod IsNeuterable
struct _ast5873: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5874>, NamedDeclName<_str796> {}; // CXXMethod Detach
struct _ast5874: PointerType<_ast13> {}; // Pointer v8::ArrayBuffer *
struct _ast5875: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast5874>, NamedDeclName<_str797> {}; // CXXMethod Neuter
struct _ast5876: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5877, Pack<>>>, _ast5874>, NamedDeclName<_str798> {}; // CXXMethod Externalize
struct _ast5877: FunctionProtoType<_ast5836, Pack<>, SameType> {}; // FunctionProto v8::ArrayBuffer::Contents ()
struct _ast5878: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5877, Pack<>>>, _ast5874>, NamedDeclName<_str799> {}; // CXXMethod GetContents
struct _ast5879: MethodDecl<FunctionDecl<_ast5881, Pack<_ast5880>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5880: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5881: FunctionProtoType<_ast5874, Pack<_ast4179>, SameType> {}; // FunctionProto v8::ArrayBuffer *(v8::Value *)
struct _ast5882: NamedDeclName<_str800> {}; // Var kInternalFieldCount
struct _ast5883: NamedDeclName<_str728> {}; // Var kEmbedderFieldCount
struct _ast5884: NamedDeclName<_str801>, TypeDecl<_ast5885> {}; // CXXRecord ArrayBufferView
struct _ast5885: StructOrClassRecordType<RecordType<_ast5884>> {}; // Record v8::ArrayBufferView
struct _ast5886: NamedDeclName<_str801>, TypeDecl<_ast5885> {}; // CXXRecord ArrayBufferView
struct _ast5887: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5888, Pack<>>>, _ast5890>, NamedDeclName<_str802> {}; // CXXMethod Buffer
struct _ast5888: FunctionProtoType<_ast5889, Pack<>, SameType> {}; // FunctionProto Local<v8::ArrayBuffer> ()
struct _ast5890: PointerType<_ast5885> {}; // Pointer v8::ArrayBufferView *
struct _ast5891: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast5890>, NamedDeclName<_str803> {}; // CXXMethod ByteOffset
struct _ast5892: FunctionProtoType<_ast3539, Pack<>, SameType> {}; // FunctionProto size_t ()
struct _ast5893: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast5890>, NamedDeclName<_str790> {}; // CXXMethod ByteLength
struct _ast5894: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5897, Pack<_ast5895, _ast5896>>>, _ast5890>, NamedDeclName<_str804> {}; // CXXMethod CopyContents
struct _ast5895: NamedDeclName<_str137>, ParmVarDecl<_ast2460> {}; // ParmVar dest
struct _ast5896: NamedDeclName<_str793>, ParmVarDecl<_ast3539> {}; // ParmVar byte_length
struct _ast5897: FunctionProtoType<_ast3539, Pack<_ast2460, _ast3539>, SameType> {}; // FunctionProto size_t (void *, size_t)
struct _ast5898: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast5899>, NamedDeclName<_str805> {}; // CXXMethod HasBuffer
struct _ast5899: PointerType<_ast5900> {}; // Pointer const v8::ArrayBufferView *
struct _ast5900: ConstQualifiedType<_ast5885> {}; // Record const v8::ArrayBufferView
struct _ast5901: MethodDecl<FunctionDecl<_ast5903, Pack<_ast5902>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5902: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5903: FunctionProtoType<_ast5890, Pack<_ast4179>, SameType> {}; // FunctionProto v8::ArrayBufferView *(v8::Value *)
struct _ast5904: NamedDeclName<_str800> {}; // Var kInternalFieldCount
struct _ast5905: NamedDeclName<_str728> {}; // Var kEmbedderFieldCount
struct _ast5906: NamedDeclName<_str806>, TypeDecl<_ast5907> {}; // CXXRecord TypedArray
struct _ast5907: StructOrClassRecordType<RecordType<_ast5906>> {}; // Record v8::TypedArray
struct _ast5908: NamedDeclName<_str806>, TypeDecl<_ast5907> {}; // CXXRecord TypedArray
struct _ast5909: NamedDeclName<_str488> {}; // Var kMaxLength
struct _ast5910: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast5911>, NamedDeclName<_str160> {}; // CXXMethod Length
struct _ast5911: PointerType<_ast5907> {}; // Pointer v8::TypedArray *
struct _ast5912: MethodDecl<FunctionDecl<_ast5914, Pack<_ast5913>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5913: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5914: FunctionProtoType<_ast5911, Pack<_ast4179>, SameType> {}; // FunctionProto v8::TypedArray *(v8::Value *)
struct _ast5915: NamedDeclName<_str807>, TypeDecl<_ast5916> {}; // CXXRecord Uint8Array
struct _ast5916: StructOrClassRecordType<RecordType<_ast5915>> {}; // Record v8::Uint8Array
struct _ast5917: NamedDeclName<_str807>, TypeDecl<_ast5916> {}; // CXXRecord Uint8Array
struct _ast5918: MethodDecl<FunctionDecl<_ast5923, Pack<_ast5919, _ast5921, _ast5922>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5919: NamedDeclName<_str384>, ParmVarDecl<_ast5920> {}; // ParmVar array_buffer
struct _ast5921: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5922: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5923: FunctionProtoType<_ast5924, Pack<_ast5920, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5925: MethodDecl<FunctionDecl<_ast5930, Pack<_ast5926, _ast5928, _ast5929>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5926: NamedDeclName<_str369>, ParmVarDecl<_ast5927> {}; // ParmVar shared_array_buffer
struct _ast5928: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5929: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5930: FunctionProtoType<_ast5931, Pack<_ast5927, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5932: MethodDecl<FunctionDecl<_ast5934, Pack<_ast5933>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5933: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5934: FunctionProtoType<_ast5935, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Uint8Array *(v8::Value *)
struct _ast5935: PointerType<_ast5916> {}; // Pointer v8::Uint8Array *
struct _ast5936: NamedDeclName<_str809>, TypeDecl<_ast5937> {}; // CXXRecord Uint8ClampedArray
struct _ast5937: StructOrClassRecordType<RecordType<_ast5936>> {}; // Record v8::Uint8ClampedArray
struct _ast5938: NamedDeclName<_str809>, TypeDecl<_ast5937> {}; // CXXRecord Uint8ClampedArray
struct _ast5939: MethodDecl<FunctionDecl<_ast5944, Pack<_ast5940, _ast5942, _ast5943>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5940: NamedDeclName<_str384>, ParmVarDecl<_ast5941> {}; // ParmVar array_buffer
struct _ast5942: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5943: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5944: FunctionProtoType<_ast5945, Pack<_ast5941, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5946: MethodDecl<FunctionDecl<_ast5951, Pack<_ast5947, _ast5949, _ast5950>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5947: NamedDeclName<_str369>, ParmVarDecl<_ast5948> {}; // ParmVar shared_array_buffer
struct _ast5949: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5950: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5951: FunctionProtoType<_ast5952, Pack<_ast5948, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5953: MethodDecl<FunctionDecl<_ast5955, Pack<_ast5954>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5954: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5955: FunctionProtoType<_ast5956, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Uint8ClampedArray *(v8::Value *)
struct _ast5956: PointerType<_ast5937> {}; // Pointer v8::Uint8ClampedArray *
struct _ast5957: NamedDeclName<_str810>, TypeDecl<_ast5958> {}; // CXXRecord Int8Array
struct _ast5958: StructOrClassRecordType<RecordType<_ast5957>> {}; // Record v8::Int8Array
struct _ast5959: NamedDeclName<_str810>, TypeDecl<_ast5958> {}; // CXXRecord Int8Array
struct _ast5960: MethodDecl<FunctionDecl<_ast5965, Pack<_ast5961, _ast5963, _ast5964>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5961: NamedDeclName<_str384>, ParmVarDecl<_ast5962> {}; // ParmVar array_buffer
struct _ast5963: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5964: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5965: FunctionProtoType<_ast5966, Pack<_ast5962, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5967: MethodDecl<FunctionDecl<_ast5972, Pack<_ast5968, _ast5970, _ast5971>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5968: NamedDeclName<_str369>, ParmVarDecl<_ast5969> {}; // ParmVar shared_array_buffer
struct _ast5970: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5971: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5972: FunctionProtoType<_ast5973, Pack<_ast5969, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5974: MethodDecl<FunctionDecl<_ast5976, Pack<_ast5975>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5975: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5976: FunctionProtoType<_ast5977, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Int8Array *(v8::Value *)
struct _ast5977: PointerType<_ast5958> {}; // Pointer v8::Int8Array *
struct _ast5978: NamedDeclName<_str811>, TypeDecl<_ast5979> {}; // CXXRecord Uint16Array
struct _ast5979: StructOrClassRecordType<RecordType<_ast5978>> {}; // Record v8::Uint16Array
struct _ast5980: NamedDeclName<_str811>, TypeDecl<_ast5979> {}; // CXXRecord Uint16Array
struct _ast5981: MethodDecl<FunctionDecl<_ast5986, Pack<_ast5982, _ast5984, _ast5985>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5982: NamedDeclName<_str384>, ParmVarDecl<_ast5983> {}; // ParmVar array_buffer
struct _ast5984: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5985: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5986: FunctionProtoType<_ast5987, Pack<_ast5983, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5988: MethodDecl<FunctionDecl<_ast5993, Pack<_ast5989, _ast5991, _ast5992>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast5989: NamedDeclName<_str369>, ParmVarDecl<_ast5990> {}; // ParmVar shared_array_buffer
struct _ast5991: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast5992: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast5993: FunctionProtoType<_ast5994, Pack<_ast5990, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5995: MethodDecl<FunctionDecl<_ast5997, Pack<_ast5996>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast5996: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast5997: FunctionProtoType<_ast5998, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Uint16Array *(v8::Value *)
struct _ast5998: PointerType<_ast5979> {}; // Pointer v8::Uint16Array *
struct _ast5999: NamedDeclName<_str812>, TypeDecl<_ast6000> {}; // CXXRecord Int16Array
struct _ast6000: StructOrClassRecordType<RecordType<_ast5999>> {}; // Record v8::Int16Array
struct _ast6001: NamedDeclName<_str812>, TypeDecl<_ast6000> {}; // CXXRecord Int16Array
struct _ast6002: MethodDecl<FunctionDecl<_ast6007, Pack<_ast6003, _ast6005, _ast6006>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6003: NamedDeclName<_str384>, ParmVarDecl<_ast6004> {}; // ParmVar array_buffer
struct _ast6005: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6006: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6007: FunctionProtoType<_ast6008, Pack<_ast6004, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6009: MethodDecl<FunctionDecl<_ast6014, Pack<_ast6010, _ast6012, _ast6013>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6010: NamedDeclName<_str369>, ParmVarDecl<_ast6011> {}; // ParmVar shared_array_buffer
struct _ast6012: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6013: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6014: FunctionProtoType<_ast6015, Pack<_ast6011, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6016: MethodDecl<FunctionDecl<_ast6018, Pack<_ast6017>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6017: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6018: FunctionProtoType<_ast6019, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Int16Array *(v8::Value *)
struct _ast6019: PointerType<_ast6000> {}; // Pointer v8::Int16Array *
struct _ast6020: NamedDeclName<_str813>, TypeDecl<_ast6021> {}; // CXXRecord Uint32Array
struct _ast6021: StructOrClassRecordType<RecordType<_ast6020>> {}; // Record v8::Uint32Array
struct _ast6022: NamedDeclName<_str813>, TypeDecl<_ast6021> {}; // CXXRecord Uint32Array
struct _ast6023: MethodDecl<FunctionDecl<_ast6028, Pack<_ast6024, _ast6026, _ast6027>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6024: NamedDeclName<_str384>, ParmVarDecl<_ast6025> {}; // ParmVar array_buffer
struct _ast6026: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6027: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6028: FunctionProtoType<_ast6029, Pack<_ast6025, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6030: MethodDecl<FunctionDecl<_ast6035, Pack<_ast6031, _ast6033, _ast6034>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6031: NamedDeclName<_str369>, ParmVarDecl<_ast6032> {}; // ParmVar shared_array_buffer
struct _ast6033: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6034: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6035: FunctionProtoType<_ast6036, Pack<_ast6032, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6037: MethodDecl<FunctionDecl<_ast6039, Pack<_ast6038>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6038: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6039: FunctionProtoType<_ast6040, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Uint32Array *(v8::Value *)
struct _ast6040: PointerType<_ast6021> {}; // Pointer v8::Uint32Array *
struct _ast6041: NamedDeclName<_str814>, TypeDecl<_ast6042> {}; // CXXRecord Int32Array
struct _ast6042: StructOrClassRecordType<RecordType<_ast6041>> {}; // Record v8::Int32Array
struct _ast6043: NamedDeclName<_str814>, TypeDecl<_ast6042> {}; // CXXRecord Int32Array
struct _ast6044: MethodDecl<FunctionDecl<_ast6049, Pack<_ast6045, _ast6047, _ast6048>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6045: NamedDeclName<_str384>, ParmVarDecl<_ast6046> {}; // ParmVar array_buffer
struct _ast6047: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6048: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6049: FunctionProtoType<_ast6050, Pack<_ast6046, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6051: MethodDecl<FunctionDecl<_ast6056, Pack<_ast6052, _ast6054, _ast6055>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6052: NamedDeclName<_str369>, ParmVarDecl<_ast6053> {}; // ParmVar shared_array_buffer
struct _ast6054: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6055: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6056: FunctionProtoType<_ast6057, Pack<_ast6053, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6058: MethodDecl<FunctionDecl<_ast6060, Pack<_ast6059>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6059: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6060: FunctionProtoType<_ast6061, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Int32Array *(v8::Value *)
struct _ast6061: PointerType<_ast6042> {}; // Pointer v8::Int32Array *
struct _ast6062: NamedDeclName<_str815>, TypeDecl<_ast6063> {}; // CXXRecord Float32Array
struct _ast6063: StructOrClassRecordType<RecordType<_ast6062>> {}; // Record v8::Float32Array
struct _ast6064: NamedDeclName<_str815>, TypeDecl<_ast6063> {}; // CXXRecord Float32Array
struct _ast6065: MethodDecl<FunctionDecl<_ast6070, Pack<_ast6066, _ast6068, _ast6069>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6066: NamedDeclName<_str384>, ParmVarDecl<_ast6067> {}; // ParmVar array_buffer
struct _ast6068: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6069: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6070: FunctionProtoType<_ast6071, Pack<_ast6067, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6072: MethodDecl<FunctionDecl<_ast6077, Pack<_ast6073, _ast6075, _ast6076>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6073: NamedDeclName<_str369>, ParmVarDecl<_ast6074> {}; // ParmVar shared_array_buffer
struct _ast6075: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6076: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6077: FunctionProtoType<_ast6078, Pack<_ast6074, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6079: MethodDecl<FunctionDecl<_ast6081, Pack<_ast6080>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6080: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6081: FunctionProtoType<_ast6082, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Float32Array *(v8::Value *)
struct _ast6082: PointerType<_ast6063> {}; // Pointer v8::Float32Array *
struct _ast6083: NamedDeclName<_str816>, TypeDecl<_ast6084> {}; // CXXRecord Float64Array
struct _ast6084: StructOrClassRecordType<RecordType<_ast6083>> {}; // Record v8::Float64Array
struct _ast6085: NamedDeclName<_str816>, TypeDecl<_ast6084> {}; // CXXRecord Float64Array
struct _ast6086: MethodDecl<FunctionDecl<_ast6091, Pack<_ast6087, _ast6089, _ast6090>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6087: NamedDeclName<_str384>, ParmVarDecl<_ast6088> {}; // ParmVar array_buffer
struct _ast6089: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6090: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6091: FunctionProtoType<_ast6092, Pack<_ast6088, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6093: MethodDecl<FunctionDecl<_ast6098, Pack<_ast6094, _ast6096, _ast6097>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6094: NamedDeclName<_str369>, ParmVarDecl<_ast6095> {}; // ParmVar shared_array_buffer
struct _ast6096: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6097: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6098: FunctionProtoType<_ast6099, Pack<_ast6095, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6100: MethodDecl<FunctionDecl<_ast6102, Pack<_ast6101>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6101: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6102: FunctionProtoType<_ast6103, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Float64Array *(v8::Value *)
struct _ast6103: PointerType<_ast6084> {}; // Pointer v8::Float64Array *
struct _ast6104: NamedDeclName<_str817>, TypeDecl<_ast6105> {}; // CXXRecord BigInt64Array
struct _ast6105: StructOrClassRecordType<RecordType<_ast6104>> {}; // Record v8::BigInt64Array
struct _ast6106: NamedDeclName<_str817>, TypeDecl<_ast6105> {}; // CXXRecord BigInt64Array
struct _ast6107: MethodDecl<FunctionDecl<_ast6112, Pack<_ast6108, _ast6110, _ast6111>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6108: NamedDeclName<_str384>, ParmVarDecl<_ast6109> {}; // ParmVar array_buffer
struct _ast6110: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6111: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6112: FunctionProtoType<_ast6113, Pack<_ast6109, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6114: MethodDecl<FunctionDecl<_ast6119, Pack<_ast6115, _ast6117, _ast6118>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6115: NamedDeclName<_str369>, ParmVarDecl<_ast6116> {}; // ParmVar shared_array_buffer
struct _ast6117: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6118: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6119: FunctionProtoType<_ast6120, Pack<_ast6116, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6121: MethodDecl<FunctionDecl<_ast6123, Pack<_ast6122>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6122: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6123: FunctionProtoType<_ast6124, Pack<_ast4179>, SameType> {}; // FunctionProto v8::BigInt64Array *(v8::Value *)
struct _ast6124: PointerType<_ast6105> {}; // Pointer v8::BigInt64Array *
struct _ast6125: NamedDeclName<_str818>, TypeDecl<_ast6126> {}; // CXXRecord BigUint64Array
struct _ast6126: StructOrClassRecordType<RecordType<_ast6125>> {}; // Record v8::BigUint64Array
struct _ast6127: NamedDeclName<_str818>, TypeDecl<_ast6126> {}; // CXXRecord BigUint64Array
struct _ast6128: MethodDecl<FunctionDecl<_ast6133, Pack<_ast6129, _ast6131, _ast6132>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6129: NamedDeclName<_str384>, ParmVarDecl<_ast6130> {}; // ParmVar array_buffer
struct _ast6131: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6132: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6133: FunctionProtoType<_ast6134, Pack<_ast6130, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6135: MethodDecl<FunctionDecl<_ast6140, Pack<_ast6136, _ast6138, _ast6139>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6136: NamedDeclName<_str369>, ParmVarDecl<_ast6137> {}; // ParmVar shared_array_buffer
struct _ast6138: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6139: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6140: FunctionProtoType<_ast6141, Pack<_ast6137, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6142: MethodDecl<FunctionDecl<_ast6144, Pack<_ast6143>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6143: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6144: FunctionProtoType<_ast6145, Pack<_ast4179>, SameType> {}; // FunctionProto v8::BigUint64Array *(v8::Value *)
struct _ast6145: PointerType<_ast6126> {}; // Pointer v8::BigUint64Array *
struct _ast6146: NamedDeclName<_str819>, TypeDecl<_ast6147> {}; // CXXRecord DataView
struct _ast6147: StructOrClassRecordType<RecordType<_ast6146>> {}; // Record v8::DataView
struct _ast6148: NamedDeclName<_str819>, TypeDecl<_ast6147> {}; // CXXRecord DataView
struct _ast6149: MethodDecl<FunctionDecl<_ast6154, Pack<_ast6150, _ast6152, _ast6153>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6150: NamedDeclName<_str384>, ParmVarDecl<_ast6151> {}; // ParmVar array_buffer
struct _ast6152: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6153: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6154: FunctionProtoType<_ast6155, Pack<_ast6151, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast6156: MethodDecl<FunctionDecl<_ast6161, Pack<_ast6157, _ast6159, _ast6160>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6157: NamedDeclName<_str369>, ParmVarDecl<_ast6158> {}; // ParmVar shared_array_buffer
struct _ast6159: NamedDeclName<_str808>, ParmVarDecl<_ast3539> {}; // ParmVar byte_offset
struct _ast6160: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast6161: FunctionProtoType<_ast6162, Pack<_ast6158, _ast3539, _ast3539>, SameType> {}; // FunctionProto Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast6163: MethodDecl<FunctionDecl<_ast6165, Pack<_ast6164>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6164: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6165: FunctionProtoType<_ast6166, Pack<_ast4179>, SameType> {}; // FunctionProto v8::DataView *(v8::Value *)
struct _ast6166: PointerType<_ast6147> {}; // Pointer v8::DataView *
struct _ast6167: NamedDeclName<_str36>, TypeDecl<_ast84> {}; // CXXRecord SharedArrayBuffer
struct _ast6168: NamedDeclName<_str786>, TypeDecl<_ast6169> {}; // CXXRecord Contents
struct _ast6169: StructOrClassRecordType<RecordType<_ast6168>> {}; // Record v8::SharedArrayBuffer::Contents
struct _ast6170: NamedDeclName<_str786>, TypeDecl<_ast6169> {}; // CXXRecord Contents
struct _ast6171: NamedDeclName<_str779>, TypeDecl<_ast6172> {}; // TypeAlias Allocator
struct _ast6172: TypedefType<_ast6171> {}; // Typedef v8::SharedArrayBuffer::Contents::Allocator
struct _ast6173: NamedDeclName<_str787>, TypeDecl<_ast6174> {}; // TypeAlias DeleterCallback
struct _ast6174: TypedefType<_ast6173> {}; // Typedef v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ast6175: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast6176>> {}; // CXXConstructor Contents
struct _ast6176: PointerType<_ast6169> {}; // Pointer v8::SharedArrayBuffer::Contents *
struct _ast6177: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast6178>, NamedDeclName<_str788> {}; // CXXMethod AllocationBase
struct _ast6178: PointerType<_ast6179> {}; // Pointer const v8::SharedArrayBuffer::Contents *
struct _ast6179: ConstQualifiedType<_ast6169> {}; // Record const v8::SharedArrayBuffer::Contents
struct _ast6180: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6178>, NamedDeclName<_str789> {}; // CXXMethod AllocationLength
struct _ast6181: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6182, Pack<>>>, _ast6178>, NamedDeclName<_str783> {}; // CXXMethod AllocationMode
struct _ast6182: FunctionProtoType<_ast6183, Pack<>, ConstQualifiedType> {}; // FunctionProto Allocator::AllocationMode () const
struct _ast6184: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast6178>, NamedDeclName<_str3> {}; // CXXMethod Data
struct _ast6185: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6178>, NamedDeclName<_str790> {}; // CXXMethod ByteLength
struct _ast6186: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6187, Pack<>>>, _ast6178>, NamedDeclName<_str791> {}; // CXXMethod Deleter
struct _ast6187: FunctionProtoType<_ast6174, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _ast6188: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast6178>, NamedDeclName<_str792> {}; // CXXMethod DeleterData
struct _ast6189: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6190>, NamedDeclName<_str790> {}; // CXXMethod ByteLength
struct _ast6190: PointerType<_ast6191> {}; // Pointer const v8::SharedArrayBuffer *
struct _ast6191: ConstQualifiedType<_ast84> {}; // Record const v8::SharedArrayBuffer
struct _ast6192: MethodDecl<FunctionDecl<_ast6195, Pack<_ast6193, _ast6194>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6193: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6194: NamedDeclName<_str793>, ParmVarDecl<_ast3539> {}; // ParmVar byte_length
struct _ast6195: FunctionProtoType<_ast6196, Pack<_ast198, _ast3539>, SameType> {}; // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _ast6197: MethodDecl<FunctionDecl<_ast6202, Pack<_ast6198, _ast6199, _ast6200, _ast6201>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6198: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6199: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast6200: NamedDeclName<_str793>, ParmVarDecl<_ast3539> {}; // ParmVar byte_length
struct _ast6201: NamedDeclName<_str386>, ParmVarDecl<_ast5804> {}; // ParmVar mode
struct _ast6202: FunctionProtoType<_ast6203, Pack<_ast198, _ast2460, _ast3539, _ast5804>, SameType> {}; // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast6204: MethodDecl<FunctionDecl<_ast6211, Pack<_ast6205, _ast6206, _ast6210>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6205: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6206: NamedDeclAnon<_str64>, ParmVarDecl<_ast6207> {}; // ParmVar 
struct _ast6207: LValueReferenceType<ReferenceType<_ast6208>> {}; // LValueReference const SharedArrayBuffer::Contents &
struct _ast6208: ConstQualifiedType<_ast6209> {}; // Elaborated const SharedArrayBuffer::Contents
struct _ast6210: NamedDeclName<_str386>, ParmVarDecl<_ast5804> {}; // ParmVar mode
struct _ast6211: FunctionProtoType<_ast6212, Pack<_ast198, _ast6207, _ast5804>, SameType> {}; // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _ast6213: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast6190>, NamedDeclName<_str423> {}; // CXXMethod IsExternal
struct _ast6214: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6215, Pack<>>>, _ast6216>, NamedDeclName<_str798> {}; // CXXMethod Externalize
struct _ast6215: FunctionProtoType<_ast6169, Pack<>, SameType> {}; // FunctionProto v8::SharedArrayBuffer::Contents ()
struct _ast6216: PointerType<_ast84> {}; // Pointer v8::SharedArrayBuffer *
struct _ast6217: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6215, Pack<>>>, _ast6216>, NamedDeclName<_str799> {}; // CXXMethod GetContents
struct _ast6218: MethodDecl<FunctionDecl<_ast6220, Pack<_ast6219>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6219: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6220: FunctionProtoType<_ast6216, Pack<_ast4179>, SameType> {}; // FunctionProto v8::SharedArrayBuffer *(v8::Value *)
struct _ast6221: NamedDeclName<_str800> {}; // Var kInternalFieldCount
struct _ast6222: NamedDeclName<_str12>, TypeDecl<_ast23> {}; // CXXRecord Date
struct _ast6223: MethodDecl<FunctionDecl<_ast6227, Pack<_ast6224, _ast6226>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6224: NamedDeclName<_str220>, ParmVarDecl<_ast6225> {}; // ParmVar context
struct _ast6226: NamedDeclName<_str820>, ParmVarDecl<_ast3918> {}; // ParmVar time
struct _ast6227: FunctionProtoType<_ast6228, Pack<_ast6225, _ast3918>, SameType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _ast6229: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4538, Pack<>>>, _ast6230>, NamedDeclName<_str821> {}; // CXXMethod ValueOf
struct _ast6230: PointerType<_ast6231> {}; // Pointer const v8::Date *
struct _ast6231: ConstQualifiedType<_ast23> {}; // Record const v8::Date
struct _ast6232: MethodDecl<FunctionDecl<_ast6234, Pack<_ast6233>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6233: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6234: FunctionProtoType<_ast6235, Pack<_ast4179>, SameType> {}; // FunctionProto v8::Date *(v8::Value *)
struct _ast6235: PointerType<_ast23> {}; // Pointer v8::Date *
struct _ast6236: NamedDeclName<_str25>, TypeDecl<_ast62> {}; // CXXRecord NumberObject
struct _ast6237: MethodDecl<FunctionDecl<_ast6240, Pack<_ast6238, _ast6239>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6238: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6239: NamedDeclName<_str152>, ParmVarDecl<_ast3918> {}; // ParmVar value
struct _ast6240: FunctionProtoType<_ast6241, Pack<_ast198, _ast3918>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, double)
struct _ast6242: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4538, Pack<>>>, _ast6243>, NamedDeclName<_str821> {}; // CXXMethod ValueOf
struct _ast6243: PointerType<_ast6244> {}; // Pointer const v8::NumberObject *
struct _ast6244: ConstQualifiedType<_ast62> {}; // Record const v8::NumberObject
struct _ast6245: MethodDecl<FunctionDecl<_ast6247, Pack<_ast6246>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6246: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6247: FunctionProtoType<_ast6248, Pack<_ast4179>, SameType> {}; // FunctionProto v8::NumberObject *(v8::Value *)
struct _ast6248: PointerType<_ast62> {}; // Pointer v8::NumberObject *
struct _ast6249: NamedDeclName<_str9>, TypeDecl<_ast17> {}; // CXXRecord BigIntObject
struct _ast6250: MethodDecl<FunctionDecl<_ast6253, Pack<_ast6251, _ast6252>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6251: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6252: NamedDeclName<_str152>, ParmVarDecl<_ast4564> {}; // ParmVar value
struct _ast6253: FunctionProtoType<_ast6254, Pack<_ast198, _ast4564>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, int64_t)
struct _ast6255: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6256, Pack<>>>, _ast6258>, NamedDeclName<_str821> {}; // CXXMethod ValueOf
struct _ast6256: FunctionProtoType<_ast6257, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::BigInt> () const
struct _ast6258: PointerType<_ast6259> {}; // Pointer const v8::BigIntObject *
struct _ast6259: ConstQualifiedType<_ast17> {}; // Record const v8::BigIntObject
struct _ast6260: MethodDecl<FunctionDecl<_ast6262, Pack<_ast6261>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6261: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6262: FunctionProtoType<_ast6263, Pack<_ast4179>, SameType> {}; // FunctionProto v8::BigIntObject *(v8::Value *)
struct _ast6263: PointerType<_ast17> {}; // Pointer v8::BigIntObject *
struct _ast6264: NamedDeclName<_str11>, TypeDecl<_ast21> {}; // CXXRecord BooleanObject
struct _ast6265: MethodDecl<FunctionDecl<_ast6268, Pack<_ast6266, _ast6267>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6266: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6267: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast6268: FunctionProtoType<_ast6269, Pack<_ast198, _ast137>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, bool)
struct _ast6270: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast6271>, NamedDeclName<_str821> {}; // CXXMethod ValueOf
struct _ast6271: PointerType<_ast6272> {}; // Pointer const v8::BooleanObject *
struct _ast6272: ConstQualifiedType<_ast21> {}; // Record const v8::BooleanObject
struct _ast6273: MethodDecl<FunctionDecl<_ast6275, Pack<_ast6274>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6274: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6275: FunctionProtoType<_ast6276, Pack<_ast4179>, SameType> {}; // FunctionProto v8::BooleanObject *(v8::Value *)
struct _ast6276: PointerType<_ast21> {}; // Pointer v8::BooleanObject *
struct _ast6277: NamedDeclName<_str42>, TypeDecl<_ast96> {}; // CXXRecord StringObject
struct _ast6278: MethodDecl<FunctionDecl<_ast6282, Pack<_ast6279, _ast6280>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6279: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6280: NamedDeclName<_str152>, ParmVarDecl<_ast6281> {}; // ParmVar value
struct _ast6282: FunctionProtoType<_ast6283, Pack<_ast198, _ast6281>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _ast6284: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6285, Pack<>>>, _ast6287>, NamedDeclName<_str821> {}; // CXXMethod ValueOf
struct _ast6285: FunctionProtoType<_ast6286, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> () const
struct _ast6287: PointerType<_ast6288> {}; // Pointer const v8::StringObject *
struct _ast6288: ConstQualifiedType<_ast96> {}; // Record const v8::StringObject
struct _ast6289: MethodDecl<FunctionDecl<_ast6291, Pack<_ast6290>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6290: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6291: FunctionProtoType<_ast6292, Pack<_ast4179>, SameType> {}; // FunctionProto v8::StringObject *(v8::Value *)
struct _ast6292: PointerType<_ast96> {}; // Pointer v8::StringObject *
struct _ast6293: NamedDeclName<_str44>, TypeDecl<_ast100> {}; // CXXRecord SymbolObject
struct _ast6294: MethodDecl<FunctionDecl<_ast6298, Pack<_ast6295, _ast6296>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6295: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6296: NamedDeclName<_str152>, ParmVarDecl<_ast6297> {}; // ParmVar value
struct _ast6298: FunctionProtoType<_ast6299, Pack<_ast198, _ast6297>, SameType> {}; // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _ast6300: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6301, Pack<>>>, _ast6303>, NamedDeclName<_str821> {}; // CXXMethod ValueOf
struct _ast6301: FunctionProtoType<_ast6302, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Symbol> () const
struct _ast6303: PointerType<_ast6304> {}; // Pointer const v8::SymbolObject *
struct _ast6304: ConstQualifiedType<_ast100> {}; // Record const v8::SymbolObject
struct _ast6305: MethodDecl<FunctionDecl<_ast6307, Pack<_ast6306>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6306: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6307: FunctionProtoType<_ast6308, Pack<_ast4179>, SameType> {}; // FunctionProto v8::SymbolObject *(v8::Value *)
struct _ast6308: PointerType<_ast100> {}; // Pointer v8::SymbolObject *
struct _ast6309: NamedDeclName<_str822>, TypeDecl<_ast6310> {}; // CXXRecord RegExp
struct _ast6310: StructOrClassRecordType<RecordType<_ast6309>> {}; // Record v8::RegExp
struct _ast6311: NamedDeclName<_str822>, TypeDecl<_ast6310> {}; // CXXRecord RegExp
struct _ast6312: NamedDeclName<_str172>, TypeDecl<_ast6313> {}; // Enum Flags
struct _ast6313: EnumType<_ast6312, _ast2095> {}; // Enum v8::RegExp::Flags
struct _ast6314: NamedDeclName<_str823> {}; // EnumConstant kNone
struct _ast6315: NamedDeclName<_str824> {}; // EnumConstant kGlobal
struct _ast6316: NamedDeclName<_str825> {}; // EnumConstant kIgnoreCase
struct _ast6317: NamedDeclName<_str826> {}; // EnumConstant kMultiline
struct _ast6318: NamedDeclName<_str827> {}; // EnumConstant kSticky
struct _ast6319: NamedDeclName<_str828> {}; // EnumConstant kUnicode
struct _ast6320: NamedDeclName<_str829> {}; // EnumConstant kDotAll
struct _ast6321: MethodDecl<FunctionDecl<_ast6327, Pack<_ast6322, _ast6324, _ast6326>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6322: NamedDeclName<_str220>, ParmVarDecl<_ast6323> {}; // ParmVar context
struct _ast6324: NamedDeclName<_str830>, ParmVarDecl<_ast6325> {}; // ParmVar pattern
struct _ast6326: NamedDeclName<_str167>, ParmVarDecl<_ast6313> {}; // ParmVar flags
struct _ast6327: FunctionProtoType<_ast6328, Pack<_ast6323, _ast6325, _ast6313>, SameType> {}; // FunctionProto MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _ast6329: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6330, Pack<>>>, _ast6332>, NamedDeclName<_str831> {}; // CXXMethod GetSource
struct _ast6330: FunctionProtoType<_ast6331, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::String> () const
struct _ast6332: PointerType<_ast6333> {}; // Pointer const v8::RegExp *
struct _ast6333: ConstQualifiedType<_ast6310> {}; // Record const v8::RegExp
struct _ast6334: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6335, Pack<>>>, _ast6332>, NamedDeclName<_str832> {}; // CXXMethod GetFlags
struct _ast6335: FunctionProtoType<_ast6313, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::RegExp::Flags () const
struct _ast6336: MethodDecl<FunctionDecl<_ast6338, Pack<_ast6337>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6337: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6338: FunctionProtoType<_ast6339, Pack<_ast4179>, SameType> {}; // FunctionProto v8::RegExp *(v8::Value *)
struct _ast6339: PointerType<_ast6310> {}; // Pointer v8::RegExp *
struct _ast6340: NamedDeclName<_str13>, TypeDecl<_ast25> {}; // CXXRecord External
struct _ast6341: MethodDecl<FunctionDecl<_ast6344, Pack<_ast6342, _ast6343>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6342: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6343: NamedDeclName<_str152>, ParmVarDecl<_ast2460> {}; // ParmVar value
struct _ast6344: FunctionProtoType<_ast6345, Pack<_ast198, _ast2460>, SameType> {}; // FunctionProto Local<v8::External> (v8::Isolate *, void *)
struct _ast6346: MethodDecl<FunctionDecl<_ast6348, Pack<_ast6347>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6347: NamedDeclName<_str484>, ParmVarDecl<_ast4179> {}; // ParmVar obj
struct _ast6348: FunctionProtoType<_ast6349, Pack<_ast4179>, SameType> {}; // FunctionProto v8::External *(v8::Value *)
struct _ast6349: PointerType<_ast25> {}; // Pointer v8::External *
struct _ast6350: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5843, Pack<>>>, _ast6351>, NamedDeclName<_str49> {}; // CXXMethod Value
struct _ast6351: PointerType<_ast6352> {}; // Pointer const v8::External *
struct _ast6352: ConstQualifiedType<_ast25> {}; // Record const v8::External
struct _ast6353: NamedDeclName<_str833>, TypeDecl<_ast6354> {}; // Enum Intrinsic
struct _ast6354: EnumType<_ast6353, _ast2095> {}; // Enum v8::Intrinsic
struct _ast6355: NamedDeclName<_str834> {}; // EnumConstant kArrayProto_entries
struct _ast6356: NamedDeclName<_str835> {}; // EnumConstant kArrayProto_forEach
struct _ast6357: NamedDeclName<_str836> {}; // EnumConstant kArrayProto_keys
struct _ast6358: NamedDeclName<_str837> {}; // EnumConstant kArrayProto_values
struct _ast6359: NamedDeclName<_str838> {}; // EnumConstant kErrorPrototype
struct _ast6360: NamedDeclName<_str839> {}; // EnumConstant kIteratorPrototype
struct _ast6361: NamedDeclName<_str840>, TypeDecl<_ast6362> {}; // CXXRecord Template
struct _ast6362: StructOrClassRecordType<RecordType<_ast6361>> {}; // Record v8::Template
struct _ast6363: NamedDeclName<_str840>, TypeDecl<_ast6362> {}; // CXXRecord Template
struct _ast6364: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6370, Pack<_ast6365, _ast6367, _ast6369>>>, _ast6371>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast6365: NamedDeclName<_str531>, ParmVarDecl<_ast6366> {}; // ParmVar name
struct _ast6367: NamedDeclName<_str152>, ParmVarDecl<_ast6368> {}; // ParmVar value
struct _ast6369: NamedDeclName<_str595>, ParmVarDecl<_ast4629> {}; // ParmVar attributes
struct _ast6370: FunctionProtoType<_ast122, Pack<_ast6366, _ast6368, _ast4629>, SameType> {}; // FunctionProto void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6371: PointerType<_ast6362> {}; // Pointer v8::Template *
struct _ast6372: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6378, Pack<_ast6373, _ast6375, _ast6377>>>, _ast6371>, NamedDeclName<_str613> {}; // CXXMethod SetPrivate
struct _ast6373: NamedDeclName<_str531>, ParmVarDecl<_ast6374> {}; // ParmVar name
struct _ast6375: NamedDeclName<_str152>, ParmVarDecl<_ast6376> {}; // ParmVar value
struct _ast6377: NamedDeclName<_str595>, ParmVarDecl<_ast4629> {}; // ParmVar attributes
struct _ast6378: FunctionProtoType<_ast122, Pack<_ast6374, _ast6376, _ast4629>, SameType> {}; // FunctionProto void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6379: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6384, Pack<_ast6380, _ast6381, _ast6382>>>, _ast6371>, NamedDeclName<_str118> {}; // CXXMethod Set
struct _ast6380: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6381: NamedDeclName<_str531>, ParmVarDecl<_ast2108> {}; // ParmVar name
struct _ast6382: NamedDeclName<_str152>, ParmVarDecl<_ast6383> {}; // ParmVar value
struct _ast6384: FunctionProtoType<_ast122, Pack<_ast198, _ast2108, _ast6383>, SameType> {}; // FunctionProto void (v8::Isolate *, const char *, Local<v8::Data>)
struct _ast6385: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6394, Pack<_ast6386, _ast6388, _ast6390, _ast6392, _ast6393>>>, _ast6371>, NamedDeclName<_str609> {}; // CXXMethod SetAccessorProperty
struct _ast6386: NamedDeclName<_str531>, ParmVarDecl<_ast6387> {}; // ParmVar name
struct _ast6388: NamedDeclName<_str603>, ParmVarDecl<_ast6389> {}; // ParmVar getter
struct _ast6390: NamedDeclName<_str604>, ParmVarDecl<_ast6391> {}; // ParmVar setter
struct _ast6392: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6393: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast6394: FunctionProtoType<_ast122, Pack<_ast6387, _ast6389, _ast6391, _ast4629, _ast4643>, SameType> {}; // FunctionProto void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _ast6395: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6408, Pack<_ast6396, _ast6398, _ast6399, _ast6400, _ast6402, _ast6403, _ast6405, _ast6406, _ast6407>>>, _ast6371>, NamedDeclName<_str610> {}; // CXXMethod SetNativeDataProperty
struct _ast6396: NamedDeclName<_str531>, ParmVarDecl<_ast6397> {}; // ParmVar name
struct _ast6398: NamedDeclName<_str603>, ParmVarDecl<_ast4635> {}; // ParmVar getter
struct _ast6399: NamedDeclName<_str604>, ParmVarDecl<_ast4639> {}; // ParmVar setter
struct _ast6400: NamedDeclName<_str129>, ParmVarDecl<_ast6401> {}; // ParmVar data
struct _ast6402: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6403: NamedDeclName<_str841>, ParmVarDecl<_ast6404> {}; // ParmVar signature
struct _ast6405: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast6406: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast6407: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast6408: FunctionProtoType<_ast122, Pack<_ast6397, _ast4635, _ast4639, _ast6401, _ast4629, _ast6404, _ast4643, _ast4657, _ast4657>, SameType> {}; // FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6409: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6422, Pack<_ast6410, _ast6412, _ast6413, _ast6414, _ast6416, _ast6417, _ast6419, _ast6420, _ast6421>>>, _ast6371>, NamedDeclName<_str610> {}; // CXXMethod SetNativeDataProperty
struct _ast6410: NamedDeclName<_str531>, ParmVarDecl<_ast6411> {}; // ParmVar name
struct _ast6412: NamedDeclName<_str603>, ParmVarDecl<_ast4637> {}; // ParmVar getter
struct _ast6413: NamedDeclName<_str604>, ParmVarDecl<_ast4641> {}; // ParmVar setter
struct _ast6414: NamedDeclName<_str129>, ParmVarDecl<_ast6415> {}; // ParmVar data
struct _ast6416: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6417: NamedDeclName<_str841>, ParmVarDecl<_ast6418> {}; // ParmVar signature
struct _ast6419: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast6420: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast6421: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast6422: FunctionProtoType<_ast122, Pack<_ast6411, _ast4637, _ast4641, _ast6415, _ast4629, _ast6418, _ast4643, _ast4657, _ast4657>, SameType> {}; // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6423: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6432, Pack<_ast6424, _ast6426, _ast6427, _ast6429, _ast6430, _ast6431>>>, _ast6371>, NamedDeclName<_str611> {}; // CXXMethod SetLazyDataProperty
struct _ast6424: NamedDeclName<_str531>, ParmVarDecl<_ast6425> {}; // ParmVar name
struct _ast6426: NamedDeclName<_str603>, ParmVarDecl<_ast4637> {}; // ParmVar getter
struct _ast6427: NamedDeclName<_str129>, ParmVarDecl<_ast6428> {}; // ParmVar data
struct _ast6429: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6430: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast6431: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast6432: FunctionProtoType<_ast122, Pack<_ast6425, _ast4637, _ast6428, _ast4629, _ast4657, _ast4657>, SameType> {}; // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast6433: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6438, Pack<_ast6434, _ast6436, _ast6437>>>, _ast6371>, NamedDeclName<_str842> {}; // CXXMethod SetIntrinsicDataProperty
struct _ast6434: NamedDeclName<_str531>, ParmVarDecl<_ast6435> {}; // ParmVar name
struct _ast6436: NamedDeclName<_str843>, ParmVarDecl<_ast6354> {}; // ParmVar intrinsic
struct _ast6437: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6438: FunctionProtoType<_ast122, Pack<_ast6435, _ast6354, _ast4629>, SameType> {}; // FunctionProto void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
struct _ast6439: NamedDeclName<_str844>, TypeDecl<_ast6440> {}; // Typedef GenericNamedPropertyGetterCallback
struct _ast6440: TypedefType<_ast6439> {}; // Typedef v8::GenericNamedPropertyGetterCallback
struct _ast6441: NamedDeclName<_str845>, TypeDecl<_ast6442> {}; // Typedef GenericNamedPropertySetterCallback
struct _ast6442: TypedefType<_ast6441> {}; // Typedef v8::GenericNamedPropertySetterCallback
struct _ast6443: NamedDeclName<_str846>, TypeDecl<_ast6444> {}; // Typedef GenericNamedPropertyQueryCallback
struct _ast6444: TypedefType<_ast6443> {}; // Typedef v8::GenericNamedPropertyQueryCallback
struct _ast6445: NamedDeclName<_str847>, TypeDecl<_ast6446> {}; // Typedef GenericNamedPropertyDeleterCallback
struct _ast6446: TypedefType<_ast6445> {}; // Typedef v8::GenericNamedPropertyDeleterCallback
struct _ast6447: NamedDeclName<_str848>, TypeDecl<_ast6448> {}; // Typedef GenericNamedPropertyEnumeratorCallback
struct _ast6448: TypedefType<_ast6447> {}; // Typedef v8::GenericNamedPropertyEnumeratorCallback
struct _ast6449: NamedDeclName<_str849>, TypeDecl<_ast6450> {}; // Typedef GenericNamedPropertyDefinerCallback
struct _ast6450: TypedefType<_ast6449> {}; // Typedef v8::GenericNamedPropertyDefinerCallback
struct _ast6451: NamedDeclName<_str850>, TypeDecl<_ast6452> {}; // Typedef GenericNamedPropertyDescriptorCallback
struct _ast6452: TypedefType<_ast6451> {}; // Typedef v8::GenericNamedPropertyDescriptorCallback
struct _ast6453: NamedDeclName<_str851>, TypeDecl<_ast6454> {}; // Typedef IndexedPropertyGetterCallback
struct _ast6454: TypedefType<_ast6453> {}; // Typedef v8::IndexedPropertyGetterCallback
struct _ast6455: NamedDeclName<_str852>, TypeDecl<_ast6456> {}; // Typedef IndexedPropertySetterCallback
struct _ast6456: TypedefType<_ast6455> {}; // Typedef v8::IndexedPropertySetterCallback
struct _ast6457: NamedDeclName<_str853>, TypeDecl<_ast6458> {}; // Typedef IndexedPropertyQueryCallback
struct _ast6458: TypedefType<_ast6457> {}; // Typedef v8::IndexedPropertyQueryCallback
struct _ast6459: NamedDeclName<_str854>, TypeDecl<_ast6460> {}; // Typedef IndexedPropertyDeleterCallback
struct _ast6460: TypedefType<_ast6459> {}; // Typedef v8::IndexedPropertyDeleterCallback
struct _ast6461: NamedDeclName<_str855>, TypeDecl<_ast6462> {}; // Typedef IndexedPropertyEnumeratorCallback
struct _ast6462: TypedefType<_ast6461> {}; // Typedef v8::IndexedPropertyEnumeratorCallback
struct _ast6463: NamedDeclName<_str856>, TypeDecl<_ast6464> {}; // Typedef IndexedPropertyDefinerCallback
struct _ast6464: TypedefType<_ast6463> {}; // Typedef v8::IndexedPropertyDefinerCallback
struct _ast6465: NamedDeclName<_str857>, TypeDecl<_ast6466> {}; // Typedef IndexedPropertyDescriptorCallback
struct _ast6466: TypedefType<_ast6465> {}; // Typedef v8::IndexedPropertyDescriptorCallback
struct _ast6467: NamedDeclName<_str858>, TypeDecl<_ast6468> {}; // Enum AccessType
struct _ast6468: EnumType<_ast6467, _ast2095> {}; // Enum v8::AccessType
struct _ast6469: NamedDeclName<_str859> {}; // EnumConstant ACCESS_GET
struct _ast6470: NamedDeclName<_str860> {}; // EnumConstant ACCESS_SET
struct _ast6471: NamedDeclName<_str861> {}; // EnumConstant ACCESS_HAS
struct _ast6472: NamedDeclName<_str862> {}; // EnumConstant ACCESS_DELETE
struct _ast6473: NamedDeclName<_str863> {}; // EnumConstant ACCESS_KEYS
struct _ast6474: NamedDeclName<_str864>, TypeDecl<_ast6475> {}; // Typedef AccessCheckCallback
struct _ast6475: TypedefType<_ast6474> {}; // Typedef v8::AccessCheckCallback
struct _ast6476: NamedDeclName<_str15>, TypeDecl<_ast29> {}; // CXXRecord FunctionTemplate
struct _ast6477: MethodDecl<FunctionDecl<_ast6487, Pack<_ast6478, _ast6479, _ast6480, _ast6482, _ast6484, _ast6485, _ast6486>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6478: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6479: NamedDeclName<_str82>, ParmVarDecl<_ast5363> {}; // ParmVar callback
struct _ast6480: NamedDeclName<_str129>, ParmVarDecl<_ast6481> {}; // ParmVar data
struct _ast6482: NamedDeclName<_str841>, ParmVarDecl<_ast6483> {}; // ParmVar signature
struct _ast6484: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast6485: NamedDeclName<_str696>, ParmVarDecl<_ast5365> {}; // ParmVar behavior
struct _ast6486: NamedDeclName<_str697>, ParmVarDecl<_ast4657> {}; // ParmVar side_effect_type
struct _ast6487: FunctionProtoType<_ast6488, Pack<_ast198, _ast5363, _ast6481, _ast6483, _ast2095, _ast5365, _ast4657>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast6489: MethodDecl<FunctionDecl<_ast6492, Pack<_ast6490, _ast6491>>>, NamedDeclName<_str865> {}; // CXXMethod FromSnapshot
struct _ast6490: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6491: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast6492: FunctionProtoType<_ast6493, Pack<_ast198, _ast3539>, SameType> {}; // FunctionProto MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _ast6494: MethodDecl<FunctionDecl<_ast6505, Pack<_ast6495, _ast6496, _ast6497, _ast6499, _ast6501, _ast6503, _ast6504>>>, NamedDeclName<_str866> {}; // CXXMethod NewWithCache
struct _ast6495: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6496: NamedDeclName<_str82>, ParmVarDecl<_ast5363> {}; // ParmVar callback
struct _ast6497: NamedDeclName<_str867>, ParmVarDecl<_ast6498> {}; // ParmVar cache_property
struct _ast6499: NamedDeclName<_str129>, ParmVarDecl<_ast6500> {}; // ParmVar data
struct _ast6501: NamedDeclName<_str841>, ParmVarDecl<_ast6502> {}; // ParmVar signature
struct _ast6503: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast6504: NamedDeclName<_str697>, ParmVarDecl<_ast4657> {}; // ParmVar side_effect_type
struct _ast6505: FunctionProtoType<_ast6506, Pack<_ast198, _ast5363, _ast6498, _ast6500, _ast6502, _ast2095, _ast4657>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
struct _ast6507: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6510, Pack<_ast6508>>>, _ast6512>, NamedDeclName<_str868> {}; // CXXMethod GetFunction
struct _ast6508: NamedDeclName<_str220>, ParmVarDecl<_ast6509> {}; // ParmVar context
struct _ast6510: FunctionProtoType<_ast6511, Pack<_ast6509>, SameType> {}; // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>)
struct _ast6512: PointerType<_ast29> {}; // Pointer v8::FunctionTemplate *
struct _ast6513: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6514, Pack<>>>, _ast6512>, NamedDeclName<_str869> {}; // CXXMethod NewRemoteInstance
struct _ast6514: FunctionProtoType<_ast6515, Pack<>, SameType> {}; // FunctionProto MaybeLocal<v8::Object> ()
struct _ast6516: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6521, Pack<_ast6517, _ast6518, _ast6520>>>, _ast6512>, NamedDeclName<_str870> {}; // CXXMethod SetCallHandler
struct _ast6517: NamedDeclName<_str82>, ParmVarDecl<_ast5363> {}; // ParmVar callback
struct _ast6518: NamedDeclName<_str129>, ParmVarDecl<_ast6519> {}; // ParmVar data
struct _ast6520: NamedDeclName<_str697>, ParmVarDecl<_ast4657> {}; // ParmVar side_effect_type
struct _ast6521: FunctionProtoType<_ast122, Pack<_ast5363, _ast6519, _ast4657>, SameType> {}; // FunctionProto void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
struct _ast6522: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3280, Pack<_ast6523>>>, _ast6512>, NamedDeclName<_str871> {}; // CXXMethod SetLength
struct _ast6523: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast6524: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6525, Pack<>>>, _ast6512>, NamedDeclName<_str872> {}; // CXXMethod InstanceTemplate
struct _ast6525: FunctionProtoType<_ast6526, Pack<>, SameType> {}; // FunctionProto Local<v8::ObjectTemplate> ()
struct _ast6527: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6530, Pack<_ast6528>>>, _ast6512>, NamedDeclName<_str873> {}; // CXXMethod Inherit
struct _ast6528: NamedDeclName<_str874>, ParmVarDecl<_ast6529> {}; // ParmVar parent
struct _ast6530: FunctionProtoType<_ast122, Pack<_ast6529>, SameType> {}; // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ast6531: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6532, Pack<>>>, _ast6512>, NamedDeclName<_str875> {}; // CXXMethod PrototypeTemplate
struct _ast6532: FunctionProtoType<_ast6533, Pack<>, SameType> {}; // FunctionProto Local<v8::ObjectTemplate> ()
struct _ast6534: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6537, Pack<_ast6535>>>, _ast6512>, NamedDeclName<_str876> {}; // CXXMethod SetPrototypeProviderTemplate
struct _ast6535: NamedDeclName<_str877>, ParmVarDecl<_ast6536> {}; // ParmVar prototype_provider
struct _ast6537: FunctionProtoType<_ast122, Pack<_ast6536>, SameType> {}; // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ast6538: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6541, Pack<_ast6539>>>, _ast6512>, NamedDeclName<_str878> {}; // CXXMethod SetClassName
struct _ast6539: NamedDeclName<_str531>, ParmVarDecl<_ast6540> {}; // ParmVar name
struct _ast6541: FunctionProtoType<_ast122, Pack<_ast6540>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast6542: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast6543>>>, _ast6512>, NamedDeclName<_str879> {}; // CXXMethod SetAcceptAnyReceiver
struct _ast6543: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast6544: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast6512>, NamedDeclName<_str880> {}; // CXXMethod ReadOnlyPrototype
struct _ast6545: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast6512>, NamedDeclName<_str881> {}; // CXXMethod RemovePrototype
struct _ast6546: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6549, Pack<_ast6547>>>, _ast6512>, NamedDeclName<_str882> {}; // CXXMethod HasInstance
struct _ast6547: NamedDeclName<_str367>, ParmVarDecl<_ast6548> {}; // ParmVar object
struct _ast6549: FunctionProtoType<_ast137, Pack<_ast6548>, SameType> {}; // FunctionProto bool (Local<v8::Value>)
struct _ast6550: MethodDecl<FunctionDecl<_ast6552, Pack<_ast6551>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6551: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast6552: FunctionProtoType<_ast6512, Pack<_ast4533>, SameType> {}; // FunctionProto v8::FunctionTemplate *(v8::Data *)
struct _ast6553: NamedDeclName<_str883>, TypeDecl<_ast6554> {}; // Enum PropertyHandlerFlags
struct _ast6554: EnumType<_ast6553, _ast2095> {}; // Enum v8::PropertyHandlerFlags
struct _ast6555: NamedDeclName<_str823> {}; // EnumConstant kNone
struct _ast6556: NamedDeclName<_str884> {}; // EnumConstant kAllCanRead
struct _ast6557: NamedDeclName<_str885> {}; // EnumConstant kNonMasking
struct _ast6558: NamedDeclName<_str886> {}; // EnumConstant kOnlyInterceptStrings
struct _ast6559: NamedDeclName<_str578> {}; // EnumConstant kHasNoSideEffect
struct _ast6560: NamedDeclName<_str887>, TypeDecl<_ast6561> {}; // CXXRecord NamedPropertyHandlerConfiguration
struct _ast6561: StructOrClassRecordType<RecordType<_ast6560>> {}; // Record v8::NamedPropertyHandlerConfiguration
struct _ast6562: NamedDeclName<_str887>, TypeDecl<_ast6561> {}; // CXXRecord NamedPropertyHandlerConfiguration
struct _ast6563: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6574, Pack<_ast6564, _ast6565, _ast6566, _ast6567, _ast6568, _ast6569, _ast6570, _ast6571, _ast6573>>>, _ast6575>> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6564: NamedDeclName<_str603>, ParmVarDecl<_ast6440> {}; // ParmVar getter
struct _ast6565: NamedDeclName<_str604>, ParmVarDecl<_ast6442> {}; // ParmVar setter
struct _ast6566: NamedDeclName<_str888>, ParmVarDecl<_ast6444> {}; // ParmVar query
struct _ast6567: NamedDeclName<_str889>, ParmVarDecl<_ast6446> {}; // ParmVar deleter
struct _ast6568: NamedDeclName<_str890>, ParmVarDecl<_ast6448> {}; // ParmVar enumerator
struct _ast6569: NamedDeclName<_str891>, ParmVarDecl<_ast6450> {}; // ParmVar definer
struct _ast6570: NamedDeclName<_str597>, ParmVarDecl<_ast6452> {}; // ParmVar descriptor
struct _ast6571: NamedDeclName<_str129>, ParmVarDecl<_ast6572> {}; // ParmVar data
struct _ast6573: NamedDeclName<_str167>, ParmVarDecl<_ast6554> {}; // ParmVar flags
struct _ast6574: FunctionProtoType<_ast122, Pack<_ast6440, _ast6442, _ast6444, _ast6446, _ast6448, _ast6450, _ast6452, _ast6572, _ast6554>, SameType> {}; // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6575: PointerType<_ast6561> {}; // Pointer v8::NamedPropertyHandlerConfiguration *
struct _ast6576: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6585, Pack<_ast6577, _ast6578, _ast6579, _ast6580, _ast6581, _ast6582, _ast6584>>>, _ast6575>> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6577: NamedDeclName<_str603>, ParmVarDecl<_ast6440> {}; // ParmVar getter
struct _ast6578: NamedDeclName<_str604>, ParmVarDecl<_ast6442> {}; // ParmVar setter
struct _ast6579: NamedDeclName<_str888>, ParmVarDecl<_ast6444> {}; // ParmVar query
struct _ast6580: NamedDeclName<_str889>, ParmVarDecl<_ast6446> {}; // ParmVar deleter
struct _ast6581: NamedDeclName<_str890>, ParmVarDecl<_ast6448> {}; // ParmVar enumerator
struct _ast6582: NamedDeclName<_str129>, ParmVarDecl<_ast6583> {}; // ParmVar data
struct _ast6584: NamedDeclName<_str167>, ParmVarDecl<_ast6554> {}; // ParmVar flags
struct _ast6585: FunctionProtoType<_ast122, Pack<_ast6440, _ast6442, _ast6444, _ast6446, _ast6448, _ast6583, _ast6554>, SameType> {}; // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6586: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6596, Pack<_ast6587, _ast6588, _ast6589, _ast6590, _ast6591, _ast6592, _ast6593, _ast6595>>>, _ast6575>> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6587: NamedDeclName<_str603>, ParmVarDecl<_ast6440> {}; // ParmVar getter
struct _ast6588: NamedDeclName<_str604>, ParmVarDecl<_ast6442> {}; // ParmVar setter
struct _ast6589: NamedDeclName<_str597>, ParmVarDecl<_ast6452> {}; // ParmVar descriptor
struct _ast6590: NamedDeclName<_str889>, ParmVarDecl<_ast6446> {}; // ParmVar deleter
struct _ast6591: NamedDeclName<_str890>, ParmVarDecl<_ast6448> {}; // ParmVar enumerator
struct _ast6592: NamedDeclName<_str891>, ParmVarDecl<_ast6450> {}; // ParmVar definer
struct _ast6593: NamedDeclName<_str129>, ParmVarDecl<_ast6594> {}; // ParmVar data
struct _ast6595: NamedDeclName<_str167>, ParmVarDecl<_ast6554> {}; // ParmVar flags
struct _ast6596: FunctionProtoType<_ast122, Pack<_ast6440, _ast6442, _ast6452, _ast6446, _ast6448, _ast6450, _ast6594, _ast6554>, SameType> {}; // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6597: NamedDeclName<_str603> {}; // Field getter
struct _ast6598: NamedDeclName<_str604> {}; // Field setter
struct _ast6599: NamedDeclName<_str888> {}; // Field query
struct _ast6600: NamedDeclName<_str889> {}; // Field deleter
struct _ast6601: NamedDeclName<_str890> {}; // Field enumerator
struct _ast6602: NamedDeclName<_str891> {}; // Field definer
struct _ast6603: NamedDeclName<_str597> {}; // Field descriptor
struct _ast6604: NamedDeclName<_str129> {}; // Field data
struct _ast6605: NamedDeclName<_str167> {}; // Field flags
struct _ast6606: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6610, Pack<_ast6607>>>, _ast6575>> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6607: NamedDeclAnon<_str64>, ParmVarDecl<_ast6608> {}; // ParmVar 
struct _ast6608: LValueReferenceType<ReferenceType<_ast6609>> {}; // LValueReference const v8::NamedPropertyHandlerConfiguration &
struct _ast6609: ConstQualifiedType<_ast6561> {}; // Record const v8::NamedPropertyHandlerConfiguration
struct _ast6610: FunctionProtoType<_ast122, Pack<_ast6608>, SameType> {}; // FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6611: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6614, Pack<_ast6612>>>, _ast6575>> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _ast6612: NamedDeclAnon<_str64>, ParmVarDecl<_ast6613> {}; // ParmVar 
struct _ast6613: RValueReferenceType<ReferenceType<_ast6561>> {}; // RValueReference v8::NamedPropertyHandlerConfiguration &&
struct _ast6614: FunctionProtoType<_ast122, Pack<_ast6613>, SameType> {}; // FunctionProto void (v8::NamedPropertyHandlerConfiguration &&)
struct _ast6615: NamedDeclName<_str892>, TypeDecl<_ast6616> {}; // CXXRecord IndexedPropertyHandlerConfiguration
struct _ast6616: StructOrClassRecordType<RecordType<_ast6615>> {}; // Record v8::IndexedPropertyHandlerConfiguration
struct _ast6617: NamedDeclName<_str892>, TypeDecl<_ast6616> {}; // CXXRecord IndexedPropertyHandlerConfiguration
struct _ast6618: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6629, Pack<_ast6619, _ast6620, _ast6621, _ast6622, _ast6623, _ast6624, _ast6625, _ast6626, _ast6628>>>, _ast6630>> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6619: NamedDeclName<_str603>, ParmVarDecl<_ast6454> {}; // ParmVar getter
struct _ast6620: NamedDeclName<_str604>, ParmVarDecl<_ast6456> {}; // ParmVar setter
struct _ast6621: NamedDeclName<_str888>, ParmVarDecl<_ast6458> {}; // ParmVar query
struct _ast6622: NamedDeclName<_str889>, ParmVarDecl<_ast6460> {}; // ParmVar deleter
struct _ast6623: NamedDeclName<_str890>, ParmVarDecl<_ast6462> {}; // ParmVar enumerator
struct _ast6624: NamedDeclName<_str891>, ParmVarDecl<_ast6464> {}; // ParmVar definer
struct _ast6625: NamedDeclName<_str597>, ParmVarDecl<_ast6466> {}; // ParmVar descriptor
struct _ast6626: NamedDeclName<_str129>, ParmVarDecl<_ast6627> {}; // ParmVar data
struct _ast6628: NamedDeclName<_str167>, ParmVarDecl<_ast6554> {}; // ParmVar flags
struct _ast6629: FunctionProtoType<_ast122, Pack<_ast6454, _ast6456, _ast6458, _ast6460, _ast6462, _ast6464, _ast6466, _ast6627, _ast6554>, SameType> {}; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6630: PointerType<_ast6616> {}; // Pointer v8::IndexedPropertyHandlerConfiguration *
struct _ast6631: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6640, Pack<_ast6632, _ast6633, _ast6634, _ast6635, _ast6636, _ast6637, _ast6639>>>, _ast6630>> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6632: NamedDeclName<_str603>, ParmVarDecl<_ast6454> {}; // ParmVar getter
struct _ast6633: NamedDeclName<_str604>, ParmVarDecl<_ast6456> {}; // ParmVar setter
struct _ast6634: NamedDeclName<_str888>, ParmVarDecl<_ast6458> {}; // ParmVar query
struct _ast6635: NamedDeclName<_str889>, ParmVarDecl<_ast6460> {}; // ParmVar deleter
struct _ast6636: NamedDeclName<_str890>, ParmVarDecl<_ast6462> {}; // ParmVar enumerator
struct _ast6637: NamedDeclName<_str129>, ParmVarDecl<_ast6638> {}; // ParmVar data
struct _ast6639: NamedDeclName<_str167>, ParmVarDecl<_ast6554> {}; // ParmVar flags
struct _ast6640: FunctionProtoType<_ast122, Pack<_ast6454, _ast6456, _ast6458, _ast6460, _ast6462, _ast6638, _ast6554>, SameType> {}; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6641: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6651, Pack<_ast6642, _ast6643, _ast6644, _ast6645, _ast6646, _ast6647, _ast6648, _ast6650>>>, _ast6630>> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6642: NamedDeclName<_str603>, ParmVarDecl<_ast6454> {}; // ParmVar getter
struct _ast6643: NamedDeclName<_str604>, ParmVarDecl<_ast6456> {}; // ParmVar setter
struct _ast6644: NamedDeclName<_str597>, ParmVarDecl<_ast6466> {}; // ParmVar descriptor
struct _ast6645: NamedDeclName<_str889>, ParmVarDecl<_ast6460> {}; // ParmVar deleter
struct _ast6646: NamedDeclName<_str890>, ParmVarDecl<_ast6462> {}; // ParmVar enumerator
struct _ast6647: NamedDeclName<_str891>, ParmVarDecl<_ast6464> {}; // ParmVar definer
struct _ast6648: NamedDeclName<_str129>, ParmVarDecl<_ast6649> {}; // ParmVar data
struct _ast6650: NamedDeclName<_str167>, ParmVarDecl<_ast6554> {}; // ParmVar flags
struct _ast6651: FunctionProtoType<_ast122, Pack<_ast6454, _ast6456, _ast6466, _ast6460, _ast6462, _ast6464, _ast6649, _ast6554>, SameType> {}; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6652: NamedDeclName<_str603> {}; // Field getter
struct _ast6653: NamedDeclName<_str604> {}; // Field setter
struct _ast6654: NamedDeclName<_str888> {}; // Field query
struct _ast6655: NamedDeclName<_str889> {}; // Field deleter
struct _ast6656: NamedDeclName<_str890> {}; // Field enumerator
struct _ast6657: NamedDeclName<_str891> {}; // Field definer
struct _ast6658: NamedDeclName<_str597> {}; // Field descriptor
struct _ast6659: NamedDeclName<_str129> {}; // Field data
struct _ast6660: NamedDeclName<_str167> {}; // Field flags
struct _ast6661: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6665, Pack<_ast6662>>>, _ast6630>> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6662: NamedDeclAnon<_str64>, ParmVarDecl<_ast6663> {}; // ParmVar 
struct _ast6663: LValueReferenceType<ReferenceType<_ast6664>> {}; // LValueReference const v8::IndexedPropertyHandlerConfiguration &
struct _ast6664: ConstQualifiedType<_ast6616> {}; // Record const v8::IndexedPropertyHandlerConfiguration
struct _ast6665: FunctionProtoType<_ast122, Pack<_ast6663>, SameType> {}; // FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6666: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6669, Pack<_ast6667>>>, _ast6630>> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _ast6667: NamedDeclAnon<_str64>, ParmVarDecl<_ast6668> {}; // ParmVar 
struct _ast6668: RValueReferenceType<ReferenceType<_ast6616>> {}; // RValueReference v8::IndexedPropertyHandlerConfiguration &&
struct _ast6669: FunctionProtoType<_ast122, Pack<_ast6668>, SameType> {}; // FunctionProto void (v8::IndexedPropertyHandlerConfiguration &&)
struct _ast6670: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast6630>> {}; // CXXDestructor ~IndexedPropertyHandlerConfiguration
struct _ast6671: NamedDeclName<_str28>, TypeDecl<_ast68> {}; // CXXRecord ObjectTemplate
struct _ast6672: MethodDecl<FunctionDecl<_ast6676, Pack<_ast6673, _ast6674>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6673: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6674: NamedDeclName<_str893>, ParmVarDecl<_ast6675> {}; // ParmVar constructor
struct _ast6676: FunctionProtoType<_ast6677, Pack<_ast198, _ast6675>, SameType> {}; // FunctionProto Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6678: MethodDecl<FunctionDecl<_ast6681, Pack<_ast6679, _ast6680>>>, NamedDeclName<_str865> {}; // CXXMethod FromSnapshot
struct _ast6679: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6680: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast6681: FunctionProtoType<_ast6682, Pack<_ast198, _ast3539>, SameType> {}; // FunctionProto MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _ast6683: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6686, Pack<_ast6684>>>, _ast6688>, NamedDeclName<_str698> {}; // CXXMethod NewInstance
struct _ast6684: NamedDeclName<_str220>, ParmVarDecl<_ast6685> {}; // ParmVar context
struct _ast6686: FunctionProtoType<_ast6687, Pack<_ast6685>, SameType> {}; // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>)
struct _ast6688: PointerType<_ast68> {}; // Pointer v8::ObjectTemplate *
struct _ast6689: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6702, Pack<_ast6690, _ast6692, _ast6693, _ast6694, _ast6696, _ast6697, _ast6698, _ast6700, _ast6701>>>, _ast6688>, NamedDeclName<_str602> {}; // CXXMethod SetAccessor
struct _ast6690: NamedDeclName<_str531>, ParmVarDecl<_ast6691> {}; // ParmVar name
struct _ast6692: NamedDeclName<_str603>, ParmVarDecl<_ast4635> {}; // ParmVar getter
struct _ast6693: NamedDeclName<_str604>, ParmVarDecl<_ast4639> {}; // ParmVar setter
struct _ast6694: NamedDeclName<_str129>, ParmVarDecl<_ast6695> {}; // ParmVar data
struct _ast6696: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast6697: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6698: NamedDeclName<_str841>, ParmVarDecl<_ast6699> {}; // ParmVar signature
struct _ast6700: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast6701: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast6702: FunctionProtoType<_ast122, Pack<_ast6691, _ast4635, _ast4639, _ast6695, _ast4643, _ast4629, _ast6699, _ast4657, _ast4657>, SameType> {}; // FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6703: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6716, Pack<_ast6704, _ast6706, _ast6707, _ast6708, _ast6710, _ast6711, _ast6712, _ast6714, _ast6715>>>, _ast6688>, NamedDeclName<_str602> {}; // CXXMethod SetAccessor
struct _ast6704: NamedDeclName<_str531>, ParmVarDecl<_ast6705> {}; // ParmVar name
struct _ast6706: NamedDeclName<_str603>, ParmVarDecl<_ast4637> {}; // ParmVar getter
struct _ast6707: NamedDeclName<_str604>, ParmVarDecl<_ast4641> {}; // ParmVar setter
struct _ast6708: NamedDeclName<_str129>, ParmVarDecl<_ast6709> {}; // ParmVar data
struct _ast6710: NamedDeclName<_str605>, ParmVarDecl<_ast4643> {}; // ParmVar settings
struct _ast6711: NamedDeclName<_str606>, ParmVarDecl<_ast4629> {}; // ParmVar attribute
struct _ast6712: NamedDeclName<_str841>, ParmVarDecl<_ast6713> {}; // ParmVar signature
struct _ast6714: NamedDeclName<_str607>, ParmVarDecl<_ast4657> {}; // ParmVar getter_side_effect_type
struct _ast6715: NamedDeclName<_str608>, ParmVarDecl<_ast4657> {}; // ParmVar setter_side_effect_type
struct _ast6716: FunctionProtoType<_ast122, Pack<_ast6705, _ast4637, _ast4641, _ast6709, _ast4643, _ast4629, _ast6713, _ast4657, _ast4657>, SameType> {}; // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6717: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6719, Pack<_ast6718>>>, _ast6688>, NamedDeclName<_str894> {}; // CXXMethod SetHandler
struct _ast6718: NamedDeclName<_str895>, ParmVarDecl<_ast6608> {}; // ParmVar configuration
struct _ast6719: FunctionProtoType<_ast122, Pack<_ast6608>, SameType> {}; // FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6720: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6728, Pack<_ast6721, _ast6722, _ast6723, _ast6724, _ast6725, _ast6726>>>, _ast6688>, NamedDeclName<_str896> {}; // CXXMethod SetIndexedPropertyHandler
struct _ast6721: NamedDeclName<_str603>, ParmVarDecl<_ast6454> {}; // ParmVar getter
struct _ast6722: NamedDeclName<_str604>, ParmVarDecl<_ast6456> {}; // ParmVar setter
struct _ast6723: NamedDeclName<_str888>, ParmVarDecl<_ast6458> {}; // ParmVar query
struct _ast6724: NamedDeclName<_str889>, ParmVarDecl<_ast6460> {}; // ParmVar deleter
struct _ast6725: NamedDeclName<_str890>, ParmVarDecl<_ast6462> {}; // ParmVar enumerator
struct _ast6726: NamedDeclName<_str129>, ParmVarDecl<_ast6727> {}; // ParmVar data
struct _ast6728: FunctionProtoType<_ast122, Pack<_ast6454, _ast6456, _ast6458, _ast6460, _ast6462, _ast6727>, SameType> {}; // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _ast6729: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6731, Pack<_ast6730>>>, _ast6688>, NamedDeclName<_str894> {}; // CXXMethod SetHandler
struct _ast6730: NamedDeclName<_str895>, ParmVarDecl<_ast6663> {}; // ParmVar configuration
struct _ast6731: FunctionProtoType<_ast122, Pack<_ast6663>, SameType> {}; // FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6732: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6736, Pack<_ast6733, _ast6734>>>, _ast6688>, NamedDeclName<_str897> {}; // CXXMethod SetCallAsFunctionHandler
struct _ast6733: NamedDeclName<_str82>, ParmVarDecl<_ast5363> {}; // ParmVar callback
struct _ast6734: NamedDeclName<_str129>, ParmVarDecl<_ast6735> {}; // ParmVar data
struct _ast6736: FunctionProtoType<_ast122, Pack<_ast5363, _ast6735>, SameType> {}; // FunctionProto void (v8::FunctionCallback, Local<v8::Value>)
struct _ast6737: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast6688>, NamedDeclName<_str898> {}; // CXXMethod MarkAsUndetectable
struct _ast6738: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6742, Pack<_ast6739, _ast6740>>>, _ast6688>, NamedDeclName<_str899> {}; // CXXMethod SetAccessCheckCallback
struct _ast6739: NamedDeclName<_str82>, ParmVarDecl<_ast6475> {}; // ParmVar callback
struct _ast6740: NamedDeclName<_str129>, ParmVarDecl<_ast6741> {}; // ParmVar data
struct _ast6742: FunctionProtoType<_ast122, Pack<_ast6475, _ast6741>, SameType> {}; // FunctionProto void (v8::AccessCheckCallback, Local<v8::Value>)
struct _ast6743: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6749, Pack<_ast6744, _ast6745, _ast6746, _ast6747>>>, _ast6688>, NamedDeclName<_str900> {}; // CXXMethod SetAccessCheckCallbackAndHandler
struct _ast6744: NamedDeclName<_str82>, ParmVarDecl<_ast6475> {}; // ParmVar callback
struct _ast6745: NamedDeclName<_str901>, ParmVarDecl<_ast6608> {}; // ParmVar named_handler
struct _ast6746: NamedDeclName<_str902>, ParmVarDecl<_ast6663> {}; // ParmVar indexed_handler
struct _ast6747: NamedDeclName<_str129>, ParmVarDecl<_ast6748> {}; // ParmVar data
struct _ast6749: FunctionProtoType<_ast122, Pack<_ast6475, _ast6608, _ast6663, _ast6748>, SameType> {}; // FunctionProto void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ast6750: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3372, Pack<>>>, _ast6688>, NamedDeclName<_str631> {}; // CXXMethod InternalFieldCount
struct _ast6751: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3280, Pack<_ast6752>>>, _ast6688>, NamedDeclName<_str903> {}; // CXXMethod SetInternalFieldCount
struct _ast6752: NamedDeclName<_str152>, ParmVarDecl<_ast2095> {}; // ParmVar value
struct _ast6753: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast6688>, NamedDeclName<_str904> {}; // CXXMethod IsImmutableProto
struct _ast6754: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast6688>, NamedDeclName<_str905> {}; // CXXMethod SetImmutableProto
struct _ast6755: MethodDecl<FunctionDecl<_ast6757, Pack<_ast6756>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6756: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast6757: FunctionProtoType<_ast6688, Pack<_ast4533>, SameType> {}; // FunctionProto v8::ObjectTemplate *(v8::Data *)
struct _ast6758: NamedDeclName<_str37>, TypeDecl<_ast86> {}; // CXXRecord Signature
struct _ast6759: MethodDecl<FunctionDecl<_ast6763, Pack<_ast6760, _ast6761>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6760: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6761: NamedDeclName<_str906>, ParmVarDecl<_ast6762> {}; // ParmVar receiver
struct _ast6763: FunctionProtoType<_ast6764, Pack<_ast198, _ast6762>, SameType> {}; // FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6765: MethodDecl<FunctionDecl<_ast6767, Pack<_ast6766>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6766: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast6767: FunctionProtoType<_ast6768, Pack<_ast4533>, SameType> {}; // FunctionProto v8::Signature *(v8::Data *)
struct _ast6768: PointerType<_ast86> {}; // Pointer v8::Signature *
struct _ast6769: NamedDeclName<_str5>, TypeDecl<_ast9> {}; // CXXRecord AccessorSignature
struct _ast6770: MethodDecl<FunctionDecl<_ast6774, Pack<_ast6771, _ast6772>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast6771: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6772: NamedDeclName<_str906>, ParmVarDecl<_ast6773> {}; // ParmVar receiver
struct _ast6774: FunctionProtoType<_ast6775, Pack<_ast198, _ast6773>, SameType> {}; // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6776: MethodDecl<FunctionDecl<_ast6778, Pack<_ast6777>>>, NamedDeclName<_str60> {}; // CXXMethod Cast
struct _ast6777: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast6778: FunctionProtoType<_ast6779, Pack<_ast4533>, SameType> {}; // FunctionProto v8::AccessorSignature *(v8::Data *)
struct _ast6779: PointerType<_ast9> {}; // Pointer v8::AccessorSignature *
struct _ast6780: NamedDeclName<_str907>, TypeDecl<_ast6781> {}; // CXXRecord Extension
struct _ast6781: StructOrClassRecordType<RecordType<_ast6780>> {}; // Record v8::Extension
struct _ast6782: NamedDeclName<_str907>, TypeDecl<_ast6781> {}; // CXXRecord Extension
struct _ast6783: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6790, Pack<_ast6784, _ast6785, _ast6786, _ast6787, _ast6789>>>, _ast6791>> {}; // CXXConstructor Extension
struct _ast6784: NamedDeclName<_str531>, ParmVarDecl<_ast2108> {}; // ParmVar name
struct _ast6785: NamedDeclName<_str136>, ParmVarDecl<_ast2108> {}; // ParmVar source
struct _ast6786: NamedDeclName<_str908>, ParmVarDecl<_ast2095> {}; // ParmVar dep_count
struct _ast6787: NamedDeclName<_str909>, ParmVarDecl<_ast6788> {}; // ParmVar deps
struct _ast6788: PointerType<_ast2108> {}; // Pointer const char **
struct _ast6789: NamedDeclName<_str910>, ParmVarDecl<_ast2095> {}; // ParmVar source_length
struct _ast6790: FunctionProtoType<_ast122, Pack<_ast2108, _ast2108, _ast2095, _ast6788, _ast2095>, SameType> {}; // FunctionProto void (const char *, const char *, int, const char **, int)
struct _ast6791: PointerType<_ast6781> {}; // Pointer v8::Extension *
struct _ast6792: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast6791>>> {}; // CXXDestructor ~Extension
struct _ast6793: NamedDeclName<_str911>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6797, Pack<_ast6794, _ast6795>>>, _ast6791>> {}; // CXXMethod GetNativeFunctionTemplate
struct _ast6794: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6795: NamedDeclName<_str531>, ParmVarDecl<_ast6796> {}; // ParmVar name
struct _ast6797: FunctionProtoType<_ast6798, Pack<_ast198, _ast6796>, SameType> {}; // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
struct _ast6799: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4319, Pack<>>>, _ast6800>, NamedDeclName<_str531> {}; // CXXMethod name
struct _ast6800: PointerType<_ast6801> {}; // Pointer const v8::Extension *
struct _ast6801: ConstQualifiedType<_ast6781> {}; // Record const v8::Extension
struct _ast6802: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6800>, NamedDeclName<_str910> {}; // CXXMethod source_length
struct _ast6803: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6804, Pack<>>>, _ast6800>, NamedDeclName<_str136> {}; // CXXMethod source
struct _ast6804: FunctionProtoType<_ast6805, Pack<>, ConstQualifiedType> {}; // FunctionProto const String::ExternalOneByteStringResource *() const
struct _ast6805: PointerType<_ast6806> {}; // Pointer const String::ExternalOneByteStringResource *
struct _ast6806: ConstQualifiedType<_ast6807> {}; // Elaborated const String::ExternalOneByteStringResource
struct _ast6808: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast6800>, NamedDeclName<_str912> {}; // CXXMethod dependency_count
struct _ast6809: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6810, Pack<>>>, _ast6800>, NamedDeclName<_str913> {}; // CXXMethod dependencies
struct _ast6810: FunctionProtoType<_ast6788, Pack<>, ConstQualifiedType> {}; // FunctionProto const char **() const
struct _ast6811: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast6812>>>, _ast6791>, NamedDeclName<_str914> {}; // CXXMethod set_auto_enable
struct _ast6812: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast6813: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast6791>, NamedDeclName<_str915> {}; // CXXMethod auto_enable
struct _ast6814: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6817, Pack<_ast6815>>>, _ast6791>> {}; // CXXConstructor Extension
struct _ast6815: NamedDeclAnon<_str64>, ParmVarDecl<_ast6816> {}; // ParmVar 
struct _ast6816: LValueReferenceType<ReferenceType<_ast6801>> {}; // LValueReference const v8::Extension &
struct _ast6817: FunctionProtoType<_ast122, Pack<_ast6816>, SameType> {}; // FunctionProto void (const v8::Extension &)
struct _ast6818: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6817, Pack<_ast6819>>>, _ast6791>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast6819: NamedDeclAnon<_str64>, ParmVarDecl<_ast6816> {}; // ParmVar 
struct _ast6820: FunctionDecl<_ast6823, Pack<_ast6821>>, NamedDeclName<_str916> {}; // Function RegisterExtension
struct _ast6821: NamedDeclAnon<_str64>, ParmVarDecl<_ast6822> {}; // ParmVar 
struct _ast6823: FunctionProtoType<_ast122, Pack<_ast6822>, SameType> {}; // FunctionProto void (std::unique_ptr<Extension>)
struct _ast6824: FunctionDecl<_ast6826, Pack<_ast6825>>, NamedDeclName<_str917> {}; // Function Undefined
struct _ast6825: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6826: FunctionProtoType<_ast6827, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _ast6828: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6829: FunctionDecl<_ast6831, Pack<_ast6830>>, NamedDeclName<_str918> {}; // Function Null
struct _ast6830: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6831: FunctionProtoType<_ast6832, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _ast6833: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6834: FunctionDecl<_ast6836, Pack<_ast6835>>, NamedDeclName<_str919> {}; // Function True
struct _ast6835: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6836: FunctionProtoType<_ast6837, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _ast6838: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6839: FunctionDecl<_ast6841, Pack<_ast6840>>, NamedDeclName<_str920> {}; // Function False
struct _ast6840: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6841: FunctionProtoType<_ast6842, Pack<_ast198>, SameType> {}; // FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _ast6843: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6844: NamedDeclName<_str921>, TypeDecl<_ast6845> {}; // CXXRecord ResourceConstraints
struct _ast6845: StructOrClassRecordType<RecordType<_ast6844>> {}; // Record v8::ResourceConstraints
struct _ast6846: NamedDeclName<_str921>, TypeDecl<_ast6845> {}; // CXXRecord ResourceConstraints
struct _ast6847: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6850, Pack<_ast6848, _ast6849>>>, _ast6851>, NamedDeclName<_str922> {}; // CXXMethod ConfigureDefaultsFromHeapSize
struct _ast6848: NamedDeclName<_str923>, ParmVarDecl<_ast3539> {}; // ParmVar initial_heap_size_in_bytes
struct _ast6849: NamedDeclName<_str924>, ParmVarDecl<_ast3539> {}; // ParmVar maximum_heap_size_in_bytes
struct _ast6850: FunctionProtoType<_ast122, Pack<_ast3539, _ast3539>, SameType> {}; // FunctionProto void (size_t, size_t)
struct _ast6851: PointerType<_ast6845> {}; // Pointer v8::ResourceConstraints *
struct _ast6852: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6855, Pack<_ast6853, _ast6854>>>, _ast6851>, NamedDeclName<_str925> {}; // CXXMethod ConfigureDefaults
struct _ast6853: NamedDeclName<_str926>, ParmVarDecl<_ast3914> {}; // ParmVar physical_memory
struct _ast6854: NamedDeclName<_str927>, ParmVarDecl<_ast3914> {}; // ParmVar virtual_memory_limit
struct _ast6855: FunctionProtoType<_ast122, Pack<_ast3914, _ast3914>, SameType> {}; // FunctionProto void (uint64_t, uint64_t)
struct _ast6856: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6857, Pack<>>>, _ast6858>, NamedDeclName<_str928> {}; // CXXMethod stack_limit
struct _ast6857: FunctionProtoType<_ast4006, Pack<>, ConstQualifiedType> {}; // FunctionProto uint32_t *() const
struct _ast6858: PointerType<_ast6859> {}; // Pointer const v8::ResourceConstraints *
struct _ast6859: ConstQualifiedType<_ast6845> {}; // Record const v8::ResourceConstraints
struct _ast6860: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6862, Pack<_ast6861>>>, _ast6851>, NamedDeclName<_str929> {}; // CXXMethod set_stack_limit
struct _ast6861: NamedDeclName<_str152>, ParmVarDecl<_ast4006> {}; // ParmVar value
struct _ast6862: FunctionProtoType<_ast122, Pack<_ast4006>, SameType> {}; // FunctionProto void (uint32_t *)
struct _ast6863: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str930> {}; // CXXMethod code_range_size_in_bytes
struct _ast6864: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6865>>>, _ast6851>, NamedDeclName<_str931> {}; // CXXMethod set_code_range_size_in_bytes
struct _ast6865: NamedDeclName<_str932>, ParmVarDecl<_ast3539> {}; // ParmVar limit
struct _ast6866: FunctionProtoType<_ast122, Pack<_ast3539>, SameType> {}; // FunctionProto void (size_t)
struct _ast6867: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str933> {}; // CXXMethod max_old_generation_size_in_bytes
struct _ast6868: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6869>>>, _ast6851>, NamedDeclName<_str934> {}; // CXXMethod set_max_old_generation_size_in_bytes
struct _ast6869: NamedDeclName<_str932>, ParmVarDecl<_ast3539> {}; // ParmVar limit
struct _ast6870: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str935> {}; // CXXMethod max_young_generation_size_in_bytes
struct _ast6871: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6872>>>, _ast6851>, NamedDeclName<_str936> {}; // CXXMethod set_max_young_generation_size_in_bytes
struct _ast6872: NamedDeclName<_str932>, ParmVarDecl<_ast3539> {}; // ParmVar limit
struct _ast6873: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str937> {}; // CXXMethod initial_old_generation_size_in_bytes
struct _ast6874: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6875>>>, _ast6851>, NamedDeclName<_str938> {}; // CXXMethod set_initial_old_generation_size_in_bytes
struct _ast6875: NamedDeclName<_str939>, ParmVarDecl<_ast3539> {}; // ParmVar initial_size
struct _ast6876: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str940> {}; // CXXMethod initial_young_generation_size_in_bytes
struct _ast6877: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6878>>>, _ast6851>, NamedDeclName<_str941> {}; // CXXMethod set_initial_young_generation_size_in_bytes
struct _ast6878: NamedDeclName<_str939>, ParmVarDecl<_ast3539> {}; // ParmVar initial_size
struct _ast6879: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str942> {}; // CXXMethod code_range_size
struct _ast6880: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6881>>>, _ast6851>, NamedDeclName<_str943> {}; // CXXMethod set_code_range_size
struct _ast6881: NamedDeclName<_str944>, ParmVarDecl<_ast3539> {}; // ParmVar limit_in_mb
struct _ast6882: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str945> {}; // CXXMethod max_semi_space_size_in_kb
struct _ast6883: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6884>>>, _ast6851>, NamedDeclName<_str946> {}; // CXXMethod set_max_semi_space_size_in_kb
struct _ast6884: NamedDeclName<_str947>, ParmVarDecl<_ast3539> {}; // ParmVar limit_in_kb
struct _ast6885: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str948> {}; // CXXMethod max_old_space_size
struct _ast6886: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6887>>>, _ast6851>, NamedDeclName<_str949> {}; // CXXMethod set_max_old_space_size
struct _ast6887: NamedDeclName<_str944>, ParmVarDecl<_ast3539> {}; // ParmVar limit_in_mb
struct _ast6888: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4302, Pack<>>>, _ast6858>, NamedDeclName<_str950> {}; // CXXMethod max_zone_pool_size
struct _ast6889: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast6890>>>, _ast6851>, NamedDeclName<_str951> {}; // CXXMethod set_max_zone_pool_size
struct _ast6890: NamedDeclName<_str768>, ParmVarDecl<_ast3539> {}; // ParmVar bytes
struct _ast6891: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast6851>> {}; // CXXConstructor ResourceConstraints
struct _ast6892: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6895, Pack<_ast6893>>>, _ast6851>> {}; // CXXConstructor ResourceConstraints
struct _ast6893: NamedDeclAnon<_str64>, ParmVarDecl<_ast6894> {}; // ParmVar 
struct _ast6894: LValueReferenceType<ReferenceType<_ast6859>> {}; // LValueReference const v8::ResourceConstraints &
struct _ast6895: FunctionProtoType<_ast122, Pack<_ast6894>, SameType> {}; // FunctionProto void (const v8::ResourceConstraints &)
struct _ast6896: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6899, Pack<_ast6897>>>, _ast6851>> {}; // CXXConstructor ResourceConstraints
struct _ast6897: NamedDeclAnon<_str64>, ParmVarDecl<_ast6898> {}; // ParmVar 
struct _ast6898: RValueReferenceType<ReferenceType<_ast6845>> {}; // RValueReference v8::ResourceConstraints &&
struct _ast6899: FunctionProtoType<_ast122, Pack<_ast6898>, SameType> {}; // FunctionProto void (v8::ResourceConstraints &&)
struct _ast6900: NamedDeclName<_str952>, TypeDecl<_ast6901> {}; // Typedef FatalErrorCallback
struct _ast6901: TypedefType<_ast6900> {}; // Typedef v8::FatalErrorCallback
struct _ast6902: NamedDeclName<_str953>, TypeDecl<_ast6903> {}; // Typedef OOMErrorCallback
struct _ast6903: TypedefType<_ast6902> {}; // Typedef v8::OOMErrorCallback
struct _ast6904: NamedDeclName<_str954>, TypeDecl<_ast6905> {}; // Typedef DcheckErrorCallback
struct _ast6905: TypedefType<_ast6904> {}; // Typedef v8::DcheckErrorCallback
struct _ast6906: NamedDeclName<_str955>, TypeDecl<_ast6907> {}; // Typedef MessageCallback
struct _ast6907: TypedefType<_ast6906> {}; // Typedef v8::MessageCallback
struct _ast6908: NamedDeclName<_str956>, TypeDecl<_ast6909> {}; // Typedef LogEventCallback
struct _ast6909: TypedefType<_ast6908> {}; // Typedef v8::LogEventCallback
struct _ast6910: NamedDeclName<_str957>, TypeDecl<_ast6911> {}; // CXXRecord Exception
struct _ast6911: StructOrClassRecordType<RecordType<_ast6910>> {}; // Record v8::Exception
struct _ast6912: NamedDeclName<_str957>, TypeDecl<_ast6911> {}; // CXXRecord Exception
struct _ast6913: MethodDecl<FunctionDecl<_ast6916, Pack<_ast6914>>>, NamedDeclName<_str958> {}; // CXXMethod RangeError
struct _ast6914: NamedDeclName<_str365>, ParmVarDecl<_ast6915> {}; // ParmVar message
struct _ast6916: FunctionProtoType<_ast6917, Pack<_ast6915>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6918: MethodDecl<FunctionDecl<_ast6921, Pack<_ast6919>>>, NamedDeclName<_str959> {}; // CXXMethod ReferenceError
struct _ast6919: NamedDeclName<_str365>, ParmVarDecl<_ast6920> {}; // ParmVar message
struct _ast6921: FunctionProtoType<_ast6922, Pack<_ast6920>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6923: MethodDecl<FunctionDecl<_ast6926, Pack<_ast6924>>>, NamedDeclName<_str960> {}; // CXXMethod SyntaxError
struct _ast6924: NamedDeclName<_str365>, ParmVarDecl<_ast6925> {}; // ParmVar message
struct _ast6926: FunctionProtoType<_ast6927, Pack<_ast6925>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6928: MethodDecl<FunctionDecl<_ast6931, Pack<_ast6929>>>, NamedDeclName<_str961> {}; // CXXMethod TypeError
struct _ast6929: NamedDeclName<_str365>, ParmVarDecl<_ast6930> {}; // ParmVar message
struct _ast6931: FunctionProtoType<_ast6932, Pack<_ast6930>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6933: MethodDecl<FunctionDecl<_ast6936, Pack<_ast6934>>>, NamedDeclName<_str962> {}; // CXXMethod Error
struct _ast6934: NamedDeclName<_str365>, ParmVarDecl<_ast6935> {}; // ParmVar message
struct _ast6936: FunctionProtoType<_ast6937, Pack<_ast6935>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ast6938: MethodDecl<FunctionDecl<_ast6942, Pack<_ast6939, _ast6940>>>, NamedDeclName<_str963> {}; // CXXMethod CreateMessage
struct _ast6939: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast6940: NamedDeclName<_str771>, ParmVarDecl<_ast6941> {}; // ParmVar exception
struct _ast6942: FunctionProtoType<_ast6943, Pack<_ast198, _ast6941>, SameType> {}; // FunctionProto Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _ast6944: MethodDecl<FunctionDecl<_ast6947, Pack<_ast6945>>>, NamedDeclName<_str295> {}; // CXXMethod GetStackTrace
struct _ast6945: NamedDeclName<_str771>, ParmVarDecl<_ast6946> {}; // ParmVar exception
struct _ast6947: FunctionProtoType<_ast6948, Pack<_ast6946>, SameType> {}; // FunctionProto Local<v8::StackTrace> (Local<v8::Value>)
struct _ast6949: NamedDeclName<_str964>, TypeDecl<_ast6950> {}; // Typedef CounterLookupCallback
struct _ast6950: TypedefType<_ast6949> {}; // Typedef v8::CounterLookupCallback
struct _ast6951: NamedDeclName<_str965>, TypeDecl<_ast6952> {}; // Typedef CreateHistogramCallback
struct _ast6952: TypedefType<_ast6951> {}; // Typedef v8::CreateHistogramCallback
struct _ast6953: NamedDeclName<_str966>, TypeDecl<_ast6954> {}; // Typedef AddHistogramSampleCallback
struct _ast6954: TypedefType<_ast6953> {}; // Typedef v8::AddHistogramSampleCallback
struct _ast6955: NamedDeclName<_str967>, TypeDecl<_ast6956> {}; // Typedef BeforeCallEnteredCallback
struct _ast6956: TypedefType<_ast6955> {}; // Typedef v8::BeforeCallEnteredCallback
struct _ast6957: NamedDeclName<_str968>, TypeDecl<_ast6958> {}; // Typedef CallCompletedCallback
struct _ast6958: TypedefType<_ast6957> {}; // Typedef v8::CallCompletedCallback
struct _ast6959: NamedDeclName<_str969>, TypeDecl<_ast6960> {}; // Typedef HostImportModuleDynamicallyCallback
struct _ast6960: TypedefType<_ast6959> {}; // Typedef v8::HostImportModuleDynamicallyCallback
struct _ast6961: NamedDeclName<_str970>, TypeDecl<_ast6962> {}; // Typedef HostInitializeImportMetaObjectCallback
struct _ast6962: TypedefType<_ast6961> {}; // Typedef v8::HostInitializeImportMetaObjectCallback
struct _ast6963: NamedDeclName<_str971>, TypeDecl<_ast6964> {}; // Typedef PrepareStackTraceCallback
struct _ast6964: TypedefType<_ast6963> {}; // Typedef v8::PrepareStackTraceCallback
struct _ast6965: NamedDeclName<_str972>, TypeDecl<_ast6966> {}; // Enum PromiseHookType
struct _ast6966: EnumType<_ast6965, _ast2095> {}; // Enum v8::PromiseHookType
struct _ast6967: NamedDeclName<_str973> {}; // EnumConstant kInit
struct _ast6968: NamedDeclName<_str974> {}; // EnumConstant kResolve
struct _ast6969: NamedDeclName<_str975> {}; // EnumConstant kBefore
struct _ast6970: NamedDeclName<_str976> {}; // EnumConstant kAfter
struct _ast6971: NamedDeclName<_str977>, TypeDecl<_ast6972> {}; // Typedef PromiseHook
struct _ast6972: TypedefType<_ast6971> {}; // Typedef v8::PromiseHook
struct _ast6973: NamedDeclName<_str978>, TypeDecl<_ast6974> {}; // Enum PromiseRejectEvent
struct _ast6974: EnumType<_ast6973, _ast2095> {}; // Enum v8::PromiseRejectEvent
struct _ast6975: NamedDeclName<_str979> {}; // EnumConstant kPromiseRejectWithNoHandler
struct _ast6976: NamedDeclName<_str980> {}; // EnumConstant kPromiseHandlerAddedAfterReject
struct _ast6977: NamedDeclName<_str981> {}; // EnumConstant kPromiseRejectAfterResolved
struct _ast6978: NamedDeclName<_str982> {}; // EnumConstant kPromiseResolveAfterResolved
struct _ast6979: NamedDeclName<_str983>, TypeDecl<_ast6980> {}; // CXXRecord PromiseRejectMessage
struct _ast6980: StructOrClassRecordType<RecordType<_ast6979>> {}; // Record v8::PromiseRejectMessage
struct _ast6981: NamedDeclName<_str983>, TypeDecl<_ast6980> {}; // CXXRecord PromiseRejectMessage
struct _ast6982: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6988, Pack<_ast6983, _ast6985, _ast6986>>>, _ast6989>> {}; // CXXConstructor PromiseRejectMessage
struct _ast6983: NamedDeclName<_str984>, ParmVarDecl<_ast6984> {}; // ParmVar promise
struct _ast6985: NamedDeclName<_str985>, ParmVarDecl<_ast6974> {}; // ParmVar event
struct _ast6986: NamedDeclName<_str152>, ParmVarDecl<_ast6987> {}; // ParmVar value
struct _ast6988: FunctionProtoType<_ast122, Pack<_ast6984, _ast6974, _ast6987>, SameType> {}; // FunctionProto void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
struct _ast6989: PointerType<_ast6980> {}; // Pointer v8::PromiseRejectMessage *
struct _ast6990: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6991, Pack<>>>, _ast6993>, NamedDeclName<_str716> {}; // CXXMethod GetPromise
struct _ast6991: FunctionProtoType<_ast6992, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Promise> () const
struct _ast6993: PointerType<_ast6994> {}; // Pointer const v8::PromiseRejectMessage *
struct _ast6994: ConstQualifiedType<_ast6980> {}; // Record const v8::PromiseRejectMessage
struct _ast6995: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6996, Pack<>>>, _ast6993>, NamedDeclName<_str986> {}; // CXXMethod GetEvent
struct _ast6996: FunctionProtoType<_ast6974, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::PromiseRejectEvent () const
struct _ast6997: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6998, Pack<>>>, _ast6993>, NamedDeclName<_str987> {}; // CXXMethod GetValue
struct _ast6998: FunctionProtoType<_ast6999, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast7000: NamedDeclName<_str988>, TypeDecl<_ast7001> {}; // Typedef PromiseRejectCallback
struct _ast7001: TypedefType<_ast7000> {}; // Typedef v8::PromiseRejectCallback
struct _ast7002: NamedDeclName<_str989>, TypeDecl<_ast7003> {}; // Typedef MicrotasksCompletedCallback
struct _ast7003: TypedefType<_ast7002> {}; // Typedef v8::MicrotasksCompletedCallback
struct _ast7004: NamedDeclName<_str990>, TypeDecl<_ast7005> {}; // Typedef MicrotasksCompletedCallbackWithData
struct _ast7005: TypedefType<_ast7004> {}; // Typedef v8::MicrotasksCompletedCallbackWithData
struct _ast7006: NamedDeclName<_str991>, TypeDecl<_ast7007> {}; // Typedef MicrotaskCallback
struct _ast7007: TypedefType<_ast7006> {}; // Typedef v8::MicrotaskCallback
struct _ast7008: NamedDeclName<_str992>, TypeDecl<_ast7009> {}; // Enum MicrotasksPolicy
struct _ast7009: EnumType<_ast7008, _ast2095> {}; // Enum v8::MicrotasksPolicy
struct _ast7010: NamedDeclName<_str993> {}; // EnumConstant kExplicit
struct _ast7011: NamedDeclName<_str994> {}; // EnumConstant kScoped
struct _ast7012: NamedDeclName<_str995> {}; // EnumConstant kAuto
struct _ast7013: NamedDeclName<_str22>, TypeDecl<_ast56> {}; // CXXRecord MicrotaskQueue
struct _ast7014: MethodDecl<FunctionDecl<_ast7017, Pack<_ast7015, _ast7016>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast7015: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7016: NamedDeclName<_str996>, ParmVarDecl<_ast7009> {}; // ParmVar policy
struct _ast7017: FunctionProtoType<_ast7018, Pack<_ast198, _ast7009>, SameType> {}; // FunctionProto std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
struct _ast7019: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7020, Pack<>>>, _ast7021>>> {}; // CXXDestructor ~MicrotaskQueue
struct _ast7020: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7021: PointerType<_ast56> {}; // Pointer v8::MicrotaskQueue *
struct _ast7022: NamedDeclName<_str997>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7026, Pack<_ast7023, _ast7024>>>, _ast7021>> {}; // CXXMethod EnqueueMicrotask
struct _ast7023: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7024: NamedDeclName<_str998>, ParmVarDecl<_ast7025> {}; // ParmVar microtask
struct _ast7026: FunctionProtoType<_ast122, Pack<_ast198, _ast7025>, SameType> {}; // FunctionProto void (v8::Isolate *, Local<v8::Function>)
struct _ast7027: NamedDeclName<_str997>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7033, Pack<_ast7028, _ast7031, _ast7032>>>, _ast7021>> {}; // CXXMethod EnqueueMicrotask
struct _ast7028: NamedDeclName<_str63>, ParmVarDecl<_ast7029> {}; // ParmVar isolate
struct _ast7029: PointerType<_ast7030> {}; // Pointer v8::Isolate *
struct _ast7031: NamedDeclName<_str82>, ParmVarDecl<_ast7007> {}; // ParmVar callback
struct _ast7032: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7033: FunctionProtoType<_ast122, Pack<_ast7029, _ast7007, _ast2460>, SameType> {}; // FunctionProto void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _ast7034: NamedDeclName<_str999>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7037, Pack<_ast7035, _ast7036>>>, _ast7021>> {}; // CXXMethod AddMicrotasksCompletedCallback
struct _ast7035: NamedDeclName<_str82>, ParmVarDecl<_ast7005> {}; // ParmVar callback
struct _ast7036: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7037: FunctionProtoType<_ast122, Pack<_ast7005, _ast2460>, SameType> {}; // FunctionProto void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ast7038: NamedDeclName<_str1000>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7037, Pack<_ast7039, _ast7040>>>, _ast7021>> {}; // CXXMethod RemoveMicrotasksCompletedCallback
struct _ast7039: NamedDeclName<_str82>, ParmVarDecl<_ast7005> {}; // ParmVar callback
struct _ast7040: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7041: NamedDeclName<_str1001>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast7042>>>, _ast7021>> {}; // CXXMethod PerformCheckpoint
struct _ast7042: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7043: NamedDeclName<_str1002>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast7044>> {}; // CXXMethod IsRunningMicrotasks
struct _ast7044: PointerType<_ast7045> {}; // Pointer const v8::MicrotaskQueue *
struct _ast7045: ConstQualifiedType<_ast56> {}; // Record const v8::MicrotaskQueue
struct _ast7046: NamedDeclName<_str1003>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3253, Pack<>>>, _ast7044>> {}; // CXXMethod GetMicrotasksScopeDepth
struct _ast7047: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7050, Pack<_ast7048>>>, _ast7021>> {}; // CXXConstructor MicrotaskQueue
struct _ast7048: NamedDeclAnon<_str64>, ParmVarDecl<_ast7049> {}; // ParmVar 
struct _ast7049: LValueReferenceType<ReferenceType<_ast7045>> {}; // LValueReference const v8::MicrotaskQueue &
struct _ast7050: FunctionProtoType<_ast122, Pack<_ast7049>, SameType> {}; // FunctionProto void (const v8::MicrotaskQueue &)
struct _ast7051: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7053, Pack<_ast7052>>>, _ast7021>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7052: NamedDeclAnon<_str64>, ParmVarDecl<_ast7049> {}; // ParmVar 
struct _ast7053: FunctionProtoType<_ast7054, Pack<_ast7049>, SameType> {}; // FunctionProto v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _ast7054: LValueReferenceType<ReferenceType<_ast56>> {}; // LValueReference v8::MicrotaskQueue &
struct _ast7055: NamedDeclName<_str1004>, TypeDecl<_ast7056> {}; // CXXRecord MicrotasksScope
struct _ast7056: StructOrClassRecordType<RecordType<_ast7055>> {}; // Record v8::MicrotasksScope
struct _ast7057: NamedDeclName<_str1004>, TypeDecl<_ast7056> {}; // CXXRecord MicrotasksScope
struct _ast7058: NamedDeclName<_str1005>, TypeDecl<_ast7059> {}; // Enum Type
struct _ast7059: EnumType<_ast7058, _ast2095> {}; // Enum v8::MicrotasksScope::Type
struct _ast7060: NamedDeclName<_str1006> {}; // EnumConstant kRunMicrotasks
struct _ast7061: NamedDeclName<_str1007> {}; // EnumConstant kDoNotRunMicrotasks
struct _ast7062: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7065, Pack<_ast7063, _ast7064>>>, _ast7066>> {}; // CXXConstructor MicrotasksScope
struct _ast7063: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7064: NamedDeclName<_str83>, ParmVarDecl<_ast7059> {}; // ParmVar type
struct _ast7065: FunctionProtoType<_ast122, Pack<_ast198, _ast7059>, SameType> {}; // FunctionProto void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _ast7066: PointerType<_ast7056> {}; // Pointer v8::MicrotasksScope *
struct _ast7067: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7071, Pack<_ast7068, _ast7069, _ast7070>>>, _ast7066>> {}; // CXXConstructor MicrotasksScope
struct _ast7068: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7069: NamedDeclName<_str1008>, ParmVarDecl<_ast7021> {}; // ParmVar microtask_queue
struct _ast7070: NamedDeclName<_str83>, ParmVarDecl<_ast7059> {}; // ParmVar type
struct _ast7071: FunctionProtoType<_ast122, Pack<_ast198, _ast7021, _ast7059>, SameType> {}; // FunctionProto void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
struct _ast7072: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7073, Pack<>>>, _ast7066>> {}; // CXXDestructor ~MicrotasksScope
struct _ast7073: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7074: MethodDecl<FunctionDecl<_ast3163, Pack<_ast7075>>>, NamedDeclName<_str1001> {}; // CXXMethod PerformCheckpoint
struct _ast7075: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7076: MethodDecl<FunctionDecl<_ast3169, Pack<_ast7077>>>, NamedDeclName<_str1009> {}; // CXXMethod GetCurrentDepth
struct _ast7077: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7078: MethodDecl<FunctionDecl<_ast7080, Pack<_ast7079>>>, NamedDeclName<_str1002> {}; // CXXMethod IsRunningMicrotasks
struct _ast7079: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7080: FunctionProtoType<_ast137, Pack<_ast198>, SameType> {}; // FunctionProto bool (v8::Isolate *)
struct _ast7081: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7085, Pack<_ast7082>>>, _ast7066>> {}; // CXXConstructor MicrotasksScope
struct _ast7082: NamedDeclAnon<_str64>, ParmVarDecl<_ast7083> {}; // ParmVar 
struct _ast7083: LValueReferenceType<ReferenceType<_ast7084>> {}; // LValueReference const v8::MicrotasksScope &
struct _ast7084: ConstQualifiedType<_ast7056> {}; // Record const v8::MicrotasksScope
struct _ast7085: FunctionProtoType<_ast122, Pack<_ast7083>, SameType> {}; // FunctionProto void (const v8::MicrotasksScope &)
struct _ast7086: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7088, Pack<_ast7087>>>, _ast7066>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7087: NamedDeclAnon<_str64>, ParmVarDecl<_ast7083> {}; // ParmVar 
struct _ast7088: FunctionProtoType<_ast7089, Pack<_ast7083>, SameType> {}; // FunctionProto v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _ast7089: LValueReferenceType<ReferenceType<_ast7056>> {}; // LValueReference v8::MicrotasksScope &
struct _ast7090: NamedDeclName<_str1010>, TypeDecl<_ast7091> {}; // Typedef FailedAccessCheckCallback
struct _ast7091: TypedefType<_ast7090> {}; // Typedef v8::FailedAccessCheckCallback
struct _ast7092: NamedDeclName<_str1011>, TypeDecl<_ast7093> {}; // Typedef AllowCodeGenerationFromStringsCallback
struct _ast7093: TypedefType<_ast7092> {}; // Typedef v8::AllowCodeGenerationFromStringsCallback
struct _ast7094: NamedDeclName<_str1012>, TypeDecl<_ast7095> {}; // Typedef ExtensionCallback
struct _ast7095: TypedefType<_ast7094> {}; // Typedef v8::ExtensionCallback
struct _ast7096: NamedDeclName<_str1013>, TypeDecl<_ast7097> {}; // Typedef AllowWasmCodeGenerationCallback
struct _ast7097: TypedefType<_ast7096> {}; // Typedef v8::AllowWasmCodeGenerationCallback
struct _ast7098: NamedDeclName<_str1014>, TypeDecl<_ast7099> {}; // Typedef ApiImplementationCallback
struct _ast7099: TypedefType<_ast7098> {}; // Typedef v8::ApiImplementationCallback
struct _ast7100: NamedDeclName<_str1015>, TypeDecl<_ast7101> {}; // Typedef WasmStreamingCallback
struct _ast7101: TypedefType<_ast7100> {}; // Typedef v8::WasmStreamingCallback
struct _ast7102: NamedDeclName<_str1016>, TypeDecl<_ast7103> {}; // Typedef WasmThreadsEnabledCallback
struct _ast7103: TypedefType<_ast7102> {}; // Typedef v8::WasmThreadsEnabledCallback
struct _ast7104: NamedDeclName<_str1017>, TypeDecl<_ast7105> {}; // Enum GCType
struct _ast7105: EnumType<_ast7104, _ast2095> {}; // Enum v8::GCType
struct _ast7106: NamedDeclName<_str1018> {}; // EnumConstant kGCTypeScavenge
struct _ast7107: NamedDeclName<_str1019> {}; // EnumConstant kGCTypeMarkSweepCompact
struct _ast7108: NamedDeclName<_str1020> {}; // EnumConstant kGCTypeIncrementalMarking
struct _ast7109: NamedDeclName<_str1021> {}; // EnumConstant kGCTypeProcessWeakCallbacks
struct _ast7110: NamedDeclName<_str1022> {}; // EnumConstant kGCTypeAll
struct _ast7111: NamedDeclName<_str1023>, TypeDecl<_ast7112> {}; // Enum GCCallbackFlags
struct _ast7112: EnumType<_ast7111, _ast2095> {}; // Enum v8::GCCallbackFlags
struct _ast7113: NamedDeclName<_str1024> {}; // EnumConstant kNoGCCallbackFlags
struct _ast7114: NamedDeclName<_str1025> {}; // EnumConstant kGCCallbackFlagConstructRetainedObjectInfos
struct _ast7115: NamedDeclName<_str1026> {}; // EnumConstant kGCCallbackFlagForced
struct _ast7116: NamedDeclName<_str1027> {}; // EnumConstant kGCCallbackFlagSynchronousPhantomCallbackProcessing
struct _ast7117: NamedDeclName<_str1028> {}; // EnumConstant kGCCallbackFlagCollectAllAvailableGarbage
struct _ast7118: NamedDeclName<_str1029> {}; // EnumConstant kGCCallbackFlagCollectAllExternalMemory
struct _ast7119: NamedDeclName<_str1030> {}; // EnumConstant kGCCallbackScheduleIdleGarbageCollection
struct _ast7120: NamedDeclName<_str1031>, TypeDecl<_ast7121> {}; // Typedef GCCallback
struct _ast7121: TypedefType<_ast7120> {}; // Typedef v8::GCCallback
struct _ast7122: NamedDeclName<_str1032>, TypeDecl<_ast7123> {}; // Typedef InterruptCallback
struct _ast7123: TypedefType<_ast7122> {}; // Typedef v8::InterruptCallback
struct _ast7124: NamedDeclName<_str1033>, TypeDecl<_ast7125> {}; // Typedef NearHeapLimitCallback
struct _ast7125: TypedefType<_ast7124> {}; // Typedef v8::NearHeapLimitCallback
struct _ast7126: NamedDeclName<_str1034>, TypeDecl<_ast7127> {}; // CXXRecord HeapStatistics
struct _ast7127: StructOrClassRecordType<RecordType<_ast7126>> {}; // Record v8::HeapStatistics
struct _ast7128: NamedDeclName<_str1034>, TypeDecl<_ast7127> {}; // CXXRecord HeapStatistics
struct _ast7129: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7130>> {}; // CXXConstructor HeapStatistics
struct _ast7130: PointerType<_ast7127> {}; // Pointer v8::HeapStatistics *
struct _ast7131: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1035> {}; // CXXMethod total_heap_size
struct _ast7132: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1036> {}; // CXXMethod total_heap_size_executable
struct _ast7133: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1037> {}; // CXXMethod total_physical_size
struct _ast7134: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1038> {}; // CXXMethod total_available_size
struct _ast7135: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1039> {}; // CXXMethod used_heap_size
struct _ast7136: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1040> {}; // CXXMethod heap_size_limit
struct _ast7137: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1041> {}; // CXXMethod malloced_memory
struct _ast7138: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1042> {}; // CXXMethod external_memory
struct _ast7139: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1043> {}; // CXXMethod peak_malloced_memory
struct _ast7140: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1044> {}; // CXXMethod number_of_native_contexts
struct _ast7141: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1045> {}; // CXXMethod number_of_detached_contexts
struct _ast7142: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7130>, NamedDeclName<_str1046> {}; // CXXMethod does_zap_garbage
struct _ast7143: NamedDeclName<_str1047>, TypeDecl<_ast7144> {}; // CXXRecord HeapSpaceStatistics
struct _ast7144: StructOrClassRecordType<RecordType<_ast7143>> {}; // Record v8::HeapSpaceStatistics
struct _ast7145: NamedDeclName<_str1047>, TypeDecl<_ast7144> {}; // CXXRecord HeapSpaceStatistics
struct _ast7146: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7147>> {}; // CXXConstructor HeapSpaceStatistics
struct _ast7147: PointerType<_ast7144> {}; // Pointer v8::HeapSpaceStatistics *
struct _ast7148: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7149, Pack<>>>, _ast7147>, NamedDeclName<_str1048> {}; // CXXMethod space_name
struct _ast7149: FunctionProtoType<_ast2108, Pack<>, SameType> {}; // FunctionProto const char *()
struct _ast7150: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7147>, NamedDeclName<_str1049> {}; // CXXMethod space_size
struct _ast7151: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7147>, NamedDeclName<_str1050> {}; // CXXMethod space_used_size
struct _ast7152: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7147>, NamedDeclName<_str1051> {}; // CXXMethod space_available_size
struct _ast7153: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7147>, NamedDeclName<_str1052> {}; // CXXMethod physical_space_size
struct _ast7154: NamedDeclName<_str1053>, TypeDecl<_ast7155> {}; // CXXRecord HeapObjectStatistics
struct _ast7155: StructOrClassRecordType<RecordType<_ast7154>> {}; // Record v8::HeapObjectStatistics
struct _ast7156: NamedDeclName<_str1053>, TypeDecl<_ast7155> {}; // CXXRecord HeapObjectStatistics
struct _ast7157: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7158>> {}; // CXXConstructor HeapObjectStatistics
struct _ast7158: PointerType<_ast7155> {}; // Pointer v8::HeapObjectStatistics *
struct _ast7159: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7149, Pack<>>>, _ast7158>, NamedDeclName<_str1054> {}; // CXXMethod object_type
struct _ast7160: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7149, Pack<>>>, _ast7158>, NamedDeclName<_str1055> {}; // CXXMethod object_sub_type
struct _ast7161: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7158>, NamedDeclName<_str1056> {}; // CXXMethod object_count
struct _ast7162: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7158>, NamedDeclName<_str1057> {}; // CXXMethod object_size
struct _ast7163: NamedDeclName<_str1058>, TypeDecl<_ast7164> {}; // CXXRecord HeapCodeStatistics
struct _ast7164: StructOrClassRecordType<RecordType<_ast7163>> {}; // Record v8::HeapCodeStatistics
struct _ast7165: NamedDeclName<_str1058>, TypeDecl<_ast7164> {}; // CXXRecord HeapCodeStatistics
struct _ast7166: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7167>> {}; // CXXConstructor HeapCodeStatistics
struct _ast7167: PointerType<_ast7164> {}; // Pointer v8::HeapCodeStatistics *
struct _ast7168: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7167>, NamedDeclName<_str1059> {}; // CXXMethod code_and_metadata_size
struct _ast7169: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7167>, NamedDeclName<_str1060> {}; // CXXMethod bytecode_and_metadata_size
struct _ast7170: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast7167>, NamedDeclName<_str1061> {}; // CXXMethod external_script_source_size
struct _ast7171: NamedDeclName<_str1062>, TypeDecl<_ast7172> {}; // CXXRecord JitCodeEvent
struct _ast7172: StructOrClassRecordType<RecordType<_ast7171>> {}; // Record v8::JitCodeEvent
struct _ast7173: NamedDeclName<_str1062>, TypeDecl<_ast7172> {}; // CXXRecord JitCodeEvent
struct _ast7174: NamedDeclName<_str1063>, TypeDecl<_ast7175> {}; // Enum EventType
struct _ast7175: EnumType<_ast7174, _ast2095> {}; // Enum v8::JitCodeEvent::EventType
struct _ast7176: NamedDeclName<_str1064> {}; // EnumConstant CODE_ADDED
struct _ast7177: NamedDeclName<_str1065> {}; // EnumConstant CODE_MOVED
struct _ast7178: NamedDeclName<_str1066> {}; // EnumConstant CODE_REMOVED
struct _ast7179: NamedDeclName<_str1067> {}; // EnumConstant CODE_ADD_LINE_POS_INFO
struct _ast7180: NamedDeclName<_str1068> {}; // EnumConstant CODE_START_LINE_INFO_RECORDING
struct _ast7181: NamedDeclName<_str1069> {}; // EnumConstant CODE_END_LINE_INFO_RECORDING
struct _ast7182: NamedDeclName<_str1070>, TypeDecl<_ast7183> {}; // Enum PositionType
struct _ast7183: EnumType<_ast7182, _ast2095> {}; // Enum v8::JitCodeEvent::PositionType
struct _ast7184: NamedDeclName<_str1071> {}; // EnumConstant POSITION
struct _ast7185: NamedDeclName<_str1072> {}; // EnumConstant STATEMENT_POSITION
struct _ast7186: NamedDeclName<_str1073>, TypeDecl<_ast7187> {}; // Enum CodeType
struct _ast7187: EnumType<_ast7186, _ast2095> {}; // Enum v8::JitCodeEvent::CodeType
struct _ast7188: NamedDeclName<_str1074> {}; // EnumConstant BYTE_CODE
struct _ast7189: NamedDeclName<_str1075> {}; // EnumConstant JIT_CODE
struct _ast7190: NamedDeclName<_str83> {}; // Field type
struct _ast7191: NamedDeclName<_str1076> {}; // Field code_type
struct _ast7192: NamedDeclName<_str1077> {}; // Field code_start
struct _ast7193: NamedDeclName<_str1078> {}; // Field code_len
struct _ast7194: NamedDeclName<_str1079> {}; // Field script
struct _ast7195: NamedDeclName<_str1080> {}; // Field user_data
struct _ast7196: NamedDeclName<_str1081>, TypeDecl<_ast7197> {}; // CXXRecord name_t
struct _ast7197: StructOrClassRecordType<RecordType<_ast7196>> {}; // Record v8::JitCodeEvent::name_t
struct _ast7198: NamedDeclName<_str1081>, TypeDecl<_ast7197> {}; // CXXRecord name_t
struct _ast7199: NamedDeclName<_str529> {}; // Field str
struct _ast7200: NamedDeclName<_str1082> {}; // Field len
struct _ast7201: NamedDeclName<_str1083>, TypeDecl<_ast7202> {}; // CXXRecord line_info_t
struct _ast7202: StructOrClassRecordType<RecordType<_ast7201>> {}; // Record v8::JitCodeEvent::line_info_t
struct _ast7203: NamedDeclName<_str1083>, TypeDecl<_ast7202> {}; // CXXRecord line_info_t
struct _ast7204: NamedDeclName<_str1084> {}; // Field offset
struct _ast7205: NamedDeclName<_str1085> {}; // Field pos
struct _ast7206: NamedDeclName<_str1086> {}; // Field position_type
struct _ast7207: NamedDeclAnon<_str64>, TypeDecl<_ast7208> {}; // CXXRecord 
struct _ast7208: UnionRecordType<RecordType<_ast7207>> {}; // Record v8::JitCodeEvent::(anonymous union at D:\gen8/v8/include/v8.h:7072:3)
struct _ast7209: NamedDeclName<_str531> {}; // Field name
struct _ast7210: NamedDeclName<_str1087> {}; // Field line_info
struct _ast7211: NamedDeclName<_str1088> {}; // Field new_code_start
struct _ast7212: NamedDeclAnon<_str64> {}; // Field 
struct _ast7213: NamedDeclName<_str531> {}; // IndirectField name
struct _ast7214: NamedDeclName<_str1087> {}; // IndirectField line_info
struct _ast7215: NamedDeclName<_str1088> {}; // IndirectField new_code_start
struct _ast7216: NamedDeclName<_str63> {}; // Field isolate
struct _ast7217: NamedDeclName<_str1089>, TypeDecl<_ast7218> {}; // Enum RAILMode
struct _ast7218: EnumType<_ast7217, _ast7219> {}; // Enum v8::RAILMode
struct _ast7219: ABIIndependentSizeType<UnsignedIntegerType, 4> {}; // Builtin unsigned int
struct _ast7220: NamedDeclName<_str1090> {}; // EnumConstant PERFORMANCE_RESPONSE
struct _ast7221: NamedDeclName<_str1091> {}; // EnumConstant PERFORMANCE_ANIMATION
struct _ast7222: NamedDeclName<_str1092> {}; // EnumConstant PERFORMANCE_IDLE
struct _ast7223: NamedDeclName<_str1093> {}; // EnumConstant PERFORMANCE_LOAD
struct _ast7224: NamedDeclName<_str1094>, TypeDecl<_ast7225> {}; // Enum JitCodeEventOptions
struct _ast7225: EnumType<_ast7224, _ast2095> {}; // Enum v8::JitCodeEventOptions
struct _ast7226: NamedDeclName<_str1095> {}; // EnumConstant kJitCodeEventDefault
struct _ast7227: NamedDeclName<_str1096> {}; // EnumConstant kJitCodeEventEnumExisting
struct _ast7228: NamedDeclName<_str1097>, TypeDecl<_ast7229> {}; // Typedef JitCodeEventHandler
struct _ast7229: TypedefType<_ast7228> {}; // Typedef v8::JitCodeEventHandler
struct _ast7230: NamedDeclName<_str1098>, TypeDecl<_ast7231> {}; // Typedef UnhandledExceptionCallback
struct _ast7231: TypedefType<_ast7230> {}; // Typedef v8::UnhandledExceptionCallback
struct _ast7232: NamedDeclName<_str1099>, TypeDecl<_ast7233> {}; // CXXRecord ExternalResourceVisitor
struct _ast7233: StructOrClassRecordType<RecordType<_ast7232>> {}; // Record v8::ExternalResourceVisitor
struct _ast7234: NamedDeclName<_str1099>, TypeDecl<_ast7233> {}; // CXXRecord ExternalResourceVisitor
struct _ast7235: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7236, Pack<>>>, _ast7237>>> {}; // CXXDestructor ~ExternalResourceVisitor
struct _ast7236: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7237: PointerType<_ast7233> {}; // Pointer v8::ExternalResourceVisitor *
struct _ast7238: NamedDeclName<_str1100>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7241, Pack<_ast7239>>>, _ast7237>> {}; // CXXMethod VisitExternalString
struct _ast7239: NamedDeclName<_str1101>, ParmVarDecl<_ast7240> {}; // ParmVar string
struct _ast7241: FunctionProtoType<_ast122, Pack<_ast7240>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast7242: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7246, Pack<_ast7243>>>, _ast7237>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7243: NamedDeclAnon<_str64>, ParmVarDecl<_ast7244> {}; // ParmVar 
struct _ast7244: LValueReferenceType<ReferenceType<_ast7245>> {}; // LValueReference const v8::ExternalResourceVisitor &
struct _ast7245: ConstQualifiedType<_ast7233> {}; // Record const v8::ExternalResourceVisitor
struct _ast7246: FunctionProtoType<_ast7247, Pack<_ast7244>, SameType> {}; // FunctionProto v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
struct _ast7247: LValueReferenceType<ReferenceType<_ast7233>> {}; // LValueReference v8::ExternalResourceVisitor &
struct _ast7248: NamedDeclName<_str1102>, TypeDecl<_ast7249> {}; // CXXRecord PersistentHandleVisitor
struct _ast7249: StructOrClassRecordType<RecordType<_ast7248>> {}; // Record v8::PersistentHandleVisitor
struct _ast7250: NamedDeclName<_str1102>, TypeDecl<_ast7249> {}; // CXXRecord PersistentHandleVisitor
struct _ast7251: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7252, Pack<>>>, _ast7253>>> {}; // CXXDestructor ~PersistentHandleVisitor
struct _ast7252: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7253: PointerType<_ast7249> {}; // Pointer v8::PersistentHandleVisitor *
struct _ast7254: NamedDeclName<_str1103>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7259, Pack<_ast7255, _ast7258>>>, _ast7253>> {}; // CXXMethod VisitPersistentHandle
struct _ast7255: NamedDeclName<_str152>, ParmVarDecl<_ast7256> {}; // ParmVar value
struct _ast7256: PointerType<_ast7257> {}; // Pointer Persistent<v8::Value> *
struct _ast7258: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast7259: FunctionProtoType<_ast122, Pack<_ast7256, _ast2115>, SameType> {}; // FunctionProto void (Persistent<v8::Value> *, uint16_t)
struct _ast7260: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7264, Pack<_ast7261>>>, _ast7253>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7261: NamedDeclAnon<_str64>, ParmVarDecl<_ast7262> {}; // ParmVar 
struct _ast7262: LValueReferenceType<ReferenceType<_ast7263>> {}; // LValueReference const v8::PersistentHandleVisitor &
struct _ast7263: ConstQualifiedType<_ast7249> {}; // Record const v8::PersistentHandleVisitor
struct _ast7264: FunctionProtoType<_ast7265, Pack<_ast7262>, SameType> {}; // FunctionProto v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
struct _ast7265: LValueReferenceType<ReferenceType<_ast7249>> {}; // LValueReference v8::PersistentHandleVisitor &
struct _ast7266: NamedDeclName<_str1104>, TypeDecl<_ast7267> {}; // Enum MemoryPressureLevel
struct _ast7267: EnumType<_ast7266, _ast2095> {}; // Enum v8::MemoryPressureLevel
struct _ast7268: NamedDeclName<_str823> {}; // EnumConstant kNone
struct _ast7269: NamedDeclName<_str1105> {}; // EnumConstant kModerate
struct _ast7270: NamedDeclName<_str1106> {}; // EnumConstant kCritical
struct _ast7271: NamedDeclName<_str1107>, TypeDecl<_ast7272> {}; // CXXRecord EmbedderHeapTracer
struct _ast7272: StructOrClassRecordType<RecordType<_ast7271>> {}; // Record v8::EmbedderHeapTracer
struct _ast7273: NamedDeclName<_str1107>, TypeDecl<_ast7272> {}; // CXXRecord EmbedderHeapTracer
struct _ast7274: NamedDeclName<_str1108>, TypeDecl<_ast7275> {}; // Enum TraceFlags
struct _ast7275: EnumType<_ast7274, _ast3914> {}; // Enum v8::EmbedderHeapTracer::TraceFlags
struct _ast7276: NamedDeclName<_str1109> {}; // EnumConstant kNoFlags
struct _ast7277: NamedDeclName<_str1110> {}; // EnumConstant kReduceMemory
struct _ast7278: NamedDeclName<_str1111>, TypeDecl<_ast7279> {}; // Enum EmbedderStackState
struct _ast7279: EnumType<_ast7278, _ast2095> {}; // Enum v8::EmbedderHeapTracer::EmbedderStackState
struct _ast7280: NamedDeclName<_str1112> {}; // EnumConstant kUnknown
struct _ast7281: NamedDeclName<_str1113> {}; // EnumConstant kNonEmpty
struct _ast7282: NamedDeclName<_str1114> {}; // EnumConstant kEmpty
struct _ast7283: NamedDeclName<_str1115>, TypeDecl<_ast7284> {}; // CXXRecord TracedGlobalHandleVisitor
struct _ast7284: StructOrClassRecordType<RecordType<_ast7283>> {}; // Record v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7285: NamedDeclName<_str1115>, TypeDecl<_ast7284> {}; // CXXRecord TracedGlobalHandleVisitor
struct _ast7286: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7287, Pack<>>>, _ast7288>>> {}; // CXXDestructor ~TracedGlobalHandleVisitor
struct _ast7287: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7288: PointerType<_ast7284> {}; // Pointer v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ast7289: NamedDeclName<_str1116>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7294, Pack<_ast7290>>>, _ast7288>> {}; // CXXMethod VisitTracedGlobalHandle
struct _ast7290: NamedDeclName<_str152>, ParmVarDecl<_ast7291> {}; // ParmVar value
struct _ast7291: LValueReferenceType<ReferenceType<_ast7292>> {}; // LValueReference const TracedGlobal<v8::Value> &
struct _ast7292: ConstQualifiedType<_ast7293> {}; // TemplateSpecialization const TracedGlobal<v8::Value>
struct _ast7294: FunctionProtoType<_ast122, Pack<_ast7291>, SameType> {}; // FunctionProto void (const TracedGlobal<v8::Value> &)
struct _ast7295: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7299, Pack<_ast7296>>>, _ast7288>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7296: NamedDeclAnon<_str64>, ParmVarDecl<_ast7297> {}; // ParmVar 
struct _ast7297: LValueReferenceType<ReferenceType<_ast7298>> {}; // LValueReference const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7298: ConstQualifiedType<_ast7284> {}; // Record const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7299: FunctionProtoType<_ast7300, Pack<_ast7297>, SameType> {}; // FunctionProto v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ast7300: LValueReferenceType<ReferenceType<_ast7284>> {}; // LValueReference v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7301: NamedDeclName<_str1117>, TypeDecl<_ast7302> {}; // CXXRecord TraceSummary
struct _ast7302: StructOrClassRecordType<RecordType<_ast7301>> {}; // Record v8::EmbedderHeapTracer::TraceSummary
struct _ast7303: NamedDeclName<_str1117>, TypeDecl<_ast7302> {}; // CXXRecord TraceSummary
struct _ast7304: NamedDeclName<_str820> {}; // Field time
struct _ast7305: NamedDeclName<_str1118> {}; // Field allocated_size
struct _ast7306: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7307, Pack<>>>, _ast7308>>> {}; // CXXDestructor ~EmbedderHeapTracer
struct _ast7307: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7308: PointerType<_ast7272> {}; // Pointer v8::EmbedderHeapTracer *
struct _ast7309: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7311, Pack<_ast7310>>>, _ast7308>, NamedDeclName<_str1119> {}; // CXXMethod IterateTracedGlobalHandles
struct _ast7310: NamedDeclName<_str1120>, ParmVarDecl<_ast7288> {}; // ParmVar visitor
struct _ast7311: FunctionProtoType<_ast122, Pack<_ast7288>, SameType> {}; // FunctionProto void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _ast7312: NamedDeclName<_str1121>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7317, Pack<_ast7313>>>, _ast7308>> {}; // CXXMethod RegisterV8References
struct _ast7313: NamedDeclName<_str123>, ParmVarDecl<_ast7314> {}; // ParmVar embedder_fields
struct _ast7314: LValueReferenceType<ReferenceType<_ast7315>> {}; // LValueReference const std::vector<std::pair<void *, void *> > &
struct _ast7315: ConstQualifiedType<_ast7316> {}; // Elaborated const std::vector<std::pair<void *, void *> >
struct _ast7317: FunctionProtoType<_ast122, Pack<_ast7314>, SameType> {}; // FunctionProto void (const std::vector<std::pair<void *, void *> > &)
struct _ast7318: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7323, Pack<_ast7319>>>, _ast7308>, NamedDeclName<_str1122> {}; // CXXMethod RegisterEmbedderReference
struct _ast7319: NamedDeclName<_str1123>, ParmVarDecl<_ast7320> {}; // ParmVar ref
struct _ast7320: LValueReferenceType<ReferenceType<_ast7321>> {}; // LValueReference const TracedGlobal<v8::Value> &
struct _ast7321: ConstQualifiedType<_ast7322> {}; // TemplateSpecialization const TracedGlobal<v8::Value>
struct _ast7323: FunctionProtoType<_ast122, Pack<_ast7320>, SameType> {}; // FunctionProto void (const TracedGlobal<v8::Value> &)
struct _ast7324: NamedDeclName<_str1124>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7308>> {}; // CXXMethod TracePrologue
struct _ast7325: NamedDeclName<_str1124>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7327, Pack<_ast7326>>>, _ast7308>> {}; // CXXMethod TracePrologue
struct _ast7326: NamedDeclName<_str167>, ParmVarDecl<_ast7275> {}; // ParmVar flags
struct _ast7327: FunctionProtoType<_ast122, Pack<_ast7275>, SameType> {}; // FunctionProto void (v8::EmbedderHeapTracer::TraceFlags)
struct _ast7328: NamedDeclName<_str1125>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7330, Pack<_ast7329>>>, _ast7308>> {}; // CXXMethod AdvanceTracing
struct _ast7329: NamedDeclName<_str1126>, ParmVarDecl<_ast3918> {}; // ParmVar deadline_in_ms
struct _ast7330: FunctionProtoType<_ast137, Pack<_ast3918>, SameType> {}; // FunctionProto bool (double)
struct _ast7331: NamedDeclName<_str1127>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast7308>> {}; // CXXMethod IsTracingDone
struct _ast7332: NamedDeclName<_str1128>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7308>> {}; // CXXMethod TraceEpilogue
struct _ast7333: NamedDeclName<_str1128>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7336, Pack<_ast7334>>>, _ast7308>> {}; // CXXMethod TraceEpilogue
struct _ast7334: NamedDeclName<_str1129>, ParmVarDecl<_ast7335> {}; // ParmVar trace_summary
struct _ast7335: PointerType<_ast7302> {}; // Pointer v8::EmbedderHeapTracer::TraceSummary *
struct _ast7336: FunctionProtoType<_ast122, Pack<_ast7335>, SameType> {}; // FunctionProto void (v8::EmbedderHeapTracer::TraceSummary *)
struct _ast7337: NamedDeclName<_str1130>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7339, Pack<_ast7338>>>, _ast7308>> {}; // CXXMethod EnterFinalPause
struct _ast7338: NamedDeclName<_str1131>, ParmVarDecl<_ast7279> {}; // ParmVar stack_state
struct _ast7339: FunctionProtoType<_ast122, Pack<_ast7279>, SameType> {}; // FunctionProto void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ast7340: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7308>, NamedDeclName<_str1132> {}; // CXXMethod FinalizeTracing
struct _ast7341: NamedDeclName<_str1133>, VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7346, Pack<_ast7342>>>, _ast7308>> {}; // CXXMethod IsRootForNonTracingGC
struct _ast7342: NamedDeclName<_str117>, ParmVarDecl<_ast7343> {}; // ParmVar handle
struct _ast7343: LValueReferenceType<ReferenceType<_ast7344>> {}; // LValueReference const v8::TracedGlobal<v8::Value> &
struct _ast7344: ConstQualifiedType<_ast7345> {}; // Elaborated const v8::TracedGlobal<v8::Value>
struct _ast7346: FunctionProtoType<_ast137, Pack<_ast7343>, SameType> {}; // FunctionProto bool (const v8::TracedGlobal<v8::Value> &)
struct _ast7347: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7339, Pack<_ast7348>>>, _ast7308>, NamedDeclName<_str1134> {}; // CXXMethod GarbageCollectionForTesting
struct _ast7348: NamedDeclName<_str1131>, ParmVarDecl<_ast7279> {}; // ParmVar stack_state
struct _ast7349: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast7350>>>, _ast7308>, NamedDeclName<_str1135> {}; // CXXMethod IncreaseAllocatedSize
struct _ast7350: NamedDeclName<_str768>, ParmVarDecl<_ast3539> {}; // ParmVar bytes
struct _ast7351: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6866, Pack<_ast7352>>>, _ast7308>, NamedDeclName<_str1136> {}; // CXXMethod DecreaseAllocatedSize
struct _ast7352: NamedDeclName<_str768>, ParmVarDecl<_ast3539> {}; // ParmVar bytes
struct _ast7353: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7354, Pack<>>>, _ast7355>, NamedDeclName<_str63> {}; // CXXMethod isolate
struct _ast7354: FunctionProtoType<_ast7029, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::Isolate *() const
struct _ast7355: PointerType<_ast7356> {}; // Pointer const v8::EmbedderHeapTracer *
struct _ast7356: ConstQualifiedType<_ast7272> {}; // Record const v8::EmbedderHeapTracer
struct _ast7357: NamedDeclName<_str1137> {}; // Field isolate_
struct _ast7358: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7361, Pack<_ast7359>>>, _ast7308>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7359: NamedDeclAnon<_str64>, ParmVarDecl<_ast7360> {}; // ParmVar 
struct _ast7360: LValueReferenceType<ReferenceType<_ast7356>> {}; // LValueReference const v8::EmbedderHeapTracer &
struct _ast7361: FunctionProtoType<_ast7362, Pack<_ast7360>, SameType> {}; // FunctionProto v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _ast7362: LValueReferenceType<ReferenceType<_ast7272>> {}; // LValueReference v8::EmbedderHeapTracer &
struct _ast7363: NamedDeclName<_str1138>, TypeDecl<_ast7364> {}; // CXXRecord SerializeInternalFieldsCallback
struct _ast7364: StructOrClassRecordType<RecordType<_ast7363>> {}; // Record v8::SerializeInternalFieldsCallback
struct _ast7365: NamedDeclName<_str1138>, TypeDecl<_ast7364> {}; // CXXRecord SerializeInternalFieldsCallback
struct _ast7366: NamedDeclName<_str1139>, TypeDecl<_ast7367> {}; // Typedef CallbackFunction
struct _ast7367: TypedefType<_ast7366> {}; // Typedef v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ast7368: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7371, Pack<_ast7369, _ast7370>>>, _ast7372>> {}; // CXXConstructor SerializeInternalFieldsCallback
struct _ast7369: NamedDeclName<_str290>, ParmVarDecl<_ast7367> {}; // ParmVar function
struct _ast7370: NamedDeclName<_str1140>, ParmVarDecl<_ast2460> {}; // ParmVar data_arg
struct _ast7371: FunctionProtoType<_ast122, Pack<_ast7367, _ast2460>, SameType> {}; // FunctionProto void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7372: PointerType<_ast7364> {}; // Pointer v8::SerializeInternalFieldsCallback *
struct _ast7373: NamedDeclName<_str82> {}; // Field callback
struct _ast7374: NamedDeclName<_str129> {}; // Field data
struct _ast7375: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7379, Pack<_ast7376>>>, _ast7372>> {}; // CXXConstructor SerializeInternalFieldsCallback
struct _ast7376: NamedDeclAnon<_str64>, ParmVarDecl<_ast7377> {}; // ParmVar 
struct _ast7377: LValueReferenceType<ReferenceType<_ast7378>> {}; // LValueReference const v8::SerializeInternalFieldsCallback &
struct _ast7378: ConstQualifiedType<_ast7364> {}; // Record const v8::SerializeInternalFieldsCallback
struct _ast7379: FunctionProtoType<_ast122, Pack<_ast7377>, SameType> {}; // FunctionProto void (const v8::SerializeInternalFieldsCallback &)
struct _ast7380: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7383, Pack<_ast7381>>>, _ast7372>> {}; // CXXConstructor SerializeInternalFieldsCallback
struct _ast7381: NamedDeclAnon<_str64>, ParmVarDecl<_ast7382> {}; // ParmVar 
struct _ast7382: RValueReferenceType<ReferenceType<_ast7364>> {}; // RValueReference v8::SerializeInternalFieldsCallback &&
struct _ast7383: FunctionProtoType<_ast122, Pack<_ast7382>, SameType> {}; // FunctionProto void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _ast7384: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast7372>> {}; // CXXDestructor ~SerializeInternalFieldsCallback
struct _ast7385: NamedDeclName<_str1141>, TypeDecl<_ast7386> {}; // Typedef SerializeEmbedderFieldsCallback
struct _ast7386: TypedefType<_ast7385> {}; // Typedef v8::SerializeEmbedderFieldsCallback
struct _ast7387: NamedDeclName<_str1142>, TypeDecl<_ast7388> {}; // CXXRecord DeserializeInternalFieldsCallback
struct _ast7388: StructOrClassRecordType<RecordType<_ast7387>> {}; // Record v8::DeserializeInternalFieldsCallback
struct _ast7389: NamedDeclName<_str1142>, TypeDecl<_ast7388> {}; // CXXRecord DeserializeInternalFieldsCallback
struct _ast7390: NamedDeclName<_str1139>, TypeDecl<_ast7391> {}; // Typedef CallbackFunction
struct _ast7391: TypedefType<_ast7390> {}; // Typedef v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ast7392: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7395, Pack<_ast7393, _ast7394>>>, _ast7396>> {}; // CXXConstructor DeserializeInternalFieldsCallback
struct _ast7393: NamedDeclName<_str290>, ParmVarDecl<_ast7391> {}; // ParmVar function
struct _ast7394: NamedDeclName<_str1140>, ParmVarDecl<_ast2460> {}; // ParmVar data_arg
struct _ast7395: FunctionProtoType<_ast122, Pack<_ast7391, _ast2460>, SameType> {}; // FunctionProto void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7396: PointerType<_ast7388> {}; // Pointer v8::DeserializeInternalFieldsCallback *
struct _ast7397: NamedDeclName<_str82> {}; // Field callback
struct _ast7398: NamedDeclName<_str129> {}; // Field data
struct _ast7399: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7403, Pack<_ast7400>>>, _ast7396>> {}; // CXXConstructor DeserializeInternalFieldsCallback
struct _ast7400: NamedDeclAnon<_str64>, ParmVarDecl<_ast7401> {}; // ParmVar 
struct _ast7401: LValueReferenceType<ReferenceType<_ast7402>> {}; // LValueReference const v8::DeserializeInternalFieldsCallback &
struct _ast7402: ConstQualifiedType<_ast7388> {}; // Record const v8::DeserializeInternalFieldsCallback
struct _ast7403: FunctionProtoType<_ast122, Pack<_ast7401>, SameType> {}; // FunctionProto void (const v8::DeserializeInternalFieldsCallback &)
struct _ast7404: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7407, Pack<_ast7405>>>, _ast7396>> {}; // CXXConstructor DeserializeInternalFieldsCallback
struct _ast7405: NamedDeclAnon<_str64>, ParmVarDecl<_ast7406> {}; // ParmVar 
struct _ast7406: RValueReferenceType<ReferenceType<_ast7388>> {}; // RValueReference v8::DeserializeInternalFieldsCallback &&
struct _ast7407: FunctionProtoType<_ast122, Pack<_ast7406>, SameType> {}; // FunctionProto void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ast7408: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast7396>> {}; // CXXDestructor ~DeserializeInternalFieldsCallback
struct _ast7409: NamedDeclName<_str1143>, TypeDecl<_ast7410> {}; // Typedef DeserializeEmbedderFieldsCallback
struct _ast7410: TypedefType<_ast7409> {}; // Typedef v8::DeserializeEmbedderFieldsCallback
struct _ast7411: NamedDeclName<_str4>, TypeDecl<_ast7> {}; // CXXRecord Isolate
struct _ast7412: NamedDeclName<_str1144>, TypeDecl<_ast7413> {}; // CXXRecord CreateParams
struct _ast7413: StructOrClassRecordType<RecordType<_ast7412>> {}; // Record v8::Isolate::CreateParams
struct _ast7414: NamedDeclName<_str1144>, TypeDecl<_ast7413> {}; // CXXRecord CreateParams
struct _ast7415: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7416>> {}; // CXXConstructor CreateParams
struct _ast7416: PointerType<_ast7413> {}; // Pointer v8::Isolate::CreateParams *
struct _ast7417: NamedDeclName<_str1145> {}; // Field code_event_handler
struct _ast7418: NamedDeclName<_str1146> {}; // Field constraints
struct _ast7419: NamedDeclName<_str1147> {}; // Field snapshot_blob
struct _ast7420: NamedDeclName<_str1148> {}; // Field counter_lookup_callback
struct _ast7421: NamedDeclName<_str1149> {}; // Field create_histogram_callback
struct _ast7422: NamedDeclName<_str1150> {}; // Field add_histogram_sample_callback
struct _ast7423: NamedDeclName<_str1151> {}; // Field array_buffer_allocator
struct _ast7424: NamedDeclName<_str1152> {}; // Field external_references
struct _ast7425: NamedDeclName<_str1153> {}; // Field allow_atomics_wait
struct _ast7426: NamedDeclName<_str1154> {}; // Field only_terminate_in_safe_scope
struct _ast7427: NamedDeclName<_str1155>, TypeDecl<_ast7428> {}; // CXXRecord Scope
struct _ast7428: StructOrClassRecordType<RecordType<_ast7427>> {}; // Record v8::Isolate::Scope
struct _ast7429: NamedDeclName<_str1155>, TypeDecl<_ast7428> {}; // CXXRecord Scope
struct _ast7430: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast7431>>>, _ast7432>> {}; // CXXConstructor Scope
struct _ast7431: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7432: PointerType<_ast7428> {}; // Pointer v8::Isolate::Scope *
struct _ast7433: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast7432>> {}; // CXXDestructor ~Scope
struct _ast7434: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7438, Pack<_ast7435>>>, _ast7432>> {}; // CXXConstructor Scope
struct _ast7435: NamedDeclAnon<_str64>, ParmVarDecl<_ast7436> {}; // ParmVar 
struct _ast7436: LValueReferenceType<ReferenceType<_ast7437>> {}; // LValueReference const v8::Isolate::Scope &
struct _ast7437: ConstQualifiedType<_ast7428> {}; // Record const v8::Isolate::Scope
struct _ast7438: FunctionProtoType<_ast122, Pack<_ast7436>, SameType> {}; // FunctionProto void (const v8::Isolate::Scope &)
struct _ast7439: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7441, Pack<_ast7440>>>, _ast7432>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7440: NamedDeclAnon<_str64>, ParmVarDecl<_ast7436> {}; // ParmVar 
struct _ast7441: FunctionProtoType<_ast7442, Pack<_ast7436>, SameType> {}; // FunctionProto v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _ast7442: LValueReferenceType<ReferenceType<_ast7428>> {}; // LValueReference v8::Isolate::Scope &
struct _ast7443: NamedDeclName<_str1156>, TypeDecl<_ast7444> {}; // CXXRecord DisallowJavascriptExecutionScope
struct _ast7444: StructOrClassRecordType<RecordType<_ast7443>> {}; // Record v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7445: NamedDeclName<_str1156>, TypeDecl<_ast7444> {}; // CXXRecord DisallowJavascriptExecutionScope
struct _ast7446: NamedDeclName<_str1157>, TypeDecl<_ast7447> {}; // Enum OnFailure
struct _ast7447: EnumType<_ast7446, _ast2095> {}; // Enum v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ast7448: NamedDeclName<_str1158> {}; // EnumConstant CRASH_ON_FAILURE
struct _ast7449: NamedDeclName<_str1159> {}; // EnumConstant THROW_ON_FAILURE
struct _ast7450: NamedDeclName<_str1160> {}; // EnumConstant DUMP_ON_FAILURE
struct _ast7451: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7454, Pack<_ast7452, _ast7453>>>, _ast7455>> {}; // CXXConstructor DisallowJavascriptExecutionScope
struct _ast7452: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7453: NamedDeclName<_str1161>, ParmVarDecl<_ast7447> {}; // ParmVar on_failure
struct _ast7454: FunctionProtoType<_ast122, Pack<_ast198, _ast7447>, SameType> {}; // FunctionProto void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ast7455: PointerType<_ast7444> {}; // Pointer v8::Isolate::DisallowJavascriptExecutionScope *
struct _ast7456: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7457, Pack<>>>, _ast7455>> {}; // CXXDestructor ~DisallowJavascriptExecutionScope
struct _ast7457: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7458: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7462, Pack<_ast7459>>>, _ast7455>> {}; // CXXConstructor DisallowJavascriptExecutionScope
struct _ast7459: NamedDeclAnon<_str64>, ParmVarDecl<_ast7460> {}; // ParmVar 
struct _ast7460: LValueReferenceType<ReferenceType<_ast7461>> {}; // LValueReference const v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7461: ConstQualifiedType<_ast7444> {}; // Record const v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7462: FunctionProtoType<_ast122, Pack<_ast7460>, SameType> {}; // FunctionProto void (const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7463: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7465, Pack<_ast7464>>>, _ast7455>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7464: NamedDeclAnon<_str64>, ParmVarDecl<_ast7460> {}; // ParmVar 
struct _ast7465: FunctionProtoType<_ast7466, Pack<_ast7460>, SameType> {}; // FunctionProto v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7466: LValueReferenceType<ReferenceType<_ast7444>> {}; // LValueReference v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7467: NamedDeclName<_str1162>, TypeDecl<_ast7468> {}; // CXXRecord AllowJavascriptExecutionScope
struct _ast7468: StructOrClassRecordType<RecordType<_ast7467>> {}; // Record v8::Isolate::AllowJavascriptExecutionScope
struct _ast7469: NamedDeclName<_str1162>, TypeDecl<_ast7468> {}; // CXXRecord AllowJavascriptExecutionScope
struct _ast7470: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast7471>>>, _ast7472>> {}; // CXXConstructor AllowJavascriptExecutionScope
struct _ast7471: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7472: PointerType<_ast7468> {}; // Pointer v8::Isolate::AllowJavascriptExecutionScope *
struct _ast7473: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7474, Pack<>>>, _ast7472>> {}; // CXXDestructor ~AllowJavascriptExecutionScope
struct _ast7474: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7475: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7479, Pack<_ast7476>>>, _ast7472>> {}; // CXXConstructor AllowJavascriptExecutionScope
struct _ast7476: NamedDeclAnon<_str64>, ParmVarDecl<_ast7477> {}; // ParmVar 
struct _ast7477: LValueReferenceType<ReferenceType<_ast7478>> {}; // LValueReference const v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7478: ConstQualifiedType<_ast7468> {}; // Record const v8::Isolate::AllowJavascriptExecutionScope
struct _ast7479: FunctionProtoType<_ast122, Pack<_ast7477>, SameType> {}; // FunctionProto void (const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7480: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7482, Pack<_ast7481>>>, _ast7472>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7481: NamedDeclAnon<_str64>, ParmVarDecl<_ast7477> {}; // ParmVar 
struct _ast7482: FunctionProtoType<_ast7483, Pack<_ast7477>, SameType> {}; // FunctionProto v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7483: LValueReferenceType<ReferenceType<_ast7468>> {}; // LValueReference v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7484: NamedDeclName<_str1163>, TypeDecl<_ast7485> {}; // CXXRecord SuppressMicrotaskExecutionScope
struct _ast7485: StructOrClassRecordType<RecordType<_ast7484>> {}; // Record v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7486: NamedDeclName<_str1163>, TypeDecl<_ast7485> {}; // CXXRecord SuppressMicrotaskExecutionScope
struct _ast7487: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast7488>>>, _ast7489>> {}; // CXXConstructor SuppressMicrotaskExecutionScope
struct _ast7488: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7489: PointerType<_ast7485> {}; // Pointer v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ast7490: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7492, Pack<_ast7491>>>, _ast7489>> {}; // CXXConstructor SuppressMicrotaskExecutionScope
struct _ast7491: NamedDeclName<_str1008>, ParmVarDecl<_ast7021> {}; // ParmVar microtask_queue
struct _ast7492: FunctionProtoType<_ast122, Pack<_ast7021>, SameType> {}; // FunctionProto void (v8::MicrotaskQueue *)
struct _ast7493: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7494, Pack<>>>, _ast7489>> {}; // CXXDestructor ~SuppressMicrotaskExecutionScope
struct _ast7494: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7495: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7499, Pack<_ast7496>>>, _ast7489>> {}; // CXXConstructor SuppressMicrotaskExecutionScope
struct _ast7496: NamedDeclAnon<_str64>, ParmVarDecl<_ast7497> {}; // ParmVar 
struct _ast7497: LValueReferenceType<ReferenceType<_ast7498>> {}; // LValueReference const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7498: ConstQualifiedType<_ast7485> {}; // Record const v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7499: FunctionProtoType<_ast122, Pack<_ast7497>, SameType> {}; // FunctionProto void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7500: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7502, Pack<_ast7501>>>, _ast7489>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7501: NamedDeclAnon<_str64>, ParmVarDecl<_ast7497> {}; // ParmVar 
struct _ast7502: FunctionProtoType<_ast7503, Pack<_ast7497>, SameType> {}; // FunctionProto v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7503: LValueReferenceType<ReferenceType<_ast7485>> {}; // LValueReference v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7504: NamedDeclName<_str1164>, TypeDecl<_ast7505> {}; // CXXRecord SafeForTerminationScope
struct _ast7505: StructOrClassRecordType<RecordType<_ast7504>> {}; // Record v8::Isolate::SafeForTerminationScope
struct _ast7506: NamedDeclName<_str1164>, TypeDecl<_ast7505> {}; // CXXRecord SafeForTerminationScope
struct _ast7507: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7509, Pack<_ast7508>>>, _ast7510>> {}; // CXXConstructor SafeForTerminationScope
struct _ast7508: NamedDeclName<_str63>, ParmVarDecl<_ast7029> {}; // ParmVar isolate
struct _ast7509: FunctionProtoType<_ast122, Pack<_ast7029>, SameType> {}; // FunctionProto void (v8::Isolate *)
struct _ast7510: PointerType<_ast7505> {}; // Pointer v8::Isolate::SafeForTerminationScope *
struct _ast7511: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7512, Pack<>>>, _ast7510>> {}; // CXXDestructor ~SafeForTerminationScope
struct _ast7512: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7513: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7517, Pack<_ast7514>>>, _ast7510>> {}; // CXXConstructor SafeForTerminationScope
struct _ast7514: NamedDeclAnon<_str64>, ParmVarDecl<_ast7515> {}; // ParmVar 
struct _ast7515: LValueReferenceType<ReferenceType<_ast7516>> {}; // LValueReference const v8::Isolate::SafeForTerminationScope &
struct _ast7516: ConstQualifiedType<_ast7505> {}; // Record const v8::Isolate::SafeForTerminationScope
struct _ast7517: FunctionProtoType<_ast122, Pack<_ast7515>, SameType> {}; // FunctionProto void (const v8::Isolate::SafeForTerminationScope &)
struct _ast7518: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7520, Pack<_ast7519>>>, _ast7510>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7519: NamedDeclAnon<_str64>, ParmVarDecl<_ast7515> {}; // ParmVar 
struct _ast7520: FunctionProtoType<_ast7521, Pack<_ast7515>, SameType> {}; // FunctionProto v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
struct _ast7521: LValueReferenceType<ReferenceType<_ast7505>> {}; // LValueReference v8::Isolate::SafeForTerminationScope &
struct _ast7522: NamedDeclName<_str1165>, TypeDecl<_ast7523> {}; // Enum GarbageCollectionType
struct _ast7523: EnumType<_ast7522, _ast2095> {}; // Enum v8::Isolate::GarbageCollectionType
struct _ast7524: NamedDeclName<_str1166> {}; // EnumConstant kFullGarbageCollection
struct _ast7525: NamedDeclName<_str1167> {}; // EnumConstant kMinorGarbageCollection
struct _ast7526: NamedDeclName<_str1168>, TypeDecl<_ast7527> {}; // Enum UseCounterFeature
struct _ast7527: EnumType<_ast7526, _ast2095> {}; // Enum v8::Isolate::UseCounterFeature
struct _ast7528: NamedDeclName<_str1169> {}; // EnumConstant kUseAsm
struct _ast7529: NamedDeclName<_str1170> {}; // EnumConstant kBreakIterator
struct _ast7530: NamedDeclName<_str1171> {}; // EnumConstant kLegacyConst
struct _ast7531: NamedDeclName<_str1172> {}; // EnumConstant kMarkDequeOverflow
struct _ast7532: NamedDeclName<_str1173> {}; // EnumConstant kStoreBufferOverflow
struct _ast7533: NamedDeclName<_str1174> {}; // EnumConstant kSlotsBufferOverflow
struct _ast7534: NamedDeclName<_str1175> {}; // EnumConstant kObjectObserve
struct _ast7535: NamedDeclName<_str1176> {}; // EnumConstant kForcedGC
struct _ast7536: NamedDeclName<_str1177> {}; // EnumConstant kSloppyMode
struct _ast7537: NamedDeclName<_str1178> {}; // EnumConstant kStrictMode
struct _ast7538: NamedDeclName<_str1179> {}; // EnumConstant kStrongMode
struct _ast7539: NamedDeclName<_str1180> {}; // EnumConstant kRegExpPrototypeStickyGetter
struct _ast7540: NamedDeclName<_str1181> {}; // EnumConstant kRegExpPrototypeToString
struct _ast7541: NamedDeclName<_str1182> {}; // EnumConstant kRegExpPrototypeUnicodeGetter
struct _ast7542: NamedDeclName<_str1183> {}; // EnumConstant kIntlV8Parse
struct _ast7543: NamedDeclName<_str1184> {}; // EnumConstant kIntlPattern
struct _ast7544: NamedDeclName<_str1185> {}; // EnumConstant kIntlResolved
struct _ast7545: NamedDeclName<_str1186> {}; // EnumConstant kPromiseChain
struct _ast7546: NamedDeclName<_str1187> {}; // EnumConstant kPromiseAccept
struct _ast7547: NamedDeclName<_str1188> {}; // EnumConstant kPromiseDefer
struct _ast7548: NamedDeclName<_str1189> {}; // EnumConstant kHtmlCommentInExternalScript
struct _ast7549: NamedDeclName<_str1190> {}; // EnumConstant kHtmlComment
struct _ast7550: NamedDeclName<_str1191> {}; // EnumConstant kSloppyModeBlockScopedFunctionRedefinition
struct _ast7551: NamedDeclName<_str1192> {}; // EnumConstant kForInInitializer
struct _ast7552: NamedDeclName<_str1193> {}; // EnumConstant kArrayProtectorDirtied
struct _ast7553: NamedDeclName<_str1194> {}; // EnumConstant kArraySpeciesModified
struct _ast7554: NamedDeclName<_str1195> {}; // EnumConstant kArrayPrototypeConstructorModified
struct _ast7555: NamedDeclName<_str1196> {}; // EnumConstant kArrayInstanceProtoModified
struct _ast7556: NamedDeclName<_str1197> {}; // EnumConstant kArrayInstanceConstructorModified
struct _ast7557: NamedDeclName<_str1198> {}; // EnumConstant kLegacyFunctionDeclaration
struct _ast7558: NamedDeclName<_str1199> {}; // EnumConstant kRegExpPrototypeSourceGetter
struct _ast7559: NamedDeclName<_str1200> {}; // EnumConstant kRegExpPrototypeOldFlagGetter
struct _ast7560: NamedDeclName<_str1201> {}; // EnumConstant kDecimalWithLeadingZeroInStrictMode
struct _ast7561: NamedDeclName<_str1202> {}; // EnumConstant kLegacyDateParser
struct _ast7562: NamedDeclName<_str1203> {}; // EnumConstant kDefineGetterOrSetterWouldThrow
struct _ast7563: NamedDeclName<_str1204> {}; // EnumConstant kFunctionConstructorReturnedUndefined
struct _ast7564: NamedDeclName<_str1205> {}; // EnumConstant kAssigmentExpressionLHSIsCallInSloppy
struct _ast7565: NamedDeclName<_str1206> {}; // EnumConstant kAssigmentExpressionLHSIsCallInStrict
struct _ast7566: NamedDeclName<_str1207> {}; // EnumConstant kPromiseConstructorReturnedUndefined
struct _ast7567: NamedDeclName<_str1208> {}; // EnumConstant kConstructorNonUndefinedPrimitiveReturn
struct _ast7568: NamedDeclName<_str1209> {}; // EnumConstant kLabeledExpressionStatement
struct _ast7569: NamedDeclName<_str1210> {}; // EnumConstant kLineOrParagraphSeparatorAsLineTerminator
struct _ast7570: NamedDeclName<_str1211> {}; // EnumConstant kIndexAccessor
struct _ast7571: NamedDeclName<_str1212> {}; // EnumConstant kErrorCaptureStackTrace
struct _ast7572: NamedDeclName<_str1213> {}; // EnumConstant kErrorPrepareStackTrace
struct _ast7573: NamedDeclName<_str1214> {}; // EnumConstant kErrorStackTraceLimit
struct _ast7574: NamedDeclName<_str1215> {}; // EnumConstant kWebAssemblyInstantiation
struct _ast7575: NamedDeclName<_str1216> {}; // EnumConstant kDeoptimizerDisableSpeculation
struct _ast7576: NamedDeclName<_str1217> {}; // EnumConstant kArrayPrototypeSortJSArrayModifiedPrototype
struct _ast7577: NamedDeclName<_str1218> {}; // EnumConstant kFunctionTokenOffsetTooLongForToString
struct _ast7578: NamedDeclName<_str1219> {}; // EnumConstant kWasmSharedMemory
struct _ast7579: NamedDeclName<_str1220> {}; // EnumConstant kWasmThreadOpcodes
struct _ast7580: NamedDeclName<_str1221> {}; // EnumConstant kAtomicsNotify
struct _ast7581: NamedDeclName<_str1222> {}; // EnumConstant kAtomicsWake
struct _ast7582: NamedDeclName<_str1223> {}; // EnumConstant kCollator
struct _ast7583: NamedDeclName<_str1224> {}; // EnumConstant kNumberFormat
struct _ast7584: NamedDeclName<_str1225> {}; // EnumConstant kDateTimeFormat
struct _ast7585: NamedDeclName<_str1226> {}; // EnumConstant kPluralRules
struct _ast7586: NamedDeclName<_str1227> {}; // EnumConstant kRelativeTimeFormat
struct _ast7587: NamedDeclName<_str1228> {}; // EnumConstant kLocale
struct _ast7588: NamedDeclName<_str1229> {}; // EnumConstant kListFormat
struct _ast7589: NamedDeclName<_str1230> {}; // EnumConstant kSegmenter
struct _ast7590: NamedDeclName<_str1231> {}; // EnumConstant kStringLocaleCompare
struct _ast7591: NamedDeclName<_str1232> {}; // EnumConstant kStringToLocaleUpperCase
struct _ast7592: NamedDeclName<_str1233> {}; // EnumConstant kStringToLocaleLowerCase
struct _ast7593: NamedDeclName<_str1234> {}; // EnumConstant kNumberToLocaleString
struct _ast7594: NamedDeclName<_str1235> {}; // EnumConstant kDateToLocaleString
struct _ast7595: NamedDeclName<_str1236> {}; // EnumConstant kDateToLocaleDateString
struct _ast7596: NamedDeclName<_str1237> {}; // EnumConstant kDateToLocaleTimeString
struct _ast7597: NamedDeclName<_str1238> {}; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeSloppy
struct _ast7598: NamedDeclName<_str1239> {}; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeStrict
struct _ast7599: NamedDeclName<_str1240> {}; // EnumConstant kOptimizedFunctionWithOneShotBytecode
struct _ast7600: NamedDeclName<_str1241> {}; // EnumConstant kRegExpMatchIsTrueishOnNonJSRegExp
struct _ast7601: NamedDeclName<_str1242> {}; // EnumConstant kRegExpMatchIsFalseishOnJSRegExp
struct _ast7602: NamedDeclName<_str1243> {}; // EnumConstant kDateGetTimezoneOffset
struct _ast7603: NamedDeclName<_str1244> {}; // EnumConstant kStringNormalize
struct _ast7604: NamedDeclName<_str1245> {}; // EnumConstant kUseCounterFeatureCount
struct _ast7605: NamedDeclName<_str1246>, TypeDecl<_ast7606> {}; // Enum MessageErrorLevel
struct _ast7606: EnumType<_ast7605, _ast2095> {}; // Enum v8::Isolate::MessageErrorLevel
struct _ast7607: NamedDeclName<_str1247> {}; // EnumConstant kMessageLog
struct _ast7608: NamedDeclName<_str1248> {}; // EnumConstant kMessageDebug
struct _ast7609: NamedDeclName<_str1249> {}; // EnumConstant kMessageInfo
struct _ast7610: NamedDeclName<_str1250> {}; // EnumConstant kMessageError
struct _ast7611: NamedDeclName<_str1251> {}; // EnumConstant kMessageWarning
struct _ast7612: NamedDeclName<_str1252> {}; // EnumConstant kMessageAll
struct _ast7613: NamedDeclName<_str1253>, TypeDecl<_ast7614> {}; // Typedef UseCounterCallback
struct _ast7614: TypedefType<_ast7613> {}; // Typedef v8::Isolate::UseCounterCallback
struct _ast7615: MethodDecl<FunctionDecl<_ast5090, Pack<>>>, NamedDeclName<_str780> {}; // CXXMethod Allocate
struct _ast7616: MethodDecl<FunctionDecl<_ast7621, Pack<_ast7617, _ast7618>>>, NamedDeclName<_str150> {}; // CXXMethod Initialize
struct _ast7617: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast7618: NamedDeclName<_str1254>, ParmVarDecl<_ast7619> {}; // ParmVar params
struct _ast7619: LValueReferenceType<ReferenceType<_ast7620>> {}; // LValueReference const v8::Isolate::CreateParams &
struct _ast7620: ConstQualifiedType<_ast7413> {}; // Record const v8::Isolate::CreateParams
struct _ast7621: FunctionProtoType<_ast122, Pack<_ast198, _ast7619>, SameType> {}; // FunctionProto void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _ast7622: MethodDecl<FunctionDecl<_ast7624, Pack<_ast7623>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast7623: NamedDeclName<_str1254>, ParmVarDecl<_ast7619> {}; // ParmVar params
struct _ast7624: FunctionProtoType<_ast198, Pack<_ast7619>, SameType> {}; // FunctionProto v8::Isolate *(const v8::Isolate::CreateParams &)
struct _ast7625: MethodDecl<FunctionDecl<_ast5090, Pack<>>>, NamedDeclName<_str1255> {}; // CXXMethod GetCurrent
struct _ast7626: NamedDeclName<_str1256>, TypeDecl<_ast7627> {}; // Typedef AbortOnUncaughtExceptionCallback
struct _ast7627: TypedefType<_ast7626> {}; // Typedef v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ast7628: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7630, Pack<_ast7629>>>, _ast198>, NamedDeclName<_str1257> {}; // CXXMethod SetAbortOnUncaughtExceptionCallback
struct _ast7629: NamedDeclName<_str82>, ParmVarDecl<_ast7627> {}; // ParmVar callback
struct _ast7630: FunctionProtoType<_ast122, Pack<_ast7627>, SameType> {}; // FunctionProto void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ast7631: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7633, Pack<_ast7632>>>, _ast198>, NamedDeclName<_str1258> {}; // CXXMethod SetHostImportModuleDynamicallyCallback
struct _ast7632: NamedDeclName<_str82>, ParmVarDecl<_ast6960> {}; // ParmVar callback
struct _ast7633: FunctionProtoType<_ast122, Pack<_ast6960>, SameType> {}; // FunctionProto void (v8::HostImportModuleDynamicallyCallback)
struct _ast7634: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7636, Pack<_ast7635>>>, _ast198>, NamedDeclName<_str1259> {}; // CXXMethod SetHostInitializeImportMetaObjectCallback
struct _ast7635: NamedDeclName<_str82>, ParmVarDecl<_ast6962> {}; // ParmVar callback
struct _ast7636: FunctionProtoType<_ast122, Pack<_ast6962>, SameType> {}; // FunctionProto void (v8::HostInitializeImportMetaObjectCallback)
struct _ast7637: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7639, Pack<_ast7638>>>, _ast198>, NamedDeclName<_str1260> {}; // CXXMethod SetPrepareStackTraceCallback
struct _ast7638: NamedDeclName<_str82>, ParmVarDecl<_ast6964> {}; // ParmVar callback
struct _ast7639: FunctionProtoType<_ast122, Pack<_ast6964>, SameType> {}; // FunctionProto void (v8::PrepareStackTraceCallback)
struct _ast7640: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7642, Pack<_ast7641>>>, _ast198>, NamedDeclName<_str1261> {}; // CXXMethod MemoryPressureNotification
struct _ast7641: NamedDeclName<_str630>, ParmVarDecl<_ast7267> {}; // ParmVar level
struct _ast7642: FunctionProtoType<_ast122, Pack<_ast7267>, SameType> {}; // FunctionProto void (v8::MemoryPressureLevel)
struct _ast7643: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1262> {}; // CXXMethod Enter
struct _ast7644: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1263> {}; // CXXMethod Exit
struct _ast7645: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str508> {}; // CXXMethod Dispose
struct _ast7646: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1264> {}; // CXXMethod DumpAndResetStats
struct _ast7647: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1265> {}; // CXXMethod DiscardThreadSpecificMetadata
struct _ast7648: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7651, Pack<_ast7649, _ast7650>>>, _ast198>, NamedDeclName<_str1266> {}; // CXXMethod SetData
struct _ast7649: NamedDeclName<_str1267>, ParmVarDecl<_ast3641> {}; // ParmVar slot
struct _ast7650: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7651: FunctionProtoType<_ast122, Pack<_ast3641, _ast2460>, SameType> {}; // FunctionProto void (uint32_t, void *)
struct _ast7652: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7654, Pack<_ast7653>>>, _ast198>, NamedDeclName<_str1268> {}; // CXXMethod GetData
struct _ast7653: NamedDeclName<_str1267>, ParmVarDecl<_ast3641> {}; // ParmVar slot
struct _ast7654: FunctionProtoType<_ast2460, Pack<_ast3641>, SameType> {}; // FunctionProto void *(uint32_t)
struct _ast7655: MethodDecl<FunctionDecl<_ast3640, Pack<>>>, NamedDeclName<_str1269> {}; // CXXMethod GetNumberOfDataSlots
struct _ast7656: NamedDeclName<_str1270> {}; // FunctionTemplate GetDataFromSnapshotOnce
struct _ast7657: NamedDeclName<_str21>, TypeDecl<_ast7658> {}; // TemplateTypeParm T
struct _ast7659: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7661, Pack<_ast7660>>>, _ast198>, NamedDeclName<_str1270> {}; // CXXMethod GetDataFromSnapshotOnce
struct _ast7660: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast7661: FunctionProtoType<_ast7662, Pack<_ast3539>, SameType> {}; // FunctionProto MaybeLocal<T> (size_t)
struct _ast7663: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7665, Pack<_ast7664>>>, _ast198>, NamedDeclName<_str1271> {}; // CXXMethod GetHeapStatistics
struct _ast7664: NamedDeclName<_str1272>, ParmVarDecl<_ast7130> {}; // ParmVar heap_statistics
struct _ast7665: FunctionProtoType<_ast122, Pack<_ast7130>, SameType> {}; // FunctionProto void (v8::HeapStatistics *)
struct _ast7666: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast198>, NamedDeclName<_str1273> {}; // CXXMethod NumberOfHeapSpaces
struct _ast7667: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7670, Pack<_ast7668, _ast7669>>>, _ast198>, NamedDeclName<_str1274> {}; // CXXMethod GetHeapSpaceStatistics
struct _ast7668: NamedDeclName<_str1275>, ParmVarDecl<_ast7147> {}; // ParmVar space_statistics
struct _ast7669: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast7670: FunctionProtoType<_ast137, Pack<_ast7147, _ast3539>, SameType> {}; // FunctionProto bool (v8::HeapSpaceStatistics *, size_t)
struct _ast7671: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast198>, NamedDeclName<_str1276> {}; // CXXMethod NumberOfTrackedHeapObjectTypes
struct _ast7672: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7675, Pack<_ast7673, _ast7674>>>, _ast198>, NamedDeclName<_str1277> {}; // CXXMethod GetHeapObjectStatisticsAtLastGC
struct _ast7673: NamedDeclName<_str1278>, ParmVarDecl<_ast7158> {}; // ParmVar object_statistics
struct _ast7674: NamedDeclName<_str1279>, ParmVarDecl<_ast3539> {}; // ParmVar type_index
struct _ast7675: FunctionProtoType<_ast137, Pack<_ast7158, _ast3539>, SameType> {}; // FunctionProto bool (v8::HeapObjectStatistics *, size_t)
struct _ast7676: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7678, Pack<_ast7677>>>, _ast198>, NamedDeclName<_str1280> {}; // CXXMethod GetHeapCodeAndMetadataStatistics
struct _ast7677: NamedDeclName<_str1278>, ParmVarDecl<_ast7167> {}; // ParmVar object_statistics
struct _ast7678: FunctionProtoType<_ast137, Pack<_ast7167>, SameType> {}; // FunctionProto bool (v8::HeapCodeStatistics *)
struct _ast7679: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7688, Pack<_ast7680, _ast7683, _ast7685, _ast7686>>>, _ast198>, NamedDeclName<_str1281> {}; // CXXMethod GetStackSample
struct _ast7680: NamedDeclName<_str1282>, ParmVarDecl<_ast7681> {}; // ParmVar state
struct _ast7681: LValueReferenceType<ReferenceType<_ast7682>> {}; // LValueReference const v8::RegisterState &
struct _ast7682: ConstQualifiedType<_ast3787> {}; // Record const v8::RegisterState
struct _ast7683: NamedDeclName<_str1283>, ParmVarDecl<_ast7684> {}; // ParmVar frames
struct _ast7684: PointerType<_ast2460> {}; // Pointer void **
struct _ast7685: NamedDeclName<_str1284>, ParmVarDecl<_ast3539> {}; // ParmVar frames_limit
struct _ast7686: NamedDeclName<_str1285>, ParmVarDecl<_ast7687> {}; // ParmVar sample_info
struct _ast7687: PointerType<_ast3796> {}; // Pointer v8::SampleInfo *
struct _ast7688: FunctionProtoType<_ast122, Pack<_ast7681, _ast7684, _ast3539, _ast7687>, SameType> {}; // FunctionProto void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
struct _ast7689: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7691, Pack<_ast7690>>>, _ast198>, NamedDeclName<_str1286> {}; // CXXMethod AdjustAmountOfExternalAllocatedMemory
struct _ast7690: NamedDeclName<_str1287>, ParmVarDecl<_ast4564> {}; // ParmVar change_in_bytes
struct _ast7691: FunctionProtoType<_ast4564, Pack<_ast4564>, SameType> {}; // FunctionProto int64_t (int64_t)
struct _ast7692: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5892, Pack<>>>, _ast198>, NamedDeclName<_str1288> {}; // CXXMethod NumberOfPhantomHandleResetsSinceLastCall
struct _ast7693: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7694, Pack<>>>, _ast198>, NamedDeclName<_str1289> {}; // CXXMethod GetHeapProfiler
struct _ast7694: FunctionProtoType<_ast7695, Pack<>, SameType> {}; // FunctionProto v8::HeapProfiler *()
struct _ast7695: PointerType<_ast31> {}; // Pointer v8::HeapProfiler *
struct _ast7696: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast7697>>>, _ast198>, NamedDeclName<_str1290> {}; // CXXMethod SetIdle
struct _ast7697: NamedDeclName<_str1291>, ParmVarDecl<_ast137> {}; // ParmVar is_idle
struct _ast7698: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7699, Pack<>>>, _ast198>, NamedDeclName<_str1292> {}; // CXXMethod GetArrayBufferAllocator
struct _ast7699: FunctionProtoType<_ast7700, Pack<>, SameType> {}; // FunctionProto ArrayBuffer::Allocator *()
struct _ast7700: PointerType<_ast7701> {}; // Pointer ArrayBuffer::Allocator *
struct _ast7702: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast198>, NamedDeclName<_str1293> {}; // CXXMethod InContext
struct _ast7703: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7704, Pack<>>>, _ast198>, NamedDeclName<_str1294> {}; // CXXMethod GetCurrentContext
struct _ast7704: FunctionProtoType<_ast7705, Pack<>, SameType> {}; // FunctionProto Local<v8::Context> ()
struct _ast7706: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7707, Pack<>>>, _ast198>, NamedDeclName<_str1295> {}; // CXXMethod GetEnteredContext
struct _ast7707: FunctionProtoType<_ast7708, Pack<>, SameType> {}; // FunctionProto Local<v8::Context> ()
struct _ast7709: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7710, Pack<>>>, _ast198>, NamedDeclName<_str1296> {}; // CXXMethod GetEnteredOrMicrotaskContext
struct _ast7710: FunctionProtoType<_ast7711, Pack<>, SameType> {}; // FunctionProto Local<v8::Context> ()
struct _ast7712: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7713, Pack<>>>, _ast198>, NamedDeclName<_str1297> {}; // CXXMethod GetIncumbentContext
struct _ast7713: FunctionProtoType<_ast7714, Pack<>, SameType> {}; // FunctionProto Local<v8::Context> ()
struct _ast7715: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7718, Pack<_ast7716>>>, _ast198>, NamedDeclName<_str1298> {}; // CXXMethod ThrowException
struct _ast7716: NamedDeclName<_str771>, ParmVarDecl<_ast7717> {}; // ParmVar exception
struct _ast7718: FunctionProtoType<_ast7719, Pack<_ast7717>, SameType> {}; // FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _ast7720: NamedDeclName<_str1031>, TypeDecl<_ast7721> {}; // Typedef GCCallback
struct _ast7721: TypedefType<_ast7720> {}; // Typedef v8::Isolate::GCCallback
struct _ast7722: NamedDeclName<_str1299>, TypeDecl<_ast7723> {}; // Typedef GCCallbackWithData
struct _ast7723: TypedefType<_ast7722> {}; // Typedef v8::Isolate::GCCallbackWithData
struct _ast7724: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7728, Pack<_ast7725, _ast7726, _ast7727>>>, _ast198>, NamedDeclName<_str1300> {}; // CXXMethod AddGCPrologueCallback
struct _ast7725: NamedDeclName<_str82>, ParmVarDecl<_ast7723> {}; // ParmVar callback
struct _ast7726: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7727: NamedDeclName<_str1301>, ParmVarDecl<_ast7105> {}; // ParmVar gc_type_filter
struct _ast7728: FunctionProtoType<_ast122, Pack<_ast7723, _ast2460, _ast7105>, SameType> {}; // FunctionProto void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
struct _ast7729: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7732, Pack<_ast7730, _ast7731>>>, _ast198>, NamedDeclName<_str1300> {}; // CXXMethod AddGCPrologueCallback
struct _ast7730: NamedDeclName<_str82>, ParmVarDecl<_ast7721> {}; // ParmVar callback
struct _ast7731: NamedDeclName<_str1301>, ParmVarDecl<_ast7105> {}; // ParmVar gc_type_filter
struct _ast7732: FunctionProtoType<_ast122, Pack<_ast7721, _ast7105>, SameType> {}; // FunctionProto void (v8::Isolate::GCCallback, v8::GCType)
struct _ast7733: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7736, Pack<_ast7734, _ast7735>>>, _ast198>, NamedDeclName<_str1302> {}; // CXXMethod RemoveGCPrologueCallback
struct _ast7734: NamedDeclAnon<_str64>, ParmVarDecl<_ast7723> {}; // ParmVar 
struct _ast7735: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7736: FunctionProtoType<_ast122, Pack<_ast7723, _ast2460>, SameType> {}; // FunctionProto void (v8::Isolate::GCCallbackWithData, void *)
struct _ast7737: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7739, Pack<_ast7738>>>, _ast198>, NamedDeclName<_str1302> {}; // CXXMethod RemoveGCPrologueCallback
struct _ast7738: NamedDeclName<_str82>, ParmVarDecl<_ast7721> {}; // ParmVar callback
struct _ast7739: FunctionProtoType<_ast122, Pack<_ast7721>, SameType> {}; // FunctionProto void (v8::Isolate::GCCallback)
struct _ast7740: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7742, Pack<_ast7741>>>, _ast198>, NamedDeclName<_str1303> {}; // CXXMethod SetEmbedderHeapTracer
struct _ast7741: NamedDeclName<_str1304>, ParmVarDecl<_ast7308> {}; // ParmVar tracer
struct _ast7742: FunctionProtoType<_ast122, Pack<_ast7308>, SameType> {}; // FunctionProto void (v8::EmbedderHeapTracer *)
struct _ast7743: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7744, Pack<>>>, _ast198>, NamedDeclName<_str1305> {}; // CXXMethod GetEmbedderHeapTracer
struct _ast7744: FunctionProtoType<_ast7308, Pack<>, SameType> {}; // FunctionProto v8::EmbedderHeapTracer *()
struct _ast7745: NamedDeclName<_str1306>, TypeDecl<_ast7746> {}; // Enum AtomicsWaitEvent
struct _ast7746: EnumType<_ast7745, _ast2095> {}; // Enum v8::Isolate::AtomicsWaitEvent
struct _ast7747: NamedDeclName<_str1307> {}; // EnumConstant kStartWait
struct _ast7748: NamedDeclName<_str1308> {}; // EnumConstant kWokenUp
struct _ast7749: NamedDeclName<_str1309> {}; // EnumConstant kTimedOut
struct _ast7750: NamedDeclName<_str1310> {}; // EnumConstant kTerminatedExecution
struct _ast7751: NamedDeclName<_str1311> {}; // EnumConstant kAPIStopped
struct _ast7752: NamedDeclName<_str1312> {}; // EnumConstant kNotEqual
struct _ast7753: NamedDeclName<_str1313>, TypeDecl<_ast7754> {}; // CXXRecord AtomicsWaitWakeHandle
struct _ast7754: StructOrClassRecordType<RecordType<_ast7753>> {}; // Record v8::Isolate::AtomicsWaitWakeHandle
struct _ast7755: NamedDeclName<_str1313>, TypeDecl<_ast7754> {}; // CXXRecord AtomicsWaitWakeHandle
struct _ast7756: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast7757>, NamedDeclName<_str1314> {}; // CXXMethod Wake
struct _ast7757: PointerType<_ast7754> {}; // Pointer v8::Isolate::AtomicsWaitWakeHandle *
struct _ast7758: NamedDeclName<_str1315>, TypeDecl<_ast7759> {}; // Typedef AtomicsWaitCallback
struct _ast7759: TypedefType<_ast7758> {}; // Typedef v8::Isolate::AtomicsWaitCallback
struct _ast7760: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7763, Pack<_ast7761, _ast7762>>>, _ast198>, NamedDeclName<_str1316> {}; // CXXMethod SetAtomicsWaitCallback
struct _ast7761: NamedDeclName<_str82>, ParmVarDecl<_ast7759> {}; // ParmVar callback
struct _ast7762: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7763: FunctionProtoType<_ast122, Pack<_ast7759, _ast2460>, SameType> {}; // FunctionProto void (v8::Isolate::AtomicsWaitCallback, void *)
struct _ast7764: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7728, Pack<_ast7765, _ast7766, _ast7767>>>, _ast198>, NamedDeclName<_str1317> {}; // CXXMethod AddGCEpilogueCallback
struct _ast7765: NamedDeclName<_str82>, ParmVarDecl<_ast7723> {}; // ParmVar callback
struct _ast7766: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7767: NamedDeclName<_str1301>, ParmVarDecl<_ast7105> {}; // ParmVar gc_type_filter
struct _ast7768: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7732, Pack<_ast7769, _ast7770>>>, _ast198>, NamedDeclName<_str1317> {}; // CXXMethod AddGCEpilogueCallback
struct _ast7769: NamedDeclName<_str82>, ParmVarDecl<_ast7721> {}; // ParmVar callback
struct _ast7770: NamedDeclName<_str1301>, ParmVarDecl<_ast7105> {}; // ParmVar gc_type_filter
struct _ast7771: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7736, Pack<_ast7772, _ast7773>>>, _ast198>, NamedDeclName<_str1318> {}; // CXXMethod RemoveGCEpilogueCallback
struct _ast7772: NamedDeclName<_str82>, ParmVarDecl<_ast7723> {}; // ParmVar callback
struct _ast7773: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7774: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7739, Pack<_ast7775>>>, _ast198>, NamedDeclName<_str1318> {}; // CXXMethod RemoveGCEpilogueCallback
struct _ast7775: NamedDeclName<_str82>, ParmVarDecl<_ast7721> {}; // ParmVar callback
struct _ast7776: NamedDeclName<_str1319>, TypeDecl<_ast7777> {}; // Typedef GetExternallyAllocatedMemoryInBytesCallback
struct _ast7777: TypedefType<_ast7776> {}; // Typedef v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ast7778: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7780, Pack<_ast7779>>>, _ast198>, NamedDeclName<_str1320> {}; // CXXMethod SetGetExternallyAllocatedMemoryInBytesCallback
struct _ast7779: NamedDeclName<_str82>, ParmVarDecl<_ast7777> {}; // ParmVar callback
struct _ast7780: FunctionProtoType<_ast122, Pack<_ast7777>, SameType> {}; // FunctionProto void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ast7781: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1321> {}; // CXXMethod TerminateExecution
struct _ast7782: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast198>, NamedDeclName<_str1322> {}; // CXXMethod IsExecutionTerminating
struct _ast7783: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1323> {}; // CXXMethod CancelTerminateExecution
struct _ast7784: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7787, Pack<_ast7785, _ast7786>>>, _ast198>, NamedDeclName<_str1324> {}; // CXXMethod RequestInterrupt
struct _ast7785: NamedDeclName<_str82>, ParmVarDecl<_ast7123> {}; // ParmVar callback
struct _ast7786: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7787: FunctionProtoType<_ast122, Pack<_ast7123, _ast2460>, SameType> {}; // FunctionProto void (v8::InterruptCallback, void *)
struct _ast7788: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7790, Pack<_ast7789>>>, _ast198>, NamedDeclName<_str1325> {}; // CXXMethod RequestGarbageCollectionForTesting
struct _ast7789: NamedDeclName<_str83>, ParmVarDecl<_ast7523> {}; // ParmVar type
struct _ast7790: FunctionProtoType<_ast122, Pack<_ast7523>, SameType> {}; // FunctionProto void (v8::Isolate::GarbageCollectionType)
struct _ast7791: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7793, Pack<_ast7792>>>, _ast198>, NamedDeclName<_str1326> {}; // CXXMethod SetEventLogger
struct _ast7792: NamedDeclName<_str53>, ParmVarDecl<_ast6909> {}; // ParmVar that
struct _ast7793: FunctionProtoType<_ast122, Pack<_ast6909>, SameType> {}; // FunctionProto void (v8::LogEventCallback)
struct _ast7794: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7796, Pack<_ast7795>>>, _ast198>, NamedDeclName<_str1327> {}; // CXXMethod AddBeforeCallEnteredCallback
struct _ast7795: NamedDeclName<_str82>, ParmVarDecl<_ast6956> {}; // ParmVar callback
struct _ast7796: FunctionProtoType<_ast122, Pack<_ast6956>, SameType> {}; // FunctionProto void (v8::BeforeCallEnteredCallback)
struct _ast7797: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7796, Pack<_ast7798>>>, _ast198>, NamedDeclName<_str1328> {}; // CXXMethod RemoveBeforeCallEnteredCallback
struct _ast7798: NamedDeclName<_str82>, ParmVarDecl<_ast6956> {}; // ParmVar callback
struct _ast7799: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7801, Pack<_ast7800>>>, _ast198>, NamedDeclName<_str1329> {}; // CXXMethod AddCallCompletedCallback
struct _ast7800: NamedDeclName<_str82>, ParmVarDecl<_ast6958> {}; // ParmVar callback
struct _ast7801: FunctionProtoType<_ast122, Pack<_ast6958>, SameType> {}; // FunctionProto void (v8::CallCompletedCallback)
struct _ast7802: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7801, Pack<_ast7803>>>, _ast198>, NamedDeclName<_str1330> {}; // CXXMethod RemoveCallCompletedCallback
struct _ast7803: NamedDeclName<_str82>, ParmVarDecl<_ast6958> {}; // ParmVar callback
struct _ast7804: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7806, Pack<_ast7805>>>, _ast198>, NamedDeclName<_str1331> {}; // CXXMethod SetPromiseHook
struct _ast7805: NamedDeclName<_str1332>, ParmVarDecl<_ast6972> {}; // ParmVar hook
struct _ast7806: FunctionProtoType<_ast122, Pack<_ast6972>, SameType> {}; // FunctionProto void (v8::PromiseHook)
struct _ast7807: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7809, Pack<_ast7808>>>, _ast198>, NamedDeclName<_str1333> {}; // CXXMethod SetPromiseRejectCallback
struct _ast7808: NamedDeclName<_str82>, ParmVarDecl<_ast7001> {}; // ParmVar callback
struct _ast7809: FunctionProtoType<_ast122, Pack<_ast7001>, SameType> {}; // FunctionProto void (v8::PromiseRejectCallback)
struct _ast7810: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1334> {}; // CXXMethod RunMicrotasks
struct _ast7811: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7814, Pack<_ast7812>>>, _ast198>, NamedDeclName<_str997> {}; // CXXMethod EnqueueMicrotask
struct _ast7812: NamedDeclName<_str998>, ParmVarDecl<_ast7813> {}; // ParmVar microtask
struct _ast7814: FunctionProtoType<_ast122, Pack<_ast7813>, SameType> {}; // FunctionProto void (Local<v8::Function>)
struct _ast7815: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7818, Pack<_ast7816, _ast7817>>>, _ast198>, NamedDeclName<_str997> {}; // CXXMethod EnqueueMicrotask
struct _ast7816: NamedDeclName<_str82>, ParmVarDecl<_ast7007> {}; // ParmVar callback
struct _ast7817: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7818: FunctionProtoType<_ast122, Pack<_ast7007, _ast2460>, SameType> {}; // FunctionProto void (v8::MicrotaskCallback, void *)
struct _ast7819: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7821, Pack<_ast7820>>>, _ast198>, NamedDeclName<_str1335> {}; // CXXMethod SetMicrotasksPolicy
struct _ast7820: NamedDeclName<_str996>, ParmVarDecl<_ast7009> {}; // ParmVar policy
struct _ast7821: FunctionProtoType<_ast122, Pack<_ast7009>, SameType> {}; // FunctionProto void (v8::MicrotasksPolicy)
struct _ast7822: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7823, Pack<>>>, _ast7824>, NamedDeclName<_str1336> {}; // CXXMethod GetMicrotasksPolicy
struct _ast7823: FunctionProtoType<_ast7009, Pack<>, ConstQualifiedType> {}; // FunctionProto v8::MicrotasksPolicy () const
struct _ast7824: PointerType<_ast7825> {}; // Pointer const v8::Isolate *
struct _ast7825: ConstQualifiedType<_ast7> {}; // Record const v8::Isolate
struct _ast7826: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7828, Pack<_ast7827>>>, _ast198>, NamedDeclName<_str999> {}; // CXXMethod AddMicrotasksCompletedCallback
struct _ast7827: NamedDeclName<_str82>, ParmVarDecl<_ast7003> {}; // ParmVar callback
struct _ast7828: FunctionProtoType<_ast122, Pack<_ast7003>, SameType> {}; // FunctionProto void (v8::MicrotasksCompletedCallback)
struct _ast7829: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7037, Pack<_ast7830, _ast7831>>>, _ast198>, NamedDeclName<_str999> {}; // CXXMethod AddMicrotasksCompletedCallback
struct _ast7830: NamedDeclName<_str82>, ParmVarDecl<_ast7005> {}; // ParmVar callback
struct _ast7831: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7832: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7828, Pack<_ast7833>>>, _ast198>, NamedDeclName<_str1000> {}; // CXXMethod RemoveMicrotasksCompletedCallback
struct _ast7833: NamedDeclName<_str82>, ParmVarDecl<_ast7003> {}; // ParmVar callback
struct _ast7834: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7037, Pack<_ast7835, _ast7836>>>, _ast198>, NamedDeclName<_str1000> {}; // CXXMethod RemoveMicrotasksCompletedCallback
struct _ast7835: NamedDeclName<_str82>, ParmVarDecl<_ast7005> {}; // ParmVar callback
struct _ast7836: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7837: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7839, Pack<_ast7838>>>, _ast198>, NamedDeclName<_str1337> {}; // CXXMethod SetUseCounterCallback
struct _ast7838: NamedDeclName<_str82>, ParmVarDecl<_ast7614> {}; // ParmVar callback
struct _ast7839: FunctionProtoType<_ast122, Pack<_ast7614>, SameType> {}; // FunctionProto void (v8::Isolate::UseCounterCallback)
struct _ast7840: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7842, Pack<_ast7841>>>, _ast198>, NamedDeclName<_str1338> {}; // CXXMethod SetCounterFunction
struct _ast7841: NamedDeclAnon<_str64>, ParmVarDecl<_ast6950> {}; // ParmVar 
struct _ast7842: FunctionProtoType<_ast122, Pack<_ast6950>, SameType> {}; // FunctionProto void (v8::CounterLookupCallback)
struct _ast7843: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7845, Pack<_ast7844>>>, _ast198>, NamedDeclName<_str1339> {}; // CXXMethod SetCreateHistogramFunction
struct _ast7844: NamedDeclAnon<_str64>, ParmVarDecl<_ast6952> {}; // ParmVar 
struct _ast7845: FunctionProtoType<_ast122, Pack<_ast6952>, SameType> {}; // FunctionProto void (v8::CreateHistogramCallback)
struct _ast7846: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7848, Pack<_ast7847>>>, _ast198>, NamedDeclName<_str1340> {}; // CXXMethod SetAddHistogramSampleFunction
struct _ast7847: NamedDeclAnon<_str64>, ParmVarDecl<_ast6954> {}; // ParmVar 
struct _ast7848: FunctionProtoType<_ast122, Pack<_ast6954>, SameType> {}; // FunctionProto void (v8::AddHistogramSampleCallback)
struct _ast7849: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7330, Pack<_ast7850>>>, _ast198>, NamedDeclName<_str1341> {}; // CXXMethod IdleNotificationDeadline
struct _ast7850: NamedDeclName<_str1342>, ParmVarDecl<_ast3918> {}; // ParmVar deadline_in_seconds
struct _ast7851: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1343> {}; // CXXMethod LowMemoryNotification
struct _ast7852: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7854, Pack<_ast7853>>>, _ast198>, NamedDeclName<_str1344> {}; // CXXMethod ContextDisposedNotification
struct _ast7853: NamedDeclName<_str1345>, ParmVarDecl<_ast137> {}; // ParmVar dependant_context
struct _ast7854: FunctionProtoType<_ast2095, Pack<_ast137>, SameType> {}; // FunctionProto int (bool)
struct _ast7855: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1346> {}; // CXXMethod IsolateInForegroundNotification
struct _ast7856: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1347> {}; // CXXMethod IsolateInBackgroundNotification
struct _ast7857: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1348> {}; // CXXMethod EnableMemorySavingsMode
struct _ast7858: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1349> {}; // CXXMethod DisableMemorySavingsMode
struct _ast7859: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7861, Pack<_ast7860>>>, _ast198>, NamedDeclName<_str1350> {}; // CXXMethod SetRAILMode
struct _ast7860: NamedDeclName<_str1351>, ParmVarDecl<_ast7218> {}; // ParmVar rail_mode
struct _ast7861: FunctionProtoType<_ast122, Pack<_ast7218>, SameType> {}; // FunctionProto void (v8::RAILMode)
struct _ast7862: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1352> {}; // CXXMethod IncreaseHeapLimitForDebugging
struct _ast7863: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1353> {}; // CXXMethod RestoreOriginalHeapLimit
struct _ast7864: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast198>, NamedDeclName<_str1354> {}; // CXXMethod IsHeapLimitIncreasedForDebugging
struct _ast7865: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7868, Pack<_ast7866, _ast7867>>>, _ast198>, NamedDeclName<_str1355> {}; // CXXMethod SetJitCodeEventHandler
struct _ast7866: NamedDeclName<_str275>, ParmVarDecl<_ast7225> {}; // ParmVar options
struct _ast7867: NamedDeclName<_str1356>, ParmVarDecl<_ast7229> {}; // ParmVar event_handler
struct _ast7868: FunctionProtoType<_ast122, Pack<_ast7225, _ast7229>, SameType> {}; // FunctionProto void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _ast7869: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7872, Pack<_ast7870>>>, _ast198>, NamedDeclName<_str1357> {}; // CXXMethod SetStackLimit
struct _ast7870: NamedDeclName<_str928>, ParmVarDecl<_ast7871> {}; // ParmVar stack_limit
struct _ast7871: PointerSizeType<UnsignedIntegerType> {}; // Typedef uintptr_t
struct _ast7872: FunctionProtoType<_ast122, Pack<_ast7871>, SameType> {}; // FunctionProto void (uintptr_t)
struct _ast7873: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7876, Pack<_ast7874, _ast7875>>>, _ast198>, NamedDeclName<_str1358> {}; // CXXMethod GetCodeRange
struct _ast7874: NamedDeclName<_str348>, ParmVarDecl<_ast7684> {}; // ParmVar start
struct _ast7875: NamedDeclName<_str349>, ParmVarDecl<_ast3870> {}; // ParmVar length_in_bytes
struct _ast7876: FunctionProtoType<_ast122, Pack<_ast7684, _ast3870>, SameType> {}; // FunctionProto void (void **, size_t *)
struct _ast7877: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7878, Pack<>>>, _ast198>, NamedDeclName<_str1359> {}; // CXXMethod GetUnwindState
struct _ast7878: FunctionProtoType<_ast3811, Pack<>, SameType> {}; // FunctionProto v8::UnwindState ()
struct _ast7879: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7881, Pack<_ast7880>>>, _ast198>, NamedDeclName<_str1360> {}; // CXXMethod SetFatalErrorHandler
struct _ast7880: NamedDeclName<_str53>, ParmVarDecl<_ast6901> {}; // ParmVar that
struct _ast7881: FunctionProtoType<_ast122, Pack<_ast6901>, SameType> {}; // FunctionProto void (v8::FatalErrorCallback)
struct _ast7882: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7884, Pack<_ast7883>>>, _ast198>, NamedDeclName<_str1361> {}; // CXXMethod SetOOMErrorHandler
struct _ast7883: NamedDeclName<_str53>, ParmVarDecl<_ast6903> {}; // ParmVar that
struct _ast7884: FunctionProtoType<_ast122, Pack<_ast6903>, SameType> {}; // FunctionProto void (v8::OOMErrorCallback)
struct _ast7885: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7888, Pack<_ast7886, _ast7887>>>, _ast198>, NamedDeclName<_str1362> {}; // CXXMethod AddNearHeapLimitCallback
struct _ast7886: NamedDeclName<_str82>, ParmVarDecl<_ast7125> {}; // ParmVar callback
struct _ast7887: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast7888: FunctionProtoType<_ast122, Pack<_ast7125, _ast2460>, SameType> {}; // FunctionProto void (v8::NearHeapLimitCallback, void *)
struct _ast7889: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7892, Pack<_ast7890, _ast7891>>>, _ast198>, NamedDeclName<_str1363> {}; // CXXMethod RemoveNearHeapLimitCallback
struct _ast7890: NamedDeclName<_str82>, ParmVarDecl<_ast7125> {}; // ParmVar callback
struct _ast7891: NamedDeclName<_str1364>, ParmVarDecl<_ast3539> {}; // ParmVar heap_limit
struct _ast7892: FunctionProtoType<_ast122, Pack<_ast7125, _ast3539>, SameType> {}; // FunctionProto void (v8::NearHeapLimitCallback, size_t)
struct _ast7893: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3919, Pack<_ast7894>>>, _ast198>, NamedDeclName<_str1365> {}; // CXXMethod AutomaticallyRestoreInitialHeapLimit
struct _ast7894: NamedDeclName<_str1366>, ParmVarDecl<_ast3918> {}; // ParmVar threshold_percent
struct _ast7895: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7897, Pack<_ast7896>>>, _ast198>, NamedDeclName<_str1367> {}; // CXXMethod SetAllowCodeGenerationFromStringsCallback
struct _ast7896: NamedDeclName<_str82>, ParmVarDecl<_ast7093> {}; // ParmVar callback
struct _ast7897: FunctionProtoType<_ast122, Pack<_ast7093>, SameType> {}; // FunctionProto void (v8::AllowCodeGenerationFromStringsCallback)
struct _ast7898: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7900, Pack<_ast7899>>>, _ast198>, NamedDeclName<_str1368> {}; // CXXMethod SetAllowWasmCodeGenerationCallback
struct _ast7899: NamedDeclName<_str82>, ParmVarDecl<_ast7097> {}; // ParmVar callback
struct _ast7900: FunctionProtoType<_ast122, Pack<_ast7097>, SameType> {}; // FunctionProto void (v8::AllowWasmCodeGenerationCallback)
struct _ast7901: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7903, Pack<_ast7902>>>, _ast198>, NamedDeclName<_str1369> {}; // CXXMethod SetWasmModuleCallback
struct _ast7902: NamedDeclName<_str82>, ParmVarDecl<_ast7095> {}; // ParmVar callback
struct _ast7903: FunctionProtoType<_ast122, Pack<_ast7095>, SameType> {}; // FunctionProto void (v8::ExtensionCallback)
struct _ast7904: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7903, Pack<_ast7905>>>, _ast198>, NamedDeclName<_str1370> {}; // CXXMethod SetWasmInstanceCallback
struct _ast7905: NamedDeclName<_str82>, ParmVarDecl<_ast7095> {}; // ParmVar callback
struct _ast7906: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7908, Pack<_ast7907>>>, _ast198>, NamedDeclName<_str1371> {}; // CXXMethod SetWasmStreamingCallback
struct _ast7907: NamedDeclName<_str82>, ParmVarDecl<_ast7101> {}; // ParmVar callback
struct _ast7908: FunctionProtoType<_ast122, Pack<_ast7101>, SameType> {}; // FunctionProto void (v8::WasmStreamingCallback)
struct _ast7909: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7911, Pack<_ast7910>>>, _ast198>, NamedDeclName<_str1372> {}; // CXXMethod SetWasmThreadsEnabledCallback
struct _ast7910: NamedDeclName<_str82>, ParmVarDecl<_ast7103> {}; // ParmVar callback
struct _ast7911: FunctionProtoType<_ast122, Pack<_ast7103>, SameType> {}; // FunctionProto void (v8::WasmThreadsEnabledCallback)
struct _ast7912: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast198>, NamedDeclName<_str1373> {}; // CXXMethod IsDead
struct _ast7913: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7917, Pack<_ast7914, _ast7915>>>, _ast198>, NamedDeclName<_str1374> {}; // CXXMethod AddMessageListener
struct _ast7914: NamedDeclName<_str53>, ParmVarDecl<_ast6907> {}; // ParmVar that
struct _ast7915: NamedDeclName<_str129>, ParmVarDecl<_ast7916> {}; // ParmVar data
struct _ast7917: FunctionProtoType<_ast137, Pack<_ast6907, _ast7916>, SameType> {}; // FunctionProto bool (v8::MessageCallback, Local<v8::Value>)
struct _ast7918: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7923, Pack<_ast7919, _ast7920, _ast7921>>>, _ast198>, NamedDeclName<_str1375> {}; // CXXMethod AddMessageListenerWithErrorLevel
struct _ast7919: NamedDeclName<_str53>, ParmVarDecl<_ast6907> {}; // ParmVar that
struct _ast7920: NamedDeclName<_str1376>, ParmVarDecl<_ast2095> {}; // ParmVar message_levels
struct _ast7921: NamedDeclName<_str129>, ParmVarDecl<_ast7922> {}; // ParmVar data
struct _ast7923: FunctionProtoType<_ast137, Pack<_ast6907, _ast2095, _ast7922>, SameType> {}; // FunctionProto bool (v8::MessageCallback, int, Local<v8::Value>)
struct _ast7924: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7926, Pack<_ast7925>>>, _ast198>, NamedDeclName<_str1377> {}; // CXXMethod RemoveMessageListeners
struct _ast7925: NamedDeclName<_str53>, ParmVarDecl<_ast6907> {}; // ParmVar that
struct _ast7926: FunctionProtoType<_ast122, Pack<_ast6907>, SameType> {}; // FunctionProto void (v8::MessageCallback)
struct _ast7927: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7929, Pack<_ast7928>>>, _ast198>, NamedDeclName<_str1378> {}; // CXXMethod SetFailedAccessCheckCallbackFunction
struct _ast7928: NamedDeclAnon<_str64>, ParmVarDecl<_ast7091> {}; // ParmVar 
struct _ast7929: FunctionProtoType<_ast122, Pack<_ast7091>, SameType> {}; // FunctionProto void (v8::FailedAccessCheckCallback)
struct _ast7930: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7935, Pack<_ast7931, _ast7932, _ast7933>>>, _ast198>, NamedDeclName<_str1379> {}; // CXXMethod SetCaptureStackTraceForUncaughtExceptions
struct _ast7931: NamedDeclName<_str1380>, ParmVarDecl<_ast137> {}; // ParmVar capture
struct _ast7932: NamedDeclName<_str321>, ParmVarDecl<_ast2095> {}; // ParmVar frame_limit
struct _ast7933: NamedDeclName<_str275>, ParmVarDecl<_ast7934> {}; // ParmVar options
struct _ast7935: FunctionProtoType<_ast122, Pack<_ast137, _ast2095, _ast7934>, SameType> {}; // FunctionProto void (bool, int, StackTrace::StackTraceOptions)
struct _ast7936: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7938, Pack<_ast7937>>>, _ast198>, NamedDeclName<_str1381> {}; // CXXMethod VisitExternalResources
struct _ast7937: NamedDeclName<_str1120>, ParmVarDecl<_ast7237> {}; // ParmVar visitor
struct _ast7938: FunctionProtoType<_ast122, Pack<_ast7237>, SameType> {}; // FunctionProto void (v8::ExternalResourceVisitor *)
struct _ast7939: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7941, Pack<_ast7940>>>, _ast198>, NamedDeclName<_str1382> {}; // CXXMethod VisitHandlesWithClassIds
struct _ast7940: NamedDeclName<_str1120>, ParmVarDecl<_ast7253> {}; // ParmVar visitor
struct _ast7941: FunctionProtoType<_ast122, Pack<_ast7253>, SameType> {}; // FunctionProto void (v8::PersistentHandleVisitor *)
struct _ast7942: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7941, Pack<_ast7943>>>, _ast198>, NamedDeclName<_str1383> {}; // CXXMethod VisitWeakHandles
struct _ast7943: NamedDeclName<_str1120>, ParmVarDecl<_ast7253> {}; // ParmVar visitor
struct _ast7944: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast198>, NamedDeclName<_str1384> {}; // CXXMethod IsInUse
struct _ast7945: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast7946>>>, _ast198>, NamedDeclName<_str1385> {}; // CXXMethod SetAllowAtomicsWait
struct _ast7946: NamedDeclName<_str1386>, ParmVarDecl<_ast137> {}; // ParmVar allow
struct _ast7947: NamedDeclName<_str1387>, TypeDecl<_ast7948> {}; // Enum TimeZoneDetection
struct _ast7948: EnumType<_ast7947, _ast2095> {}; // Enum v8::Isolate::TimeZoneDetection
struct _ast7949: NamedDeclName<_str1388> {}; // EnumConstant kSkip
struct _ast7950: NamedDeclName<_str1389> {}; // EnumConstant kRedetect
struct _ast7951: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7953, Pack<_ast7952>>>, _ast198>, NamedDeclName<_str1390> {}; // CXXMethod DateTimeConfigurationChangeNotification
struct _ast7952: NamedDeclName<_str1391>, ParmVarDecl<_ast7948> {}; // ParmVar time_zone_detection
struct _ast7953: FunctionProtoType<_ast122, Pack<_ast7948>, SameType> {}; // FunctionProto void (v8::Isolate::TimeZoneDetection)
struct _ast7954: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>, NamedDeclName<_str1392> {}; // CXXMethod LocaleConfigurationChangeNotification
struct _ast7955: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast198>> {}; // CXXConstructor Isolate
struct _ast7956: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7957, Pack<>>>, _ast198>> {}; // CXXDestructor ~Isolate
struct _ast7957: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast7958: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7961, Pack<_ast7959>>>, _ast198>> {}; // CXXConstructor Isolate
struct _ast7959: NamedDeclAnon<_str64>, ParmVarDecl<_ast7960> {}; // ParmVar 
struct _ast7960: LValueReferenceType<ReferenceType<_ast7825>> {}; // LValueReference const v8::Isolate &
struct _ast7961: FunctionProtoType<_ast122, Pack<_ast7960>, SameType> {}; // FunctionProto void (const v8::Isolate &)
struct _ast7962: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast7964, Pack<_ast7963>>>, _ast198>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast7963: NamedDeclAnon<_str64>, ParmVarDecl<_ast7960> {}; // ParmVar 
struct _ast7964: FunctionProtoType<_ast7965, Pack<_ast7960>, SameType> {}; // FunctionProto v8::Isolate &(const v8::Isolate &)
struct _ast7965: LValueReferenceType<ReferenceType<_ast7>> {}; // LValueReference v8::Isolate &
struct _ast7966: MethodDecl<FunctionDecl<_ast5816, Pack<_ast7967>>>, NamedDeclName<_str1393> {}; // CXXMethod operator new
struct _ast7967: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast7968: MethodDecl<FunctionDecl<_ast5816, Pack<_ast7969>>>, NamedDeclName<_str1394> {}; // CXXMethod operator new[]
struct _ast7969: NamedDeclName<_str374>, ParmVarDecl<_ast3539> {}; // ParmVar size
struct _ast7970: MethodDecl<FunctionDecl<_ast7973, Pack<_ast7971, _ast7972>>>, NamedDeclName<_str1395> {}; // CXXMethod operator delete
struct _ast7971: NamedDeclAnon<_str64>, ParmVarDecl<_ast2460> {}; // ParmVar 
struct _ast7972: NamedDeclAnon<_str64>, ParmVarDecl<_ast3539> {}; // ParmVar 
struct _ast7973: FunctionProtoType<_ast122, Pack<_ast2460, _ast3539>, SameType> {}; // FunctionProto void (void *, size_t) noexcept
struct _ast7974: MethodDecl<FunctionDecl<_ast7973, Pack<_ast7975, _ast7976>>>, NamedDeclName<_str1396> {}; // CXXMethod operator delete[]
struct _ast7975: NamedDeclAnon<_str64>, ParmVarDecl<_ast2460> {}; // ParmVar 
struct _ast7976: NamedDeclAnon<_str64>, ParmVarDecl<_ast3539> {}; // ParmVar 
struct _ast7977: NamedDeclName<_str38>, TypeDecl<_ast88> {}; // CXXRecord StartupData
struct _ast7978: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast7979>, NamedDeclName<_str1397> {}; // CXXMethod CanBeRehashed
struct _ast7979: PointerType<_ast7980> {}; // Pointer const v8::StartupData *
struct _ast7980: ConstQualifiedType<_ast88> {}; // Record const v8::StartupData
struct _ast7981: NamedDeclName<_str129> {}; // Field data
struct _ast7982: NamedDeclName<_str1398> {}; // Field raw_size
struct _ast7983: NamedDeclName<_str1399>, TypeDecl<_ast7984> {}; // Typedef EntropySource
struct _ast7984: TypedefType<_ast7983> {}; // Typedef v8::EntropySource
struct _ast7985: NamedDeclName<_str1400>, TypeDecl<_ast7986> {}; // Typedef ReturnAddressLocationResolver
struct _ast7986: TypedefType<_ast7985> {}; // Typedef v8::ReturnAddressLocationResolver
struct _ast7987: NamedDeclName<_str1401>, TypeDecl<_ast7988> {}; // CXXRecord V8
struct _ast7988: StructOrClassRecordType<RecordType<_ast7987>> {}; // Record v8::V8
struct _ast7989: NamedDeclName<_str1401>, TypeDecl<_ast7988> {}; // CXXRecord V8
struct _ast7990: MethodDecl<FunctionDecl<_ast7993, Pack<_ast7991>>>, NamedDeclName<_str1402> {}; // CXXMethod SetNativesDataBlob
struct _ast7991: NamedDeclName<_str1403>, ParmVarDecl<_ast7992> {}; // ParmVar startup_blob
struct _ast7992: PointerType<_ast88> {}; // Pointer v8::StartupData *
struct _ast7993: FunctionProtoType<_ast122, Pack<_ast7992>, SameType> {}; // FunctionProto void (v8::StartupData *)
struct _ast7994: MethodDecl<FunctionDecl<_ast7993, Pack<_ast7995>>>, NamedDeclName<_str1404> {}; // CXXMethod SetSnapshotDataBlob
struct _ast7995: NamedDeclName<_str1403>, ParmVarDecl<_ast7992> {}; // ParmVar startup_blob
struct _ast7996: MethodDecl<FunctionDecl<_ast7998, Pack<_ast7997>>>, NamedDeclName<_str1405> {}; // CXXMethod SetDcheckErrorHandler
struct _ast7997: NamedDeclName<_str53>, ParmVarDecl<_ast6905> {}; // ParmVar that
struct _ast7998: FunctionProtoType<_ast122, Pack<_ast6905>, SameType> {}; // FunctionProto void (v8::DcheckErrorCallback)
struct _ast7999: MethodDecl<FunctionDecl<_ast2111, Pack<_ast8000>>>, NamedDeclName<_str1406> {}; // CXXMethod SetFlagsFromString
struct _ast8000: NamedDeclName<_str529>, ParmVarDecl<_ast2108> {}; // ParmVar str
struct _ast8001: MethodDecl<FunctionDecl<_ast8004, Pack<_ast8002, _ast8003>>>, NamedDeclName<_str1406> {}; // CXXMethod SetFlagsFromString
struct _ast8002: NamedDeclName<_str529>, ParmVarDecl<_ast2108> {}; // ParmVar str
struct _ast8003: NamedDeclName<_str159>, ParmVarDecl<_ast3539> {}; // ParmVar length
struct _ast8004: FunctionProtoType<_ast122, Pack<_ast2108, _ast3539>, SameType> {}; // FunctionProto void (const char *, size_t)
struct _ast8005: MethodDecl<FunctionDecl<_ast8008, Pack<_ast8006, _ast8007>>>, NamedDeclName<_str1406> {}; // CXXMethod SetFlagsFromString
struct _ast8006: NamedDeclName<_str529>, ParmVarDecl<_ast2108> {}; // ParmVar str
struct _ast8007: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast8008: FunctionProtoType<_ast122, Pack<_ast2108, _ast2095>, SameType> {}; // FunctionProto void (const char *, int)
struct _ast8009: MethodDecl<FunctionDecl<_ast8014, Pack<_ast8010, _ast8011, _ast8013>>>, NamedDeclName<_str1407> {}; // CXXMethod SetFlagsFromCommandLine
struct _ast8010: NamedDeclName<_str636>, ParmVarDecl<_ast4261> {}; // ParmVar argc
struct _ast8011: NamedDeclName<_str654>, ParmVarDecl<_ast8012> {}; // ParmVar argv
struct _ast8012: PointerType<_ast4258> {}; // Pointer char **
struct _ast8013: NamedDeclName<_str1408>, ParmVarDecl<_ast137> {}; // ParmVar remove_flags
struct _ast8014: FunctionProtoType<_ast122, Pack<_ast4261, _ast8012, _ast137>, SameType> {}; // FunctionProto void (int *, char **, bool)
struct _ast8015: MethodDecl<FunctionDecl<_ast7149, Pack<>>>, NamedDeclName<_str1409> {}; // CXXMethod GetVersion
struct _ast8016: MethodDecl<FunctionDecl<_ast3541, Pack<>>>, NamedDeclName<_str150> {}; // CXXMethod Initialize
struct _ast8017: MethodDecl<FunctionDecl<_ast8019, Pack<_ast8018>>>, NamedDeclName<_str1410> {}; // CXXMethod SetEntropySource
struct _ast8018: NamedDeclName<_str136>, ParmVarDecl<_ast7984> {}; // ParmVar source
struct _ast8019: FunctionProtoType<_ast122, Pack<_ast7984>, SameType> {}; // FunctionProto void (v8::EntropySource)
struct _ast8020: MethodDecl<FunctionDecl<_ast8022, Pack<_ast8021>>>, NamedDeclName<_str1411> {}; // CXXMethod SetReturnAddressLocationResolver
struct _ast8021: NamedDeclName<_str1412>, ParmVarDecl<_ast7986> {}; // ParmVar return_address_resolver
struct _ast8022: FunctionProtoType<_ast122, Pack<_ast7986>, SameType> {}; // FunctionProto void (v8::ReturnAddressLocationResolver)
struct _ast8023: MethodDecl<FunctionDecl<_ast3541, Pack<>>>, NamedDeclName<_str508> {}; // CXXMethod Dispose
struct _ast8024: MethodDecl<FunctionDecl<_ast8026, Pack<_ast8025>>>, NamedDeclName<_str1413> {}; // CXXMethod InitializeICU
struct _ast8025: NamedDeclName<_str1414>, ParmVarDecl<_ast2108> {}; // ParmVar icu_data_file
struct _ast8026: FunctionProtoType<_ast137, Pack<_ast2108>, SameType> {}; // FunctionProto bool (const char *)
struct _ast8027: MethodDecl<FunctionDecl<_ast8030, Pack<_ast8028, _ast8029>>>, NamedDeclName<_str1415> {}; // CXXMethod InitializeICUDefaultLocation
struct _ast8028: NamedDeclName<_str1416>, ParmVarDecl<_ast2108> {}; // ParmVar exec_path
struct _ast8029: NamedDeclName<_str1414>, ParmVarDecl<_ast2108> {}; // ParmVar icu_data_file
struct _ast8030: FunctionProtoType<_ast137, Pack<_ast2108, _ast2108>, SameType> {}; // FunctionProto bool (const char *, const char *)
struct _ast8031: MethodDecl<FunctionDecl<_ast2111, Pack<_ast8032>>>, NamedDeclName<_str1417> {}; // CXXMethod InitializeExternalStartupData
struct _ast8032: NamedDeclName<_str1418>, ParmVarDecl<_ast2108> {}; // ParmVar directory_path
struct _ast8033: MethodDecl<FunctionDecl<_ast8036, Pack<_ast8034, _ast8035>>>, NamedDeclName<_str1417> {}; // CXXMethod InitializeExternalStartupData
struct _ast8034: NamedDeclName<_str1419>, ParmVarDecl<_ast2108> {}; // ParmVar natives_blob
struct _ast8035: NamedDeclName<_str1147>, ParmVarDecl<_ast2108> {}; // ParmVar snapshot_blob
struct _ast8036: FunctionProtoType<_ast122, Pack<_ast2108, _ast2108>, SameType> {}; // FunctionProto void (const char *, const char *)
struct _ast8037: MethodDecl<FunctionDecl<_ast8040, Pack<_ast8038>>>, NamedDeclName<_str1420> {}; // CXXMethod InitializePlatform
struct _ast8038: NamedDeclName<_str1421>, ParmVarDecl<_ast8039> {}; // ParmVar platform
struct _ast8039: PointerType<_ast70> {}; // Pointer v8::Platform *
struct _ast8040: FunctionProtoType<_ast122, Pack<_ast8039>, SameType> {}; // FunctionProto void (v8::Platform *)
struct _ast8041: MethodDecl<FunctionDecl<_ast121, Pack<>>>, NamedDeclName<_str1422> {}; // CXXMethod ShutdownPlatform
struct _ast8042: MethodDecl<FunctionDecl<_ast8044, Pack<_ast8043>>>, NamedDeclName<_str1423> {}; // CXXMethod EnableWebAssemblyTrapHandler
struct _ast8043: NamedDeclName<_str1424>, ParmVarDecl<_ast137> {}; // ParmVar use_v8_signal_handler
struct _ast8044: FunctionProtoType<_ast137, Pack<_ast137>, SameType> {}; // FunctionProto bool (bool)
struct _ast8045: MethodDecl<FunctionDecl<_ast8047, Pack<_ast8046>>>, NamedDeclName<_str1425> {}; // CXXMethod SetUnhandledExceptionCallback
struct _ast8046: NamedDeclName<_str1426>, ParmVarDecl<_ast7231> {}; // ParmVar unhandled_exception_callback
struct _ast8047: FunctionProtoType<_ast122, Pack<_ast7231>, SameType> {}; // FunctionProto void (v8::UnhandledExceptionCallback)
struct _ast8048: NamedDeclName<_str1427>, TypeDecl<_ast8049> {}; // CXXRecord SnapshotCreator
struct _ast8049: StructOrClassRecordType<RecordType<_ast8048>> {}; // Record v8::SnapshotCreator
struct _ast8050: NamedDeclName<_str1427>, TypeDecl<_ast8049> {}; // CXXRecord SnapshotCreator
struct _ast8051: NamedDeclName<_str1428>, TypeDecl<_ast8052> {}; // Enum FunctionCodeHandling
struct _ast8052: EnumType<_ast8051, _ast2095> {}; // Enum v8::SnapshotCreator::FunctionCodeHandling
struct _ast8053: NamedDeclName<_str1429> {}; // EnumConstant kClear
struct _ast8054: NamedDeclName<_str1430> {}; // EnumConstant kKeep
struct _ast8055: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8062, Pack<_ast8056, _ast8057, _ast8061>>>, _ast8063>> {}; // CXXConstructor SnapshotCreator
struct _ast8056: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8057: NamedDeclName<_str1152>, ParmVarDecl<_ast8058> {}; // ParmVar external_references
struct _ast8058: PointerType<_ast8059> {}; // Pointer const intptr_t *
struct _ast8059: ConstQualifiedType<_ast8060> {}; // Typedef const intptr_t
struct _ast8060: PointerSizeType<SignedIntegerType> {}; // Typedef intptr_t
struct _ast8061: NamedDeclName<_str1431>, ParmVarDecl<_ast7992> {}; // ParmVar existing_blob
struct _ast8062: FunctionProtoType<_ast122, Pack<_ast198, _ast8058, _ast7992>, SameType> {}; // FunctionProto void (v8::Isolate *, const intptr_t *, v8::StartupData *)
struct _ast8063: PointerType<_ast8049> {}; // Pointer v8::SnapshotCreator *
struct _ast8064: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8067, Pack<_ast8065, _ast8066>>>, _ast8063>> {}; // CXXConstructor SnapshotCreator
struct _ast8065: NamedDeclName<_str1152>, ParmVarDecl<_ast8058> {}; // ParmVar external_references
struct _ast8066: NamedDeclName<_str1431>, ParmVarDecl<_ast7992> {}; // ParmVar existing_blob
struct _ast8067: FunctionProtoType<_ast122, Pack<_ast8058, _ast7992>, SameType> {}; // FunctionProto void (const intptr_t *, v8::StartupData *)
struct _ast8068: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8069, Pack<>>>, _ast8063>> {}; // CXXDestructor ~SnapshotCreator
struct _ast8069: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast8070: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5090, Pack<>>>, _ast8063>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast8071: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8075, Pack<_ast8072, _ast8074>>>, _ast8063>, NamedDeclName<_str1432> {}; // CXXMethod SetDefaultContext
struct _ast8072: NamedDeclName<_str220>, ParmVarDecl<_ast8073> {}; // ParmVar context
struct _ast8074: NamedDeclName<_str82>, ParmVarDecl<_ast7364> {}; // ParmVar callback
struct _ast8075: FunctionProtoType<_ast122, Pack<_ast8073, _ast7364>, SameType> {}; // FunctionProto void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8076: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8080, Pack<_ast8077, _ast8079>>>, _ast8063>, NamedDeclName<_str1433> {}; // CXXMethod AddContext
struct _ast8077: NamedDeclName<_str220>, ParmVarDecl<_ast8078> {}; // ParmVar context
struct _ast8079: NamedDeclName<_str82>, ParmVarDecl<_ast7364> {}; // ParmVar callback
struct _ast8080: FunctionProtoType<_ast3539, Pack<_ast8078, _ast7364>, SameType> {}; // FunctionProto size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8081: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8084, Pack<_ast8082>>>, _ast8063>, NamedDeclName<_str1434> {}; // CXXMethod AddTemplate
struct _ast8082: NamedDeclName<_str1435>, ParmVarDecl<_ast8083> {}; // ParmVar template_obj
struct _ast8084: FunctionProtoType<_ast3539, Pack<_ast8083>, SameType> {}; // FunctionProto size_t (Local<v8::Template>)
struct _ast8085: NamedDeclName<_str1436> {}; // FunctionTemplate AddData
struct _ast8086: NamedDeclName<_str21>, TypeDecl<_ast8087> {}; // TemplateTypeParm T
struct _ast8088: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8093, Pack<_ast8089, _ast8091>>>, _ast8063>, NamedDeclName<_str1436> {}; // CXXMethod AddData
struct _ast8089: NamedDeclName<_str220>, ParmVarDecl<_ast8090> {}; // ParmVar context
struct _ast8091: NamedDeclName<_str367>, ParmVarDecl<_ast8092> {}; // ParmVar object
struct _ast8093: FunctionProtoType<_ast3539, Pack<_ast8090, _ast8092>, SameType> {}; // FunctionProto size_t (Local<v8::Context>, Local<T>)
struct _ast8094: NamedDeclName<_str1436> {}; // FunctionTemplate AddData
struct _ast8095: NamedDeclName<_str21>, TypeDecl<_ast8096> {}; // TemplateTypeParm T
struct _ast8097: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8100, Pack<_ast8098>>>, _ast8063>, NamedDeclName<_str1436> {}; // CXXMethod AddData
struct _ast8098: NamedDeclName<_str367>, ParmVarDecl<_ast8099> {}; // ParmVar object
struct _ast8100: FunctionProtoType<_ast3539, Pack<_ast8099>, SameType> {}; // FunctionProto size_t (Local<T>)
struct _ast8101: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8103, Pack<_ast8102>>>, _ast8063>, NamedDeclName<_str1437> {}; // CXXMethod CreateBlob
struct _ast8102: NamedDeclName<_str1438>, ParmVarDecl<_ast8052> {}; // ParmVar function_code_handling
struct _ast8103: FunctionProtoType<_ast88, Pack<_ast8052>, SameType> {}; // FunctionProto v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
struct _ast8104: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8108, Pack<_ast8105>>>, _ast8063>> {}; // CXXConstructor SnapshotCreator
struct _ast8105: NamedDeclAnon<_str64>, ParmVarDecl<_ast8106> {}; // ParmVar 
struct _ast8106: LValueReferenceType<ReferenceType<_ast8107>> {}; // LValueReference const v8::SnapshotCreator &
struct _ast8107: ConstQualifiedType<_ast8049> {}; // Record const v8::SnapshotCreator
struct _ast8108: FunctionProtoType<_ast122, Pack<_ast8106>, SameType> {}; // FunctionProto void (const v8::SnapshotCreator &)
struct _ast8109: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8108, Pack<_ast8110>>>, _ast8063>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast8110: NamedDeclAnon<_str64>, ParmVarDecl<_ast8106> {}; // ParmVar 
struct _ast8111: NamedDeclName<_str21>, TypeDecl<_ast8112> {}; // TemplateTypeParm T
struct _ast8113: NamedDeclName<_str20>, TypeDecl<_ast42> {}; // CXXRecord Maybe
struct _ast8114: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8115>, NamedDeclName<_str1439> {}; // CXXMethod IsNothing
struct _ast8115: PointerType<_ast8116> {}; // Pointer const Maybe<T> *
struct _ast8116: ConstQualifiedType<_ast42> {}; // InjectedClassName const Maybe<T>
struct _ast8117: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8115>, NamedDeclName<_str1440> {}; // CXXMethod IsJust
struct _ast8118: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8119, Pack<>>>, _ast8115>, NamedDeclName<_str1441> {}; // CXXMethod ToChecked
struct _ast8119: FunctionProtoType<_ast8112, Pack<>, ConstQualifiedType> {}; // FunctionProto T () const
struct _ast8120: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4288, Pack<>>>, _ast8115>, NamedDeclName<_str1442> {}; // CXXMethod Check
struct _ast8121: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8124, Pack<_ast8122>>>, _ast8115>, NamedDeclName<_str1443> {}; // CXXMethod To
struct _ast8122: NamedDeclName<_str68>, ParmVarDecl<_ast8123> {}; // ParmVar out
struct _ast8123: PointerType<_ast8112> {}; // Pointer T *
struct _ast8124: FunctionProtoType<_ast137, Pack<_ast8123>, ConstQualifiedType> {}; // FunctionProto bool (T *) const
struct _ast8125: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8119, Pack<>>>, _ast8115>, NamedDeclName<_str1444> {}; // CXXMethod FromJust
struct _ast8126: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8130, Pack<_ast8127>>>, _ast8115>, NamedDeclName<_str70> {}; // CXXMethod FromMaybe
struct _ast8127: NamedDeclName<_str71>, ParmVarDecl<_ast8128> {}; // ParmVar default_value
struct _ast8128: LValueReferenceType<ReferenceType<_ast8129>> {}; // LValueReference const T &
struct _ast8129: ConstQualifiedType<_ast8112> {}; // TemplateTypeParm const T
struct _ast8130: FunctionProtoType<_ast8112, Pack<_ast8128>, ConstQualifiedType> {}; // FunctionProto T (const T &) const
struct _ast8131: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8134, Pack<_ast8132>>>, _ast8115>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast8132: NamedDeclName<_str76>, ParmVarDecl<_ast8133> {}; // ParmVar other
struct _ast8133: LValueReferenceType<ReferenceType<_ast8116>> {}; // LValueReference const Maybe<T> &
struct _ast8134: FunctionProtoType<_ast137, Pack<_ast8133>, ConstQualifiedType> {}; // FunctionProto bool (const Maybe<T> &) const
struct _ast8135: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8134, Pack<_ast8136>>>, _ast8115>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast8136: NamedDeclName<_str76>, ParmVarDecl<_ast8133> {}; // ParmVar other
struct _ast8137: NamedDeclName<_str1445> {}; // FunctionTemplate Nothing
struct _ast8138: NamedDeclName<_str21>, TypeDecl<_ast8139> {}; // TemplateTypeParm T
struct _ast8140: FunctionDecl<_ast8141, Pack<>>, NamedDeclName<_str1445> {}; // Function Nothing
struct _ast8141: FunctionProtoType<_ast8142, Pack<>, SameType> {}; // FunctionProto Maybe<T> ()
struct _ast8143: NamedDeclName<_str1446> {}; // FunctionTemplate Just
struct _ast8144: NamedDeclName<_str21>, TypeDecl<_ast8145> {}; // TemplateTypeParm T
struct _ast8146: FunctionDecl<_ast8150, Pack<_ast8147>>, NamedDeclName<_str1446> {}; // Function Just
struct _ast8147: NamedDeclName<_str1447>, ParmVarDecl<_ast8148> {}; // ParmVar t
struct _ast8148: LValueReferenceType<ReferenceType<_ast8149>> {}; // LValueReference const T &
struct _ast8149: ConstQualifiedType<_ast8145> {}; // TemplateTypeParm const T
struct _ast8150: FunctionProtoType<_ast8151, Pack<_ast8148>, SameType> {}; // FunctionProto Maybe<T> (const T &)
struct _ast8152: NamedDeclName<_str20>, TypeDecl<_ast8153> {}; // ClassTemplateSpecialization Maybe
struct _ast8153: StructOrClassRecordType<RecordType<_ast8152>> {}; // Record v8::Maybe<void>
struct _ast8154: NamedDeclName<_str20>, TypeDecl<_ast8153> {}; // CXXRecord Maybe
struct _ast8155: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8156>, NamedDeclName<_str1439> {}; // CXXMethod IsNothing
struct _ast8156: PointerType<_ast8157> {}; // Pointer const v8::Maybe<void> *
struct _ast8157: ConstQualifiedType<_ast8153> {}; // Record const v8::Maybe<void>
struct _ast8158: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8156>, NamedDeclName<_str1440> {}; // CXXMethod IsJust
struct _ast8159: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8162, Pack<_ast8160>>>, _ast8156>, NamedDeclName<_str58> {}; // CXXMethod operator==
struct _ast8160: NamedDeclName<_str76>, ParmVarDecl<_ast8161> {}; // ParmVar other
struct _ast8161: LValueReferenceType<ReferenceType<_ast8157>> {}; // LValueReference const v8::Maybe<void> &
struct _ast8162: FunctionProtoType<_ast137, Pack<_ast8161>, ConstQualifiedType> {}; // FunctionProto bool (const v8::Maybe<void> &) const
struct _ast8163: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8162, Pack<_ast8164>>>, _ast8156>, NamedDeclName<_str59> {}; // CXXMethod operator!=
struct _ast8164: NamedDeclName<_str76>, ParmVarDecl<_ast8161> {}; // ParmVar other
struct _ast8165: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8167, Pack<_ast8166>>>, _ast8168>> {}; // CXXConstructor Maybe
struct _ast8166: NamedDeclAnon<_str64>, ParmVarDecl<_ast8161> {}; // ParmVar 
struct _ast8167: FunctionProtoType<_ast122, Pack<_ast8161>, SameType> {}; // FunctionProto void (const v8::Maybe<void> &)
struct _ast8168: PointerType<_ast8153> {}; // Pointer v8::Maybe<void> *
struct _ast8169: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8172, Pack<_ast8170>>>, _ast8168>> {}; // CXXConstructor Maybe
struct _ast8170: NamedDeclAnon<_str64>, ParmVarDecl<_ast8171> {}; // ParmVar 
struct _ast8171: RValueReferenceType<ReferenceType<_ast8153>> {}; // RValueReference v8::Maybe<void> &&
struct _ast8172: FunctionProtoType<_ast122, Pack<_ast8171>, SameType> {}; // FunctionProto void (v8::Maybe<void> &&) noexcept
struct _ast8173: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast8168>> {}; // CXXDestructor ~Maybe
struct _ast8174: FunctionDecl<_ast8175, Pack<>>, NamedDeclName<_str1448> {}; // Function JustVoid
struct _ast8175: FunctionProtoType<_ast8176, Pack<>, SameType> {}; // FunctionProto Maybe<void> ()
struct _ast8177: NamedDeclName<_str1449>, TypeDecl<_ast8178> {}; // CXXRecord TryCatch
struct _ast8178: StructOrClassRecordType<RecordType<_ast8177>> {}; // Record v8::TryCatch
struct _ast8179: NamedDeclName<_str1449>, TypeDecl<_ast8178> {}; // CXXRecord TryCatch
struct _ast8180: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast8181>>>, _ast8182>> {}; // CXXConstructor TryCatch
struct _ast8181: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8182: PointerType<_ast8178> {}; // Pointer v8::TryCatch *
struct _ast8183: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8184, Pack<>>>, _ast8182>> {}; // CXXDestructor ~TryCatch
struct _ast8184: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast8185: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8186>, NamedDeclName<_str1450> {}; // CXXMethod HasCaught
struct _ast8186: PointerType<_ast8187> {}; // Pointer const v8::TryCatch *
struct _ast8187: ConstQualifiedType<_ast8178> {}; // Record const v8::TryCatch
struct _ast8188: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8186>, NamedDeclName<_str1451> {}; // CXXMethod CanContinue
struct _ast8189: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8186>, NamedDeclName<_str1452> {}; // CXXMethod HasTerminated
struct _ast8190: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8191, Pack<>>>, _ast8182>, NamedDeclName<_str1453> {}; // CXXMethod ReThrow
struct _ast8191: FunctionProtoType<_ast8192, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast8193: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8194, Pack<>>>, _ast8186>, NamedDeclName<_str957> {}; // CXXMethod Exception
struct _ast8194: FunctionProtoType<_ast8195, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Value> () const
struct _ast8196: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8199, Pack<_ast8197>>>, _ast8186>, NamedDeclName<_str40> {}; // CXXMethod StackTrace
struct _ast8197: NamedDeclName<_str220>, ParmVarDecl<_ast8198> {}; // ParmVar context
struct _ast8199: FunctionProtoType<_ast8200, Pack<_ast8198>, ConstQualifiedType> {}; // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _ast8201: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8202, Pack<>>>, _ast8186>, NamedDeclName<_str291> {}; // CXXMethod Message
struct _ast8202: FunctionProtoType<_ast8203, Pack<>, ConstQualifiedType> {}; // FunctionProto Local<v8::Message> () const
struct _ast8204: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast8182>, NamedDeclName<_str75> {}; // CXXMethod Reset
struct _ast8205: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast8206>>>, _ast8182>, NamedDeclName<_str1454> {}; // CXXMethod SetVerbose
struct _ast8206: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast8207: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast136, Pack<>>>, _ast8186>, NamedDeclName<_str1455> {}; // CXXMethod IsVerbose
struct _ast8208: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast8209>>>, _ast8182>, NamedDeclName<_str1456> {}; // CXXMethod SetCaptureMessage
struct _ast8209: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast8210: MethodDecl<FunctionDecl<_ast8212, Pack<_ast8211>>>, NamedDeclName<_str1457> {}; // CXXMethod JSStackComparableAddress
struct _ast8211: NamedDeclName<_str720>, ParmVarDecl<_ast8182> {}; // ParmVar handler
struct _ast8212: FunctionProtoType<_ast2460, Pack<_ast8182>, SameType> {}; // FunctionProto void *(v8::TryCatch *)
struct _ast8213: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8216, Pack<_ast8214>>>, _ast8182>> {}; // CXXConstructor TryCatch
struct _ast8214: NamedDeclAnon<_str64>, ParmVarDecl<_ast8215> {}; // ParmVar 
struct _ast8215: LValueReferenceType<ReferenceType<_ast8187>> {}; // LValueReference const v8::TryCatch &
struct _ast8216: FunctionProtoType<_ast122, Pack<_ast8215>, SameType> {}; // FunctionProto void (const v8::TryCatch &)
struct _ast8217: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8216, Pack<_ast8218>>>, _ast8182>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast8218: NamedDeclAnon<_str64>, ParmVarDecl<_ast8215> {}; // ParmVar 
struct _ast8219: NamedDeclName<_str1458>, TypeDecl<_ast8220> {}; // CXXRecord ExtensionConfiguration
struct _ast8220: StructOrClassRecordType<RecordType<_ast8219>> {}; // Record v8::ExtensionConfiguration
struct _ast8221: NamedDeclName<_str1458>, TypeDecl<_ast8220> {}; // CXXRecord ExtensionConfiguration
struct _ast8222: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast8223>> {}; // CXXConstructor ExtensionConfiguration
struct _ast8223: PointerType<_ast8220> {}; // Pointer v8::ExtensionConfiguration *
struct _ast8224: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8228, Pack<_ast8225, _ast8226>>>, _ast8223>> {}; // CXXConstructor ExtensionConfiguration
struct _ast8225: NamedDeclName<_str1459>, ParmVarDecl<_ast2095> {}; // ParmVar name_count
struct _ast8226: NamedDeclName<_str659>, ParmVarDecl<_ast8227> {}; // ParmVar names
struct _ast8228: FunctionProtoType<_ast122, Pack<_ast2095, _ast8227>, SameType> {}; // FunctionProto void (int, const char **)
struct _ast8229: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6810, Pack<>>>, _ast8230>, NamedDeclName<_str1460> {}; // CXXMethod begin
struct _ast8230: PointerType<_ast8231> {}; // Pointer const v8::ExtensionConfiguration *
struct _ast8231: ConstQualifiedType<_ast8220> {}; // Record const v8::ExtensionConfiguration
struct _ast8232: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast6810, Pack<>>>, _ast8230>, NamedDeclName<_str1461> {}; // CXXMethod end
struct _ast8233: NamedDeclName<_str2>, TypeDecl<_ast3> {}; // CXXRecord Context
struct _ast8234: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8235, Pack<>>>, _ast8237>, NamedDeclName<_str95> {}; // CXXMethod Global
struct _ast8235: FunctionProtoType<_ast8236, Pack<>, SameType> {}; // FunctionProto Local<v8::Object> ()
struct _ast8237: PointerType<_ast3> {}; // Pointer v8::Context *
struct _ast8238: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast8237>, NamedDeclName<_str1462> {}; // CXXMethod DetachGlobal
struct _ast8239: MethodDecl<FunctionDecl<_ast8248, Pack<_ast8240, _ast8241, _ast8242, _ast8244, _ast8246, _ast8247>>>, NamedDeclName<_str62> {}; // CXXMethod New
struct _ast8240: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8241: NamedDeclName<_str1463>, ParmVarDecl<_ast8223> {}; // ParmVar extensions
struct _ast8242: NamedDeclName<_str1464>, ParmVarDecl<_ast8243> {}; // ParmVar global_template
struct _ast8244: NamedDeclName<_str1465>, ParmVarDecl<_ast8245> {}; // ParmVar global_object
struct _ast8246: NamedDeclName<_str1466>, ParmVarDecl<_ast7388> {}; // ParmVar internal_fields_deserializer
struct _ast8247: NamedDeclName<_str1008>, ParmVarDecl<_ast7021> {}; // ParmVar microtask_queue
struct _ast8248: FunctionProtoType<_ast8249, Pack<_ast198, _ast8223, _ast8243, _ast8245, _ast7388, _ast7021>, SameType> {}; // FunctionProto Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _ast8250: MethodDecl<FunctionDecl<_ast8258, Pack<_ast8251, _ast8252, _ast8253, _ast8254, _ast8255, _ast8257>>>, NamedDeclName<_str865> {}; // CXXMethod FromSnapshot
struct _ast8251: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8252: NamedDeclName<_str1467>, ParmVarDecl<_ast3539> {}; // ParmVar context_snapshot_index
struct _ast8253: NamedDeclName<_str1468>, ParmVarDecl<_ast7388> {}; // ParmVar embedder_fields_deserializer
struct _ast8254: NamedDeclName<_str1463>, ParmVarDecl<_ast8223> {}; // ParmVar extensions
struct _ast8255: NamedDeclName<_str1465>, ParmVarDecl<_ast8256> {}; // ParmVar global_object
struct _ast8257: NamedDeclName<_str1008>, ParmVarDecl<_ast7021> {}; // ParmVar microtask_queue
struct _ast8258: FunctionProtoType<_ast8259, Pack<_ast198, _ast3539, _ast7388, _ast8223, _ast8256, _ast7021>, SameType> {}; // FunctionProto MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _ast8260: MethodDecl<FunctionDecl<_ast8266, Pack<_ast8261, _ast8262, _ast8264>>>, NamedDeclName<_str1469> {}; // CXXMethod NewRemoteContext
struct _ast8261: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8262: NamedDeclName<_str1464>, ParmVarDecl<_ast8263> {}; // ParmVar global_template
struct _ast8264: NamedDeclName<_str1465>, ParmVarDecl<_ast8265> {}; // ParmVar global_object
struct _ast8266: FunctionProtoType<_ast8267, Pack<_ast198, _ast8263, _ast8265>, SameType> {}; // FunctionProto MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ast8268: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8271, Pack<_ast8269>>>, _ast8237>, NamedDeclName<_str1470> {}; // CXXMethod SetSecurityToken
struct _ast8269: NamedDeclName<_str1471>, ParmVarDecl<_ast8270> {}; // ParmVar token
struct _ast8271: FunctionProtoType<_ast122, Pack<_ast8270>, SameType> {}; // FunctionProto void (Local<v8::Value>)
struct _ast8272: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast8237>, NamedDeclName<_str1472> {}; // CXXMethod UseDefaultSecurityToken
struct _ast8273: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8274, Pack<>>>, _ast8237>, NamedDeclName<_str1473> {}; // CXXMethod GetSecurityToken
struct _ast8274: FunctionProtoType<_ast8275, Pack<>, SameType> {}; // FunctionProto Local<v8::Value> ()
struct _ast8276: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast8237>, NamedDeclName<_str1262> {}; // CXXMethod Enter
struct _ast8277: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast121, Pack<>>>, _ast8237>, NamedDeclName<_str1263> {}; // CXXMethod Exit
struct _ast8278: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast5090, Pack<>>>, _ast8237>, NamedDeclName<_str124> {}; // CXXMethod GetIsolate
struct _ast8279: NamedDeclName<_str1474>, TypeDecl<_ast8280> {}; // Enum EmbedderDataFields
struct _ast8280: EnumType<_ast8279, _ast2095> {}; // Enum v8::Context::EmbedderDataFields
struct _ast8281: NamedDeclName<_str1475> {}; // EnumConstant kDebugIdIndex
struct _ast8282: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3640, Pack<>>>, _ast8237>, NamedDeclName<_str1476> {}; // CXXMethod GetNumberOfEmbedderDataFields
struct _ast8283: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8285, Pack<_ast8284>>>, _ast8237>, NamedDeclName<_str1477> {}; // CXXMethod GetEmbedderData
struct _ast8284: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8285: FunctionProtoType<_ast8286, Pack<_ast2095>, SameType> {}; // FunctionProto Local<v8::Value> (int)
struct _ast8287: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8288, Pack<>>>, _ast8237>, NamedDeclName<_str1478> {}; // CXXMethod GetExtrasBindingObject
struct _ast8288: FunctionProtoType<_ast8289, Pack<>, SameType> {}; // FunctionProto Local<v8::Object> ()
struct _ast8290: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8294, Pack<_ast8291, _ast8292>>>, _ast8237>, NamedDeclName<_str1479> {}; // CXXMethod SetEmbedderData
struct _ast8291: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8292: NamedDeclName<_str152>, ParmVarDecl<_ast8293> {}; // ParmVar value
struct _ast8294: FunctionProtoType<_ast122, Pack<_ast2095, _ast8293>, SameType> {}; // FunctionProto void (int, Local<v8::Value>)
struct _ast8295: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4966, Pack<_ast8296>>>, _ast8237>, NamedDeclName<_str1480> {}; // CXXMethod GetAlignedPointerFromEmbedderData
struct _ast8296: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8297: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast4984, Pack<_ast8298, _ast8299>>>, _ast8237>, NamedDeclName<_str1481> {}; // CXXMethod SetAlignedPointerInEmbedderData
struct _ast8298: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8299: NamedDeclName<_str152>, ParmVarDecl<_ast2460> {}; // ParmVar value
struct _ast8300: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3908, Pack<_ast8301>>>, _ast8237>, NamedDeclName<_str1482> {}; // CXXMethod AllowCodeGenerationFromStrings
struct _ast8301: NamedDeclName<_str1386>, ParmVarDecl<_ast137> {}; // ParmVar allow
struct _ast8302: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3541, Pack<>>>, _ast8237>, NamedDeclName<_str1483> {}; // CXXMethod IsCodeGenerationFromStringsAllowed
struct _ast8303: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8306, Pack<_ast8304>>>, _ast8237>, NamedDeclName<_str1484> {}; // CXXMethod SetErrorMessageForCodeGenerationFromStrings
struct _ast8304: NamedDeclName<_str365>, ParmVarDecl<_ast8305> {}; // ParmVar message
struct _ast8306: FunctionProtoType<_ast122, Pack<_ast8305>, SameType> {}; // FunctionProto void (Local<v8::String>)
struct _ast8307: NamedDeclName<_str1270> {}; // FunctionTemplate GetDataFromSnapshotOnce
struct _ast8308: NamedDeclName<_str21>, TypeDecl<_ast8309> {}; // TemplateTypeParm T
struct _ast8310: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8312, Pack<_ast8311>>>, _ast8237>, NamedDeclName<_str1270> {}; // CXXMethod GetDataFromSnapshotOnce
struct _ast8311: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast8312: FunctionProtoType<_ast8313, Pack<_ast3539>, SameType> {}; // FunctionProto MaybeLocal<T> (size_t)
struct _ast8314: NamedDeclName<_str1485>, TypeDecl<_ast8315> {}; // Typedef AbortScriptExecutionCallback
struct _ast8315: TypedefType<_ast8314> {}; // Typedef v8::Context::AbortScriptExecutionCallback
struct _ast8316: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8318, Pack<_ast8317>>>, _ast8237>, NamedDeclName<_str1486> {}; // CXXMethod SetAbortScriptExecution
struct _ast8317: NamedDeclName<_str82>, ParmVarDecl<_ast8315> {}; // ParmVar callback
struct _ast8318: FunctionProtoType<_ast122, Pack<_ast8315>, SameType> {}; // FunctionProto void (v8::Context::AbortScriptExecutionCallback)
struct _ast8319: NamedDeclName<_str1155>, TypeDecl<_ast8320> {}; // CXXRecord Scope
struct _ast8320: StructOrClassRecordType<RecordType<_ast8319>> {}; // Record v8::Context::Scope
struct _ast8321: NamedDeclName<_str1155>, TypeDecl<_ast8320> {}; // CXXRecord Scope
struct _ast8322: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8325, Pack<_ast8323>>>, _ast8326>> {}; // CXXConstructor Scope
struct _ast8323: NamedDeclName<_str220>, ParmVarDecl<_ast8324> {}; // ParmVar context
struct _ast8325: FunctionProtoType<_ast122, Pack<_ast8324>, SameType> {}; // FunctionProto void (Local<v8::Context>)
struct _ast8326: PointerType<_ast8320> {}; // Pointer v8::Context::Scope *
struct _ast8327: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast228, Pack<>>>, _ast8326>> {}; // CXXDestructor ~Scope
struct _ast8328: NamedDeclName<_str1487>, TypeDecl<_ast8329> {}; // CXXRecord BackupIncumbentScope
struct _ast8329: StructOrClassRecordType<RecordType<_ast8328>> {}; // Record v8::Context::BackupIncumbentScope
struct _ast8330: NamedDeclName<_str1487>, TypeDecl<_ast8329> {}; // CXXRecord BackupIncumbentScope
struct _ast8331: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8334, Pack<_ast8332>>>, _ast8335>> {}; // CXXConstructor BackupIncumbentScope
struct _ast8332: NamedDeclName<_str1488>, ParmVarDecl<_ast8333> {}; // ParmVar backup_incumbent_context
struct _ast8334: FunctionProtoType<_ast122, Pack<_ast8333>, SameType> {}; // FunctionProto void (Local<v8::Context>)
struct _ast8335: PointerType<_ast8329> {}; // Pointer v8::Context::BackupIncumbentScope *
struct _ast8336: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8337, Pack<>>>, _ast8335>> {}; // CXXDestructor ~BackupIncumbentScope
struct _ast8337: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast8338: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8339, Pack<>>>, _ast8340>, NamedDeclName<_str1457> {}; // CXXMethod JSStackComparableAddress
struct _ast8339: FunctionProtoType<_ast7871, Pack<>, ConstQualifiedType> {}; // FunctionProto uintptr_t () const
struct _ast8340: PointerType<_ast8341> {}; // Pointer const v8::Context::BackupIncumbentScope *
struct _ast8341: ConstQualifiedType<_ast8329> {}; // Record const v8::Context::BackupIncumbentScope
struct _ast8342: NamedDeclName<_str1489>, TypeDecl<_ast8343> {}; // CXXRecord Unlocker
struct _ast8343: StructOrClassRecordType<RecordType<_ast8342>> {}; // Record v8::Unlocker
struct _ast8344: NamedDeclName<_str1489>, TypeDecl<_ast8343> {}; // CXXRecord Unlocker
struct _ast8345: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast8346>>>, _ast8347>> {}; // CXXConstructor Unlocker
struct _ast8346: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8347: PointerType<_ast8343> {}; // Pointer v8::Unlocker *
struct _ast8348: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8349, Pack<>>>, _ast8347>> {}; // CXXDestructor ~Unlocker
struct _ast8349: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast8350: NamedDeclName<_str1490>, TypeDecl<_ast8351> {}; // CXXRecord Locker
struct _ast8351: StructOrClassRecordType<RecordType<_ast8350>> {}; // Record v8::Locker
struct _ast8352: NamedDeclName<_str1490>, TypeDecl<_ast8351> {}; // CXXRecord Locker
struct _ast8353: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast3163, Pack<_ast8354>>>, _ast8355>> {}; // CXXConstructor Locker
struct _ast8354: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8355: PointerType<_ast8351> {}; // Pointer v8::Locker *
struct _ast8356: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8357, Pack<>>>, _ast8355>> {}; // CXXDestructor ~Locker
struct _ast8357: FunctionProtoType<_ast122, Pack<>, SameType> {}; // FunctionProto void ()
struct _ast8358: MethodDecl<FunctionDecl<_ast7080, Pack<_ast8359>>>, NamedDeclName<_str1491> {}; // CXXMethod IsLocked
struct _ast8359: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8360: MethodDecl<FunctionDecl<_ast3541, Pack<>>>, NamedDeclName<_str1492> {}; // CXXMethod IsActive
struct _ast8361: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8365, Pack<_ast8362>>>, _ast8355>> {}; // CXXConstructor Locker
struct _ast8362: NamedDeclAnon<_str64>, ParmVarDecl<_ast8363> {}; // ParmVar 
struct _ast8363: LValueReferenceType<ReferenceType<_ast8364>> {}; // LValueReference const v8::Locker &
struct _ast8364: ConstQualifiedType<_ast8351> {}; // Record const v8::Locker
struct _ast8365: FunctionProtoType<_ast122, Pack<_ast8363>, SameType> {}; // FunctionProto void (const v8::Locker &)
struct _ast8366: InstanceMethodDecl<MethodDecl<FunctionDecl<_ast8365, Pack<_ast8367>>>, _ast8355>, NamedDeclName<_str65> {}; // CXXMethod operator=
struct _ast8367: NamedDeclAnon<_str64>, ParmVarDecl<_ast8363> {}; // ParmVar 
struct _ast8368: NamedDeclName<_str1493>, TypeDecl<_ast8369> {}; // CXXRecord Unwinder
struct _ast8369: StructOrClassRecordType<RecordType<_ast8368>> {}; // Record v8::Unwinder
struct _ast8370: NamedDeclName<_str1493>, TypeDecl<_ast8369> {}; // CXXRecord Unwinder
struct _ast8371: MethodDecl<FunctionDecl<_ast8377, Pack<_ast8372, _ast8375, _ast8376>>>, NamedDeclName<_str1494> {}; // CXXMethod TryUnwindV8Frames
struct _ast8372: NamedDeclName<_str1495>, ParmVarDecl<_ast8373> {}; // ParmVar unwind_state
struct _ast8373: LValueReferenceType<ReferenceType<_ast8374>> {}; // LValueReference const v8::UnwindState &
struct _ast8374: ConstQualifiedType<_ast3811> {}; // Record const v8::UnwindState
struct _ast8375: NamedDeclName<_str1496>, ParmVarDecl<_ast3790> {}; // ParmVar register_state
struct _ast8376: NamedDeclName<_str1497>, ParmVarDecl<_ast3922> {}; // ParmVar stack_base
struct _ast8377: FunctionProtoType<_ast137, Pack<_ast8373, _ast3790, _ast3922>, SameType> {}; // FunctionProto bool (const v8::UnwindState &, v8::RegisterState *, const void *)
struct _ast8378: MethodDecl<FunctionDecl<_ast8381, Pack<_ast8379, _ast8380>>>, NamedDeclName<_str1498> {}; // CXXMethod PCIsInV8
struct _ast8379: NamedDeclName<_str1495>, ParmVarDecl<_ast8373> {}; // ParmVar unwind_state
struct _ast8380: NamedDeclName<_str339>, ParmVarDecl<_ast2460> {}; // ParmVar pc
struct _ast8381: FunctionProtoType<_ast137, Pack<_ast8373, _ast2460>, SameType> {}; // FunctionProto bool (const v8::UnwindState &, void *)
struct _ast8382: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8383: NamedDeclName<_str53>, ParmVarDecl<_ast8384> {}; // ParmVar that
struct _ast8385: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8386: NamedDeclName<_str53>, ParmVarDecl<_ast8387> {}; // ParmVar that
struct _ast8387: LValueReferenceType<ReferenceType<_ast8388>> {}; // LValueReference const PersistentBase<T> &
struct _ast8388: ConstQualifiedType<_ast8389> {}; // TemplateSpecialization const PersistentBase<T>
struct _ast8390: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8391: NamedDeclName<_str53>, ParmVarDecl<_ast8392> {}; // ParmVar that
struct _ast8392: LValueReferenceType<ReferenceType<_ast8393>> {}; // LValueReference const TracedGlobal<T> &
struct _ast8393: ConstQualifiedType<_ast8394> {}; // TemplateSpecialization const TracedGlobal<T>
struct _ast8395: NamedDeclName<_str52>, TypeDecl<_ast8396> {}; // TemplateTypeParm S
struct _ast8397: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8398: NamedDeclName<_str117>, ParmVarDecl<_ast8399> {}; // ParmVar handle
struct _ast8400: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8401: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8402: NamedDeclName<_str52>, TypeDecl<_ast8403> {}; // TemplateTypeParm S
struct _ast8404: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8405: NamedDeclName<_str76>, ParmVarDecl<_ast8406> {}; // ParmVar other
struct _ast8406: LValueReferenceType<ReferenceType<_ast8407>> {}; // LValueReference const Local<S> &
struct _ast8407: ConstQualifiedType<_ast8408> {}; // TemplateSpecialization const Local<S>
struct _ast8409: NamedDeclName<_str52>, TypeDecl<_ast8410> {}; // TemplateTypeParm S
struct _ast8411: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8412: NamedDeclName<_str76>, ParmVarDecl<_ast8413> {}; // ParmVar other
struct _ast8413: LValueReferenceType<ReferenceType<_ast8414>> {}; // LValueReference const PersistentBase<S> &
struct _ast8414: ConstQualifiedType<_ast8415> {}; // TemplateSpecialization const PersistentBase<S>
struct _ast8416: NamedDeclName<_str80>, TypeDecl<_ast8417> {}; // TemplateTypeParm P
struct _ast8418: NamedDeclName<_str81>, ParmVarDecl<_ast8419> {}; // ParmVar parameter
struct _ast8419: PointerType<_ast8417> {}; // Pointer P *
struct _ast8420: NamedDeclName<_str82>, ParmVarDecl<_ast8421> {}; // ParmVar callback
struct _ast8422: NamedDeclName<_str83>, ParmVarDecl<_ast2094> {}; // ParmVar type
struct _ast8423: NamedDeclName<_str80>, TypeDecl<_ast8424> {}; // TemplateTypeParm P
struct _ast8425: NamedDeclName<_str87>, ParmVarDecl<_ast2108> {}; // ParmVar label
struct _ast8426: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast8427: NamedDeclName<_str76>, ParmVarDecl<_ast3030> {}; // ParmVar other
struct _ast8428: NamedDeclName<_str52>, TypeDecl<_ast8429> {}; // TemplateTypeParm S
struct _ast8430: NamedDeclName<_str97>, ParmVarDecl<_ast8431> {}; // ParmVar rhs
struct _ast8431: RValueReferenceType<ReferenceType<_ast8432>> {}; // RValueReference Global<S> &&
struct _ast8433: NamedDeclName<_str52>, TypeDecl<_ast8434> {}; // TemplateTypeParm S
struct _ast8435: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8436: NamedDeclName<_str76>, ParmVarDecl<_ast8437> {}; // ParmVar other
struct _ast8437: LValueReferenceType<ReferenceType<_ast8438>> {}; // LValueReference const Local<S> &
struct _ast8438: ConstQualifiedType<_ast8439> {}; // TemplateSpecialization const Local<S>
struct _ast8440: NamedDeclName<_str76>, ParmVarDecl<_ast3074> {}; // ParmVar other
struct _ast8441: NamedDeclName<_str52>, TypeDecl<_ast8442> {}; // TemplateTypeParm S
struct _ast8443: NamedDeclName<_str97>, ParmVarDecl<_ast8444> {}; // ParmVar rhs
struct _ast8444: RValueReferenceType<ReferenceType<_ast8445>> {}; // RValueReference TracedGlobal<S> &&
struct _ast8446: NamedDeclName<_str90>, ParmVarDecl<_ast2115> {}; // ParmVar class_id
struct _ast8447: NamedDeclName<_str81>, ParmVarDecl<_ast2460> {}; // ParmVar parameter
struct _ast8448: NamedDeclName<_str82>, ParmVarDecl<_ast8449> {}; // ParmVar callback
struct _ast8450: NamedDeclName<_str52>, TypeDecl<_ast8451> {}; // TemplateTypeParm S
struct _ast8452: NamedDeclName<_str117>, ParmVarDecl<_ast8453> {}; // ParmVar handle
struct _ast8453: LValueReferenceType<ReferenceType<_ast8454>> {}; // LValueReference const Global<S> &
struct _ast8454: ConstQualifiedType<_ast8455> {}; // TemplateSpecialization const Global<S>
struct _ast8456: NamedDeclName<_str52>, TypeDecl<_ast8457> {}; // TemplateTypeParm S
struct _ast8458: NamedDeclName<_str117>, ParmVarDecl<_ast8459> {}; // ParmVar handle
struct _ast8459: LValueReferenceType<ReferenceType<_ast8460>> {}; // LValueReference const TracedGlobal<S> &
struct _ast8460: ConstQualifiedType<_ast8461> {}; // TemplateSpecialization const TracedGlobal<S>
struct _ast8462: NamedDeclName<_str52>, TypeDecl<_ast8463> {}; // TemplateTypeParm S
struct _ast8464: NamedDeclName<_str117>, ParmVarDecl<_ast8465> {}; // ParmVar handle
struct _ast8465: ConstQualifiedType<_ast8466> {}; // TemplateSpecialization const Local<S>
struct _ast8467: NamedDeclName<_str215>, ParmVarDecl<_ast3918> {}; // ParmVar i
struct _ast8468: NamedDeclName<_str215>, ParmVarDecl<_ast4554> {}; // ParmVar i
struct _ast8469: NamedDeclName<_str215>, ParmVarDecl<_ast3641> {}; // ParmVar i
struct _ast8470: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast8471: NamedDeclName<_str52>, TypeDecl<_ast8472> {}; // TemplateTypeParm S
struct _ast8473: NamedDeclName<_str669>, ParmVarDecl<_ast8474> {}; // ParmVar whatever
struct _ast8474: PointerType<_ast8472> {}; // Pointer S *
struct _ast8475: NamedDeclName<_str683>, ParmVarDecl<_ast3190> {}; // ParmVar implicit_args
struct _ast8476: NamedDeclName<_str638>, ParmVarDecl<_ast3190> {}; // ParmVar values
struct _ast8477: NamedDeclName<_str159>, ParmVarDecl<_ast2095> {}; // ParmVar length
struct _ast8478: NamedDeclName<_str215>, ParmVarDecl<_ast2095> {}; // ParmVar i
struct _ast8479: NamedDeclName<_str174>, ParmVarDecl<_ast8480> {}; // ParmVar resource_name
struct _ast8481: NamedDeclName<_str175>, ParmVarDecl<_ast8482> {}; // ParmVar resource_line_offset
struct _ast8483: NamedDeclName<_str176>, ParmVarDecl<_ast8484> {}; // ParmVar resource_column_offset
struct _ast8485: NamedDeclName<_str177>, ParmVarDecl<_ast8486> {}; // ParmVar resource_is_shared_cross_origin
struct _ast8487: NamedDeclName<_str178>, ParmVarDecl<_ast8488> {}; // ParmVar script_id
struct _ast8489: NamedDeclName<_str179>, ParmVarDecl<_ast8490> {}; // ParmVar source_map_url
struct _ast8491: NamedDeclName<_str180>, ParmVarDecl<_ast8492> {}; // ParmVar resource_is_opaque
struct _ast8493: NamedDeclName<_str165>, ParmVarDecl<_ast8494> {}; // ParmVar is_wasm
struct _ast8495: NamedDeclName<_str166>, ParmVarDecl<_ast8496> {}; // ParmVar is_module
struct _ast8497: NamedDeclName<_str181>, ParmVarDecl<_ast8498> {}; // ParmVar host_defined_options
struct _ast8499: NamedDeclName<_str1101>, ParmVarDecl<_ast8500> {}; // ParmVar string
struct _ast8501: NamedDeclName<_str225>, ParmVarDecl<_ast3354> {}; // ParmVar origin
struct _ast8502: NamedDeclName<_str129>, ParmVarDecl<_ast3475> {}; // ParmVar data
struct _ast8503: NamedDeclName<_str1101>, ParmVarDecl<_ast8504> {}; // ParmVar string
struct _ast8505: NamedDeclName<_str129>, ParmVarDecl<_ast3475> {}; // ParmVar data
struct _ast8506: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8507: NamedDeclName<_str152>, ParmVarDecl<_ast137> {}; // ParmVar value
struct _ast8508: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8509: NamedDeclName<_str531>, ParmVarDecl<_ast2108> {}; // ParmVar name
struct _ast8510: NamedDeclName<_str152>, ParmVarDecl<_ast8511> {}; // ParmVar value
struct _ast8512: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast8513: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast8514: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast8515: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast8516: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8517: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8518: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8519: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8520: NamedDeclName<_str514>, ParmVarDecl<_ast8521> {}; // ParmVar encoding_out
struct _ast8521: PointerType<_ast8522> {}; // Pointer String::Encoding *
struct _ast8523: NamedDeclName<_str21>, TypeDecl<_ast8524> {}; // TemplateTypeParm T
struct _ast8525: NamedDeclName<_str152>, ParmVarDecl<_ast8526> {}; // ParmVar value
struct _ast8526: PointerType<_ast8524> {}; // Pointer T *
struct _ast8527: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8528: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8529: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8530: NamedDeclName<_str129>, ParmVarDecl<_ast4533> {}; // ParmVar data
struct _ast8531: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8532: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8533: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8534: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8535: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8536: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8537: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8538: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8539: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8540: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8541: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8542: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8543: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8544: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8545: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8546: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8547: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8548: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8549: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8550: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8551: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8552: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8553: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8554: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8555: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8556: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8557: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8558: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8559: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8560: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8561: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8562: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8563: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8564: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8565: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8566: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8567: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8568: NamedDeclName<_str152>, ParmVarDecl<_ast4198> {}; // ParmVar value
struct _ast8569: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8570: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8571: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8572: NamedDeclName<_str63>, ParmVarDecl<_ast198> {}; // ParmVar isolate
struct _ast8573: NamedDeclName<_str1267>, ParmVarDecl<_ast3641> {}; // ParmVar slot
struct _ast8574: NamedDeclName<_str129>, ParmVarDecl<_ast2460> {}; // ParmVar data
struct _ast8575: NamedDeclName<_str1267>, ParmVarDecl<_ast3641> {}; // ParmVar slot
struct _ast8576: NamedDeclName<_str21>, TypeDecl<_ast8577> {}; // TemplateTypeParm T
struct _ast8578: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast8579: NamedDeclName<_str1287>, ParmVarDecl<_ast4564> {}; // ParmVar change_in_bytes
struct _ast8580: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8581: NamedDeclName<_str127>, ParmVarDecl<_ast2095> {}; // ParmVar index
struct _ast8582: NamedDeclName<_str21>, TypeDecl<_ast8583> {}; // TemplateTypeParm T
struct _ast8584: NamedDeclName<_str127>, ParmVarDecl<_ast3539> {}; // ParmVar index
struct _ast8585: NamedDeclName<_str21>, TypeDecl<_ast8586> {}; // TemplateTypeParm T
struct _ast8587: NamedDeclName<_str220>, ParmVarDecl<_ast8588> {}; // ParmVar context
struct _ast8589: NamedDeclName<_str367>, ParmVarDecl<_ast8590> {}; // ParmVar object
struct _ast8591: NamedDeclName<_str21>, TypeDecl<_ast8592> {}; // TemplateTypeParm T
struct _ast8593: NamedDeclName<_str367>, ParmVarDecl<_ast8594> {}; // ParmVar object
// Done: 0
