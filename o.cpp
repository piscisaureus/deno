#include <cstddef>

struct None {}; template <class... Ts> struct Pack {}; struct Type { static constexpr const bool IsConst = false; }; template <class T> struct UnqualifiedType : Type { using InnerType = T; }; template <class T> struct ConstQualifiedType : Type { static constexpr const bool IsConst = true; using InnerType = T; }; struct VoidType : Type {}; struct BoolType : Type {}; struct NumericType : Type {}; struct IntegerType : NumericType {}; struct UnsignedIntegerType : IntegerType {}; struct SignedIntegerType : IntegerType {}; struct FloatingPointType : NumericType {}; template <class T, size_t s> struct ABIIndependentSizeType : T { static constexpr const size_t size = s; }; template <class T> struct PointerSizeType : T {}; template <class T> struct PointerType : Type { using PointeeType = T; }; template <class CT, class MT> struct MemberPointerType : Type { using ClassType = CT; using MemberType = MT; }; template <class T> struct ReferenceType : Type { using PointeeType = T; }; template <class RT> struct LValueReferenceType : RT {}; template <class RT> struct RValueReferenceType : RT {}; template <class RT, class PTs, template <class> class MQ> struct FunctionProtoType : Type { using ReturnType = RT; using ParamTypes = PTs; template <typename T> using AddMethodQualifiers = MQ<T>; }; template <typename D> struct TagType : Type { using Decl = D; }; template <typename D, typename IT> struct EnumType : TagType<D> { using IntegerType = IT; }; template <typename D> struct RecordType : TagType<D> {}; template <typename RT> struct UnionRecordType : RT {}; template <typename RT> struct StructOrClassRecordType : RT {}; template <class D> struct TypedefType : Type { using Decl = D; }; template <class S> struct NamedDecl { constexpr static const char* DeclName = S::value; }; template <class S> struct NamedDeclName : NamedDecl<S> {}; template <class S> struct NamedDeclAnon : NamedDecl<S> {}; template <class ND, class T> struct TypeDecl: ND { using Type = T; }; template <class TD> struct TypedefNameDecl : TD {}; template <class TD, class Ps> struct FunctionDecl: TD { using Params = Ps; }; template <class FD> struct MethodDecl : FD {}; template <class MD, class TT> struct InstanceMethodDecl : MD { using ThisType = TT; }; template <class MD> struct VirtualMethodDecl : MD {}; template <class MD> struct ConstructorDecl : MD {}; template <class MD> struct DestructorDecl: MD {}; template <class MD> struct ConversionDecl: MD {}; template <typename T> struct ParmVarDecl { using Type = T; };

struct _str1 { constexpr static const char* value = "v8"; };
struct _str2 { constexpr static const char* value = "Context"; };
struct _str3 { constexpr static const char* value = "Data"; };
struct _str4 { constexpr static const char* value = "Isolate"; };
struct _str5 { constexpr static const char* value = "AccessorSignature"; };
struct _str6 { constexpr static const char* value = "Array"; };
struct _str7 { constexpr static const char* value = "ArrayBuffer"; };
struct _str8 { constexpr static const char* value = "BigInt"; };
struct _str9 { constexpr static const char* value = "BigIntObject"; };
struct _str10 { constexpr static const char* value = "Boolean"; };
struct _str11 { constexpr static const char* value = "BooleanObject"; };
struct _str12 { constexpr static const char* value = "Date"; };
struct _str13 { constexpr static const char* value = "External"; };
struct _str14 { constexpr static const char* value = "Function"; };
struct _str15 { constexpr static const char* value = "FunctionTemplate"; };
struct _str16 { constexpr static const char* value = "HeapProfiler"; };
struct _str17 { constexpr static const char* value = "ImplementationUtilities"; };
struct _str18 { constexpr static const char* value = "Int32"; };
struct _str19 { constexpr static const char* value = "Integer"; };
struct _str20 { constexpr static const char* value = "Maybe"; };
struct _str21 { constexpr static const char* value = "T"; };
struct _str22 { constexpr static const char* value = "MicrotaskQueue"; };
struct _str23 { constexpr static const char* value = "Name"; };
struct _str24 { constexpr static const char* value = "Number"; };
struct _str25 { constexpr static const char* value = "NumberObject"; };
struct _str26 { constexpr static const char* value = "Object"; };
struct _str27 { constexpr static const char* value = "ObjectOperationDescriptor"; };
struct _str28 { constexpr static const char* value = "ObjectTemplate"; };
struct _str29 { constexpr static const char* value = "Platform"; };
struct _str30 { constexpr static const char* value = "Primitive"; };
struct _str31 { constexpr static const char* value = "Promise"; };
struct _str32 { constexpr static const char* value = "PropertyDescriptor"; };
struct _str33 { constexpr static const char* value = "Proxy"; };
struct _str34 { constexpr static const char* value = "RawOperationDescriptor"; };
struct _str35 { constexpr static const char* value = "Script"; };
struct _str36 { constexpr static const char* value = "SharedArrayBuffer"; };
struct _str37 { constexpr static const char* value = "Signature"; };
struct _str38 { constexpr static const char* value = "StartupData"; };
struct _str39 { constexpr static const char* value = "StackFrame"; };
struct _str40 { constexpr static const char* value = "StackTrace"; };
struct _str41 { constexpr static const char* value = "String"; };
struct _str42 { constexpr static const char* value = "StringObject"; };
struct _str43 { constexpr static const char* value = "Symbol"; };
struct _str44 { constexpr static const char* value = "SymbolObject"; };
struct _str45 { constexpr static const char* value = "PrimitiveArray"; };
struct _str46 { constexpr static const char* value = "Private"; };
struct _str47 { constexpr static const char* value = "Uint32"; };
struct _str48 { constexpr static const char* value = "Utils"; };
struct _str49 { constexpr static const char* value = "Value"; };
struct _str50 { constexpr static const char* value = "WasmModuleObject"; };
struct _str51 { constexpr static const char* value = "Local"; };
struct _str52 { constexpr static const char* value = "S"; };
struct _str53 { constexpr static const char* value = "that"; };
struct _str54 { constexpr static const char* value = "IsEmpty"; };
struct _str55 { constexpr static const char* value = "Clear"; };
struct _str56 { constexpr static const char* value = "operator->"; };
struct _str57 { constexpr static const char* value = "operator*"; };
struct _str58 { constexpr static const char* value = "operator=="; };
struct _str59 { constexpr static const char* value = "operator!="; };
struct _str60 { constexpr static const char* value = "Cast"; };
struct _str61 { constexpr static const char* value = "As"; };
struct _str62 { constexpr static const char* value = "New"; };
struct _str63 { constexpr static const char* value = "isolate"; };
struct _str64 { constexpr static const char* value = ""; };
struct _str65 { constexpr static const char* value = "~Local"; };
struct _str66 { constexpr static const char* value = "operator="; };
struct _str67 { constexpr static const char* value = "MaybeLocal"; };
struct _str68 { constexpr static const char* value = "ToLocal"; };
struct _str69 { constexpr static const char* value = "out"; };
struct _str70 { constexpr static const char* value = "ToLocalChecked"; };
struct _str71 { constexpr static const char* value = "FromMaybe"; };
struct _str72 { constexpr static const char* value = "default_value"; };
struct _str73 { constexpr static const char* value = "~MaybeLocal"; };
struct _str74 { constexpr static const char* value = "Eternal"; };
struct _str75 { constexpr static const char* value = "NonCopyablePersistentTraits"; };
struct _str76 { constexpr static const char* value = "PersistentBase"; };
struct _str77 { constexpr static const char* value = "Reset"; };
struct _str78 { constexpr static const char* value = "other"; };
struct _str79 { constexpr static const char* value = "Empty"; };
struct _str80 { constexpr static const char* value = "Get"; };
struct _str81 { constexpr static const char* value = "SetWeak"; };
struct _str82 { constexpr static const char* value = "P"; };
struct _str83 { constexpr static const char* value = "parameter"; };
struct _str84 { constexpr static const char* value = "callback"; };
struct _str85 { constexpr static const char* value = "type"; };
struct _str86 { constexpr static const char* value = "WeakCallbackType"; };
struct _str87 { constexpr static const char* value = "ClearWeak"; };
struct _str88 { constexpr static const char* value = "AnnotateStrongRetainer"; };
struct _str89 { constexpr static const char* value = "label"; };
struct _str90 { constexpr static const char* value = "IsWeak"; };
struct _str91 { constexpr static const char* value = "SetWrapperClassId"; };
struct _str92 { constexpr static const char* value = "class_id"; };
struct _str93 { constexpr static const char* value = "WrapperClassId"; };
struct _str94 { constexpr static const char* value = "Persistent"; };
struct _str95 { constexpr static const char* value = "M"; };
struct _str96 { constexpr static const char* value = "M2"; };
struct _str97 { constexpr static const char* value = "~Persistent"; };
struct _str98 { constexpr static const char* value = "Global"; };
struct _str99 { constexpr static const char* value = "TracedGlobal"; };
struct _str100 { constexpr static const char* value = "~TracedGlobal"; };
struct _str101 { constexpr static const char* value = "rhs"; };
struct _str102 { constexpr static const char* value = "SetFinalizationCallback"; };
struct _str103 { constexpr static const char* value = "PersistentValueMap"; };
struct _str104 { constexpr static const char* value = "K"; };
struct _str105 { constexpr static const char* value = "V"; };
struct _str106 { constexpr static const char* value = "PersistentValueMapBase"; };
struct _str107 { constexpr static const char* value = "GlobalValueMap"; };
struct _str108 { constexpr static const char* value = "PersistentValueVector"; };
struct _str109 { constexpr static const char* value = "WeakCallbackObject"; };
struct _str110 { constexpr static const char* value = "FunctionCallbackInfo"; };
struct _str111 { constexpr static const char* value = "PropertyCallbackInfo"; };
struct _str112 { constexpr static const char* value = "CallHandlerHelper"; };
struct _str113 { constexpr static const char* value = "EscapableHandleScope"; };
struct _str114 { constexpr static const char* value = "ReturnValue"; };
struct _str115 { constexpr static const char* value = "debug"; };
struct _str116 { constexpr static const char* value = "ConsoleCallArguments"; };
struct _str117 { constexpr static const char* value = "Local<T>"; };
struct _str118 { constexpr static const char* value = "Handle"; };
struct _str119 { constexpr static const char* value = "MaybeLocal<T>"; };
struct _str120 { constexpr static const char* value = "Eternal<T>"; };
struct _str121 { constexpr static const char* value = "handle"; };
struct _str122 { constexpr static const char* value = "Set"; };
struct _str123 { constexpr static const char* value = "kInternalFieldsInWeakCallback"; };
struct _str124 { constexpr static const char* value = "kEmbedderFieldsInWeakCallback"; };
struct _str125 { constexpr static const char* value = "WeakCallbackInfo"; };
struct _str126 { constexpr static const char* value = "Callback"; };
struct _str127 { constexpr static const char* value = "WeakCallbackInfo<T>"; };
struct _str128 { constexpr static const char* value = "embedder_fields"; };
struct _str129 { constexpr static const char* value = "GetIsolate"; };
struct _str130 { constexpr static const char* value = "GetParameter"; };
struct _str131 { constexpr static const char* value = "GetInternalField"; };
struct _str132 { constexpr static const char* value = "index"; };
struct _str133 { constexpr static const char* value = "SetSecondPassCallback"; };
struct _str134 { constexpr static const char* value = "data"; };
struct _str135 { constexpr static const char* value = "kParameter"; };
struct _str136 { constexpr static const char* value = "kInternalFields"; };
struct _str137 { constexpr static const char* value = "kFinalizer"; };
struct _str138 { constexpr static const char* value = "PersistentBase<T>"; };
struct _str139 { constexpr static const char* value = "NonCopyablePersistent"; };
struct _str140 { constexpr static const char* value = "kResetInDestructor"; };
struct _str141 { constexpr static const char* value = "Copy"; };
struct _str142 { constexpr static const char* value = "source"; };
struct _str143 { constexpr static const char* value = "dest"; };
struct _str144 { constexpr static const char* value = "Uncompilable"; };
struct _str145 { constexpr static const char* value = "O"; };
struct _str146 { constexpr static const char* value = "CopyablePersistentTraits"; };
struct _str147 { constexpr static const char* value = "CopyablePersistent"; };
struct _str148 { constexpr static const char* value = "Persistent<T, M>"; };
struct _str149 { constexpr static const char* value = "~Persistent<T, M>"; };
struct _str150 { constexpr static const char* value = "Global<T>"; };
struct _str151 { constexpr static const char* value = "~Global<T>"; };
struct _str152 { constexpr static const char* value = "Pass"; };
struct _str153 { constexpr static const char* value = "MoveOnlyTypeForCPP03"; };
struct _str154 { constexpr static const char* value = "UniquePersistent"; };
struct _str155 { constexpr static const char* value = "TracedGlobal<T>"; };
struct _str156 { constexpr static const char* value = "~TracedGlobal<T>"; };
struct _str157 { constexpr static const char* value = "HandleScope"; };
struct _str158 { constexpr static const char* value = "~HandleScope"; };
struct _str159 { constexpr static const char* value = "NumberOfHandles"; };
struct _str160 { constexpr static const char* value = "Initialize"; };
struct _str161 { constexpr static const char* value = "CreateHandle"; };
struct _str162 { constexpr static const char* value = "value"; };
struct _str163 { constexpr static const char* value = "~EscapableHandleScope"; };
struct _str164 { constexpr static const char* value = "Escape"; };
struct _str165 { constexpr static const char* value = "EscapeMaybe"; };
struct _str166 { constexpr static const char* value = "SealHandleScope"; };
struct _str167 { constexpr static const char* value = "~SealHandleScope"; };
struct _str168 { constexpr static const char* value = "ScriptOrModule"; };
struct _str169 { constexpr static const char* value = "GetResourceName"; };
struct _str170 { constexpr static const char* value = "GetHostDefinedOptions"; };
struct _str171 { constexpr static const char* value = "length"; };
struct _str172 { constexpr static const char* value = "Length"; };
struct _str173 { constexpr static const char* value = "item"; };
struct _str174 { constexpr static const char* value = "ScriptOriginOptions"; };
struct _str175 { constexpr static const char* value = "is_shared_cross_origin"; };
struct _str176 { constexpr static const char* value = "is_opaque"; };
struct _str177 { constexpr static const char* value = "is_wasm"; };
struct _str178 { constexpr static const char* value = "is_module"; };
struct _str179 { constexpr static const char* value = "flags"; };
struct _str180 { constexpr static const char* value = "IsSharedCrossOrigin"; };
struct _str181 { constexpr static const char* value = "IsOpaque"; };
struct _str182 { constexpr static const char* value = "IsWasm"; };
struct _str183 { constexpr static const char* value = "IsModule"; };
struct _str184 { constexpr static const char* value = "Flags"; };
struct _str185 { constexpr static const char* value = "~ScriptOriginOptions"; };
struct _str186 { constexpr static const char* value = "ScriptOrigin"; };
struct _str187 { constexpr static const char* value = "resource_name"; };
struct _str188 { constexpr static const char* value = "resource_line_offset"; };
struct _str189 { constexpr static const char* value = "resource_column_offset"; };
struct _str190 { constexpr static const char* value = "resource_is_shared_cross_origin"; };
struct _str191 { constexpr static const char* value = "script_id"; };
struct _str192 { constexpr static const char* value = "source_map_url"; };
struct _str193 { constexpr static const char* value = "resource_is_opaque"; };
struct _str194 { constexpr static const char* value = "host_defined_options"; };
struct _str195 { constexpr static const char* value = "ResourceName"; };
struct _str196 { constexpr static const char* value = "ResourceLineOffset"; };
struct _str197 { constexpr static const char* value = "ResourceColumnOffset"; };
struct _str198 { constexpr static const char* value = "ScriptID"; };
struct _str199 { constexpr static const char* value = "SourceMapUrl"; };
struct _str200 { constexpr static const char* value = "HostDefinedOptions"; };
struct _str201 { constexpr static const char* value = "Options"; };
struct _str202 { constexpr static const char* value = "UnboundScript"; };
struct _str203 { constexpr static const char* value = "BindToCurrentContext"; };
struct _str204 { constexpr static const char* value = "GetId"; };
struct _str205 { constexpr static const char* value = "GetScriptName"; };
struct _str206 { constexpr static const char* value = "GetSourceURL"; };
struct _str207 { constexpr static const char* value = "GetSourceMappingURL"; };
struct _str208 { constexpr static const char* value = "GetLineNumber"; };
struct _str209 { constexpr static const char* value = "code_pos"; };
struct _str210 { constexpr static const char* value = "kNoScriptId"; };
struct _str211 { constexpr static const char* value = "UnboundModuleScript"; };
struct _str212 { constexpr static const char* value = "Location"; };
struct _str213 { constexpr static const char* value = "GetColumnNumber"; };
struct _str214 { constexpr static const char* value = "line_number"; };
struct _str215 { constexpr static const char* value = "column_number"; };
struct _str216 { constexpr static const char* value = "Module"; };
struct _str217 { constexpr static const char* value = "Status"; };
struct _str218 { constexpr static const char* value = "kUninstantiated"; };
struct _str219 { constexpr static const char* value = "kInstantiating"; };
struct _str220 { constexpr static const char* value = "kInstantiated"; };
struct _str221 { constexpr static const char* value = "kEvaluating"; };
struct _str222 { constexpr static const char* value = "kEvaluated"; };
struct _str223 { constexpr static const char* value = "kErrored"; };
struct _str224 { constexpr static const char* value = "GetStatus"; };
struct _str225 { constexpr static const char* value = "GetException"; };
struct _str226 { constexpr static const char* value = "GetModuleRequestsLength"; };
struct _str227 { constexpr static const char* value = "GetModuleRequest"; };
struct _str228 { constexpr static const char* value = "i"; };
struct _str229 { constexpr static const char* value = "GetModuleRequestLocation"; };
struct _str230 { constexpr static const char* value = "GetIdentityHash"; };
struct _str231 { constexpr static const char* value = "ResolveCallback"; };
struct _str232 { constexpr static const char* value = "InstantiateModule"; };
struct _str233 { constexpr static const char* value = "context"; };
struct _str234 { constexpr static const char* value = "Evaluate"; };
struct _str235 { constexpr static const char* value = "GetModuleNamespace"; };
struct _str236 { constexpr static const char* value = "GetUnboundModuleScript"; };
struct _str237 { constexpr static const char* value = "Compile"; };
struct _str238 { constexpr static const char* value = "origin"; };
struct _str239 { constexpr static const char* value = "Run"; };
struct _str240 { constexpr static const char* value = "GetUnboundScript"; };
struct _str241 { constexpr static const char* value = "ScriptCompiler"; };
struct _str242 { constexpr static const char* value = "CachedData"; };
struct _str243 { constexpr static const char* value = "BufferPolicy"; };
struct _str244 { constexpr static const char* value = "BufferNotOwned"; };
struct _str245 { constexpr static const char* value = "BufferOwned"; };
struct _str246 { constexpr static const char* value = "buffer_policy"; };
struct _str247 { constexpr static const char* value = "~CachedData"; };
struct _str248 { constexpr static const char* value = "rejected"; };
struct _str249 { constexpr static const char* value = "Source"; };
struct _str250 { constexpr static const char* value = "source_string"; };
struct _str251 { constexpr static const char* value = "cached_data"; };
struct _str252 { constexpr static const char* value = "~Source"; };
struct _str253 { constexpr static const char* value = "GetCachedData"; };
struct _str254 { constexpr static const char* value = "GetResourceOptions"; };
struct _str255 { constexpr static const char* value = "ExternalSourceStream"; };
struct _str256 { constexpr static const char* value = "~ExternalSourceStream"; };
struct _str257 { constexpr static const char* value = "GetMoreData"; };
struct _str258 { constexpr static const char* value = "src"; };
struct _str259 { constexpr static const char* value = "SetBookmark"; };
struct _str260 { constexpr static const char* value = "ResetToBookmark"; };
struct _str261 { constexpr static const char* value = "StreamedSource"; };
struct _str262 { constexpr static const char* value = "Encoding"; };
struct _str263 { constexpr static const char* value = "ONE_BYTE"; };
struct _str264 { constexpr static const char* value = "TWO_BYTE"; };
struct _str265 { constexpr static const char* value = "UTF8"; };
struct _str266 { constexpr static const char* value = "source_stream"; };
struct _str267 { constexpr static const char* value = "encoding"; };
struct _str268 { constexpr static const char* value = "~StreamedSource"; };
struct _str269 { constexpr static const char* value = "impl"; };
struct _str270 { constexpr static const char* value = "ScriptStreamingTask"; };
struct _str271 { constexpr static const char* value = "CompileOptions"; };
struct _str272 { constexpr static const char* value = "kNoCompileOptions"; };
struct _str273 { constexpr static const char* value = "kConsumeCodeCache"; };
struct _str274 { constexpr static const char* value = "kEagerCompile"; };
struct _str275 { constexpr static const char* value = "NoCacheReason"; };
struct _str276 { constexpr static const char* value = "kNoCacheNoReason"; };
struct _str277 { constexpr static const char* value = "kNoCacheBecauseCachingDisabled"; };
struct _str278 { constexpr static const char* value = "kNoCacheBecauseNoResource"; };
struct _str279 { constexpr static const char* value = "kNoCacheBecauseInlineScript"; };
struct _str280 { constexpr static const char* value = "kNoCacheBecauseModule"; };
struct _str281 { constexpr static const char* value = "kNoCacheBecauseStreamingSource"; };
struct _str282 { constexpr static const char* value = "kNoCacheBecauseInspector"; };
struct _str283 { constexpr static const char* value = "kNoCacheBecauseScriptTooSmall"; };
struct _str284 { constexpr static const char* value = "kNoCacheBecauseCacheTooCold"; };
struct _str285 { constexpr static const char* value = "kNoCacheBecauseV8Extension"; };
struct _str286 { constexpr static const char* value = "kNoCacheBecauseExtensionModule"; };
struct _str287 { constexpr static const char* value = "kNoCacheBecausePacScript"; };
struct _str288 { constexpr static const char* value = "kNoCacheBecauseInDocumentWrite"; };
struct _str289 { constexpr static const char* value = "kNoCacheBecauseResourceWithNoCacheHandler"; };
struct _str290 { constexpr static const char* value = "kNoCacheBecauseDeferredProduceCodeCache"; };
struct _str291 { constexpr static const char* value = "CompileUnboundScript"; };
struct _str292 { constexpr static const char* value = "options"; };
struct _str293 { constexpr static const char* value = "no_cache_reason"; };
struct _str294 { constexpr static const char* value = "StartStreamingScript"; };
struct _str295 { constexpr static const char* value = "full_source_string"; };
struct _str296 { constexpr static const char* value = "CachedDataVersionTag"; };
struct _str297 { constexpr static const char* value = "CompileModule"; };
struct _str298 { constexpr static const char* value = "CompileFunctionInContext"; };
struct _str299 { constexpr static const char* value = "arguments_count"; };
struct _str300 { constexpr static const char* value = "arguments"; };
struct _str301 { constexpr static const char* value = "context_extension_count"; };
struct _str302 { constexpr static const char* value = "context_extensions"; };
struct _str303 { constexpr static const char* value = "CreateCodeCache"; };
struct _str304 { constexpr static const char* value = "unbound_script"; };
struct _str305 { constexpr static const char* value = "unbound_module_script"; };
struct _str306 { constexpr static const char* value = "CreateCodeCacheForFunction"; };
struct _str307 { constexpr static const char* value = "function"; };
struct _str308 { constexpr static const char* value = "Message"; };
struct _str309 { constexpr static const char* value = "GetSourceLine"; };
struct _str310 { constexpr static const char* value = "GetScriptOrigin"; };
struct _str311 { constexpr static const char* value = "GetScriptResourceName"; };
struct _str312 { constexpr static const char* value = "GetStackTrace"; };
struct _str313 { constexpr static const char* value = "GetStartPosition"; };
struct _str314 { constexpr static const char* value = "GetEndPosition"; };
struct _str315 { constexpr static const char* value = "ErrorLevel"; };
struct _str316 { constexpr static const char* value = "GetStartColumn"; };
struct _str317 { constexpr static const char* value = "GetEndColumn"; };
struct _str318 { constexpr static const char* value = "PrintCurrentStackTrace"; };
struct _str319 { constexpr static const char* value = "FILE"; };
struct _str320 { constexpr static const char* value = "kNoLineNumberInfo"; };
struct _str321 { constexpr static const char* value = "kNoColumnInfo"; };
struct _str322 { constexpr static const char* value = "kNoScriptIdInfo"; };
struct _str323 { constexpr static const char* value = "StackTraceOptions"; };
struct _str324 { constexpr static const char* value = "kLineNumber"; };
struct _str325 { constexpr static const char* value = "kColumnOffset"; };
struct _str326 { constexpr static const char* value = "kScriptName"; };
struct _str327 { constexpr static const char* value = "kFunctionName"; };
struct _str328 { constexpr static const char* value = "kIsEval"; };
struct _str329 { constexpr static const char* value = "kIsConstructor"; };
struct _str330 { constexpr static const char* value = "kScriptNameOrSourceURL"; };
struct _str331 { constexpr static const char* value = "kScriptId"; };
struct _str332 { constexpr static const char* value = "kExposeFramesAcrossSecurityOrigins"; };
struct _str333 { constexpr static const char* value = "kOverview"; };
struct _str334 { constexpr static const char* value = "kDetailed"; };
struct _str335 { constexpr static const char* value = "GetFrame"; };
struct _str336 { constexpr static const char* value = "GetFrameCount"; };
struct _str337 { constexpr static const char* value = "CurrentStackTrace"; };
struct _str338 { constexpr static const char* value = "frame_limit"; };
struct _str339 { constexpr static const char* value = "GetColumn"; };
struct _str340 { constexpr static const char* value = "GetScriptId"; };
struct _str341 { constexpr static const char* value = "GetScriptNameOrSourceURL"; };
struct _str342 { constexpr static const char* value = "GetFunctionName"; };
struct _str343 { constexpr static const char* value = "IsEval"; };
struct _str344 { constexpr static const char* value = "IsConstructor"; };
struct _str345 { constexpr static const char* value = "IsUserJavaScript"; };
struct _str346 { constexpr static const char* value = "StateTag"; };
struct _str347 { constexpr static const char* value = "JS"; };
struct _str348 { constexpr static const char* value = "GC"; };
struct _str349 { constexpr static const char* value = "PARSER"; };
struct _str350 { constexpr static const char* value = "BYTECODE_COMPILER"; };
struct _str351 { constexpr static const char* value = "COMPILER"; };
struct _str352 { constexpr static const char* value = "OTHER"; };
struct _str353 { constexpr static const char* value = "EXTERNAL"; };
struct _str354 { constexpr static const char* value = "IDLE"; };
struct _str355 { constexpr static const char* value = "RegisterState"; };
struct _str356 { constexpr static const char* value = "pc"; };
struct _str357 { constexpr static const char* value = "sp"; };
struct _str358 { constexpr static const char* value = "fp"; };
struct _str359 { constexpr static const char* value = "lr"; };
struct _str360 { constexpr static const char* value = "SampleInfo"; };
struct _str361 { constexpr static const char* value = "frames_count"; };
struct _str362 { constexpr static const char* value = "vm_state"; };
struct _str363 { constexpr static const char* value = "external_callback_entry"; };
struct _str364 { constexpr static const char* value = "MemoryRange"; };
struct _str365 { constexpr static const char* value = "start"; };
struct _str366 { constexpr static const char* value = "length_in_bytes"; };
struct _str367 { constexpr static const char* value = "JSEntryStub"; };
struct _str368 { constexpr static const char* value = "code"; };
struct _str369 { constexpr static const char* value = "UnwindState"; };
struct _str370 { constexpr static const char* value = "code_range"; };
struct _str371 { constexpr static const char* value = "embedded_code_range"; };
struct _str372 { constexpr static const char* value = "js_entry_stub"; };
struct _str373 { constexpr static const char* value = "JSON"; };
struct _str374 { constexpr static const char* value = "Parse"; };
struct _str375 { constexpr static const char* value = "json_string"; };
struct _str376 { constexpr static const char* value = "Stringify"; };
struct _str377 { constexpr static const char* value = "json_object"; };
struct _str378 { constexpr static const char* value = "gap"; };
struct _str379 { constexpr static const char* value = "ValueSerializer"; };
struct _str380 { constexpr static const char* value = "Delegate"; };
struct _str381 { constexpr static const char* value = "~Delegate"; };
struct _str382 { constexpr static const char* value = "ThrowDataCloneError"; };
struct _str383 { constexpr static const char* value = "message"; };
struct _str384 { constexpr static const char* value = "WriteHostObject"; };
struct _str385 { constexpr static const char* value = "object"; };
struct _str386 { constexpr static const char* value = "GetSharedArrayBufferId"; };
struct _str387 { constexpr static const char* value = "shared_array_buffer"; };
struct _str388 { constexpr static const char* value = "GetWasmModuleTransferId"; };
struct _str389 { constexpr static const char* value = "module"; };
struct _str390 { constexpr static const char* value = "ReallocateBufferMemory"; };
struct _str391 { constexpr static const char* value = "old_buffer"; };
struct _str392 { constexpr static const char* value = "size"; };
struct _str393 { constexpr static const char* value = "actual_size"; };
struct _str394 { constexpr static const char* value = "FreeBufferMemory"; };
struct _str395 { constexpr static const char* value = "buffer"; };
struct _str396 { constexpr static const char* value = "delegate"; };
struct _str397 { constexpr static const char* value = "~ValueSerializer"; };
struct _str398 { constexpr static const char* value = "WriteHeader"; };
struct _str399 { constexpr static const char* value = "WriteValue"; };
struct _str400 { constexpr static const char* value = "Release"; };
struct _str401 { constexpr static const char* value = "TransferArrayBuffer"; };
struct _str402 { constexpr static const char* value = "transfer_id"; };
struct _str403 { constexpr static const char* value = "array_buffer"; };
struct _str404 { constexpr static const char* value = "SetTreatArrayBufferViewsAsHostObjects"; };
struct _str405 { constexpr static const char* value = "mode"; };
struct _str406 { constexpr static const char* value = "WriteUint32"; };
struct _str407 { constexpr static const char* value = "WriteUint64"; };
struct _str408 { constexpr static const char* value = "WriteDouble"; };
struct _str409 { constexpr static const char* value = "WriteRawBytes"; };
struct _str410 { constexpr static const char* value = "ValueDeserializer"; };
struct _str411 { constexpr static const char* value = "ReadHostObject"; };
struct _str412 { constexpr static const char* value = "GetWasmModuleFromId"; };
struct _str413 { constexpr static const char* value = "GetSharedArrayBufferFromId"; };
struct _str414 { constexpr static const char* value = "clone_id"; };
struct _str415 { constexpr static const char* value = "~ValueDeserializer"; };
struct _str416 { constexpr static const char* value = "ReadHeader"; };
struct _str417 { constexpr static const char* value = "ReadValue"; };
struct _str418 { constexpr static const char* value = "TransferSharedArrayBuffer"; };
struct _str419 { constexpr static const char* value = "id"; };
struct _str420 { constexpr static const char* value = "SetSupportsLegacyWireFormat"; };
struct _str421 { constexpr static const char* value = "supports_legacy_wire_format"; };
struct _str422 { constexpr static const char* value = "SetExpectInlineWasm"; };
struct _str423 { constexpr static const char* value = "allow_inline_wasm"; };
struct _str424 { constexpr static const char* value = "GetWireFormatVersion"; };
struct _str425 { constexpr static const char* value = "ReadUint32"; };
struct _str426 { constexpr static const char* value = "ReadUint64"; };
struct _str427 { constexpr static const char* value = "ReadDouble"; };
struct _str428 { constexpr static const char* value = "ReadRawBytes"; };
struct _str429 { constexpr static const char* value = "IsUndefined"; };
struct _str430 { constexpr static const char* value = "IsNull"; };
struct _str431 { constexpr static const char* value = "IsNullOrUndefined"; };
struct _str432 { constexpr static const char* value = "IsTrue"; };
struct _str433 { constexpr static const char* value = "IsFalse"; };
struct _str434 { constexpr static const char* value = "IsName"; };
struct _str435 { constexpr static const char* value = "IsString"; };
struct _str436 { constexpr static const char* value = "IsSymbol"; };
struct _str437 { constexpr static const char* value = "IsFunction"; };
struct _str438 { constexpr static const char* value = "IsArray"; };
struct _str439 { constexpr static const char* value = "IsObject"; };
struct _str440 { constexpr static const char* value = "IsBigInt"; };
struct _str441 { constexpr static const char* value = "IsBoolean"; };
struct _str442 { constexpr static const char* value = "IsNumber"; };
struct _str443 { constexpr static const char* value = "IsExternal"; };
struct _str444 { constexpr static const char* value = "IsInt32"; };
struct _str445 { constexpr static const char* value = "IsUint32"; };
struct _str446 { constexpr static const char* value = "IsDate"; };
struct _str447 { constexpr static const char* value = "IsArgumentsObject"; };
struct _str448 { constexpr static const char* value = "IsBigIntObject"; };
struct _str449 { constexpr static const char* value = "IsBooleanObject"; };
struct _str450 { constexpr static const char* value = "IsNumberObject"; };
struct _str451 { constexpr static const char* value = "IsStringObject"; };
struct _str452 { constexpr static const char* value = "IsSymbolObject"; };
struct _str453 { constexpr static const char* value = "IsNativeError"; };
struct _str454 { constexpr static const char* value = "IsRegExp"; };
struct _str455 { constexpr static const char* value = "IsAsyncFunction"; };
struct _str456 { constexpr static const char* value = "IsGeneratorFunction"; };
struct _str457 { constexpr static const char* value = "IsGeneratorObject"; };
struct _str458 { constexpr static const char* value = "IsPromise"; };
struct _str459 { constexpr static const char* value = "IsMap"; };
struct _str460 { constexpr static const char* value = "IsSet"; };
struct _str461 { constexpr static const char* value = "IsMapIterator"; };
struct _str462 { constexpr static const char* value = "IsSetIterator"; };
struct _str463 { constexpr static const char* value = "IsWeakMap"; };
struct _str464 { constexpr static const char* value = "IsWeakSet"; };
struct _str465 { constexpr static const char* value = "IsArrayBuffer"; };
struct _str466 { constexpr static const char* value = "IsArrayBufferView"; };
struct _str467 { constexpr static const char* value = "IsTypedArray"; };
struct _str468 { constexpr static const char* value = "IsUint8Array"; };
struct _str469 { constexpr static const char* value = "IsUint8ClampedArray"; };
struct _str470 { constexpr static const char* value = "IsInt8Array"; };
struct _str471 { constexpr static const char* value = "IsUint16Array"; };
struct _str472 { constexpr static const char* value = "IsInt16Array"; };
struct _str473 { constexpr static const char* value = "IsUint32Array"; };
struct _str474 { constexpr static const char* value = "IsInt32Array"; };
struct _str475 { constexpr static const char* value = "IsFloat32Array"; };
struct _str476 { constexpr static const char* value = "IsFloat64Array"; };
struct _str477 { constexpr static const char* value = "IsBigInt64Array"; };
struct _str478 { constexpr static const char* value = "IsBigUint64Array"; };
struct _str479 { constexpr static const char* value = "IsDataView"; };
struct _str480 { constexpr static const char* value = "IsSharedArrayBuffer"; };
struct _str481 { constexpr static const char* value = "IsProxy"; };
struct _str482 { constexpr static const char* value = "IsWebAssemblyCompiledModule"; };
struct _str483 { constexpr static const char* value = "IsModuleNamespaceObject"; };
struct _str484 { constexpr static const char* value = "ToBigInt"; };
struct _str485 { constexpr static const char* value = "ToNumber"; };
struct _str486 { constexpr static const char* value = "ToString"; };
struct _str487 { constexpr static const char* value = "ToDetailString"; };
struct _str488 { constexpr static const char* value = "ToObject"; };
struct _str489 { constexpr static const char* value = "ToInteger"; };
struct _str490 { constexpr static const char* value = "ToUint32"; };
struct _str491 { constexpr static const char* value = "ToInt32"; };
struct _str492 { constexpr static const char* value = "ToBoolean"; };
struct _str493 { constexpr static const char* value = "ToArrayIndex"; };
struct _str494 { constexpr static const char* value = "BooleanValue"; };
struct _str495 { constexpr static const char* value = "NumberValue"; };
struct _str496 { constexpr static const char* value = "IntegerValue"; };
struct _str497 { constexpr static const char* value = "Uint32Value"; };
struct _str498 { constexpr static const char* value = "Int32Value"; };
struct _str499 { constexpr static const char* value = "Equals"; };
struct _str500 { constexpr static const char* value = "StrictEquals"; };
struct _str501 { constexpr static const char* value = "SameValue"; };
struct _str502 { constexpr static const char* value = "TypeOf"; };
struct _str503 { constexpr static const char* value = "InstanceOf"; };
struct _str504 { constexpr static const char* value = "obj"; };
struct _str505 { constexpr static const char* value = "NewStringType"; };
struct _str506 { constexpr static const char* value = "kNormal"; };
struct _str507 { constexpr static const char* value = "kInternalized"; };
struct _str508 { constexpr static const char* value = "kMaxLength"; };
struct _str509 { constexpr static const char* value = "UNKNOWN_ENCODING"; };
struct _str510 { constexpr static const char* value = "TWO_BYTE_ENCODING"; };
struct _str511 { constexpr static const char* value = "ONE_BYTE_ENCODING"; };
struct _str512 { constexpr static const char* value = "Utf8Length"; };
struct _str513 { constexpr static const char* value = "IsOneByte"; };
struct _str514 { constexpr static const char* value = "ContainsOnlyOneByte"; };
struct _str515 { constexpr static const char* value = "WriteOptions"; };
struct _str516 { constexpr static const char* value = "NO_OPTIONS"; };
struct _str517 { constexpr static const char* value = "HINT_MANY_WRITES_EXPECTED"; };
struct _str518 { constexpr static const char* value = "NO_NULL_TERMINATION"; };
struct _str519 { constexpr static const char* value = "PRESERVE_ONE_BYTE_NULL"; };
struct _str520 { constexpr static const char* value = "REPLACE_INVALID_UTF8"; };
struct _str521 { constexpr static const char* value = "Write"; };
struct _str522 { constexpr static const char* value = "WriteOneByte"; };
struct _str523 { constexpr static const char* value = "WriteUtf8"; };
struct _str524 { constexpr static const char* value = "nchars_ref"; };
struct _str525 { constexpr static const char* value = "IsExternalOneByte"; };
struct _str526 { constexpr static const char* value = "ExternalStringResourceBase"; };
struct _str527 { constexpr static const char* value = "~ExternalStringResourceBase"; };
struct _str528 { constexpr static const char* value = "IsCacheable"; };
struct _str529 { constexpr static const char* value = "Dispose"; };
struct _str530 { constexpr static const char* value = "Lock"; };
struct _str531 { constexpr static const char* value = "Unlock"; };
struct _str532 { constexpr static const char* value = "ExternalStringResource"; };
struct _str533 { constexpr static const char* value = "~ExternalStringResource"; };
struct _str534 { constexpr static const char* value = "ExternalOneByteStringResource"; };
struct _str535 { constexpr static const char* value = "~ExternalOneByteStringResource"; };
struct _str536 { constexpr static const char* value = "GetExternalStringResourceBase"; };
struct _str537 { constexpr static const char* value = "encoding_out"; };
struct _str538 { constexpr static const char* value = "GetExternalStringResource"; };
struct _str539 { constexpr static const char* value = "GetExternalOneByteStringResource"; };
struct _str540 { constexpr static const char* value = "NewFromUtf8"; };
struct _str541 { constexpr static const char* value = "NewFromOneByte"; };
struct _str542 { constexpr static const char* value = "NewFromTwoByte"; };
struct _str543 { constexpr static const char* value = "Concat"; };
struct _str544 { constexpr static const char* value = "left"; };
struct _str545 { constexpr static const char* value = "right"; };
struct _str546 { constexpr static const char* value = "NewExternalTwoByte"; };
struct _str547 { constexpr static const char* value = "resource"; };
struct _str548 { constexpr static const char* value = "MakeExternal"; };
struct _str549 { constexpr static const char* value = "NewExternalOneByte"; };
struct _str550 { constexpr static const char* value = "CanMakeExternal"; };
struct _str551 { constexpr static const char* value = "StringEquals"; };
struct _str552 { constexpr static const char* value = "str"; };
struct _str553 { constexpr static const char* value = "Utf8Value"; };
struct _str554 { constexpr static const char* value = "~Utf8Value"; };
struct _str555 { constexpr static const char* value = "~Value"; };
struct _str556 { constexpr static const char* value = "name"; };
struct _str557 { constexpr static const char* value = "For"; };
struct _str558 { constexpr static const char* value = "ForApi"; };
struct _str559 { constexpr static const char* value = "GetAsyncIterator"; };
struct _str560 { constexpr static const char* value = "GetHasInstance"; };
struct _str561 { constexpr static const char* value = "GetIsConcatSpreadable"; };
struct _str562 { constexpr static const char* value = "GetIterator"; };
struct _str563 { constexpr static const char* value = "GetMatch"; };
struct _str564 { constexpr static const char* value = "GetReplace"; };
struct _str565 { constexpr static const char* value = "GetSearch"; };
struct _str566 { constexpr static const char* value = "GetSplit"; };
struct _str567 { constexpr static const char* value = "GetToPrimitive"; };
struct _str568 { constexpr static const char* value = "GetToStringTag"; };
struct _str569 { constexpr static const char* value = "GetUnscopables"; };
struct _str570 { constexpr static const char* value = "NewFromUnsigned"; };
struct _str571 { constexpr static const char* value = "NewFromWords"; };
struct _str572 { constexpr static const char* value = "sign_bit"; };
struct _str573 { constexpr static const char* value = "word_count"; };
struct _str574 { constexpr static const char* value = "words"; };
struct _str575 { constexpr static const char* value = "Uint64Value"; };
struct _str576 { constexpr static const char* value = "lossless"; };
struct _str577 { constexpr static const char* value = "Int64Value"; };
struct _str578 { constexpr static const char* value = "WordCount"; };
struct _str579 { constexpr static const char* value = "ToWordsArray"; };
struct _str580 { constexpr static const char* value = "PropertyAttribute"; };
struct _str581 { constexpr static const char* value = "None"; };
struct _str582 { constexpr static const char* value = "ReadOnly"; };
struct _str583 { constexpr static const char* value = "DontEnum"; };
struct _str584 { constexpr static const char* value = "DontDelete"; };
struct _str585 { constexpr static const char* value = "AccessorGetterCallback"; };
struct _str586 { constexpr static const char* value = "AccessorNameGetterCallback"; };
struct _str587 { constexpr static const char* value = "AccessorSetterCallback"; };
struct _str588 { constexpr static const char* value = "AccessorNameSetterCallback"; };
struct _str589 { constexpr static const char* value = "AccessControl"; };
struct _str590 { constexpr static const char* value = "DEFAULT"; };
struct _str591 { constexpr static const char* value = "ALL_CAN_READ"; };
struct _str592 { constexpr static const char* value = "ALL_CAN_WRITE"; };
struct _str593 { constexpr static const char* value = "PROHIBITS_OVERWRITING"; };
struct _str594 { constexpr static const char* value = "PropertyFilter"; };
struct _str595 { constexpr static const char* value = "ALL_PROPERTIES"; };
struct _str596 { constexpr static const char* value = "ONLY_WRITABLE"; };
struct _str597 { constexpr static const char* value = "ONLY_ENUMERABLE"; };
struct _str598 { constexpr static const char* value = "ONLY_CONFIGURABLE"; };
struct _str599 { constexpr static const char* value = "SKIP_STRINGS"; };
struct _str600 { constexpr static const char* value = "SKIP_SYMBOLS"; };
struct _str601 { constexpr static const char* value = "SideEffectType"; };
struct _str602 { constexpr static const char* value = "kHasSideEffect"; };
struct _str603 { constexpr static const char* value = "kHasNoSideEffect"; };
struct _str604 { constexpr static const char* value = "kHasSideEffectToReceiver"; };
struct _str605 { constexpr static const char* value = "KeyCollectionMode"; };
struct _str606 { constexpr static const char* value = "kOwnOnly"; };
struct _str607 { constexpr static const char* value = "kIncludePrototypes"; };
struct _str608 { constexpr static const char* value = "IndexFilter"; };
struct _str609 { constexpr static const char* value = "kIncludeIndices"; };
struct _str610 { constexpr static const char* value = "kSkipIndices"; };
struct _str611 { constexpr static const char* value = "KeyConversionMode"; };
struct _str612 { constexpr static const char* value = "kConvertToString"; };
struct _str613 { constexpr static const char* value = "kKeepNumbers"; };
struct _str614 { constexpr static const char* value = "IntegrityLevel"; };
struct _str615 { constexpr static const char* value = "kFrozen"; };
struct _str616 { constexpr static const char* value = "kSealed"; };
struct _str617 { constexpr static const char* value = "key"; };
struct _str618 { constexpr static const char* value = "CreateDataProperty"; };
struct _str619 { constexpr static const char* value = "DefineOwnProperty"; };
struct _str620 { constexpr static const char* value = "attributes"; };
struct _str621 { constexpr static const char* value = "DefineProperty"; };
struct _str622 { constexpr static const char* value = "descriptor"; };
struct _str623 { constexpr static const char* value = "GetPropertyAttributes"; };
struct _str624 { constexpr static const char* value = "GetOwnPropertyDescriptor"; };
struct _str625 { constexpr static const char* value = "Has"; };
struct _str626 { constexpr static const char* value = "Delete"; };
struct _str627 { constexpr static const char* value = "SetAccessor"; };
struct _str628 { constexpr static const char* value = "getter"; };
struct _str629 { constexpr static const char* value = "setter"; };
struct _str630 { constexpr static const char* value = "settings"; };
struct _str631 { constexpr static const char* value = "attribute"; };
struct _str632 { constexpr static const char* value = "getter_side_effect_type"; };
struct _str633 { constexpr static const char* value = "setter_side_effect_type"; };
struct _str634 { constexpr static const char* value = "SetAccessorProperty"; };
struct _str635 { constexpr static const char* value = "SetNativeDataProperty"; };
struct _str636 { constexpr static const char* value = "SetLazyDataProperty"; };
struct _str637 { constexpr static const char* value = "HasPrivate"; };
struct _str638 { constexpr static const char* value = "SetPrivate"; };
struct _str639 { constexpr static const char* value = "DeletePrivate"; };
struct _str640 { constexpr static const char* value = "GetPrivate"; };
struct _str641 { constexpr static const char* value = "GetPropertyNames"; };
struct _str642 { constexpr static const char* value = "property_filter"; };
struct _str643 { constexpr static const char* value = "index_filter"; };
struct _str644 { constexpr static const char* value = "key_conversion"; };
struct _str645 { constexpr static const char* value = "GetOwnPropertyNames"; };
struct _str646 { constexpr static const char* value = "filter"; };
struct _str647 { constexpr static const char* value = "GetPrototype"; };
struct _str648 { constexpr static const char* value = "SetPrototype"; };
struct _str649 { constexpr static const char* value = "prototype"; };
struct _str650 { constexpr static const char* value = "FindInstanceInPrototypeChain"; };
struct _str651 { constexpr static const char* value = "tmpl"; };
struct _str652 { constexpr static const char* value = "ObjectProtoToString"; };
struct _str653 { constexpr static const char* value = "GetConstructorName"; };
struct _str654 { constexpr static const char* value = "SetIntegrityLevel"; };
struct _str655 { constexpr static const char* value = "level"; };
struct _str656 { constexpr static const char* value = "InternalFieldCount"; };
struct _str657 { constexpr static const char* value = "SetInternalField"; };
struct _str658 { constexpr static const char* value = "GetAlignedPointerFromInternalField"; };
struct _str659 { constexpr static const char* value = "SetAlignedPointerInInternalField"; };
struct _str660 { constexpr static const char* value = "SetAlignedPointerInInternalFields"; };
struct _str661 { constexpr static const char* value = "argc"; };
struct _str662 { constexpr static const char* value = "indices"; };
struct _str663 { constexpr static const char* value = "values"; };
struct _str664 { constexpr static const char* value = "HasOwnProperty"; };
struct _str665 { constexpr static const char* value = "HasRealNamedProperty"; };
struct _str666 { constexpr static const char* value = "HasRealIndexedProperty"; };
struct _str667 { constexpr static const char* value = "HasRealNamedCallbackProperty"; };
struct _str668 { constexpr static const char* value = "GetRealNamedPropertyInPrototypeChain"; };
struct _str669 { constexpr static const char* value = "GetRealNamedPropertyAttributesInPrototypeChain"; };
struct _str670 { constexpr static const char* value = "GetRealNamedProperty"; };
struct _str671 { constexpr static const char* value = "GetRealNamedPropertyAttributes"; };
struct _str672 { constexpr static const char* value = "HasNamedLookupInterceptor"; };
struct _str673 { constexpr static const char* value = "HasIndexedLookupInterceptor"; };
struct _str674 { constexpr static const char* value = "Clone"; };
struct _str675 { constexpr static const char* value = "CreationContext"; };
struct _str676 { constexpr static const char* value = "IsCallable"; };
struct _str677 { constexpr static const char* value = "CallAsFunction"; };
struct _str678 { constexpr static const char* value = "recv"; };
struct _str679 { constexpr static const char* value = "argv"; };
struct _str680 { constexpr static const char* value = "CallAsConstructor"; };
struct _str681 { constexpr static const char* value = "PreviewEntries"; };
struct _str682 { constexpr static const char* value = "is_key_value"; };
struct _str683 { constexpr static const char* value = "prototype_or_null"; };
struct _str684 { constexpr static const char* value = "names"; };
struct _str685 { constexpr static const char* value = "elements"; };
struct _str686 { constexpr static const char* value = "Map"; };
struct _str687 { constexpr static const char* value = "Size"; };
struct _str688 { constexpr static const char* value = "AsArray"; };
struct _str689 { constexpr static const char* value = "Add"; };
struct _str690 { constexpr static const char* value = "ReturnValue<T>"; };
struct _str691 { constexpr static const char* value = "SetNull"; };
struct _str692 { constexpr static const char* value = "SetUndefined"; };
struct _str693 { constexpr static const char* value = "SetEmptyString"; };
struct _str694 { constexpr static const char* value = "whatever"; };
struct _str695 { constexpr static const char* value = "operator[]"; };
struct _str696 { constexpr static const char* value = "This"; };
struct _str697 { constexpr static const char* value = "Holder"; };
struct _str698 { constexpr static const char* value = "NewTarget"; };
struct _str699 { constexpr static const char* value = "IsConstructCall"; };
struct _str700 { constexpr static const char* value = "GetReturnValue"; };
struct _str701 { constexpr static const char* value = "kArgsLength"; };
struct _str702 { constexpr static const char* value = "kHolderIndex"; };
struct _str703 { constexpr static const char* value = "kIsolateIndex"; };
struct _str704 { constexpr static const char* value = "kReturnValueDefaultValueIndex"; };
struct _str705 { constexpr static const char* value = "kReturnValueIndex"; };
struct _str706 { constexpr static const char* value = "kDataIndex"; };
struct _str707 { constexpr static const char* value = "kNewTargetIndex"; };
struct _str708 { constexpr static const char* value = "FunctionCallbackInfo<T>"; };
struct _str709 { constexpr static const char* value = "implicit_args"; };
struct _str710 { constexpr static const char* value = "implicit_args_"; };
struct _str711 { constexpr static const char* value = "values_"; };
struct _str712 { constexpr static const char* value = "length_"; };
struct _str713 { constexpr static const char* value = "ShouldThrowOnError"; };
struct _str714 { constexpr static const char* value = "kShouldThrowOnErrorIndex"; };
struct _str715 { constexpr static const char* value = "kThisIndex"; };
struct _str716 { constexpr static const char* value = "PropertyCallbackInfo<T>"; };
struct _str717 { constexpr static const char* value = "args"; };
struct _str718 { constexpr static const char* value = "args_"; };
struct _str719 { constexpr static const char* value = "FunctionCallback"; };
struct _str720 { constexpr static const char* value = "ConstructorBehavior"; };
struct _str721 { constexpr static const char* value = "kThrow"; };
struct _str722 { constexpr static const char* value = "kAllow"; };
struct _str723 { constexpr static const char* value = "behavior"; };
struct _str724 { constexpr static const char* value = "side_effect_type"; };
struct _str725 { constexpr static const char* value = "NewInstance"; };
struct _str726 { constexpr static const char* value = "NewInstanceWithSideEffectType"; };
struct _str727 { constexpr static const char* value = "Call"; };
struct _str728 { constexpr static const char* value = "SetName"; };
struct _str729 { constexpr static const char* value = "GetName"; };
struct _str730 { constexpr static const char* value = "GetInferredName"; };
struct _str731 { constexpr static const char* value = "GetDebugName"; };
struct _str732 { constexpr static const char* value = "GetDisplayName"; };
struct _str733 { constexpr static const char* value = "GetScriptLineNumber"; };
struct _str734 { constexpr static const char* value = "GetScriptColumnNumber"; };
struct _str735 { constexpr static const char* value = "ScriptId"; };
struct _str736 { constexpr static const char* value = "GetBoundFunction"; };
struct _str737 { constexpr static const char* value = "kLineOffsetNotFound"; };
struct _str738 { constexpr static const char* value = "PromiseState"; };
struct _str739 { constexpr static const char* value = "kPending"; };
struct _str740 { constexpr static const char* value = "kFulfilled"; };
struct _str741 { constexpr static const char* value = "kRejected"; };
struct _str742 { constexpr static const char* value = "Resolver"; };
struct _str743 { constexpr static const char* value = "GetPromise"; };
struct _str744 { constexpr static const char* value = "Resolve"; };
struct _str745 { constexpr static const char* value = "Reject"; };
struct _str746 { constexpr static const char* value = "Catch"; };
struct _str747 { constexpr static const char* value = "handler"; };
struct _str748 { constexpr static const char* value = "Then"; };
struct _str749 { constexpr static const char* value = "on_fulfilled"; };
struct _str750 { constexpr static const char* value = "on_rejected"; };
struct _str751 { constexpr static const char* value = "HasHandler"; };
struct _str752 { constexpr static const char* value = "Result"; };
struct _str753 { constexpr static const char* value = "State"; };
struct _str754 { constexpr static const char* value = "MarkAsHandled"; };
struct _str755 { constexpr static const char* value = "kEmbedderFieldCount"; };
struct _str756 { constexpr static const char* value = "writable"; };
struct _str757 { constexpr static const char* value = "get"; };
struct _str758 { constexpr static const char* value = "set"; };
struct _str759 { constexpr static const char* value = "~PropertyDescriptor"; };
struct _str760 { constexpr static const char* value = "has_value"; };
struct _str761 { constexpr static const char* value = "has_get"; };
struct _str762 { constexpr static const char* value = "has_set"; };
struct _str763 { constexpr static const char* value = "set_enumerable"; };
struct _str764 { constexpr static const char* value = "enumerable"; };
struct _str765 { constexpr static const char* value = "has_enumerable"; };
struct _str766 { constexpr static const char* value = "set_configurable"; };
struct _str767 { constexpr static const char* value = "configurable"; };
struct _str768 { constexpr static const char* value = "has_configurable"; };
struct _str769 { constexpr static const char* value = "has_writable"; };
struct _str770 { constexpr static const char* value = "PrivateData"; };
struct _str771 { constexpr static const char* value = "get_private"; };
struct _str772 { constexpr static const char* value = "GetTarget"; };
struct _str773 { constexpr static const char* value = "GetHandler"; };
struct _str774 { constexpr static const char* value = "IsRevoked"; };
struct _str775 { constexpr static const char* value = "Revoke"; };
struct _str776 { constexpr static const char* value = "local_target"; };
struct _str777 { constexpr static const char* value = "local_handler"; };
struct _str778 { constexpr static const char* value = "MemorySpan"; };
struct _str779 { constexpr static const char* value = "MemorySpan<T>"; };
struct _str780 { constexpr static const char* value = "OwnedBuffer"; };
struct _str781 { constexpr static const char* value = "~OwnedBuffer"; };
struct _str782 { constexpr static const char* value = "CompiledWasmModule"; };
struct _str783 { constexpr static const char* value = "Serialize"; };
struct _str784 { constexpr static const char* value = "GetWireBytesRef"; };
struct _str785 { constexpr static const char* value = "~CompiledWasmModule"; };
struct _str786 { constexpr static const char* value = "TransferrableModule"; };
struct _str787 { constexpr static const char* value = "~TransferrableModule"; };
struct _str788 { constexpr static const char* value = "GetTransferrableModule"; };
struct _str789 { constexpr static const char* value = "FromTransferrableModule"; };
struct _str790 { constexpr static const char* value = "GetCompiledModule"; };
struct _str791 { constexpr static const char* value = "DeserializeOrCompile"; };
struct _str792 { constexpr static const char* value = "serialized_module"; };
struct _str793 { constexpr static const char* value = "wire_bytes"; };
struct _str794 { constexpr static const char* value = "WasmStreaming"; };
struct _str795 { constexpr static const char* value = "WasmStreamingImpl"; };
struct _str796 { constexpr static const char* value = "Client"; };
struct _str797 { constexpr static const char* value = "~Client"; };
struct _str798 { constexpr static const char* value = "OnModuleCompiled"; };
struct _str799 { constexpr static const char* value = "compiled_module"; };
struct _str800 { constexpr static const char* value = "~WasmStreaming"; };
struct _str801 { constexpr static const char* value = "OnBytesReceived"; };
struct _str802 { constexpr static const char* value = "bytes"; };
struct _str803 { constexpr static const char* value = "Finish"; };
struct _str804 { constexpr static const char* value = "Abort"; };
struct _str805 { constexpr static const char* value = "exception"; };
struct _str806 { constexpr static const char* value = "SetCompiledModuleBytes"; };
struct _str807 { constexpr static const char* value = "SetClient"; };
struct _str808 { constexpr static const char* value = "client"; };
struct _str809 { constexpr static const char* value = "Unpack"; };
struct _str810 { constexpr static const char* value = "WasmModuleObjectBuilderStreaming"; };
struct _str811 { constexpr static const char* value = "~WasmModuleObjectBuilderStreaming"; };
struct _str812 { constexpr static const char* value = "ArrayBufferCreationMode"; };
struct _str813 { constexpr static const char* value = "kExternalized"; };
struct _str814 { constexpr static const char* value = "Allocator"; };
struct _str815 { constexpr static const char* value = "~Allocator"; };
struct _str816 { constexpr static const char* value = "Allocate"; };
struct _str817 { constexpr static const char* value = "AllocateUninitialized"; };
struct _str818 { constexpr static const char* value = "Free"; };
struct _str819 { constexpr static const char* value = "AllocationMode"; };
struct _str820 { constexpr static const char* value = "kReservation"; };
struct _str821 { constexpr static const char* value = "NewDefaultAllocator"; };
struct _str822 { constexpr static const char* value = "Contents"; };
struct _str823 { constexpr static const char* value = "DeleterCallback"; };
struct _str824 { constexpr static const char* value = "AllocationBase"; };
struct _str825 { constexpr static const char* value = "AllocationLength"; };
struct _str826 { constexpr static const char* value = "ByteLength"; };
struct _str827 { constexpr static const char* value = "Deleter"; };
struct _str828 { constexpr static const char* value = "DeleterData"; };
struct _str829 { constexpr static const char* value = "byte_length"; };
struct _str830 { constexpr static const char* value = "IsDetachable"; };
struct _str831 { constexpr static const char* value = "IsNeuterable"; };
struct _str832 { constexpr static const char* value = "Detach"; };
struct _str833 { constexpr static const char* value = "Neuter"; };
struct _str834 { constexpr static const char* value = "Externalize"; };
struct _str835 { constexpr static const char* value = "GetContents"; };
struct _str836 { constexpr static const char* value = "kInternalFieldCount"; };
struct _str837 { constexpr static const char* value = "ArrayBufferView"; };
struct _str838 { constexpr static const char* value = "Buffer"; };
struct _str839 { constexpr static const char* value = "ByteOffset"; };
struct _str840 { constexpr static const char* value = "CopyContents"; };
struct _str841 { constexpr static const char* value = "HasBuffer"; };
struct _str842 { constexpr static const char* value = "TypedArray"; };
struct _str843 { constexpr static const char* value = "Uint8Array"; };
struct _str844 { constexpr static const char* value = "byte_offset"; };
struct _str845 { constexpr static const char* value = "Uint8ClampedArray"; };
struct _str846 { constexpr static const char* value = "Int8Array"; };
struct _str847 { constexpr static const char* value = "Uint16Array"; };
struct _str848 { constexpr static const char* value = "Int16Array"; };
struct _str849 { constexpr static const char* value = "Uint32Array"; };
struct _str850 { constexpr static const char* value = "Int32Array"; };
struct _str851 { constexpr static const char* value = "Float32Array"; };
struct _str852 { constexpr static const char* value = "Float64Array"; };
struct _str853 { constexpr static const char* value = "BigInt64Array"; };
struct _str854 { constexpr static const char* value = "BigUint64Array"; };
struct _str855 { constexpr static const char* value = "DataView"; };
struct _str856 { constexpr static const char* value = "time"; };
struct _str857 { constexpr static const char* value = "ValueOf"; };
struct _str858 { constexpr static const char* value = "RegExp"; };
struct _str859 { constexpr static const char* value = "kNone"; };
struct _str860 { constexpr static const char* value = "kGlobal"; };
struct _str861 { constexpr static const char* value = "kIgnoreCase"; };
struct _str862 { constexpr static const char* value = "kMultiline"; };
struct _str863 { constexpr static const char* value = "kSticky"; };
struct _str864 { constexpr static const char* value = "kUnicode"; };
struct _str865 { constexpr static const char* value = "kDotAll"; };
struct _str866 { constexpr static const char* value = "pattern"; };
struct _str867 { constexpr static const char* value = "GetSource"; };
struct _str868 { constexpr static const char* value = "GetFlags"; };
struct _str869 { constexpr static const char* value = "Intrinsic"; };
struct _str870 { constexpr static const char* value = "kArrayProto_entries"; };
struct _str871 { constexpr static const char* value = "kArrayProto_forEach"; };
struct _str872 { constexpr static const char* value = "kArrayProto_keys"; };
struct _str873 { constexpr static const char* value = "kArrayProto_values"; };
struct _str874 { constexpr static const char* value = "kErrorPrototype"; };
struct _str875 { constexpr static const char* value = "kIteratorPrototype"; };
struct _str876 { constexpr static const char* value = "Template"; };
struct _str877 { constexpr static const char* value = "signature"; };
struct _str878 { constexpr static const char* value = "SetIntrinsicDataProperty"; };
struct _str879 { constexpr static const char* value = "intrinsic"; };
struct _str880 { constexpr static const char* value = "GenericNamedPropertyGetterCallback"; };
struct _str881 { constexpr static const char* value = "GenericNamedPropertySetterCallback"; };
struct _str882 { constexpr static const char* value = "GenericNamedPropertyQueryCallback"; };
struct _str883 { constexpr static const char* value = "GenericNamedPropertyDeleterCallback"; };
struct _str884 { constexpr static const char* value = "GenericNamedPropertyEnumeratorCallback"; };
struct _str885 { constexpr static const char* value = "GenericNamedPropertyDefinerCallback"; };
struct _str886 { constexpr static const char* value = "GenericNamedPropertyDescriptorCallback"; };
struct _str887 { constexpr static const char* value = "IndexedPropertyGetterCallback"; };
struct _str888 { constexpr static const char* value = "IndexedPropertySetterCallback"; };
struct _str889 { constexpr static const char* value = "IndexedPropertyQueryCallback"; };
struct _str890 { constexpr static const char* value = "IndexedPropertyDeleterCallback"; };
struct _str891 { constexpr static const char* value = "IndexedPropertyEnumeratorCallback"; };
struct _str892 { constexpr static const char* value = "IndexedPropertyDefinerCallback"; };
struct _str893 { constexpr static const char* value = "IndexedPropertyDescriptorCallback"; };
struct _str894 { constexpr static const char* value = "AccessType"; };
struct _str895 { constexpr static const char* value = "ACCESS_GET"; };
struct _str896 { constexpr static const char* value = "ACCESS_SET"; };
struct _str897 { constexpr static const char* value = "ACCESS_HAS"; };
struct _str898 { constexpr static const char* value = "ACCESS_DELETE"; };
struct _str899 { constexpr static const char* value = "ACCESS_KEYS"; };
struct _str900 { constexpr static const char* value = "AccessCheckCallback"; };
struct _str901 { constexpr static const char* value = "FromSnapshot"; };
struct _str902 { constexpr static const char* value = "NewWithCache"; };
struct _str903 { constexpr static const char* value = "cache_property"; };
struct _str904 { constexpr static const char* value = "GetFunction"; };
struct _str905 { constexpr static const char* value = "NewRemoteInstance"; };
struct _str906 { constexpr static const char* value = "SetCallHandler"; };
struct _str907 { constexpr static const char* value = "SetLength"; };
struct _str908 { constexpr static const char* value = "InstanceTemplate"; };
struct _str909 { constexpr static const char* value = "Inherit"; };
struct _str910 { constexpr static const char* value = "parent"; };
struct _str911 { constexpr static const char* value = "PrototypeTemplate"; };
struct _str912 { constexpr static const char* value = "SetPrototypeProviderTemplate"; };
struct _str913 { constexpr static const char* value = "prototype_provider"; };
struct _str914 { constexpr static const char* value = "SetClassName"; };
struct _str915 { constexpr static const char* value = "SetAcceptAnyReceiver"; };
struct _str916 { constexpr static const char* value = "ReadOnlyPrototype"; };
struct _str917 { constexpr static const char* value = "RemovePrototype"; };
struct _str918 { constexpr static const char* value = "HasInstance"; };
struct _str919 { constexpr static const char* value = "PropertyHandlerFlags"; };
struct _str920 { constexpr static const char* value = "kAllCanRead"; };
struct _str921 { constexpr static const char* value = "kNonMasking"; };
struct _str922 { constexpr static const char* value = "kOnlyInterceptStrings"; };
struct _str923 { constexpr static const char* value = "NamedPropertyHandlerConfiguration"; };
struct _str924 { constexpr static const char* value = "query"; };
struct _str925 { constexpr static const char* value = "deleter"; };
struct _str926 { constexpr static const char* value = "enumerator"; };
struct _str927 { constexpr static const char* value = "definer"; };
struct _str928 { constexpr static const char* value = "IndexedPropertyHandlerConfiguration"; };
struct _str929 { constexpr static const char* value = "~IndexedPropertyHandlerConfiguration"; };
struct _str930 { constexpr static const char* value = "constructor"; };
struct _str931 { constexpr static const char* value = "SetHandler"; };
struct _str932 { constexpr static const char* value = "configuration"; };
struct _str933 { constexpr static const char* value = "SetIndexedPropertyHandler"; };
struct _str934 { constexpr static const char* value = "SetCallAsFunctionHandler"; };
struct _str935 { constexpr static const char* value = "MarkAsUndetectable"; };
struct _str936 { constexpr static const char* value = "SetAccessCheckCallback"; };
struct _str937 { constexpr static const char* value = "SetAccessCheckCallbackAndHandler"; };
struct _str938 { constexpr static const char* value = "named_handler"; };
struct _str939 { constexpr static const char* value = "indexed_handler"; };
struct _str940 { constexpr static const char* value = "SetInternalFieldCount"; };
struct _str941 { constexpr static const char* value = "IsImmutableProto"; };
struct _str942 { constexpr static const char* value = "SetImmutableProto"; };
struct _str943 { constexpr static const char* value = "receiver"; };
struct _str944 { constexpr static const char* value = "Extension"; };
struct _str945 { constexpr static const char* value = "dep_count"; };
struct _str946 { constexpr static const char* value = "deps"; };
struct _str947 { constexpr static const char* value = "source_length"; };
struct _str948 { constexpr static const char* value = "~Extension"; };
struct _str949 { constexpr static const char* value = "GetNativeFunctionTemplate"; };
struct _str950 { constexpr static const char* value = "dependency_count"; };
struct _str951 { constexpr static const char* value = "dependencies"; };
struct _str952 { constexpr static const char* value = "set_auto_enable"; };
struct _str953 { constexpr static const char* value = "auto_enable"; };
struct _str954 { constexpr static const char* value = "RegisterExtension"; };
struct _str955 { constexpr static const char* value = "Undefined"; };
struct _str956 { constexpr static const char* value = "Null"; };
struct _str957 { constexpr static const char* value = "True"; };
struct _str958 { constexpr static const char* value = "False"; };
struct _str959 { constexpr static const char* value = "ResourceConstraints"; };
struct _str960 { constexpr static const char* value = "ConfigureDefaultsFromHeapSize"; };
struct _str961 { constexpr static const char* value = "initial_heap_size_in_bytes"; };
struct _str962 { constexpr static const char* value = "maximum_heap_size_in_bytes"; };
struct _str963 { constexpr static const char* value = "ConfigureDefaults"; };
struct _str964 { constexpr static const char* value = "physical_memory"; };
struct _str965 { constexpr static const char* value = "virtual_memory_limit"; };
struct _str966 { constexpr static const char* value = "stack_limit"; };
struct _str967 { constexpr static const char* value = "set_stack_limit"; };
struct _str968 { constexpr static const char* value = "code_range_size_in_bytes"; };
struct _str969 { constexpr static const char* value = "set_code_range_size_in_bytes"; };
struct _str970 { constexpr static const char* value = "limit"; };
struct _str971 { constexpr static const char* value = "max_old_generation_size_in_bytes"; };
struct _str972 { constexpr static const char* value = "set_max_old_generation_size_in_bytes"; };
struct _str973 { constexpr static const char* value = "max_young_generation_size_in_bytes"; };
struct _str974 { constexpr static const char* value = "set_max_young_generation_size_in_bytes"; };
struct _str975 { constexpr static const char* value = "initial_old_generation_size_in_bytes"; };
struct _str976 { constexpr static const char* value = "set_initial_old_generation_size_in_bytes"; };
struct _str977 { constexpr static const char* value = "initial_size"; };
struct _str978 { constexpr static const char* value = "initial_young_generation_size_in_bytes"; };
struct _str979 { constexpr static const char* value = "set_initial_young_generation_size_in_bytes"; };
struct _str980 { constexpr static const char* value = "code_range_size"; };
struct _str981 { constexpr static const char* value = "set_code_range_size"; };
struct _str982 { constexpr static const char* value = "limit_in_mb"; };
struct _str983 { constexpr static const char* value = "max_semi_space_size_in_kb"; };
struct _str984 { constexpr static const char* value = "set_max_semi_space_size_in_kb"; };
struct _str985 { constexpr static const char* value = "limit_in_kb"; };
struct _str986 { constexpr static const char* value = "max_old_space_size"; };
struct _str987 { constexpr static const char* value = "set_max_old_space_size"; };
struct _str988 { constexpr static const char* value = "max_zone_pool_size"; };
struct _str989 { constexpr static const char* value = "set_max_zone_pool_size"; };
struct _str990 { constexpr static const char* value = "FatalErrorCallback"; };
struct _str991 { constexpr static const char* value = "OOMErrorCallback"; };
struct _str992 { constexpr static const char* value = "DcheckErrorCallback"; };
struct _str993 { constexpr static const char* value = "MessageCallback"; };
struct _str994 { constexpr static const char* value = "LogEventCallback"; };
struct _str995 { constexpr static const char* value = "Exception"; };
struct _str996 { constexpr static const char* value = "RangeError"; };
struct _str997 { constexpr static const char* value = "ReferenceError"; };
struct _str998 { constexpr static const char* value = "SyntaxError"; };
struct _str999 { constexpr static const char* value = "TypeError"; };
struct _str1000 { constexpr static const char* value = "Error"; };
struct _str1001 { constexpr static const char* value = "CreateMessage"; };
struct _str1002 { constexpr static const char* value = "CounterLookupCallback"; };
struct _str1003 { constexpr static const char* value = "CreateHistogramCallback"; };
struct _str1004 { constexpr static const char* value = "AddHistogramSampleCallback"; };
struct _str1005 { constexpr static const char* value = "BeforeCallEnteredCallback"; };
struct _str1006 { constexpr static const char* value = "CallCompletedCallback"; };
struct _str1007 { constexpr static const char* value = "HostImportModuleDynamicallyCallback"; };
struct _str1008 { constexpr static const char* value = "HostInitializeImportMetaObjectCallback"; };
struct _str1009 { constexpr static const char* value = "PrepareStackTraceCallback"; };
struct _str1010 { constexpr static const char* value = "PromiseHookType"; };
struct _str1011 { constexpr static const char* value = "kInit"; };
struct _str1012 { constexpr static const char* value = "kResolve"; };
struct _str1013 { constexpr static const char* value = "kBefore"; };
struct _str1014 { constexpr static const char* value = "kAfter"; };
struct _str1015 { constexpr static const char* value = "PromiseHook"; };
struct _str1016 { constexpr static const char* value = "PromiseRejectEvent"; };
struct _str1017 { constexpr static const char* value = "kPromiseRejectWithNoHandler"; };
struct _str1018 { constexpr static const char* value = "kPromiseHandlerAddedAfterReject"; };
struct _str1019 { constexpr static const char* value = "kPromiseRejectAfterResolved"; };
struct _str1020 { constexpr static const char* value = "kPromiseResolveAfterResolved"; };
struct _str1021 { constexpr static const char* value = "PromiseRejectMessage"; };
struct _str1022 { constexpr static const char* value = "promise"; };
struct _str1023 { constexpr static const char* value = "event"; };
struct _str1024 { constexpr static const char* value = "GetEvent"; };
struct _str1025 { constexpr static const char* value = "GetValue"; };
struct _str1026 { constexpr static const char* value = "PromiseRejectCallback"; };
struct _str1027 { constexpr static const char* value = "MicrotasksCompletedCallback"; };
struct _str1028 { constexpr static const char* value = "MicrotasksCompletedCallbackWithData"; };
struct _str1029 { constexpr static const char* value = "MicrotaskCallback"; };
struct _str1030 { constexpr static const char* value = "MicrotasksPolicy"; };
struct _str1031 { constexpr static const char* value = "kExplicit"; };
struct _str1032 { constexpr static const char* value = "kScoped"; };
struct _str1033 { constexpr static const char* value = "kAuto"; };
struct _str1034 { constexpr static const char* value = "policy"; };
struct _str1035 { constexpr static const char* value = "~MicrotaskQueue"; };
struct _str1036 { constexpr static const char* value = "EnqueueMicrotask"; };
struct _str1037 { constexpr static const char* value = "microtask"; };
struct _str1038 { constexpr static const char* value = "AddMicrotasksCompletedCallback"; };
struct _str1039 { constexpr static const char* value = "RemoveMicrotasksCompletedCallback"; };
struct _str1040 { constexpr static const char* value = "PerformCheckpoint"; };
struct _str1041 { constexpr static const char* value = "IsRunningMicrotasks"; };
struct _str1042 { constexpr static const char* value = "GetMicrotasksScopeDepth"; };
struct _str1043 { constexpr static const char* value = "MicrotasksScope"; };
struct _str1044 { constexpr static const char* value = "Type"; };
struct _str1045 { constexpr static const char* value = "kRunMicrotasks"; };
struct _str1046 { constexpr static const char* value = "kDoNotRunMicrotasks"; };
struct _str1047 { constexpr static const char* value = "microtask_queue"; };
struct _str1048 { constexpr static const char* value = "~MicrotasksScope"; };
struct _str1049 { constexpr static const char* value = "GetCurrentDepth"; };
struct _str1050 { constexpr static const char* value = "FailedAccessCheckCallback"; };
struct _str1051 { constexpr static const char* value = "AllowCodeGenerationFromStringsCallback"; };
struct _str1052 { constexpr static const char* value = "ExtensionCallback"; };
struct _str1053 { constexpr static const char* value = "AllowWasmCodeGenerationCallback"; };
struct _str1054 { constexpr static const char* value = "ApiImplementationCallback"; };
struct _str1055 { constexpr static const char* value = "WasmStreamingCallback"; };
struct _str1056 { constexpr static const char* value = "WasmThreadsEnabledCallback"; };
struct _str1057 { constexpr static const char* value = "GCType"; };
struct _str1058 { constexpr static const char* value = "kGCTypeScavenge"; };
struct _str1059 { constexpr static const char* value = "kGCTypeMarkSweepCompact"; };
struct _str1060 { constexpr static const char* value = "kGCTypeIncrementalMarking"; };
struct _str1061 { constexpr static const char* value = "kGCTypeProcessWeakCallbacks"; };
struct _str1062 { constexpr static const char* value = "kGCTypeAll"; };
struct _str1063 { constexpr static const char* value = "GCCallbackFlags"; };
struct _str1064 { constexpr static const char* value = "kNoGCCallbackFlags"; };
struct _str1065 { constexpr static const char* value = "kGCCallbackFlagConstructRetainedObjectInfos"; };
struct _str1066 { constexpr static const char* value = "kGCCallbackFlagForced"; };
struct _str1067 { constexpr static const char* value = "kGCCallbackFlagSynchronousPhantomCallbackProcessing"; };
struct _str1068 { constexpr static const char* value = "kGCCallbackFlagCollectAllAvailableGarbage"; };
struct _str1069 { constexpr static const char* value = "kGCCallbackFlagCollectAllExternalMemory"; };
struct _str1070 { constexpr static const char* value = "kGCCallbackScheduleIdleGarbageCollection"; };
struct _str1071 { constexpr static const char* value = "GCCallback"; };
struct _str1072 { constexpr static const char* value = "InterruptCallback"; };
struct _str1073 { constexpr static const char* value = "NearHeapLimitCallback"; };
struct _str1074 { constexpr static const char* value = "HeapStatistics"; };
struct _str1075 { constexpr static const char* value = "total_heap_size"; };
struct _str1076 { constexpr static const char* value = "total_heap_size_executable"; };
struct _str1077 { constexpr static const char* value = "total_physical_size"; };
struct _str1078 { constexpr static const char* value = "total_available_size"; };
struct _str1079 { constexpr static const char* value = "used_heap_size"; };
struct _str1080 { constexpr static const char* value = "heap_size_limit"; };
struct _str1081 { constexpr static const char* value = "malloced_memory"; };
struct _str1082 { constexpr static const char* value = "external_memory"; };
struct _str1083 { constexpr static const char* value = "peak_malloced_memory"; };
struct _str1084 { constexpr static const char* value = "number_of_native_contexts"; };
struct _str1085 { constexpr static const char* value = "number_of_detached_contexts"; };
struct _str1086 { constexpr static const char* value = "does_zap_garbage"; };
struct _str1087 { constexpr static const char* value = "HeapSpaceStatistics"; };
struct _str1088 { constexpr static const char* value = "space_name"; };
struct _str1089 { constexpr static const char* value = "space_size"; };
struct _str1090 { constexpr static const char* value = "space_used_size"; };
struct _str1091 { constexpr static const char* value = "space_available_size"; };
struct _str1092 { constexpr static const char* value = "physical_space_size"; };
struct _str1093 { constexpr static const char* value = "HeapObjectStatistics"; };
struct _str1094 { constexpr static const char* value = "object_type"; };
struct _str1095 { constexpr static const char* value = "object_sub_type"; };
struct _str1096 { constexpr static const char* value = "object_count"; };
struct _str1097 { constexpr static const char* value = "object_size"; };
struct _str1098 { constexpr static const char* value = "HeapCodeStatistics"; };
struct _str1099 { constexpr static const char* value = "code_and_metadata_size"; };
struct _str1100 { constexpr static const char* value = "bytecode_and_metadata_size"; };
struct _str1101 { constexpr static const char* value = "external_script_source_size"; };
struct _str1102 { constexpr static const char* value = "JitCodeEvent"; };
struct _str1103 { constexpr static const char* value = "EventType"; };
struct _str1104 { constexpr static const char* value = "CODE_ADDED"; };
struct _str1105 { constexpr static const char* value = "CODE_MOVED"; };
struct _str1106 { constexpr static const char* value = "CODE_REMOVED"; };
struct _str1107 { constexpr static const char* value = "CODE_ADD_LINE_POS_INFO"; };
struct _str1108 { constexpr static const char* value = "CODE_START_LINE_INFO_RECORDING"; };
struct _str1109 { constexpr static const char* value = "CODE_END_LINE_INFO_RECORDING"; };
struct _str1110 { constexpr static const char* value = "PositionType"; };
struct _str1111 { constexpr static const char* value = "POSITION"; };
struct _str1112 { constexpr static const char* value = "STATEMENT_POSITION"; };
struct _str1113 { constexpr static const char* value = "CodeType"; };
struct _str1114 { constexpr static const char* value = "BYTE_CODE"; };
struct _str1115 { constexpr static const char* value = "JIT_CODE"; };
struct _str1116 { constexpr static const char* value = "code_type"; };
struct _str1117 { constexpr static const char* value = "code_start"; };
struct _str1118 { constexpr static const char* value = "code_len"; };
struct _str1119 { constexpr static const char* value = "script"; };
struct _str1120 { constexpr static const char* value = "user_data"; };
struct _str1121 { constexpr static const char* value = "name_t"; };
struct _str1122 { constexpr static const char* value = "len"; };
struct _str1123 { constexpr static const char* value = "line_info_t"; };
struct _str1124 { constexpr static const char* value = "offset"; };
struct _str1125 { constexpr static const char* value = "pos"; };
struct _str1126 { constexpr static const char* value = "position_type"; };
struct _str1127 { constexpr static const char* value = "line_info"; };
struct _str1128 { constexpr static const char* value = "new_code_start"; };
struct _str1129 { constexpr static const char* value = "RAILMode"; };
struct _str1130 { constexpr static const char* value = "PERFORMANCE_RESPONSE"; };
struct _str1131 { constexpr static const char* value = "PERFORMANCE_ANIMATION"; };
struct _str1132 { constexpr static const char* value = "PERFORMANCE_IDLE"; };
struct _str1133 { constexpr static const char* value = "PERFORMANCE_LOAD"; };
struct _str1134 { constexpr static const char* value = "JitCodeEventOptions"; };
struct _str1135 { constexpr static const char* value = "kJitCodeEventDefault"; };
struct _str1136 { constexpr static const char* value = "kJitCodeEventEnumExisting"; };
struct _str1137 { constexpr static const char* value = "JitCodeEventHandler"; };
struct _str1138 { constexpr static const char* value = "UnhandledExceptionCallback"; };
struct _str1139 { constexpr static const char* value = "_EXCEPTION_POINTERS"; };
struct _str1140 { constexpr static const char* value = "ExternalResourceVisitor"; };
struct _str1141 { constexpr static const char* value = "~ExternalResourceVisitor"; };
struct _str1142 { constexpr static const char* value = "VisitExternalString"; };
struct _str1143 { constexpr static const char* value = "string"; };
struct _str1144 { constexpr static const char* value = "PersistentHandleVisitor"; };
struct _str1145 { constexpr static const char* value = "~PersistentHandleVisitor"; };
struct _str1146 { constexpr static const char* value = "VisitPersistentHandle"; };
struct _str1147 { constexpr static const char* value = "MemoryPressureLevel"; };
struct _str1148 { constexpr static const char* value = "kModerate"; };
struct _str1149 { constexpr static const char* value = "kCritical"; };
struct _str1150 { constexpr static const char* value = "EmbedderHeapTracer"; };
struct _str1151 { constexpr static const char* value = "TraceFlags"; };
struct _str1152 { constexpr static const char* value = "kNoFlags"; };
struct _str1153 { constexpr static const char* value = "kReduceMemory"; };
struct _str1154 { constexpr static const char* value = "EmbedderStackState"; };
struct _str1155 { constexpr static const char* value = "kUnknown"; };
struct _str1156 { constexpr static const char* value = "kNonEmpty"; };
struct _str1157 { constexpr static const char* value = "kEmpty"; };
struct _str1158 { constexpr static const char* value = "TracedGlobalHandleVisitor"; };
struct _str1159 { constexpr static const char* value = "~TracedGlobalHandleVisitor"; };
struct _str1160 { constexpr static const char* value = "VisitTracedGlobalHandle"; };
struct _str1161 { constexpr static const char* value = "TraceSummary"; };
struct _str1162 { constexpr static const char* value = "allocated_size"; };
struct _str1163 { constexpr static const char* value = "~EmbedderHeapTracer"; };
struct _str1164 { constexpr static const char* value = "IterateTracedGlobalHandles"; };
struct _str1165 { constexpr static const char* value = "visitor"; };
struct _str1166 { constexpr static const char* value = "RegisterV8References"; };
struct _str1167 { constexpr static const char* value = "RegisterEmbedderReference"; };
struct _str1168 { constexpr static const char* value = "ref"; };
struct _str1169 { constexpr static const char* value = "TracePrologue"; };
struct _str1170 { constexpr static const char* value = "AdvanceTracing"; };
struct _str1171 { constexpr static const char* value = "deadline_in_ms"; };
struct _str1172 { constexpr static const char* value = "IsTracingDone"; };
struct _str1173 { constexpr static const char* value = "TraceEpilogue"; };
struct _str1174 { constexpr static const char* value = "trace_summary"; };
struct _str1175 { constexpr static const char* value = "EnterFinalPause"; };
struct _str1176 { constexpr static const char* value = "stack_state"; };
struct _str1177 { constexpr static const char* value = "FinalizeTracing"; };
struct _str1178 { constexpr static const char* value = "IsRootForNonTracingGC"; };
struct _str1179 { constexpr static const char* value = "GarbageCollectionForTesting"; };
struct _str1180 { constexpr static const char* value = "IncreaseAllocatedSize"; };
struct _str1181 { constexpr static const char* value = "DecreaseAllocatedSize"; };
struct _str1182 { constexpr static const char* value = "isolate_"; };
struct _str1183 { constexpr static const char* value = "SerializeInternalFieldsCallback"; };
struct _str1184 { constexpr static const char* value = "CallbackFunction"; };
struct _str1185 { constexpr static const char* value = "data_arg"; };
struct _str1186 { constexpr static const char* value = "~SerializeInternalFieldsCallback"; };
struct _str1187 { constexpr static const char* value = "SerializeEmbedderFieldsCallback"; };
struct _str1188 { constexpr static const char* value = "DeserializeInternalFieldsCallback"; };
struct _str1189 { constexpr static const char* value = "~DeserializeInternalFieldsCallback"; };
struct _str1190 { constexpr static const char* value = "DeserializeEmbedderFieldsCallback"; };
struct _str1191 { constexpr static const char* value = "CreateParams"; };
struct _str1192 { constexpr static const char* value = "code_event_handler"; };
struct _str1193 { constexpr static const char* value = "constraints"; };
struct _str1194 { constexpr static const char* value = "snapshot_blob"; };
struct _str1195 { constexpr static const char* value = "counter_lookup_callback"; };
struct _str1196 { constexpr static const char* value = "create_histogram_callback"; };
struct _str1197 { constexpr static const char* value = "add_histogram_sample_callback"; };
struct _str1198 { constexpr static const char* value = "array_buffer_allocator"; };
struct _str1199 { constexpr static const char* value = "external_references"; };
struct _str1200 { constexpr static const char* value = "allow_atomics_wait"; };
struct _str1201 { constexpr static const char* value = "only_terminate_in_safe_scope"; };
struct _str1202 { constexpr static const char* value = "Scope"; };
struct _str1203 { constexpr static const char* value = "~Scope"; };
struct _str1204 { constexpr static const char* value = "DisallowJavascriptExecutionScope"; };
struct _str1205 { constexpr static const char* value = "OnFailure"; };
struct _str1206 { constexpr static const char* value = "CRASH_ON_FAILURE"; };
struct _str1207 { constexpr static const char* value = "THROW_ON_FAILURE"; };
struct _str1208 { constexpr static const char* value = "DUMP_ON_FAILURE"; };
struct _str1209 { constexpr static const char* value = "on_failure"; };
struct _str1210 { constexpr static const char* value = "~DisallowJavascriptExecutionScope"; };
struct _str1211 { constexpr static const char* value = "AllowJavascriptExecutionScope"; };
struct _str1212 { constexpr static const char* value = "~AllowJavascriptExecutionScope"; };
struct _str1213 { constexpr static const char* value = "SuppressMicrotaskExecutionScope"; };
struct _str1214 { constexpr static const char* value = "~SuppressMicrotaskExecutionScope"; };
struct _str1215 { constexpr static const char* value = "SafeForTerminationScope"; };
struct _str1216 { constexpr static const char* value = "~SafeForTerminationScope"; };
struct _str1217 { constexpr static const char* value = "GarbageCollectionType"; };
struct _str1218 { constexpr static const char* value = "kFullGarbageCollection"; };
struct _str1219 { constexpr static const char* value = "kMinorGarbageCollection"; };
struct _str1220 { constexpr static const char* value = "UseCounterFeature"; };
struct _str1221 { constexpr static const char* value = "kUseAsm"; };
struct _str1222 { constexpr static const char* value = "kBreakIterator"; };
struct _str1223 { constexpr static const char* value = "kLegacyConst"; };
struct _str1224 { constexpr static const char* value = "kMarkDequeOverflow"; };
struct _str1225 { constexpr static const char* value = "kStoreBufferOverflow"; };
struct _str1226 { constexpr static const char* value = "kSlotsBufferOverflow"; };
struct _str1227 { constexpr static const char* value = "kObjectObserve"; };
struct _str1228 { constexpr static const char* value = "kForcedGC"; };
struct _str1229 { constexpr static const char* value = "kSloppyMode"; };
struct _str1230 { constexpr static const char* value = "kStrictMode"; };
struct _str1231 { constexpr static const char* value = "kStrongMode"; };
struct _str1232 { constexpr static const char* value = "kRegExpPrototypeStickyGetter"; };
struct _str1233 { constexpr static const char* value = "kRegExpPrototypeToString"; };
struct _str1234 { constexpr static const char* value = "kRegExpPrototypeUnicodeGetter"; };
struct _str1235 { constexpr static const char* value = "kIntlV8Parse"; };
struct _str1236 { constexpr static const char* value = "kIntlPattern"; };
struct _str1237 { constexpr static const char* value = "kIntlResolved"; };
struct _str1238 { constexpr static const char* value = "kPromiseChain"; };
struct _str1239 { constexpr static const char* value = "kPromiseAccept"; };
struct _str1240 { constexpr static const char* value = "kPromiseDefer"; };
struct _str1241 { constexpr static const char* value = "kHtmlCommentInExternalScript"; };
struct _str1242 { constexpr static const char* value = "kHtmlComment"; };
struct _str1243 { constexpr static const char* value = "kSloppyModeBlockScopedFunctionRedefinition"; };
struct _str1244 { constexpr static const char* value = "kForInInitializer"; };
struct _str1245 { constexpr static const char* value = "kArrayProtectorDirtied"; };
struct _str1246 { constexpr static const char* value = "kArraySpeciesModified"; };
struct _str1247 { constexpr static const char* value = "kArrayPrototypeConstructorModified"; };
struct _str1248 { constexpr static const char* value = "kArrayInstanceProtoModified"; };
struct _str1249 { constexpr static const char* value = "kArrayInstanceConstructorModified"; };
struct _str1250 { constexpr static const char* value = "kLegacyFunctionDeclaration"; };
struct _str1251 { constexpr static const char* value = "kRegExpPrototypeSourceGetter"; };
struct _str1252 { constexpr static const char* value = "kRegExpPrototypeOldFlagGetter"; };
struct _str1253 { constexpr static const char* value = "kDecimalWithLeadingZeroInStrictMode"; };
struct _str1254 { constexpr static const char* value = "kLegacyDateParser"; };
struct _str1255 { constexpr static const char* value = "kDefineGetterOrSetterWouldThrow"; };
struct _str1256 { constexpr static const char* value = "kFunctionConstructorReturnedUndefined"; };
struct _str1257 { constexpr static const char* value = "kAssigmentExpressionLHSIsCallInSloppy"; };
struct _str1258 { constexpr static const char* value = "kAssigmentExpressionLHSIsCallInStrict"; };
struct _str1259 { constexpr static const char* value = "kPromiseConstructorReturnedUndefined"; };
struct _str1260 { constexpr static const char* value = "kConstructorNonUndefinedPrimitiveReturn"; };
struct _str1261 { constexpr static const char* value = "kLabeledExpressionStatement"; };
struct _str1262 { constexpr static const char* value = "kLineOrParagraphSeparatorAsLineTerminator"; };
struct _str1263 { constexpr static const char* value = "kIndexAccessor"; };
struct _str1264 { constexpr static const char* value = "kErrorCaptureStackTrace"; };
struct _str1265 { constexpr static const char* value = "kErrorPrepareStackTrace"; };
struct _str1266 { constexpr static const char* value = "kErrorStackTraceLimit"; };
struct _str1267 { constexpr static const char* value = "kWebAssemblyInstantiation"; };
struct _str1268 { constexpr static const char* value = "kDeoptimizerDisableSpeculation"; };
struct _str1269 { constexpr static const char* value = "kArrayPrototypeSortJSArrayModifiedPrototype"; };
struct _str1270 { constexpr static const char* value = "kFunctionTokenOffsetTooLongForToString"; };
struct _str1271 { constexpr static const char* value = "kWasmSharedMemory"; };
struct _str1272 { constexpr static const char* value = "kWasmThreadOpcodes"; };
struct _str1273 { constexpr static const char* value = "kAtomicsNotify"; };
struct _str1274 { constexpr static const char* value = "kAtomicsWake"; };
struct _str1275 { constexpr static const char* value = "kCollator"; };
struct _str1276 { constexpr static const char* value = "kNumberFormat"; };
struct _str1277 { constexpr static const char* value = "kDateTimeFormat"; };
struct _str1278 { constexpr static const char* value = "kPluralRules"; };
struct _str1279 { constexpr static const char* value = "kRelativeTimeFormat"; };
struct _str1280 { constexpr static const char* value = "kLocale"; };
struct _str1281 { constexpr static const char* value = "kListFormat"; };
struct _str1282 { constexpr static const char* value = "kSegmenter"; };
struct _str1283 { constexpr static const char* value = "kStringLocaleCompare"; };
struct _str1284 { constexpr static const char* value = "kStringToLocaleUpperCase"; };
struct _str1285 { constexpr static const char* value = "kStringToLocaleLowerCase"; };
struct _str1286 { constexpr static const char* value = "kNumberToLocaleString"; };
struct _str1287 { constexpr static const char* value = "kDateToLocaleString"; };
struct _str1288 { constexpr static const char* value = "kDateToLocaleDateString"; };
struct _str1289 { constexpr static const char* value = "kDateToLocaleTimeString"; };
struct _str1290 { constexpr static const char* value = "kAttemptOverrideReadOnlyOnPrototypeSloppy"; };
struct _str1291 { constexpr static const char* value = "kAttemptOverrideReadOnlyOnPrototypeStrict"; };
struct _str1292 { constexpr static const char* value = "kOptimizedFunctionWithOneShotBytecode"; };
struct _str1293 { constexpr static const char* value = "kRegExpMatchIsTrueishOnNonJSRegExp"; };
struct _str1294 { constexpr static const char* value = "kRegExpMatchIsFalseishOnJSRegExp"; };
struct _str1295 { constexpr static const char* value = "kDateGetTimezoneOffset"; };
struct _str1296 { constexpr static const char* value = "kStringNormalize"; };
struct _str1297 { constexpr static const char* value = "kUseCounterFeatureCount"; };
struct _str1298 { constexpr static const char* value = "MessageErrorLevel"; };
struct _str1299 { constexpr static const char* value = "kMessageLog"; };
struct _str1300 { constexpr static const char* value = "kMessageDebug"; };
struct _str1301 { constexpr static const char* value = "kMessageInfo"; };
struct _str1302 { constexpr static const char* value = "kMessageError"; };
struct _str1303 { constexpr static const char* value = "kMessageWarning"; };
struct _str1304 { constexpr static const char* value = "kMessageAll"; };
struct _str1305 { constexpr static const char* value = "UseCounterCallback"; };
struct _str1306 { constexpr static const char* value = "params"; };
struct _str1307 { constexpr static const char* value = "GetCurrent"; };
struct _str1308 { constexpr static const char* value = "AbortOnUncaughtExceptionCallback"; };
struct _str1309 { constexpr static const char* value = "SetAbortOnUncaughtExceptionCallback"; };
struct _str1310 { constexpr static const char* value = "SetHostImportModuleDynamicallyCallback"; };
struct _str1311 { constexpr static const char* value = "SetHostInitializeImportMetaObjectCallback"; };
struct _str1312 { constexpr static const char* value = "SetPrepareStackTraceCallback"; };
struct _str1313 { constexpr static const char* value = "MemoryPressureNotification"; };
struct _str1314 { constexpr static const char* value = "Enter"; };
struct _str1315 { constexpr static const char* value = "Exit"; };
struct _str1316 { constexpr static const char* value = "DumpAndResetStats"; };
struct _str1317 { constexpr static const char* value = "DiscardThreadSpecificMetadata"; };
struct _str1318 { constexpr static const char* value = "SetData"; };
struct _str1319 { constexpr static const char* value = "slot"; };
struct _str1320 { constexpr static const char* value = "GetData"; };
struct _str1321 { constexpr static const char* value = "GetNumberOfDataSlots"; };
struct _str1322 { constexpr static const char* value = "GetDataFromSnapshotOnce"; };
struct _str1323 { constexpr static const char* value = "GetHeapStatistics"; };
struct _str1324 { constexpr static const char* value = "heap_statistics"; };
struct _str1325 { constexpr static const char* value = "NumberOfHeapSpaces"; };
struct _str1326 { constexpr static const char* value = "GetHeapSpaceStatistics"; };
struct _str1327 { constexpr static const char* value = "space_statistics"; };
struct _str1328 { constexpr static const char* value = "NumberOfTrackedHeapObjectTypes"; };
struct _str1329 { constexpr static const char* value = "GetHeapObjectStatisticsAtLastGC"; };
struct _str1330 { constexpr static const char* value = "object_statistics"; };
struct _str1331 { constexpr static const char* value = "type_index"; };
struct _str1332 { constexpr static const char* value = "GetHeapCodeAndMetadataStatistics"; };
struct _str1333 { constexpr static const char* value = "GetStackSample"; };
struct _str1334 { constexpr static const char* value = "state"; };
struct _str1335 { constexpr static const char* value = "frames"; };
struct _str1336 { constexpr static const char* value = "frames_limit"; };
struct _str1337 { constexpr static const char* value = "sample_info"; };
struct _str1338 { constexpr static const char* value = "AdjustAmountOfExternalAllocatedMemory"; };
struct _str1339 { constexpr static const char* value = "change_in_bytes"; };
struct _str1340 { constexpr static const char* value = "NumberOfPhantomHandleResetsSinceLastCall"; };
struct _str1341 { constexpr static const char* value = "GetHeapProfiler"; };
struct _str1342 { constexpr static const char* value = "SetIdle"; };
struct _str1343 { constexpr static const char* value = "is_idle"; };
struct _str1344 { constexpr static const char* value = "GetArrayBufferAllocator"; };
struct _str1345 { constexpr static const char* value = "InContext"; };
struct _str1346 { constexpr static const char* value = "GetCurrentContext"; };
struct _str1347 { constexpr static const char* value = "GetEnteredContext"; };
struct _str1348 { constexpr static const char* value = "GetEnteredOrMicrotaskContext"; };
struct _str1349 { constexpr static const char* value = "GetIncumbentContext"; };
struct _str1350 { constexpr static const char* value = "ThrowException"; };
struct _str1351 { constexpr static const char* value = "GCCallbackWithData"; };
struct _str1352 { constexpr static const char* value = "AddGCPrologueCallback"; };
struct _str1353 { constexpr static const char* value = "gc_type_filter"; };
struct _str1354 { constexpr static const char* value = "RemoveGCPrologueCallback"; };
struct _str1355 { constexpr static const char* value = "SetEmbedderHeapTracer"; };
struct _str1356 { constexpr static const char* value = "tracer"; };
struct _str1357 { constexpr static const char* value = "GetEmbedderHeapTracer"; };
struct _str1358 { constexpr static const char* value = "AtomicsWaitEvent"; };
struct _str1359 { constexpr static const char* value = "kStartWait"; };
struct _str1360 { constexpr static const char* value = "kWokenUp"; };
struct _str1361 { constexpr static const char* value = "kTimedOut"; };
struct _str1362 { constexpr static const char* value = "kTerminatedExecution"; };
struct _str1363 { constexpr static const char* value = "kAPIStopped"; };
struct _str1364 { constexpr static const char* value = "kNotEqual"; };
struct _str1365 { constexpr static const char* value = "AtomicsWaitWakeHandle"; };
struct _str1366 { constexpr static const char* value = "Wake"; };
struct _str1367 { constexpr static const char* value = "AtomicsWaitCallback"; };
struct _str1368 { constexpr static const char* value = "SetAtomicsWaitCallback"; };
struct _str1369 { constexpr static const char* value = "AddGCEpilogueCallback"; };
struct _str1370 { constexpr static const char* value = "RemoveGCEpilogueCallback"; };
struct _str1371 { constexpr static const char* value = "GetExternallyAllocatedMemoryInBytesCallback"; };
struct _str1372 { constexpr static const char* value = "SetGetExternallyAllocatedMemoryInBytesCallback"; };
struct _str1373 { constexpr static const char* value = "TerminateExecution"; };
struct _str1374 { constexpr static const char* value = "IsExecutionTerminating"; };
struct _str1375 { constexpr static const char* value = "CancelTerminateExecution"; };
struct _str1376 { constexpr static const char* value = "RequestInterrupt"; };
struct _str1377 { constexpr static const char* value = "RequestGarbageCollectionForTesting"; };
struct _str1378 { constexpr static const char* value = "SetEventLogger"; };
struct _str1379 { constexpr static const char* value = "AddBeforeCallEnteredCallback"; };
struct _str1380 { constexpr static const char* value = "RemoveBeforeCallEnteredCallback"; };
struct _str1381 { constexpr static const char* value = "AddCallCompletedCallback"; };
struct _str1382 { constexpr static const char* value = "RemoveCallCompletedCallback"; };
struct _str1383 { constexpr static const char* value = "SetPromiseHook"; };
struct _str1384 { constexpr static const char* value = "hook"; };
struct _str1385 { constexpr static const char* value = "SetPromiseRejectCallback"; };
struct _str1386 { constexpr static const char* value = "RunMicrotasks"; };
struct _str1387 { constexpr static const char* value = "SetMicrotasksPolicy"; };
struct _str1388 { constexpr static const char* value = "GetMicrotasksPolicy"; };
struct _str1389 { constexpr static const char* value = "SetUseCounterCallback"; };
struct _str1390 { constexpr static const char* value = "SetCounterFunction"; };
struct _str1391 { constexpr static const char* value = "SetCreateHistogramFunction"; };
struct _str1392 { constexpr static const char* value = "SetAddHistogramSampleFunction"; };
struct _str1393 { constexpr static const char* value = "IdleNotificationDeadline"; };
struct _str1394 { constexpr static const char* value = "deadline_in_seconds"; };
struct _str1395 { constexpr static const char* value = "LowMemoryNotification"; };
struct _str1396 { constexpr static const char* value = "ContextDisposedNotification"; };
struct _str1397 { constexpr static const char* value = "dependant_context"; };
struct _str1398 { constexpr static const char* value = "IsolateInForegroundNotification"; };
struct _str1399 { constexpr static const char* value = "IsolateInBackgroundNotification"; };
struct _str1400 { constexpr static const char* value = "EnableMemorySavingsMode"; };
struct _str1401 { constexpr static const char* value = "DisableMemorySavingsMode"; };
struct _str1402 { constexpr static const char* value = "SetRAILMode"; };
struct _str1403 { constexpr static const char* value = "rail_mode"; };
struct _str1404 { constexpr static const char* value = "IncreaseHeapLimitForDebugging"; };
struct _str1405 { constexpr static const char* value = "RestoreOriginalHeapLimit"; };
struct _str1406 { constexpr static const char* value = "IsHeapLimitIncreasedForDebugging"; };
struct _str1407 { constexpr static const char* value = "SetJitCodeEventHandler"; };
struct _str1408 { constexpr static const char* value = "event_handler"; };
struct _str1409 { constexpr static const char* value = "SetStackLimit"; };
struct _str1410 { constexpr static const char* value = "GetCodeRange"; };
struct _str1411 { constexpr static const char* value = "GetUnwindState"; };
struct _str1412 { constexpr static const char* value = "SetFatalErrorHandler"; };
struct _str1413 { constexpr static const char* value = "SetOOMErrorHandler"; };
struct _str1414 { constexpr static const char* value = "AddNearHeapLimitCallback"; };
struct _str1415 { constexpr static const char* value = "RemoveNearHeapLimitCallback"; };
struct _str1416 { constexpr static const char* value = "heap_limit"; };
struct _str1417 { constexpr static const char* value = "AutomaticallyRestoreInitialHeapLimit"; };
struct _str1418 { constexpr static const char* value = "threshold_percent"; };
struct _str1419 { constexpr static const char* value = "SetAllowCodeGenerationFromStringsCallback"; };
struct _str1420 { constexpr static const char* value = "SetAllowWasmCodeGenerationCallback"; };
struct _str1421 { constexpr static const char* value = "SetWasmModuleCallback"; };
struct _str1422 { constexpr static const char* value = "SetWasmInstanceCallback"; };
struct _str1423 { constexpr static const char* value = "SetWasmStreamingCallback"; };
struct _str1424 { constexpr static const char* value = "SetWasmThreadsEnabledCallback"; };
struct _str1425 { constexpr static const char* value = "IsDead"; };
struct _str1426 { constexpr static const char* value = "AddMessageListener"; };
struct _str1427 { constexpr static const char* value = "AddMessageListenerWithErrorLevel"; };
struct _str1428 { constexpr static const char* value = "message_levels"; };
struct _str1429 { constexpr static const char* value = "RemoveMessageListeners"; };
struct _str1430 { constexpr static const char* value = "SetFailedAccessCheckCallbackFunction"; };
struct _str1431 { constexpr static const char* value = "SetCaptureStackTraceForUncaughtExceptions"; };
struct _str1432 { constexpr static const char* value = "capture"; };
struct _str1433 { constexpr static const char* value = "VisitExternalResources"; };
struct _str1434 { constexpr static const char* value = "VisitHandlesWithClassIds"; };
struct _str1435 { constexpr static const char* value = "VisitWeakHandles"; };
struct _str1436 { constexpr static const char* value = "IsInUse"; };
struct _str1437 { constexpr static const char* value = "SetAllowAtomicsWait"; };
struct _str1438 { constexpr static const char* value = "allow"; };
struct _str1439 { constexpr static const char* value = "TimeZoneDetection"; };
struct _str1440 { constexpr static const char* value = "kSkip"; };
struct _str1441 { constexpr static const char* value = "kRedetect"; };
struct _str1442 { constexpr static const char* value = "DateTimeConfigurationChangeNotification"; };
struct _str1443 { constexpr static const char* value = "time_zone_detection"; };
struct _str1444 { constexpr static const char* value = "LocaleConfigurationChangeNotification"; };
struct _str1445 { constexpr static const char* value = "~Isolate"; };
struct _str1446 { constexpr static const char* value = "operator new"; };
struct _str1447 { constexpr static const char* value = "operator new[]"; };
struct _str1448 { constexpr static const char* value = "operator delete"; };
struct _str1449 { constexpr static const char* value = "operator delete[]"; };
struct _str1450 { constexpr static const char* value = "CanBeRehashed"; };
struct _str1451 { constexpr static const char* value = "raw_size"; };
struct _str1452 { constexpr static const char* value = "EntropySource"; };
struct _str1453 { constexpr static const char* value = "ReturnAddressLocationResolver"; };
struct _str1454 { constexpr static const char* value = "V8"; };
struct _str1455 { constexpr static const char* value = "SetNativesDataBlob"; };
struct _str1456 { constexpr static const char* value = "startup_blob"; };
struct _str1457 { constexpr static const char* value = "SetSnapshotDataBlob"; };
struct _str1458 { constexpr static const char* value = "SetDcheckErrorHandler"; };
struct _str1459 { constexpr static const char* value = "SetFlagsFromString"; };
struct _str1460 { constexpr static const char* value = "SetFlagsFromCommandLine"; };
struct _str1461 { constexpr static const char* value = "remove_flags"; };
struct _str1462 { constexpr static const char* value = "GetVersion"; };
struct _str1463 { constexpr static const char* value = "SetEntropySource"; };
struct _str1464 { constexpr static const char* value = "SetReturnAddressLocationResolver"; };
struct _str1465 { constexpr static const char* value = "return_address_resolver"; };
struct _str1466 { constexpr static const char* value = "InitializeICU"; };
struct _str1467 { constexpr static const char* value = "icu_data_file"; };
struct _str1468 { constexpr static const char* value = "InitializeICUDefaultLocation"; };
struct _str1469 { constexpr static const char* value = "exec_path"; };
struct _str1470 { constexpr static const char* value = "InitializeExternalStartupData"; };
struct _str1471 { constexpr static const char* value = "directory_path"; };
struct _str1472 { constexpr static const char* value = "natives_blob"; };
struct _str1473 { constexpr static const char* value = "InitializePlatform"; };
struct _str1474 { constexpr static const char* value = "platform"; };
struct _str1475 { constexpr static const char* value = "ShutdownPlatform"; };
struct _str1476 { constexpr static const char* value = "EnableWebAssemblyTrapHandler"; };
struct _str1477 { constexpr static const char* value = "use_v8_signal_handler"; };
struct _str1478 { constexpr static const char* value = "SetUnhandledExceptionCallback"; };
struct _str1479 { constexpr static const char* value = "unhandled_exception_callback"; };
struct _str1480 { constexpr static const char* value = "SnapshotCreator"; };
struct _str1481 { constexpr static const char* value = "FunctionCodeHandling"; };
struct _str1482 { constexpr static const char* value = "kClear"; };
struct _str1483 { constexpr static const char* value = "kKeep"; };
struct _str1484 { constexpr static const char* value = "existing_blob"; };
struct _str1485 { constexpr static const char* value = "~SnapshotCreator"; };
struct _str1486 { constexpr static const char* value = "SetDefaultContext"; };
struct _str1487 { constexpr static const char* value = "AddContext"; };
struct _str1488 { constexpr static const char* value = "AddTemplate"; };
struct _str1489 { constexpr static const char* value = "template_obj"; };
struct _str1490 { constexpr static const char* value = "AddData"; };
struct _str1491 { constexpr static const char* value = "CreateBlob"; };
struct _str1492 { constexpr static const char* value = "function_code_handling"; };
struct _str1493 { constexpr static const char* value = "IsNothing"; };
struct _str1494 { constexpr static const char* value = "IsJust"; };
struct _str1495 { constexpr static const char* value = "ToChecked"; };
struct _str1496 { constexpr static const char* value = "Check"; };
struct _str1497 { constexpr static const char* value = "To"; };
struct _str1498 { constexpr static const char* value = "FromJust"; };
struct _str1499 { constexpr static const char* value = "Nothing"; };
struct _str1500 { constexpr static const char* value = "Just"; };
struct _str1501 { constexpr static const char* value = "t"; };
struct _str1502 { constexpr static const char* value = "~Maybe"; };
struct _str1503 { constexpr static const char* value = "JustVoid"; };
struct _str1504 { constexpr static const char* value = "TryCatch"; };
struct _str1505 { constexpr static const char* value = "~TryCatch"; };
struct _str1506 { constexpr static const char* value = "HasCaught"; };
struct _str1507 { constexpr static const char* value = "CanContinue"; };
struct _str1508 { constexpr static const char* value = "HasTerminated"; };
struct _str1509 { constexpr static const char* value = "ReThrow"; };
struct _str1510 { constexpr static const char* value = "SetVerbose"; };
struct _str1511 { constexpr static const char* value = "IsVerbose"; };
struct _str1512 { constexpr static const char* value = "SetCaptureMessage"; };
struct _str1513 { constexpr static const char* value = "JSStackComparableAddress"; };
struct _str1514 { constexpr static const char* value = "ExtensionConfiguration"; };
struct _str1515 { constexpr static const char* value = "name_count"; };
struct _str1516 { constexpr static const char* value = "begin"; };
struct _str1517 { constexpr static const char* value = "end"; };
struct _str1518 { constexpr static const char* value = "DetachGlobal"; };
struct _str1519 { constexpr static const char* value = "extensions"; };
struct _str1520 { constexpr static const char* value = "global_template"; };
struct _str1521 { constexpr static const char* value = "global_object"; };
struct _str1522 { constexpr static const char* value = "internal_fields_deserializer"; };
struct _str1523 { constexpr static const char* value = "context_snapshot_index"; };
struct _str1524 { constexpr static const char* value = "embedder_fields_deserializer"; };
struct _str1525 { constexpr static const char* value = "NewRemoteContext"; };
struct _str1526 { constexpr static const char* value = "SetSecurityToken"; };
struct _str1527 { constexpr static const char* value = "token"; };
struct _str1528 { constexpr static const char* value = "UseDefaultSecurityToken"; };
struct _str1529 { constexpr static const char* value = "GetSecurityToken"; };
struct _str1530 { constexpr static const char* value = "EmbedderDataFields"; };
struct _str1531 { constexpr static const char* value = "kDebugIdIndex"; };
struct _str1532 { constexpr static const char* value = "GetNumberOfEmbedderDataFields"; };
struct _str1533 { constexpr static const char* value = "GetEmbedderData"; };
struct _str1534 { constexpr static const char* value = "GetExtrasBindingObject"; };
struct _str1535 { constexpr static const char* value = "SetEmbedderData"; };
struct _str1536 { constexpr static const char* value = "GetAlignedPointerFromEmbedderData"; };
struct _str1537 { constexpr static const char* value = "SetAlignedPointerInEmbedderData"; };
struct _str1538 { constexpr static const char* value = "AllowCodeGenerationFromStrings"; };
struct _str1539 { constexpr static const char* value = "IsCodeGenerationFromStringsAllowed"; };
struct _str1540 { constexpr static const char* value = "SetErrorMessageForCodeGenerationFromStrings"; };
struct _str1541 { constexpr static const char* value = "AbortScriptExecutionCallback"; };
struct _str1542 { constexpr static const char* value = "SetAbortScriptExecution"; };
struct _str1543 { constexpr static const char* value = "BackupIncumbentScope"; };
struct _str1544 { constexpr static const char* value = "backup_incumbent_context"; };
struct _str1545 { constexpr static const char* value = "~BackupIncumbentScope"; };
struct _str1546 { constexpr static const char* value = "Unlocker"; };
struct _str1547 { constexpr static const char* value = "~Unlocker"; };
struct _str1548 { constexpr static const char* value = "Locker"; };
struct _str1549 { constexpr static const char* value = "~Locker"; };
struct _str1550 { constexpr static const char* value = "IsLocked"; };
struct _str1551 { constexpr static const char* value = "IsActive"; };
struct _str1552 { constexpr static const char* value = "Unwinder"; };
struct _str1553 { constexpr static const char* value = "TryUnwindV8Frames"; };
struct _str1554 { constexpr static const char* value = "unwind_state"; };
struct _str1555 { constexpr static const char* value = "register_state"; };
struct _str1556 { constexpr static const char* value = "stack_base"; };
struct _str1557 { constexpr static const char* value = "PCIsInV8"; };

struct _ast1; // NamespaceDecl v8
struct _ast2; // CXXRecordDecl Context
struct _ast3; // CXXRecordDecl Data
struct _ast4; // CXXRecordDecl Isolate
struct _ast5; // CXXRecordDecl AccessorSignature
struct _ast6; // CXXRecordDecl Array
struct _ast7; // CXXRecordDecl ArrayBuffer
struct _ast8; // CXXRecordDecl BigInt
struct _ast9; // CXXRecordDecl BigIntObject
struct _ast10; // CXXRecordDecl Boolean
struct _ast11; // CXXRecordDecl BooleanObject
struct _ast12; // CXXRecordDecl Date
struct _ast13; // CXXRecordDecl External
struct _ast14; // CXXRecordDecl Function
struct _ast15; // CXXRecordDecl FunctionTemplate
struct _ast16; // CXXRecordDecl HeapProfiler
struct _ast17; // CXXRecordDecl ImplementationUtilities
struct _ast18; // CXXRecordDecl Int32
struct _ast19; // CXXRecordDecl Integer
struct _ast20; // ClassTemplateDecl Maybe
struct _ast21; // TemplateTypeParmDecl T
struct _ast22; // CXXRecordDecl Maybe
struct _ast23; // ClassTemplateSpecializationDecl Maybe
struct _ast24; // ClassTemplateSpecializationDecl Maybe
struct _ast25; // ClassTemplateSpecializationDecl Maybe
struct _ast26; // ClassTemplateSpecializationDecl Maybe
struct _ast27; // ClassTemplateSpecializationDecl Maybe
struct _ast28; // ClassTemplateSpecializationDecl Maybe
struct _ast29; // CXXRecordDecl MicrotaskQueue
struct _ast30; // CXXRecordDecl Name
struct _ast31; // CXXRecordDecl Number
struct _ast32; // CXXRecordDecl NumberObject
struct _ast33; // CXXRecordDecl Object
struct _ast34; // CXXRecordDecl ObjectOperationDescriptor
struct _ast35; // CXXRecordDecl ObjectTemplate
struct _ast36; // CXXRecordDecl Platform
struct _ast37; // CXXRecordDecl Primitive
struct _ast38; // CXXRecordDecl Promise
struct _ast39; // CXXRecordDecl PropertyDescriptor
struct _ast40; // CXXRecordDecl Proxy
struct _ast41; // CXXRecordDecl RawOperationDescriptor
struct _ast42; // CXXRecordDecl Script
struct _ast43; // CXXRecordDecl SharedArrayBuffer
struct _ast44; // CXXRecordDecl Signature
struct _ast45; // CXXRecordDecl StartupData
struct _ast46; // CXXRecordDecl StackFrame
struct _ast47; // CXXRecordDecl StackTrace
struct _ast48; // CXXRecordDecl String
struct _ast49; // CXXRecordDecl StringObject
struct _ast50; // CXXRecordDecl Symbol
struct _ast51; // CXXRecordDecl SymbolObject
struct _ast52; // CXXRecordDecl PrimitiveArray
struct _ast53; // CXXRecordDecl Private
struct _ast54; // CXXRecordDecl Uint32
struct _ast55; // CXXRecordDecl Utils
struct _ast56; // CXXRecordDecl Value
struct _ast57; // CXXRecordDecl WasmModuleObject
struct _ast58; // ClassTemplateDecl Local
struct _ast59; // TemplateTypeParmDecl T
struct _ast60; // CXXRecordDecl Local
struct _ast61; // ClassTemplateSpecializationDecl Local
struct _ast62; // CXXConstructorDecl Local
struct _ast63; // FunctionProtoType void ()
struct _ast64; // BuiltinType void
struct _ast65; // PointerType v8::Local<v8::Primitive> *
struct _ast66; // RecordType v8::Local<v8::Primitive>
struct _ast67; // FunctionTemplateDecl Local
struct _ast68; // TemplateTypeParmDecl S
struct _ast69; // CXXConstructorDecl Local
struct _ast70; // ParmVarDecl that
struct _ast71; // FunctionProtoType void (Local<S>)
struct _ast72; // TemplateSpecializationType Local<S>
struct _ast73; // CXXConstructorDecl Local
struct _ast74; // ParmVarDecl that
struct _ast75; // FunctionProtoType void (Local<v8::Primitive>)
struct _ast76; // TemplateSpecializationType Local<v8::Primitive>
struct _ast77; // CXXMethodDecl IsEmpty
struct _ast78; // FunctionProtoType bool () const
struct _ast79; // BuiltinType bool
struct _ast80; // PointerType const v8::Local<v8::Primitive> *
struct _ast81; // RecordType const v8::Local<v8::Primitive>
struct _ast82; // CXXMethodDecl Clear
struct _ast83; // CXXMethodDecl operator->
struct _ast84; // FunctionProtoType v8::Primitive *() const
struct _ast85; // PointerType v8::Primitive *
struct _ast86; // SubstTemplateTypeParmType v8::Primitive
struct _ast87; // CXXMethodDecl operator*
struct _ast88; // FunctionTemplateDecl operator==
struct _ast89; // TemplateTypeParmDecl S
struct _ast90; // CXXMethodDecl operator==
struct _ast91; // ParmVarDecl that
struct _ast92; // FunctionProtoType bool (const Local<S> &) const
struct _ast93; // LValueReferenceType const Local<S> &
struct _ast94; // TemplateSpecializationType const Local<S>
struct _ast95; // TemplateSpecializationType Local<S>
struct _ast96; // FunctionTemplateDecl operator==
struct _ast97; // TemplateTypeParmDecl S
struct _ast98; // CXXMethodDecl operator==
struct _ast99; // ParmVarDecl that
struct _ast100; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast101; // LValueReferenceType const PersistentBase<S> &
struct _ast102; // TemplateSpecializationType const PersistentBase<S>
struct _ast103; // TemplateSpecializationType PersistentBase<S>
struct _ast104; // FunctionTemplateDecl operator!=
struct _ast105; // TemplateTypeParmDecl S
struct _ast106; // CXXMethodDecl operator!=
struct _ast107; // ParmVarDecl that
struct _ast108; // FunctionProtoType bool (const Local<S> &) const
struct _ast109; // LValueReferenceType const Local<S> &
struct _ast110; // TemplateSpecializationType const Local<S>
struct _ast111; // TemplateSpecializationType Local<S>
struct _ast112; // FunctionTemplateDecl operator!=
struct _ast113; // TemplateTypeParmDecl S
struct _ast114; // CXXMethodDecl operator!=
struct _ast115; // ParmVarDecl that
struct _ast116; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast117; // LValueReferenceType const Persistent<S> &
struct _ast118; // TemplateSpecializationType const Persistent<S>
struct _ast119; // TemplateSpecializationType Persistent<S>
struct _ast120; // FunctionTemplateDecl Cast
struct _ast121; // TemplateTypeParmDecl S
struct _ast122; // CXXMethodDecl Cast
struct _ast123; // ParmVarDecl that
struct _ast124; // FunctionProtoType Local<v8::Primitive> (Local<S>)
struct _ast125; // TemplateSpecializationType Local<S>
struct _ast126; // TemplateSpecializationType Local<v8::Primitive>
struct _ast127; // FunctionTemplateDecl As
struct _ast128; // TemplateTypeParmDecl S
struct _ast129; // CXXMethodDecl As
struct _ast130; // FunctionProtoType Local<S> () const
struct _ast131; // TemplateSpecializationType Local<S>
struct _ast132; // CXXMethodDecl New
struct _ast133; // ParmVarDecl isolate
struct _ast134; // ParmVarDecl that
struct _ast135; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
struct _ast136; // PointerType v8::Isolate *
struct _ast137; // RecordType v8::Isolate
struct _ast138; // TemplateSpecializationType Local<v8::Primitive>
struct _ast139; // TemplateSpecializationType Local<v8::Primitive>
struct _ast140; // CXXMethodDecl New
struct _ast141; // ParmVarDecl isolate
struct _ast142; // ParmVarDecl that
struct _ast143; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
struct _ast144; // LValueReferenceType const PersistentBase<v8::Primitive> &
struct _ast145; // TemplateSpecializationType const PersistentBase<v8::Primitive>
struct _ast146; // TemplateSpecializationType PersistentBase<v8::Primitive>
struct _ast147; // TemplateSpecializationType Local<v8::Primitive>
struct _ast148; // CXXMethodDecl New
struct _ast149; // ParmVarDecl isolate
struct _ast150; // ParmVarDecl that
struct _ast151; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
struct _ast152; // LValueReferenceType const TracedGlobal<v8::Primitive> &
struct _ast153; // TemplateSpecializationType const TracedGlobal<v8::Primitive>
struct _ast154; // TemplateSpecializationType TracedGlobal<v8::Primitive>
struct _ast155; // TemplateSpecializationType Local<v8::Primitive>
struct _ast156; // CXXConstructorDecl Local
struct _ast157; // ParmVarDecl 
struct _ast158; // FunctionProtoType void (const v8::Local<v8::Primitive> &)
struct _ast159; // LValueReferenceType const v8::Local<v8::Primitive> &
struct _ast160; // CXXConstructorDecl Local
struct _ast161; // ParmVarDecl 
struct _ast162; // FunctionProtoType void (v8::Local<v8::Primitive> &&) noexcept
struct _ast163; // RValueReferenceType v8::Local<v8::Primitive> &&
struct _ast164; // CXXDestructorDecl ~Local
struct _ast165; // FunctionProtoType void () noexcept
struct _ast166; // ClassTemplateSpecializationDecl Local
struct _ast167; // CXXConstructorDecl Local
struct _ast168; // PointerType v8::Local<v8::Boolean> *
struct _ast169; // RecordType v8::Local<v8::Boolean>
struct _ast170; // FunctionTemplateDecl Local
struct _ast171; // TemplateTypeParmDecl S
struct _ast172; // CXXConstructorDecl Local
struct _ast173; // ParmVarDecl that
struct _ast174; // FunctionProtoType void (Local<S>)
struct _ast175; // TemplateSpecializationType Local<S>
struct _ast176; // CXXConstructorDecl Local
struct _ast177; // ParmVarDecl that
struct _ast178; // FunctionProtoType void (Local<v8::Boolean>)
struct _ast179; // TemplateSpecializationType Local<v8::Boolean>
struct _ast180; // CXXMethodDecl IsEmpty
struct _ast181; // PointerType const v8::Local<v8::Boolean> *
struct _ast182; // RecordType const v8::Local<v8::Boolean>
struct _ast183; // CXXMethodDecl Clear
struct _ast184; // CXXMethodDecl operator->
struct _ast185; // FunctionProtoType v8::Boolean *() const
struct _ast186; // PointerType v8::Boolean *
struct _ast187; // SubstTemplateTypeParmType v8::Boolean
struct _ast188; // CXXMethodDecl operator*
struct _ast189; // FunctionTemplateDecl operator==
struct _ast190; // TemplateTypeParmDecl S
struct _ast191; // CXXMethodDecl operator==
struct _ast192; // ParmVarDecl that
struct _ast193; // FunctionProtoType bool (const Local<S> &) const
struct _ast194; // LValueReferenceType const Local<S> &
struct _ast195; // TemplateSpecializationType const Local<S>
struct _ast196; // TemplateSpecializationType Local<S>
struct _ast197; // FunctionTemplateDecl operator==
struct _ast198; // TemplateTypeParmDecl S
struct _ast199; // CXXMethodDecl operator==
struct _ast200; // ParmVarDecl that
struct _ast201; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast202; // LValueReferenceType const PersistentBase<S> &
struct _ast203; // TemplateSpecializationType const PersistentBase<S>
struct _ast204; // TemplateSpecializationType PersistentBase<S>
struct _ast205; // FunctionTemplateDecl operator!=
struct _ast206; // TemplateTypeParmDecl S
struct _ast207; // CXXMethodDecl operator!=
struct _ast208; // ParmVarDecl that
struct _ast209; // FunctionProtoType bool (const Local<S> &) const
struct _ast210; // LValueReferenceType const Local<S> &
struct _ast211; // TemplateSpecializationType const Local<S>
struct _ast212; // TemplateSpecializationType Local<S>
struct _ast213; // FunctionTemplateDecl operator!=
struct _ast214; // TemplateTypeParmDecl S
struct _ast215; // CXXMethodDecl operator!=
struct _ast216; // ParmVarDecl that
struct _ast217; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast218; // LValueReferenceType const Persistent<S> &
struct _ast219; // TemplateSpecializationType const Persistent<S>
struct _ast220; // TemplateSpecializationType Persistent<S>
struct _ast221; // FunctionTemplateDecl Cast
struct _ast222; // TemplateTypeParmDecl S
struct _ast223; // CXXMethodDecl Cast
struct _ast224; // ParmVarDecl that
struct _ast225; // FunctionProtoType Local<v8::Boolean> (Local<S>)
struct _ast226; // TemplateSpecializationType Local<S>
struct _ast227; // TemplateSpecializationType Local<v8::Boolean>
struct _ast228; // FunctionTemplateDecl As
struct _ast229; // TemplateTypeParmDecl S
struct _ast230; // CXXMethodDecl As
struct _ast231; // FunctionProtoType Local<S> () const
struct _ast232; // TemplateSpecializationType Local<S>
struct _ast233; // CXXMethodDecl New
struct _ast234; // ParmVarDecl isolate
struct _ast235; // ParmVarDecl that
struct _ast236; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _ast237; // TemplateSpecializationType Local<v8::Boolean>
struct _ast238; // TemplateSpecializationType Local<v8::Boolean>
struct _ast239; // CXXMethodDecl New
struct _ast240; // ParmVarDecl isolate
struct _ast241; // ParmVarDecl that
struct _ast242; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
struct _ast243; // LValueReferenceType const PersistentBase<v8::Boolean> &
struct _ast244; // TemplateSpecializationType const PersistentBase<v8::Boolean>
struct _ast245; // TemplateSpecializationType PersistentBase<v8::Boolean>
struct _ast246; // TemplateSpecializationType Local<v8::Boolean>
struct _ast247; // CXXMethodDecl New
struct _ast248; // ParmVarDecl isolate
struct _ast249; // ParmVarDecl that
struct _ast250; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
struct _ast251; // LValueReferenceType const TracedGlobal<v8::Boolean> &
struct _ast252; // TemplateSpecializationType const TracedGlobal<v8::Boolean>
struct _ast253; // TemplateSpecializationType TracedGlobal<v8::Boolean>
struct _ast254; // TemplateSpecializationType Local<v8::Boolean>
struct _ast255; // CXXConstructorDecl Local
struct _ast256; // ParmVarDecl 
struct _ast257; // FunctionProtoType void (const v8::Local<v8::Boolean> &)
struct _ast258; // LValueReferenceType const v8::Local<v8::Boolean> &
struct _ast259; // CXXConstructorDecl Local
struct _ast260; // ParmVarDecl 
struct _ast261; // FunctionProtoType void (v8::Local<v8::Boolean> &&) noexcept
struct _ast262; // RValueReferenceType v8::Local<v8::Boolean> &&
struct _ast263; // CXXDestructorDecl ~Local
struct _ast264; // ClassTemplateSpecializationDecl Local
struct _ast265; // CXXConstructorDecl Local
struct _ast266; // PointerType v8::Local<v8::Value> *
struct _ast267; // RecordType v8::Local<v8::Value>
struct _ast268; // FunctionTemplateDecl Local
struct _ast269; // TemplateTypeParmDecl S
struct _ast270; // CXXConstructorDecl Local
struct _ast271; // ParmVarDecl that
struct _ast272; // FunctionProtoType void (Local<S>)
struct _ast273; // TemplateSpecializationType Local<S>
struct _ast274; // CXXConstructorDecl Local
struct _ast275; // ParmVarDecl that
struct _ast276; // FunctionProtoType void (Local<v8::Value>)
struct _ast277; // TemplateSpecializationType Local<v8::Value>
struct _ast278; // CXXMethodDecl IsEmpty
struct _ast279; // PointerType const v8::Local<v8::Value> *
struct _ast280; // RecordType const v8::Local<v8::Value>
struct _ast281; // CXXMethodDecl Clear
struct _ast282; // CXXMethodDecl operator->
struct _ast283; // FunctionProtoType v8::Value *() const
struct _ast284; // PointerType v8::Value *
struct _ast285; // SubstTemplateTypeParmType v8::Value
struct _ast286; // CXXMethodDecl operator*
struct _ast287; // FunctionTemplateDecl operator==
struct _ast288; // TemplateTypeParmDecl S
struct _ast289; // CXXMethodDecl operator==
struct _ast290; // ParmVarDecl that
struct _ast291; // FunctionProtoType bool (const Local<S> &) const
struct _ast292; // LValueReferenceType const Local<S> &
struct _ast293; // TemplateSpecializationType const Local<S>
struct _ast294; // TemplateSpecializationType Local<S>
struct _ast295; // FunctionTemplateDecl operator==
struct _ast296; // TemplateTypeParmDecl S
struct _ast297; // CXXMethodDecl operator==
struct _ast298; // ParmVarDecl that
struct _ast299; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast300; // LValueReferenceType const PersistentBase<S> &
struct _ast301; // TemplateSpecializationType const PersistentBase<S>
struct _ast302; // TemplateSpecializationType PersistentBase<S>
struct _ast303; // FunctionTemplateDecl operator!=
struct _ast304; // TemplateTypeParmDecl S
struct _ast305; // CXXMethodDecl operator!=
struct _ast306; // ParmVarDecl that
struct _ast307; // FunctionProtoType bool (const Local<S> &) const
struct _ast308; // LValueReferenceType const Local<S> &
struct _ast309; // TemplateSpecializationType const Local<S>
struct _ast310; // TemplateSpecializationType Local<S>
struct _ast311; // FunctionTemplateDecl operator!=
struct _ast312; // TemplateTypeParmDecl S
struct _ast313; // CXXMethodDecl operator!=
struct _ast314; // ParmVarDecl that
struct _ast315; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast316; // LValueReferenceType const Persistent<S> &
struct _ast317; // TemplateSpecializationType const Persistent<S>
struct _ast318; // TemplateSpecializationType Persistent<S>
struct _ast319; // FunctionTemplateDecl Cast
struct _ast320; // TemplateTypeParmDecl S
struct _ast321; // CXXMethodDecl Cast
struct _ast322; // ParmVarDecl that
struct _ast323; // FunctionProtoType Local<v8::Value> (Local<S>)
struct _ast324; // TemplateSpecializationType Local<S>
struct _ast325; // TemplateSpecializationType Local<v8::Value>
struct _ast326; // FunctionTemplateDecl As
struct _ast327; // TemplateTypeParmDecl S
struct _ast328; // CXXMethodDecl As
struct _ast329; // FunctionProtoType Local<S> () const
struct _ast330; // TemplateSpecializationType Local<S>
struct _ast331; // CXXMethodDecl New
struct _ast332; // ParmVarDecl isolate
struct _ast333; // ParmVarDecl that
struct _ast334; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _ast335; // TemplateSpecializationType Local<v8::Value>
struct _ast336; // TemplateSpecializationType Local<v8::Value>
struct _ast337; // CXXMethodDecl New
struct _ast338; // ParmVarDecl isolate
struct _ast339; // ParmVarDecl that
struct _ast340; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
struct _ast341; // LValueReferenceType const PersistentBase<v8::Value> &
struct _ast342; // TemplateSpecializationType const PersistentBase<v8::Value>
struct _ast343; // TemplateSpecializationType PersistentBase<v8::Value>
struct _ast344; // TemplateSpecializationType Local<v8::Value>
struct _ast345; // CXXMethodDecl New
struct _ast346; // ParmVarDecl isolate
struct _ast347; // ParmVarDecl that
struct _ast348; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
struct _ast349; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast350; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast351; // TemplateSpecializationType TracedGlobal<v8::Value>
struct _ast352; // TemplateSpecializationType Local<v8::Value>
struct _ast353; // CXXConstructorDecl Local
struct _ast354; // ParmVarDecl 
struct _ast355; // FunctionProtoType void (const v8::Local<v8::Value> &) noexcept
struct _ast356; // LValueReferenceType const v8::Local<v8::Value> &
struct _ast357; // CXXConstructorDecl Local
struct _ast358; // ParmVarDecl 
struct _ast359; // FunctionProtoType void (v8::Local<v8::Value> &&) noexcept
struct _ast360; // RValueReferenceType v8::Local<v8::Value> &&
struct _ast361; // CXXDestructorDecl ~Local
struct _ast362; // CXXMethodDecl operator=
struct _ast363; // ParmVarDecl 
struct _ast364; // FunctionProtoType v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _ast365; // LValueReferenceType v8::Local<v8::Value> &
struct _ast366; // CXXMethodDecl operator=
struct _ast367; // ParmVarDecl 
struct _ast368; // FunctionProtoType v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _ast369; // ClassTemplateSpecializationDecl Local
struct _ast370; // CXXConstructorDecl Local
struct _ast371; // PointerType v8::Local<v8::PrimitiveArray> *
struct _ast372; // RecordType v8::Local<v8::PrimitiveArray>
struct _ast373; // FunctionTemplateDecl Local
struct _ast374; // TemplateTypeParmDecl S
struct _ast375; // CXXConstructorDecl Local
struct _ast376; // ParmVarDecl that
struct _ast377; // FunctionProtoType void (Local<S>)
struct _ast378; // TemplateSpecializationType Local<S>
struct _ast379; // CXXConstructorDecl Local
struct _ast380; // ParmVarDecl that
struct _ast381; // FunctionProtoType void (Local<v8::PrimitiveArray>)
struct _ast382; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast383; // CXXMethodDecl IsEmpty
struct _ast384; // PointerType const v8::Local<v8::PrimitiveArray> *
struct _ast385; // RecordType const v8::Local<v8::PrimitiveArray>
struct _ast386; // CXXMethodDecl Clear
struct _ast387; // CXXMethodDecl operator->
struct _ast388; // FunctionProtoType v8::PrimitiveArray *() const
struct _ast389; // PointerType v8::PrimitiveArray *
struct _ast390; // SubstTemplateTypeParmType v8::PrimitiveArray
struct _ast391; // CXXMethodDecl operator*
struct _ast392; // FunctionTemplateDecl operator==
struct _ast393; // TemplateTypeParmDecl S
struct _ast394; // CXXMethodDecl operator==
struct _ast395; // ParmVarDecl that
struct _ast396; // FunctionProtoType bool (const Local<S> &) const
struct _ast397; // LValueReferenceType const Local<S> &
struct _ast398; // TemplateSpecializationType const Local<S>
struct _ast399; // TemplateSpecializationType Local<S>
struct _ast400; // FunctionTemplateDecl operator==
struct _ast401; // TemplateTypeParmDecl S
struct _ast402; // CXXMethodDecl operator==
struct _ast403; // ParmVarDecl that
struct _ast404; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast405; // LValueReferenceType const PersistentBase<S> &
struct _ast406; // TemplateSpecializationType const PersistentBase<S>
struct _ast407; // TemplateSpecializationType PersistentBase<S>
struct _ast408; // FunctionTemplateDecl operator!=
struct _ast409; // TemplateTypeParmDecl S
struct _ast410; // CXXMethodDecl operator!=
struct _ast411; // ParmVarDecl that
struct _ast412; // FunctionProtoType bool (const Local<S> &) const
struct _ast413; // LValueReferenceType const Local<S> &
struct _ast414; // TemplateSpecializationType const Local<S>
struct _ast415; // TemplateSpecializationType Local<S>
struct _ast416; // FunctionTemplateDecl operator!=
struct _ast417; // TemplateTypeParmDecl S
struct _ast418; // CXXMethodDecl operator!=
struct _ast419; // ParmVarDecl that
struct _ast420; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast421; // LValueReferenceType const Persistent<S> &
struct _ast422; // TemplateSpecializationType const Persistent<S>
struct _ast423; // TemplateSpecializationType Persistent<S>
struct _ast424; // FunctionTemplateDecl Cast
struct _ast425; // TemplateTypeParmDecl S
struct _ast426; // CXXMethodDecl Cast
struct _ast427; // ParmVarDecl that
struct _ast428; // FunctionProtoType Local<v8::PrimitiveArray> (Local<S>)
struct _ast429; // TemplateSpecializationType Local<S>
struct _ast430; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast431; // FunctionTemplateDecl As
struct _ast432; // TemplateTypeParmDecl S
struct _ast433; // CXXMethodDecl As
struct _ast434; // FunctionProtoType Local<S> () const
struct _ast435; // TemplateSpecializationType Local<S>
struct _ast436; // CXXMethodDecl New
struct _ast437; // ParmVarDecl isolate
struct _ast438; // ParmVarDecl that
struct _ast439; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
struct _ast440; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast441; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast442; // CXXMethodDecl New
struct _ast443; // ParmVarDecl isolate
struct _ast444; // ParmVarDecl that
struct _ast445; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
struct _ast446; // LValueReferenceType const PersistentBase<v8::PrimitiveArray> &
struct _ast447; // TemplateSpecializationType const PersistentBase<v8::PrimitiveArray>
struct _ast448; // TemplateSpecializationType PersistentBase<v8::PrimitiveArray>
struct _ast449; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast450; // CXXMethodDecl New
struct _ast451; // ParmVarDecl isolate
struct _ast452; // ParmVarDecl that
struct _ast453; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
struct _ast454; // LValueReferenceType const TracedGlobal<v8::PrimitiveArray> &
struct _ast455; // TemplateSpecializationType const TracedGlobal<v8::PrimitiveArray>
struct _ast456; // TemplateSpecializationType TracedGlobal<v8::PrimitiveArray>
struct _ast457; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast458; // CXXConstructorDecl Local
struct _ast459; // ParmVarDecl 
struct _ast460; // FunctionProtoType void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _ast461; // LValueReferenceType const v8::Local<v8::PrimitiveArray> &
struct _ast462; // CXXConstructorDecl Local
struct _ast463; // ParmVarDecl 
struct _ast464; // FunctionProtoType void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _ast465; // RValueReferenceType v8::Local<v8::PrimitiveArray> &&
struct _ast466; // CXXDestructorDecl ~Local
struct _ast467; // CXXMethodDecl operator=
struct _ast468; // ParmVarDecl 
struct _ast469; // FunctionProtoType v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
struct _ast470; // LValueReferenceType v8::Local<v8::PrimitiveArray> &
struct _ast471; // CXXMethodDecl operator=
struct _ast472; // ParmVarDecl 
struct _ast473; // FunctionProtoType v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
struct _ast474; // ClassTemplateSpecializationDecl Local
struct _ast475; // CXXConstructorDecl Local
struct _ast476; // PointerType v8::Local<v8::Integer> *
struct _ast477; // RecordType v8::Local<v8::Integer>
struct _ast478; // FunctionTemplateDecl Local
struct _ast479; // TemplateTypeParmDecl S
struct _ast480; // CXXConstructorDecl Local
struct _ast481; // ParmVarDecl that
struct _ast482; // FunctionProtoType void (Local<S>)
struct _ast483; // TemplateSpecializationType Local<S>
struct _ast484; // CXXConstructorDecl Local
struct _ast485; // ParmVarDecl that
struct _ast486; // FunctionProtoType void (Local<v8::Integer>)
struct _ast487; // TemplateSpecializationType Local<v8::Integer>
struct _ast488; // CXXMethodDecl IsEmpty
struct _ast489; // PointerType const v8::Local<v8::Integer> *
struct _ast490; // RecordType const v8::Local<v8::Integer>
struct _ast491; // CXXMethodDecl Clear
struct _ast492; // CXXMethodDecl operator->
struct _ast493; // FunctionProtoType v8::Integer *() const
struct _ast494; // PointerType v8::Integer *
struct _ast495; // SubstTemplateTypeParmType v8::Integer
struct _ast496; // CXXMethodDecl operator*
struct _ast497; // FunctionTemplateDecl operator==
struct _ast498; // TemplateTypeParmDecl S
struct _ast499; // CXXMethodDecl operator==
struct _ast500; // ParmVarDecl that
struct _ast501; // FunctionProtoType bool (const Local<S> &) const
struct _ast502; // LValueReferenceType const Local<S> &
struct _ast503; // TemplateSpecializationType const Local<S>
struct _ast504; // TemplateSpecializationType Local<S>
struct _ast505; // FunctionTemplateDecl operator==
struct _ast506; // TemplateTypeParmDecl S
struct _ast507; // CXXMethodDecl operator==
struct _ast508; // ParmVarDecl that
struct _ast509; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast510; // LValueReferenceType const PersistentBase<S> &
struct _ast511; // TemplateSpecializationType const PersistentBase<S>
struct _ast512; // TemplateSpecializationType PersistentBase<S>
struct _ast513; // FunctionTemplateDecl operator!=
struct _ast514; // TemplateTypeParmDecl S
struct _ast515; // CXXMethodDecl operator!=
struct _ast516; // ParmVarDecl that
struct _ast517; // FunctionProtoType bool (const Local<S> &) const
struct _ast518; // LValueReferenceType const Local<S> &
struct _ast519; // TemplateSpecializationType const Local<S>
struct _ast520; // TemplateSpecializationType Local<S>
struct _ast521; // FunctionTemplateDecl operator!=
struct _ast522; // TemplateTypeParmDecl S
struct _ast523; // CXXMethodDecl operator!=
struct _ast524; // ParmVarDecl that
struct _ast525; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast526; // LValueReferenceType const Persistent<S> &
struct _ast527; // TemplateSpecializationType const Persistent<S>
struct _ast528; // TemplateSpecializationType Persistent<S>
struct _ast529; // FunctionTemplateDecl Cast
struct _ast530; // TemplateTypeParmDecl S
struct _ast531; // CXXMethodDecl Cast
struct _ast532; // ParmVarDecl that
struct _ast533; // FunctionProtoType Local<v8::Integer> (Local<S>)
struct _ast534; // TemplateSpecializationType Local<S>
struct _ast535; // TemplateSpecializationType Local<v8::Integer>
struct _ast536; // FunctionTemplateDecl As
struct _ast537; // TemplateTypeParmDecl S
struct _ast538; // CXXMethodDecl As
struct _ast539; // FunctionProtoType Local<S> () const
struct _ast540; // TemplateSpecializationType Local<S>
struct _ast541; // CXXMethodDecl New
struct _ast542; // ParmVarDecl isolate
struct _ast543; // ParmVarDecl that
struct _ast544; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _ast545; // TemplateSpecializationType Local<v8::Integer>
struct _ast546; // TemplateSpecializationType Local<v8::Integer>
struct _ast547; // CXXMethodDecl New
struct _ast548; // ParmVarDecl isolate
struct _ast549; // ParmVarDecl that
struct _ast550; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
struct _ast551; // LValueReferenceType const PersistentBase<v8::Integer> &
struct _ast552; // TemplateSpecializationType const PersistentBase<v8::Integer>
struct _ast553; // TemplateSpecializationType PersistentBase<v8::Integer>
struct _ast554; // TemplateSpecializationType Local<v8::Integer>
struct _ast555; // CXXMethodDecl New
struct _ast556; // ParmVarDecl isolate
struct _ast557; // ParmVarDecl that
struct _ast558; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
struct _ast559; // LValueReferenceType const TracedGlobal<v8::Integer> &
struct _ast560; // TemplateSpecializationType const TracedGlobal<v8::Integer>
struct _ast561; // TemplateSpecializationType TracedGlobal<v8::Integer>
struct _ast562; // TemplateSpecializationType Local<v8::Integer>
struct _ast563; // CXXConstructorDecl Local
struct _ast564; // ParmVarDecl 
struct _ast565; // FunctionProtoType void (const v8::Local<v8::Integer> &) noexcept
struct _ast566; // LValueReferenceType const v8::Local<v8::Integer> &
struct _ast567; // CXXConstructorDecl Local
struct _ast568; // ParmVarDecl 
struct _ast569; // FunctionProtoType void (v8::Local<v8::Integer> &&) noexcept
struct _ast570; // RValueReferenceType v8::Local<v8::Integer> &&
struct _ast571; // CXXDestructorDecl ~Local
struct _ast572; // CXXMethodDecl operator=
struct _ast573; // ParmVarDecl 
struct _ast574; // FunctionProtoType v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _ast575; // LValueReferenceType v8::Local<v8::Integer> &
struct _ast576; // CXXMethodDecl operator=
struct _ast577; // ParmVarDecl 
struct _ast578; // FunctionProtoType v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _ast579; // ClassTemplateSpecializationDecl Local
struct _ast580; // ClassTemplateSpecializationDecl Local
struct _ast581; // CXXConstructorDecl Local
struct _ast582; // PointerType v8::Local<v8::String> *
struct _ast583; // RecordType v8::Local<v8::String>
struct _ast584; // FunctionTemplateDecl Local
struct _ast585; // TemplateTypeParmDecl S
struct _ast586; // CXXConstructorDecl Local
struct _ast587; // ParmVarDecl that
struct _ast588; // FunctionProtoType void (Local<S>)
struct _ast589; // TemplateSpecializationType Local<S>
struct _ast590; // CXXConstructorDecl Local
struct _ast591; // ParmVarDecl that
struct _ast592; // FunctionProtoType void (Local<v8::String>)
struct _ast593; // TemplateSpecializationType Local<v8::String>
struct _ast594; // CXXMethodDecl IsEmpty
struct _ast595; // PointerType const v8::Local<v8::String> *
struct _ast596; // RecordType const v8::Local<v8::String>
struct _ast597; // CXXMethodDecl Clear
struct _ast598; // CXXMethodDecl operator->
struct _ast599; // FunctionProtoType v8::String *() const
struct _ast600; // PointerType v8::String *
struct _ast601; // SubstTemplateTypeParmType v8::String
struct _ast602; // CXXMethodDecl operator*
struct _ast603; // FunctionTemplateDecl operator==
struct _ast604; // TemplateTypeParmDecl S
struct _ast605; // CXXMethodDecl operator==
struct _ast606; // ParmVarDecl that
struct _ast607; // FunctionProtoType bool (const Local<S> &) const
struct _ast608; // LValueReferenceType const Local<S> &
struct _ast609; // TemplateSpecializationType const Local<S>
struct _ast610; // TemplateSpecializationType Local<S>
struct _ast611; // FunctionTemplateDecl operator==
struct _ast612; // TemplateTypeParmDecl S
struct _ast613; // CXXMethodDecl operator==
struct _ast614; // ParmVarDecl that
struct _ast615; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast616; // LValueReferenceType const PersistentBase<S> &
struct _ast617; // TemplateSpecializationType const PersistentBase<S>
struct _ast618; // TemplateSpecializationType PersistentBase<S>
struct _ast619; // FunctionTemplateDecl operator!=
struct _ast620; // TemplateTypeParmDecl S
struct _ast621; // CXXMethodDecl operator!=
struct _ast622; // ParmVarDecl that
struct _ast623; // FunctionProtoType bool (const Local<S> &) const
struct _ast624; // LValueReferenceType const Local<S> &
struct _ast625; // TemplateSpecializationType const Local<S>
struct _ast626; // TemplateSpecializationType Local<S>
struct _ast627; // FunctionTemplateDecl operator!=
struct _ast628; // TemplateTypeParmDecl S
struct _ast629; // CXXMethodDecl operator!=
struct _ast630; // ParmVarDecl that
struct _ast631; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast632; // LValueReferenceType const Persistent<S> &
struct _ast633; // TemplateSpecializationType const Persistent<S>
struct _ast634; // TemplateSpecializationType Persistent<S>
struct _ast635; // FunctionTemplateDecl Cast
struct _ast636; // TemplateTypeParmDecl S
struct _ast637; // CXXMethodDecl Cast
struct _ast638; // ParmVarDecl that
struct _ast639; // FunctionProtoType Local<v8::String> (Local<S>)
struct _ast640; // TemplateSpecializationType Local<S>
struct _ast641; // TemplateSpecializationType Local<v8::String>
struct _ast642; // FunctionTemplateDecl As
struct _ast643; // TemplateTypeParmDecl S
struct _ast644; // CXXMethodDecl As
struct _ast645; // FunctionProtoType Local<S> () const
struct _ast646; // TemplateSpecializationType Local<S>
struct _ast647; // CXXMethodDecl New
struct _ast648; // ParmVarDecl isolate
struct _ast649; // ParmVarDecl that
struct _ast650; // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _ast651; // TemplateSpecializationType Local<v8::String>
struct _ast652; // TemplateSpecializationType Local<v8::String>
struct _ast653; // CXXMethodDecl New
struct _ast654; // ParmVarDecl isolate
struct _ast655; // ParmVarDecl that
struct _ast656; // FunctionProtoType Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
struct _ast657; // LValueReferenceType const PersistentBase<v8::String> &
struct _ast658; // TemplateSpecializationType const PersistentBase<v8::String>
struct _ast659; // TemplateSpecializationType PersistentBase<v8::String>
struct _ast660; // TemplateSpecializationType Local<v8::String>
struct _ast661; // CXXMethodDecl New
struct _ast662; // ParmVarDecl isolate
struct _ast663; // ParmVarDecl that
struct _ast664; // FunctionProtoType Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
struct _ast665; // LValueReferenceType const TracedGlobal<v8::String> &
struct _ast666; // TemplateSpecializationType const TracedGlobal<v8::String>
struct _ast667; // TemplateSpecializationType TracedGlobal<v8::String>
struct _ast668; // TemplateSpecializationType Local<v8::String>
struct _ast669; // CXXConstructorDecl Local
struct _ast670; // ParmVarDecl 
struct _ast671; // FunctionProtoType void (const v8::Local<v8::String> &) noexcept
struct _ast672; // LValueReferenceType const v8::Local<v8::String> &
struct _ast673; // CXXConstructorDecl Local
struct _ast674; // ParmVarDecl 
struct _ast675; // FunctionProtoType void (v8::Local<v8::String> &&) noexcept
struct _ast676; // RValueReferenceType v8::Local<v8::String> &&
struct _ast677; // CXXMethodDecl operator=
struct _ast678; // ParmVarDecl 
struct _ast679; // FunctionProtoType v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _ast680; // LValueReferenceType v8::Local<v8::String> &
struct _ast681; // CXXMethodDecl operator=
struct _ast682; // ParmVarDecl 
struct _ast683; // FunctionProtoType v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _ast684; // CXXDestructorDecl ~Local
struct _ast685; // ClassTemplateSpecializationDecl Local
struct _ast686; // CXXConstructorDecl Local
struct _ast687; // PointerType v8::Local<v8::Context> *
struct _ast688; // RecordType v8::Local<v8::Context>
struct _ast689; // FunctionTemplateDecl Local
struct _ast690; // TemplateTypeParmDecl S
struct _ast691; // CXXConstructorDecl Local
struct _ast692; // ParmVarDecl that
struct _ast693; // FunctionProtoType void (Local<S>)
struct _ast694; // TemplateSpecializationType Local<S>
struct _ast695; // CXXConstructorDecl Local
struct _ast696; // ParmVarDecl that
struct _ast697; // FunctionProtoType void (Local<v8::Context>)
struct _ast698; // TemplateSpecializationType Local<v8::Context>
struct _ast699; // CXXMethodDecl IsEmpty
struct _ast700; // PointerType const v8::Local<v8::Context> *
struct _ast701; // RecordType const v8::Local<v8::Context>
struct _ast702; // CXXMethodDecl Clear
struct _ast703; // CXXMethodDecl operator->
struct _ast704; // FunctionProtoType v8::Context *() const
struct _ast705; // PointerType v8::Context *
struct _ast706; // SubstTemplateTypeParmType v8::Context
struct _ast707; // CXXMethodDecl operator*
struct _ast708; // FunctionTemplateDecl operator==
struct _ast709; // TemplateTypeParmDecl S
struct _ast710; // CXXMethodDecl operator==
struct _ast711; // ParmVarDecl that
struct _ast712; // FunctionProtoType bool (const Local<S> &) const
struct _ast713; // LValueReferenceType const Local<S> &
struct _ast714; // TemplateSpecializationType const Local<S>
struct _ast715; // TemplateSpecializationType Local<S>
struct _ast716; // FunctionTemplateDecl operator==
struct _ast717; // TemplateTypeParmDecl S
struct _ast718; // CXXMethodDecl operator==
struct _ast719; // ParmVarDecl that
struct _ast720; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast721; // LValueReferenceType const PersistentBase<S> &
struct _ast722; // TemplateSpecializationType const PersistentBase<S>
struct _ast723; // TemplateSpecializationType PersistentBase<S>
struct _ast724; // FunctionTemplateDecl operator!=
struct _ast725; // TemplateTypeParmDecl S
struct _ast726; // CXXMethodDecl operator!=
struct _ast727; // ParmVarDecl that
struct _ast728; // FunctionProtoType bool (const Local<S> &) const
struct _ast729; // LValueReferenceType const Local<S> &
struct _ast730; // TemplateSpecializationType const Local<S>
struct _ast731; // TemplateSpecializationType Local<S>
struct _ast732; // FunctionTemplateDecl operator!=
struct _ast733; // TemplateTypeParmDecl S
struct _ast734; // CXXMethodDecl operator!=
struct _ast735; // ParmVarDecl that
struct _ast736; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast737; // LValueReferenceType const Persistent<S> &
struct _ast738; // TemplateSpecializationType const Persistent<S>
struct _ast739; // TemplateSpecializationType Persistent<S>
struct _ast740; // FunctionTemplateDecl Cast
struct _ast741; // TemplateTypeParmDecl S
struct _ast742; // CXXMethodDecl Cast
struct _ast743; // ParmVarDecl that
struct _ast744; // FunctionProtoType Local<v8::Context> (Local<S>)
struct _ast745; // TemplateSpecializationType Local<S>
struct _ast746; // TemplateSpecializationType Local<v8::Context>
struct _ast747; // FunctionTemplateDecl As
struct _ast748; // TemplateTypeParmDecl S
struct _ast749; // CXXMethodDecl As
struct _ast750; // FunctionProtoType Local<S> () const
struct _ast751; // TemplateSpecializationType Local<S>
struct _ast752; // CXXMethodDecl New
struct _ast753; // ParmVarDecl isolate
struct _ast754; // ParmVarDecl that
struct _ast755; // FunctionProtoType Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _ast756; // TemplateSpecializationType Local<v8::Context>
struct _ast757; // TemplateSpecializationType Local<v8::Context>
struct _ast758; // CXXMethodDecl New
struct _ast759; // ParmVarDecl isolate
struct _ast760; // ParmVarDecl that
struct _ast761; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
struct _ast762; // LValueReferenceType const PersistentBase<v8::Context> &
struct _ast763; // TemplateSpecializationType const PersistentBase<v8::Context>
struct _ast764; // TemplateSpecializationType PersistentBase<v8::Context>
struct _ast765; // TemplateSpecializationType Local<v8::Context>
struct _ast766; // CXXMethodDecl New
struct _ast767; // ParmVarDecl isolate
struct _ast768; // ParmVarDecl that
struct _ast769; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
struct _ast770; // LValueReferenceType const TracedGlobal<v8::Context> &
struct _ast771; // TemplateSpecializationType const TracedGlobal<v8::Context>
struct _ast772; // TemplateSpecializationType TracedGlobal<v8::Context>
struct _ast773; // TemplateSpecializationType Local<v8::Context>
struct _ast774; // CXXDestructorDecl ~Local
struct _ast775; // CXXConstructorDecl Local
struct _ast776; // ParmVarDecl 
struct _ast777; // FunctionProtoType void (const v8::Local<v8::Context> &) noexcept
struct _ast778; // LValueReferenceType const v8::Local<v8::Context> &
struct _ast779; // CXXConstructorDecl Local
struct _ast780; // ParmVarDecl 
struct _ast781; // FunctionProtoType void (v8::Local<v8::Context> &&) noexcept
struct _ast782; // RValueReferenceType v8::Local<v8::Context> &&
struct _ast783; // ClassTemplateSpecializationDecl Local
struct _ast784; // ClassTemplateSpecializationDecl Local
struct _ast785; // ClassTemplateSpecializationDecl Local
struct _ast786; // CXXConstructorDecl Local
struct _ast787; // PointerType v8::Local<v8::UnboundScript> *
struct _ast788; // RecordType v8::Local<v8::UnboundScript>
struct _ast789; // FunctionTemplateDecl Local
struct _ast790; // TemplateTypeParmDecl S
struct _ast791; // CXXConstructorDecl Local
struct _ast792; // ParmVarDecl that
struct _ast793; // FunctionProtoType void (Local<S>)
struct _ast794; // TemplateSpecializationType Local<S>
struct _ast795; // CXXMethodDecl IsEmpty
struct _ast796; // PointerType const v8::Local<v8::UnboundScript> *
struct _ast797; // RecordType const v8::Local<v8::UnboundScript>
struct _ast798; // CXXMethodDecl Clear
struct _ast799; // CXXMethodDecl operator->
struct _ast800; // FunctionProtoType v8::UnboundScript *() const
struct _ast801; // PointerType v8::UnboundScript *
struct _ast802; // SubstTemplateTypeParmType v8::UnboundScript
struct _ast803; // CXXMethodDecl operator*
struct _ast804; // FunctionTemplateDecl operator==
struct _ast805; // TemplateTypeParmDecl S
struct _ast806; // CXXMethodDecl operator==
struct _ast807; // ParmVarDecl that
struct _ast808; // FunctionProtoType bool (const Local<S> &) const
struct _ast809; // LValueReferenceType const Local<S> &
struct _ast810; // TemplateSpecializationType const Local<S>
struct _ast811; // TemplateSpecializationType Local<S>
struct _ast812; // FunctionTemplateDecl operator==
struct _ast813; // TemplateTypeParmDecl S
struct _ast814; // CXXMethodDecl operator==
struct _ast815; // ParmVarDecl that
struct _ast816; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast817; // LValueReferenceType const PersistentBase<S> &
struct _ast818; // TemplateSpecializationType const PersistentBase<S>
struct _ast819; // TemplateSpecializationType PersistentBase<S>
struct _ast820; // FunctionTemplateDecl operator!=
struct _ast821; // TemplateTypeParmDecl S
struct _ast822; // CXXMethodDecl operator!=
struct _ast823; // ParmVarDecl that
struct _ast824; // FunctionProtoType bool (const Local<S> &) const
struct _ast825; // LValueReferenceType const Local<S> &
struct _ast826; // TemplateSpecializationType const Local<S>
struct _ast827; // TemplateSpecializationType Local<S>
struct _ast828; // FunctionTemplateDecl operator!=
struct _ast829; // TemplateTypeParmDecl S
struct _ast830; // CXXMethodDecl operator!=
struct _ast831; // ParmVarDecl that
struct _ast832; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast833; // LValueReferenceType const Persistent<S> &
struct _ast834; // TemplateSpecializationType const Persistent<S>
struct _ast835; // TemplateSpecializationType Persistent<S>
struct _ast836; // FunctionTemplateDecl Cast
struct _ast837; // TemplateTypeParmDecl S
struct _ast838; // CXXMethodDecl Cast
struct _ast839; // ParmVarDecl that
struct _ast840; // FunctionProtoType Local<v8::UnboundScript> (Local<S>)
struct _ast841; // TemplateSpecializationType Local<S>
struct _ast842; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast843; // FunctionTemplateDecl As
struct _ast844; // TemplateTypeParmDecl S
struct _ast845; // CXXMethodDecl As
struct _ast846; // FunctionProtoType Local<S> () const
struct _ast847; // TemplateSpecializationType Local<S>
struct _ast848; // CXXMethodDecl New
struct _ast849; // ParmVarDecl isolate
struct _ast850; // ParmVarDecl that
struct _ast851; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
struct _ast852; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast853; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast854; // CXXMethodDecl New
struct _ast855; // ParmVarDecl isolate
struct _ast856; // ParmVarDecl that
struct _ast857; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
struct _ast858; // LValueReferenceType const PersistentBase<v8::UnboundScript> &
struct _ast859; // TemplateSpecializationType const PersistentBase<v8::UnboundScript>
struct _ast860; // TemplateSpecializationType PersistentBase<v8::UnboundScript>
struct _ast861; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast862; // CXXMethodDecl New
struct _ast863; // ParmVarDecl isolate
struct _ast864; // ParmVarDecl that
struct _ast865; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
struct _ast866; // LValueReferenceType const TracedGlobal<v8::UnboundScript> &
struct _ast867; // TemplateSpecializationType const TracedGlobal<v8::UnboundScript>
struct _ast868; // TemplateSpecializationType TracedGlobal<v8::UnboundScript>
struct _ast869; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast870; // ClassTemplateSpecializationDecl Local
struct _ast871; // ClassTemplateSpecializationDecl Local
struct _ast872; // CXXConstructorDecl Local
struct _ast873; // PointerType v8::Local<v8::Function> *
struct _ast874; // RecordType v8::Local<v8::Function>
struct _ast875; // FunctionTemplateDecl Local
struct _ast876; // TemplateTypeParmDecl S
struct _ast877; // CXXConstructorDecl Local
struct _ast878; // ParmVarDecl that
struct _ast879; // FunctionProtoType void (Local<S>)
struct _ast880; // TemplateSpecializationType Local<S>
struct _ast881; // CXXConstructorDecl Local
struct _ast882; // ParmVarDecl that
struct _ast883; // FunctionProtoType void (Local<v8::Function>)
struct _ast884; // TemplateSpecializationType Local<v8::Function>
struct _ast885; // CXXMethodDecl IsEmpty
struct _ast886; // PointerType const v8::Local<v8::Function> *
struct _ast887; // RecordType const v8::Local<v8::Function>
struct _ast888; // CXXMethodDecl Clear
struct _ast889; // CXXMethodDecl operator->
struct _ast890; // FunctionProtoType v8::Function *() const
struct _ast891; // PointerType v8::Function *
struct _ast892; // SubstTemplateTypeParmType v8::Function
struct _ast893; // CXXMethodDecl operator*
struct _ast894; // FunctionTemplateDecl operator==
struct _ast895; // TemplateTypeParmDecl S
struct _ast896; // CXXMethodDecl operator==
struct _ast897; // ParmVarDecl that
struct _ast898; // FunctionProtoType bool (const Local<S> &) const
struct _ast899; // LValueReferenceType const Local<S> &
struct _ast900; // TemplateSpecializationType const Local<S>
struct _ast901; // TemplateSpecializationType Local<S>
struct _ast902; // FunctionTemplateDecl operator==
struct _ast903; // TemplateTypeParmDecl S
struct _ast904; // CXXMethodDecl operator==
struct _ast905; // ParmVarDecl that
struct _ast906; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast907; // LValueReferenceType const PersistentBase<S> &
struct _ast908; // TemplateSpecializationType const PersistentBase<S>
struct _ast909; // TemplateSpecializationType PersistentBase<S>
struct _ast910; // FunctionTemplateDecl operator!=
struct _ast911; // TemplateTypeParmDecl S
struct _ast912; // CXXMethodDecl operator!=
struct _ast913; // ParmVarDecl that
struct _ast914; // FunctionProtoType bool (const Local<S> &) const
struct _ast915; // LValueReferenceType const Local<S> &
struct _ast916; // TemplateSpecializationType const Local<S>
struct _ast917; // TemplateSpecializationType Local<S>
struct _ast918; // FunctionTemplateDecl operator!=
struct _ast919; // TemplateTypeParmDecl S
struct _ast920; // CXXMethodDecl operator!=
struct _ast921; // ParmVarDecl that
struct _ast922; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast923; // LValueReferenceType const Persistent<S> &
struct _ast924; // TemplateSpecializationType const Persistent<S>
struct _ast925; // TemplateSpecializationType Persistent<S>
struct _ast926; // FunctionTemplateDecl Cast
struct _ast927; // TemplateTypeParmDecl S
struct _ast928; // CXXMethodDecl Cast
struct _ast929; // ParmVarDecl that
struct _ast930; // FunctionProtoType Local<v8::Function> (Local<S>)
struct _ast931; // TemplateSpecializationType Local<S>
struct _ast932; // TemplateSpecializationType Local<v8::Function>
struct _ast933; // FunctionTemplateDecl As
struct _ast934; // TemplateTypeParmDecl S
struct _ast935; // CXXMethodDecl As
struct _ast936; // FunctionProtoType Local<S> () const
struct _ast937; // TemplateSpecializationType Local<S>
struct _ast938; // CXXMethodDecl New
struct _ast939; // ParmVarDecl isolate
struct _ast940; // ParmVarDecl that
struct _ast941; // FunctionProtoType Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _ast942; // TemplateSpecializationType Local<v8::Function>
struct _ast943; // TemplateSpecializationType Local<v8::Function>
struct _ast944; // CXXMethodDecl New
struct _ast945; // ParmVarDecl isolate
struct _ast946; // ParmVarDecl that
struct _ast947; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
struct _ast948; // LValueReferenceType const PersistentBase<v8::Function> &
struct _ast949; // TemplateSpecializationType const PersistentBase<v8::Function>
struct _ast950; // TemplateSpecializationType PersistentBase<v8::Function>
struct _ast951; // TemplateSpecializationType Local<v8::Function>
struct _ast952; // CXXMethodDecl New
struct _ast953; // ParmVarDecl isolate
struct _ast954; // ParmVarDecl that
struct _ast955; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
struct _ast956; // LValueReferenceType const TracedGlobal<v8::Function> &
struct _ast957; // TemplateSpecializationType const TracedGlobal<v8::Function>
struct _ast958; // TemplateSpecializationType TracedGlobal<v8::Function>
struct _ast959; // TemplateSpecializationType Local<v8::Function>
struct _ast960; // CXXConstructorDecl Local
struct _ast961; // ParmVarDecl 
struct _ast962; // FunctionProtoType void (const v8::Local<v8::Function> &)
struct _ast963; // LValueReferenceType const v8::Local<v8::Function> &
struct _ast964; // CXXConstructorDecl Local
struct _ast965; // ParmVarDecl 
struct _ast966; // FunctionProtoType void (v8::Local<v8::Function> &&) noexcept
struct _ast967; // RValueReferenceType v8::Local<v8::Function> &&
struct _ast968; // CXXDestructorDecl ~Local
struct _ast969; // ClassTemplateSpecializationDecl Local
struct _ast970; // ClassTemplateSpecializationDecl Local
struct _ast971; // ClassTemplateSpecializationDecl Local
struct _ast972; // ClassTemplateSpecializationDecl Local
struct _ast973; // ClassTemplateSpecializationDecl Local
struct _ast974; // ClassTemplateSpecializationDecl Local
struct _ast975; // ClassTemplateSpecializationDecl Local
struct _ast976; // ClassTemplateSpecializationDecl Local
struct _ast977; // ClassTemplateSpecializationDecl Local
struct _ast978; // ClassTemplateSpecializationDecl Local
struct _ast979; // CXXConstructorDecl Local
struct _ast980; // PointerType v8::Local<v8::Name> *
struct _ast981; // RecordType v8::Local<v8::Name>
struct _ast982; // FunctionTemplateDecl Local
struct _ast983; // TemplateTypeParmDecl S
struct _ast984; // CXXConstructorDecl Local
struct _ast985; // ParmVarDecl that
struct _ast986; // FunctionProtoType void (Local<S>)
struct _ast987; // TemplateSpecializationType Local<S>
struct _ast988; // CXXConstructorDecl Local
struct _ast989; // ParmVarDecl that
struct _ast990; // FunctionProtoType void (Local<v8::String>)
struct _ast991; // TemplateSpecializationType Local<v8::String>
struct _ast992; // CXXConstructorDecl Local
struct _ast993; // ParmVarDecl that
struct _ast994; // FunctionProtoType void (Local<v8::Name>)
struct _ast995; // TemplateSpecializationType Local<v8::Name>
struct _ast996; // CXXMethodDecl IsEmpty
struct _ast997; // PointerType const v8::Local<v8::Name> *
struct _ast998; // RecordType const v8::Local<v8::Name>
struct _ast999; // CXXMethodDecl Clear
struct _ast1000; // CXXMethodDecl operator->
struct _ast1001; // FunctionProtoType v8::Name *() const
struct _ast1002; // PointerType v8::Name *
struct _ast1003; // SubstTemplateTypeParmType v8::Name
struct _ast1004; // CXXMethodDecl operator*
struct _ast1005; // FunctionTemplateDecl operator==
struct _ast1006; // TemplateTypeParmDecl S
struct _ast1007; // CXXMethodDecl operator==
struct _ast1008; // ParmVarDecl that
struct _ast1009; // FunctionProtoType bool (const Local<S> &) const
struct _ast1010; // LValueReferenceType const Local<S> &
struct _ast1011; // TemplateSpecializationType const Local<S>
struct _ast1012; // TemplateSpecializationType Local<S>
struct _ast1013; // FunctionTemplateDecl operator==
struct _ast1014; // TemplateTypeParmDecl S
struct _ast1015; // CXXMethodDecl operator==
struct _ast1016; // ParmVarDecl that
struct _ast1017; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1018; // LValueReferenceType const PersistentBase<S> &
struct _ast1019; // TemplateSpecializationType const PersistentBase<S>
struct _ast1020; // TemplateSpecializationType PersistentBase<S>
struct _ast1021; // FunctionTemplateDecl operator!=
struct _ast1022; // TemplateTypeParmDecl S
struct _ast1023; // CXXMethodDecl operator!=
struct _ast1024; // ParmVarDecl that
struct _ast1025; // FunctionProtoType bool (const Local<S> &) const
struct _ast1026; // LValueReferenceType const Local<S> &
struct _ast1027; // TemplateSpecializationType const Local<S>
struct _ast1028; // TemplateSpecializationType Local<S>
struct _ast1029; // FunctionTemplateDecl operator!=
struct _ast1030; // TemplateTypeParmDecl S
struct _ast1031; // CXXMethodDecl operator!=
struct _ast1032; // ParmVarDecl that
struct _ast1033; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1034; // LValueReferenceType const Persistent<S> &
struct _ast1035; // TemplateSpecializationType const Persistent<S>
struct _ast1036; // TemplateSpecializationType Persistent<S>
struct _ast1037; // FunctionTemplateDecl Cast
struct _ast1038; // TemplateTypeParmDecl S
struct _ast1039; // CXXMethodDecl Cast
struct _ast1040; // ParmVarDecl that
struct _ast1041; // FunctionProtoType Local<v8::Name> (Local<S>)
struct _ast1042; // TemplateSpecializationType Local<S>
struct _ast1043; // TemplateSpecializationType Local<v8::Name>
struct _ast1044; // FunctionTemplateDecl As
struct _ast1045; // TemplateTypeParmDecl S
struct _ast1046; // CXXMethodDecl As
struct _ast1047; // FunctionProtoType Local<S> () const
struct _ast1048; // TemplateSpecializationType Local<S>
struct _ast1049; // CXXMethodDecl New
struct _ast1050; // ParmVarDecl isolate
struct _ast1051; // ParmVarDecl that
struct _ast1052; // FunctionProtoType Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _ast1053; // TemplateSpecializationType Local<v8::Name>
struct _ast1054; // TemplateSpecializationType Local<v8::Name>
struct _ast1055; // CXXMethodDecl New
struct _ast1056; // ParmVarDecl isolate
struct _ast1057; // ParmVarDecl that
struct _ast1058; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
struct _ast1059; // LValueReferenceType const PersistentBase<v8::Name> &
struct _ast1060; // TemplateSpecializationType const PersistentBase<v8::Name>
struct _ast1061; // TemplateSpecializationType PersistentBase<v8::Name>
struct _ast1062; // TemplateSpecializationType Local<v8::Name>
struct _ast1063; // CXXMethodDecl New
struct _ast1064; // ParmVarDecl isolate
struct _ast1065; // ParmVarDecl that
struct _ast1066; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
struct _ast1067; // LValueReferenceType const TracedGlobal<v8::Name> &
struct _ast1068; // TemplateSpecializationType const TracedGlobal<v8::Name>
struct _ast1069; // TemplateSpecializationType TracedGlobal<v8::Name>
struct _ast1070; // TemplateSpecializationType Local<v8::Name>
struct _ast1071; // CXXConstructorDecl Local
struct _ast1072; // ParmVarDecl 
struct _ast1073; // FunctionProtoType void (const v8::Local<v8::Name> &)
struct _ast1074; // LValueReferenceType const v8::Local<v8::Name> &
struct _ast1075; // CXXConstructorDecl Local
struct _ast1076; // ParmVarDecl 
struct _ast1077; // FunctionProtoType void (v8::Local<v8::Name> &&) noexcept
struct _ast1078; // RValueReferenceType v8::Local<v8::Name> &&
struct _ast1079; // CXXDestructorDecl ~Local
struct _ast1080; // ClassTemplateSpecializationDecl Local
struct _ast1081; // CXXConstructorDecl Local
struct _ast1082; // PointerType v8::Local<v8::FunctionTemplate> *
struct _ast1083; // RecordType v8::Local<v8::FunctionTemplate>
struct _ast1084; // FunctionTemplateDecl Local
struct _ast1085; // TemplateTypeParmDecl S
struct _ast1086; // CXXConstructorDecl Local
struct _ast1087; // ParmVarDecl that
struct _ast1088; // FunctionProtoType void (Local<S>)
struct _ast1089; // TemplateSpecializationType Local<S>
struct _ast1090; // CXXConstructorDecl Local
struct _ast1091; // ParmVarDecl that
struct _ast1092; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast1093; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1094; // CXXMethodDecl IsEmpty
struct _ast1095; // PointerType const v8::Local<v8::FunctionTemplate> *
struct _ast1096; // RecordType const v8::Local<v8::FunctionTemplate>
struct _ast1097; // CXXMethodDecl Clear
struct _ast1098; // CXXMethodDecl operator->
struct _ast1099; // FunctionProtoType v8::FunctionTemplate *() const
struct _ast1100; // PointerType v8::FunctionTemplate *
struct _ast1101; // SubstTemplateTypeParmType v8::FunctionTemplate
struct _ast1102; // CXXMethodDecl operator*
struct _ast1103; // FunctionTemplateDecl operator==
struct _ast1104; // TemplateTypeParmDecl S
struct _ast1105; // CXXMethodDecl operator==
struct _ast1106; // ParmVarDecl that
struct _ast1107; // FunctionProtoType bool (const Local<S> &) const
struct _ast1108; // LValueReferenceType const Local<S> &
struct _ast1109; // TemplateSpecializationType const Local<S>
struct _ast1110; // TemplateSpecializationType Local<S>
struct _ast1111; // FunctionTemplateDecl operator==
struct _ast1112; // TemplateTypeParmDecl S
struct _ast1113; // CXXMethodDecl operator==
struct _ast1114; // ParmVarDecl that
struct _ast1115; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1116; // LValueReferenceType const PersistentBase<S> &
struct _ast1117; // TemplateSpecializationType const PersistentBase<S>
struct _ast1118; // TemplateSpecializationType PersistentBase<S>
struct _ast1119; // FunctionTemplateDecl operator!=
struct _ast1120; // TemplateTypeParmDecl S
struct _ast1121; // CXXMethodDecl operator!=
struct _ast1122; // ParmVarDecl that
struct _ast1123; // FunctionProtoType bool (const Local<S> &) const
struct _ast1124; // LValueReferenceType const Local<S> &
struct _ast1125; // TemplateSpecializationType const Local<S>
struct _ast1126; // TemplateSpecializationType Local<S>
struct _ast1127; // FunctionTemplateDecl operator!=
struct _ast1128; // TemplateTypeParmDecl S
struct _ast1129; // CXXMethodDecl operator!=
struct _ast1130; // ParmVarDecl that
struct _ast1131; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1132; // LValueReferenceType const Persistent<S> &
struct _ast1133; // TemplateSpecializationType const Persistent<S>
struct _ast1134; // TemplateSpecializationType Persistent<S>
struct _ast1135; // FunctionTemplateDecl Cast
struct _ast1136; // TemplateTypeParmDecl S
struct _ast1137; // CXXMethodDecl Cast
struct _ast1138; // ParmVarDecl that
struct _ast1139; // FunctionProtoType Local<v8::FunctionTemplate> (Local<S>)
struct _ast1140; // TemplateSpecializationType Local<S>
struct _ast1141; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1142; // FunctionTemplateDecl As
struct _ast1143; // TemplateTypeParmDecl S
struct _ast1144; // CXXMethodDecl As
struct _ast1145; // FunctionProtoType Local<S> () const
struct _ast1146; // TemplateSpecializationType Local<S>
struct _ast1147; // CXXMethodDecl New
struct _ast1148; // ParmVarDecl isolate
struct _ast1149; // ParmVarDecl that
struct _ast1150; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast1151; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1152; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1153; // CXXMethodDecl New
struct _ast1154; // ParmVarDecl isolate
struct _ast1155; // ParmVarDecl that
struct _ast1156; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
struct _ast1157; // LValueReferenceType const PersistentBase<v8::FunctionTemplate> &
struct _ast1158; // TemplateSpecializationType const PersistentBase<v8::FunctionTemplate>
struct _ast1159; // TemplateSpecializationType PersistentBase<v8::FunctionTemplate>
struct _ast1160; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1161; // CXXMethodDecl New
struct _ast1162; // ParmVarDecl isolate
struct _ast1163; // ParmVarDecl that
struct _ast1164; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
struct _ast1165; // LValueReferenceType const TracedGlobal<v8::FunctionTemplate> &
struct _ast1166; // TemplateSpecializationType const TracedGlobal<v8::FunctionTemplate>
struct _ast1167; // TemplateSpecializationType TracedGlobal<v8::FunctionTemplate>
struct _ast1168; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast1169; // CXXConstructorDecl Local
struct _ast1170; // ParmVarDecl 
struct _ast1171; // FunctionProtoType void (const v8::Local<v8::FunctionTemplate> &)
struct _ast1172; // LValueReferenceType const v8::Local<v8::FunctionTemplate> &
struct _ast1173; // CXXConstructorDecl Local
struct _ast1174; // ParmVarDecl 
struct _ast1175; // FunctionProtoType void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _ast1176; // RValueReferenceType v8::Local<v8::FunctionTemplate> &&
struct _ast1177; // CXXDestructorDecl ~Local
struct _ast1178; // ClassTemplateSpecializationDecl Local
struct _ast1179; // ClassTemplateSpecializationDecl Local
struct _ast1180; // ClassTemplateSpecializationDecl Local
struct _ast1181; // ClassTemplateSpecializationDecl Local
struct _ast1182; // CXXConstructorDecl Local
struct _ast1183; // PointerType v8::Local<v8::Promise> *
struct _ast1184; // RecordType v8::Local<v8::Promise>
struct _ast1185; // FunctionTemplateDecl Local
struct _ast1186; // TemplateTypeParmDecl S
struct _ast1187; // CXXConstructorDecl Local
struct _ast1188; // ParmVarDecl that
struct _ast1189; // FunctionProtoType void (Local<S>)
struct _ast1190; // TemplateSpecializationType Local<S>
struct _ast1191; // CXXConstructorDecl Local
struct _ast1192; // ParmVarDecl that
struct _ast1193; // FunctionProtoType void (Local<v8::Promise>)
struct _ast1194; // TemplateSpecializationType Local<v8::Promise>
struct _ast1195; // CXXMethodDecl IsEmpty
struct _ast1196; // PointerType const v8::Local<v8::Promise> *
struct _ast1197; // RecordType const v8::Local<v8::Promise>
struct _ast1198; // CXXMethodDecl Clear
struct _ast1199; // CXXMethodDecl operator->
struct _ast1200; // FunctionProtoType v8::Promise *() const
struct _ast1201; // PointerType v8::Promise *
struct _ast1202; // SubstTemplateTypeParmType v8::Promise
struct _ast1203; // CXXMethodDecl operator*
struct _ast1204; // FunctionTemplateDecl operator==
struct _ast1205; // TemplateTypeParmDecl S
struct _ast1206; // CXXMethodDecl operator==
struct _ast1207; // ParmVarDecl that
struct _ast1208; // FunctionProtoType bool (const Local<S> &) const
struct _ast1209; // LValueReferenceType const Local<S> &
struct _ast1210; // TemplateSpecializationType const Local<S>
struct _ast1211; // TemplateSpecializationType Local<S>
struct _ast1212; // FunctionTemplateDecl operator==
struct _ast1213; // TemplateTypeParmDecl S
struct _ast1214; // CXXMethodDecl operator==
struct _ast1215; // ParmVarDecl that
struct _ast1216; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1217; // LValueReferenceType const PersistentBase<S> &
struct _ast1218; // TemplateSpecializationType const PersistentBase<S>
struct _ast1219; // TemplateSpecializationType PersistentBase<S>
struct _ast1220; // FunctionTemplateDecl operator!=
struct _ast1221; // TemplateTypeParmDecl S
struct _ast1222; // CXXMethodDecl operator!=
struct _ast1223; // ParmVarDecl that
struct _ast1224; // FunctionProtoType bool (const Local<S> &) const
struct _ast1225; // LValueReferenceType const Local<S> &
struct _ast1226; // TemplateSpecializationType const Local<S>
struct _ast1227; // TemplateSpecializationType Local<S>
struct _ast1228; // FunctionTemplateDecl operator!=
struct _ast1229; // TemplateTypeParmDecl S
struct _ast1230; // CXXMethodDecl operator!=
struct _ast1231; // ParmVarDecl that
struct _ast1232; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1233; // LValueReferenceType const Persistent<S> &
struct _ast1234; // TemplateSpecializationType const Persistent<S>
struct _ast1235; // TemplateSpecializationType Persistent<S>
struct _ast1236; // FunctionTemplateDecl Cast
struct _ast1237; // TemplateTypeParmDecl S
struct _ast1238; // CXXMethodDecl Cast
struct _ast1239; // ParmVarDecl that
struct _ast1240; // FunctionProtoType Local<v8::Promise> (Local<S>)
struct _ast1241; // TemplateSpecializationType Local<S>
struct _ast1242; // TemplateSpecializationType Local<v8::Promise>
struct _ast1243; // FunctionTemplateDecl As
struct _ast1244; // TemplateTypeParmDecl S
struct _ast1245; // CXXMethodDecl As
struct _ast1246; // FunctionProtoType Local<S> () const
struct _ast1247; // TemplateSpecializationType Local<S>
struct _ast1248; // CXXMethodDecl New
struct _ast1249; // ParmVarDecl isolate
struct _ast1250; // ParmVarDecl that
struct _ast1251; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _ast1252; // TemplateSpecializationType Local<v8::Promise>
struct _ast1253; // TemplateSpecializationType Local<v8::Promise>
struct _ast1254; // CXXMethodDecl New
struct _ast1255; // ParmVarDecl isolate
struct _ast1256; // ParmVarDecl that
struct _ast1257; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
struct _ast1258; // LValueReferenceType const PersistentBase<v8::Promise> &
struct _ast1259; // TemplateSpecializationType const PersistentBase<v8::Promise>
struct _ast1260; // TemplateSpecializationType PersistentBase<v8::Promise>
struct _ast1261; // TemplateSpecializationType Local<v8::Promise>
struct _ast1262; // CXXMethodDecl New
struct _ast1263; // ParmVarDecl isolate
struct _ast1264; // ParmVarDecl that
struct _ast1265; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
struct _ast1266; // LValueReferenceType const TracedGlobal<v8::Promise> &
struct _ast1267; // TemplateSpecializationType const TracedGlobal<v8::Promise>
struct _ast1268; // TemplateSpecializationType TracedGlobal<v8::Promise>
struct _ast1269; // TemplateSpecializationType Local<v8::Promise>
struct _ast1270; // CXXConstructorDecl Local
struct _ast1271; // ParmVarDecl 
struct _ast1272; // FunctionProtoType void (const v8::Local<v8::Promise> &) noexcept
struct _ast1273; // LValueReferenceType const v8::Local<v8::Promise> &
struct _ast1274; // CXXConstructorDecl Local
struct _ast1275; // ParmVarDecl 
struct _ast1276; // FunctionProtoType void (v8::Local<v8::Promise> &&)
struct _ast1277; // RValueReferenceType v8::Local<v8::Promise> &&
struct _ast1278; // ClassTemplateSpecializationDecl Local
struct _ast1279; // ClassTemplateSpecializationDecl Local
struct _ast1280; // ClassTemplateSpecializationDecl Local
struct _ast1281; // ClassTemplateSpecializationDecl Local
struct _ast1282; // ClassTemplateSpecializationDecl Local
struct _ast1283; // ClassTemplateSpecializationDecl Local
struct _ast1284; // ClassTemplateSpecializationDecl Local
struct _ast1285; // ClassTemplateSpecializationDecl Local
struct _ast1286; // ClassTemplateSpecializationDecl Local
struct _ast1287; // ClassTemplateSpecializationDecl Local
struct _ast1288; // ClassTemplateSpecializationDecl Local
struct _ast1289; // ClassTemplateSpecializationDecl Local
struct _ast1290; // ClassTemplateSpecializationDecl Local
struct _ast1291; // ClassTemplateSpecializationDecl Local
struct _ast1292; // CXXConstructorDecl Local
struct _ast1293; // PointerType v8::Local<v8::Data> *
struct _ast1294; // RecordType v8::Local<v8::Data>
struct _ast1295; // FunctionTemplateDecl Local
struct _ast1296; // TemplateTypeParmDecl S
struct _ast1297; // CXXConstructorDecl Local
struct _ast1298; // ParmVarDecl that
struct _ast1299; // FunctionProtoType void (Local<S>)
struct _ast1300; // TemplateSpecializationType Local<S>
struct _ast1301; // CXXConstructorDecl Local
struct _ast1302; // ParmVarDecl that
struct _ast1303; // FunctionProtoType void (Local<v8::Data>)
struct _ast1304; // TemplateSpecializationType Local<v8::Data>
struct _ast1305; // CXXMethodDecl IsEmpty
struct _ast1306; // PointerType const v8::Local<v8::Data> *
struct _ast1307; // RecordType const v8::Local<v8::Data>
struct _ast1308; // CXXMethodDecl Clear
struct _ast1309; // CXXMethodDecl operator->
struct _ast1310; // FunctionProtoType v8::Data *() const
struct _ast1311; // PointerType v8::Data *
struct _ast1312; // SubstTemplateTypeParmType v8::Data
struct _ast1313; // CXXMethodDecl operator*
struct _ast1314; // FunctionTemplateDecl operator==
struct _ast1315; // TemplateTypeParmDecl S
struct _ast1316; // CXXMethodDecl operator==
struct _ast1317; // ParmVarDecl that
struct _ast1318; // FunctionProtoType bool (const Local<S> &) const
struct _ast1319; // LValueReferenceType const Local<S> &
struct _ast1320; // TemplateSpecializationType const Local<S>
struct _ast1321; // TemplateSpecializationType Local<S>
struct _ast1322; // FunctionTemplateDecl operator==
struct _ast1323; // TemplateTypeParmDecl S
struct _ast1324; // CXXMethodDecl operator==
struct _ast1325; // ParmVarDecl that
struct _ast1326; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1327; // LValueReferenceType const PersistentBase<S> &
struct _ast1328; // TemplateSpecializationType const PersistentBase<S>
struct _ast1329; // TemplateSpecializationType PersistentBase<S>
struct _ast1330; // FunctionTemplateDecl operator!=
struct _ast1331; // TemplateTypeParmDecl S
struct _ast1332; // CXXMethodDecl operator!=
struct _ast1333; // ParmVarDecl that
struct _ast1334; // FunctionProtoType bool (const Local<S> &) const
struct _ast1335; // LValueReferenceType const Local<S> &
struct _ast1336; // TemplateSpecializationType const Local<S>
struct _ast1337; // TemplateSpecializationType Local<S>
struct _ast1338; // FunctionTemplateDecl operator!=
struct _ast1339; // TemplateTypeParmDecl S
struct _ast1340; // CXXMethodDecl operator!=
struct _ast1341; // ParmVarDecl that
struct _ast1342; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1343; // LValueReferenceType const Persistent<S> &
struct _ast1344; // TemplateSpecializationType const Persistent<S>
struct _ast1345; // TemplateSpecializationType Persistent<S>
struct _ast1346; // FunctionTemplateDecl Cast
struct _ast1347; // TemplateTypeParmDecl S
struct _ast1348; // CXXMethodDecl Cast
struct _ast1349; // ParmVarDecl that
struct _ast1350; // FunctionProtoType Local<v8::Data> (Local<S>)
struct _ast1351; // TemplateSpecializationType Local<S>
struct _ast1352; // TemplateSpecializationType Local<v8::Data>
struct _ast1353; // FunctionTemplateDecl As
struct _ast1354; // TemplateTypeParmDecl S
struct _ast1355; // CXXMethodDecl As
struct _ast1356; // FunctionProtoType Local<S> () const
struct _ast1357; // TemplateSpecializationType Local<S>
struct _ast1358; // CXXMethodDecl New
struct _ast1359; // ParmVarDecl isolate
struct _ast1360; // ParmVarDecl that
struct _ast1361; // FunctionProtoType Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _ast1362; // TemplateSpecializationType Local<v8::Data>
struct _ast1363; // TemplateSpecializationType Local<v8::Data>
struct _ast1364; // CXXMethodDecl New
struct _ast1365; // ParmVarDecl isolate
struct _ast1366; // ParmVarDecl that
struct _ast1367; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
struct _ast1368; // LValueReferenceType const PersistentBase<v8::Data> &
struct _ast1369; // TemplateSpecializationType const PersistentBase<v8::Data>
struct _ast1370; // TemplateSpecializationType PersistentBase<v8::Data>
struct _ast1371; // TemplateSpecializationType Local<v8::Data>
struct _ast1372; // CXXMethodDecl New
struct _ast1373; // ParmVarDecl isolate
struct _ast1374; // ParmVarDecl that
struct _ast1375; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
struct _ast1376; // LValueReferenceType const TracedGlobal<v8::Data> &
struct _ast1377; // TemplateSpecializationType const TracedGlobal<v8::Data>
struct _ast1378; // TemplateSpecializationType TracedGlobal<v8::Data>
struct _ast1379; // TemplateSpecializationType Local<v8::Data>
struct _ast1380; // CXXConstructorDecl Local
struct _ast1381; // ParmVarDecl 
struct _ast1382; // FunctionProtoType void (const v8::Local<v8::Data> &) noexcept
struct _ast1383; // LValueReferenceType const v8::Local<v8::Data> &
struct _ast1384; // CXXConstructorDecl Local
struct _ast1385; // ParmVarDecl 
struct _ast1386; // FunctionProtoType void (v8::Local<v8::Data> &&)
struct _ast1387; // RValueReferenceType v8::Local<v8::Data> &&
struct _ast1388; // CXXDestructorDecl ~Local
struct _ast1389; // ClassTemplateSpecializationDecl Local
struct _ast1390; // CXXConstructorDecl Local
struct _ast1391; // PointerType v8::Local<v8::AccessorSignature> *
struct _ast1392; // RecordType v8::Local<v8::AccessorSignature>
struct _ast1393; // FunctionTemplateDecl Local
struct _ast1394; // TemplateTypeParmDecl S
struct _ast1395; // CXXConstructorDecl Local
struct _ast1396; // ParmVarDecl that
struct _ast1397; // FunctionProtoType void (Local<S>)
struct _ast1398; // TemplateSpecializationType Local<S>
struct _ast1399; // CXXConstructorDecl Local
struct _ast1400; // ParmVarDecl that
struct _ast1401; // FunctionProtoType void (Local<v8::AccessorSignature>)
struct _ast1402; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1403; // CXXMethodDecl IsEmpty
struct _ast1404; // PointerType const v8::Local<v8::AccessorSignature> *
struct _ast1405; // RecordType const v8::Local<v8::AccessorSignature>
struct _ast1406; // CXXMethodDecl Clear
struct _ast1407; // CXXMethodDecl operator->
struct _ast1408; // FunctionProtoType v8::AccessorSignature *() const
struct _ast1409; // PointerType v8::AccessorSignature *
struct _ast1410; // SubstTemplateTypeParmType v8::AccessorSignature
struct _ast1411; // CXXMethodDecl operator*
struct _ast1412; // FunctionTemplateDecl operator==
struct _ast1413; // TemplateTypeParmDecl S
struct _ast1414; // CXXMethodDecl operator==
struct _ast1415; // ParmVarDecl that
struct _ast1416; // FunctionProtoType bool (const Local<S> &) const
struct _ast1417; // LValueReferenceType const Local<S> &
struct _ast1418; // TemplateSpecializationType const Local<S>
struct _ast1419; // TemplateSpecializationType Local<S>
struct _ast1420; // FunctionTemplateDecl operator==
struct _ast1421; // TemplateTypeParmDecl S
struct _ast1422; // CXXMethodDecl operator==
struct _ast1423; // ParmVarDecl that
struct _ast1424; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1425; // LValueReferenceType const PersistentBase<S> &
struct _ast1426; // TemplateSpecializationType const PersistentBase<S>
struct _ast1427; // TemplateSpecializationType PersistentBase<S>
struct _ast1428; // FunctionTemplateDecl operator!=
struct _ast1429; // TemplateTypeParmDecl S
struct _ast1430; // CXXMethodDecl operator!=
struct _ast1431; // ParmVarDecl that
struct _ast1432; // FunctionProtoType bool (const Local<S> &) const
struct _ast1433; // LValueReferenceType const Local<S> &
struct _ast1434; // TemplateSpecializationType const Local<S>
struct _ast1435; // TemplateSpecializationType Local<S>
struct _ast1436; // FunctionTemplateDecl operator!=
struct _ast1437; // TemplateTypeParmDecl S
struct _ast1438; // CXXMethodDecl operator!=
struct _ast1439; // ParmVarDecl that
struct _ast1440; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1441; // LValueReferenceType const Persistent<S> &
struct _ast1442; // TemplateSpecializationType const Persistent<S>
struct _ast1443; // TemplateSpecializationType Persistent<S>
struct _ast1444; // FunctionTemplateDecl Cast
struct _ast1445; // TemplateTypeParmDecl S
struct _ast1446; // CXXMethodDecl Cast
struct _ast1447; // ParmVarDecl that
struct _ast1448; // FunctionProtoType Local<v8::AccessorSignature> (Local<S>)
struct _ast1449; // TemplateSpecializationType Local<S>
struct _ast1450; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1451; // FunctionTemplateDecl As
struct _ast1452; // TemplateTypeParmDecl S
struct _ast1453; // CXXMethodDecl As
struct _ast1454; // FunctionProtoType Local<S> () const
struct _ast1455; // TemplateSpecializationType Local<S>
struct _ast1456; // CXXMethodDecl New
struct _ast1457; // ParmVarDecl isolate
struct _ast1458; // ParmVarDecl that
struct _ast1459; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
struct _ast1460; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1461; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1462; // CXXMethodDecl New
struct _ast1463; // ParmVarDecl isolate
struct _ast1464; // ParmVarDecl that
struct _ast1465; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
struct _ast1466; // LValueReferenceType const PersistentBase<v8::AccessorSignature> &
struct _ast1467; // TemplateSpecializationType const PersistentBase<v8::AccessorSignature>
struct _ast1468; // TemplateSpecializationType PersistentBase<v8::AccessorSignature>
struct _ast1469; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1470; // CXXMethodDecl New
struct _ast1471; // ParmVarDecl isolate
struct _ast1472; // ParmVarDecl that
struct _ast1473; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
struct _ast1474; // LValueReferenceType const TracedGlobal<v8::AccessorSignature> &
struct _ast1475; // TemplateSpecializationType const TracedGlobal<v8::AccessorSignature>
struct _ast1476; // TemplateSpecializationType TracedGlobal<v8::AccessorSignature>
struct _ast1477; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast1478; // CXXConstructorDecl Local
struct _ast1479; // ParmVarDecl 
struct _ast1480; // FunctionProtoType void (const v8::Local<v8::AccessorSignature> &)
struct _ast1481; // LValueReferenceType const v8::Local<v8::AccessorSignature> &
struct _ast1482; // CXXConstructorDecl Local
struct _ast1483; // ParmVarDecl 
struct _ast1484; // FunctionProtoType void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _ast1485; // RValueReferenceType v8::Local<v8::AccessorSignature> &&
struct _ast1486; // CXXDestructorDecl ~Local
struct _ast1487; // ClassTemplateSpecializationDecl Local
struct _ast1488; // CXXConstructorDecl Local
struct _ast1489; // PointerType v8::Local<v8::Signature> *
struct _ast1490; // RecordType v8::Local<v8::Signature>
struct _ast1491; // FunctionTemplateDecl Local
struct _ast1492; // TemplateTypeParmDecl S
struct _ast1493; // CXXConstructorDecl Local
struct _ast1494; // ParmVarDecl that
struct _ast1495; // FunctionProtoType void (Local<S>)
struct _ast1496; // TemplateSpecializationType Local<S>
struct _ast1497; // CXXConstructorDecl Local
struct _ast1498; // ParmVarDecl that
struct _ast1499; // FunctionProtoType void (Local<v8::Signature>)
struct _ast1500; // TemplateSpecializationType Local<v8::Signature>
struct _ast1501; // CXXMethodDecl IsEmpty
struct _ast1502; // PointerType const v8::Local<v8::Signature> *
struct _ast1503; // RecordType const v8::Local<v8::Signature>
struct _ast1504; // CXXMethodDecl Clear
struct _ast1505; // CXXMethodDecl operator->
struct _ast1506; // FunctionProtoType v8::Signature *() const
struct _ast1507; // PointerType v8::Signature *
struct _ast1508; // SubstTemplateTypeParmType v8::Signature
struct _ast1509; // CXXMethodDecl operator*
struct _ast1510; // FunctionTemplateDecl operator==
struct _ast1511; // TemplateTypeParmDecl S
struct _ast1512; // CXXMethodDecl operator==
struct _ast1513; // ParmVarDecl that
struct _ast1514; // FunctionProtoType bool (const Local<S> &) const
struct _ast1515; // LValueReferenceType const Local<S> &
struct _ast1516; // TemplateSpecializationType const Local<S>
struct _ast1517; // TemplateSpecializationType Local<S>
struct _ast1518; // FunctionTemplateDecl operator==
struct _ast1519; // TemplateTypeParmDecl S
struct _ast1520; // CXXMethodDecl operator==
struct _ast1521; // ParmVarDecl that
struct _ast1522; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1523; // LValueReferenceType const PersistentBase<S> &
struct _ast1524; // TemplateSpecializationType const PersistentBase<S>
struct _ast1525; // TemplateSpecializationType PersistentBase<S>
struct _ast1526; // FunctionTemplateDecl operator!=
struct _ast1527; // TemplateTypeParmDecl S
struct _ast1528; // CXXMethodDecl operator!=
struct _ast1529; // ParmVarDecl that
struct _ast1530; // FunctionProtoType bool (const Local<S> &) const
struct _ast1531; // LValueReferenceType const Local<S> &
struct _ast1532; // TemplateSpecializationType const Local<S>
struct _ast1533; // TemplateSpecializationType Local<S>
struct _ast1534; // FunctionTemplateDecl operator!=
struct _ast1535; // TemplateTypeParmDecl S
struct _ast1536; // CXXMethodDecl operator!=
struct _ast1537; // ParmVarDecl that
struct _ast1538; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1539; // LValueReferenceType const Persistent<S> &
struct _ast1540; // TemplateSpecializationType const Persistent<S>
struct _ast1541; // TemplateSpecializationType Persistent<S>
struct _ast1542; // FunctionTemplateDecl Cast
struct _ast1543; // TemplateTypeParmDecl S
struct _ast1544; // CXXMethodDecl Cast
struct _ast1545; // ParmVarDecl that
struct _ast1546; // FunctionProtoType Local<v8::Signature> (Local<S>)
struct _ast1547; // TemplateSpecializationType Local<S>
struct _ast1548; // TemplateSpecializationType Local<v8::Signature>
struct _ast1549; // FunctionTemplateDecl As
struct _ast1550; // TemplateTypeParmDecl S
struct _ast1551; // CXXMethodDecl As
struct _ast1552; // FunctionProtoType Local<S> () const
struct _ast1553; // TemplateSpecializationType Local<S>
struct _ast1554; // CXXMethodDecl New
struct _ast1555; // ParmVarDecl isolate
struct _ast1556; // ParmVarDecl that
struct _ast1557; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
struct _ast1558; // TemplateSpecializationType Local<v8::Signature>
struct _ast1559; // TemplateSpecializationType Local<v8::Signature>
struct _ast1560; // CXXMethodDecl New
struct _ast1561; // ParmVarDecl isolate
struct _ast1562; // ParmVarDecl that
struct _ast1563; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
struct _ast1564; // LValueReferenceType const PersistentBase<v8::Signature> &
struct _ast1565; // TemplateSpecializationType const PersistentBase<v8::Signature>
struct _ast1566; // TemplateSpecializationType PersistentBase<v8::Signature>
struct _ast1567; // TemplateSpecializationType Local<v8::Signature>
struct _ast1568; // CXXMethodDecl New
struct _ast1569; // ParmVarDecl isolate
struct _ast1570; // ParmVarDecl that
struct _ast1571; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
struct _ast1572; // LValueReferenceType const TracedGlobal<v8::Signature> &
struct _ast1573; // TemplateSpecializationType const TracedGlobal<v8::Signature>
struct _ast1574; // TemplateSpecializationType TracedGlobal<v8::Signature>
struct _ast1575; // TemplateSpecializationType Local<v8::Signature>
struct _ast1576; // CXXConstructorDecl Local
struct _ast1577; // ParmVarDecl 
struct _ast1578; // FunctionProtoType void (const v8::Local<v8::Signature> &)
struct _ast1579; // LValueReferenceType const v8::Local<v8::Signature> &
struct _ast1580; // CXXConstructorDecl Local
struct _ast1581; // ParmVarDecl 
struct _ast1582; // FunctionProtoType void (v8::Local<v8::Signature> &&) noexcept
struct _ast1583; // RValueReferenceType v8::Local<v8::Signature> &&
struct _ast1584; // CXXDestructorDecl ~Local
struct _ast1585; // ClassTemplateSpecializationDecl Local
struct _ast1586; // ClassTemplateSpecializationDecl Local
struct _ast1587; // ClassTemplateSpecializationDecl Local
struct _ast1588; // ClassTemplateSpecializationDecl Local
struct _ast1589; // ClassTemplateDecl MaybeLocal
struct _ast1590; // TemplateTypeParmDecl T
struct _ast1591; // CXXRecordDecl MaybeLocal
struct _ast1592; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1593; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1594; // CXXConstructorDecl MaybeLocal
struct _ast1595; // PointerType v8::MaybeLocal<v8::Value> *
struct _ast1596; // RecordType v8::MaybeLocal<v8::Value>
struct _ast1597; // FunctionTemplateDecl MaybeLocal
struct _ast1598; // TemplateTypeParmDecl S
struct _ast1599; // CXXConstructorDecl MaybeLocal
struct _ast1600; // ParmVarDecl that
struct _ast1601; // FunctionProtoType void (Local<S>)
struct _ast1602; // TemplateSpecializationType Local<S>
struct _ast1603; // CXXMethodDecl IsEmpty
struct _ast1604; // PointerType const v8::MaybeLocal<v8::Value> *
struct _ast1605; // RecordType const v8::MaybeLocal<v8::Value>
struct _ast1606; // FunctionTemplateDecl ToLocal
struct _ast1607; // TemplateTypeParmDecl S
struct _ast1608; // CXXMethodDecl ToLocal
struct _ast1609; // ParmVarDecl out
struct _ast1610; // FunctionProtoType bool (Local<S> *) const
struct _ast1611; // PointerType Local<S> *
struct _ast1612; // TemplateSpecializationType Local<S>
struct _ast1613; // CXXMethodDecl ToLocalChecked
struct _ast1614; // FunctionProtoType Local<v8::Value> ()
struct _ast1615; // TemplateSpecializationType Local<v8::Value>
struct _ast1616; // FunctionTemplateDecl FromMaybe
struct _ast1617; // TemplateTypeParmDecl S
struct _ast1618; // CXXMethodDecl FromMaybe
struct _ast1619; // ParmVarDecl default_value
struct _ast1620; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1621; // TemplateSpecializationType Local<S>
struct _ast1622; // TemplateSpecializationType Local<S>
struct _ast1623; // CXXConstructorDecl MaybeLocal
struct _ast1624; // ParmVarDecl 
struct _ast1625; // FunctionProtoType void (const v8::MaybeLocal<v8::Value> &)
struct _ast1626; // LValueReferenceType const v8::MaybeLocal<v8::Value> &
struct _ast1627; // CXXConstructorDecl MaybeLocal
struct _ast1628; // ParmVarDecl 
struct _ast1629; // FunctionProtoType void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _ast1630; // RValueReferenceType v8::MaybeLocal<v8::Value> &&
struct _ast1631; // CXXDestructorDecl ~MaybeLocal
struct _ast1632; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1633; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1634; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1635; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1636; // CXXConstructorDecl MaybeLocal
struct _ast1637; // PointerType v8::MaybeLocal<v8::String> *
struct _ast1638; // RecordType v8::MaybeLocal<v8::String>
struct _ast1639; // FunctionTemplateDecl MaybeLocal
struct _ast1640; // TemplateTypeParmDecl S
struct _ast1641; // CXXConstructorDecl MaybeLocal
struct _ast1642; // ParmVarDecl that
struct _ast1643; // FunctionProtoType void (Local<S>)
struct _ast1644; // TemplateSpecializationType Local<S>
struct _ast1645; // CXXMethodDecl IsEmpty
struct _ast1646; // PointerType const v8::MaybeLocal<v8::String> *
struct _ast1647; // RecordType const v8::MaybeLocal<v8::String>
struct _ast1648; // FunctionTemplateDecl ToLocal
struct _ast1649; // TemplateTypeParmDecl S
struct _ast1650; // CXXMethodDecl ToLocal
struct _ast1651; // ParmVarDecl out
struct _ast1652; // FunctionProtoType bool (Local<S> *) const
struct _ast1653; // PointerType Local<S> *
struct _ast1654; // TemplateSpecializationType Local<S>
struct _ast1655; // CXXMethodDecl ToLocalChecked
struct _ast1656; // FunctionProtoType Local<v8::String> ()
struct _ast1657; // TemplateSpecializationType Local<v8::String>
struct _ast1658; // FunctionTemplateDecl FromMaybe
struct _ast1659; // TemplateTypeParmDecl S
struct _ast1660; // CXXMethodDecl FromMaybe
struct _ast1661; // ParmVarDecl default_value
struct _ast1662; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1663; // TemplateSpecializationType Local<S>
struct _ast1664; // TemplateSpecializationType Local<S>
struct _ast1665; // CXXDestructorDecl ~MaybeLocal
struct _ast1666; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1667; // CXXConstructorDecl MaybeLocal
struct _ast1668; // PointerType v8::MaybeLocal<v8::Object> *
struct _ast1669; // RecordType v8::MaybeLocal<v8::Object>
struct _ast1670; // FunctionTemplateDecl MaybeLocal
struct _ast1671; // TemplateTypeParmDecl S
struct _ast1672; // CXXConstructorDecl MaybeLocal
struct _ast1673; // ParmVarDecl that
struct _ast1674; // FunctionProtoType void (Local<S>)
struct _ast1675; // TemplateSpecializationType Local<S>
struct _ast1676; // CXXMethodDecl IsEmpty
struct _ast1677; // PointerType const v8::MaybeLocal<v8::Object> *
struct _ast1678; // RecordType const v8::MaybeLocal<v8::Object>
struct _ast1679; // FunctionTemplateDecl ToLocal
struct _ast1680; // TemplateTypeParmDecl S
struct _ast1681; // CXXMethodDecl ToLocal
struct _ast1682; // ParmVarDecl out
struct _ast1683; // FunctionProtoType bool (Local<S> *) const
struct _ast1684; // PointerType Local<S> *
struct _ast1685; // TemplateSpecializationType Local<S>
struct _ast1686; // CXXMethodDecl ToLocalChecked
struct _ast1687; // FunctionProtoType Local<v8::Object> ()
struct _ast1688; // TemplateSpecializationType Local<v8::Object>
struct _ast1689; // FunctionTemplateDecl FromMaybe
struct _ast1690; // TemplateTypeParmDecl S
struct _ast1691; // CXXMethodDecl FromMaybe
struct _ast1692; // ParmVarDecl default_value
struct _ast1693; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1694; // TemplateSpecializationType Local<S>
struct _ast1695; // TemplateSpecializationType Local<S>
struct _ast1696; // CXXDestructorDecl ~MaybeLocal
struct _ast1697; // CXXConstructorDecl MaybeLocal
struct _ast1698; // ParmVarDecl 
struct _ast1699; // FunctionProtoType void (const v8::MaybeLocal<v8::Object> &)
struct _ast1700; // LValueReferenceType const v8::MaybeLocal<v8::Object> &
struct _ast1701; // CXXConstructorDecl MaybeLocal
struct _ast1702; // ParmVarDecl 
struct _ast1703; // FunctionProtoType void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _ast1704; // RValueReferenceType v8::MaybeLocal<v8::Object> &&
struct _ast1705; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1706; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1707; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1708; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1709; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1710; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1711; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1712; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1713; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1714; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1715; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1716; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1717; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1718; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1719; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1720; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1721; // CXXConstructorDecl MaybeLocal
struct _ast1722; // PointerType v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1723; // RecordType v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1724; // FunctionTemplateDecl MaybeLocal
struct _ast1725; // TemplateTypeParmDecl S
struct _ast1726; // CXXConstructorDecl MaybeLocal
struct _ast1727; // ParmVarDecl that
struct _ast1728; // FunctionProtoType void (Local<S>)
struct _ast1729; // TemplateSpecializationType Local<S>
struct _ast1730; // CXXMethodDecl IsEmpty
struct _ast1731; // PointerType const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1732; // RecordType const v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1733; // FunctionTemplateDecl ToLocal
struct _ast1734; // TemplateTypeParmDecl S
struct _ast1735; // CXXMethodDecl ToLocal
struct _ast1736; // ParmVarDecl out
struct _ast1737; // FunctionProtoType bool (Local<S> *) const
struct _ast1738; // PointerType Local<S> *
struct _ast1739; // TemplateSpecializationType Local<S>
struct _ast1740; // CXXMethodDecl ToLocalChecked
struct _ast1741; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast1742; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast1743; // FunctionTemplateDecl FromMaybe
struct _ast1744; // TemplateTypeParmDecl S
struct _ast1745; // CXXMethodDecl FromMaybe
struct _ast1746; // ParmVarDecl default_value
struct _ast1747; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1748; // TemplateSpecializationType Local<S>
struct _ast1749; // TemplateSpecializationType Local<S>
struct _ast1750; // CXXConstructorDecl MaybeLocal
struct _ast1751; // ParmVarDecl 
struct _ast1752; // FunctionProtoType void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ast1753; // LValueReferenceType const v8::MaybeLocal<v8::ObjectTemplate> &
struct _ast1754; // CXXConstructorDecl MaybeLocal
struct _ast1755; // ParmVarDecl 
struct _ast1756; // FunctionProtoType void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _ast1757; // RValueReferenceType v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ast1758; // CXXDestructorDecl ~MaybeLocal
struct _ast1759; // ClassTemplateSpecializationDecl MaybeLocal
struct _ast1760; // ClassTemplateDecl Eternal
struct _ast1761; // TemplateTypeParmDecl T
struct _ast1762; // CXXRecordDecl Eternal
struct _ast1763; // ClassTemplateDecl NonCopyablePersistentTraits
struct _ast1764; // TemplateTypeParmDecl T
struct _ast1765; // CXXRecordDecl NonCopyablePersistentTraits
struct _ast1766; // ClassTemplateSpecializationDecl NonCopyablePersistentTraits
struct _ast1767; // ClassTemplateSpecializationDecl NonCopyablePersistentTraits
struct _ast1768; // ClassTemplateDecl PersistentBase
struct _ast1769; // TemplateTypeParmDecl T
struct _ast1770; // CXXRecordDecl PersistentBase
struct _ast1771; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1772; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1773; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1774; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1775; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1776; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1777; // CXXMethodDecl Reset
struct _ast1778; // PointerType v8::PersistentBase<v8::Object> *
struct _ast1779; // RecordType v8::PersistentBase<v8::Object>
struct _ast1780; // FunctionTemplateDecl Reset
struct _ast1781; // TemplateTypeParmDecl S
struct _ast1782; // CXXMethodDecl Reset
struct _ast1783; // ParmVarDecl isolate
struct _ast1784; // ParmVarDecl other
struct _ast1785; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1786; // LValueReferenceType const Local<S> &
struct _ast1787; // TemplateSpecializationType const Local<S>
struct _ast1788; // TemplateSpecializationType Local<S>
struct _ast1789; // FunctionTemplateDecl Reset
struct _ast1790; // TemplateTypeParmDecl S
struct _ast1791; // CXXMethodDecl Reset
struct _ast1792; // ParmVarDecl isolate
struct _ast1793; // ParmVarDecl other
struct _ast1794; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast1795; // LValueReferenceType const PersistentBase<S> &
struct _ast1796; // TemplateSpecializationType const PersistentBase<S>
struct _ast1797; // TemplateSpecializationType PersistentBase<S>
struct _ast1798; // CXXMethodDecl IsEmpty
struct _ast1799; // PointerType const v8::PersistentBase<v8::Object> *
struct _ast1800; // RecordType const v8::PersistentBase<v8::Object>
struct _ast1801; // CXXMethodDecl Empty
struct _ast1802; // CXXMethodDecl Get
struct _ast1803; // ParmVarDecl isolate
struct _ast1804; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast1805; // TemplateSpecializationType Local<v8::Object>
struct _ast1806; // FunctionTemplateDecl operator==
struct _ast1807; // TemplateTypeParmDecl S
struct _ast1808; // CXXMethodDecl operator==
struct _ast1809; // ParmVarDecl that
struct _ast1810; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1811; // LValueReferenceType const PersistentBase<S> &
struct _ast1812; // TemplateSpecializationType const PersistentBase<S>
struct _ast1813; // TemplateSpecializationType PersistentBase<S>
struct _ast1814; // FunctionTemplateDecl operator==
struct _ast1815; // TemplateTypeParmDecl S
struct _ast1816; // CXXMethodDecl operator==
struct _ast1817; // ParmVarDecl that
struct _ast1818; // FunctionProtoType bool (const Local<S> &) const
struct _ast1819; // LValueReferenceType const Local<S> &
struct _ast1820; // TemplateSpecializationType const Local<S>
struct _ast1821; // TemplateSpecializationType Local<S>
struct _ast1822; // FunctionTemplateDecl operator!=
struct _ast1823; // TemplateTypeParmDecl S
struct _ast1824; // CXXMethodDecl operator!=
struct _ast1825; // ParmVarDecl that
struct _ast1826; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1827; // LValueReferenceType const PersistentBase<S> &
struct _ast1828; // TemplateSpecializationType const PersistentBase<S>
struct _ast1829; // TemplateSpecializationType PersistentBase<S>
struct _ast1830; // FunctionTemplateDecl operator!=
struct _ast1831; // TemplateTypeParmDecl S
struct _ast1832; // CXXMethodDecl operator!=
struct _ast1833; // ParmVarDecl that
struct _ast1834; // FunctionProtoType bool (const Local<S> &) const
struct _ast1835; // LValueReferenceType const Local<S> &
struct _ast1836; // TemplateSpecializationType const Local<S>
struct _ast1837; // TemplateSpecializationType Local<S>
struct _ast1838; // FunctionTemplateDecl SetWeak
struct _ast1839; // TemplateTypeParmDecl P
struct _ast1840; // CXXMethodDecl SetWeak
struct _ast1841; // ParmVarDecl parameter
struct _ast1842; // ParmVarDecl callback
struct _ast1843; // ParmVarDecl type
struct _ast1844; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast1845; // PointerType P *
struct _ast1846; // TemplateTypeParmType P
struct _ast1847; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast1848; // EnumType v8::WeakCallbackType
struct _ast1849; // BuiltinType int
struct _ast1850; // EnumDecl WeakCallbackType
struct _ast1851; // CXXMethodDecl SetWeak
struct _ast1852; // FunctionTemplateDecl ClearWeak
struct _ast1853; // TemplateTypeParmDecl P
struct _ast1854; // CXXMethodDecl ClearWeak
struct _ast1855; // FunctionProtoType P *()
struct _ast1856; // PointerType P *
struct _ast1857; // TemplateTypeParmType P
struct _ast1858; // CXXMethodDecl ClearWeak
struct _ast1859; // CXXMethodDecl AnnotateStrongRetainer
struct _ast1860; // ParmVarDecl label
struct _ast1861; // FunctionProtoType void (const char *)
struct _ast1862; // PointerType const char *
struct _ast1863; // BuiltinType const char
struct _ast1864; // BuiltinType char
struct _ast1865; // CXXMethodDecl IsWeak
struct _ast1866; // CXXMethodDecl SetWrapperClassId
struct _ast1867; // ParmVarDecl class_id
struct _ast1868; // FunctionProtoType void (uint16_t)
struct _ast1869; // TypedefType uint16_t
struct _ast1870; // CXXMethodDecl WrapperClassId
struct _ast1871; // FunctionProtoType uint16_t () const
struct _ast1872; // CXXConstructorDecl PersistentBase
struct _ast1873; // ParmVarDecl other
struct _ast1874; // FunctionProtoType void (const v8::PersistentBase<v8::Object> &)
struct _ast1875; // LValueReferenceType const v8::PersistentBase<v8::Object> &
struct _ast1876; // CXXMethodDecl operator=
struct _ast1877; // ParmVarDecl 
struct _ast1878; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1879; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1880; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1881; // CXXMethodDecl Reset
struct _ast1882; // PointerType v8::PersistentBase<v8::Promise> *
struct _ast1883; // RecordType v8::PersistentBase<v8::Promise>
struct _ast1884; // FunctionTemplateDecl Reset
struct _ast1885; // TemplateTypeParmDecl S
struct _ast1886; // CXXMethodDecl Reset
struct _ast1887; // ParmVarDecl isolate
struct _ast1888; // ParmVarDecl other
struct _ast1889; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1890; // LValueReferenceType const Local<S> &
struct _ast1891; // TemplateSpecializationType const Local<S>
struct _ast1892; // TemplateSpecializationType Local<S>
struct _ast1893; // FunctionTemplateDecl Reset
struct _ast1894; // TemplateTypeParmDecl S
struct _ast1895; // CXXMethodDecl Reset
struct _ast1896; // ParmVarDecl isolate
struct _ast1897; // ParmVarDecl other
struct _ast1898; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast1899; // LValueReferenceType const PersistentBase<S> &
struct _ast1900; // TemplateSpecializationType const PersistentBase<S>
struct _ast1901; // TemplateSpecializationType PersistentBase<S>
struct _ast1902; // CXXMethodDecl IsEmpty
struct _ast1903; // PointerType const v8::PersistentBase<v8::Promise> *
struct _ast1904; // RecordType const v8::PersistentBase<v8::Promise>
struct _ast1905; // CXXMethodDecl Empty
struct _ast1906; // CXXMethodDecl Get
struct _ast1907; // ParmVarDecl isolate
struct _ast1908; // FunctionProtoType Local<v8::Promise> (v8::Isolate *) const
struct _ast1909; // TemplateSpecializationType Local<v8::Promise>
struct _ast1910; // FunctionTemplateDecl operator==
struct _ast1911; // TemplateTypeParmDecl S
struct _ast1912; // CXXMethodDecl operator==
struct _ast1913; // ParmVarDecl that
struct _ast1914; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1915; // LValueReferenceType const PersistentBase<S> &
struct _ast1916; // TemplateSpecializationType const PersistentBase<S>
struct _ast1917; // TemplateSpecializationType PersistentBase<S>
struct _ast1918; // FunctionTemplateDecl operator==
struct _ast1919; // TemplateTypeParmDecl S
struct _ast1920; // CXXMethodDecl operator==
struct _ast1921; // ParmVarDecl that
struct _ast1922; // FunctionProtoType bool (const Local<S> &) const
struct _ast1923; // LValueReferenceType const Local<S> &
struct _ast1924; // TemplateSpecializationType const Local<S>
struct _ast1925; // TemplateSpecializationType Local<S>
struct _ast1926; // FunctionTemplateDecl operator!=
struct _ast1927; // TemplateTypeParmDecl S
struct _ast1928; // CXXMethodDecl operator!=
struct _ast1929; // ParmVarDecl that
struct _ast1930; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1931; // LValueReferenceType const PersistentBase<S> &
struct _ast1932; // TemplateSpecializationType const PersistentBase<S>
struct _ast1933; // TemplateSpecializationType PersistentBase<S>
struct _ast1934; // FunctionTemplateDecl operator!=
struct _ast1935; // TemplateTypeParmDecl S
struct _ast1936; // CXXMethodDecl operator!=
struct _ast1937; // ParmVarDecl that
struct _ast1938; // FunctionProtoType bool (const Local<S> &) const
struct _ast1939; // LValueReferenceType const Local<S> &
struct _ast1940; // TemplateSpecializationType const Local<S>
struct _ast1941; // TemplateSpecializationType Local<S>
struct _ast1942; // FunctionTemplateDecl SetWeak
struct _ast1943; // TemplateTypeParmDecl P
struct _ast1944; // CXXMethodDecl SetWeak
struct _ast1945; // ParmVarDecl parameter
struct _ast1946; // ParmVarDecl callback
struct _ast1947; // ParmVarDecl type
struct _ast1948; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast1949; // PointerType P *
struct _ast1950; // TemplateTypeParmType P
struct _ast1951; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast1952; // CXXMethodDecl SetWeak
struct _ast1953; // FunctionTemplateDecl ClearWeak
struct _ast1954; // TemplateTypeParmDecl P
struct _ast1955; // CXXMethodDecl ClearWeak
struct _ast1956; // FunctionProtoType P *()
struct _ast1957; // PointerType P *
struct _ast1958; // TemplateTypeParmType P
struct _ast1959; // CXXMethodDecl ClearWeak
struct _ast1960; // CXXMethodDecl AnnotateStrongRetainer
struct _ast1961; // ParmVarDecl label
struct _ast1962; // CXXMethodDecl IsWeak
struct _ast1963; // CXXMethodDecl SetWrapperClassId
struct _ast1964; // ParmVarDecl class_id
struct _ast1965; // CXXMethodDecl WrapperClassId
struct _ast1966; // CXXConstructorDecl PersistentBase
struct _ast1967; // ParmVarDecl other
struct _ast1968; // FunctionProtoType void (const v8::PersistentBase<v8::Promise> &)
struct _ast1969; // LValueReferenceType const v8::PersistentBase<v8::Promise> &
struct _ast1970; // CXXMethodDecl operator=
struct _ast1971; // ParmVarDecl 
struct _ast1972; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1973; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1974; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1975; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1976; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1977; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1978; // ClassTemplateSpecializationDecl PersistentBase
struct _ast1979; // ClassTemplateDecl Persistent
struct _ast1980; // TemplateTypeParmDecl T
struct _ast1981; // TemplateTypeParmDecl M
struct _ast1982; // CXXRecordDecl Persistent
struct _ast1983; // ClassTemplateSpecializationDecl Persistent
struct _ast1984; // CXXConstructorDecl Persistent
struct _ast1985; // PointerType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast1986; // RecordType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast1987; // FunctionTemplateDecl Persistent
struct _ast1988; // TemplateTypeParmDecl S
struct _ast1989; // CXXConstructorDecl Persistent
struct _ast1990; // ParmVarDecl isolate
struct _ast1991; // ParmVarDecl that
struct _ast1992; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast1993; // TemplateSpecializationType Local<S>
struct _ast1994; // FunctionTemplateDecl Persistent
struct _ast1995; // TemplateTypeParmDecl S
struct _ast1996; // TemplateTypeParmDecl M2
struct _ast1997; // CXXConstructorDecl Persistent
struct _ast1998; // ParmVarDecl isolate
struct _ast1999; // ParmVarDecl that
struct _ast2000; // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2001; // LValueReferenceType const Persistent<S, M2> &
struct _ast2002; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2003; // TemplateSpecializationType Persistent<S, M2>
struct _ast2004; // CXXConstructorDecl Persistent
struct _ast2005; // ParmVarDecl that
struct _ast2006; // FunctionProtoType void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2007; // LValueReferenceType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2008; // RecordType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2009; // FunctionTemplateDecl Persistent
struct _ast2010; // TemplateTypeParmDecl S
struct _ast2011; // TemplateTypeParmDecl M2
struct _ast2012; // CXXConstructorDecl Persistent
struct _ast2013; // ParmVarDecl that
struct _ast2014; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2015; // LValueReferenceType const Persistent<S, M2> &
struct _ast2016; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2017; // TemplateSpecializationType Persistent<S, M2>
struct _ast2018; // CXXConstructorDecl Persistent
struct _ast2019; // ParmVarDecl that
struct _ast2020; // FunctionProtoType void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2021; // LValueReferenceType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2022; // TemplateSpecializationType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2023; // TemplateSpecializationType Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2024; // CXXMethodDecl operator=
struct _ast2025; // ParmVarDecl that
struct _ast2026; // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2027; // LValueReferenceType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2028; // FunctionTemplateDecl operator=
struct _ast2029; // TemplateTypeParmDecl S
struct _ast2030; // TemplateTypeParmDecl M2
struct _ast2031; // CXXMethodDecl operator=
struct _ast2032; // ParmVarDecl that
struct _ast2033; // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _ast2034; // LValueReferenceType const Persistent<S, M2> &
struct _ast2035; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2036; // TemplateSpecializationType Persistent<S, M2>
struct _ast2037; // CXXMethodDecl operator=
struct _ast2038; // ParmVarDecl that
struct _ast2039; // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2040; // LValueReferenceType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2041; // TemplateSpecializationType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2042; // TemplateSpecializationType Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2043; // CXXDestructorDecl ~Persistent
struct _ast2044; // FunctionProtoType void ()
struct _ast2045; // FunctionTemplateDecl Cast
struct _ast2046; // TemplateTypeParmDecl S
struct _ast2047; // CXXMethodDecl Cast
struct _ast2048; // ParmVarDecl that
struct _ast2049; // FunctionProtoType Persistent<v8::Promise> &(const Persistent<S> &)
struct _ast2050; // LValueReferenceType const Persistent<S> &
struct _ast2051; // TemplateSpecializationType const Persistent<S>
struct _ast2052; // TemplateSpecializationType Persistent<S>
struct _ast2053; // LValueReferenceType Persistent<v8::Promise> &
struct _ast2054; // TemplateSpecializationType Persistent<v8::Promise>
struct _ast2055; // FunctionTemplateDecl As
struct _ast2056; // TemplateTypeParmDecl S
struct _ast2057; // CXXMethodDecl As
struct _ast2058; // FunctionProtoType Persistent<S> &() const
struct _ast2059; // LValueReferenceType Persistent<S> &
struct _ast2060; // TemplateSpecializationType Persistent<S>
struct _ast2061; // PointerType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2062; // ClassTemplateSpecializationDecl Persistent
struct _ast2063; // ClassTemplateSpecializationDecl Persistent
struct _ast2064; // ClassTemplateDecl Global
struct _ast2065; // TemplateTypeParmDecl T
struct _ast2066; // CXXRecordDecl Global
struct _ast2067; // ClassTemplateDecl TracedGlobal
struct _ast2068; // TemplateTypeParmDecl T
struct _ast2069; // CXXRecordDecl TracedGlobal
struct _ast2070; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2071; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2072; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2073; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2074; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2075; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2076; // CXXConstructorDecl TracedGlobal
struct _ast2077; // FunctionProtoType void ()
struct _ast2078; // PointerType v8::TracedGlobal<v8::Object> *
struct _ast2079; // RecordType v8::TracedGlobal<v8::Object>
struct _ast2080; // CXXDestructorDecl ~TracedGlobal
struct _ast2081; // FunctionProtoType void ()
struct _ast2082; // FunctionTemplateDecl TracedGlobal
struct _ast2083; // TemplateTypeParmDecl S
struct _ast2084; // CXXConstructorDecl TracedGlobal
struct _ast2085; // ParmVarDecl isolate
struct _ast2086; // ParmVarDecl that
struct _ast2087; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2088; // TemplateSpecializationType Local<S>
struct _ast2089; // CXXConstructorDecl TracedGlobal
struct _ast2090; // ParmVarDecl other
struct _ast2091; // FunctionProtoType void (v8::TracedGlobal<v8::Object> &&)
struct _ast2092; // RValueReferenceType v8::TracedGlobal<v8::Object> &&
struct _ast2093; // FunctionTemplateDecl operator=
struct _ast2094; // TemplateTypeParmDecl S
struct _ast2095; // CXXMethodDecl operator=
struct _ast2096; // ParmVarDecl rhs
struct _ast2097; // FunctionProtoType v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _ast2098; // RValueReferenceType TracedGlobal<S> &&
struct _ast2099; // TemplateSpecializationType TracedGlobal<S>
struct _ast2100; // LValueReferenceType v8::TracedGlobal<v8::Object> &
struct _ast2101; // CXXConstructorDecl TracedGlobal
struct _ast2102; // ParmVarDecl 
struct _ast2103; // FunctionProtoType void (const v8::TracedGlobal<v8::Object> &)
struct _ast2104; // LValueReferenceType const v8::TracedGlobal<v8::Object> &
struct _ast2105; // RecordType const v8::TracedGlobal<v8::Object>
struct _ast2106; // CXXMethodDecl operator=
struct _ast2107; // ParmVarDecl 
struct _ast2108; // CXXMethodDecl IsEmpty
struct _ast2109; // PointerType const v8::TracedGlobal<v8::Object> *
struct _ast2110; // CXXMethodDecl Reset
struct _ast2111; // FunctionTemplateDecl Reset
struct _ast2112; // TemplateTypeParmDecl S
struct _ast2113; // CXXMethodDecl Reset
struct _ast2114; // ParmVarDecl isolate
struct _ast2115; // ParmVarDecl other
struct _ast2116; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2117; // LValueReferenceType const Local<S> &
struct _ast2118; // TemplateSpecializationType const Local<S>
struct _ast2119; // TemplateSpecializationType Local<S>
struct _ast2120; // CXXMethodDecl Get
struct _ast2121; // ParmVarDecl isolate
struct _ast2122; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast2123; // TemplateSpecializationType Local<v8::Object>
struct _ast2124; // FunctionTemplateDecl As
struct _ast2125; // TemplateTypeParmDecl S
struct _ast2126; // CXXMethodDecl As
struct _ast2127; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2128; // LValueReferenceType TracedGlobal<S> &
struct _ast2129; // TemplateSpecializationType TracedGlobal<S>
struct _ast2130; // FunctionTemplateDecl operator==
struct _ast2131; // TemplateTypeParmDecl S
struct _ast2132; // CXXMethodDecl operator==
struct _ast2133; // ParmVarDecl that
struct _ast2134; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2135; // LValueReferenceType const TracedGlobal<S> &
struct _ast2136; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2137; // TemplateSpecializationType TracedGlobal<S>
struct _ast2138; // FunctionTemplateDecl operator==
struct _ast2139; // TemplateTypeParmDecl S
struct _ast2140; // CXXMethodDecl operator==
struct _ast2141; // ParmVarDecl that
struct _ast2142; // FunctionProtoType bool (const Local<S> &) const
struct _ast2143; // LValueReferenceType const Local<S> &
struct _ast2144; // TemplateSpecializationType const Local<S>
struct _ast2145; // TemplateSpecializationType Local<S>
struct _ast2146; // FunctionTemplateDecl operator!=
struct _ast2147; // TemplateTypeParmDecl S
struct _ast2148; // CXXMethodDecl operator!=
struct _ast2149; // ParmVarDecl that
struct _ast2150; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2151; // LValueReferenceType const TracedGlobal<S> &
struct _ast2152; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2153; // TemplateSpecializationType TracedGlobal<S>
struct _ast2154; // FunctionTemplateDecl operator!=
struct _ast2155; // TemplateTypeParmDecl S
struct _ast2156; // CXXMethodDecl operator!=
struct _ast2157; // ParmVarDecl that
struct _ast2158; // FunctionProtoType bool (const Local<S> &) const
struct _ast2159; // LValueReferenceType const Local<S> &
struct _ast2160; // TemplateSpecializationType const Local<S>
struct _ast2161; // TemplateSpecializationType Local<S>
struct _ast2162; // CXXMethodDecl SetWrapperClassId
struct _ast2163; // ParmVarDecl class_id
struct _ast2164; // CXXMethodDecl WrapperClassId
struct _ast2165; // CXXMethodDecl SetFinalizationCallback
struct _ast2166; // ParmVarDecl parameter
struct _ast2167; // ParmVarDecl callback
struct _ast2168; // FunctionProtoType void (void *, WeakCallbackInfo<void>::Callback)
struct _ast2169; // PointerType void *
struct _ast2170; // ElaboratedType WeakCallbackInfo<void>::Callback
struct _ast2171; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2172; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2173; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2174; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2175; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2176; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2177; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2178; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2179; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2180; // ClassTemplateSpecializationDecl TracedGlobal
struct _ast2181; // ClassTemplateDecl PersistentValueMap
struct _ast2182; // TemplateTypeParmDecl K
struct _ast2183; // TemplateTypeParmDecl V
struct _ast2184; // TemplateTypeParmDecl T
struct _ast2185; // CXXRecordDecl PersistentValueMap
struct _ast2186; // ClassTemplateDecl PersistentValueMapBase
struct _ast2187; // TemplateTypeParmDecl K
struct _ast2188; // TemplateTypeParmDecl V
struct _ast2189; // TemplateTypeParmDecl T
struct _ast2190; // CXXRecordDecl PersistentValueMapBase
struct _ast2191; // ClassTemplateDecl GlobalValueMap
struct _ast2192; // TemplateTypeParmDecl K
struct _ast2193; // TemplateTypeParmDecl V
struct _ast2194; // TemplateTypeParmDecl T
struct _ast2195; // CXXRecordDecl GlobalValueMap
struct _ast2196; // ClassTemplateDecl PersistentValueVector
struct _ast2197; // TemplateTypeParmDecl V
struct _ast2198; // TemplateTypeParmDecl T
struct _ast2199; // CXXRecordDecl PersistentValueVector
struct _ast2200; // ClassTemplateDecl WeakCallbackObject
struct _ast2201; // TemplateTypeParmDecl T
struct _ast2202; // TemplateTypeParmDecl P
struct _ast2203; // CXXRecordDecl WeakCallbackObject
struct _ast2204; // ClassTemplateDecl FunctionCallbackInfo
struct _ast2205; // TemplateTypeParmDecl T
struct _ast2206; // CXXRecordDecl FunctionCallbackInfo
struct _ast2207; // ClassTemplateSpecializationDecl FunctionCallbackInfo
struct _ast2208; // ClassTemplateDecl PropertyCallbackInfo
struct _ast2209; // TemplateTypeParmDecl T
struct _ast2210; // CXXRecordDecl PropertyCallbackInfo
struct _ast2211; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2212; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2213; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2214; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2215; // ClassTemplateSpecializationDecl PropertyCallbackInfo
struct _ast2216; // CXXRecordDecl CallHandlerHelper
struct _ast2217; // CXXRecordDecl EscapableHandleScope
struct _ast2218; // ClassTemplateDecl ReturnValue
struct _ast2219; // TemplateTypeParmDecl T
struct _ast2220; // CXXRecordDecl ReturnValue
struct _ast2221; // NamespaceDecl debug
struct _ast2222; // CXXRecordDecl ConsoleCallArguments
struct _ast2223; // TemplateTypeParmDecl T
struct _ast2224; // CXXRecordDecl Local
struct _ast2225; // CXXConstructorDecl Local<T>
struct _ast2226; // PointerType Local<T> *
struct _ast2227; // InjectedClassNameType Local<T>
struct _ast2228; // FunctionTemplateDecl Local<T>
struct _ast2229; // TemplateTypeParmDecl S
struct _ast2230; // CXXConstructorDecl Local<T>
struct _ast2231; // ParmVarDecl that
struct _ast2232; // FunctionProtoType void (Local<S>)
struct _ast2233; // TemplateSpecializationType Local<S>
struct _ast2234; // CXXMethodDecl IsEmpty
struct _ast2235; // PointerType const Local<T> *
struct _ast2236; // InjectedClassNameType const Local<T>
struct _ast2237; // CXXMethodDecl Clear
struct _ast2238; // CXXMethodDecl operator->
struct _ast2239; // FunctionProtoType T *() const
struct _ast2240; // PointerType T *
struct _ast2241; // TemplateTypeParmType T
struct _ast2242; // CXXMethodDecl operator*
struct _ast2243; // FunctionTemplateDecl operator==
struct _ast2244; // TemplateTypeParmDecl S
struct _ast2245; // CXXMethodDecl operator==
struct _ast2246; // ParmVarDecl that
struct _ast2247; // FunctionProtoType bool (const Local<S> &) const
struct _ast2248; // LValueReferenceType const Local<S> &
struct _ast2249; // TemplateSpecializationType const Local<S>
struct _ast2250; // TemplateSpecializationType Local<S>
struct _ast2251; // FunctionTemplateDecl operator==
struct _ast2252; // TemplateTypeParmDecl S
struct _ast2253; // CXXMethodDecl operator==
struct _ast2254; // ParmVarDecl that
struct _ast2255; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2256; // LValueReferenceType const PersistentBase<S> &
struct _ast2257; // TemplateSpecializationType const PersistentBase<S>
struct _ast2258; // TemplateSpecializationType PersistentBase<S>
struct _ast2259; // FunctionTemplateDecl operator!=
struct _ast2260; // TemplateTypeParmDecl S
struct _ast2261; // CXXMethodDecl operator!=
struct _ast2262; // ParmVarDecl that
struct _ast2263; // FunctionProtoType bool (const Local<S> &) const
struct _ast2264; // LValueReferenceType const Local<S> &
struct _ast2265; // TemplateSpecializationType const Local<S>
struct _ast2266; // TemplateSpecializationType Local<S>
struct _ast2267; // FunctionTemplateDecl operator!=
struct _ast2268; // TemplateTypeParmDecl S
struct _ast2269; // CXXMethodDecl operator!=
struct _ast2270; // ParmVarDecl that
struct _ast2271; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast2272; // LValueReferenceType const Persistent<S> &
struct _ast2273; // TemplateSpecializationType const Persistent<S>
struct _ast2274; // TemplateSpecializationType Persistent<S>
struct _ast2275; // FunctionTemplateDecl Cast
struct _ast2276; // TemplateTypeParmDecl S
struct _ast2277; // CXXMethodDecl Cast
struct _ast2278; // ParmVarDecl that
struct _ast2279; // FunctionProtoType Local<T> (Local<S>)
struct _ast2280; // TemplateSpecializationType Local<S>
struct _ast2281; // TemplateSpecializationType Local<T>
struct _ast2282; // FunctionTemplateDecl As
struct _ast2283; // TemplateTypeParmDecl S
struct _ast2284; // CXXMethodDecl As
struct _ast2285; // FunctionProtoType Local<S> () const
struct _ast2286; // TemplateSpecializationType Local<S>
struct _ast2287; // CXXMethodDecl New
struct _ast2288; // ParmVarDecl isolate
struct _ast2289; // ParmVarDecl that
struct _ast2290; // FunctionProtoType Local<T> (v8::Isolate *, Local<T>)
struct _ast2291; // TemplateSpecializationType Local<T>
struct _ast2292; // TemplateSpecializationType Local<T>
struct _ast2293; // CXXMethodDecl New
struct _ast2294; // ParmVarDecl isolate
struct _ast2295; // ParmVarDecl that
struct _ast2296; // FunctionProtoType Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _ast2297; // LValueReferenceType const PersistentBase<T> &
struct _ast2298; // TemplateSpecializationType const PersistentBase<T>
struct _ast2299; // TemplateSpecializationType PersistentBase<T>
struct _ast2300; // TemplateSpecializationType Local<T>
struct _ast2301; // CXXMethodDecl New
struct _ast2302; // ParmVarDecl isolate
struct _ast2303; // ParmVarDecl that
struct _ast2304; // FunctionProtoType Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _ast2305; // LValueReferenceType const TracedGlobal<T> &
struct _ast2306; // TemplateSpecializationType const TracedGlobal<T>
struct _ast2307; // TemplateSpecializationType TracedGlobal<T>
struct _ast2308; // TemplateSpecializationType Local<T>
struct _ast2309; // TypeAliasTemplateDecl Handle
struct _ast2310; // TypeAliasDecl Handle
struct _ast2311; // TemplateSpecializationType Local<T>
struct _ast2312; // TemplateTypeParmDecl T
struct _ast2313; // TemplateTypeParmDecl T
struct _ast2314; // CXXRecordDecl MaybeLocal
struct _ast2315; // CXXConstructorDecl MaybeLocal<T>
struct _ast2316; // PointerType MaybeLocal<T> *
struct _ast2317; // InjectedClassNameType MaybeLocal<T>
struct _ast2318; // FunctionTemplateDecl MaybeLocal<T>
struct _ast2319; // TemplateTypeParmDecl S
struct _ast2320; // CXXConstructorDecl MaybeLocal<T>
struct _ast2321; // ParmVarDecl that
struct _ast2322; // FunctionProtoType void (Local<S>)
struct _ast2323; // TemplateSpecializationType Local<S>
struct _ast2324; // CXXMethodDecl IsEmpty
struct _ast2325; // PointerType const MaybeLocal<T> *
struct _ast2326; // InjectedClassNameType const MaybeLocal<T>
struct _ast2327; // FunctionTemplateDecl ToLocal
struct _ast2328; // TemplateTypeParmDecl S
struct _ast2329; // CXXMethodDecl ToLocal
struct _ast2330; // ParmVarDecl out
struct _ast2331; // FunctionProtoType bool (Local<S> *) const
struct _ast2332; // PointerType Local<S> *
struct _ast2333; // TemplateSpecializationType Local<S>
struct _ast2334; // CXXMethodDecl ToLocalChecked
struct _ast2335; // FunctionProtoType Local<T> ()
struct _ast2336; // TemplateSpecializationType Local<T>
struct _ast2337; // FunctionTemplateDecl FromMaybe
struct _ast2338; // TemplateTypeParmDecl S
struct _ast2339; // CXXMethodDecl FromMaybe
struct _ast2340; // ParmVarDecl default_value
struct _ast2341; // FunctionProtoType Local<S> (Local<S>) const
struct _ast2342; // TemplateSpecializationType Local<S>
struct _ast2343; // TemplateSpecializationType Local<S>
struct _ast2344; // TemplateTypeParmDecl T
struct _ast2345; // CXXRecordDecl Eternal
struct _ast2346; // CXXConstructorDecl Eternal<T>
struct _ast2347; // PointerType Eternal<T> *
struct _ast2348; // InjectedClassNameType Eternal<T>
struct _ast2349; // FunctionTemplateDecl Eternal<T>
struct _ast2350; // TemplateTypeParmDecl S
struct _ast2351; // CXXConstructorDecl Eternal<T>
struct _ast2352; // ParmVarDecl isolate
struct _ast2353; // ParmVarDecl handle
struct _ast2354; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2355; // TemplateSpecializationType Local<S>
struct _ast2356; // CXXMethodDecl Get
struct _ast2357; // ParmVarDecl isolate
struct _ast2358; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2359; // TemplateSpecializationType Local<T>
struct _ast2360; // PointerType const Eternal<T> *
struct _ast2361; // InjectedClassNameType const Eternal<T>
struct _ast2362; // CXXMethodDecl IsEmpty
struct _ast2363; // FunctionTemplateDecl Set
struct _ast2364; // TemplateTypeParmDecl S
struct _ast2365; // CXXMethodDecl Set
struct _ast2366; // ParmVarDecl isolate
struct _ast2367; // ParmVarDecl handle
struct _ast2368; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2369; // TemplateSpecializationType Local<S>
struct _ast2370; // VarDecl kInternalFieldsInWeakCallback
struct _ast2371; // VarDecl kEmbedderFieldsInWeakCallback
struct _ast2372; // ClassTemplateDecl WeakCallbackInfo
struct _ast2373; // TemplateTypeParmDecl T
struct _ast2374; // CXXRecordDecl WeakCallbackInfo
struct _ast2375; // CXXRecordDecl WeakCallbackInfo
struct _ast2376; // TypedefDecl Callback
struct _ast2377; // PointerType void (*)(const WeakCallbackInfo<T> &)
struct _ast2378; // ParenType void (const WeakCallbackInfo<T> &)
struct _ast2379; // FunctionProtoType void (const WeakCallbackInfo<T> &)
struct _ast2380; // LValueReferenceType const WeakCallbackInfo<T> &
struct _ast2381; // TemplateSpecializationType const WeakCallbackInfo<T>
struct _ast2382; // TemplateSpecializationType WeakCallbackInfo<T>
struct _ast2383; // CXXConstructorDecl WeakCallbackInfo<T>
struct _ast2384; // ParmVarDecl isolate
struct _ast2385; // ParmVarDecl parameter
struct _ast2386; // ParmVarDecl embedder_fields
struct _ast2387; // ParmVarDecl callback
struct _ast2388; // FunctionProtoType void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
struct _ast2389; // PointerType T *
struct _ast2390; // TemplateTypeParmType T
struct _ast2391; // DecayedType void **
struct _ast2392; // PointerType v8::WeakCallbackInfo::Callback *
struct _ast2393; // TypedefType v8::WeakCallbackInfo::Callback
struct _ast2394; // PointerType WeakCallbackInfo<T> *
struct _ast2395; // InjectedClassNameType WeakCallbackInfo<T>
struct _ast2396; // CXXMethodDecl GetIsolate
struct _ast2397; // FunctionProtoType v8::Isolate *() const
struct _ast2398; // PointerType const WeakCallbackInfo<T> *
struct _ast2399; // InjectedClassNameType const WeakCallbackInfo<T>
struct _ast2400; // CXXMethodDecl GetParameter
struct _ast2401; // FunctionProtoType T *() const
struct _ast2402; // CXXMethodDecl GetInternalField
struct _ast2403; // ParmVarDecl index
struct _ast2404; // FunctionProtoType void *(int) const
struct _ast2405; // CXXMethodDecl SetSecondPassCallback
struct _ast2406; // ParmVarDecl callback
struct _ast2407; // FunctionProtoType void (v8::WeakCallbackInfo::Callback) const
struct _ast2408; // ClassTemplateSpecializationDecl WeakCallbackInfo
struct _ast2409; // TypedefDecl Callback
struct _ast2410; // PointerType void (*)(const WeakCallbackInfo<void> &)
struct _ast2411; // ParenType void (const WeakCallbackInfo<void> &)
struct _ast2412; // FunctionProtoType void (const WeakCallbackInfo<void> &)
struct _ast2413; // LValueReferenceType const WeakCallbackInfo<void> &
struct _ast2414; // TemplateSpecializationType const WeakCallbackInfo<void>
struct _ast2415; // TemplateSpecializationType WeakCallbackInfo<void>
struct _ast2416; // ParmVarDecl data
struct _ast2417; // CXXConstructorDecl WeakCallbackInfo
struct _ast2418; // ParmVarDecl isolate
struct _ast2419; // ParmVarDecl parameter
struct _ast2420; // ParmVarDecl embedder_fields
struct _ast2421; // ParmVarDecl callback
struct _ast2422; // FunctionProtoType void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
struct _ast2423; // PointerType void *
struct _ast2424; // SubstTemplateTypeParmType void
struct _ast2425; // PointerType v8::WeakCallbackInfo<void>::Callback *
struct _ast2426; // TypedefType v8::WeakCallbackInfo<void>::Callback
struct _ast2427; // PointerType v8::WeakCallbackInfo<void> *
struct _ast2428; // RecordType v8::WeakCallbackInfo<void>
struct _ast2429; // CXXMethodDecl GetIsolate
struct _ast2430; // PointerType const v8::WeakCallbackInfo<void> *
struct _ast2431; // RecordType const v8::WeakCallbackInfo<void>
struct _ast2432; // CXXMethodDecl GetParameter
struct _ast2433; // FunctionProtoType void *() const
struct _ast2434; // CXXMethodDecl GetInternalField
struct _ast2435; // ParmVarDecl index
struct _ast2436; // CXXMethodDecl SetSecondPassCallback
struct _ast2437; // ParmVarDecl callback
struct _ast2438; // FunctionProtoType void (v8::WeakCallbackInfo<void>::Callback) const
struct _ast2439; // EnumConstantDecl kParameter
struct _ast2440; // EnumConstantDecl kInternalFields
struct _ast2441; // EnumConstantDecl kFinalizer
struct _ast2442; // TemplateTypeParmDecl T
struct _ast2443; // CXXRecordDecl PersistentBase
struct _ast2444; // CXXMethodDecl Reset
struct _ast2445; // PointerType PersistentBase<T> *
struct _ast2446; // InjectedClassNameType PersistentBase<T>
struct _ast2447; // FunctionTemplateDecl Reset
struct _ast2448; // TemplateTypeParmDecl S
struct _ast2449; // CXXMethodDecl Reset
struct _ast2450; // ParmVarDecl isolate
struct _ast2451; // ParmVarDecl other
struct _ast2452; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2453; // LValueReferenceType const Local<S> &
struct _ast2454; // TemplateSpecializationType const Local<S>
struct _ast2455; // TemplateSpecializationType Local<S>
struct _ast2456; // FunctionTemplateDecl Reset
struct _ast2457; // TemplateTypeParmDecl S
struct _ast2458; // CXXMethodDecl Reset
struct _ast2459; // ParmVarDecl isolate
struct _ast2460; // ParmVarDecl other
struct _ast2461; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2462; // LValueReferenceType const PersistentBase<S> &
struct _ast2463; // TemplateSpecializationType const PersistentBase<S>
struct _ast2464; // TemplateSpecializationType PersistentBase<S>
struct _ast2465; // CXXMethodDecl IsEmpty
struct _ast2466; // PointerType const PersistentBase<T> *
struct _ast2467; // InjectedClassNameType const PersistentBase<T>
struct _ast2468; // CXXMethodDecl Empty
struct _ast2469; // CXXMethodDecl Get
struct _ast2470; // ParmVarDecl isolate
struct _ast2471; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2472; // TemplateSpecializationType Local<T>
struct _ast2473; // FunctionTemplateDecl operator==
struct _ast2474; // TemplateTypeParmDecl S
struct _ast2475; // CXXMethodDecl operator==
struct _ast2476; // ParmVarDecl that
struct _ast2477; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2478; // LValueReferenceType const PersistentBase<S> &
struct _ast2479; // TemplateSpecializationType const PersistentBase<S>
struct _ast2480; // TemplateSpecializationType PersistentBase<S>
struct _ast2481; // FunctionTemplateDecl operator==
struct _ast2482; // TemplateTypeParmDecl S
struct _ast2483; // CXXMethodDecl operator==
struct _ast2484; // ParmVarDecl that
struct _ast2485; // FunctionProtoType bool (const Local<S> &) const
struct _ast2486; // LValueReferenceType const Local<S> &
struct _ast2487; // TemplateSpecializationType const Local<S>
struct _ast2488; // TemplateSpecializationType Local<S>
struct _ast2489; // FunctionTemplateDecl operator!=
struct _ast2490; // TemplateTypeParmDecl S
struct _ast2491; // CXXMethodDecl operator!=
struct _ast2492; // ParmVarDecl that
struct _ast2493; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2494; // LValueReferenceType const PersistentBase<S> &
struct _ast2495; // TemplateSpecializationType const PersistentBase<S>
struct _ast2496; // TemplateSpecializationType PersistentBase<S>
struct _ast2497; // FunctionTemplateDecl operator!=
struct _ast2498; // TemplateTypeParmDecl S
struct _ast2499; // CXXMethodDecl operator!=
struct _ast2500; // ParmVarDecl that
struct _ast2501; // FunctionProtoType bool (const Local<S> &) const
struct _ast2502; // LValueReferenceType const Local<S> &
struct _ast2503; // TemplateSpecializationType const Local<S>
struct _ast2504; // TemplateSpecializationType Local<S>
struct _ast2505; // FunctionTemplateDecl SetWeak
struct _ast2506; // TemplateTypeParmDecl P
struct _ast2507; // CXXMethodDecl SetWeak
struct _ast2508; // ParmVarDecl parameter
struct _ast2509; // ParmVarDecl callback
struct _ast2510; // ParmVarDecl type
struct _ast2511; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2512; // PointerType P *
struct _ast2513; // TemplateTypeParmType P
struct _ast2514; // DependentNameType typename WeakCallbackInfo<P>::Callback
struct _ast2515; // CXXMethodDecl SetWeak
struct _ast2516; // FunctionTemplateDecl ClearWeak
struct _ast2517; // TemplateTypeParmDecl P
struct _ast2518; // CXXMethodDecl ClearWeak
struct _ast2519; // FunctionProtoType P *()
struct _ast2520; // PointerType P *
struct _ast2521; // TemplateTypeParmType P
struct _ast2522; // CXXMethodDecl ClearWeak
struct _ast2523; // CXXMethodDecl AnnotateStrongRetainer
struct _ast2524; // ParmVarDecl label
struct _ast2525; // CXXMethodDecl IsWeak
struct _ast2526; // CXXMethodDecl SetWrapperClassId
struct _ast2527; // ParmVarDecl class_id
struct _ast2528; // CXXMethodDecl WrapperClassId
struct _ast2529; // CXXConstructorDecl PersistentBase<T>
struct _ast2530; // ParmVarDecl other
struct _ast2531; // FunctionProtoType void (const PersistentBase<T> &)
struct _ast2532; // LValueReferenceType const PersistentBase<T> &
struct _ast2533; // CXXMethodDecl operator=
struct _ast2534; // ParmVarDecl 
struct _ast2535; // TemplateTypeParmDecl T
struct _ast2536; // CXXRecordDecl NonCopyablePersistentTraits
struct _ast2537; // TypedefDecl NonCopyablePersistent
struct _ast2538; // TemplateSpecializationType Persistent<T, NonCopyablePersistentTraits<T> >
struct _ast2539; // VarDecl kResetInDestructor
struct _ast2540; // FunctionTemplateDecl Copy
struct _ast2541; // TemplateTypeParmDecl S
struct _ast2542; // TemplateTypeParmDecl M
struct _ast2543; // CXXMethodDecl Copy
struct _ast2544; // ParmVarDecl source
struct _ast2545; // ParmVarDecl dest
struct _ast2546; // FunctionProtoType void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ast2547; // LValueReferenceType const Persistent<S, M> &
struct _ast2548; // TemplateSpecializationType const Persistent<S, M>
struct _ast2549; // TemplateSpecializationType Persistent<S, M>
struct _ast2550; // PointerType v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ast2551; // TypedefType v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ast2552; // FunctionTemplateDecl Uncompilable
struct _ast2553; // TemplateTypeParmDecl O
struct _ast2554; // CXXMethodDecl Uncompilable
struct _ast2555; // ClassTemplateDecl CopyablePersistentTraits
struct _ast2556; // TemplateTypeParmDecl T
struct _ast2557; // CXXRecordDecl CopyablePersistentTraits
struct _ast2558; // CXXRecordDecl CopyablePersistentTraits
struct _ast2559; // TypedefDecl CopyablePersistent
struct _ast2560; // TemplateSpecializationType Persistent<T, CopyablePersistentTraits<T> >
struct _ast2561; // VarDecl kResetInDestructor
struct _ast2562; // FunctionTemplateDecl Copy
struct _ast2563; // TemplateTypeParmDecl S
struct _ast2564; // TemplateTypeParmDecl M
struct _ast2565; // CXXMethodDecl Copy
struct _ast2566; // ParmVarDecl source
struct _ast2567; // ParmVarDecl dest
struct _ast2568; // FunctionProtoType void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ast2569; // LValueReferenceType const Persistent<S, M> &
struct _ast2570; // TemplateSpecializationType const Persistent<S, M>
struct _ast2571; // TemplateSpecializationType Persistent<S, M>
struct _ast2572; // PointerType v8::CopyablePersistentTraits::CopyablePersistent *
struct _ast2573; // TypedefType v8::CopyablePersistentTraits::CopyablePersistent
struct _ast2574; // ClassTemplateSpecializationDecl CopyablePersistentTraits
struct _ast2575; // TemplateTypeParmDecl T
struct _ast2576; // TemplateTypeParmDecl M
struct _ast2577; // CXXRecordDecl Persistent
struct _ast2578; // CXXConstructorDecl Persistent<T, M>
struct _ast2579; // PointerType Persistent<T, M> *
struct _ast2580; // InjectedClassNameType Persistent<T, M>
struct _ast2581; // FunctionTemplateDecl Persistent<T, M>
struct _ast2582; // TemplateTypeParmDecl S
struct _ast2583; // CXXConstructorDecl Persistent<T, M>
struct _ast2584; // ParmVarDecl isolate
struct _ast2585; // ParmVarDecl that
struct _ast2586; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2587; // TemplateSpecializationType Local<S>
struct _ast2588; // FunctionTemplateDecl Persistent<T, M>
struct _ast2589; // TemplateTypeParmDecl S
struct _ast2590; // TemplateTypeParmDecl M2
struct _ast2591; // CXXConstructorDecl Persistent<T, M>
struct _ast2592; // ParmVarDecl isolate
struct _ast2593; // ParmVarDecl that
struct _ast2594; // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2595; // LValueReferenceType const Persistent<S, M2> &
struct _ast2596; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2597; // TemplateSpecializationType Persistent<S, M2>
struct _ast2598; // CXXConstructorDecl Persistent<T, M>
struct _ast2599; // ParmVarDecl that
struct _ast2600; // FunctionProtoType void (const Persistent<T, M> &)
struct _ast2601; // LValueReferenceType const Persistent<T, M> &
struct _ast2602; // InjectedClassNameType const Persistent<T, M>
struct _ast2603; // FunctionTemplateDecl Persistent<T, M>
struct _ast2604; // TemplateTypeParmDecl S
struct _ast2605; // TemplateTypeParmDecl M2
struct _ast2606; // CXXConstructorDecl Persistent<T, M>
struct _ast2607; // ParmVarDecl that
struct _ast2608; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2609; // LValueReferenceType const Persistent<S, M2> &
struct _ast2610; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2611; // TemplateSpecializationType Persistent<S, M2>
struct _ast2612; // CXXMethodDecl operator=
struct _ast2613; // ParmVarDecl that
struct _ast2614; // FunctionProtoType Persistent<T, M> &(const Persistent<T, M> &)
struct _ast2615; // LValueReferenceType Persistent<T, M> &
struct _ast2616; // FunctionTemplateDecl operator=
struct _ast2617; // TemplateTypeParmDecl S
struct _ast2618; // TemplateTypeParmDecl M2
struct _ast2619; // CXXMethodDecl operator=
struct _ast2620; // ParmVarDecl that
struct _ast2621; // FunctionProtoType Persistent<T, M> &(const Persistent<S, M2> &)
struct _ast2622; // LValueReferenceType const Persistent<S, M2> &
struct _ast2623; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2624; // TemplateSpecializationType Persistent<S, M2>
struct _ast2625; // CXXDestructorDecl ~Persistent<T, M>
struct _ast2626; // FunctionTemplateDecl Cast
struct _ast2627; // TemplateTypeParmDecl S
struct _ast2628; // CXXMethodDecl Cast
struct _ast2629; // ParmVarDecl that
struct _ast2630; // FunctionProtoType Persistent<T> &(const Persistent<S> &)
struct _ast2631; // LValueReferenceType const Persistent<S> &
struct _ast2632; // TemplateSpecializationType const Persistent<S>
struct _ast2633; // TemplateSpecializationType Persistent<S>
struct _ast2634; // LValueReferenceType Persistent<T> &
struct _ast2635; // TemplateSpecializationType Persistent<T>
struct _ast2636; // FunctionTemplateDecl As
struct _ast2637; // TemplateTypeParmDecl S
struct _ast2638; // CXXMethodDecl As
struct _ast2639; // FunctionProtoType Persistent<S> &() const
struct _ast2640; // LValueReferenceType Persistent<S> &
struct _ast2641; // TemplateSpecializationType Persistent<S>
struct _ast2642; // PointerType const Persistent<T, M> *
struct _ast2643; // TemplateTypeParmDecl T
struct _ast2644; // CXXRecordDecl Global
struct _ast2645; // CXXConstructorDecl Global<T>
struct _ast2646; // PointerType Global<T> *
struct _ast2647; // InjectedClassNameType Global<T>
struct _ast2648; // FunctionTemplateDecl Global<T>
struct _ast2649; // TemplateTypeParmDecl S
struct _ast2650; // CXXConstructorDecl Global<T>
struct _ast2651; // ParmVarDecl isolate
struct _ast2652; // ParmVarDecl that
struct _ast2653; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2654; // TemplateSpecializationType Local<S>
struct _ast2655; // FunctionTemplateDecl Global<T>
struct _ast2656; // TemplateTypeParmDecl S
struct _ast2657; // CXXConstructorDecl Global<T>
struct _ast2658; // ParmVarDecl isolate
struct _ast2659; // ParmVarDecl that
struct _ast2660; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2661; // LValueReferenceType const PersistentBase<S> &
struct _ast2662; // TemplateSpecializationType const PersistentBase<S>
struct _ast2663; // TemplateSpecializationType PersistentBase<S>
struct _ast2664; // CXXConstructorDecl Global<T>
struct _ast2665; // ParmVarDecl other
struct _ast2666; // FunctionProtoType void (Global<T> &&)
struct _ast2667; // RValueReferenceType Global<T> &&
struct _ast2668; // CXXDestructorDecl ~Global<T>
struct _ast2669; // FunctionTemplateDecl operator=
struct _ast2670; // TemplateTypeParmDecl S
struct _ast2671; // CXXMethodDecl operator=
struct _ast2672; // ParmVarDecl rhs
struct _ast2673; // FunctionProtoType Global<T> &(Global<S> &&)
struct _ast2674; // RValueReferenceType Global<S> &&
struct _ast2675; // TemplateSpecializationType Global<S>
struct _ast2676; // LValueReferenceType Global<T> &
struct _ast2677; // CXXMethodDecl Pass
struct _ast2678; // FunctionProtoType Global<T> ()
struct _ast2679; // TypedefDecl MoveOnlyTypeForCPP03
struct _ast2680; // CXXConstructorDecl Global<T>
struct _ast2681; // ParmVarDecl 
struct _ast2682; // FunctionProtoType void (const Global<T> &)
struct _ast2683; // LValueReferenceType const Global<T> &
struct _ast2684; // InjectedClassNameType const Global<T>
struct _ast2685; // CXXMethodDecl operator=
struct _ast2686; // ParmVarDecl 
struct _ast2687; // TypeAliasTemplateDecl UniquePersistent
struct _ast2688; // TypeAliasDecl UniquePersistent
struct _ast2689; // TemplateSpecializationType Global<T>
struct _ast2690; // TemplateTypeParmDecl T
struct _ast2691; // TemplateTypeParmDecl T
struct _ast2692; // CXXRecordDecl TracedGlobal
struct _ast2693; // CXXConstructorDecl TracedGlobal<T>
struct _ast2694; // PointerType TracedGlobal<T> *
struct _ast2695; // InjectedClassNameType TracedGlobal<T>
struct _ast2696; // CXXDestructorDecl ~TracedGlobal<T>
struct _ast2697; // FunctionTemplateDecl TracedGlobal<T>
struct _ast2698; // TemplateTypeParmDecl S
struct _ast2699; // CXXConstructorDecl TracedGlobal<T>
struct _ast2700; // ParmVarDecl isolate
struct _ast2701; // ParmVarDecl that
struct _ast2702; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2703; // TemplateSpecializationType Local<S>
struct _ast2704; // CXXConstructorDecl TracedGlobal<T>
struct _ast2705; // ParmVarDecl other
struct _ast2706; // FunctionProtoType void (TracedGlobal<T> &&)
struct _ast2707; // RValueReferenceType TracedGlobal<T> &&
struct _ast2708; // FunctionTemplateDecl operator=
struct _ast2709; // TemplateTypeParmDecl S
struct _ast2710; // CXXMethodDecl operator=
struct _ast2711; // ParmVarDecl rhs
struct _ast2712; // FunctionProtoType TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ast2713; // RValueReferenceType TracedGlobal<S> &&
struct _ast2714; // TemplateSpecializationType TracedGlobal<S>
struct _ast2715; // LValueReferenceType TracedGlobal<T> &
struct _ast2716; // CXXConstructorDecl TracedGlobal<T>
struct _ast2717; // ParmVarDecl 
struct _ast2718; // FunctionProtoType void (const TracedGlobal<T> &)
struct _ast2719; // LValueReferenceType const TracedGlobal<T> &
struct _ast2720; // InjectedClassNameType const TracedGlobal<T>
struct _ast2721; // CXXMethodDecl operator=
struct _ast2722; // ParmVarDecl 
struct _ast2723; // CXXMethodDecl IsEmpty
struct _ast2724; // PointerType const TracedGlobal<T> *
struct _ast2725; // CXXMethodDecl Reset
struct _ast2726; // FunctionTemplateDecl Reset
struct _ast2727; // TemplateTypeParmDecl S
struct _ast2728; // CXXMethodDecl Reset
struct _ast2729; // ParmVarDecl isolate
struct _ast2730; // ParmVarDecl other
struct _ast2731; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2732; // LValueReferenceType const Local<S> &
struct _ast2733; // TemplateSpecializationType const Local<S>
struct _ast2734; // TemplateSpecializationType Local<S>
struct _ast2735; // CXXMethodDecl Get
struct _ast2736; // ParmVarDecl isolate
struct _ast2737; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2738; // TemplateSpecializationType Local<T>
struct _ast2739; // FunctionTemplateDecl As
struct _ast2740; // TemplateTypeParmDecl S
struct _ast2741; // CXXMethodDecl As
struct _ast2742; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2743; // LValueReferenceType TracedGlobal<S> &
struct _ast2744; // TemplateSpecializationType TracedGlobal<S>
struct _ast2745; // FunctionTemplateDecl operator==
struct _ast2746; // TemplateTypeParmDecl S
struct _ast2747; // CXXMethodDecl operator==
struct _ast2748; // ParmVarDecl that
struct _ast2749; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2750; // LValueReferenceType const TracedGlobal<S> &
struct _ast2751; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2752; // TemplateSpecializationType TracedGlobal<S>
struct _ast2753; // FunctionTemplateDecl operator==
struct _ast2754; // TemplateTypeParmDecl S
struct _ast2755; // CXXMethodDecl operator==
struct _ast2756; // ParmVarDecl that
struct _ast2757; // FunctionProtoType bool (const Local<S> &) const
struct _ast2758; // LValueReferenceType const Local<S> &
struct _ast2759; // TemplateSpecializationType const Local<S>
struct _ast2760; // TemplateSpecializationType Local<S>
struct _ast2761; // FunctionTemplateDecl operator!=
struct _ast2762; // TemplateTypeParmDecl S
struct _ast2763; // CXXMethodDecl operator!=
struct _ast2764; // ParmVarDecl that
struct _ast2765; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2766; // LValueReferenceType const TracedGlobal<S> &
struct _ast2767; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2768; // TemplateSpecializationType TracedGlobal<S>
struct _ast2769; // FunctionTemplateDecl operator!=
struct _ast2770; // TemplateTypeParmDecl S
struct _ast2771; // CXXMethodDecl operator!=
struct _ast2772; // ParmVarDecl that
struct _ast2773; // FunctionProtoType bool (const Local<S> &) const
struct _ast2774; // LValueReferenceType const Local<S> &
struct _ast2775; // TemplateSpecializationType const Local<S>
struct _ast2776; // TemplateSpecializationType Local<S>
struct _ast2777; // CXXMethodDecl SetWrapperClassId
struct _ast2778; // ParmVarDecl class_id
struct _ast2779; // CXXMethodDecl WrapperClassId
struct _ast2780; // CXXMethodDecl SetFinalizationCallback
struct _ast2781; // ParmVarDecl parameter
struct _ast2782; // ParmVarDecl callback
struct _ast2783; // CXXRecordDecl HandleScope
struct _ast2784; // CXXRecordDecl HandleScope
struct _ast2785; // CXXConstructorDecl HandleScope
struct _ast2786; // ParmVarDecl isolate
struct _ast2787; // FunctionProtoType void (v8::Isolate *)
struct _ast2788; // PointerType v8::HandleScope *
struct _ast2789; // RecordType v8::HandleScope
struct _ast2790; // CXXDestructorDecl ~HandleScope
struct _ast2791; // FunctionProtoType void ()
struct _ast2792; // CXXMethodDecl NumberOfHandles
struct _ast2793; // ParmVarDecl isolate
struct _ast2794; // FunctionProtoType int (v8::Isolate *)
struct _ast2795; // CXXMethodDecl GetIsolate
struct _ast2796; // PointerType const v8::HandleScope *
struct _ast2797; // RecordType const v8::HandleScope
struct _ast2798; // CXXConstructorDecl HandleScope
struct _ast2799; // ParmVarDecl 
struct _ast2800; // FunctionProtoType void (const v8::HandleScope &)
struct _ast2801; // LValueReferenceType const v8::HandleScope &
struct _ast2802; // CXXMethodDecl operator=
struct _ast2803; // ParmVarDecl 
struct _ast2804; // CXXConstructorDecl HandleScope
struct _ast2805; // FunctionProtoType void ()
struct _ast2806; // CXXMethodDecl Initialize
struct _ast2807; // ParmVarDecl isolate
struct _ast2808; // CXXMethodDecl CreateHandle
struct _ast2809; // ParmVarDecl isolate
struct _ast2810; // ParmVarDecl value
struct _ast2811; // FunctionProtoType internal::Address *(internal::Isolate *, internal::Address)
struct _ast2812; // PointerType internal::Isolate *
struct _ast2813; // ElaboratedType internal::Isolate
struct _ast2814; // ElaboratedType internal::Address
struct _ast2815; // PointerType internal::Address *
struct _ast2816; // CXXRecordDecl EscapableHandleScope
struct _ast2817; // CXXConstructorDecl EscapableHandleScope
struct _ast2818; // ParmVarDecl isolate
struct _ast2819; // PointerType v8::EscapableHandleScope *
struct _ast2820; // RecordType v8::EscapableHandleScope
struct _ast2821; // CXXDestructorDecl ~EscapableHandleScope
struct _ast2822; // FunctionProtoType void ()
struct _ast2823; // FunctionTemplateDecl Escape
struct _ast2824; // TemplateTypeParmDecl T
struct _ast2825; // CXXMethodDecl Escape
struct _ast2826; // ParmVarDecl value
struct _ast2827; // FunctionProtoType Local<T> (Local<T>)
struct _ast2828; // TemplateSpecializationType Local<T>
struct _ast2829; // TemplateSpecializationType Local<T>
struct _ast2830; // FunctionTemplateDecl EscapeMaybe
struct _ast2831; // TemplateTypeParmDecl T
struct _ast2832; // CXXMethodDecl EscapeMaybe
struct _ast2833; // ParmVarDecl value
struct _ast2834; // FunctionProtoType MaybeLocal<T> (MaybeLocal<T>)
struct _ast2835; // TemplateSpecializationType MaybeLocal<T>
struct _ast2836; // TemplateSpecializationType MaybeLocal<T>
struct _ast2837; // CXXConstructorDecl EscapableHandleScope
struct _ast2838; // ParmVarDecl 
struct _ast2839; // FunctionProtoType void (const v8::EscapableHandleScope &)
struct _ast2840; // LValueReferenceType const v8::EscapableHandleScope &
struct _ast2841; // RecordType const v8::EscapableHandleScope
struct _ast2842; // CXXMethodDecl operator=
struct _ast2843; // ParmVarDecl 
struct _ast2844; // CXXRecordDecl SealHandleScope
struct _ast2845; // CXXRecordDecl SealHandleScope
struct _ast2846; // CXXConstructorDecl SealHandleScope
struct _ast2847; // ParmVarDecl isolate
struct _ast2848; // PointerType v8::SealHandleScope *
struct _ast2849; // RecordType v8::SealHandleScope
struct _ast2850; // CXXDestructorDecl ~SealHandleScope
struct _ast2851; // FunctionProtoType void ()
struct _ast2852; // CXXConstructorDecl SealHandleScope
struct _ast2853; // ParmVarDecl 
struct _ast2854; // FunctionProtoType void (const v8::SealHandleScope &)
struct _ast2855; // LValueReferenceType const v8::SealHandleScope &
struct _ast2856; // RecordType const v8::SealHandleScope
struct _ast2857; // CXXMethodDecl operator=
struct _ast2858; // ParmVarDecl 
struct _ast2859; // CXXRecordDecl Data
struct _ast2860; // CXXRecordDecl ScriptOrModule
struct _ast2861; // CXXRecordDecl ScriptOrModule
struct _ast2862; // CXXMethodDecl GetResourceName
struct _ast2863; // FunctionProtoType Local<v8::Value> ()
struct _ast2864; // TemplateSpecializationType Local<v8::Value>
struct _ast2865; // PointerType v8::ScriptOrModule *
struct _ast2866; // RecordType v8::ScriptOrModule
struct _ast2867; // CXXMethodDecl GetHostDefinedOptions
struct _ast2868; // FunctionProtoType Local<v8::PrimitiveArray> ()
struct _ast2869; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast2870; // CXXRecordDecl PrimitiveArray
struct _ast2871; // CXXMethodDecl New
struct _ast2872; // ParmVarDecl isolate
struct _ast2873; // ParmVarDecl length
struct _ast2874; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _ast2875; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast2876; // CXXMethodDecl Length
struct _ast2877; // FunctionProtoType int () const
struct _ast2878; // PointerType const v8::PrimitiveArray *
struct _ast2879; // RecordType const v8::PrimitiveArray
struct _ast2880; // RecordType v8::PrimitiveArray
struct _ast2881; // CXXMethodDecl Set
struct _ast2882; // ParmVarDecl isolate
struct _ast2883; // ParmVarDecl index
struct _ast2884; // ParmVarDecl item
struct _ast2885; // FunctionProtoType void (v8::Isolate *, int, Local<v8::Primitive>)
struct _ast2886; // TemplateSpecializationType Local<v8::Primitive>
struct _ast2887; // PointerType v8::PrimitiveArray *
struct _ast2888; // CXXMethodDecl Get
struct _ast2889; // ParmVarDecl isolate
struct _ast2890; // ParmVarDecl index
struct _ast2891; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, int)
struct _ast2892; // TemplateSpecializationType Local<v8::Primitive>
struct _ast2893; // CXXRecordDecl ScriptOriginOptions
struct _ast2894; // CXXRecordDecl ScriptOriginOptions
struct _ast2895; // CXXConstructorDecl ScriptOriginOptions
struct _ast2896; // ParmVarDecl is_shared_cross_origin
struct _ast2897; // ParmVarDecl is_opaque
struct _ast2898; // ParmVarDecl is_wasm
struct _ast2899; // ParmVarDecl is_module
struct _ast2900; // FunctionProtoType void (bool, bool, bool, bool)
struct _ast2901; // PointerType v8::ScriptOriginOptions *
struct _ast2902; // RecordType v8::ScriptOriginOptions
struct _ast2903; // CXXConstructorDecl ScriptOriginOptions
struct _ast2904; // ParmVarDecl flags
struct _ast2905; // FunctionProtoType void (int)
struct _ast2906; // CXXMethodDecl IsSharedCrossOrigin
struct _ast2907; // PointerType const v8::ScriptOriginOptions *
struct _ast2908; // RecordType const v8::ScriptOriginOptions
struct _ast2909; // CXXMethodDecl IsOpaque
struct _ast2910; // CXXMethodDecl IsWasm
struct _ast2911; // CXXMethodDecl IsModule
struct _ast2912; // CXXMethodDecl Flags
struct _ast2913; // CXXConstructorDecl ScriptOriginOptions
struct _ast2914; // ParmVarDecl 
struct _ast2915; // FunctionProtoType void (const v8::ScriptOriginOptions &) noexcept
struct _ast2916; // LValueReferenceType const v8::ScriptOriginOptions &
struct _ast2917; // CXXConstructorDecl ScriptOriginOptions
struct _ast2918; // ParmVarDecl 
struct _ast2919; // FunctionProtoType void (v8::ScriptOriginOptions &&) noexcept
struct _ast2920; // RValueReferenceType v8::ScriptOriginOptions &&
struct _ast2921; // CXXDestructorDecl ~ScriptOriginOptions
struct _ast2922; // CXXMethodDecl operator=
struct _ast2923; // ParmVarDecl 
struct _ast2924; // FunctionProtoType v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
struct _ast2925; // LValueReferenceType v8::ScriptOriginOptions &
struct _ast2926; // CXXMethodDecl operator=
struct _ast2927; // ParmVarDecl 
struct _ast2928; // FunctionProtoType v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _ast2929; // CXXRecordDecl ScriptOrigin
struct _ast2930; // CXXRecordDecl ScriptOrigin
struct _ast2931; // CXXConstructorDecl ScriptOrigin
struct _ast2932; // ParmVarDecl resource_name
struct _ast2933; // ParmVarDecl resource_line_offset
struct _ast2934; // ParmVarDecl resource_column_offset
struct _ast2935; // ParmVarDecl resource_is_shared_cross_origin
struct _ast2936; // ParmVarDecl script_id
struct _ast2937; // ParmVarDecl source_map_url
struct _ast2938; // ParmVarDecl resource_is_opaque
struct _ast2939; // ParmVarDecl is_wasm
struct _ast2940; // ParmVarDecl is_module
struct _ast2941; // ParmVarDecl host_defined_options
struct _ast2942; // FunctionProtoType void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _ast2943; // TemplateSpecializationType Local<v8::Value>
struct _ast2944; // TemplateSpecializationType Local<v8::Integer>
struct _ast2945; // TemplateSpecializationType Local<v8::Integer>
struct _ast2946; // TemplateSpecializationType Local<v8::Boolean>
struct _ast2947; // TemplateSpecializationType Local<v8::Integer>
struct _ast2948; // TemplateSpecializationType Local<v8::Value>
struct _ast2949; // TemplateSpecializationType Local<v8::Boolean>
struct _ast2950; // TemplateSpecializationType Local<v8::Boolean>
struct _ast2951; // TemplateSpecializationType Local<v8::Boolean>
struct _ast2952; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast2953; // PointerType v8::ScriptOrigin *
struct _ast2954; // RecordType v8::ScriptOrigin
struct _ast2955; // CXXMethodDecl ResourceName
struct _ast2956; // FunctionProtoType Local<v8::Value> () const
struct _ast2957; // TemplateSpecializationType Local<v8::Value>
struct _ast2958; // PointerType const v8::ScriptOrigin *
struct _ast2959; // RecordType const v8::ScriptOrigin
struct _ast2960; // CXXMethodDecl ResourceLineOffset
struct _ast2961; // FunctionProtoType Local<v8::Integer> () const
struct _ast2962; // TemplateSpecializationType Local<v8::Integer>
struct _ast2963; // CXXMethodDecl ResourceColumnOffset
struct _ast2964; // FunctionProtoType Local<v8::Integer> () const
struct _ast2965; // TemplateSpecializationType Local<v8::Integer>
struct _ast2966; // CXXMethodDecl ScriptID
struct _ast2967; // FunctionProtoType Local<v8::Integer> () const
struct _ast2968; // TemplateSpecializationType Local<v8::Integer>
struct _ast2969; // CXXMethodDecl SourceMapUrl
struct _ast2970; // FunctionProtoType Local<v8::Value> () const
struct _ast2971; // TemplateSpecializationType Local<v8::Value>
struct _ast2972; // CXXMethodDecl HostDefinedOptions
struct _ast2973; // FunctionProtoType Local<v8::PrimitiveArray> () const
struct _ast2974; // TemplateSpecializationType Local<v8::PrimitiveArray>
struct _ast2975; // CXXMethodDecl Options
struct _ast2976; // FunctionProtoType v8::ScriptOriginOptions () const
struct _ast2977; // CXXConstructorDecl ScriptOrigin
struct _ast2978; // ParmVarDecl 
struct _ast2979; // FunctionProtoType void (const v8::ScriptOrigin &)
struct _ast2980; // LValueReferenceType const v8::ScriptOrigin &
struct _ast2981; // CXXMethodDecl operator=
struct _ast2982; // ParmVarDecl 
struct _ast2983; // FunctionProtoType v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ast2984; // RValueReferenceType v8::ScriptOrigin &&
struct _ast2985; // LValueReferenceType v8::ScriptOrigin &
struct _ast2986; // CXXConstructorDecl ScriptOrigin
struct _ast2987; // ParmVarDecl 
struct _ast2988; // FunctionProtoType void (v8::ScriptOrigin &&)
struct _ast2989; // CXXRecordDecl UnboundScript
struct _ast2990; // CXXRecordDecl UnboundScript
struct _ast2991; // CXXMethodDecl BindToCurrentContext
struct _ast2992; // FunctionProtoType Local<v8::Script> ()
struct _ast2993; // TemplateSpecializationType Local<v8::Script>
struct _ast2994; // PointerType v8::UnboundScript *
struct _ast2995; // RecordType v8::UnboundScript
struct _ast2996; // CXXMethodDecl GetId
struct _ast2997; // FunctionProtoType int ()
struct _ast2998; // CXXMethodDecl GetScriptName
struct _ast2999; // FunctionProtoType Local<v8::Value> ()
struct _ast3000; // TemplateSpecializationType Local<v8::Value>
struct _ast3001; // CXXMethodDecl GetSourceURL
struct _ast3002; // FunctionProtoType Local<v8::Value> ()
struct _ast3003; // TemplateSpecializationType Local<v8::Value>
struct _ast3004; // CXXMethodDecl GetSourceMappingURL
struct _ast3005; // FunctionProtoType Local<v8::Value> ()
struct _ast3006; // TemplateSpecializationType Local<v8::Value>
struct _ast3007; // CXXMethodDecl GetLineNumber
struct _ast3008; // ParmVarDecl code_pos
struct _ast3009; // FunctionProtoType int (int)
struct _ast3010; // VarDecl kNoScriptId
struct _ast3011; // CXXRecordDecl UnboundModuleScript
struct _ast3012; // CXXRecordDecl UnboundModuleScript
struct _ast3013; // CXXRecordDecl Location
struct _ast3014; // CXXRecordDecl Location
struct _ast3015; // CXXMethodDecl GetLineNumber
struct _ast3016; // PointerType v8::Location *
struct _ast3017; // RecordType v8::Location
struct _ast3018; // CXXMethodDecl GetColumnNumber
struct _ast3019; // CXXConstructorDecl Location
struct _ast3020; // ParmVarDecl line_number
struct _ast3021; // ParmVarDecl column_number
struct _ast3022; // FunctionProtoType void (int, int)
struct _ast3023; // CXXRecordDecl Module
struct _ast3024; // CXXRecordDecl Module
struct _ast3025; // EnumDecl Status
struct _ast3026; // EnumConstantDecl kUninstantiated
struct _ast3027; // EnumConstantDecl kInstantiating
struct _ast3028; // EnumConstantDecl kInstantiated
struct _ast3029; // EnumConstantDecl kEvaluating
struct _ast3030; // EnumConstantDecl kEvaluated
struct _ast3031; // EnumConstantDecl kErrored
struct _ast3032; // CXXMethodDecl GetStatus
struct _ast3033; // FunctionProtoType v8::Module::Status () const
struct _ast3034; // EnumType v8::Module::Status
struct _ast3035; // PointerType const v8::Module *
struct _ast3036; // RecordType const v8::Module
struct _ast3037; // RecordType v8::Module
struct _ast3038; // CXXMethodDecl GetException
struct _ast3039; // FunctionProtoType Local<v8::Value> () const
struct _ast3040; // TemplateSpecializationType Local<v8::Value>
struct _ast3041; // CXXMethodDecl GetModuleRequestsLength
struct _ast3042; // CXXMethodDecl GetModuleRequest
struct _ast3043; // ParmVarDecl i
struct _ast3044; // FunctionProtoType Local<v8::String> (int) const
struct _ast3045; // TemplateSpecializationType Local<v8::String>
struct _ast3046; // CXXMethodDecl GetModuleRequestLocation
struct _ast3047; // ParmVarDecl i
struct _ast3048; // FunctionProtoType v8::Location (int) const
struct _ast3049; // CXXMethodDecl GetIdentityHash
struct _ast3050; // TypedefDecl ResolveCallback
struct _ast3051; // PointerType MaybeLocal<v8::Module> (*)(Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ast3052; // ParenType MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ast3053; // FunctionProtoType MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ast3054; // TemplateSpecializationType Local<v8::Context>
struct _ast3055; // TemplateSpecializationType Local<v8::String>
struct _ast3056; // TemplateSpecializationType Local<v8::Module>
struct _ast3057; // TemplateSpecializationType MaybeLocal<v8::Module>
struct _ast3058; // CXXMethodDecl InstantiateModule
struct _ast3059; // ParmVarDecl context
struct _ast3060; // ParmVarDecl callback
struct _ast3061; // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
struct _ast3062; // TemplateSpecializationType Local<v8::Context>
struct _ast3063; // TypedefType v8::Module::ResolveCallback
struct _ast3064; // TemplateSpecializationType Maybe<bool>
struct _ast3065; // PointerType v8::Module *
struct _ast3066; // CXXMethodDecl Evaluate
struct _ast3067; // ParmVarDecl context
struct _ast3068; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3069; // TemplateSpecializationType Local<v8::Context>
struct _ast3070; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3071; // CXXMethodDecl GetModuleNamespace
struct _ast3072; // FunctionProtoType Local<v8::Value> ()
struct _ast3073; // TemplateSpecializationType Local<v8::Value>
struct _ast3074; // CXXMethodDecl GetUnboundModuleScript
struct _ast3075; // FunctionProtoType Local<v8::UnboundModuleScript> ()
struct _ast3076; // TemplateSpecializationType Local<v8::UnboundModuleScript>
struct _ast3077; // CXXRecordDecl Script
struct _ast3078; // CXXMethodDecl Compile
struct _ast3079; // ParmVarDecl context
struct _ast3080; // ParmVarDecl source
struct _ast3081; // ParmVarDecl origin
struct _ast3082; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _ast3083; // TemplateSpecializationType Local<v8::Context>
struct _ast3084; // TemplateSpecializationType Local<v8::String>
struct _ast3085; // TemplateSpecializationType MaybeLocal<v8::Script>
struct _ast3086; // CXXMethodDecl Run
struct _ast3087; // ParmVarDecl context
struct _ast3088; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3089; // TemplateSpecializationType Local<v8::Context>
struct _ast3090; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3091; // PointerType v8::Script *
struct _ast3092; // RecordType v8::Script
struct _ast3093; // CXXMethodDecl GetUnboundScript
struct _ast3094; // FunctionProtoType Local<v8::UnboundScript> ()
struct _ast3095; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast3096; // CXXRecordDecl ScriptCompiler
struct _ast3097; // CXXRecordDecl ScriptCompiler
struct _ast3098; // CXXRecordDecl CachedData
struct _ast3099; // CXXRecordDecl CachedData
struct _ast3100; // EnumDecl BufferPolicy
struct _ast3101; // EnumConstantDecl BufferNotOwned
struct _ast3102; // EnumConstantDecl BufferOwned
struct _ast3103; // CXXConstructorDecl CachedData
struct _ast3104; // PointerType v8::ScriptCompiler::CachedData *
struct _ast3105; // RecordType v8::ScriptCompiler::CachedData
struct _ast3106; // CXXConstructorDecl CachedData
struct _ast3107; // ParmVarDecl data
struct _ast3108; // ParmVarDecl length
struct _ast3109; // ParmVarDecl buffer_policy
struct _ast3110; // FunctionProtoType void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ast3111; // PointerType const uint8_t *
struct _ast3112; // TypedefType const uint8_t
struct _ast3113; // TypedefType uint8_t
struct _ast3114; // EnumType v8::ScriptCompiler::CachedData::BufferPolicy
struct _ast3115; // CXXDestructorDecl ~CachedData
struct _ast3116; // FieldDecl data
struct _ast3117; // FieldDecl length
struct _ast3118; // FieldDecl rejected
struct _ast3119; // FieldDecl buffer_policy
struct _ast3120; // CXXConstructorDecl CachedData
struct _ast3121; // ParmVarDecl 
struct _ast3122; // FunctionProtoType void (const v8::ScriptCompiler::CachedData &)
struct _ast3123; // LValueReferenceType const v8::ScriptCompiler::CachedData &
struct _ast3124; // RecordType const v8::ScriptCompiler::CachedData
struct _ast3125; // CXXMethodDecl operator=
struct _ast3126; // ParmVarDecl 
struct _ast3127; // FunctionProtoType v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
struct _ast3128; // LValueReferenceType v8::ScriptCompiler::CachedData &
struct _ast3129; // CXXRecordDecl Source
struct _ast3130; // CXXRecordDecl Source
struct _ast3131; // CXXConstructorDecl Source
struct _ast3132; // ParmVarDecl source_string
struct _ast3133; // ParmVarDecl origin
struct _ast3134; // ParmVarDecl cached_data
struct _ast3135; // FunctionProtoType void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _ast3136; // TemplateSpecializationType Local<v8::String>
struct _ast3137; // PointerType v8::ScriptCompiler::Source *
struct _ast3138; // RecordType v8::ScriptCompiler::Source
struct _ast3139; // CXXConstructorDecl Source
struct _ast3140; // ParmVarDecl source_string
struct _ast3141; // ParmVarDecl cached_data
struct _ast3142; // FunctionProtoType void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
struct _ast3143; // TemplateSpecializationType Local<v8::String>
struct _ast3144; // CXXDestructorDecl ~Source
struct _ast3145; // CXXMethodDecl GetCachedData
struct _ast3146; // FunctionProtoType const v8::ScriptCompiler::CachedData *() const
struct _ast3147; // PointerType const v8::ScriptCompiler::CachedData *
struct _ast3148; // PointerType const v8::ScriptCompiler::Source *
struct _ast3149; // RecordType const v8::ScriptCompiler::Source
struct _ast3150; // CXXMethodDecl GetResourceOptions
struct _ast3151; // FunctionProtoType const v8::ScriptOriginOptions &() const
struct _ast3152; // CXXConstructorDecl Source
struct _ast3153; // ParmVarDecl 
struct _ast3154; // FunctionProtoType void (const v8::ScriptCompiler::Source &)
struct _ast3155; // LValueReferenceType const v8::ScriptCompiler::Source &
struct _ast3156; // CXXMethodDecl operator=
struct _ast3157; // ParmVarDecl 
struct _ast3158; // FunctionProtoType v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
struct _ast3159; // LValueReferenceType v8::ScriptCompiler::Source &
struct _ast3160; // CXXRecordDecl ExternalSourceStream
struct _ast3161; // CXXRecordDecl ExternalSourceStream
struct _ast3162; // CXXDestructorDecl ~ExternalSourceStream
struct _ast3163; // FunctionProtoType void ()
struct _ast3164; // PointerType v8::ScriptCompiler::ExternalSourceStream *
struct _ast3165; // RecordType v8::ScriptCompiler::ExternalSourceStream
struct _ast3166; // CXXMethodDecl GetMoreData
struct _ast3167; // ParmVarDecl src
struct _ast3168; // FunctionProtoType size_t (const uint8_t **)
struct _ast3169; // PointerType const uint8_t **
struct _ast3170; // TypedefType size_t
struct _ast3171; // CXXMethodDecl SetBookmark
struct _ast3172; // FunctionProtoType bool ()
struct _ast3173; // CXXMethodDecl ResetToBookmark
struct _ast3174; // CXXMethodDecl operator=
struct _ast3175; // ParmVarDecl 
struct _ast3176; // FunctionProtoType v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _ast3177; // LValueReferenceType const v8::ScriptCompiler::ExternalSourceStream &
struct _ast3178; // RecordType const v8::ScriptCompiler::ExternalSourceStream
struct _ast3179; // LValueReferenceType v8::ScriptCompiler::ExternalSourceStream &
struct _ast3180; // CXXRecordDecl StreamedSource
struct _ast3181; // CXXRecordDecl StreamedSource
struct _ast3182; // EnumDecl Encoding
struct _ast3183; // EnumConstantDecl ONE_BYTE
struct _ast3184; // EnumConstantDecl TWO_BYTE
struct _ast3185; // EnumConstantDecl UTF8
struct _ast3186; // CXXConstructorDecl StreamedSource
struct _ast3187; // ParmVarDecl source_stream
struct _ast3188; // ParmVarDecl encoding
struct _ast3189; // FunctionProtoType void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3190; // EnumType v8::ScriptCompiler::StreamedSource::Encoding
struct _ast3191; // PointerType v8::ScriptCompiler::StreamedSource *
struct _ast3192; // RecordType v8::ScriptCompiler::StreamedSource
struct _ast3193; // CXXConstructorDecl StreamedSource
struct _ast3194; // ParmVarDecl source_stream
struct _ast3195; // ParmVarDecl encoding
struct _ast3196; // FunctionProtoType void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3197; // ElaboratedType std::unique_ptr<ExternalSourceStream>
struct _ast3198; // CXXDestructorDecl ~StreamedSource
struct _ast3199; // FunctionProtoType void ()
struct _ast3200; // CXXMethodDecl impl
struct _ast3201; // FunctionProtoType internal::ScriptStreamingData *() const
struct _ast3202; // PointerType internal::ScriptStreamingData *
struct _ast3203; // ElaboratedType internal::ScriptStreamingData
struct _ast3204; // PointerType const v8::ScriptCompiler::StreamedSource *
struct _ast3205; // RecordType const v8::ScriptCompiler::StreamedSource
struct _ast3206; // CXXConstructorDecl StreamedSource
struct _ast3207; // ParmVarDecl 
struct _ast3208; // FunctionProtoType void (const v8::ScriptCompiler::StreamedSource &)
struct _ast3209; // LValueReferenceType const v8::ScriptCompiler::StreamedSource &
struct _ast3210; // CXXMethodDecl operator=
struct _ast3211; // ParmVarDecl 
struct _ast3212; // FunctionProtoType v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
struct _ast3213; // LValueReferenceType v8::ScriptCompiler::StreamedSource &
struct _ast3214; // CXXRecordDecl ScriptStreamingTask
struct _ast3215; // CXXRecordDecl ScriptStreamingTask
struct _ast3216; // CXXMethodDecl Run
struct _ast3217; // PointerType v8::ScriptCompiler::ScriptStreamingTask *
struct _ast3218; // RecordType v8::ScriptCompiler::ScriptStreamingTask
struct _ast3219; // EnumDecl CompileOptions
struct _ast3220; // EnumConstantDecl kNoCompileOptions
struct _ast3221; // EnumConstantDecl kConsumeCodeCache
struct _ast3222; // EnumConstantDecl kEagerCompile
struct _ast3223; // EnumDecl NoCacheReason
struct _ast3224; // EnumConstantDecl kNoCacheNoReason
struct _ast3225; // EnumConstantDecl kNoCacheBecauseCachingDisabled
struct _ast3226; // EnumConstantDecl kNoCacheBecauseNoResource
struct _ast3227; // EnumConstantDecl kNoCacheBecauseInlineScript
struct _ast3228; // EnumConstantDecl kNoCacheBecauseModule
struct _ast3229; // EnumConstantDecl kNoCacheBecauseStreamingSource
struct _ast3230; // EnumConstantDecl kNoCacheBecauseInspector
struct _ast3231; // EnumConstantDecl kNoCacheBecauseScriptTooSmall
struct _ast3232; // EnumConstantDecl kNoCacheBecauseCacheTooCold
struct _ast3233; // EnumConstantDecl kNoCacheBecauseV8Extension
struct _ast3234; // EnumConstantDecl kNoCacheBecauseExtensionModule
struct _ast3235; // EnumConstantDecl kNoCacheBecausePacScript
struct _ast3236; // EnumConstantDecl kNoCacheBecauseInDocumentWrite
struct _ast3237; // EnumConstantDecl kNoCacheBecauseResourceWithNoCacheHandler
struct _ast3238; // EnumConstantDecl kNoCacheBecauseDeferredProduceCodeCache
struct _ast3239; // CXXMethodDecl CompileUnboundScript
struct _ast3240; // ParmVarDecl isolate
struct _ast3241; // ParmVarDecl source
struct _ast3242; // ParmVarDecl options
struct _ast3243; // ParmVarDecl no_cache_reason
struct _ast3244; // FunctionProtoType MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3245; // EnumType v8::ScriptCompiler::CompileOptions
struct _ast3246; // EnumType v8::ScriptCompiler::NoCacheReason
struct _ast3247; // TemplateSpecializationType MaybeLocal<v8::UnboundScript>
struct _ast3248; // CXXMethodDecl Compile
struct _ast3249; // ParmVarDecl context
struct _ast3250; // ParmVarDecl source
struct _ast3251; // ParmVarDecl options
struct _ast3252; // ParmVarDecl no_cache_reason
struct _ast3253; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3254; // TemplateSpecializationType Local<v8::Context>
struct _ast3255; // TemplateSpecializationType MaybeLocal<v8::Script>
struct _ast3256; // CXXMethodDecl StartStreamingScript
struct _ast3257; // ParmVarDecl isolate
struct _ast3258; // ParmVarDecl source
struct _ast3259; // ParmVarDecl options
struct _ast3260; // FunctionProtoType v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _ast3261; // CXXMethodDecl Compile
struct _ast3262; // ParmVarDecl context
struct _ast3263; // ParmVarDecl source
struct _ast3264; // ParmVarDecl full_source_string
struct _ast3265; // ParmVarDecl origin
struct _ast3266; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
struct _ast3267; // TemplateSpecializationType Local<v8::Context>
struct _ast3268; // TemplateSpecializationType Local<v8::String>
struct _ast3269; // TemplateSpecializationType MaybeLocal<v8::Script>
struct _ast3270; // CXXMethodDecl CachedDataVersionTag
struct _ast3271; // FunctionProtoType uint32_t ()
struct _ast3272; // TypedefType uint32_t
struct _ast3273; // CXXMethodDecl CompileModule
struct _ast3274; // ParmVarDecl isolate
struct _ast3275; // ParmVarDecl source
struct _ast3276; // ParmVarDecl options
struct _ast3277; // ParmVarDecl no_cache_reason
struct _ast3278; // FunctionProtoType MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3279; // TemplateSpecializationType MaybeLocal<v8::Module>
struct _ast3280; // CXXMethodDecl CompileFunctionInContext
struct _ast3281; // ParmVarDecl context
struct _ast3282; // ParmVarDecl source
struct _ast3283; // ParmVarDecl arguments_count
struct _ast3284; // ParmVarDecl arguments
struct _ast3285; // ParmVarDecl context_extension_count
struct _ast3286; // ParmVarDecl context_extensions
struct _ast3287; // ParmVarDecl options
struct _ast3288; // ParmVarDecl no_cache_reason
struct _ast3289; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3290; // TemplateSpecializationType Local<v8::Context>
struct _ast3291; // DecayedType Local<v8::String> *
struct _ast3292; // DecayedType Local<v8::Object> *
struct _ast3293; // TemplateSpecializationType MaybeLocal<v8::Function>
struct _ast3294; // CXXMethodDecl CreateCodeCache
struct _ast3295; // ParmVarDecl unbound_script
struct _ast3296; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
struct _ast3297; // TemplateSpecializationType Local<v8::UnboundScript>
struct _ast3298; // CXXMethodDecl CreateCodeCache
struct _ast3299; // ParmVarDecl unbound_module_script
struct _ast3300; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
struct _ast3301; // TemplateSpecializationType Local<v8::UnboundModuleScript>
struct _ast3302; // CXXMethodDecl CreateCodeCacheForFunction
struct _ast3303; // ParmVarDecl function
struct _ast3304; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _ast3305; // TemplateSpecializationType Local<v8::Function>
struct _ast3306; // CXXRecordDecl Message
struct _ast3307; // CXXRecordDecl Message
struct _ast3308; // CXXMethodDecl Get
struct _ast3309; // FunctionProtoType Local<v8::String> () const
struct _ast3310; // TemplateSpecializationType Local<v8::String>
struct _ast3311; // PointerType const v8::Message *
struct _ast3312; // RecordType const v8::Message
struct _ast3313; // RecordType v8::Message
struct _ast3314; // CXXMethodDecl GetIsolate
struct _ast3315; // CXXMethodDecl GetSourceLine
struct _ast3316; // ParmVarDecl context
struct _ast3317; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3318; // TemplateSpecializationType Local<v8::Context>
struct _ast3319; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3320; // CXXMethodDecl GetScriptOrigin
struct _ast3321; // FunctionProtoType v8::ScriptOrigin () const
struct _ast3322; // CXXMethodDecl GetScriptResourceName
struct _ast3323; // FunctionProtoType Local<v8::Value> () const
struct _ast3324; // TemplateSpecializationType Local<v8::Value>
struct _ast3325; // CXXMethodDecl GetStackTrace
struct _ast3326; // FunctionProtoType Local<v8::StackTrace> () const
struct _ast3327; // TemplateSpecializationType Local<v8::StackTrace>
struct _ast3328; // CXXMethodDecl GetLineNumber
struct _ast3329; // ParmVarDecl context
struct _ast3330; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3331; // TemplateSpecializationType Local<v8::Context>
struct _ast3332; // TemplateSpecializationType Maybe<int>
struct _ast3333; // CXXMethodDecl GetStartPosition
struct _ast3334; // CXXMethodDecl GetEndPosition
struct _ast3335; // CXXMethodDecl ErrorLevel
struct _ast3336; // CXXMethodDecl GetStartColumn
struct _ast3337; // CXXMethodDecl GetStartColumn
struct _ast3338; // ParmVarDecl context
struct _ast3339; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3340; // TemplateSpecializationType Local<v8::Context>
struct _ast3341; // TemplateSpecializationType Maybe<int>
struct _ast3342; // CXXMethodDecl GetEndColumn
struct _ast3343; // CXXMethodDecl GetEndColumn
struct _ast3344; // ParmVarDecl context
struct _ast3345; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3346; // TemplateSpecializationType Local<v8::Context>
struct _ast3347; // TemplateSpecializationType Maybe<int>
struct _ast3348; // CXXMethodDecl IsSharedCrossOrigin
struct _ast3349; // CXXMethodDecl IsOpaque
struct _ast3350; // CXXMethodDecl PrintCurrentStackTrace
struct _ast3351; // ParmVarDecl isolate
struct _ast3352; // ParmVarDecl out
struct _ast3353; // FunctionProtoType void (v8::Isolate *, FILE *)
struct _ast3354; // PointerType FILE *
struct _ast3355; // TypedefType FILE
struct _ast3356; // TypedefDecl FILE
struct _ast3357; // ElaboratedType struct _iobuf
struct _ast3358; // VarDecl kNoLineNumberInfo
struct _ast3359; // VarDecl kNoColumnInfo
struct _ast3360; // VarDecl kNoScriptIdInfo
struct _ast3361; // CXXRecordDecl StackTrace
struct _ast3362; // EnumDecl StackTraceOptions
struct _ast3363; // EnumConstantDecl kLineNumber
struct _ast3364; // EnumConstantDecl kColumnOffset
struct _ast3365; // EnumConstantDecl kScriptName
struct _ast3366; // EnumConstantDecl kFunctionName
struct _ast3367; // EnumConstantDecl kIsEval
struct _ast3368; // EnumConstantDecl kIsConstructor
struct _ast3369; // EnumConstantDecl kScriptNameOrSourceURL
struct _ast3370; // EnumConstantDecl kScriptId
struct _ast3371; // EnumConstantDecl kExposeFramesAcrossSecurityOrigins
struct _ast3372; // EnumConstantDecl kOverview
struct _ast3373; // EnumConstantDecl kDetailed
struct _ast3374; // CXXMethodDecl GetFrame
struct _ast3375; // ParmVarDecl isolate
struct _ast3376; // ParmVarDecl index
struct _ast3377; // FunctionProtoType Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _ast3378; // TemplateSpecializationType Local<v8::StackFrame>
struct _ast3379; // PointerType const v8::StackTrace *
struct _ast3380; // RecordType const v8::StackTrace
struct _ast3381; // RecordType v8::StackTrace
struct _ast3382; // CXXMethodDecl GetFrameCount
struct _ast3383; // CXXMethodDecl CurrentStackTrace
struct _ast3384; // ParmVarDecl isolate
struct _ast3385; // ParmVarDecl frame_limit
struct _ast3386; // ParmVarDecl options
struct _ast3387; // FunctionProtoType Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
struct _ast3388; // EnumType v8::StackTrace::StackTraceOptions
struct _ast3389; // TemplateSpecializationType Local<v8::StackTrace>
struct _ast3390; // CXXRecordDecl StackFrame
struct _ast3391; // CXXMethodDecl GetLineNumber
struct _ast3392; // PointerType const v8::StackFrame *
struct _ast3393; // RecordType const v8::StackFrame
struct _ast3394; // RecordType v8::StackFrame
struct _ast3395; // CXXMethodDecl GetColumn
struct _ast3396; // CXXMethodDecl GetScriptId
struct _ast3397; // CXXMethodDecl GetScriptName
struct _ast3398; // FunctionProtoType Local<v8::String> () const
struct _ast3399; // TemplateSpecializationType Local<v8::String>
struct _ast3400; // CXXMethodDecl GetScriptNameOrSourceURL
struct _ast3401; // FunctionProtoType Local<v8::String> () const
struct _ast3402; // TemplateSpecializationType Local<v8::String>
struct _ast3403; // CXXMethodDecl GetFunctionName
struct _ast3404; // FunctionProtoType Local<v8::String> () const
struct _ast3405; // TemplateSpecializationType Local<v8::String>
struct _ast3406; // CXXMethodDecl IsEval
struct _ast3407; // CXXMethodDecl IsConstructor
struct _ast3408; // CXXMethodDecl IsWasm
struct _ast3409; // CXXMethodDecl IsUserJavaScript
struct _ast3410; // EnumDecl StateTag
struct _ast3411; // EnumConstantDecl JS
struct _ast3412; // EnumConstantDecl GC
struct _ast3413; // EnumConstantDecl PARSER
struct _ast3414; // EnumConstantDecl BYTECODE_COMPILER
struct _ast3415; // EnumConstantDecl COMPILER
struct _ast3416; // EnumConstantDecl OTHER
struct _ast3417; // EnumConstantDecl EXTERNAL
struct _ast3418; // EnumConstantDecl IDLE
struct _ast3419; // CXXRecordDecl RegisterState
struct _ast3420; // CXXRecordDecl RegisterState
struct _ast3421; // CXXConstructorDecl RegisterState
struct _ast3422; // PointerType v8::RegisterState *
struct _ast3423; // RecordType v8::RegisterState
struct _ast3424; // FieldDecl pc
struct _ast3425; // FieldDecl sp
struct _ast3426; // FieldDecl fp
struct _ast3427; // FieldDecl lr
struct _ast3428; // CXXRecordDecl SampleInfo
struct _ast3429; // CXXRecordDecl SampleInfo
struct _ast3430; // FieldDecl frames_count
struct _ast3431; // FieldDecl vm_state
struct _ast3432; // FieldDecl external_callback_entry
struct _ast3433; // CXXRecordDecl MemoryRange
struct _ast3434; // CXXRecordDecl MemoryRange
struct _ast3435; // FieldDecl start
struct _ast3436; // FieldDecl length_in_bytes
struct _ast3437; // CXXRecordDecl JSEntryStub
struct _ast3438; // CXXRecordDecl JSEntryStub
struct _ast3439; // FieldDecl code
struct _ast3440; // CXXRecordDecl UnwindState
struct _ast3441; // CXXRecordDecl UnwindState
struct _ast3442; // FieldDecl code_range
struct _ast3443; // FieldDecl embedded_code_range
struct _ast3444; // FieldDecl js_entry_stub
struct _ast3445; // CXXRecordDecl JSON
struct _ast3446; // CXXRecordDecl JSON
struct _ast3447; // CXXMethodDecl Parse
struct _ast3448; // ParmVarDecl context
struct _ast3449; // ParmVarDecl json_string
struct _ast3450; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
struct _ast3451; // TemplateSpecializationType Local<v8::Context>
struct _ast3452; // TemplateSpecializationType Local<v8::String>
struct _ast3453; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3454; // CXXMethodDecl Stringify
struct _ast3455; // ParmVarDecl context
struct _ast3456; // ParmVarDecl json_object
struct _ast3457; // ParmVarDecl gap
struct _ast3458; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _ast3459; // TemplateSpecializationType Local<v8::Context>
struct _ast3460; // TemplateSpecializationType Local<v8::Value>
struct _ast3461; // TemplateSpecializationType Local<v8::String>
struct _ast3462; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3463; // CXXRecordDecl ValueSerializer
struct _ast3464; // CXXRecordDecl ValueSerializer
struct _ast3465; // CXXRecordDecl Delegate
struct _ast3466; // CXXRecordDecl Delegate
struct _ast3467; // CXXDestructorDecl ~Delegate
struct _ast3468; // FunctionProtoType void ()
struct _ast3469; // PointerType v8::ValueSerializer::Delegate *
struct _ast3470; // RecordType v8::ValueSerializer::Delegate
struct _ast3471; // CXXMethodDecl ThrowDataCloneError
struct _ast3472; // ParmVarDecl message
struct _ast3473; // FunctionProtoType void (Local<v8::String>)
struct _ast3474; // TemplateSpecializationType Local<v8::String>
struct _ast3475; // CXXMethodDecl WriteHostObject
struct _ast3476; // ParmVarDecl isolate
struct _ast3477; // ParmVarDecl object
struct _ast3478; // FunctionProtoType Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _ast3479; // TemplateSpecializationType Local<v8::Object>
struct _ast3480; // TemplateSpecializationType Maybe<bool>
struct _ast3481; // CXXMethodDecl GetSharedArrayBufferId
struct _ast3482; // ParmVarDecl isolate
struct _ast3483; // ParmVarDecl shared_array_buffer
struct _ast3484; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
struct _ast3485; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast3486; // TemplateSpecializationType Maybe<uint32_t>
struct _ast3487; // CXXMethodDecl GetWasmModuleTransferId
struct _ast3488; // ParmVarDecl isolate
struct _ast3489; // ParmVarDecl module
struct _ast3490; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
struct _ast3491; // TemplateSpecializationType Local<v8::WasmModuleObject>
struct _ast3492; // TemplateSpecializationType Maybe<uint32_t>
struct _ast3493; // CXXMethodDecl ReallocateBufferMemory
struct _ast3494; // ParmVarDecl old_buffer
struct _ast3495; // ParmVarDecl size
struct _ast3496; // ParmVarDecl actual_size
struct _ast3497; // FunctionProtoType void *(void *, size_t, size_t *)
struct _ast3498; // PointerType size_t *
struct _ast3499; // CXXMethodDecl FreeBufferMemory
struct _ast3500; // ParmVarDecl buffer
struct _ast3501; // FunctionProtoType void (void *)
struct _ast3502; // CXXMethodDecl operator=
struct _ast3503; // ParmVarDecl 
struct _ast3504; // FunctionProtoType v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
struct _ast3505; // LValueReferenceType const v8::ValueSerializer::Delegate &
struct _ast3506; // RecordType const v8::ValueSerializer::Delegate
struct _ast3507; // LValueReferenceType v8::ValueSerializer::Delegate &
struct _ast3508; // CXXConstructorDecl ValueSerializer
struct _ast3509; // ParmVarDecl isolate
struct _ast3510; // PointerType v8::ValueSerializer *
struct _ast3511; // RecordType v8::ValueSerializer
struct _ast3512; // CXXConstructorDecl ValueSerializer
struct _ast3513; // ParmVarDecl isolate
struct _ast3514; // ParmVarDecl delegate
struct _ast3515; // FunctionProtoType void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _ast3516; // CXXDestructorDecl ~ValueSerializer
struct _ast3517; // FunctionProtoType void ()
struct _ast3518; // CXXMethodDecl WriteHeader
struct _ast3519; // CXXMethodDecl WriteValue
struct _ast3520; // ParmVarDecl context
struct _ast3521; // ParmVarDecl value
struct _ast3522; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast3523; // TemplateSpecializationType Local<v8::Context>
struct _ast3524; // TemplateSpecializationType Local<v8::Value>
struct _ast3525; // TemplateSpecializationType Maybe<bool>
struct _ast3526; // CXXMethodDecl Release
struct _ast3527; // FunctionProtoType std::pair<uint8_t *, size_t> ()
struct _ast3528; // ElaboratedType std::pair<uint8_t *, size_t>
struct _ast3529; // CXXMethodDecl TransferArrayBuffer
struct _ast3530; // ParmVarDecl transfer_id
struct _ast3531; // ParmVarDecl array_buffer
struct _ast3532; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3533; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast3534; // CXXMethodDecl SetTreatArrayBufferViewsAsHostObjects
struct _ast3535; // ParmVarDecl mode
struct _ast3536; // FunctionProtoType void (bool)
struct _ast3537; // CXXMethodDecl WriteUint32
struct _ast3538; // ParmVarDecl value
struct _ast3539; // FunctionProtoType void (uint32_t)
struct _ast3540; // CXXMethodDecl WriteUint64
struct _ast3541; // ParmVarDecl value
struct _ast3542; // FunctionProtoType void (uint64_t)
struct _ast3543; // TypedefType uint64_t
struct _ast3544; // CXXMethodDecl WriteDouble
struct _ast3545; // ParmVarDecl value
struct _ast3546; // FunctionProtoType void (double)
struct _ast3547; // BuiltinType double
struct _ast3548; // CXXMethodDecl WriteRawBytes
struct _ast3549; // ParmVarDecl source
struct _ast3550; // ParmVarDecl length
struct _ast3551; // FunctionProtoType void (const void *, size_t)
struct _ast3552; // PointerType const void *
struct _ast3553; // BuiltinType const void
struct _ast3554; // CXXConstructorDecl ValueSerializer
struct _ast3555; // ParmVarDecl 
struct _ast3556; // FunctionProtoType void (const v8::ValueSerializer &)
struct _ast3557; // LValueReferenceType const v8::ValueSerializer &
struct _ast3558; // RecordType const v8::ValueSerializer
struct _ast3559; // CXXMethodDecl operator=
struct _ast3560; // ParmVarDecl 
struct _ast3561; // CXXRecordDecl ValueDeserializer
struct _ast3562; // CXXRecordDecl ValueDeserializer
struct _ast3563; // CXXRecordDecl Delegate
struct _ast3564; // CXXRecordDecl Delegate
struct _ast3565; // CXXDestructorDecl ~Delegate
struct _ast3566; // FunctionProtoType void ()
struct _ast3567; // PointerType v8::ValueDeserializer::Delegate *
struct _ast3568; // RecordType v8::ValueDeserializer::Delegate
struct _ast3569; // CXXMethodDecl ReadHostObject
struct _ast3570; // ParmVarDecl isolate
struct _ast3571; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *)
struct _ast3572; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast3573; // CXXMethodDecl GetWasmModuleFromId
struct _ast3574; // ParmVarDecl isolate
struct _ast3575; // ParmVarDecl transfer_id
struct _ast3576; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
struct _ast3577; // TemplateSpecializationType MaybeLocal<v8::WasmModuleObject>
struct _ast3578; // CXXMethodDecl GetSharedArrayBufferFromId
struct _ast3579; // ParmVarDecl isolate
struct _ast3580; // ParmVarDecl clone_id
struct _ast3581; // FunctionProtoType MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
struct _ast3582; // TemplateSpecializationType MaybeLocal<v8::SharedArrayBuffer>
struct _ast3583; // CXXMethodDecl operator=
struct _ast3584; // ParmVarDecl 
struct _ast3585; // FunctionProtoType v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
struct _ast3586; // LValueReferenceType const v8::ValueDeserializer::Delegate &
struct _ast3587; // RecordType const v8::ValueDeserializer::Delegate
struct _ast3588; // LValueReferenceType v8::ValueDeserializer::Delegate &
struct _ast3589; // CXXConstructorDecl ValueDeserializer
struct _ast3590; // ParmVarDecl isolate
struct _ast3591; // ParmVarDecl data
struct _ast3592; // ParmVarDecl size
struct _ast3593; // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t)
struct _ast3594; // PointerType v8::ValueDeserializer *
struct _ast3595; // RecordType v8::ValueDeserializer
struct _ast3596; // CXXConstructorDecl ValueDeserializer
struct _ast3597; // ParmVarDecl isolate
struct _ast3598; // ParmVarDecl data
struct _ast3599; // ParmVarDecl size
struct _ast3600; // ParmVarDecl delegate
struct _ast3601; // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
struct _ast3602; // CXXDestructorDecl ~ValueDeserializer
struct _ast3603; // FunctionProtoType void ()
struct _ast3604; // CXXMethodDecl ReadHeader
struct _ast3605; // ParmVarDecl context
struct _ast3606; // FunctionProtoType Maybe<bool> (Local<v8::Context>)
struct _ast3607; // TemplateSpecializationType Local<v8::Context>
struct _ast3608; // TemplateSpecializationType Maybe<bool>
struct _ast3609; // CXXMethodDecl ReadValue
struct _ast3610; // ParmVarDecl context
struct _ast3611; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3612; // TemplateSpecializationType Local<v8::Context>
struct _ast3613; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast3614; // CXXMethodDecl TransferArrayBuffer
struct _ast3615; // ParmVarDecl transfer_id
struct _ast3616; // ParmVarDecl array_buffer
struct _ast3617; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3618; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast3619; // CXXMethodDecl TransferSharedArrayBuffer
struct _ast3620; // ParmVarDecl id
struct _ast3621; // ParmVarDecl shared_array_buffer
struct _ast3622; // FunctionProtoType void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _ast3623; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast3624; // CXXMethodDecl SetSupportsLegacyWireFormat
struct _ast3625; // ParmVarDecl supports_legacy_wire_format
struct _ast3626; // CXXMethodDecl SetExpectInlineWasm
struct _ast3627; // ParmVarDecl allow_inline_wasm
struct _ast3628; // CXXMethodDecl GetWireFormatVersion
struct _ast3629; // FunctionProtoType uint32_t () const
struct _ast3630; // PointerType const v8::ValueDeserializer *
struct _ast3631; // RecordType const v8::ValueDeserializer
struct _ast3632; // CXXMethodDecl ReadUint32
struct _ast3633; // ParmVarDecl value
struct _ast3634; // FunctionProtoType bool (uint32_t *)
struct _ast3635; // PointerType uint32_t *
struct _ast3636; // CXXMethodDecl ReadUint64
struct _ast3637; // ParmVarDecl value
struct _ast3638; // FunctionProtoType bool (uint64_t *)
struct _ast3639; // PointerType uint64_t *
struct _ast3640; // CXXMethodDecl ReadDouble
struct _ast3641; // ParmVarDecl value
struct _ast3642; // FunctionProtoType bool (double *)
struct _ast3643; // PointerType double *
struct _ast3644; // CXXMethodDecl ReadRawBytes
struct _ast3645; // ParmVarDecl length
struct _ast3646; // ParmVarDecl data
struct _ast3647; // FunctionProtoType bool (size_t, const void **)
struct _ast3648; // PointerType const void **
struct _ast3649; // CXXConstructorDecl ValueDeserializer
struct _ast3650; // ParmVarDecl 
struct _ast3651; // FunctionProtoType void (const v8::ValueDeserializer &)
struct _ast3652; // LValueReferenceType const v8::ValueDeserializer &
struct _ast3653; // CXXMethodDecl operator=
struct _ast3654; // ParmVarDecl 
struct _ast3655; // CXXRecordDecl Value
struct _ast3656; // CXXMethodDecl IsUndefined
struct _ast3657; // PointerType const v8::Value *
struct _ast3658; // RecordType const v8::Value
struct _ast3659; // RecordType v8::Value
struct _ast3660; // CXXMethodDecl IsNull
struct _ast3661; // CXXMethodDecl IsNullOrUndefined
struct _ast3662; // CXXMethodDecl IsTrue
struct _ast3663; // CXXMethodDecl IsFalse
struct _ast3664; // CXXMethodDecl IsName
struct _ast3665; // CXXMethodDecl IsString
struct _ast3666; // CXXMethodDecl IsSymbol
struct _ast3667; // CXXMethodDecl IsFunction
struct _ast3668; // CXXMethodDecl IsArray
struct _ast3669; // CXXMethodDecl IsObject
struct _ast3670; // CXXMethodDecl IsBigInt
struct _ast3671; // CXXMethodDecl IsBoolean
struct _ast3672; // CXXMethodDecl IsNumber
struct _ast3673; // CXXMethodDecl IsExternal
struct _ast3674; // CXXMethodDecl IsInt32
struct _ast3675; // CXXMethodDecl IsUint32
struct _ast3676; // CXXMethodDecl IsDate
struct _ast3677; // CXXMethodDecl IsArgumentsObject
struct _ast3678; // CXXMethodDecl IsBigIntObject
struct _ast3679; // CXXMethodDecl IsBooleanObject
struct _ast3680; // CXXMethodDecl IsNumberObject
struct _ast3681; // CXXMethodDecl IsStringObject
struct _ast3682; // CXXMethodDecl IsSymbolObject
struct _ast3683; // CXXMethodDecl IsNativeError
struct _ast3684; // CXXMethodDecl IsRegExp
struct _ast3685; // CXXMethodDecl IsAsyncFunction
struct _ast3686; // CXXMethodDecl IsGeneratorFunction
struct _ast3687; // CXXMethodDecl IsGeneratorObject
struct _ast3688; // CXXMethodDecl IsPromise
struct _ast3689; // CXXMethodDecl IsMap
struct _ast3690; // CXXMethodDecl IsSet
struct _ast3691; // CXXMethodDecl IsMapIterator
struct _ast3692; // CXXMethodDecl IsSetIterator
struct _ast3693; // CXXMethodDecl IsWeakMap
struct _ast3694; // CXXMethodDecl IsWeakSet
struct _ast3695; // CXXMethodDecl IsArrayBuffer
struct _ast3696; // CXXMethodDecl IsArrayBufferView
struct _ast3697; // CXXMethodDecl IsTypedArray
struct _ast3698; // CXXMethodDecl IsUint8Array
struct _ast3699; // CXXMethodDecl IsUint8ClampedArray
struct _ast3700; // CXXMethodDecl IsInt8Array
struct _ast3701; // CXXMethodDecl IsUint16Array
struct _ast3702; // CXXMethodDecl IsInt16Array
struct _ast3703; // CXXMethodDecl IsUint32Array
struct _ast3704; // CXXMethodDecl IsInt32Array
struct _ast3705; // CXXMethodDecl IsFloat32Array
struct _ast3706; // CXXMethodDecl IsFloat64Array
struct _ast3707; // CXXMethodDecl IsBigInt64Array
struct _ast3708; // CXXMethodDecl IsBigUint64Array
struct _ast3709; // CXXMethodDecl IsDataView
struct _ast3710; // CXXMethodDecl IsSharedArrayBuffer
struct _ast3711; // CXXMethodDecl IsProxy
struct _ast3712; // CXXMethodDecl IsWebAssemblyCompiledModule
struct _ast3713; // CXXMethodDecl IsModuleNamespaceObject
struct _ast3714; // CXXMethodDecl ToBigInt
struct _ast3715; // ParmVarDecl context
struct _ast3716; // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _ast3717; // TemplateSpecializationType Local<v8::Context>
struct _ast3718; // TemplateSpecializationType MaybeLocal<v8::BigInt>
struct _ast3719; // CXXMethodDecl ToNumber
struct _ast3720; // ParmVarDecl context
struct _ast3721; // FunctionProtoType MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _ast3722; // TemplateSpecializationType Local<v8::Context>
struct _ast3723; // TemplateSpecializationType MaybeLocal<v8::Number>
struct _ast3724; // CXXMethodDecl ToString
struct _ast3725; // ParmVarDecl context
struct _ast3726; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3727; // TemplateSpecializationType Local<v8::Context>
struct _ast3728; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3729; // CXXMethodDecl ToDetailString
struct _ast3730; // ParmVarDecl context
struct _ast3731; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3732; // TemplateSpecializationType Local<v8::Context>
struct _ast3733; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3734; // CXXMethodDecl ToObject
struct _ast3735; // ParmVarDecl context
struct _ast3736; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast3737; // TemplateSpecializationType Local<v8::Context>
struct _ast3738; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast3739; // CXXMethodDecl ToInteger
struct _ast3740; // ParmVarDecl context
struct _ast3741; // FunctionProtoType MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _ast3742; // TemplateSpecializationType Local<v8::Context>
struct _ast3743; // TemplateSpecializationType MaybeLocal<v8::Integer>
struct _ast3744; // CXXMethodDecl ToUint32
struct _ast3745; // ParmVarDecl context
struct _ast3746; // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast3747; // TemplateSpecializationType Local<v8::Context>
struct _ast3748; // TemplateSpecializationType MaybeLocal<v8::Uint32>
struct _ast3749; // CXXMethodDecl ToInt32
struct _ast3750; // ParmVarDecl context
struct _ast3751; // FunctionProtoType MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _ast3752; // TemplateSpecializationType Local<v8::Context>
struct _ast3753; // TemplateSpecializationType MaybeLocal<v8::Int32>
struct _ast3754; // CXXMethodDecl ToBoolean
struct _ast3755; // ParmVarDecl isolate
struct _ast3756; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *) const
struct _ast3757; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3758; // CXXMethodDecl ToArrayIndex
struct _ast3759; // ParmVarDecl context
struct _ast3760; // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast3761; // TemplateSpecializationType Local<v8::Context>
struct _ast3762; // TemplateSpecializationType MaybeLocal<v8::Uint32>
struct _ast3763; // CXXMethodDecl BooleanValue
struct _ast3764; // ParmVarDecl isolate
struct _ast3765; // FunctionProtoType bool (v8::Isolate *) const
struct _ast3766; // CXXMethodDecl NumberValue
struct _ast3767; // ParmVarDecl context
struct _ast3768; // FunctionProtoType Maybe<double> (Local<v8::Context>) const
struct _ast3769; // TemplateSpecializationType Local<v8::Context>
struct _ast3770; // TemplateSpecializationType Maybe<double>
struct _ast3771; // CXXMethodDecl IntegerValue
struct _ast3772; // ParmVarDecl context
struct _ast3773; // FunctionProtoType Maybe<int64_t> (Local<v8::Context>) const
struct _ast3774; // TemplateSpecializationType Local<v8::Context>
struct _ast3775; // TemplateSpecializationType Maybe<int64_t>
struct _ast3776; // CXXMethodDecl Uint32Value
struct _ast3777; // ParmVarDecl context
struct _ast3778; // FunctionProtoType Maybe<uint32_t> (Local<v8::Context>) const
struct _ast3779; // TemplateSpecializationType Local<v8::Context>
struct _ast3780; // TemplateSpecializationType Maybe<uint32_t>
struct _ast3781; // CXXMethodDecl Int32Value
struct _ast3782; // ParmVarDecl context
struct _ast3783; // FunctionProtoType Maybe<int32_t> (Local<v8::Context>) const
struct _ast3784; // TemplateSpecializationType Local<v8::Context>
struct _ast3785; // TemplateSpecializationType Maybe<int32_t>
struct _ast3786; // CXXMethodDecl Equals
struct _ast3787; // ParmVarDecl context
struct _ast3788; // ParmVarDecl that
struct _ast3789; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _ast3790; // TemplateSpecializationType Local<v8::Context>
struct _ast3791; // TemplateSpecializationType Local<v8::Value>
struct _ast3792; // TemplateSpecializationType Maybe<bool>
struct _ast3793; // CXXMethodDecl StrictEquals
struct _ast3794; // ParmVarDecl that
struct _ast3795; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3796; // TemplateSpecializationType Local<v8::Value>
struct _ast3797; // CXXMethodDecl SameValue
struct _ast3798; // ParmVarDecl that
struct _ast3799; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3800; // TemplateSpecializationType Local<v8::Value>
struct _ast3801; // FunctionTemplateDecl Cast
struct _ast3802; // TemplateTypeParmDecl T
struct _ast3803; // CXXMethodDecl Cast
struct _ast3804; // ParmVarDecl value
struct _ast3805; // FunctionProtoType v8::Value *(T *)
struct _ast3806; // PointerType T *
struct _ast3807; // TemplateTypeParmType T
struct _ast3808; // PointerType v8::Value *
struct _ast3809; // CXXMethodDecl TypeOf
struct _ast3810; // ParmVarDecl 
struct _ast3811; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3812; // TemplateSpecializationType Local<v8::String>
struct _ast3813; // CXXMethodDecl InstanceOf
struct _ast3814; // ParmVarDecl context
struct _ast3815; // ParmVarDecl object
struct _ast3816; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _ast3817; // TemplateSpecializationType Local<v8::Context>
struct _ast3818; // TemplateSpecializationType Local<v8::Object>
struct _ast3819; // TemplateSpecializationType Maybe<bool>
struct _ast3820; // CXXRecordDecl Primitive
struct _ast3821; // CXXRecordDecl Boolean
struct _ast3822; // CXXMethodDecl Value
struct _ast3823; // PointerType const v8::Boolean *
struct _ast3824; // RecordType const v8::Boolean
struct _ast3825; // RecordType v8::Boolean
struct _ast3826; // CXXMethodDecl Cast
struct _ast3827; // ParmVarDecl obj
struct _ast3828; // FunctionProtoType v8::Boolean *(v8::Value *)
struct _ast3829; // PointerType v8::Value *
struct _ast3830; // ElaboratedType v8::Value
struct _ast3831; // PointerType v8::Boolean *
struct _ast3832; // CXXMethodDecl New
struct _ast3833; // ParmVarDecl isolate
struct _ast3834; // ParmVarDecl value
struct _ast3835; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, bool)
struct _ast3836; // TemplateSpecializationType Local<v8::Boolean>
struct _ast3837; // CXXRecordDecl Name
struct _ast3838; // CXXMethodDecl GetIdentityHash
struct _ast3839; // PointerType v8::Name *
struct _ast3840; // RecordType v8::Name
struct _ast3841; // CXXMethodDecl Cast
struct _ast3842; // ParmVarDecl obj
struct _ast3843; // FunctionProtoType v8::Name *(v8::Value *)
struct _ast3844; // EnumDecl NewStringType
struct _ast3845; // EnumConstantDecl kNormal
struct _ast3846; // EnumConstantDecl kInternalized
struct _ast3847; // CXXRecordDecl String
struct _ast3848; // VarDecl kMaxLength
struct _ast3849; // EnumDecl Encoding
struct _ast3850; // EnumConstantDecl UNKNOWN_ENCODING
struct _ast3851; // EnumConstantDecl TWO_BYTE_ENCODING
struct _ast3852; // EnumConstantDecl ONE_BYTE_ENCODING
struct _ast3853; // CXXMethodDecl Length
struct _ast3854; // PointerType const v8::String *
struct _ast3855; // RecordType const v8::String
struct _ast3856; // RecordType v8::String
struct _ast3857; // CXXMethodDecl Utf8Length
struct _ast3858; // ParmVarDecl isolate
struct _ast3859; // FunctionProtoType int (v8::Isolate *) const
struct _ast3860; // CXXMethodDecl IsOneByte
struct _ast3861; // CXXMethodDecl ContainsOnlyOneByte
struct _ast3862; // EnumDecl WriteOptions
struct _ast3863; // EnumConstantDecl NO_OPTIONS
struct _ast3864; // EnumConstantDecl HINT_MANY_WRITES_EXPECTED
struct _ast3865; // EnumConstantDecl NO_NULL_TERMINATION
struct _ast3866; // EnumConstantDecl PRESERVE_ONE_BYTE_NULL
struct _ast3867; // EnumConstantDecl REPLACE_INVALID_UTF8
struct _ast3868; // CXXMethodDecl Write
struct _ast3869; // ParmVarDecl isolate
struct _ast3870; // ParmVarDecl buffer
struct _ast3871; // ParmVarDecl start
struct _ast3872; // ParmVarDecl length
struct _ast3873; // ParmVarDecl options
struct _ast3874; // FunctionProtoType int (v8::Isolate *, uint16_t *, int, int, int) const
struct _ast3875; // PointerType uint16_t *
struct _ast3876; // CXXMethodDecl WriteOneByte
struct _ast3877; // ParmVarDecl isolate
struct _ast3878; // ParmVarDecl buffer
struct _ast3879; // ParmVarDecl start
struct _ast3880; // ParmVarDecl length
struct _ast3881; // ParmVarDecl options
struct _ast3882; // FunctionProtoType int (v8::Isolate *, uint8_t *, int, int, int) const
struct _ast3883; // PointerType uint8_t *
struct _ast3884; // CXXMethodDecl WriteUtf8
struct _ast3885; // ParmVarDecl isolate
struct _ast3886; // ParmVarDecl buffer
struct _ast3887; // ParmVarDecl length
struct _ast3888; // ParmVarDecl nchars_ref
struct _ast3889; // ParmVarDecl options
struct _ast3890; // FunctionProtoType int (v8::Isolate *, char *, int, int *, int) const
struct _ast3891; // PointerType char *
struct _ast3892; // PointerType int *
struct _ast3893; // CXXMethodDecl Empty
struct _ast3894; // ParmVarDecl isolate
struct _ast3895; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3896; // TemplateSpecializationType Local<v8::String>
struct _ast3897; // CXXMethodDecl IsExternal
struct _ast3898; // CXXMethodDecl IsExternalOneByte
struct _ast3899; // CXXRecordDecl ExternalStringResourceBase
struct _ast3900; // CXXRecordDecl ExternalStringResourceBase
struct _ast3901; // CXXDestructorDecl ~ExternalStringResourceBase
struct _ast3902; // PointerType v8::String::ExternalStringResourceBase *
struct _ast3903; // RecordType v8::String::ExternalStringResourceBase
struct _ast3904; // CXXMethodDecl IsCacheable
struct _ast3905; // PointerType const v8::String::ExternalStringResourceBase *
struct _ast3906; // RecordType const v8::String::ExternalStringResourceBase
struct _ast3907; // CXXConstructorDecl ExternalStringResourceBase
struct _ast3908; // ParmVarDecl 
struct _ast3909; // FunctionProtoType void (const v8::String::ExternalStringResourceBase &)
struct _ast3910; // LValueReferenceType const v8::String::ExternalStringResourceBase &
struct _ast3911; // CXXMethodDecl operator=
struct _ast3912; // ParmVarDecl 
struct _ast3913; // CXXConstructorDecl ExternalStringResourceBase
struct _ast3914; // FunctionProtoType void ()
struct _ast3915; // CXXMethodDecl Dispose
struct _ast3916; // CXXMethodDecl Lock
struct _ast3917; // FunctionProtoType void () const
struct _ast3918; // CXXMethodDecl Unlock
struct _ast3919; // CXXRecordDecl ExternalStringResource
struct _ast3920; // CXXRecordDecl ExternalStringResource
struct _ast3921; // CXXDestructorDecl ~ExternalStringResource
struct _ast3922; // PointerType v8::String::ExternalStringResource *
struct _ast3923; // RecordType v8::String::ExternalStringResource
struct _ast3924; // CXXMethodDecl data
struct _ast3925; // FunctionProtoType const uint16_t *() const
struct _ast3926; // PointerType const uint16_t *
struct _ast3927; // TypedefType const uint16_t
struct _ast3928; // PointerType const v8::String::ExternalStringResource *
struct _ast3929; // RecordType const v8::String::ExternalStringResource
struct _ast3930; // CXXMethodDecl length
struct _ast3931; // FunctionProtoType size_t () const
struct _ast3932; // CXXConstructorDecl ExternalStringResource
struct _ast3933; // FunctionProtoType void ()
struct _ast3934; // CXXConstructorDecl ExternalStringResource
struct _ast3935; // ParmVarDecl 
struct _ast3936; // FunctionProtoType void (const v8::String::ExternalStringResource &)
struct _ast3937; // LValueReferenceType const v8::String::ExternalStringResource &
struct _ast3938; // CXXMethodDecl operator=
struct _ast3939; // ParmVarDecl 
struct _ast3940; // FunctionProtoType v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
struct _ast3941; // LValueReferenceType v8::String::ExternalStringResource &
struct _ast3942; // CXXRecordDecl ExternalOneByteStringResource
struct _ast3943; // CXXRecordDecl ExternalOneByteStringResource
struct _ast3944; // CXXDestructorDecl ~ExternalOneByteStringResource
struct _ast3945; // PointerType v8::String::ExternalOneByteStringResource *
struct _ast3946; // RecordType v8::String::ExternalOneByteStringResource
struct _ast3947; // CXXMethodDecl data
struct _ast3948; // FunctionProtoType const char *() const
struct _ast3949; // PointerType const v8::String::ExternalOneByteStringResource *
struct _ast3950; // RecordType const v8::String::ExternalOneByteStringResource
struct _ast3951; // CXXMethodDecl length
struct _ast3952; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast3953; // FunctionProtoType void ()
struct _ast3954; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast3955; // ParmVarDecl 
struct _ast3956; // FunctionProtoType void (const v8::String::ExternalOneByteStringResource &)
struct _ast3957; // LValueReferenceType const v8::String::ExternalOneByteStringResource &
struct _ast3958; // CXXMethodDecl operator=
struct _ast3959; // ParmVarDecl 
struct _ast3960; // FunctionProtoType v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
struct _ast3961; // LValueReferenceType v8::String::ExternalOneByteStringResource &
struct _ast3962; // CXXMethodDecl GetExternalStringResourceBase
struct _ast3963; // ParmVarDecl encoding_out
struct _ast3964; // FunctionProtoType v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
struct _ast3965; // PointerType v8::String::Encoding *
struct _ast3966; // EnumType v8::String::Encoding
struct _ast3967; // CXXMethodDecl GetExternalStringResource
struct _ast3968; // FunctionProtoType v8::String::ExternalStringResource *() const
struct _ast3969; // CXXMethodDecl GetExternalOneByteStringResource
struct _ast3970; // FunctionProtoType const v8::String::ExternalOneByteStringResource *() const
struct _ast3971; // CXXMethodDecl Cast
struct _ast3972; // ParmVarDecl obj
struct _ast3973; // FunctionProtoType v8::String *(v8::Value *)
struct _ast3974; // PointerType v8::String *
struct _ast3975; // CXXMethodDecl NewFromUtf8
struct _ast3976; // ParmVarDecl isolate
struct _ast3977; // ParmVarDecl data
struct _ast3978; // ParmVarDecl type
struct _ast3979; // ParmVarDecl length
struct _ast3980; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
struct _ast3981; // EnumType v8::NewStringType
struct _ast3982; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3983; // CXXMethodDecl NewFromOneByte
struct _ast3984; // ParmVarDecl isolate
struct _ast3985; // ParmVarDecl data
struct _ast3986; // ParmVarDecl type
struct _ast3987; // ParmVarDecl length
struct _ast3988; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
struct _ast3989; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3990; // CXXMethodDecl NewFromTwoByte
struct _ast3991; // ParmVarDecl isolate
struct _ast3992; // ParmVarDecl data
struct _ast3993; // ParmVarDecl type
struct _ast3994; // ParmVarDecl length
struct _ast3995; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
struct _ast3996; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast3997; // CXXMethodDecl Concat
struct _ast3998; // ParmVarDecl isolate
struct _ast3999; // ParmVarDecl left
struct _ast4000; // ParmVarDecl right
struct _ast4001; // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
struct _ast4002; // TemplateSpecializationType Local<v8::String>
struct _ast4003; // TemplateSpecializationType Local<v8::String>
struct _ast4004; // TemplateSpecializationType Local<v8::String>
struct _ast4005; // CXXMethodDecl NewExternalTwoByte
struct _ast4006; // ParmVarDecl isolate
struct _ast4007; // ParmVarDecl resource
struct _ast4008; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
struct _ast4009; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4010; // CXXMethodDecl MakeExternal
struct _ast4011; // ParmVarDecl resource
struct _ast4012; // FunctionProtoType bool (v8::String::ExternalStringResource *)
struct _ast4013; // CXXMethodDecl NewExternalOneByte
struct _ast4014; // ParmVarDecl isolate
struct _ast4015; // ParmVarDecl resource
struct _ast4016; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
struct _ast4017; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4018; // CXXMethodDecl MakeExternal
struct _ast4019; // ParmVarDecl resource
struct _ast4020; // FunctionProtoType bool (v8::String::ExternalOneByteStringResource *)
struct _ast4021; // CXXMethodDecl CanMakeExternal
struct _ast4022; // CXXMethodDecl StringEquals
struct _ast4023; // ParmVarDecl str
struct _ast4024; // FunctionProtoType bool (Local<v8::String>)
struct _ast4025; // TemplateSpecializationType Local<v8::String>
struct _ast4026; // CXXRecordDecl Utf8Value
struct _ast4027; // CXXRecordDecl Utf8Value
struct _ast4028; // CXXConstructorDecl Utf8Value
struct _ast4029; // ParmVarDecl isolate
struct _ast4030; // ParmVarDecl obj
struct _ast4031; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4032; // TemplateSpecializationType Local<v8::Value>
struct _ast4033; // PointerType v8::String::Utf8Value *
struct _ast4034; // RecordType v8::String::Utf8Value
struct _ast4035; // CXXDestructorDecl ~Utf8Value
struct _ast4036; // FunctionProtoType void ()
struct _ast4037; // CXXMethodDecl operator*
struct _ast4038; // FunctionProtoType char *()
struct _ast4039; // CXXMethodDecl operator*
struct _ast4040; // PointerType const v8::String::Utf8Value *
struct _ast4041; // RecordType const v8::String::Utf8Value
struct _ast4042; // CXXMethodDecl length
struct _ast4043; // CXXConstructorDecl Utf8Value
struct _ast4044; // ParmVarDecl 
struct _ast4045; // FunctionProtoType void (const v8::String::Utf8Value &)
struct _ast4046; // LValueReferenceType const v8::String::Utf8Value &
struct _ast4047; // CXXMethodDecl operator=
struct _ast4048; // ParmVarDecl 
struct _ast4049; // CXXRecordDecl Value
struct _ast4050; // CXXRecordDecl Value
struct _ast4051; // CXXConstructorDecl Value
struct _ast4052; // ParmVarDecl isolate
struct _ast4053; // ParmVarDecl obj
struct _ast4054; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4055; // TemplateSpecializationType Local<v8::Value>
struct _ast4056; // PointerType v8::String::Value *
struct _ast4057; // RecordType v8::String::Value
struct _ast4058; // CXXDestructorDecl ~Value
struct _ast4059; // FunctionProtoType void ()
struct _ast4060; // CXXMethodDecl operator*
struct _ast4061; // FunctionProtoType uint16_t *()
struct _ast4062; // CXXMethodDecl operator*
struct _ast4063; // PointerType const v8::String::Value *
struct _ast4064; // RecordType const v8::String::Value
struct _ast4065; // CXXMethodDecl length
struct _ast4066; // CXXConstructorDecl Value
struct _ast4067; // ParmVarDecl 
struct _ast4068; // FunctionProtoType void (const v8::String::Value &)
struct _ast4069; // LValueReferenceType const v8::String::Value &
struct _ast4070; // CXXMethodDecl operator=
struct _ast4071; // ParmVarDecl 
struct _ast4072; // CXXRecordDecl Symbol
struct _ast4073; // CXXMethodDecl Name
struct _ast4074; // FunctionProtoType Local<v8::Value> () const
struct _ast4075; // TemplateSpecializationType Local<v8::Value>
struct _ast4076; // PointerType const v8::Symbol *
struct _ast4077; // RecordType const v8::Symbol
struct _ast4078; // RecordType v8::Symbol
struct _ast4079; // CXXMethodDecl New
struct _ast4080; // ParmVarDecl isolate
struct _ast4081; // ParmVarDecl name
struct _ast4082; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4083; // TemplateSpecializationType Local<v8::String>
struct _ast4084; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4085; // CXXMethodDecl For
struct _ast4086; // ParmVarDecl isolate
struct _ast4087; // ParmVarDecl name
struct _ast4088; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4089; // TemplateSpecializationType Local<v8::String>
struct _ast4090; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4091; // CXXMethodDecl ForApi
struct _ast4092; // ParmVarDecl isolate
struct _ast4093; // ParmVarDecl name
struct _ast4094; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4095; // TemplateSpecializationType Local<v8::String>
struct _ast4096; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4097; // CXXMethodDecl GetAsyncIterator
struct _ast4098; // ParmVarDecl isolate
struct _ast4099; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4100; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4101; // CXXMethodDecl GetHasInstance
struct _ast4102; // ParmVarDecl isolate
struct _ast4103; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4104; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4105; // CXXMethodDecl GetIsConcatSpreadable
struct _ast4106; // ParmVarDecl isolate
struct _ast4107; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4108; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4109; // CXXMethodDecl GetIterator
struct _ast4110; // ParmVarDecl isolate
struct _ast4111; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4112; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4113; // CXXMethodDecl GetMatch
struct _ast4114; // ParmVarDecl isolate
struct _ast4115; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4116; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4117; // CXXMethodDecl GetReplace
struct _ast4118; // ParmVarDecl isolate
struct _ast4119; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4120; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4121; // CXXMethodDecl GetSearch
struct _ast4122; // ParmVarDecl isolate
struct _ast4123; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4124; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4125; // CXXMethodDecl GetSplit
struct _ast4126; // ParmVarDecl isolate
struct _ast4127; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4128; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4129; // CXXMethodDecl GetToPrimitive
struct _ast4130; // ParmVarDecl isolate
struct _ast4131; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4132; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4133; // CXXMethodDecl GetToStringTag
struct _ast4134; // ParmVarDecl isolate
struct _ast4135; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4136; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4137; // CXXMethodDecl GetUnscopables
struct _ast4138; // ParmVarDecl isolate
struct _ast4139; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4140; // TemplateSpecializationType Local<v8::Symbol>
struct _ast4141; // CXXMethodDecl Cast
struct _ast4142; // ParmVarDecl obj
struct _ast4143; // FunctionProtoType v8::Symbol *(v8::Value *)
struct _ast4144; // PointerType v8::Symbol *
struct _ast4145; // CXXRecordDecl Private
struct _ast4146; // CXXMethodDecl Name
struct _ast4147; // FunctionProtoType Local<v8::Value> () const
struct _ast4148; // TemplateSpecializationType Local<v8::Value>
struct _ast4149; // PointerType const v8::Private *
struct _ast4150; // RecordType const v8::Private
struct _ast4151; // RecordType v8::Private
struct _ast4152; // CXXMethodDecl New
struct _ast4153; // ParmVarDecl isolate
struct _ast4154; // ParmVarDecl name
struct _ast4155; // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4156; // TemplateSpecializationType Local<v8::String>
struct _ast4157; // TemplateSpecializationType Local<v8::Private>
struct _ast4158; // CXXMethodDecl ForApi
struct _ast4159; // ParmVarDecl isolate
struct _ast4160; // ParmVarDecl name
struct _ast4161; // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4162; // TemplateSpecializationType Local<v8::String>
struct _ast4163; // TemplateSpecializationType Local<v8::Private>
struct _ast4164; // CXXMethodDecl Cast
struct _ast4165; // ParmVarDecl data
struct _ast4166; // FunctionProtoType v8::Private *(v8::Data *)
struct _ast4167; // PointerType v8::Data *
struct _ast4168; // RecordType v8::Data
struct _ast4169; // PointerType v8::Private *
struct _ast4170; // CXXRecordDecl Number
struct _ast4171; // CXXMethodDecl Value
struct _ast4172; // FunctionProtoType double () const
struct _ast4173; // PointerType const v8::Number *
struct _ast4174; // RecordType const v8::Number
struct _ast4175; // RecordType v8::Number
struct _ast4176; // CXXMethodDecl New
struct _ast4177; // ParmVarDecl isolate
struct _ast4178; // ParmVarDecl value
struct _ast4179; // FunctionProtoType Local<v8::Number> (v8::Isolate *, double)
struct _ast4180; // TemplateSpecializationType Local<v8::Number>
struct _ast4181; // CXXMethodDecl Cast
struct _ast4182; // ParmVarDecl obj
struct _ast4183; // FunctionProtoType v8::Number *(v8::Value *)
struct _ast4184; // PointerType v8::Number *
struct _ast4185; // CXXRecordDecl Integer
struct _ast4186; // CXXMethodDecl New
struct _ast4187; // ParmVarDecl isolate
struct _ast4188; // ParmVarDecl value
struct _ast4189; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, int32_t)
struct _ast4190; // TypedefType int32_t
struct _ast4191; // TemplateSpecializationType Local<v8::Integer>
struct _ast4192; // CXXMethodDecl NewFromUnsigned
struct _ast4193; // ParmVarDecl isolate
struct _ast4194; // ParmVarDecl value
struct _ast4195; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _ast4196; // TemplateSpecializationType Local<v8::Integer>
struct _ast4197; // CXXMethodDecl Value
struct _ast4198; // FunctionProtoType int64_t () const
struct _ast4199; // TypedefType int64_t
struct _ast4200; // PointerType const v8::Integer *
struct _ast4201; // RecordType const v8::Integer
struct _ast4202; // RecordType v8::Integer
struct _ast4203; // CXXMethodDecl Cast
struct _ast4204; // ParmVarDecl obj
struct _ast4205; // FunctionProtoType v8::Integer *(v8::Value *)
struct _ast4206; // PointerType v8::Integer *
struct _ast4207; // CXXRecordDecl Int32
struct _ast4208; // CXXMethodDecl Value
struct _ast4209; // FunctionProtoType int32_t () const
struct _ast4210; // PointerType const v8::Int32 *
struct _ast4211; // RecordType const v8::Int32
struct _ast4212; // RecordType v8::Int32
struct _ast4213; // CXXMethodDecl Cast
struct _ast4214; // ParmVarDecl obj
struct _ast4215; // FunctionProtoType v8::Int32 *(v8::Value *)
struct _ast4216; // PointerType v8::Int32 *
struct _ast4217; // CXXRecordDecl Uint32
struct _ast4218; // CXXMethodDecl Value
struct _ast4219; // PointerType const v8::Uint32 *
struct _ast4220; // RecordType const v8::Uint32
struct _ast4221; // RecordType v8::Uint32
struct _ast4222; // CXXMethodDecl Cast
struct _ast4223; // ParmVarDecl obj
struct _ast4224; // FunctionProtoType v8::Uint32 *(v8::Value *)
struct _ast4225; // PointerType v8::Uint32 *
struct _ast4226; // CXXRecordDecl BigInt
struct _ast4227; // CXXMethodDecl New
struct _ast4228; // ParmVarDecl isolate
struct _ast4229; // ParmVarDecl value
struct _ast4230; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ast4231; // TemplateSpecializationType Local<v8::BigInt>
struct _ast4232; // CXXMethodDecl NewFromUnsigned
struct _ast4233; // ParmVarDecl isolate
struct _ast4234; // ParmVarDecl value
struct _ast4235; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _ast4236; // TemplateSpecializationType Local<v8::BigInt>
struct _ast4237; // CXXMethodDecl NewFromWords
struct _ast4238; // ParmVarDecl context
struct _ast4239; // ParmVarDecl sign_bit
struct _ast4240; // ParmVarDecl word_count
struct _ast4241; // ParmVarDecl words
struct _ast4242; // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
struct _ast4243; // TemplateSpecializationType Local<v8::Context>
struct _ast4244; // PointerType const uint64_t *
struct _ast4245; // TypedefType const uint64_t
struct _ast4246; // TemplateSpecializationType MaybeLocal<v8::BigInt>
struct _ast4247; // CXXMethodDecl Uint64Value
struct _ast4248; // ParmVarDecl lossless
struct _ast4249; // FunctionProtoType uint64_t (bool *) const
struct _ast4250; // PointerType bool *
struct _ast4251; // PointerType const v8::BigInt *
struct _ast4252; // RecordType const v8::BigInt
struct _ast4253; // RecordType v8::BigInt
struct _ast4254; // CXXMethodDecl Int64Value
struct _ast4255; // ParmVarDecl lossless
struct _ast4256; // FunctionProtoType int64_t (bool *) const
struct _ast4257; // CXXMethodDecl WordCount
struct _ast4258; // CXXMethodDecl ToWordsArray
struct _ast4259; // ParmVarDecl sign_bit
struct _ast4260; // ParmVarDecl word_count
struct _ast4261; // ParmVarDecl words
struct _ast4262; // FunctionProtoType void (int *, int *, uint64_t *) const
struct _ast4263; // CXXMethodDecl Cast
struct _ast4264; // ParmVarDecl obj
struct _ast4265; // FunctionProtoType v8::BigInt *(v8::Value *)
struct _ast4266; // PointerType v8::BigInt *
struct _ast4267; // EnumDecl PropertyAttribute
struct _ast4268; // EnumConstantDecl None
struct _ast4269; // EnumConstantDecl ReadOnly
struct _ast4270; // EnumConstantDecl DontEnum
struct _ast4271; // EnumConstantDecl DontDelete
struct _ast4272; // TypedefDecl AccessorGetterCallback
struct _ast4273; // PointerType void (*)(Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4274; // ParenType void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4275; // FunctionProtoType void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4276; // TemplateSpecializationType Local<v8::String>
struct _ast4277; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast4278; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast4279; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast4280; // TypedefDecl AccessorNameGetterCallback
struct _ast4281; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4282; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4283; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4284; // TemplateSpecializationType Local<v8::Name>
struct _ast4285; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast4286; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast4287; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast4288; // TypedefDecl AccessorSetterCallback
struct _ast4289; // PointerType void (*)(Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4290; // ParenType void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4291; // FunctionProtoType void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4292; // TemplateSpecializationType Local<v8::String>
struct _ast4293; // TemplateSpecializationType Local<v8::Value>
struct _ast4294; // LValueReferenceType const PropertyCallbackInfo<void> &
struct _ast4295; // TemplateSpecializationType const PropertyCallbackInfo<void>
struct _ast4296; // TemplateSpecializationType PropertyCallbackInfo<void>
struct _ast4297; // TypedefDecl AccessorNameSetterCallback
struct _ast4298; // PointerType void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4299; // ParenType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4300; // FunctionProtoType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4301; // TemplateSpecializationType Local<v8::Name>
struct _ast4302; // TemplateSpecializationType Local<v8::Value>
struct _ast4303; // LValueReferenceType const PropertyCallbackInfo<void> &
struct _ast4304; // TemplateSpecializationType const PropertyCallbackInfo<void>
struct _ast4305; // TemplateSpecializationType PropertyCallbackInfo<void>
struct _ast4306; // EnumDecl AccessControl
struct _ast4307; // EnumConstantDecl DEFAULT
struct _ast4308; // EnumConstantDecl ALL_CAN_READ
struct _ast4309; // EnumConstantDecl ALL_CAN_WRITE
struct _ast4310; // EnumConstantDecl PROHIBITS_OVERWRITING
struct _ast4311; // EnumDecl PropertyFilter
struct _ast4312; // EnumConstantDecl ALL_PROPERTIES
struct _ast4313; // EnumConstantDecl ONLY_WRITABLE
struct _ast4314; // EnumConstantDecl ONLY_ENUMERABLE
struct _ast4315; // EnumConstantDecl ONLY_CONFIGURABLE
struct _ast4316; // EnumConstantDecl SKIP_STRINGS
struct _ast4317; // EnumConstantDecl SKIP_SYMBOLS
struct _ast4318; // EnumDecl SideEffectType
struct _ast4319; // EnumConstantDecl kHasSideEffect
struct _ast4320; // EnumConstantDecl kHasNoSideEffect
struct _ast4321; // EnumConstantDecl kHasSideEffectToReceiver
struct _ast4322; // EnumDecl KeyCollectionMode
struct _ast4323; // EnumConstantDecl kOwnOnly
struct _ast4324; // EnumConstantDecl kIncludePrototypes
struct _ast4325; // EnumDecl IndexFilter
struct _ast4326; // EnumConstantDecl kIncludeIndices
struct _ast4327; // EnumConstantDecl kSkipIndices
struct _ast4328; // EnumDecl KeyConversionMode
struct _ast4329; // EnumConstantDecl kConvertToString
struct _ast4330; // EnumConstantDecl kKeepNumbers
struct _ast4331; // EnumDecl IntegrityLevel
struct _ast4332; // EnumConstantDecl kFrozen
struct _ast4333; // EnumConstantDecl kSealed
struct _ast4334; // CXXRecordDecl Object
struct _ast4335; // CXXMethodDecl Set
struct _ast4336; // ParmVarDecl key
struct _ast4337; // ParmVarDecl value
struct _ast4338; // FunctionProtoType bool (Local<v8::Value>, Local<v8::Value>)
struct _ast4339; // TemplateSpecializationType Local<v8::Value>
struct _ast4340; // TemplateSpecializationType Local<v8::Value>
struct _ast4341; // PointerType v8::Object *
struct _ast4342; // RecordType v8::Object
struct _ast4343; // CXXMethodDecl Set
struct _ast4344; // ParmVarDecl context
struct _ast4345; // ParmVarDecl key
struct _ast4346; // ParmVarDecl value
struct _ast4347; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast4348; // TemplateSpecializationType Local<v8::Context>
struct _ast4349; // TemplateSpecializationType Local<v8::Value>
struct _ast4350; // TemplateSpecializationType Local<v8::Value>
struct _ast4351; // TemplateSpecializationType Maybe<bool>
struct _ast4352; // CXXMethodDecl Set
struct _ast4353; // ParmVarDecl index
struct _ast4354; // ParmVarDecl value
struct _ast4355; // FunctionProtoType bool (uint32_t, Local<v8::Value>)
struct _ast4356; // TemplateSpecializationType Local<v8::Value>
struct _ast4357; // CXXMethodDecl Set
struct _ast4358; // ParmVarDecl context
struct _ast4359; // ParmVarDecl index
struct _ast4360; // ParmVarDecl value
struct _ast4361; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4362; // TemplateSpecializationType Local<v8::Context>
struct _ast4363; // TemplateSpecializationType Local<v8::Value>
struct _ast4364; // TemplateSpecializationType Maybe<bool>
struct _ast4365; // CXXMethodDecl CreateDataProperty
struct _ast4366; // ParmVarDecl context
struct _ast4367; // ParmVarDecl key
struct _ast4368; // ParmVarDecl value
struct _ast4369; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
struct _ast4370; // TemplateSpecializationType Local<v8::Context>
struct _ast4371; // TemplateSpecializationType Local<v8::Name>
struct _ast4372; // TemplateSpecializationType Local<v8::Value>
struct _ast4373; // TemplateSpecializationType Maybe<bool>
struct _ast4374; // CXXMethodDecl CreateDataProperty
struct _ast4375; // ParmVarDecl context
struct _ast4376; // ParmVarDecl index
struct _ast4377; // ParmVarDecl value
struct _ast4378; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4379; // TemplateSpecializationType Local<v8::Context>
struct _ast4380; // TemplateSpecializationType Local<v8::Value>
struct _ast4381; // TemplateSpecializationType Maybe<bool>
struct _ast4382; // CXXMethodDecl DefineOwnProperty
struct _ast4383; // ParmVarDecl context
struct _ast4384; // ParmVarDecl key
struct _ast4385; // ParmVarDecl value
struct _ast4386; // ParmVarDecl attributes
struct _ast4387; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _ast4388; // TemplateSpecializationType Local<v8::Context>
struct _ast4389; // TemplateSpecializationType Local<v8::Name>
struct _ast4390; // TemplateSpecializationType Local<v8::Value>
struct _ast4391; // EnumType v8::PropertyAttribute
struct _ast4392; // TemplateSpecializationType Maybe<bool>
struct _ast4393; // CXXMethodDecl DefineProperty
struct _ast4394; // ParmVarDecl context
struct _ast4395; // ParmVarDecl key
struct _ast4396; // ParmVarDecl descriptor
struct _ast4397; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
struct _ast4398; // TemplateSpecializationType Local<v8::Context>
struct _ast4399; // TemplateSpecializationType Local<v8::Name>
struct _ast4400; // LValueReferenceType v8::PropertyDescriptor &
struct _ast4401; // RecordType v8::PropertyDescriptor
struct _ast4402; // TemplateSpecializationType Maybe<bool>
struct _ast4403; // CXXMethodDecl Get
struct _ast4404; // ParmVarDecl key
struct _ast4405; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast4406; // TemplateSpecializationType Local<v8::Value>
struct _ast4407; // TemplateSpecializationType Local<v8::Value>
struct _ast4408; // CXXMethodDecl Get
struct _ast4409; // ParmVarDecl context
struct _ast4410; // ParmVarDecl key
struct _ast4411; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast4412; // TemplateSpecializationType Local<v8::Context>
struct _ast4413; // TemplateSpecializationType Local<v8::Value>
struct _ast4414; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4415; // CXXMethodDecl Get
struct _ast4416; // ParmVarDecl index
struct _ast4417; // FunctionProtoType Local<v8::Value> (uint32_t)
struct _ast4418; // TemplateSpecializationType Local<v8::Value>
struct _ast4419; // CXXMethodDecl Get
struct _ast4420; // ParmVarDecl context
struct _ast4421; // ParmVarDecl index
struct _ast4422; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _ast4423; // TemplateSpecializationType Local<v8::Context>
struct _ast4424; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4425; // CXXMethodDecl GetPropertyAttributes
struct _ast4426; // ParmVarDecl context
struct _ast4427; // ParmVarDecl key
struct _ast4428; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
struct _ast4429; // TemplateSpecializationType Local<v8::Context>
struct _ast4430; // TemplateSpecializationType Local<v8::Value>
struct _ast4431; // TemplateSpecializationType Maybe<v8::PropertyAttribute>
struct _ast4432; // CXXMethodDecl GetOwnPropertyDescriptor
struct _ast4433; // ParmVarDecl context
struct _ast4434; // ParmVarDecl key
struct _ast4435; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4436; // TemplateSpecializationType Local<v8::Context>
struct _ast4437; // TemplateSpecializationType Local<v8::Name>
struct _ast4438; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4439; // CXXMethodDecl Has
struct _ast4440; // ParmVarDecl context
struct _ast4441; // ParmVarDecl key
struct _ast4442; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4443; // TemplateSpecializationType Local<v8::Context>
struct _ast4444; // TemplateSpecializationType Local<v8::Value>
struct _ast4445; // TemplateSpecializationType Maybe<bool>
struct _ast4446; // CXXMethodDecl Delete
struct _ast4447; // ParmVarDecl context
struct _ast4448; // ParmVarDecl key
struct _ast4449; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4450; // TemplateSpecializationType Local<v8::Context>
struct _ast4451; // TemplateSpecializationType Local<v8::Value>
struct _ast4452; // TemplateSpecializationType Maybe<bool>
struct _ast4453; // CXXMethodDecl Has
struct _ast4454; // ParmVarDecl context
struct _ast4455; // ParmVarDecl index
struct _ast4456; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4457; // TemplateSpecializationType Local<v8::Context>
struct _ast4458; // TemplateSpecializationType Maybe<bool>
struct _ast4459; // CXXMethodDecl Delete
struct _ast4460; // ParmVarDecl context
struct _ast4461; // ParmVarDecl index
struct _ast4462; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4463; // TemplateSpecializationType Local<v8::Context>
struct _ast4464; // TemplateSpecializationType Maybe<bool>
struct _ast4465; // CXXMethodDecl SetAccessor
struct _ast4466; // ParmVarDecl context
struct _ast4467; // ParmVarDecl name
struct _ast4468; // ParmVarDecl getter
struct _ast4469; // ParmVarDecl setter
struct _ast4470; // ParmVarDecl data
struct _ast4471; // ParmVarDecl settings
struct _ast4472; // ParmVarDecl attribute
struct _ast4473; // ParmVarDecl getter_side_effect_type
struct _ast4474; // ParmVarDecl setter_side_effect_type
struct _ast4475; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4476; // TemplateSpecializationType Local<v8::Context>
struct _ast4477; // TemplateSpecializationType Local<v8::Name>
struct _ast4478; // TypedefType v8::AccessorNameGetterCallback
struct _ast4479; // TypedefType v8::AccessorNameSetterCallback
struct _ast4480; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4481; // EnumType v8::AccessControl
struct _ast4482; // EnumType v8::SideEffectType
struct _ast4483; // TemplateSpecializationType Maybe<bool>
struct _ast4484; // CXXMethodDecl SetAccessorProperty
struct _ast4485; // ParmVarDecl name
struct _ast4486; // ParmVarDecl getter
struct _ast4487; // ParmVarDecl setter
struct _ast4488; // ParmVarDecl attribute
struct _ast4489; // ParmVarDecl settings
struct _ast4490; // FunctionProtoType void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _ast4491; // TemplateSpecializationType Local<v8::Name>
struct _ast4492; // TemplateSpecializationType Local<v8::Function>
struct _ast4493; // TemplateSpecializationType Local<v8::Function>
struct _ast4494; // CXXMethodDecl SetNativeDataProperty
struct _ast4495; // ParmVarDecl context
struct _ast4496; // ParmVarDecl name
struct _ast4497; // ParmVarDecl getter
struct _ast4498; // ParmVarDecl setter
struct _ast4499; // ParmVarDecl data
struct _ast4500; // ParmVarDecl attributes
struct _ast4501; // ParmVarDecl getter_side_effect_type
struct _ast4502; // ParmVarDecl setter_side_effect_type
struct _ast4503; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4504; // TemplateSpecializationType Local<v8::Context>
struct _ast4505; // TemplateSpecializationType Local<v8::Name>
struct _ast4506; // TemplateSpecializationType Local<v8::Value>
struct _ast4507; // TemplateSpecializationType Maybe<bool>
struct _ast4508; // CXXMethodDecl SetLazyDataProperty
struct _ast4509; // ParmVarDecl context
struct _ast4510; // ParmVarDecl name
struct _ast4511; // ParmVarDecl getter
struct _ast4512; // ParmVarDecl data
struct _ast4513; // ParmVarDecl attributes
struct _ast4514; // ParmVarDecl getter_side_effect_type
struct _ast4515; // ParmVarDecl setter_side_effect_type
struct _ast4516; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4517; // TemplateSpecializationType Local<v8::Context>
struct _ast4518; // TemplateSpecializationType Local<v8::Name>
struct _ast4519; // TemplateSpecializationType Local<v8::Value>
struct _ast4520; // TemplateSpecializationType Maybe<bool>
struct _ast4521; // CXXMethodDecl HasPrivate
struct _ast4522; // ParmVarDecl context
struct _ast4523; // ParmVarDecl key
struct _ast4524; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4525; // TemplateSpecializationType Local<v8::Context>
struct _ast4526; // TemplateSpecializationType Local<v8::Private>
struct _ast4527; // TemplateSpecializationType Maybe<bool>
struct _ast4528; // CXXMethodDecl SetPrivate
struct _ast4529; // ParmVarDecl context
struct _ast4530; // ParmVarDecl key
struct _ast4531; // ParmVarDecl value
struct _ast4532; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
struct _ast4533; // TemplateSpecializationType Local<v8::Context>
struct _ast4534; // TemplateSpecializationType Local<v8::Private>
struct _ast4535; // TemplateSpecializationType Local<v8::Value>
struct _ast4536; // TemplateSpecializationType Maybe<bool>
struct _ast4537; // CXXMethodDecl DeletePrivate
struct _ast4538; // ParmVarDecl context
struct _ast4539; // ParmVarDecl key
struct _ast4540; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4541; // TemplateSpecializationType Local<v8::Context>
struct _ast4542; // TemplateSpecializationType Local<v8::Private>
struct _ast4543; // TemplateSpecializationType Maybe<bool>
struct _ast4544; // CXXMethodDecl GetPrivate
struct _ast4545; // ParmVarDecl context
struct _ast4546; // ParmVarDecl key
struct _ast4547; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
struct _ast4548; // TemplateSpecializationType Local<v8::Context>
struct _ast4549; // TemplateSpecializationType Local<v8::Private>
struct _ast4550; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4551; // CXXMethodDecl GetPropertyNames
struct _ast4552; // ParmVarDecl context
struct _ast4553; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4554; // TemplateSpecializationType Local<v8::Context>
struct _ast4555; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4556; // CXXMethodDecl GetPropertyNames
struct _ast4557; // ParmVarDecl context
struct _ast4558; // ParmVarDecl mode
struct _ast4559; // ParmVarDecl property_filter
struct _ast4560; // ParmVarDecl index_filter
struct _ast4561; // ParmVarDecl key_conversion
struct _ast4562; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
struct _ast4563; // TemplateSpecializationType Local<v8::Context>
struct _ast4564; // EnumType v8::KeyCollectionMode
struct _ast4565; // EnumType v8::PropertyFilter
struct _ast4566; // EnumType v8::IndexFilter
struct _ast4567; // EnumType v8::KeyConversionMode
struct _ast4568; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4569; // CXXMethodDecl GetOwnPropertyNames
struct _ast4570; // ParmVarDecl context
struct _ast4571; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4572; // TemplateSpecializationType Local<v8::Context>
struct _ast4573; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4574; // CXXMethodDecl GetOwnPropertyNames
struct _ast4575; // ParmVarDecl context
struct _ast4576; // ParmVarDecl filter
struct _ast4577; // ParmVarDecl key_conversion
struct _ast4578; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
struct _ast4579; // TemplateSpecializationType Local<v8::Context>
struct _ast4580; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4581; // CXXMethodDecl GetPrototype
struct _ast4582; // FunctionProtoType Local<v8::Value> ()
struct _ast4583; // TemplateSpecializationType Local<v8::Value>
struct _ast4584; // CXXMethodDecl SetPrototype
struct _ast4585; // ParmVarDecl context
struct _ast4586; // ParmVarDecl prototype
struct _ast4587; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4588; // TemplateSpecializationType Local<v8::Context>
struct _ast4589; // TemplateSpecializationType Local<v8::Value>
struct _ast4590; // TemplateSpecializationType Maybe<bool>
struct _ast4591; // CXXMethodDecl FindInstanceInPrototypeChain
struct _ast4592; // ParmVarDecl tmpl
struct _ast4593; // FunctionProtoType Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _ast4594; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast4595; // TemplateSpecializationType Local<v8::Object>
struct _ast4596; // CXXMethodDecl ObjectProtoToString
struct _ast4597; // ParmVarDecl context
struct _ast4598; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>)
struct _ast4599; // TemplateSpecializationType Local<v8::Context>
struct _ast4600; // TemplateSpecializationType MaybeLocal<v8::String>
struct _ast4601; // CXXMethodDecl GetConstructorName
struct _ast4602; // FunctionProtoType Local<v8::String> ()
struct _ast4603; // TemplateSpecializationType Local<v8::String>
struct _ast4604; // CXXMethodDecl SetIntegrityLevel
struct _ast4605; // ParmVarDecl context
struct _ast4606; // ParmVarDecl level
struct _ast4607; // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _ast4608; // TemplateSpecializationType Local<v8::Context>
struct _ast4609; // EnumType v8::IntegrityLevel
struct _ast4610; // TemplateSpecializationType Maybe<bool>
struct _ast4611; // CXXMethodDecl InternalFieldCount
struct _ast4612; // CXXMethodDecl InternalFieldCount
struct _ast4613; // ParmVarDecl object
struct _ast4614; // FunctionProtoType int (const PersistentBase<v8::Object> &)
struct _ast4615; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4616; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4617; // TemplateSpecializationType PersistentBase<v8::Object>
struct _ast4618; // CXXMethodDecl InternalFieldCount
struct _ast4619; // ParmVarDecl object
struct _ast4620; // FunctionProtoType int (const TracedGlobal<v8::Object> &)
struct _ast4621; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4622; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4623; // TemplateSpecializationType TracedGlobal<v8::Object>
struct _ast4624; // CXXMethodDecl GetInternalField
struct _ast4625; // ParmVarDecl index
struct _ast4626; // FunctionProtoType Local<v8::Value> (int)
struct _ast4627; // TemplateSpecializationType Local<v8::Value>
struct _ast4628; // CXXMethodDecl SetInternalField
struct _ast4629; // ParmVarDecl index
struct _ast4630; // ParmVarDecl value
struct _ast4631; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast4632; // TemplateSpecializationType Local<v8::Value>
struct _ast4633; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4634; // ParmVarDecl index
struct _ast4635; // FunctionProtoType void *(int)
struct _ast4636; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4637; // ParmVarDecl object
struct _ast4638; // ParmVarDecl index
struct _ast4639; // FunctionProtoType void *(const PersistentBase<v8::Object> &, int)
struct _ast4640; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4641; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4642; // TemplateSpecializationType PersistentBase<v8::Object>
struct _ast4643; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4644; // ParmVarDecl object
struct _ast4645; // ParmVarDecl index
struct _ast4646; // FunctionProtoType void *(const TracedGlobal<v8::Object> &, int)
struct _ast4647; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4648; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4649; // TemplateSpecializationType TracedGlobal<v8::Object>
struct _ast4650; // CXXMethodDecl SetAlignedPointerInInternalField
struct _ast4651; // ParmVarDecl index
struct _ast4652; // ParmVarDecl value
struct _ast4653; // FunctionProtoType void (int, void *)
struct _ast4654; // CXXMethodDecl SetAlignedPointerInInternalFields
struct _ast4655; // ParmVarDecl argc
struct _ast4656; // ParmVarDecl indices
struct _ast4657; // ParmVarDecl values
struct _ast4658; // FunctionProtoType void (int, int *, void **)
struct _ast4659; // DecayedType int *
struct _ast4660; // DecayedType void **
struct _ast4661; // CXXMethodDecl HasOwnProperty
struct _ast4662; // ParmVarDecl context
struct _ast4663; // ParmVarDecl key
struct _ast4664; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4665; // TemplateSpecializationType Local<v8::Context>
struct _ast4666; // TemplateSpecializationType Local<v8::Name>
struct _ast4667; // TemplateSpecializationType Maybe<bool>
struct _ast4668; // CXXMethodDecl HasOwnProperty
struct _ast4669; // ParmVarDecl context
struct _ast4670; // ParmVarDecl index
struct _ast4671; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4672; // TemplateSpecializationType Local<v8::Context>
struct _ast4673; // TemplateSpecializationType Maybe<bool>
struct _ast4674; // CXXMethodDecl HasRealNamedProperty
struct _ast4675; // ParmVarDecl context
struct _ast4676; // ParmVarDecl key
struct _ast4677; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4678; // TemplateSpecializationType Local<v8::Context>
struct _ast4679; // TemplateSpecializationType Local<v8::Name>
struct _ast4680; // TemplateSpecializationType Maybe<bool>
struct _ast4681; // CXXMethodDecl HasRealIndexedProperty
struct _ast4682; // ParmVarDecl context
struct _ast4683; // ParmVarDecl index
struct _ast4684; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4685; // TemplateSpecializationType Local<v8::Context>
struct _ast4686; // TemplateSpecializationType Maybe<bool>
struct _ast4687; // CXXMethodDecl HasRealNamedCallbackProperty
struct _ast4688; // ParmVarDecl context
struct _ast4689; // ParmVarDecl key
struct _ast4690; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4691; // TemplateSpecializationType Local<v8::Context>
struct _ast4692; // TemplateSpecializationType Local<v8::Name>
struct _ast4693; // TemplateSpecializationType Maybe<bool>
struct _ast4694; // CXXMethodDecl GetRealNamedPropertyInPrototypeChain
struct _ast4695; // ParmVarDecl context
struct _ast4696; // ParmVarDecl key
struct _ast4697; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4698; // TemplateSpecializationType Local<v8::Context>
struct _ast4699; // TemplateSpecializationType Local<v8::Name>
struct _ast4700; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4701; // CXXMethodDecl GetRealNamedPropertyAttributesInPrototypeChain
struct _ast4702; // ParmVarDecl context
struct _ast4703; // ParmVarDecl key
struct _ast4704; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast4705; // TemplateSpecializationType Local<v8::Context>
struct _ast4706; // TemplateSpecializationType Local<v8::Name>
struct _ast4707; // TemplateSpecializationType Maybe<v8::PropertyAttribute>
struct _ast4708; // CXXMethodDecl GetRealNamedProperty
struct _ast4709; // ParmVarDecl context
struct _ast4710; // ParmVarDecl key
struct _ast4711; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4712; // TemplateSpecializationType Local<v8::Context>
struct _ast4713; // TemplateSpecializationType Local<v8::Name>
struct _ast4714; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4715; // CXXMethodDecl GetRealNamedPropertyAttributes
struct _ast4716; // ParmVarDecl context
struct _ast4717; // ParmVarDecl key
struct _ast4718; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast4719; // TemplateSpecializationType Local<v8::Context>
struct _ast4720; // TemplateSpecializationType Local<v8::Name>
struct _ast4721; // TemplateSpecializationType Maybe<v8::PropertyAttribute>
struct _ast4722; // CXXMethodDecl HasNamedLookupInterceptor
struct _ast4723; // CXXMethodDecl HasIndexedLookupInterceptor
struct _ast4724; // CXXMethodDecl GetIdentityHash
struct _ast4725; // CXXMethodDecl Clone
struct _ast4726; // FunctionProtoType Local<v8::Object> ()
struct _ast4727; // TemplateSpecializationType Local<v8::Object>
struct _ast4728; // CXXMethodDecl CreationContext
struct _ast4729; // FunctionProtoType Local<v8::Context> ()
struct _ast4730; // TemplateSpecializationType Local<v8::Context>
struct _ast4731; // CXXMethodDecl CreationContext
struct _ast4732; // ParmVarDecl object
struct _ast4733; // FunctionProtoType Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _ast4734; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4735; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4736; // TemplateSpecializationType PersistentBase<v8::Object>
struct _ast4737; // TemplateSpecializationType Local<v8::Context>
struct _ast4738; // CXXMethodDecl IsCallable
struct _ast4739; // CXXMethodDecl IsConstructor
struct _ast4740; // CXXMethodDecl CallAsFunction
struct _ast4741; // ParmVarDecl context
struct _ast4742; // ParmVarDecl recv
struct _ast4743; // ParmVarDecl argc
struct _ast4744; // ParmVarDecl argv
struct _ast4745; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast4746; // TemplateSpecializationType Local<v8::Context>
struct _ast4747; // TemplateSpecializationType Local<v8::Value>
struct _ast4748; // DecayedType Local<v8::Value> *
struct _ast4749; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4750; // CXXMethodDecl CallAsConstructor
struct _ast4751; // ParmVarDecl context
struct _ast4752; // ParmVarDecl argc
struct _ast4753; // ParmVarDecl argv
struct _ast4754; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
struct _ast4755; // TemplateSpecializationType Local<v8::Context>
struct _ast4756; // DecayedType Local<v8::Value> *
struct _ast4757; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4758; // CXXMethodDecl GetIsolate
struct _ast4759; // FunctionProtoType v8::Isolate *()
struct _ast4760; // CXXMethodDecl PreviewEntries
struct _ast4761; // ParmVarDecl is_key_value
struct _ast4762; // FunctionProtoType MaybeLocal<v8::Array> (bool *)
struct _ast4763; // TemplateSpecializationType MaybeLocal<v8::Array>
struct _ast4764; // CXXMethodDecl New
struct _ast4765; // ParmVarDecl isolate
struct _ast4766; // FunctionProtoType Local<v8::Object> (v8::Isolate *)
struct _ast4767; // TemplateSpecializationType Local<v8::Object>
struct _ast4768; // CXXMethodDecl New
struct _ast4769; // ParmVarDecl isolate
struct _ast4770; // ParmVarDecl prototype_or_null
struct _ast4771; // ParmVarDecl names
struct _ast4772; // ParmVarDecl values
struct _ast4773; // ParmVarDecl length
struct _ast4774; // FunctionProtoType Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _ast4775; // TemplateSpecializationType Local<v8::Value>
struct _ast4776; // PointerType Local<v8::Name> *
struct _ast4777; // TemplateSpecializationType Local<v8::Name>
struct _ast4778; // PointerType Local<v8::Value> *
struct _ast4779; // TemplateSpecializationType Local<v8::Value>
struct _ast4780; // TemplateSpecializationType Local<v8::Object>
struct _ast4781; // CXXMethodDecl Cast
struct _ast4782; // ParmVarDecl obj
struct _ast4783; // FunctionProtoType v8::Object *(v8::Value *)
struct _ast4784; // CXXRecordDecl Array
struct _ast4785; // CXXMethodDecl Length
struct _ast4786; // PointerType const v8::Array *
struct _ast4787; // RecordType const v8::Array
struct _ast4788; // RecordType v8::Array
struct _ast4789; // CXXMethodDecl New
struct _ast4790; // ParmVarDecl isolate
struct _ast4791; // ParmVarDecl length
struct _ast4792; // FunctionProtoType Local<v8::Array> (v8::Isolate *, int)
struct _ast4793; // TemplateSpecializationType Local<v8::Array>
struct _ast4794; // CXXMethodDecl New
struct _ast4795; // ParmVarDecl isolate
struct _ast4796; // ParmVarDecl elements
struct _ast4797; // ParmVarDecl length
struct _ast4798; // FunctionProtoType Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
struct _ast4799; // PointerType Local<v8::Value> *
struct _ast4800; // TemplateSpecializationType Local<v8::Value>
struct _ast4801; // TemplateSpecializationType Local<v8::Array>
struct _ast4802; // CXXMethodDecl Cast
struct _ast4803; // ParmVarDecl obj
struct _ast4804; // FunctionProtoType v8::Array *(v8::Value *)
struct _ast4805; // PointerType v8::Array *
struct _ast4806; // CXXRecordDecl Map
struct _ast4807; // CXXRecordDecl Map
struct _ast4808; // CXXMethodDecl Size
struct _ast4809; // PointerType const v8::Map *
struct _ast4810; // RecordType const v8::Map
struct _ast4811; // RecordType v8::Map
struct _ast4812; // CXXMethodDecl Clear
struct _ast4813; // PointerType v8::Map *
struct _ast4814; // CXXMethodDecl Get
struct _ast4815; // ParmVarDecl context
struct _ast4816; // ParmVarDecl key
struct _ast4817; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast4818; // TemplateSpecializationType Local<v8::Context>
struct _ast4819; // TemplateSpecializationType Local<v8::Value>
struct _ast4820; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast4821; // CXXMethodDecl Set
struct _ast4822; // ParmVarDecl context
struct _ast4823; // ParmVarDecl key
struct _ast4824; // ParmVarDecl value
struct _ast4825; // FunctionProtoType MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast4826; // TemplateSpecializationType Local<v8::Context>
struct _ast4827; // TemplateSpecializationType Local<v8::Value>
struct _ast4828; // TemplateSpecializationType Local<v8::Value>
struct _ast4829; // TemplateSpecializationType MaybeLocal<v8::Map>
struct _ast4830; // CXXMethodDecl Has
struct _ast4831; // ParmVarDecl context
struct _ast4832; // ParmVarDecl key
struct _ast4833; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4834; // TemplateSpecializationType Local<v8::Context>
struct _ast4835; // TemplateSpecializationType Local<v8::Value>
struct _ast4836; // TemplateSpecializationType Maybe<bool>
struct _ast4837; // CXXMethodDecl Delete
struct _ast4838; // ParmVarDecl context
struct _ast4839; // ParmVarDecl key
struct _ast4840; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4841; // TemplateSpecializationType Local<v8::Context>
struct _ast4842; // TemplateSpecializationType Local<v8::Value>
struct _ast4843; // TemplateSpecializationType Maybe<bool>
struct _ast4844; // CXXMethodDecl AsArray
struct _ast4845; // FunctionProtoType Local<v8::Array> () const
struct _ast4846; // TemplateSpecializationType Local<v8::Array>
struct _ast4847; // CXXMethodDecl New
struct _ast4848; // ParmVarDecl isolate
struct _ast4849; // FunctionProtoType Local<v8::Map> (v8::Isolate *)
struct _ast4850; // TemplateSpecializationType Local<v8::Map>
struct _ast4851; // CXXMethodDecl Cast
struct _ast4852; // ParmVarDecl obj
struct _ast4853; // FunctionProtoType v8::Map *(v8::Value *)
struct _ast4854; // CXXRecordDecl Set
struct _ast4855; // CXXRecordDecl Set
struct _ast4856; // CXXMethodDecl Size
struct _ast4857; // PointerType const v8::Set *
struct _ast4858; // RecordType const v8::Set
struct _ast4859; // RecordType v8::Set
struct _ast4860; // CXXMethodDecl Clear
struct _ast4861; // PointerType v8::Set *
struct _ast4862; // CXXMethodDecl Add
struct _ast4863; // ParmVarDecl context
struct _ast4864; // ParmVarDecl key
struct _ast4865; // FunctionProtoType MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
struct _ast4866; // TemplateSpecializationType Local<v8::Context>
struct _ast4867; // TemplateSpecializationType Local<v8::Value>
struct _ast4868; // TemplateSpecializationType MaybeLocal<v8::Set>
struct _ast4869; // CXXMethodDecl Has
struct _ast4870; // ParmVarDecl context
struct _ast4871; // ParmVarDecl key
struct _ast4872; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4873; // TemplateSpecializationType Local<v8::Context>
struct _ast4874; // TemplateSpecializationType Local<v8::Value>
struct _ast4875; // TemplateSpecializationType Maybe<bool>
struct _ast4876; // CXXMethodDecl Delete
struct _ast4877; // ParmVarDecl context
struct _ast4878; // ParmVarDecl key
struct _ast4879; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4880; // TemplateSpecializationType Local<v8::Context>
struct _ast4881; // TemplateSpecializationType Local<v8::Value>
struct _ast4882; // TemplateSpecializationType Maybe<bool>
struct _ast4883; // CXXMethodDecl AsArray
struct _ast4884; // FunctionProtoType Local<v8::Array> () const
struct _ast4885; // TemplateSpecializationType Local<v8::Array>
struct _ast4886; // CXXMethodDecl New
struct _ast4887; // ParmVarDecl isolate
struct _ast4888; // FunctionProtoType Local<v8::Set> (v8::Isolate *)
struct _ast4889; // TemplateSpecializationType Local<v8::Set>
struct _ast4890; // CXXMethodDecl Cast
struct _ast4891; // ParmVarDecl obj
struct _ast4892; // FunctionProtoType v8::Set *(v8::Value *)
struct _ast4893; // TemplateTypeParmDecl T
struct _ast4894; // CXXRecordDecl ReturnValue
struct _ast4895; // FunctionTemplateDecl ReturnValue<T>
struct _ast4896; // TemplateTypeParmDecl S
struct _ast4897; // CXXConstructorDecl ReturnValue<T>
struct _ast4898; // ParmVarDecl that
struct _ast4899; // FunctionProtoType void (const ReturnValue<S> &)
struct _ast4900; // LValueReferenceType const ReturnValue<S> &
struct _ast4901; // TemplateSpecializationType const ReturnValue<S>
struct _ast4902; // TemplateSpecializationType ReturnValue<S>
struct _ast4903; // PointerType ReturnValue<T> *
struct _ast4904; // InjectedClassNameType ReturnValue<T>
struct _ast4905; // FunctionTemplateDecl Set
struct _ast4906; // TemplateTypeParmDecl S
struct _ast4907; // CXXMethodDecl Set
struct _ast4908; // ParmVarDecl handle
struct _ast4909; // FunctionProtoType void (const Global<S> &)
struct _ast4910; // LValueReferenceType const Global<S> &
struct _ast4911; // TemplateSpecializationType const Global<S>
struct _ast4912; // TemplateSpecializationType Global<S>
struct _ast4913; // FunctionTemplateDecl Set
struct _ast4914; // TemplateTypeParmDecl S
struct _ast4915; // CXXMethodDecl Set
struct _ast4916; // ParmVarDecl handle
struct _ast4917; // FunctionProtoType void (const TracedGlobal<S> &)
struct _ast4918; // LValueReferenceType const TracedGlobal<S> &
struct _ast4919; // TemplateSpecializationType const TracedGlobal<S>
struct _ast4920; // TemplateSpecializationType TracedGlobal<S>
struct _ast4921; // FunctionTemplateDecl Set
struct _ast4922; // TemplateTypeParmDecl S
struct _ast4923; // CXXMethodDecl Set
struct _ast4924; // ParmVarDecl handle
struct _ast4925; // FunctionProtoType void (const Local<S>)
struct _ast4926; // TemplateSpecializationType const Local<S>
struct _ast4927; // TemplateSpecializationType Local<S>
struct _ast4928; // CXXMethodDecl Set
struct _ast4929; // ParmVarDecl value
struct _ast4930; // CXXMethodDecl Set
struct _ast4931; // ParmVarDecl i
struct _ast4932; // CXXMethodDecl Set
struct _ast4933; // ParmVarDecl i
struct _ast4934; // FunctionProtoType void (int32_t)
struct _ast4935; // CXXMethodDecl Set
struct _ast4936; // ParmVarDecl i
struct _ast4937; // CXXMethodDecl SetNull
struct _ast4938; // CXXMethodDecl SetUndefined
struct _ast4939; // CXXMethodDecl SetEmptyString
struct _ast4940; // CXXMethodDecl GetIsolate
struct _ast4941; // PointerType const ReturnValue<T> *
struct _ast4942; // InjectedClassNameType const ReturnValue<T>
struct _ast4943; // FunctionTemplateDecl Set
struct _ast4944; // TemplateTypeParmDecl S
struct _ast4945; // CXXMethodDecl Set
struct _ast4946; // ParmVarDecl whatever
struct _ast4947; // FunctionProtoType void (S *)
struct _ast4948; // PointerType S *
struct _ast4949; // TemplateTypeParmType S
struct _ast4950; // CXXMethodDecl Get
struct _ast4951; // FunctionProtoType Local<v8::Value> () const
struct _ast4952; // TemplateSpecializationType Local<v8::Value>
struct _ast4953; // TemplateTypeParmDecl T
struct _ast4954; // CXXRecordDecl FunctionCallbackInfo
struct _ast4955; // CXXMethodDecl Length
struct _ast4956; // PointerType const FunctionCallbackInfo<T> *
struct _ast4957; // InjectedClassNameType const FunctionCallbackInfo<T>
struct _ast4958; // InjectedClassNameType FunctionCallbackInfo<T>
struct _ast4959; // CXXMethodDecl operator[]
struct _ast4960; // ParmVarDecl i
struct _ast4961; // FunctionProtoType Local<v8::Value> (int) const
struct _ast4962; // TemplateSpecializationType Local<v8::Value>
struct _ast4963; // CXXMethodDecl This
struct _ast4964; // FunctionProtoType Local<v8::Object> () const
struct _ast4965; // TemplateSpecializationType Local<v8::Object>
struct _ast4966; // CXXMethodDecl Holder
struct _ast4967; // FunctionProtoType Local<v8::Object> () const
struct _ast4968; // TemplateSpecializationType Local<v8::Object>
struct _ast4969; // CXXMethodDecl NewTarget
struct _ast4970; // FunctionProtoType Local<v8::Value> () const
struct _ast4971; // TemplateSpecializationType Local<v8::Value>
struct _ast4972; // CXXMethodDecl IsConstructCall
struct _ast4973; // CXXMethodDecl Data
struct _ast4974; // FunctionProtoType Local<v8::Value> () const
struct _ast4975; // TemplateSpecializationType Local<v8::Value>
struct _ast4976; // CXXMethodDecl GetIsolate
struct _ast4977; // CXXMethodDecl GetReturnValue
struct _ast4978; // FunctionProtoType ReturnValue<T> () const
struct _ast4979; // TemplateSpecializationType ReturnValue<T>
struct _ast4980; // VarDecl kArgsLength
struct _ast4981; // VarDecl kHolderIndex
struct _ast4982; // VarDecl kIsolateIndex
struct _ast4983; // VarDecl kReturnValueDefaultValueIndex
struct _ast4984; // VarDecl kReturnValueIndex
struct _ast4985; // VarDecl kDataIndex
struct _ast4986; // VarDecl kNewTargetIndex
struct _ast4987; // CXXConstructorDecl FunctionCallbackInfo<T>
struct _ast4988; // ParmVarDecl implicit_args
struct _ast4989; // ParmVarDecl values
struct _ast4990; // ParmVarDecl length
struct _ast4991; // FunctionProtoType void (internal::Address *, internal::Address *, int)
struct _ast4992; // PointerType FunctionCallbackInfo<T> *
struct _ast4993; // FieldDecl implicit_args_
struct _ast4994; // FieldDecl values_
struct _ast4995; // FieldDecl length_
struct _ast4996; // TemplateTypeParmDecl T
struct _ast4997; // CXXRecordDecl PropertyCallbackInfo
struct _ast4998; // CXXMethodDecl GetIsolate
struct _ast4999; // PointerType const PropertyCallbackInfo<T> *
struct _ast5000; // InjectedClassNameType const PropertyCallbackInfo<T>
struct _ast5001; // InjectedClassNameType PropertyCallbackInfo<T>
struct _ast5002; // CXXMethodDecl Data
struct _ast5003; // FunctionProtoType Local<v8::Value> () const
struct _ast5004; // TemplateSpecializationType Local<v8::Value>
struct _ast5005; // CXXMethodDecl This
struct _ast5006; // FunctionProtoType Local<v8::Object> () const
struct _ast5007; // TemplateSpecializationType Local<v8::Object>
struct _ast5008; // CXXMethodDecl Holder
struct _ast5009; // FunctionProtoType Local<v8::Object> () const
struct _ast5010; // TemplateSpecializationType Local<v8::Object>
struct _ast5011; // CXXMethodDecl GetReturnValue
struct _ast5012; // FunctionProtoType ReturnValue<T> () const
struct _ast5013; // TemplateSpecializationType ReturnValue<T>
struct _ast5014; // CXXMethodDecl ShouldThrowOnError
struct _ast5015; // VarDecl kArgsLength
struct _ast5016; // VarDecl kShouldThrowOnErrorIndex
struct _ast5017; // VarDecl kHolderIndex
struct _ast5018; // VarDecl kIsolateIndex
struct _ast5019; // VarDecl kReturnValueDefaultValueIndex
struct _ast5020; // VarDecl kReturnValueIndex
struct _ast5021; // VarDecl kDataIndex
struct _ast5022; // VarDecl kThisIndex
struct _ast5023; // CXXConstructorDecl PropertyCallbackInfo<T>
struct _ast5024; // ParmVarDecl args
struct _ast5025; // FunctionProtoType void (internal::Address *)
struct _ast5026; // PointerType PropertyCallbackInfo<T> *
struct _ast5027; // FieldDecl args_
struct _ast5028; // TypedefDecl FunctionCallback
struct _ast5029; // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast5030; // ParenType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast5031; // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast5032; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast5033; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast5034; // TemplateSpecializationType FunctionCallbackInfo<v8::Value>
struct _ast5035; // EnumDecl ConstructorBehavior
struct _ast5036; // EnumConstantDecl kThrow
struct _ast5037; // EnumConstantDecl kAllow
struct _ast5038; // CXXRecordDecl Function
struct _ast5039; // CXXMethodDecl New
struct _ast5040; // ParmVarDecl context
struct _ast5041; // ParmVarDecl callback
struct _ast5042; // ParmVarDecl data
struct _ast5043; // ParmVarDecl length
struct _ast5044; // ParmVarDecl behavior
struct _ast5045; // ParmVarDecl side_effect_type
struct _ast5046; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast5047; // TemplateSpecializationType Local<v8::Context>
struct _ast5048; // TypedefType v8::FunctionCallback
struct _ast5049; // TemplateSpecializationType Local<v8::Value>
struct _ast5050; // EnumType v8::ConstructorBehavior
struct _ast5051; // TemplateSpecializationType MaybeLocal<v8::Function>
struct _ast5052; // CXXMethodDecl NewInstance
struct _ast5053; // ParmVarDecl context
struct _ast5054; // ParmVarDecl argc
struct _ast5055; // ParmVarDecl argv
struct _ast5056; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
struct _ast5057; // TemplateSpecializationType Local<v8::Context>
struct _ast5058; // DecayedType Local<v8::Value> *
struct _ast5059; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast5060; // PointerType const v8::Function *
struct _ast5061; // RecordType const v8::Function
struct _ast5062; // RecordType v8::Function
struct _ast5063; // CXXMethodDecl NewInstance
struct _ast5064; // ParmVarDecl context
struct _ast5065; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast5066; // TemplateSpecializationType Local<v8::Context>
struct _ast5067; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast5068; // CXXMethodDecl NewInstanceWithSideEffectType
struct _ast5069; // ParmVarDecl context
struct _ast5070; // ParmVarDecl argc
struct _ast5071; // ParmVarDecl argv
struct _ast5072; // ParmVarDecl side_effect_type
struct _ast5073; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
struct _ast5074; // TemplateSpecializationType Local<v8::Context>
struct _ast5075; // DecayedType Local<v8::Value> *
struct _ast5076; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast5077; // CXXMethodDecl Call
struct _ast5078; // ParmVarDecl context
struct _ast5079; // ParmVarDecl recv
struct _ast5080; // ParmVarDecl argc
struct _ast5081; // ParmVarDecl argv
struct _ast5082; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5083; // TemplateSpecializationType Local<v8::Context>
struct _ast5084; // TemplateSpecializationType Local<v8::Value>
struct _ast5085; // DecayedType Local<v8::Value> *
struct _ast5086; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5087; // PointerType v8::Function *
struct _ast5088; // CXXMethodDecl SetName
struct _ast5089; // ParmVarDecl name
struct _ast5090; // FunctionProtoType void (Local<v8::String>)
struct _ast5091; // TemplateSpecializationType Local<v8::String>
struct _ast5092; // CXXMethodDecl GetName
struct _ast5093; // FunctionProtoType Local<v8::Value> () const
struct _ast5094; // TemplateSpecializationType Local<v8::Value>
struct _ast5095; // CXXMethodDecl GetInferredName
struct _ast5096; // FunctionProtoType Local<v8::Value> () const
struct _ast5097; // TemplateSpecializationType Local<v8::Value>
struct _ast5098; // CXXMethodDecl GetDebugName
struct _ast5099; // FunctionProtoType Local<v8::Value> () const
struct _ast5100; // TemplateSpecializationType Local<v8::Value>
struct _ast5101; // CXXMethodDecl GetDisplayName
struct _ast5102; // FunctionProtoType Local<v8::Value> () const
struct _ast5103; // TemplateSpecializationType Local<v8::Value>
struct _ast5104; // CXXMethodDecl GetScriptLineNumber
struct _ast5105; // CXXMethodDecl GetScriptColumnNumber
struct _ast5106; // CXXMethodDecl ScriptId
struct _ast5107; // CXXMethodDecl GetBoundFunction
struct _ast5108; // FunctionProtoType Local<v8::Value> () const
struct _ast5109; // TemplateSpecializationType Local<v8::Value>
struct _ast5110; // CXXMethodDecl GetScriptOrigin
struct _ast5111; // CXXMethodDecl Cast
struct _ast5112; // ParmVarDecl obj
struct _ast5113; // FunctionProtoType v8::Function *(v8::Value *)
struct _ast5114; // VarDecl kLineOffsetNotFound
struct _ast5115; // CXXRecordDecl Promise
struct _ast5116; // EnumDecl PromiseState
struct _ast5117; // EnumConstantDecl kPending
struct _ast5118; // EnumConstantDecl kFulfilled
struct _ast5119; // EnumConstantDecl kRejected
struct _ast5120; // CXXRecordDecl Resolver
struct _ast5121; // CXXRecordDecl Resolver
struct _ast5122; // CXXMethodDecl New
struct _ast5123; // ParmVarDecl context
struct _ast5124; // FunctionProtoType MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _ast5125; // TemplateSpecializationType Local<v8::Context>
struct _ast5126; // TemplateSpecializationType MaybeLocal<v8::Promise::Resolver>
struct _ast5127; // CXXMethodDecl GetPromise
struct _ast5128; // FunctionProtoType Local<v8::Promise> ()
struct _ast5129; // TemplateSpecializationType Local<v8::Promise>
struct _ast5130; // PointerType v8::Promise::Resolver *
struct _ast5131; // RecordType v8::Promise::Resolver
struct _ast5132; // CXXMethodDecl Resolve
struct _ast5133; // ParmVarDecl context
struct _ast5134; // ParmVarDecl value
struct _ast5135; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5136; // TemplateSpecializationType Local<v8::Context>
struct _ast5137; // TemplateSpecializationType Local<v8::Value>
struct _ast5138; // TemplateSpecializationType Maybe<bool>
struct _ast5139; // CXXMethodDecl Reject
struct _ast5140; // ParmVarDecl context
struct _ast5141; // ParmVarDecl value
struct _ast5142; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5143; // TemplateSpecializationType Local<v8::Context>
struct _ast5144; // TemplateSpecializationType Local<v8::Value>
struct _ast5145; // TemplateSpecializationType Maybe<bool>
struct _ast5146; // CXXMethodDecl Cast
struct _ast5147; // ParmVarDecl obj
struct _ast5148; // FunctionProtoType v8::Promise::Resolver *(v8::Value *)
struct _ast5149; // CXXMethodDecl Catch
struct _ast5150; // ParmVarDecl context
struct _ast5151; // ParmVarDecl handler
struct _ast5152; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5153; // TemplateSpecializationType Local<v8::Context>
struct _ast5154; // TemplateSpecializationType Local<v8::Function>
struct _ast5155; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast5156; // PointerType v8::Promise *
struct _ast5157; // RecordType v8::Promise
struct _ast5158; // CXXMethodDecl Then
struct _ast5159; // ParmVarDecl context
struct _ast5160; // ParmVarDecl handler
struct _ast5161; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5162; // TemplateSpecializationType Local<v8::Context>
struct _ast5163; // TemplateSpecializationType Local<v8::Function>
struct _ast5164; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast5165; // CXXMethodDecl Then
struct _ast5166; // ParmVarDecl context
struct _ast5167; // ParmVarDecl on_fulfilled
struct _ast5168; // ParmVarDecl on_rejected
struct _ast5169; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
struct _ast5170; // TemplateSpecializationType Local<v8::Context>
struct _ast5171; // TemplateSpecializationType Local<v8::Function>
struct _ast5172; // TemplateSpecializationType Local<v8::Function>
struct _ast5173; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast5174; // CXXMethodDecl HasHandler
struct _ast5175; // CXXMethodDecl Result
struct _ast5176; // FunctionProtoType Local<v8::Value> ()
struct _ast5177; // TemplateSpecializationType Local<v8::Value>
struct _ast5178; // CXXMethodDecl State
struct _ast5179; // FunctionProtoType v8::Promise::PromiseState ()
struct _ast5180; // EnumType v8::Promise::PromiseState
struct _ast5181; // CXXMethodDecl MarkAsHandled
struct _ast5182; // CXXMethodDecl Cast
struct _ast5183; // ParmVarDecl obj
struct _ast5184; // FunctionProtoType v8::Promise *(v8::Value *)
struct _ast5185; // VarDecl kEmbedderFieldCount
struct _ast5186; // CXXRecordDecl PropertyDescriptor
struct _ast5187; // CXXConstructorDecl PropertyDescriptor
struct _ast5188; // PointerType v8::PropertyDescriptor *
struct _ast5189; // CXXConstructorDecl PropertyDescriptor
struct _ast5190; // ParmVarDecl value
struct _ast5191; // FunctionProtoType void (Local<v8::Value>)
struct _ast5192; // TemplateSpecializationType Local<v8::Value>
struct _ast5193; // CXXConstructorDecl PropertyDescriptor
struct _ast5194; // ParmVarDecl value
struct _ast5195; // ParmVarDecl writable
struct _ast5196; // FunctionProtoType void (Local<v8::Value>, bool)
struct _ast5197; // TemplateSpecializationType Local<v8::Value>
struct _ast5198; // CXXConstructorDecl PropertyDescriptor
struct _ast5199; // ParmVarDecl get
struct _ast5200; // ParmVarDecl set
struct _ast5201; // FunctionProtoType void (Local<v8::Value>, Local<v8::Value>)
struct _ast5202; // TemplateSpecializationType Local<v8::Value>
struct _ast5203; // TemplateSpecializationType Local<v8::Value>
struct _ast5204; // CXXDestructorDecl ~PropertyDescriptor
struct _ast5205; // FunctionProtoType void ()
struct _ast5206; // CXXMethodDecl value
struct _ast5207; // FunctionProtoType Local<v8::Value> () const
struct _ast5208; // TemplateSpecializationType Local<v8::Value>
struct _ast5209; // PointerType const v8::PropertyDescriptor *
struct _ast5210; // RecordType const v8::PropertyDescriptor
struct _ast5211; // CXXMethodDecl has_value
struct _ast5212; // CXXMethodDecl get
struct _ast5213; // FunctionProtoType Local<v8::Value> () const
struct _ast5214; // TemplateSpecializationType Local<v8::Value>
struct _ast5215; // CXXMethodDecl has_get
struct _ast5216; // CXXMethodDecl set
struct _ast5217; // FunctionProtoType Local<v8::Value> () const
struct _ast5218; // TemplateSpecializationType Local<v8::Value>
struct _ast5219; // CXXMethodDecl has_set
struct _ast5220; // CXXMethodDecl set_enumerable
struct _ast5221; // ParmVarDecl enumerable
struct _ast5222; // CXXMethodDecl enumerable
struct _ast5223; // CXXMethodDecl has_enumerable
struct _ast5224; // CXXMethodDecl set_configurable
struct _ast5225; // ParmVarDecl configurable
struct _ast5226; // CXXMethodDecl configurable
struct _ast5227; // CXXMethodDecl has_configurable
struct _ast5228; // CXXMethodDecl writable
struct _ast5229; // CXXMethodDecl has_writable
struct _ast5230; // CXXRecordDecl PrivateData
struct _ast5231; // CXXMethodDecl get_private
struct _ast5232; // FunctionProtoType v8::PropertyDescriptor::PrivateData *() const
struct _ast5233; // PointerType v8::PropertyDescriptor::PrivateData *
struct _ast5234; // RecordType v8::PropertyDescriptor::PrivateData
struct _ast5235; // CXXConstructorDecl PropertyDescriptor
struct _ast5236; // ParmVarDecl 
struct _ast5237; // FunctionProtoType void (const v8::PropertyDescriptor &)
struct _ast5238; // LValueReferenceType const v8::PropertyDescriptor &
struct _ast5239; // CXXMethodDecl operator=
struct _ast5240; // ParmVarDecl 
struct _ast5241; // CXXRecordDecl Proxy
struct _ast5242; // CXXMethodDecl GetTarget
struct _ast5243; // FunctionProtoType Local<v8::Value> ()
struct _ast5244; // TemplateSpecializationType Local<v8::Value>
struct _ast5245; // PointerType v8::Proxy *
struct _ast5246; // RecordType v8::Proxy
struct _ast5247; // CXXMethodDecl GetHandler
struct _ast5248; // FunctionProtoType Local<v8::Value> ()
struct _ast5249; // TemplateSpecializationType Local<v8::Value>
struct _ast5250; // CXXMethodDecl IsRevoked
struct _ast5251; // CXXMethodDecl Revoke
struct _ast5252; // CXXMethodDecl New
struct _ast5253; // ParmVarDecl context
struct _ast5254; // ParmVarDecl local_target
struct _ast5255; // ParmVarDecl local_handler
struct _ast5256; // FunctionProtoType MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
struct _ast5257; // TemplateSpecializationType Local<v8::Context>
struct _ast5258; // TemplateSpecializationType Local<v8::Object>
struct _ast5259; // TemplateSpecializationType Local<v8::Object>
struct _ast5260; // TemplateSpecializationType MaybeLocal<v8::Proxy>
struct _ast5261; // CXXMethodDecl Cast
struct _ast5262; // ParmVarDecl obj
struct _ast5263; // FunctionProtoType v8::Proxy *(v8::Value *)
struct _ast5264; // ClassTemplateDecl MemorySpan
struct _ast5265; // TemplateTypeParmDecl T
struct _ast5266; // CXXRecordDecl MemorySpan
struct _ast5267; // CXXRecordDecl MemorySpan
struct _ast5268; // CXXConstructorDecl MemorySpan<T>
struct _ast5269; // PointerType MemorySpan<T> *
struct _ast5270; // InjectedClassNameType MemorySpan<T>
struct _ast5271; // CXXConstructorDecl MemorySpan<T>
struct _ast5272; // ParmVarDecl data
struct _ast5273; // ParmVarDecl size
struct _ast5274; // FunctionProtoType void (T *, size_t)
struct _ast5275; // PointerType T *
struct _ast5276; // TemplateTypeParmType T
struct _ast5277; // CXXMethodDecl data
struct _ast5278; // FunctionProtoType T *() const
struct _ast5279; // PointerType const MemorySpan<T> *
struct _ast5280; // InjectedClassNameType const MemorySpan<T>
struct _ast5281; // CXXMethodDecl size
struct _ast5282; // ClassTemplateSpecializationDecl MemorySpan
struct _ast5283; // CXXConstructorDecl MemorySpan
struct _ast5284; // FunctionProtoType void ()
struct _ast5285; // PointerType v8::MemorySpan<const unsigned char> *
struct _ast5286; // RecordType v8::MemorySpan<const unsigned char>
struct _ast5287; // CXXConstructorDecl MemorySpan
struct _ast5288; // ParmVarDecl data
struct _ast5289; // ParmVarDecl size
struct _ast5290; // FunctionProtoType void (const unsigned char *, size_t)
struct _ast5291; // PointerType const unsigned char *
struct _ast5292; // SubstTemplateTypeParmType const unsigned char
struct _ast5293; // CXXMethodDecl data
struct _ast5294; // FunctionProtoType const unsigned char *() const
struct _ast5295; // PointerType const v8::MemorySpan<const unsigned char> *
struct _ast5296; // RecordType const v8::MemorySpan<const unsigned char>
struct _ast5297; // CXXMethodDecl size
struct _ast5298; // CXXConstructorDecl MemorySpan
struct _ast5299; // ParmVarDecl 
struct _ast5300; // FunctionProtoType void (const v8::MemorySpan<const unsigned char> &)
struct _ast5301; // LValueReferenceType const v8::MemorySpan<const unsigned char> &
struct _ast5302; // CXXConstructorDecl MemorySpan
struct _ast5303; // ParmVarDecl 
struct _ast5304; // FunctionProtoType void (v8::MemorySpan<const unsigned char> &&)
struct _ast5305; // RValueReferenceType v8::MemorySpan<const unsigned char> &&
struct _ast5306; // CXXRecordDecl OwnedBuffer
struct _ast5307; // CXXRecordDecl OwnedBuffer
struct _ast5308; // FieldDecl buffer
struct _ast5309; // FieldDecl size
struct _ast5310; // CXXConstructorDecl OwnedBuffer
struct _ast5311; // ParmVarDecl buffer
struct _ast5312; // ParmVarDecl size
struct _ast5313; // FunctionProtoType void (std::unique_ptr<const uint8_t []>, size_t)
struct _ast5314; // ElaboratedType std::unique_ptr<const uint8_t []>
struct _ast5315; // PointerType v8::OwnedBuffer *
struct _ast5316; // RecordType v8::OwnedBuffer
struct _ast5317; // CXXConstructorDecl OwnedBuffer
struct _ast5318; // FunctionProtoType void ()
struct _ast5319; // CXXConstructorDecl OwnedBuffer
struct _ast5320; // ParmVarDecl 
struct _ast5321; // FunctionProtoType void (const v8::OwnedBuffer &)
struct _ast5322; // LValueReferenceType const v8::OwnedBuffer &
struct _ast5323; // RecordType const v8::OwnedBuffer
struct _ast5324; // CXXConstructorDecl OwnedBuffer
struct _ast5325; // ParmVarDecl 
struct _ast5326; // FunctionProtoType void (v8::OwnedBuffer &&) noexcept
struct _ast5327; // RValueReferenceType v8::OwnedBuffer &&
struct _ast5328; // CXXMethodDecl operator=
struct _ast5329; // ParmVarDecl 
struct _ast5330; // FunctionProtoType v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ast5331; // LValueReferenceType v8::OwnedBuffer &
struct _ast5332; // CXXDestructorDecl ~OwnedBuffer
struct _ast5333; // CXXMethodDecl operator=
struct _ast5334; // ParmVarDecl 
struct _ast5335; // FunctionProtoType v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ast5336; // CXXRecordDecl CompiledWasmModule
struct _ast5337; // CXXRecordDecl CompiledWasmModule
struct _ast5338; // CXXMethodDecl Serialize
struct _ast5339; // FunctionProtoType v8::OwnedBuffer ()
struct _ast5340; // PointerType v8::CompiledWasmModule *
struct _ast5341; // RecordType v8::CompiledWasmModule
struct _ast5342; // CXXMethodDecl GetWireBytesRef
struct _ast5343; // FunctionProtoType MemorySpan<const uint8_t> ()
struct _ast5344; // TemplateSpecializationType MemorySpan<const uint8_t>
struct _ast5345; // CXXConstructorDecl CompiledWasmModule
struct _ast5346; // ParmVarDecl 
struct _ast5347; // FunctionProtoType void (const v8::CompiledWasmModule &)
struct _ast5348; // LValueReferenceType const v8::CompiledWasmModule &
struct _ast5349; // RecordType const v8::CompiledWasmModule
struct _ast5350; // CXXConstructorDecl CompiledWasmModule
struct _ast5351; // ParmVarDecl 
struct _ast5352; // FunctionProtoType void (v8::CompiledWasmModule &&)
struct _ast5353; // RValueReferenceType v8::CompiledWasmModule &&
struct _ast5354; // CXXMethodDecl operator=
struct _ast5355; // ParmVarDecl 
struct _ast5356; // FunctionProtoType v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _ast5357; // LValueReferenceType v8::CompiledWasmModule &
struct _ast5358; // CXXDestructorDecl ~CompiledWasmModule
struct _ast5359; // FunctionProtoType void ()
struct _ast5360; // CXXRecordDecl WasmModuleObject
struct _ast5361; // CXXRecordDecl TransferrableModule
struct _ast5362; // CXXRecordDecl TransferrableModule
struct _ast5363; // CXXConstructorDecl TransferrableModule
struct _ast5364; // ParmVarDecl src
struct _ast5365; // FunctionProtoType void (v8::WasmModuleObject::TransferrableModule &&)
struct _ast5366; // RValueReferenceType v8::WasmModuleObject::TransferrableModule &&
struct _ast5367; // RecordType v8::WasmModuleObject::TransferrableModule
struct _ast5368; // PointerType v8::WasmModuleObject::TransferrableModule *
struct _ast5369; // CXXConstructorDecl TransferrableModule
struct _ast5370; // ParmVarDecl src
struct _ast5371; // FunctionProtoType void (const v8::WasmModuleObject::TransferrableModule &)
struct _ast5372; // LValueReferenceType const v8::WasmModuleObject::TransferrableModule &
struct _ast5373; // RecordType const v8::WasmModuleObject::TransferrableModule
struct _ast5374; // CXXMethodDecl operator=
struct _ast5375; // ParmVarDecl src
struct _ast5376; // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
struct _ast5377; // LValueReferenceType v8::WasmModuleObject::TransferrableModule &
struct _ast5378; // CXXMethodDecl operator=
struct _ast5379; // ParmVarDecl src
struct _ast5380; // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
struct _ast5381; // CXXDestructorDecl ~TransferrableModule
struct _ast5382; // FunctionProtoType void ()
struct _ast5383; // CXXMethodDecl GetTransferrableModule
struct _ast5384; // FunctionProtoType v8::WasmModuleObject::TransferrableModule ()
struct _ast5385; // PointerType v8::WasmModuleObject *
struct _ast5386; // RecordType v8::WasmModuleObject
struct _ast5387; // CXXMethodDecl FromTransferrableModule
struct _ast5388; // ParmVarDecl isolate
struct _ast5389; // ParmVarDecl 
struct _ast5390; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
struct _ast5391; // TemplateSpecializationType MaybeLocal<v8::WasmModuleObject>
struct _ast5392; // CXXMethodDecl GetCompiledModule
struct _ast5393; // FunctionProtoType v8::CompiledWasmModule ()
struct _ast5394; // CXXMethodDecl DeserializeOrCompile
struct _ast5395; // ParmVarDecl isolate
struct _ast5396; // ParmVarDecl serialized_module
struct _ast5397; // ParmVarDecl wire_bytes
struct _ast5398; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _ast5399; // TemplateSpecializationType MemorySpan<const uint8_t>
struct _ast5400; // TemplateSpecializationType MemorySpan<const uint8_t>
struct _ast5401; // TemplateSpecializationType MaybeLocal<v8::WasmModuleObject>
struct _ast5402; // CXXMethodDecl Cast
struct _ast5403; // ParmVarDecl obj
struct _ast5404; // FunctionProtoType v8::WasmModuleObject *(v8::Value *)
struct _ast5405; // CXXRecordDecl WasmStreaming
struct _ast5406; // CXXRecordDecl WasmStreaming
struct _ast5407; // CXXRecordDecl WasmStreamingImpl
struct _ast5408; // CXXRecordDecl Client
struct _ast5409; // CXXRecordDecl Client
struct _ast5410; // CXXDestructorDecl ~Client
struct _ast5411; // FunctionProtoType void ()
struct _ast5412; // PointerType v8::WasmStreaming::Client *
struct _ast5413; // RecordType v8::WasmStreaming::Client
struct _ast5414; // CXXMethodDecl OnModuleCompiled
struct _ast5415; // ParmVarDecl compiled_module
struct _ast5416; // FunctionProtoType void (v8::CompiledWasmModule)
struct _ast5417; // CXXMethodDecl operator=
struct _ast5418; // ParmVarDecl 
struct _ast5419; // FunctionProtoType v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
struct _ast5420; // LValueReferenceType const v8::WasmStreaming::Client &
struct _ast5421; // RecordType const v8::WasmStreaming::Client
struct _ast5422; // LValueReferenceType v8::WasmStreaming::Client &
struct _ast5423; // CXXConstructorDecl WasmStreaming
struct _ast5424; // ParmVarDecl impl
struct _ast5425; // FunctionProtoType void (std::unique_ptr<WasmStreamingImpl>)
struct _ast5426; // ElaboratedType std::unique_ptr<WasmStreamingImpl>
struct _ast5427; // PointerType v8::WasmStreaming *
struct _ast5428; // RecordType v8::WasmStreaming
struct _ast5429; // CXXDestructorDecl ~WasmStreaming
struct _ast5430; // FunctionProtoType void ()
struct _ast5431; // CXXMethodDecl OnBytesReceived
struct _ast5432; // ParmVarDecl bytes
struct _ast5433; // ParmVarDecl size
struct _ast5434; // FunctionProtoType void (const uint8_t *, size_t)
struct _ast5435; // CXXMethodDecl Finish
struct _ast5436; // CXXMethodDecl Abort
struct _ast5437; // ParmVarDecl exception
struct _ast5438; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5439; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5440; // CXXMethodDecl SetCompiledModuleBytes
struct _ast5441; // ParmVarDecl bytes
struct _ast5442; // ParmVarDecl size
struct _ast5443; // FunctionProtoType bool (const uint8_t *, size_t)
struct _ast5444; // CXXMethodDecl SetClient
struct _ast5445; // ParmVarDecl client
struct _ast5446; // FunctionProtoType void (std::shared_ptr<Client>)
struct _ast5447; // ElaboratedType std::shared_ptr<Client>
struct _ast5448; // CXXMethodDecl Unpack
struct _ast5449; // ParmVarDecl isolate
struct _ast5450; // ParmVarDecl value
struct _ast5451; // FunctionProtoType std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
struct _ast5452; // TemplateSpecializationType Local<v8::Value>
struct _ast5453; // ElaboratedType std::shared_ptr<WasmStreaming>
struct _ast5454; // CXXConstructorDecl WasmStreaming
struct _ast5455; // ParmVarDecl 
struct _ast5456; // FunctionProtoType void (const v8::WasmStreaming &)
struct _ast5457; // LValueReferenceType const v8::WasmStreaming &
struct _ast5458; // RecordType const v8::WasmStreaming
struct _ast5459; // CXXRecordDecl WasmModuleObjectBuilderStreaming
struct _ast5460; // CXXRecordDecl WasmModuleObjectBuilderStreaming
struct _ast5461; // CXXConstructorDecl WasmModuleObjectBuilderStreaming
struct _ast5462; // ParmVarDecl isolate
struct _ast5463; // PointerType v8::WasmModuleObjectBuilderStreaming *
struct _ast5464; // RecordType v8::WasmModuleObjectBuilderStreaming
struct _ast5465; // CXXMethodDecl OnBytesReceived
struct _ast5466; // ParmVarDecl 
struct _ast5467; // ParmVarDecl size
struct _ast5468; // CXXMethodDecl Finish
struct _ast5469; // CXXMethodDecl Abort
struct _ast5470; // ParmVarDecl exception
struct _ast5471; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5472; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5473; // CXXMethodDecl GetPromise
struct _ast5474; // FunctionProtoType Local<v8::Promise> ()
struct _ast5475; // TemplateSpecializationType Local<v8::Promise>
struct _ast5476; // CXXDestructorDecl ~WasmModuleObjectBuilderStreaming
struct _ast5477; // FunctionProtoType void ()
struct _ast5478; // EnumDecl ArrayBufferCreationMode
struct _ast5479; // EnumConstantDecl kInternalized
struct _ast5480; // EnumConstantDecl kExternalized
struct _ast5481; // CXXRecordDecl ArrayBuffer
struct _ast5482; // CXXRecordDecl Allocator
struct _ast5483; // CXXRecordDecl Allocator
struct _ast5484; // CXXDestructorDecl ~Allocator
struct _ast5485; // FunctionProtoType void ()
struct _ast5486; // PointerType v8::ArrayBuffer::Allocator *
struct _ast5487; // RecordType v8::ArrayBuffer::Allocator
struct _ast5488; // CXXMethodDecl Allocate
struct _ast5489; // ParmVarDecl length
struct _ast5490; // FunctionProtoType void *(size_t)
struct _ast5491; // CXXMethodDecl AllocateUninitialized
struct _ast5492; // ParmVarDecl length
struct _ast5493; // CXXMethodDecl Free
struct _ast5494; // ParmVarDecl data
struct _ast5495; // ParmVarDecl length
struct _ast5496; // FunctionProtoType void (void *, size_t)
struct _ast5497; // EnumDecl AllocationMode
struct _ast5498; // EnumConstantDecl kNormal
struct _ast5499; // EnumConstantDecl kReservation
struct _ast5500; // CXXMethodDecl NewDefaultAllocator
struct _ast5501; // FunctionProtoType v8::ArrayBuffer::Allocator *()
struct _ast5502; // CXXMethodDecl operator=
struct _ast5503; // ParmVarDecl 
struct _ast5504; // FunctionProtoType v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
struct _ast5505; // LValueReferenceType const v8::ArrayBuffer::Allocator &
struct _ast5506; // RecordType const v8::ArrayBuffer::Allocator
struct _ast5507; // LValueReferenceType v8::ArrayBuffer::Allocator &
struct _ast5508; // CXXRecordDecl Contents
struct _ast5509; // CXXRecordDecl Contents
struct _ast5510; // TypeAliasDecl DeleterCallback
struct _ast5511; // PointerType void (*)(void *, size_t, void *)
struct _ast5512; // ParenType void (void *, size_t, void *)
struct _ast5513; // FunctionProtoType void (void *, size_t, void *)
struct _ast5514; // CXXConstructorDecl Contents
struct _ast5515; // PointerType v8::ArrayBuffer::Contents *
struct _ast5516; // RecordType v8::ArrayBuffer::Contents
struct _ast5517; // CXXMethodDecl AllocationBase
struct _ast5518; // FunctionProtoType void *() const
struct _ast5519; // PointerType const v8::ArrayBuffer::Contents *
struct _ast5520; // RecordType const v8::ArrayBuffer::Contents
struct _ast5521; // CXXMethodDecl AllocationLength
struct _ast5522; // CXXMethodDecl AllocationMode
struct _ast5523; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5524; // ElaboratedType Allocator::AllocationMode
struct _ast5525; // CXXMethodDecl Data
struct _ast5526; // CXXMethodDecl ByteLength
struct _ast5527; // CXXMethodDecl Deleter
struct _ast5528; // FunctionProtoType v8::ArrayBuffer::Contents::DeleterCallback () const
struct _ast5529; // TypedefType v8::ArrayBuffer::Contents::DeleterCallback
struct _ast5530; // CXXMethodDecl DeleterData
struct _ast5531; // CXXMethodDecl ByteLength
struct _ast5532; // PointerType const v8::ArrayBuffer *
struct _ast5533; // RecordType const v8::ArrayBuffer
struct _ast5534; // RecordType v8::ArrayBuffer
struct _ast5535; // CXXMethodDecl New
struct _ast5536; // ParmVarDecl isolate
struct _ast5537; // ParmVarDecl byte_length
struct _ast5538; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _ast5539; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5540; // CXXMethodDecl New
struct _ast5541; // ParmVarDecl isolate
struct _ast5542; // ParmVarDecl data
struct _ast5543; // ParmVarDecl byte_length
struct _ast5544; // ParmVarDecl mode
struct _ast5545; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5546; // EnumType v8::ArrayBufferCreationMode
struct _ast5547; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5548; // CXXMethodDecl IsExternal
struct _ast5549; // CXXMethodDecl IsDetachable
struct _ast5550; // CXXMethodDecl IsNeuterable
struct _ast5551; // CXXMethodDecl Detach
struct _ast5552; // PointerType v8::ArrayBuffer *
struct _ast5553; // CXXMethodDecl Neuter
struct _ast5554; // CXXMethodDecl Externalize
struct _ast5555; // FunctionProtoType v8::ArrayBuffer::Contents ()
struct _ast5556; // CXXMethodDecl GetContents
struct _ast5557; // CXXMethodDecl Cast
struct _ast5558; // ParmVarDecl obj
struct _ast5559; // FunctionProtoType v8::ArrayBuffer *(v8::Value *)
struct _ast5560; // VarDecl kInternalFieldCount
struct _ast5561; // VarDecl kEmbedderFieldCount
struct _ast5562; // CXXRecordDecl ArrayBufferView
struct _ast5563; // CXXRecordDecl ArrayBufferView
struct _ast5564; // CXXMethodDecl Buffer
struct _ast5565; // FunctionProtoType Local<v8::ArrayBuffer> ()
struct _ast5566; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5567; // PointerType v8::ArrayBufferView *
struct _ast5568; // RecordType v8::ArrayBufferView
struct _ast5569; // CXXMethodDecl ByteOffset
struct _ast5570; // FunctionProtoType size_t ()
struct _ast5571; // CXXMethodDecl ByteLength
struct _ast5572; // CXXMethodDecl CopyContents
struct _ast5573; // ParmVarDecl dest
struct _ast5574; // ParmVarDecl byte_length
struct _ast5575; // FunctionProtoType size_t (void *, size_t)
struct _ast5576; // CXXMethodDecl HasBuffer
struct _ast5577; // PointerType const v8::ArrayBufferView *
struct _ast5578; // RecordType const v8::ArrayBufferView
struct _ast5579; // CXXMethodDecl Cast
struct _ast5580; // ParmVarDecl obj
struct _ast5581; // FunctionProtoType v8::ArrayBufferView *(v8::Value *)
struct _ast5582; // VarDecl kInternalFieldCount
struct _ast5583; // VarDecl kEmbedderFieldCount
struct _ast5584; // CXXRecordDecl TypedArray
struct _ast5585; // CXXRecordDecl TypedArray
struct _ast5586; // VarDecl kMaxLength
struct _ast5587; // CXXMethodDecl Length
struct _ast5588; // PointerType v8::TypedArray *
struct _ast5589; // RecordType v8::TypedArray
struct _ast5590; // CXXMethodDecl Cast
struct _ast5591; // ParmVarDecl obj
struct _ast5592; // FunctionProtoType v8::TypedArray *(v8::Value *)
struct _ast5593; // CXXRecordDecl Uint8Array
struct _ast5594; // CXXRecordDecl Uint8Array
struct _ast5595; // CXXMethodDecl New
struct _ast5596; // ParmVarDecl array_buffer
struct _ast5597; // ParmVarDecl byte_offset
struct _ast5598; // ParmVarDecl length
struct _ast5599; // FunctionProtoType Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5600; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5601; // TemplateSpecializationType Local<v8::Uint8Array>
struct _ast5602; // CXXMethodDecl New
struct _ast5603; // ParmVarDecl shared_array_buffer
struct _ast5604; // ParmVarDecl byte_offset
struct _ast5605; // ParmVarDecl length
struct _ast5606; // FunctionProtoType Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5607; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5608; // TemplateSpecializationType Local<v8::Uint8Array>
struct _ast5609; // CXXMethodDecl Cast
struct _ast5610; // ParmVarDecl obj
struct _ast5611; // FunctionProtoType v8::Uint8Array *(v8::Value *)
struct _ast5612; // PointerType v8::Uint8Array *
struct _ast5613; // RecordType v8::Uint8Array
struct _ast5614; // CXXRecordDecl Uint8ClampedArray
struct _ast5615; // CXXRecordDecl Uint8ClampedArray
struct _ast5616; // CXXMethodDecl New
struct _ast5617; // ParmVarDecl array_buffer
struct _ast5618; // ParmVarDecl byte_offset
struct _ast5619; // ParmVarDecl length
struct _ast5620; // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5621; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5622; // TemplateSpecializationType Local<v8::Uint8ClampedArray>
struct _ast5623; // CXXMethodDecl New
struct _ast5624; // ParmVarDecl shared_array_buffer
struct _ast5625; // ParmVarDecl byte_offset
struct _ast5626; // ParmVarDecl length
struct _ast5627; // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5628; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5629; // TemplateSpecializationType Local<v8::Uint8ClampedArray>
struct _ast5630; // CXXMethodDecl Cast
struct _ast5631; // ParmVarDecl obj
struct _ast5632; // FunctionProtoType v8::Uint8ClampedArray *(v8::Value *)
struct _ast5633; // PointerType v8::Uint8ClampedArray *
struct _ast5634; // RecordType v8::Uint8ClampedArray
struct _ast5635; // CXXRecordDecl Int8Array
struct _ast5636; // CXXRecordDecl Int8Array
struct _ast5637; // CXXMethodDecl New
struct _ast5638; // ParmVarDecl array_buffer
struct _ast5639; // ParmVarDecl byte_offset
struct _ast5640; // ParmVarDecl length
struct _ast5641; // FunctionProtoType Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5642; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5643; // TemplateSpecializationType Local<v8::Int8Array>
struct _ast5644; // CXXMethodDecl New
struct _ast5645; // ParmVarDecl shared_array_buffer
struct _ast5646; // ParmVarDecl byte_offset
struct _ast5647; // ParmVarDecl length
struct _ast5648; // FunctionProtoType Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5649; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5650; // TemplateSpecializationType Local<v8::Int8Array>
struct _ast5651; // CXXMethodDecl Cast
struct _ast5652; // ParmVarDecl obj
struct _ast5653; // FunctionProtoType v8::Int8Array *(v8::Value *)
struct _ast5654; // PointerType v8::Int8Array *
struct _ast5655; // RecordType v8::Int8Array
struct _ast5656; // CXXRecordDecl Uint16Array
struct _ast5657; // CXXRecordDecl Uint16Array
struct _ast5658; // CXXMethodDecl New
struct _ast5659; // ParmVarDecl array_buffer
struct _ast5660; // ParmVarDecl byte_offset
struct _ast5661; // ParmVarDecl length
struct _ast5662; // FunctionProtoType Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5663; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5664; // TemplateSpecializationType Local<v8::Uint16Array>
struct _ast5665; // CXXMethodDecl New
struct _ast5666; // ParmVarDecl shared_array_buffer
struct _ast5667; // ParmVarDecl byte_offset
struct _ast5668; // ParmVarDecl length
struct _ast5669; // FunctionProtoType Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5670; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5671; // TemplateSpecializationType Local<v8::Uint16Array>
struct _ast5672; // CXXMethodDecl Cast
struct _ast5673; // ParmVarDecl obj
struct _ast5674; // FunctionProtoType v8::Uint16Array *(v8::Value *)
struct _ast5675; // PointerType v8::Uint16Array *
struct _ast5676; // RecordType v8::Uint16Array
struct _ast5677; // CXXRecordDecl Int16Array
struct _ast5678; // CXXRecordDecl Int16Array
struct _ast5679; // CXXMethodDecl New
struct _ast5680; // ParmVarDecl array_buffer
struct _ast5681; // ParmVarDecl byte_offset
struct _ast5682; // ParmVarDecl length
struct _ast5683; // FunctionProtoType Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5684; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5685; // TemplateSpecializationType Local<v8::Int16Array>
struct _ast5686; // CXXMethodDecl New
struct _ast5687; // ParmVarDecl shared_array_buffer
struct _ast5688; // ParmVarDecl byte_offset
struct _ast5689; // ParmVarDecl length
struct _ast5690; // FunctionProtoType Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5691; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5692; // TemplateSpecializationType Local<v8::Int16Array>
struct _ast5693; // CXXMethodDecl Cast
struct _ast5694; // ParmVarDecl obj
struct _ast5695; // FunctionProtoType v8::Int16Array *(v8::Value *)
struct _ast5696; // PointerType v8::Int16Array *
struct _ast5697; // RecordType v8::Int16Array
struct _ast5698; // CXXRecordDecl Uint32Array
struct _ast5699; // CXXRecordDecl Uint32Array
struct _ast5700; // CXXMethodDecl New
struct _ast5701; // ParmVarDecl array_buffer
struct _ast5702; // ParmVarDecl byte_offset
struct _ast5703; // ParmVarDecl length
struct _ast5704; // FunctionProtoType Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5705; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5706; // TemplateSpecializationType Local<v8::Uint32Array>
struct _ast5707; // CXXMethodDecl New
struct _ast5708; // ParmVarDecl shared_array_buffer
struct _ast5709; // ParmVarDecl byte_offset
struct _ast5710; // ParmVarDecl length
struct _ast5711; // FunctionProtoType Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5712; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5713; // TemplateSpecializationType Local<v8::Uint32Array>
struct _ast5714; // CXXMethodDecl Cast
struct _ast5715; // ParmVarDecl obj
struct _ast5716; // FunctionProtoType v8::Uint32Array *(v8::Value *)
struct _ast5717; // PointerType v8::Uint32Array *
struct _ast5718; // RecordType v8::Uint32Array
struct _ast5719; // CXXRecordDecl Int32Array
struct _ast5720; // CXXRecordDecl Int32Array
struct _ast5721; // CXXMethodDecl New
struct _ast5722; // ParmVarDecl array_buffer
struct _ast5723; // ParmVarDecl byte_offset
struct _ast5724; // ParmVarDecl length
struct _ast5725; // FunctionProtoType Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5726; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5727; // TemplateSpecializationType Local<v8::Int32Array>
struct _ast5728; // CXXMethodDecl New
struct _ast5729; // ParmVarDecl shared_array_buffer
struct _ast5730; // ParmVarDecl byte_offset
struct _ast5731; // ParmVarDecl length
struct _ast5732; // FunctionProtoType Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5733; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5734; // TemplateSpecializationType Local<v8::Int32Array>
struct _ast5735; // CXXMethodDecl Cast
struct _ast5736; // ParmVarDecl obj
struct _ast5737; // FunctionProtoType v8::Int32Array *(v8::Value *)
struct _ast5738; // PointerType v8::Int32Array *
struct _ast5739; // RecordType v8::Int32Array
struct _ast5740; // CXXRecordDecl Float32Array
struct _ast5741; // CXXRecordDecl Float32Array
struct _ast5742; // CXXMethodDecl New
struct _ast5743; // ParmVarDecl array_buffer
struct _ast5744; // ParmVarDecl byte_offset
struct _ast5745; // ParmVarDecl length
struct _ast5746; // FunctionProtoType Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5747; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5748; // TemplateSpecializationType Local<v8::Float32Array>
struct _ast5749; // CXXMethodDecl New
struct _ast5750; // ParmVarDecl shared_array_buffer
struct _ast5751; // ParmVarDecl byte_offset
struct _ast5752; // ParmVarDecl length
struct _ast5753; // FunctionProtoType Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5754; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5755; // TemplateSpecializationType Local<v8::Float32Array>
struct _ast5756; // CXXMethodDecl Cast
struct _ast5757; // ParmVarDecl obj
struct _ast5758; // FunctionProtoType v8::Float32Array *(v8::Value *)
struct _ast5759; // PointerType v8::Float32Array *
struct _ast5760; // RecordType v8::Float32Array
struct _ast5761; // CXXRecordDecl Float64Array
struct _ast5762; // CXXRecordDecl Float64Array
struct _ast5763; // CXXMethodDecl New
struct _ast5764; // ParmVarDecl array_buffer
struct _ast5765; // ParmVarDecl byte_offset
struct _ast5766; // ParmVarDecl length
struct _ast5767; // FunctionProtoType Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5768; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5769; // TemplateSpecializationType Local<v8::Float64Array>
struct _ast5770; // CXXMethodDecl New
struct _ast5771; // ParmVarDecl shared_array_buffer
struct _ast5772; // ParmVarDecl byte_offset
struct _ast5773; // ParmVarDecl length
struct _ast5774; // FunctionProtoType Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5775; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5776; // TemplateSpecializationType Local<v8::Float64Array>
struct _ast5777; // CXXMethodDecl Cast
struct _ast5778; // ParmVarDecl obj
struct _ast5779; // FunctionProtoType v8::Float64Array *(v8::Value *)
struct _ast5780; // PointerType v8::Float64Array *
struct _ast5781; // RecordType v8::Float64Array
struct _ast5782; // CXXRecordDecl BigInt64Array
struct _ast5783; // CXXRecordDecl BigInt64Array
struct _ast5784; // CXXMethodDecl New
struct _ast5785; // ParmVarDecl array_buffer
struct _ast5786; // ParmVarDecl byte_offset
struct _ast5787; // ParmVarDecl length
struct _ast5788; // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5789; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5790; // TemplateSpecializationType Local<v8::BigInt64Array>
struct _ast5791; // CXXMethodDecl New
struct _ast5792; // ParmVarDecl shared_array_buffer
struct _ast5793; // ParmVarDecl byte_offset
struct _ast5794; // ParmVarDecl length
struct _ast5795; // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5796; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5797; // TemplateSpecializationType Local<v8::BigInt64Array>
struct _ast5798; // CXXMethodDecl Cast
struct _ast5799; // ParmVarDecl obj
struct _ast5800; // FunctionProtoType v8::BigInt64Array *(v8::Value *)
struct _ast5801; // PointerType v8::BigInt64Array *
struct _ast5802; // RecordType v8::BigInt64Array
struct _ast5803; // CXXRecordDecl BigUint64Array
struct _ast5804; // CXXRecordDecl BigUint64Array
struct _ast5805; // CXXMethodDecl New
struct _ast5806; // ParmVarDecl array_buffer
struct _ast5807; // ParmVarDecl byte_offset
struct _ast5808; // ParmVarDecl length
struct _ast5809; // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5810; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5811; // TemplateSpecializationType Local<v8::BigUint64Array>
struct _ast5812; // CXXMethodDecl New
struct _ast5813; // ParmVarDecl shared_array_buffer
struct _ast5814; // ParmVarDecl byte_offset
struct _ast5815; // ParmVarDecl length
struct _ast5816; // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5817; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5818; // TemplateSpecializationType Local<v8::BigUint64Array>
struct _ast5819; // CXXMethodDecl Cast
struct _ast5820; // ParmVarDecl obj
struct _ast5821; // FunctionProtoType v8::BigUint64Array *(v8::Value *)
struct _ast5822; // PointerType v8::BigUint64Array *
struct _ast5823; // RecordType v8::BigUint64Array
struct _ast5824; // CXXRecordDecl DataView
struct _ast5825; // CXXRecordDecl DataView
struct _ast5826; // CXXMethodDecl New
struct _ast5827; // ParmVarDecl array_buffer
struct _ast5828; // ParmVarDecl byte_offset
struct _ast5829; // ParmVarDecl length
struct _ast5830; // FunctionProtoType Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5831; // TemplateSpecializationType Local<v8::ArrayBuffer>
struct _ast5832; // TemplateSpecializationType Local<v8::DataView>
struct _ast5833; // CXXMethodDecl New
struct _ast5834; // ParmVarDecl shared_array_buffer
struct _ast5835; // ParmVarDecl byte_offset
struct _ast5836; // ParmVarDecl length
struct _ast5837; // FunctionProtoType Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5838; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5839; // TemplateSpecializationType Local<v8::DataView>
struct _ast5840; // CXXMethodDecl Cast
struct _ast5841; // ParmVarDecl obj
struct _ast5842; // FunctionProtoType v8::DataView *(v8::Value *)
struct _ast5843; // PointerType v8::DataView *
struct _ast5844; // RecordType v8::DataView
struct _ast5845; // CXXRecordDecl SharedArrayBuffer
struct _ast5846; // CXXRecordDecl Contents
struct _ast5847; // CXXRecordDecl Contents
struct _ast5848; // TypeAliasDecl Allocator
struct _ast5849; // ElaboratedType v8::ArrayBuffer::Allocator
struct _ast5850; // TypeAliasDecl DeleterCallback
struct _ast5851; // CXXConstructorDecl Contents
struct _ast5852; // PointerType v8::SharedArrayBuffer::Contents *
struct _ast5853; // RecordType v8::SharedArrayBuffer::Contents
struct _ast5854; // CXXMethodDecl AllocationBase
struct _ast5855; // PointerType const v8::SharedArrayBuffer::Contents *
struct _ast5856; // RecordType const v8::SharedArrayBuffer::Contents
struct _ast5857; // CXXMethodDecl AllocationLength
struct _ast5858; // CXXMethodDecl AllocationMode
struct _ast5859; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5860; // ElaboratedType Allocator::AllocationMode
struct _ast5861; // CXXMethodDecl Data
struct _ast5862; // CXXMethodDecl ByteLength
struct _ast5863; // CXXMethodDecl Deleter
struct _ast5864; // FunctionProtoType v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _ast5865; // TypedefType v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ast5866; // CXXMethodDecl DeleterData
struct _ast5867; // CXXMethodDecl ByteLength
struct _ast5868; // PointerType const v8::SharedArrayBuffer *
struct _ast5869; // RecordType const v8::SharedArrayBuffer
struct _ast5870; // RecordType v8::SharedArrayBuffer
struct _ast5871; // CXXMethodDecl New
struct _ast5872; // ParmVarDecl isolate
struct _ast5873; // ParmVarDecl byte_length
struct _ast5874; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _ast5875; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5876; // CXXMethodDecl New
struct _ast5877; // ParmVarDecl isolate
struct _ast5878; // ParmVarDecl data
struct _ast5879; // ParmVarDecl byte_length
struct _ast5880; // ParmVarDecl mode
struct _ast5881; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5882; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5883; // CXXMethodDecl New
struct _ast5884; // ParmVarDecl isolate
struct _ast5885; // ParmVarDecl 
struct _ast5886; // ParmVarDecl mode
struct _ast5887; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _ast5888; // LValueReferenceType const SharedArrayBuffer::Contents &
struct _ast5889; // ElaboratedType const SharedArrayBuffer::Contents
struct _ast5890; // ElaboratedType SharedArrayBuffer::Contents
struct _ast5891; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast5892; // CXXMethodDecl IsExternal
struct _ast5893; // CXXMethodDecl Externalize
struct _ast5894; // FunctionProtoType v8::SharedArrayBuffer::Contents ()
struct _ast5895; // PointerType v8::SharedArrayBuffer *
struct _ast5896; // CXXMethodDecl GetContents
struct _ast5897; // CXXMethodDecl Cast
struct _ast5898; // ParmVarDecl obj
struct _ast5899; // FunctionProtoType v8::SharedArrayBuffer *(v8::Value *)
struct _ast5900; // VarDecl kInternalFieldCount
struct _ast5901; // CXXRecordDecl Date
struct _ast5902; // CXXMethodDecl New
struct _ast5903; // ParmVarDecl context
struct _ast5904; // ParmVarDecl time
struct _ast5905; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _ast5906; // TemplateSpecializationType Local<v8::Context>
struct _ast5907; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast5908; // CXXMethodDecl ValueOf
struct _ast5909; // PointerType const v8::Date *
struct _ast5910; // RecordType const v8::Date
struct _ast5911; // RecordType v8::Date
struct _ast5912; // CXXMethodDecl Cast
struct _ast5913; // ParmVarDecl obj
struct _ast5914; // FunctionProtoType v8::Date *(v8::Value *)
struct _ast5915; // PointerType v8::Date *
struct _ast5916; // CXXRecordDecl NumberObject
struct _ast5917; // CXXMethodDecl New
struct _ast5918; // ParmVarDecl isolate
struct _ast5919; // ParmVarDecl value
struct _ast5920; // FunctionProtoType Local<v8::Value> (v8::Isolate *, double)
struct _ast5921; // TemplateSpecializationType Local<v8::Value>
struct _ast5922; // CXXMethodDecl ValueOf
struct _ast5923; // PointerType const v8::NumberObject *
struct _ast5924; // RecordType const v8::NumberObject
struct _ast5925; // RecordType v8::NumberObject
struct _ast5926; // CXXMethodDecl Cast
struct _ast5927; // ParmVarDecl obj
struct _ast5928; // FunctionProtoType v8::NumberObject *(v8::Value *)
struct _ast5929; // PointerType v8::NumberObject *
struct _ast5930; // CXXRecordDecl BigIntObject
struct _ast5931; // CXXMethodDecl New
struct _ast5932; // ParmVarDecl isolate
struct _ast5933; // ParmVarDecl value
struct _ast5934; // FunctionProtoType Local<v8::Value> (v8::Isolate *, int64_t)
struct _ast5935; // TemplateSpecializationType Local<v8::Value>
struct _ast5936; // CXXMethodDecl ValueOf
struct _ast5937; // FunctionProtoType Local<v8::BigInt> () const
struct _ast5938; // TemplateSpecializationType Local<v8::BigInt>
struct _ast5939; // PointerType const v8::BigIntObject *
struct _ast5940; // RecordType const v8::BigIntObject
struct _ast5941; // RecordType v8::BigIntObject
struct _ast5942; // CXXMethodDecl Cast
struct _ast5943; // ParmVarDecl obj
struct _ast5944; // FunctionProtoType v8::BigIntObject *(v8::Value *)
struct _ast5945; // PointerType v8::BigIntObject *
struct _ast5946; // CXXRecordDecl BooleanObject
struct _ast5947; // CXXMethodDecl New
struct _ast5948; // ParmVarDecl isolate
struct _ast5949; // ParmVarDecl value
struct _ast5950; // FunctionProtoType Local<v8::Value> (v8::Isolate *, bool)
struct _ast5951; // TemplateSpecializationType Local<v8::Value>
struct _ast5952; // CXXMethodDecl ValueOf
struct _ast5953; // PointerType const v8::BooleanObject *
struct _ast5954; // RecordType const v8::BooleanObject
struct _ast5955; // RecordType v8::BooleanObject
struct _ast5956; // CXXMethodDecl Cast
struct _ast5957; // ParmVarDecl obj
struct _ast5958; // FunctionProtoType v8::BooleanObject *(v8::Value *)
struct _ast5959; // PointerType v8::BooleanObject *
struct _ast5960; // CXXRecordDecl StringObject
struct _ast5961; // CXXMethodDecl New
struct _ast5962; // ParmVarDecl isolate
struct _ast5963; // ParmVarDecl value
struct _ast5964; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _ast5965; // TemplateSpecializationType Local<v8::String>
struct _ast5966; // TemplateSpecializationType Local<v8::Value>
struct _ast5967; // CXXMethodDecl ValueOf
struct _ast5968; // FunctionProtoType Local<v8::String> () const
struct _ast5969; // TemplateSpecializationType Local<v8::String>
struct _ast5970; // PointerType const v8::StringObject *
struct _ast5971; // RecordType const v8::StringObject
struct _ast5972; // RecordType v8::StringObject
struct _ast5973; // CXXMethodDecl Cast
struct _ast5974; // ParmVarDecl obj
struct _ast5975; // FunctionProtoType v8::StringObject *(v8::Value *)
struct _ast5976; // PointerType v8::StringObject *
struct _ast5977; // CXXRecordDecl SymbolObject
struct _ast5978; // CXXMethodDecl New
struct _ast5979; // ParmVarDecl isolate
struct _ast5980; // ParmVarDecl value
struct _ast5981; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _ast5982; // TemplateSpecializationType Local<v8::Symbol>
struct _ast5983; // TemplateSpecializationType Local<v8::Value>
struct _ast5984; // CXXMethodDecl ValueOf
struct _ast5985; // FunctionProtoType Local<v8::Symbol> () const
struct _ast5986; // TemplateSpecializationType Local<v8::Symbol>
struct _ast5987; // PointerType const v8::SymbolObject *
struct _ast5988; // RecordType const v8::SymbolObject
struct _ast5989; // RecordType v8::SymbolObject
struct _ast5990; // CXXMethodDecl Cast
struct _ast5991; // ParmVarDecl obj
struct _ast5992; // FunctionProtoType v8::SymbolObject *(v8::Value *)
struct _ast5993; // PointerType v8::SymbolObject *
struct _ast5994; // CXXRecordDecl RegExp
struct _ast5995; // CXXRecordDecl RegExp
struct _ast5996; // EnumDecl Flags
struct _ast5997; // EnumConstantDecl kNone
struct _ast5998; // EnumConstantDecl kGlobal
struct _ast5999; // EnumConstantDecl kIgnoreCase
struct _ast6000; // EnumConstantDecl kMultiline
struct _ast6001; // EnumConstantDecl kSticky
struct _ast6002; // EnumConstantDecl kUnicode
struct _ast6003; // EnumConstantDecl kDotAll
struct _ast6004; // CXXMethodDecl New
struct _ast6005; // ParmVarDecl context
struct _ast6006; // ParmVarDecl pattern
struct _ast6007; // ParmVarDecl flags
struct _ast6008; // FunctionProtoType MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _ast6009; // TemplateSpecializationType Local<v8::Context>
struct _ast6010; // TemplateSpecializationType Local<v8::String>
struct _ast6011; // EnumType v8::RegExp::Flags
struct _ast6012; // TemplateSpecializationType MaybeLocal<v8::RegExp>
struct _ast6013; // CXXMethodDecl GetSource
struct _ast6014; // FunctionProtoType Local<v8::String> () const
struct _ast6015; // TemplateSpecializationType Local<v8::String>
struct _ast6016; // PointerType const v8::RegExp *
struct _ast6017; // RecordType const v8::RegExp
struct _ast6018; // RecordType v8::RegExp
struct _ast6019; // CXXMethodDecl GetFlags
struct _ast6020; // FunctionProtoType v8::RegExp::Flags () const
struct _ast6021; // CXXMethodDecl Cast
struct _ast6022; // ParmVarDecl obj
struct _ast6023; // FunctionProtoType v8::RegExp *(v8::Value *)
struct _ast6024; // PointerType v8::RegExp *
struct _ast6025; // CXXRecordDecl External
struct _ast6026; // CXXMethodDecl New
struct _ast6027; // ParmVarDecl isolate
struct _ast6028; // ParmVarDecl value
struct _ast6029; // FunctionProtoType Local<v8::External> (v8::Isolate *, void *)
struct _ast6030; // TemplateSpecializationType Local<v8::External>
struct _ast6031; // CXXMethodDecl Cast
struct _ast6032; // ParmVarDecl obj
struct _ast6033; // FunctionProtoType v8::External *(v8::Value *)
struct _ast6034; // PointerType v8::External *
struct _ast6035; // RecordType v8::External
struct _ast6036; // CXXMethodDecl Value
struct _ast6037; // PointerType const v8::External *
struct _ast6038; // RecordType const v8::External
struct _ast6039; // EnumDecl Intrinsic
struct _ast6040; // EnumConstantDecl kArrayProto_entries
struct _ast6041; // EnumConstantDecl kArrayProto_forEach
struct _ast6042; // EnumConstantDecl kArrayProto_keys
struct _ast6043; // EnumConstantDecl kArrayProto_values
struct _ast6044; // EnumConstantDecl kErrorPrototype
struct _ast6045; // EnumConstantDecl kIteratorPrototype
struct _ast6046; // CXXRecordDecl Template
struct _ast6047; // CXXRecordDecl Template
struct _ast6048; // CXXMethodDecl Set
struct _ast6049; // ParmVarDecl name
struct _ast6050; // ParmVarDecl value
struct _ast6051; // ParmVarDecl attributes
struct _ast6052; // FunctionProtoType void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6053; // TemplateSpecializationType Local<v8::Name>
struct _ast6054; // TemplateSpecializationType Local<v8::Data>
struct _ast6055; // PointerType v8::Template *
struct _ast6056; // RecordType v8::Template
struct _ast6057; // CXXMethodDecl SetPrivate
struct _ast6058; // ParmVarDecl name
struct _ast6059; // ParmVarDecl value
struct _ast6060; // ParmVarDecl attributes
struct _ast6061; // FunctionProtoType void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6062; // TemplateSpecializationType Local<v8::Private>
struct _ast6063; // TemplateSpecializationType Local<v8::Data>
struct _ast6064; // CXXMethodDecl Set
struct _ast6065; // ParmVarDecl isolate
struct _ast6066; // ParmVarDecl name
struct _ast6067; // ParmVarDecl value
struct _ast6068; // FunctionProtoType void (v8::Isolate *, const char *, Local<v8::Data>)
struct _ast6069; // TemplateSpecializationType Local<v8::Data>
struct _ast6070; // CXXMethodDecl SetAccessorProperty
struct _ast6071; // ParmVarDecl name
struct _ast6072; // ParmVarDecl getter
struct _ast6073; // ParmVarDecl setter
struct _ast6074; // ParmVarDecl attribute
struct _ast6075; // ParmVarDecl settings
struct _ast6076; // FunctionProtoType void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _ast6077; // TemplateSpecializationType Local<v8::Name>
struct _ast6078; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6079; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6080; // CXXMethodDecl SetNativeDataProperty
struct _ast6081; // ParmVarDecl name
struct _ast6082; // ParmVarDecl getter
struct _ast6083; // ParmVarDecl setter
struct _ast6084; // ParmVarDecl data
struct _ast6085; // ParmVarDecl attribute
struct _ast6086; // ParmVarDecl signature
struct _ast6087; // ParmVarDecl settings
struct _ast6088; // ParmVarDecl getter_side_effect_type
struct _ast6089; // ParmVarDecl setter_side_effect_type
struct _ast6090; // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6091; // TemplateSpecializationType Local<v8::String>
struct _ast6092; // TypedefType v8::AccessorGetterCallback
struct _ast6093; // TypedefType v8::AccessorSetterCallback
struct _ast6094; // TemplateSpecializationType Local<v8::Value>
struct _ast6095; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6096; // CXXMethodDecl SetNativeDataProperty
struct _ast6097; // ParmVarDecl name
struct _ast6098; // ParmVarDecl getter
struct _ast6099; // ParmVarDecl setter
struct _ast6100; // ParmVarDecl data
struct _ast6101; // ParmVarDecl attribute
struct _ast6102; // ParmVarDecl signature
struct _ast6103; // ParmVarDecl settings
struct _ast6104; // ParmVarDecl getter_side_effect_type
struct _ast6105; // ParmVarDecl setter_side_effect_type
struct _ast6106; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6107; // TemplateSpecializationType Local<v8::Name>
struct _ast6108; // TemplateSpecializationType Local<v8::Value>
struct _ast6109; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6110; // CXXMethodDecl SetLazyDataProperty
struct _ast6111; // ParmVarDecl name
struct _ast6112; // ParmVarDecl getter
struct _ast6113; // ParmVarDecl data
struct _ast6114; // ParmVarDecl attribute
struct _ast6115; // ParmVarDecl getter_side_effect_type
struct _ast6116; // ParmVarDecl setter_side_effect_type
struct _ast6117; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast6118; // TemplateSpecializationType Local<v8::Name>
struct _ast6119; // TemplateSpecializationType Local<v8::Value>
struct _ast6120; // CXXMethodDecl SetIntrinsicDataProperty
struct _ast6121; // ParmVarDecl name
struct _ast6122; // ParmVarDecl intrinsic
struct _ast6123; // ParmVarDecl attribute
struct _ast6124; // FunctionProtoType void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
struct _ast6125; // TemplateSpecializationType Local<v8::Name>
struct _ast6126; // EnumType v8::Intrinsic
struct _ast6127; // TypedefDecl GenericNamedPropertyGetterCallback
struct _ast6128; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6129; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6130; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6131; // TemplateSpecializationType Local<v8::Name>
struct _ast6132; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6133; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6134; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6135; // TypedefDecl GenericNamedPropertySetterCallback
struct _ast6136; // PointerType void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6137; // ParenType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6138; // FunctionProtoType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6139; // TemplateSpecializationType Local<v8::Name>
struct _ast6140; // TemplateSpecializationType Local<v8::Value>
struct _ast6141; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6142; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6143; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6144; // TypedefDecl GenericNamedPropertyQueryCallback
struct _ast6145; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6146; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6147; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6148; // TemplateSpecializationType Local<v8::Name>
struct _ast6149; // LValueReferenceType const PropertyCallbackInfo<v8::Integer> &
struct _ast6150; // TemplateSpecializationType const PropertyCallbackInfo<v8::Integer>
struct _ast6151; // TemplateSpecializationType PropertyCallbackInfo<v8::Integer>
struct _ast6152; // TypedefDecl GenericNamedPropertyDeleterCallback
struct _ast6153; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6154; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6155; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6156; // TemplateSpecializationType Local<v8::Name>
struct _ast6157; // LValueReferenceType const PropertyCallbackInfo<v8::Boolean> &
struct _ast6158; // TemplateSpecializationType const PropertyCallbackInfo<v8::Boolean>
struct _ast6159; // TemplateSpecializationType PropertyCallbackInfo<v8::Boolean>
struct _ast6160; // TypedefDecl GenericNamedPropertyEnumeratorCallback
struct _ast6161; // PointerType void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _ast6162; // ParenType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6163; // FunctionProtoType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6164; // LValueReferenceType const PropertyCallbackInfo<v8::Array> &
struct _ast6165; // TemplateSpecializationType const PropertyCallbackInfo<v8::Array>
struct _ast6166; // TemplateSpecializationType PropertyCallbackInfo<v8::Array>
struct _ast6167; // TypedefDecl GenericNamedPropertyDefinerCallback
struct _ast6168; // PointerType void (*)(Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6169; // ParenType void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6170; // FunctionProtoType void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6171; // TemplateSpecializationType Local<v8::Name>
struct _ast6172; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6173; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6174; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6175; // TypedefDecl GenericNamedPropertyDescriptorCallback
struct _ast6176; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6177; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6178; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6179; // TemplateSpecializationType Local<v8::Name>
struct _ast6180; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6181; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6182; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6183; // TypedefDecl IndexedPropertyGetterCallback
struct _ast6184; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6185; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6186; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6187; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6188; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6189; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6190; // TypedefDecl IndexedPropertySetterCallback
struct _ast6191; // PointerType void (*)(uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6192; // ParenType void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6193; // FunctionProtoType void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6194; // TemplateSpecializationType Local<v8::Value>
struct _ast6195; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6196; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6197; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6198; // TypedefDecl IndexedPropertyQueryCallback
struct _ast6199; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6200; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6201; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6202; // LValueReferenceType const PropertyCallbackInfo<v8::Integer> &
struct _ast6203; // TemplateSpecializationType const PropertyCallbackInfo<v8::Integer>
struct _ast6204; // TemplateSpecializationType PropertyCallbackInfo<v8::Integer>
struct _ast6205; // TypedefDecl IndexedPropertyDeleterCallback
struct _ast6206; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6207; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6208; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6209; // LValueReferenceType const PropertyCallbackInfo<v8::Boolean> &
struct _ast6210; // TemplateSpecializationType const PropertyCallbackInfo<v8::Boolean>
struct _ast6211; // TemplateSpecializationType PropertyCallbackInfo<v8::Boolean>
struct _ast6212; // TypedefDecl IndexedPropertyEnumeratorCallback
struct _ast6213; // PointerType void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _ast6214; // ParenType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6215; // FunctionProtoType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6216; // LValueReferenceType const PropertyCallbackInfo<v8::Array> &
struct _ast6217; // TemplateSpecializationType const PropertyCallbackInfo<v8::Array>
struct _ast6218; // TemplateSpecializationType PropertyCallbackInfo<v8::Array>
struct _ast6219; // TypedefDecl IndexedPropertyDefinerCallback
struct _ast6220; // PointerType void (*)(uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6221; // ParenType void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6222; // FunctionProtoType void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6223; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6224; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6225; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6226; // TypedefDecl IndexedPropertyDescriptorCallback
struct _ast6227; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6228; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6229; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6230; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6231; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6232; // TemplateSpecializationType PropertyCallbackInfo<v8::Value>
struct _ast6233; // EnumDecl AccessType
struct _ast6234; // EnumConstantDecl ACCESS_GET
struct _ast6235; // EnumConstantDecl ACCESS_SET
struct _ast6236; // EnumConstantDecl ACCESS_HAS
struct _ast6237; // EnumConstantDecl ACCESS_DELETE
struct _ast6238; // EnumConstantDecl ACCESS_KEYS
struct _ast6239; // TypedefDecl AccessCheckCallback
struct _ast6240; // PointerType bool (*)(Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ast6241; // ParenType bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ast6242; // FunctionProtoType bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ast6243; // TemplateSpecializationType Local<v8::Context>
struct _ast6244; // TemplateSpecializationType Local<v8::Object>
struct _ast6245; // TemplateSpecializationType Local<v8::Value>
struct _ast6246; // CXXRecordDecl FunctionTemplate
struct _ast6247; // CXXMethodDecl New
struct _ast6248; // ParmVarDecl isolate
struct _ast6249; // ParmVarDecl callback
struct _ast6250; // ParmVarDecl data
struct _ast6251; // ParmVarDecl signature
struct _ast6252; // ParmVarDecl length
struct _ast6253; // ParmVarDecl behavior
struct _ast6254; // ParmVarDecl side_effect_type
struct _ast6255; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast6256; // TemplateSpecializationType Local<v8::Value>
struct _ast6257; // TemplateSpecializationType Local<v8::Signature>
struct _ast6258; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6259; // CXXMethodDecl FromSnapshot
struct _ast6260; // ParmVarDecl isolate
struct _ast6261; // ParmVarDecl index
struct _ast6262; // FunctionProtoType MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _ast6263; // TemplateSpecializationType MaybeLocal<v8::FunctionTemplate>
struct _ast6264; // CXXMethodDecl NewWithCache
struct _ast6265; // ParmVarDecl isolate
struct _ast6266; // ParmVarDecl callback
struct _ast6267; // ParmVarDecl cache_property
struct _ast6268; // ParmVarDecl data
struct _ast6269; // ParmVarDecl signature
struct _ast6270; // ParmVarDecl length
struct _ast6271; // ParmVarDecl side_effect_type
struct _ast6272; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
struct _ast6273; // TemplateSpecializationType Local<v8::Private>
struct _ast6274; // TemplateSpecializationType Local<v8::Value>
struct _ast6275; // TemplateSpecializationType Local<v8::Signature>
struct _ast6276; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6277; // CXXMethodDecl GetFunction
struct _ast6278; // ParmVarDecl context
struct _ast6279; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>)
struct _ast6280; // TemplateSpecializationType Local<v8::Context>
struct _ast6281; // TemplateSpecializationType MaybeLocal<v8::Function>
struct _ast6282; // PointerType v8::FunctionTemplate *
struct _ast6283; // RecordType v8::FunctionTemplate
struct _ast6284; // CXXMethodDecl NewRemoteInstance
struct _ast6285; // FunctionProtoType MaybeLocal<v8::Object> ()
struct _ast6286; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast6287; // CXXMethodDecl SetCallHandler
struct _ast6288; // ParmVarDecl callback
struct _ast6289; // ParmVarDecl data
struct _ast6290; // ParmVarDecl side_effect_type
struct _ast6291; // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
struct _ast6292; // TemplateSpecializationType Local<v8::Value>
struct _ast6293; // CXXMethodDecl SetLength
struct _ast6294; // ParmVarDecl length
struct _ast6295; // CXXMethodDecl InstanceTemplate
struct _ast6296; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6297; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast6298; // CXXMethodDecl Inherit
struct _ast6299; // ParmVarDecl parent
struct _ast6300; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6301; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6302; // CXXMethodDecl PrototypeTemplate
struct _ast6303; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6304; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast6305; // CXXMethodDecl SetPrototypeProviderTemplate
struct _ast6306; // ParmVarDecl prototype_provider
struct _ast6307; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6308; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6309; // CXXMethodDecl SetClassName
struct _ast6310; // ParmVarDecl name
struct _ast6311; // FunctionProtoType void (Local<v8::String>)
struct _ast6312; // TemplateSpecializationType Local<v8::String>
struct _ast6313; // CXXMethodDecl SetAcceptAnyReceiver
struct _ast6314; // ParmVarDecl value
struct _ast6315; // CXXMethodDecl ReadOnlyPrototype
struct _ast6316; // CXXMethodDecl RemovePrototype
struct _ast6317; // CXXMethodDecl HasInstance
struct _ast6318; // ParmVarDecl object
struct _ast6319; // FunctionProtoType bool (Local<v8::Value>)
struct _ast6320; // TemplateSpecializationType Local<v8::Value>
struct _ast6321; // CXXMethodDecl Cast
struct _ast6322; // ParmVarDecl data
struct _ast6323; // FunctionProtoType v8::FunctionTemplate *(v8::Data *)
struct _ast6324; // EnumDecl PropertyHandlerFlags
struct _ast6325; // EnumConstantDecl kNone
struct _ast6326; // EnumConstantDecl kAllCanRead
struct _ast6327; // EnumConstantDecl kNonMasking
struct _ast6328; // EnumConstantDecl kOnlyInterceptStrings
struct _ast6329; // EnumConstantDecl kHasNoSideEffect
struct _ast6330; // CXXRecordDecl NamedPropertyHandlerConfiguration
struct _ast6331; // CXXRecordDecl NamedPropertyHandlerConfiguration
struct _ast6332; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6333; // ParmVarDecl getter
struct _ast6334; // ParmVarDecl setter
struct _ast6335; // ParmVarDecl query
struct _ast6336; // ParmVarDecl deleter
struct _ast6337; // ParmVarDecl enumerator
struct _ast6338; // ParmVarDecl definer
struct _ast6339; // ParmVarDecl descriptor
struct _ast6340; // ParmVarDecl data
struct _ast6341; // ParmVarDecl flags
struct _ast6342; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6343; // TypedefType v8::GenericNamedPropertyGetterCallback
struct _ast6344; // TypedefType v8::GenericNamedPropertySetterCallback
struct _ast6345; // TypedefType v8::GenericNamedPropertyQueryCallback
struct _ast6346; // TypedefType v8::GenericNamedPropertyDeleterCallback
struct _ast6347; // TypedefType v8::GenericNamedPropertyEnumeratorCallback
struct _ast6348; // TypedefType v8::GenericNamedPropertyDefinerCallback
struct _ast6349; // TypedefType v8::GenericNamedPropertyDescriptorCallback
struct _ast6350; // TemplateSpecializationType Local<v8::Value>
struct _ast6351; // EnumType v8::PropertyHandlerFlags
struct _ast6352; // PointerType v8::NamedPropertyHandlerConfiguration *
struct _ast6353; // RecordType v8::NamedPropertyHandlerConfiguration
struct _ast6354; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6355; // ParmVarDecl getter
struct _ast6356; // ParmVarDecl setter
struct _ast6357; // ParmVarDecl query
struct _ast6358; // ParmVarDecl deleter
struct _ast6359; // ParmVarDecl enumerator
struct _ast6360; // ParmVarDecl data
struct _ast6361; // ParmVarDecl flags
struct _ast6362; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6363; // TemplateSpecializationType Local<v8::Value>
struct _ast6364; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6365; // ParmVarDecl getter
struct _ast6366; // ParmVarDecl setter
struct _ast6367; // ParmVarDecl descriptor
struct _ast6368; // ParmVarDecl deleter
struct _ast6369; // ParmVarDecl enumerator
struct _ast6370; // ParmVarDecl definer
struct _ast6371; // ParmVarDecl data
struct _ast6372; // ParmVarDecl flags
struct _ast6373; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6374; // TemplateSpecializationType Local<v8::Value>
struct _ast6375; // FieldDecl getter
struct _ast6376; // FieldDecl setter
struct _ast6377; // FieldDecl query
struct _ast6378; // FieldDecl deleter
struct _ast6379; // FieldDecl enumerator
struct _ast6380; // FieldDecl definer
struct _ast6381; // FieldDecl descriptor
struct _ast6382; // FieldDecl data
struct _ast6383; // FieldDecl flags
struct _ast6384; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6385; // ParmVarDecl 
struct _ast6386; // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6387; // LValueReferenceType const v8::NamedPropertyHandlerConfiguration &
struct _ast6388; // RecordType const v8::NamedPropertyHandlerConfiguration
struct _ast6389; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6390; // ParmVarDecl 
struct _ast6391; // FunctionProtoType void (v8::NamedPropertyHandlerConfiguration &&)
struct _ast6392; // RValueReferenceType v8::NamedPropertyHandlerConfiguration &&
struct _ast6393; // CXXRecordDecl IndexedPropertyHandlerConfiguration
struct _ast6394; // CXXRecordDecl IndexedPropertyHandlerConfiguration
struct _ast6395; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6396; // ParmVarDecl getter
struct _ast6397; // ParmVarDecl setter
struct _ast6398; // ParmVarDecl query
struct _ast6399; // ParmVarDecl deleter
struct _ast6400; // ParmVarDecl enumerator
struct _ast6401; // ParmVarDecl definer
struct _ast6402; // ParmVarDecl descriptor
struct _ast6403; // ParmVarDecl data
struct _ast6404; // ParmVarDecl flags
struct _ast6405; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6406; // TypedefType v8::IndexedPropertyGetterCallback
struct _ast6407; // TypedefType v8::IndexedPropertySetterCallback
struct _ast6408; // TypedefType v8::IndexedPropertyQueryCallback
struct _ast6409; // TypedefType v8::IndexedPropertyDeleterCallback
struct _ast6410; // TypedefType v8::IndexedPropertyEnumeratorCallback
struct _ast6411; // TypedefType v8::IndexedPropertyDefinerCallback
struct _ast6412; // TypedefType v8::IndexedPropertyDescriptorCallback
struct _ast6413; // TemplateSpecializationType Local<v8::Value>
struct _ast6414; // PointerType v8::IndexedPropertyHandlerConfiguration *
struct _ast6415; // RecordType v8::IndexedPropertyHandlerConfiguration
struct _ast6416; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6417; // ParmVarDecl getter
struct _ast6418; // ParmVarDecl setter
struct _ast6419; // ParmVarDecl query
struct _ast6420; // ParmVarDecl deleter
struct _ast6421; // ParmVarDecl enumerator
struct _ast6422; // ParmVarDecl data
struct _ast6423; // ParmVarDecl flags
struct _ast6424; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6425; // TemplateSpecializationType Local<v8::Value>
struct _ast6426; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6427; // ParmVarDecl getter
struct _ast6428; // ParmVarDecl setter
struct _ast6429; // ParmVarDecl descriptor
struct _ast6430; // ParmVarDecl deleter
struct _ast6431; // ParmVarDecl enumerator
struct _ast6432; // ParmVarDecl definer
struct _ast6433; // ParmVarDecl data
struct _ast6434; // ParmVarDecl flags
struct _ast6435; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6436; // TemplateSpecializationType Local<v8::Value>
struct _ast6437; // FieldDecl getter
struct _ast6438; // FieldDecl setter
struct _ast6439; // FieldDecl query
struct _ast6440; // FieldDecl deleter
struct _ast6441; // FieldDecl enumerator
struct _ast6442; // FieldDecl definer
struct _ast6443; // FieldDecl descriptor
struct _ast6444; // FieldDecl data
struct _ast6445; // FieldDecl flags
struct _ast6446; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6447; // ParmVarDecl 
struct _ast6448; // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6449; // LValueReferenceType const v8::IndexedPropertyHandlerConfiguration &
struct _ast6450; // RecordType const v8::IndexedPropertyHandlerConfiguration
struct _ast6451; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6452; // ParmVarDecl 
struct _ast6453; // FunctionProtoType void (v8::IndexedPropertyHandlerConfiguration &&)
struct _ast6454; // RValueReferenceType v8::IndexedPropertyHandlerConfiguration &&
struct _ast6455; // CXXDestructorDecl ~IndexedPropertyHandlerConfiguration
struct _ast6456; // CXXRecordDecl ObjectTemplate
struct _ast6457; // CXXMethodDecl New
struct _ast6458; // ParmVarDecl isolate
struct _ast6459; // ParmVarDecl constructor
struct _ast6460; // FunctionProtoType Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6461; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6462; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast6463; // CXXMethodDecl FromSnapshot
struct _ast6464; // ParmVarDecl isolate
struct _ast6465; // ParmVarDecl index
struct _ast6466; // FunctionProtoType MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _ast6467; // TemplateSpecializationType MaybeLocal<v8::ObjectTemplate>
struct _ast6468; // CXXMethodDecl NewInstance
struct _ast6469; // ParmVarDecl context
struct _ast6470; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>)
struct _ast6471; // TemplateSpecializationType Local<v8::Context>
struct _ast6472; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast6473; // PointerType v8::ObjectTemplate *
struct _ast6474; // RecordType v8::ObjectTemplate
struct _ast6475; // CXXMethodDecl SetAccessor
struct _ast6476; // ParmVarDecl name
struct _ast6477; // ParmVarDecl getter
struct _ast6478; // ParmVarDecl setter
struct _ast6479; // ParmVarDecl data
struct _ast6480; // ParmVarDecl settings
struct _ast6481; // ParmVarDecl attribute
struct _ast6482; // ParmVarDecl signature
struct _ast6483; // ParmVarDecl getter_side_effect_type
struct _ast6484; // ParmVarDecl setter_side_effect_type
struct _ast6485; // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6486; // TemplateSpecializationType Local<v8::String>
struct _ast6487; // TemplateSpecializationType Local<v8::Value>
struct _ast6488; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6489; // CXXMethodDecl SetAccessor
struct _ast6490; // ParmVarDecl name
struct _ast6491; // ParmVarDecl getter
struct _ast6492; // ParmVarDecl setter
struct _ast6493; // ParmVarDecl data
struct _ast6494; // ParmVarDecl settings
struct _ast6495; // ParmVarDecl attribute
struct _ast6496; // ParmVarDecl signature
struct _ast6497; // ParmVarDecl getter_side_effect_type
struct _ast6498; // ParmVarDecl setter_side_effect_type
struct _ast6499; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6500; // TemplateSpecializationType Local<v8::Name>
struct _ast6501; // TemplateSpecializationType Local<v8::Value>
struct _ast6502; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6503; // CXXMethodDecl SetHandler
struct _ast6504; // ParmVarDecl configuration
struct _ast6505; // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6506; // CXXMethodDecl SetIndexedPropertyHandler
struct _ast6507; // ParmVarDecl getter
struct _ast6508; // ParmVarDecl setter
struct _ast6509; // ParmVarDecl query
struct _ast6510; // ParmVarDecl deleter
struct _ast6511; // ParmVarDecl enumerator
struct _ast6512; // ParmVarDecl data
struct _ast6513; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _ast6514; // TemplateSpecializationType Local<v8::Value>
struct _ast6515; // CXXMethodDecl SetHandler
struct _ast6516; // ParmVarDecl configuration
struct _ast6517; // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6518; // CXXMethodDecl SetCallAsFunctionHandler
struct _ast6519; // ParmVarDecl callback
struct _ast6520; // ParmVarDecl data
struct _ast6521; // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>)
struct _ast6522; // TemplateSpecializationType Local<v8::Value>
struct _ast6523; // CXXMethodDecl MarkAsUndetectable
struct _ast6524; // CXXMethodDecl SetAccessCheckCallback
struct _ast6525; // ParmVarDecl callback
struct _ast6526; // ParmVarDecl data
struct _ast6527; // FunctionProtoType void (v8::AccessCheckCallback, Local<v8::Value>)
struct _ast6528; // TypedefType v8::AccessCheckCallback
struct _ast6529; // TemplateSpecializationType Local<v8::Value>
struct _ast6530; // CXXMethodDecl SetAccessCheckCallbackAndHandler
struct _ast6531; // ParmVarDecl callback
struct _ast6532; // ParmVarDecl named_handler
struct _ast6533; // ParmVarDecl indexed_handler
struct _ast6534; // ParmVarDecl data
struct _ast6535; // FunctionProtoType void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ast6536; // TemplateSpecializationType Local<v8::Value>
struct _ast6537; // CXXMethodDecl InternalFieldCount
struct _ast6538; // CXXMethodDecl SetInternalFieldCount
struct _ast6539; // ParmVarDecl value
struct _ast6540; // CXXMethodDecl IsImmutableProto
struct _ast6541; // CXXMethodDecl SetImmutableProto
struct _ast6542; // CXXMethodDecl Cast
struct _ast6543; // ParmVarDecl data
struct _ast6544; // FunctionProtoType v8::ObjectTemplate *(v8::Data *)
struct _ast6545; // CXXRecordDecl Signature
struct _ast6546; // CXXMethodDecl New
struct _ast6547; // ParmVarDecl isolate
struct _ast6548; // ParmVarDecl receiver
struct _ast6549; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6550; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6551; // TemplateSpecializationType Local<v8::Signature>
struct _ast6552; // CXXMethodDecl Cast
struct _ast6553; // ParmVarDecl data
struct _ast6554; // FunctionProtoType v8::Signature *(v8::Data *)
struct _ast6555; // PointerType v8::Signature *
struct _ast6556; // RecordType v8::Signature
struct _ast6557; // CXXRecordDecl AccessorSignature
struct _ast6558; // CXXMethodDecl New
struct _ast6559; // ParmVarDecl isolate
struct _ast6560; // ParmVarDecl receiver
struct _ast6561; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6562; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6563; // TemplateSpecializationType Local<v8::AccessorSignature>
struct _ast6564; // CXXMethodDecl Cast
struct _ast6565; // ParmVarDecl data
struct _ast6566; // FunctionProtoType v8::AccessorSignature *(v8::Data *)
struct _ast6567; // PointerType v8::AccessorSignature *
struct _ast6568; // RecordType v8::AccessorSignature
struct _ast6569; // CXXRecordDecl Extension
struct _ast6570; // CXXRecordDecl Extension
struct _ast6571; // CXXConstructorDecl Extension
struct _ast6572; // ParmVarDecl name
struct _ast6573; // ParmVarDecl source
struct _ast6574; // ParmVarDecl dep_count
struct _ast6575; // ParmVarDecl deps
struct _ast6576; // ParmVarDecl source_length
struct _ast6577; // FunctionProtoType void (const char *, const char *, int, const char **, int)
struct _ast6578; // PointerType const char **
struct _ast6579; // PointerType v8::Extension *
struct _ast6580; // RecordType v8::Extension
struct _ast6581; // CXXDestructorDecl ~Extension
struct _ast6582; // CXXMethodDecl GetNativeFunctionTemplate
struct _ast6583; // ParmVarDecl isolate
struct _ast6584; // ParmVarDecl name
struct _ast6585; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
struct _ast6586; // TemplateSpecializationType Local<v8::String>
struct _ast6587; // TemplateSpecializationType Local<v8::FunctionTemplate>
struct _ast6588; // CXXMethodDecl name
struct _ast6589; // PointerType const v8::Extension *
struct _ast6590; // RecordType const v8::Extension
struct _ast6591; // CXXMethodDecl source_length
struct _ast6592; // CXXMethodDecl source
struct _ast6593; // FunctionProtoType const String::ExternalOneByteStringResource *() const
struct _ast6594; // PointerType const String::ExternalOneByteStringResource *
struct _ast6595; // ElaboratedType const String::ExternalOneByteStringResource
struct _ast6596; // ElaboratedType String::ExternalOneByteStringResource
struct _ast6597; // CXXMethodDecl dependency_count
struct _ast6598; // CXXMethodDecl dependencies
struct _ast6599; // FunctionProtoType const char **() const
struct _ast6600; // CXXMethodDecl set_auto_enable
struct _ast6601; // ParmVarDecl value
struct _ast6602; // CXXMethodDecl auto_enable
struct _ast6603; // CXXConstructorDecl Extension
struct _ast6604; // ParmVarDecl 
struct _ast6605; // FunctionProtoType void (const v8::Extension &)
struct _ast6606; // LValueReferenceType const v8::Extension &
struct _ast6607; // CXXMethodDecl operator=
struct _ast6608; // ParmVarDecl 
struct _ast6609; // FunctionDecl RegisterExtension
struct _ast6610; // ParmVarDecl 
struct _ast6611; // FunctionProtoType void (std::unique_ptr<Extension>)
struct _ast6612; // ElaboratedType std::unique_ptr<Extension>
struct _ast6613; // FunctionDecl Undefined
struct _ast6614; // ParmVarDecl isolate
struct _ast6615; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6616; // TemplateSpecializationType Local<v8::Primitive>
struct _ast6617; // ParmVarDecl isolate
struct _ast6618; // FunctionDecl Null
struct _ast6619; // ParmVarDecl isolate
struct _ast6620; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6621; // TemplateSpecializationType Local<v8::Primitive>
struct _ast6622; // ParmVarDecl isolate
struct _ast6623; // FunctionDecl True
struct _ast6624; // ParmVarDecl isolate
struct _ast6625; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6626; // TemplateSpecializationType Local<v8::Boolean>
struct _ast6627; // ParmVarDecl isolate
struct _ast6628; // FunctionDecl False
struct _ast6629; // ParmVarDecl isolate
struct _ast6630; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6631; // TemplateSpecializationType Local<v8::Boolean>
struct _ast6632; // ParmVarDecl isolate
struct _ast6633; // CXXRecordDecl ResourceConstraints
struct _ast6634; // CXXRecordDecl ResourceConstraints
struct _ast6635; // CXXMethodDecl ConfigureDefaultsFromHeapSize
struct _ast6636; // ParmVarDecl initial_heap_size_in_bytes
struct _ast6637; // ParmVarDecl maximum_heap_size_in_bytes
struct _ast6638; // FunctionProtoType void (size_t, size_t)
struct _ast6639; // PointerType v8::ResourceConstraints *
struct _ast6640; // RecordType v8::ResourceConstraints
struct _ast6641; // CXXMethodDecl ConfigureDefaults
struct _ast6642; // ParmVarDecl physical_memory
struct _ast6643; // ParmVarDecl virtual_memory_limit
struct _ast6644; // FunctionProtoType void (uint64_t, uint64_t)
struct _ast6645; // CXXMethodDecl stack_limit
struct _ast6646; // FunctionProtoType uint32_t *() const
struct _ast6647; // PointerType const v8::ResourceConstraints *
struct _ast6648; // RecordType const v8::ResourceConstraints
struct _ast6649; // CXXMethodDecl set_stack_limit
struct _ast6650; // ParmVarDecl value
struct _ast6651; // FunctionProtoType void (uint32_t *)
struct _ast6652; // CXXMethodDecl code_range_size_in_bytes
struct _ast6653; // CXXMethodDecl set_code_range_size_in_bytes
struct _ast6654; // ParmVarDecl limit
struct _ast6655; // FunctionProtoType void (size_t)
struct _ast6656; // CXXMethodDecl max_old_generation_size_in_bytes
struct _ast6657; // CXXMethodDecl set_max_old_generation_size_in_bytes
struct _ast6658; // ParmVarDecl limit
struct _ast6659; // CXXMethodDecl max_young_generation_size_in_bytes
struct _ast6660; // CXXMethodDecl set_max_young_generation_size_in_bytes
struct _ast6661; // ParmVarDecl limit
struct _ast6662; // CXXMethodDecl initial_old_generation_size_in_bytes
struct _ast6663; // CXXMethodDecl set_initial_old_generation_size_in_bytes
struct _ast6664; // ParmVarDecl initial_size
struct _ast6665; // CXXMethodDecl initial_young_generation_size_in_bytes
struct _ast6666; // CXXMethodDecl set_initial_young_generation_size_in_bytes
struct _ast6667; // ParmVarDecl initial_size
struct _ast6668; // CXXMethodDecl code_range_size
struct _ast6669; // CXXMethodDecl set_code_range_size
struct _ast6670; // ParmVarDecl limit_in_mb
struct _ast6671; // CXXMethodDecl max_semi_space_size_in_kb
struct _ast6672; // CXXMethodDecl set_max_semi_space_size_in_kb
struct _ast6673; // ParmVarDecl limit_in_kb
struct _ast6674; // CXXMethodDecl max_old_space_size
struct _ast6675; // CXXMethodDecl set_max_old_space_size
struct _ast6676; // ParmVarDecl limit_in_mb
struct _ast6677; // CXXMethodDecl max_zone_pool_size
struct _ast6678; // CXXMethodDecl set_max_zone_pool_size
struct _ast6679; // ParmVarDecl bytes
struct _ast6680; // CXXConstructorDecl ResourceConstraints
struct _ast6681; // CXXConstructorDecl ResourceConstraints
struct _ast6682; // ParmVarDecl 
struct _ast6683; // FunctionProtoType void (const v8::ResourceConstraints &)
struct _ast6684; // LValueReferenceType const v8::ResourceConstraints &
struct _ast6685; // CXXConstructorDecl ResourceConstraints
struct _ast6686; // ParmVarDecl 
struct _ast6687; // FunctionProtoType void (v8::ResourceConstraints &&)
struct _ast6688; // RValueReferenceType v8::ResourceConstraints &&
struct _ast6689; // TypedefDecl FatalErrorCallback
struct _ast6690; // PointerType void (*)(const char *, const char *)
struct _ast6691; // ParenType void (const char *, const char *)
struct _ast6692; // FunctionProtoType void (const char *, const char *)
struct _ast6693; // TypedefDecl OOMErrorCallback
struct _ast6694; // PointerType void (*)(const char *, bool)
struct _ast6695; // ParenType void (const char *, bool)
struct _ast6696; // FunctionProtoType void (const char *, bool)
struct _ast6697; // TypedefDecl DcheckErrorCallback
struct _ast6698; // PointerType void (*)(const char *, int, const char *)
struct _ast6699; // ParenType void (const char *, int, const char *)
struct _ast6700; // FunctionProtoType void (const char *, int, const char *)
struct _ast6701; // TypedefDecl MessageCallback
struct _ast6702; // PointerType void (*)(Local<v8::Message>, Local<v8::Value>)
struct _ast6703; // ParenType void (Local<v8::Message>, Local<v8::Value>)
struct _ast6704; // FunctionProtoType void (Local<v8::Message>, Local<v8::Value>)
struct _ast6705; // TemplateSpecializationType Local<v8::Message>
struct _ast6706; // TemplateSpecializationType Local<v8::Value>
struct _ast6707; // TypedefDecl LogEventCallback
struct _ast6708; // PointerType void (*)(const char *, int)
struct _ast6709; // ParenType void (const char *, int)
struct _ast6710; // FunctionProtoType void (const char *, int)
struct _ast6711; // CXXRecordDecl Exception
struct _ast6712; // CXXRecordDecl Exception
struct _ast6713; // CXXMethodDecl RangeError
struct _ast6714; // ParmVarDecl message
struct _ast6715; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6716; // TemplateSpecializationType Local<v8::String>
struct _ast6717; // TemplateSpecializationType Local<v8::Value>
struct _ast6718; // CXXMethodDecl ReferenceError
struct _ast6719; // ParmVarDecl message
struct _ast6720; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6721; // TemplateSpecializationType Local<v8::String>
struct _ast6722; // TemplateSpecializationType Local<v8::Value>
struct _ast6723; // CXXMethodDecl SyntaxError
struct _ast6724; // ParmVarDecl message
struct _ast6725; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6726; // TemplateSpecializationType Local<v8::String>
struct _ast6727; // TemplateSpecializationType Local<v8::Value>
struct _ast6728; // CXXMethodDecl TypeError
struct _ast6729; // ParmVarDecl message
struct _ast6730; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6731; // TemplateSpecializationType Local<v8::String>
struct _ast6732; // TemplateSpecializationType Local<v8::Value>
struct _ast6733; // CXXMethodDecl Error
struct _ast6734; // ParmVarDecl message
struct _ast6735; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6736; // TemplateSpecializationType Local<v8::String>
struct _ast6737; // TemplateSpecializationType Local<v8::Value>
struct _ast6738; // CXXMethodDecl CreateMessage
struct _ast6739; // ParmVarDecl isolate
struct _ast6740; // ParmVarDecl exception
struct _ast6741; // FunctionProtoType Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _ast6742; // TemplateSpecializationType Local<v8::Value>
struct _ast6743; // TemplateSpecializationType Local<v8::Message>
struct _ast6744; // CXXMethodDecl GetStackTrace
struct _ast6745; // ParmVarDecl exception
struct _ast6746; // FunctionProtoType Local<v8::StackTrace> (Local<v8::Value>)
struct _ast6747; // TemplateSpecializationType Local<v8::Value>
struct _ast6748; // TemplateSpecializationType Local<v8::StackTrace>
struct _ast6749; // TypedefDecl CounterLookupCallback
struct _ast6750; // PointerType int *(*)(const char *)
struct _ast6751; // ParenType int *(const char *)
struct _ast6752; // FunctionProtoType int *(const char *)
struct _ast6753; // TypedefDecl CreateHistogramCallback
struct _ast6754; // PointerType void *(*)(const char *, int, int, size_t)
struct _ast6755; // ParenType void *(const char *, int, int, size_t)
struct _ast6756; // FunctionProtoType void *(const char *, int, int, size_t)
struct _ast6757; // TypedefDecl AddHistogramSampleCallback
struct _ast6758; // PointerType void (*)(void *, int)
struct _ast6759; // ParenType void (void *, int)
struct _ast6760; // FunctionProtoType void (void *, int)
struct _ast6761; // TypedefDecl BeforeCallEnteredCallback
struct _ast6762; // PointerType void (*)(v8::Isolate *)
struct _ast6763; // ParenType void (v8::Isolate *)
struct _ast6764; // TypedefDecl CallCompletedCallback
struct _ast6765; // TypedefDecl HostImportModuleDynamicallyCallback
struct _ast6766; // PointerType MaybeLocal<v8::Promise> (*)(Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ast6767; // ParenType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ast6768; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ast6769; // TemplateSpecializationType Local<v8::Context>
struct _ast6770; // TemplateSpecializationType Local<v8::ScriptOrModule>
struct _ast6771; // TemplateSpecializationType Local<v8::String>
struct _ast6772; // TemplateSpecializationType MaybeLocal<v8::Promise>
struct _ast6773; // TypedefDecl HostInitializeImportMetaObjectCallback
struct _ast6774; // PointerType void (*)(Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ast6775; // ParenType void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ast6776; // FunctionProtoType void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ast6777; // TemplateSpecializationType Local<v8::Context>
struct _ast6778; // TemplateSpecializationType Local<v8::Module>
struct _ast6779; // TemplateSpecializationType Local<v8::Object>
struct _ast6780; // TypedefDecl PrepareStackTraceCallback
struct _ast6781; // PointerType MaybeLocal<v8::Value> (*)(Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ast6782; // ParenType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ast6783; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ast6784; // TemplateSpecializationType Local<v8::Context>
struct _ast6785; // TemplateSpecializationType Local<v8::Value>
struct _ast6786; // TemplateSpecializationType Local<v8::Array>
struct _ast6787; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast6788; // EnumDecl PromiseHookType
struct _ast6789; // EnumConstantDecl kInit
struct _ast6790; // EnumConstantDecl kResolve
struct _ast6791; // EnumConstantDecl kBefore
struct _ast6792; // EnumConstantDecl kAfter
struct _ast6793; // TypedefDecl PromiseHook
struct _ast6794; // PointerType void (*)(v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ast6795; // ParenType void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ast6796; // FunctionProtoType void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ast6797; // EnumType v8::PromiseHookType
struct _ast6798; // TemplateSpecializationType Local<v8::Promise>
struct _ast6799; // TemplateSpecializationType Local<v8::Value>
struct _ast6800; // EnumDecl PromiseRejectEvent
struct _ast6801; // EnumConstantDecl kPromiseRejectWithNoHandler
struct _ast6802; // EnumConstantDecl kPromiseHandlerAddedAfterReject
struct _ast6803; // EnumConstantDecl kPromiseRejectAfterResolved
struct _ast6804; // EnumConstantDecl kPromiseResolveAfterResolved
struct _ast6805; // CXXRecordDecl PromiseRejectMessage
struct _ast6806; // CXXRecordDecl PromiseRejectMessage
struct _ast6807; // CXXConstructorDecl PromiseRejectMessage
struct _ast6808; // ParmVarDecl promise
struct _ast6809; // ParmVarDecl event
struct _ast6810; // ParmVarDecl value
struct _ast6811; // FunctionProtoType void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
struct _ast6812; // TemplateSpecializationType Local<v8::Promise>
struct _ast6813; // EnumType v8::PromiseRejectEvent
struct _ast6814; // TemplateSpecializationType Local<v8::Value>
struct _ast6815; // PointerType v8::PromiseRejectMessage *
struct _ast6816; // RecordType v8::PromiseRejectMessage
struct _ast6817; // CXXMethodDecl GetPromise
struct _ast6818; // FunctionProtoType Local<v8::Promise> () const
struct _ast6819; // TemplateSpecializationType Local<v8::Promise>
struct _ast6820; // PointerType const v8::PromiseRejectMessage *
struct _ast6821; // RecordType const v8::PromiseRejectMessage
struct _ast6822; // CXXMethodDecl GetEvent
struct _ast6823; // FunctionProtoType v8::PromiseRejectEvent () const
struct _ast6824; // CXXMethodDecl GetValue
struct _ast6825; // FunctionProtoType Local<v8::Value> () const
struct _ast6826; // TemplateSpecializationType Local<v8::Value>
struct _ast6827; // TypedefDecl PromiseRejectCallback
struct _ast6828; // PointerType void (*)(v8::PromiseRejectMessage)
struct _ast6829; // ParenType void (v8::PromiseRejectMessage)
struct _ast6830; // FunctionProtoType void (v8::PromiseRejectMessage)
struct _ast6831; // TypedefDecl MicrotasksCompletedCallback
struct _ast6832; // TypedefDecl MicrotasksCompletedCallbackWithData
struct _ast6833; // PointerType void (*)(v8::Isolate *, void *)
struct _ast6834; // ParenType void (v8::Isolate *, void *)
struct _ast6835; // FunctionProtoType void (v8::Isolate *, void *)
struct _ast6836; // TypedefDecl MicrotaskCallback
struct _ast6837; // PointerType void (*)(void *)
struct _ast6838; // ParenType void (void *)
struct _ast6839; // EnumDecl MicrotasksPolicy
struct _ast6840; // EnumConstantDecl kExplicit
struct _ast6841; // EnumConstantDecl kScoped
struct _ast6842; // EnumConstantDecl kAuto
struct _ast6843; // CXXRecordDecl MicrotaskQueue
struct _ast6844; // CXXMethodDecl New
struct _ast6845; // ParmVarDecl isolate
struct _ast6846; // ParmVarDecl policy
struct _ast6847; // FunctionProtoType std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
struct _ast6848; // EnumType v8::MicrotasksPolicy
struct _ast6849; // ElaboratedType std::unique_ptr<MicrotaskQueue>
struct _ast6850; // CXXDestructorDecl ~MicrotaskQueue
struct _ast6851; // FunctionProtoType void ()
struct _ast6852; // PointerType v8::MicrotaskQueue *
struct _ast6853; // RecordType v8::MicrotaskQueue
struct _ast6854; // CXXMethodDecl EnqueueMicrotask
struct _ast6855; // ParmVarDecl isolate
struct _ast6856; // ParmVarDecl microtask
struct _ast6857; // FunctionProtoType void (v8::Isolate *, Local<v8::Function>)
struct _ast6858; // TemplateSpecializationType Local<v8::Function>
struct _ast6859; // CXXMethodDecl EnqueueMicrotask
struct _ast6860; // ParmVarDecl isolate
struct _ast6861; // ParmVarDecl callback
struct _ast6862; // ParmVarDecl data
struct _ast6863; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _ast6864; // PointerType v8::Isolate *
struct _ast6865; // ElaboratedType v8::Isolate
struct _ast6866; // TypedefType v8::MicrotaskCallback
struct _ast6867; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast6868; // ParmVarDecl callback
struct _ast6869; // ParmVarDecl data
struct _ast6870; // FunctionProtoType void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ast6871; // TypedefType v8::MicrotasksCompletedCallbackWithData
struct _ast6872; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast6873; // ParmVarDecl callback
struct _ast6874; // ParmVarDecl data
struct _ast6875; // CXXMethodDecl PerformCheckpoint
struct _ast6876; // ParmVarDecl isolate
struct _ast6877; // CXXMethodDecl IsRunningMicrotasks
struct _ast6878; // PointerType const v8::MicrotaskQueue *
struct _ast6879; // RecordType const v8::MicrotaskQueue
struct _ast6880; // CXXMethodDecl GetMicrotasksScopeDepth
struct _ast6881; // CXXConstructorDecl MicrotaskQueue
struct _ast6882; // ParmVarDecl 
struct _ast6883; // FunctionProtoType void (const v8::MicrotaskQueue &)
struct _ast6884; // LValueReferenceType const v8::MicrotaskQueue &
struct _ast6885; // CXXMethodDecl operator=
struct _ast6886; // ParmVarDecl 
struct _ast6887; // FunctionProtoType v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _ast6888; // LValueReferenceType v8::MicrotaskQueue &
struct _ast6889; // CXXRecordDecl MicrotasksScope
struct _ast6890; // CXXRecordDecl MicrotasksScope
struct _ast6891; // EnumDecl Type
struct _ast6892; // EnumConstantDecl kRunMicrotasks
struct _ast6893; // EnumConstantDecl kDoNotRunMicrotasks
struct _ast6894; // CXXConstructorDecl MicrotasksScope
struct _ast6895; // ParmVarDecl isolate
struct _ast6896; // ParmVarDecl type
struct _ast6897; // FunctionProtoType void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _ast6898; // EnumType v8::MicrotasksScope::Type
struct _ast6899; // PointerType v8::MicrotasksScope *
struct _ast6900; // RecordType v8::MicrotasksScope
struct _ast6901; // CXXConstructorDecl MicrotasksScope
struct _ast6902; // ParmVarDecl isolate
struct _ast6903; // ParmVarDecl microtask_queue
struct _ast6904; // ParmVarDecl type
struct _ast6905; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
struct _ast6906; // CXXDestructorDecl ~MicrotasksScope
struct _ast6907; // FunctionProtoType void ()
struct _ast6908; // CXXMethodDecl PerformCheckpoint
struct _ast6909; // ParmVarDecl isolate
struct _ast6910; // CXXMethodDecl GetCurrentDepth
struct _ast6911; // ParmVarDecl isolate
struct _ast6912; // CXXMethodDecl IsRunningMicrotasks
struct _ast6913; // ParmVarDecl isolate
struct _ast6914; // FunctionProtoType bool (v8::Isolate *)
struct _ast6915; // CXXConstructorDecl MicrotasksScope
struct _ast6916; // ParmVarDecl 
struct _ast6917; // FunctionProtoType void (const v8::MicrotasksScope &)
struct _ast6918; // LValueReferenceType const v8::MicrotasksScope &
struct _ast6919; // RecordType const v8::MicrotasksScope
struct _ast6920; // CXXMethodDecl operator=
struct _ast6921; // ParmVarDecl 
struct _ast6922; // FunctionProtoType v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _ast6923; // LValueReferenceType v8::MicrotasksScope &
struct _ast6924; // TypedefDecl FailedAccessCheckCallback
struct _ast6925; // PointerType void (*)(Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ast6926; // ParenType void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ast6927; // FunctionProtoType void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ast6928; // TemplateSpecializationType Local<v8::Object>
struct _ast6929; // EnumType v8::AccessType
struct _ast6930; // TemplateSpecializationType Local<v8::Value>
struct _ast6931; // TypedefDecl AllowCodeGenerationFromStringsCallback
struct _ast6932; // PointerType bool (*)(Local<v8::Context>, Local<v8::String>)
struct _ast6933; // ParenType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6934; // FunctionProtoType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6935; // TemplateSpecializationType Local<v8::Context>
struct _ast6936; // TemplateSpecializationType Local<v8::String>
struct _ast6937; // TypedefDecl ExtensionCallback
struct _ast6938; // PointerType bool (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast6939; // ParenType bool (const FunctionCallbackInfo<v8::Value> &)
struct _ast6940; // FunctionProtoType bool (const FunctionCallbackInfo<v8::Value> &)
struct _ast6941; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast6942; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast6943; // TemplateSpecializationType FunctionCallbackInfo<v8::Value>
struct _ast6944; // TypedefDecl AllowWasmCodeGenerationCallback
struct _ast6945; // PointerType bool (*)(Local<v8::Context>, Local<v8::String>)
struct _ast6946; // ParenType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6947; // FunctionProtoType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6948; // TemplateSpecializationType Local<v8::Context>
struct _ast6949; // TemplateSpecializationType Local<v8::String>
struct _ast6950; // TypedefDecl ApiImplementationCallback
struct _ast6951; // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast6952; // ParenType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6953; // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6954; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast6955; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast6956; // TemplateSpecializationType FunctionCallbackInfo<v8::Value>
struct _ast6957; // TypedefDecl WasmStreamingCallback
struct _ast6958; // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast6959; // ParenType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6960; // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6961; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast6962; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast6963; // TemplateSpecializationType FunctionCallbackInfo<v8::Value>
struct _ast6964; // TypedefDecl WasmThreadsEnabledCallback
struct _ast6965; // PointerType bool (*)(Local<v8::Context>)
struct _ast6966; // ParenType bool (Local<v8::Context>)
struct _ast6967; // FunctionProtoType bool (Local<v8::Context>)
struct _ast6968; // TemplateSpecializationType Local<v8::Context>
struct _ast6969; // EnumDecl GCType
struct _ast6970; // EnumConstantDecl kGCTypeScavenge
struct _ast6971; // EnumConstantDecl kGCTypeMarkSweepCompact
struct _ast6972; // EnumConstantDecl kGCTypeIncrementalMarking
struct _ast6973; // EnumConstantDecl kGCTypeProcessWeakCallbacks
struct _ast6974; // EnumConstantDecl kGCTypeAll
struct _ast6975; // EnumDecl GCCallbackFlags
struct _ast6976; // EnumConstantDecl kNoGCCallbackFlags
struct _ast6977; // EnumConstantDecl kGCCallbackFlagConstructRetainedObjectInfos
struct _ast6978; // EnumConstantDecl kGCCallbackFlagForced
struct _ast6979; // EnumConstantDecl kGCCallbackFlagSynchronousPhantomCallbackProcessing
struct _ast6980; // EnumConstantDecl kGCCallbackFlagCollectAllAvailableGarbage
struct _ast6981; // EnumConstantDecl kGCCallbackFlagCollectAllExternalMemory
struct _ast6982; // EnumConstantDecl kGCCallbackScheduleIdleGarbageCollection
struct _ast6983; // TypedefDecl GCCallback
struct _ast6984; // PointerType void (*)(v8::GCType, v8::GCCallbackFlags)
struct _ast6985; // ParenType void (v8::GCType, v8::GCCallbackFlags)
struct _ast6986; // FunctionProtoType void (v8::GCType, v8::GCCallbackFlags)
struct _ast6987; // EnumType v8::GCType
struct _ast6988; // EnumType v8::GCCallbackFlags
struct _ast6989; // TypedefDecl InterruptCallback
struct _ast6990; // TypedefDecl NearHeapLimitCallback
struct _ast6991; // PointerType size_t (*)(void *, size_t, size_t)
struct _ast6992; // ParenType size_t (void *, size_t, size_t)
struct _ast6993; // FunctionProtoType size_t (void *, size_t, size_t)
struct _ast6994; // CXXRecordDecl HeapStatistics
struct _ast6995; // CXXRecordDecl HeapStatistics
struct _ast6996; // CXXConstructorDecl HeapStatistics
struct _ast6997; // PointerType v8::HeapStatistics *
struct _ast6998; // RecordType v8::HeapStatistics
struct _ast6999; // CXXMethodDecl total_heap_size
struct _ast7000; // CXXMethodDecl total_heap_size_executable
struct _ast7001; // CXXMethodDecl total_physical_size
struct _ast7002; // CXXMethodDecl total_available_size
struct _ast7003; // CXXMethodDecl used_heap_size
struct _ast7004; // CXXMethodDecl heap_size_limit
struct _ast7005; // CXXMethodDecl malloced_memory
struct _ast7006; // CXXMethodDecl external_memory
struct _ast7007; // CXXMethodDecl peak_malloced_memory
struct _ast7008; // CXXMethodDecl number_of_native_contexts
struct _ast7009; // CXXMethodDecl number_of_detached_contexts
struct _ast7010; // CXXMethodDecl does_zap_garbage
struct _ast7011; // CXXRecordDecl HeapSpaceStatistics
struct _ast7012; // CXXRecordDecl HeapSpaceStatistics
struct _ast7013; // CXXConstructorDecl HeapSpaceStatistics
struct _ast7014; // PointerType v8::HeapSpaceStatistics *
struct _ast7015; // RecordType v8::HeapSpaceStatistics
struct _ast7016; // CXXMethodDecl space_name
struct _ast7017; // FunctionProtoType const char *()
struct _ast7018; // CXXMethodDecl space_size
struct _ast7019; // CXXMethodDecl space_used_size
struct _ast7020; // CXXMethodDecl space_available_size
struct _ast7021; // CXXMethodDecl physical_space_size
struct _ast7022; // CXXRecordDecl HeapObjectStatistics
struct _ast7023; // CXXRecordDecl HeapObjectStatistics
struct _ast7024; // CXXConstructorDecl HeapObjectStatistics
struct _ast7025; // PointerType v8::HeapObjectStatistics *
struct _ast7026; // RecordType v8::HeapObjectStatistics
struct _ast7027; // CXXMethodDecl object_type
struct _ast7028; // CXXMethodDecl object_sub_type
struct _ast7029; // CXXMethodDecl object_count
struct _ast7030; // CXXMethodDecl object_size
struct _ast7031; // CXXRecordDecl HeapCodeStatistics
struct _ast7032; // CXXRecordDecl HeapCodeStatistics
struct _ast7033; // CXXConstructorDecl HeapCodeStatistics
struct _ast7034; // PointerType v8::HeapCodeStatistics *
struct _ast7035; // RecordType v8::HeapCodeStatistics
struct _ast7036; // CXXMethodDecl code_and_metadata_size
struct _ast7037; // CXXMethodDecl bytecode_and_metadata_size
struct _ast7038; // CXXMethodDecl external_script_source_size
struct _ast7039; // CXXRecordDecl JitCodeEvent
struct _ast7040; // CXXRecordDecl JitCodeEvent
struct _ast7041; // EnumDecl EventType
struct _ast7042; // EnumConstantDecl CODE_ADDED
struct _ast7043; // EnumConstantDecl CODE_MOVED
struct _ast7044; // EnumConstantDecl CODE_REMOVED
struct _ast7045; // EnumConstantDecl CODE_ADD_LINE_POS_INFO
struct _ast7046; // EnumConstantDecl CODE_START_LINE_INFO_RECORDING
struct _ast7047; // EnumConstantDecl CODE_END_LINE_INFO_RECORDING
struct _ast7048; // EnumDecl PositionType
struct _ast7049; // EnumConstantDecl POSITION
struct _ast7050; // EnumConstantDecl STATEMENT_POSITION
struct _ast7051; // EnumDecl CodeType
struct _ast7052; // EnumConstantDecl BYTE_CODE
struct _ast7053; // EnumConstantDecl JIT_CODE
struct _ast7054; // FieldDecl type
struct _ast7055; // FieldDecl code_type
struct _ast7056; // FieldDecl code_start
struct _ast7057; // FieldDecl code_len
struct _ast7058; // FieldDecl script
struct _ast7059; // FieldDecl user_data
struct _ast7060; // CXXRecordDecl name_t
struct _ast7061; // CXXRecordDecl name_t
struct _ast7062; // FieldDecl str
struct _ast7063; // FieldDecl len
struct _ast7064; // CXXRecordDecl line_info_t
struct _ast7065; // CXXRecordDecl line_info_t
struct _ast7066; // FieldDecl offset
struct _ast7067; // FieldDecl pos
struct _ast7068; // FieldDecl position_type
struct _ast7069; // CXXRecordDecl 
struct _ast7070; // FieldDecl name
struct _ast7071; // FieldDecl line_info
struct _ast7072; // FieldDecl new_code_start
struct _ast7073; // FieldDecl 
struct _ast7074; // IndirectFieldDecl name
struct _ast7075; // IndirectFieldDecl line_info
struct _ast7076; // IndirectFieldDecl new_code_start
struct _ast7077; // FieldDecl isolate
struct _ast7078; // EnumDecl RAILMode
struct _ast7079; // EnumConstantDecl PERFORMANCE_RESPONSE
struct _ast7080; // EnumConstantDecl PERFORMANCE_ANIMATION
struct _ast7081; // EnumConstantDecl PERFORMANCE_IDLE
struct _ast7082; // EnumConstantDecl PERFORMANCE_LOAD
struct _ast7083; // EnumDecl JitCodeEventOptions
struct _ast7084; // EnumConstantDecl kJitCodeEventDefault
struct _ast7085; // EnumConstantDecl kJitCodeEventEnumExisting
struct _ast7086; // TypedefDecl JitCodeEventHandler
struct _ast7087; // PointerType void (*)(const v8::JitCodeEvent *)
struct _ast7088; // ParenType void (const v8::JitCodeEvent *)
struct _ast7089; // FunctionProtoType void (const v8::JitCodeEvent *)
struct _ast7090; // PointerType const v8::JitCodeEvent *
struct _ast7091; // RecordType const v8::JitCodeEvent
struct _ast7092; // RecordType v8::JitCodeEvent
struct _ast7093; // TypedefDecl UnhandledExceptionCallback
struct _ast7094; // PointerType int (*)(_EXCEPTION_POINTERS *)
struct _ast7095; // ParenType int (_EXCEPTION_POINTERS *)
struct _ast7096; // FunctionProtoType int (_EXCEPTION_POINTERS *)
struct _ast7097; // PointerType _EXCEPTION_POINTERS *
struct _ast7098; // RecordType _EXCEPTION_POINTERS
struct _ast7099; // CXXRecordDecl _EXCEPTION_POINTERS
struct _ast7100; // CXXRecordDecl ExternalResourceVisitor
struct _ast7101; // CXXRecordDecl ExternalResourceVisitor
struct _ast7102; // CXXDestructorDecl ~ExternalResourceVisitor
struct _ast7103; // FunctionProtoType void ()
struct _ast7104; // PointerType v8::ExternalResourceVisitor *
struct _ast7105; // RecordType v8::ExternalResourceVisitor
struct _ast7106; // CXXMethodDecl VisitExternalString
struct _ast7107; // ParmVarDecl string
struct _ast7108; // FunctionProtoType void (Local<v8::String>)
struct _ast7109; // TemplateSpecializationType Local<v8::String>
struct _ast7110; // CXXMethodDecl operator=
struct _ast7111; // ParmVarDecl 
struct _ast7112; // FunctionProtoType v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
struct _ast7113; // LValueReferenceType const v8::ExternalResourceVisitor &
struct _ast7114; // RecordType const v8::ExternalResourceVisitor
struct _ast7115; // LValueReferenceType v8::ExternalResourceVisitor &
struct _ast7116; // CXXRecordDecl PersistentHandleVisitor
struct _ast7117; // CXXRecordDecl PersistentHandleVisitor
struct _ast7118; // CXXDestructorDecl ~PersistentHandleVisitor
struct _ast7119; // FunctionProtoType void ()
struct _ast7120; // PointerType v8::PersistentHandleVisitor *
struct _ast7121; // RecordType v8::PersistentHandleVisitor
struct _ast7122; // CXXMethodDecl VisitPersistentHandle
struct _ast7123; // ParmVarDecl value
struct _ast7124; // ParmVarDecl class_id
struct _ast7125; // FunctionProtoType void (Persistent<v8::Value> *, uint16_t)
struct _ast7126; // PointerType Persistent<v8::Value> *
struct _ast7127; // TemplateSpecializationType Persistent<v8::Value>
struct _ast7128; // CXXMethodDecl operator=
struct _ast7129; // ParmVarDecl 
struct _ast7130; // FunctionProtoType v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
struct _ast7131; // LValueReferenceType const v8::PersistentHandleVisitor &
struct _ast7132; // RecordType const v8::PersistentHandleVisitor
struct _ast7133; // LValueReferenceType v8::PersistentHandleVisitor &
struct _ast7134; // EnumDecl MemoryPressureLevel
struct _ast7135; // EnumConstantDecl kNone
struct _ast7136; // EnumConstantDecl kModerate
struct _ast7137; // EnumConstantDecl kCritical
struct _ast7138; // CXXRecordDecl EmbedderHeapTracer
struct _ast7139; // CXXRecordDecl EmbedderHeapTracer
struct _ast7140; // EnumDecl TraceFlags
struct _ast7141; // EnumConstantDecl kNoFlags
struct _ast7142; // EnumConstantDecl kReduceMemory
struct _ast7143; // EnumDecl EmbedderStackState
struct _ast7144; // EnumConstantDecl kUnknown
struct _ast7145; // EnumConstantDecl kNonEmpty
struct _ast7146; // EnumConstantDecl kEmpty
struct _ast7147; // CXXRecordDecl TracedGlobalHandleVisitor
struct _ast7148; // CXXRecordDecl TracedGlobalHandleVisitor
struct _ast7149; // CXXDestructorDecl ~TracedGlobalHandleVisitor
struct _ast7150; // FunctionProtoType void ()
struct _ast7151; // PointerType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ast7152; // RecordType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7153; // CXXMethodDecl VisitTracedGlobalHandle
struct _ast7154; // ParmVarDecl value
struct _ast7155; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7156; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7157; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7158; // TemplateSpecializationType TracedGlobal<v8::Value>
struct _ast7159; // CXXMethodDecl operator=
struct _ast7160; // ParmVarDecl 
struct _ast7161; // FunctionProtoType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ast7162; // LValueReferenceType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7163; // RecordType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7164; // LValueReferenceType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7165; // CXXRecordDecl TraceSummary
struct _ast7166; // CXXRecordDecl TraceSummary
struct _ast7167; // FieldDecl time
struct _ast7168; // FieldDecl allocated_size
struct _ast7169; // CXXDestructorDecl ~EmbedderHeapTracer
struct _ast7170; // FunctionProtoType void ()
struct _ast7171; // PointerType v8::EmbedderHeapTracer *
struct _ast7172; // RecordType v8::EmbedderHeapTracer
struct _ast7173; // CXXMethodDecl IterateTracedGlobalHandles
struct _ast7174; // ParmVarDecl visitor
struct _ast7175; // FunctionProtoType void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _ast7176; // CXXMethodDecl RegisterV8References
struct _ast7177; // ParmVarDecl embedder_fields
struct _ast7178; // FunctionProtoType void (const std::vector<std::pair<void *, void *> > &)
struct _ast7179; // LValueReferenceType const std::vector<std::pair<void *, void *> > &
struct _ast7180; // ElaboratedType const std::vector<std::pair<void *, void *> >
struct _ast7181; // ElaboratedType std::vector<std::pair<void *, void *> >
struct _ast7182; // CXXMethodDecl RegisterEmbedderReference
struct _ast7183; // ParmVarDecl ref
struct _ast7184; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7185; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7186; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7187; // TemplateSpecializationType TracedGlobal<v8::Value>
struct _ast7188; // CXXMethodDecl TracePrologue
struct _ast7189; // CXXMethodDecl TracePrologue
struct _ast7190; // ParmVarDecl flags
struct _ast7191; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceFlags)
struct _ast7192; // EnumType v8::EmbedderHeapTracer::TraceFlags
struct _ast7193; // CXXMethodDecl AdvanceTracing
struct _ast7194; // ParmVarDecl deadline_in_ms
struct _ast7195; // FunctionProtoType bool (double)
struct _ast7196; // CXXMethodDecl IsTracingDone
struct _ast7197; // CXXMethodDecl TraceEpilogue
struct _ast7198; // CXXMethodDecl TraceEpilogue
struct _ast7199; // ParmVarDecl trace_summary
struct _ast7200; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceSummary *)
struct _ast7201; // PointerType v8::EmbedderHeapTracer::TraceSummary *
struct _ast7202; // RecordType v8::EmbedderHeapTracer::TraceSummary
struct _ast7203; // CXXMethodDecl EnterFinalPause
struct _ast7204; // ParmVarDecl stack_state
struct _ast7205; // FunctionProtoType void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ast7206; // EnumType v8::EmbedderHeapTracer::EmbedderStackState
struct _ast7207; // CXXMethodDecl FinalizeTracing
struct _ast7208; // CXXMethodDecl IsRootForNonTracingGC
struct _ast7209; // ParmVarDecl handle
struct _ast7210; // FunctionProtoType bool (const v8::TracedGlobal<v8::Value> &)
struct _ast7211; // LValueReferenceType const v8::TracedGlobal<v8::Value> &
struct _ast7212; // ElaboratedType const v8::TracedGlobal<v8::Value>
struct _ast7213; // ElaboratedType v8::TracedGlobal<v8::Value>
struct _ast7214; // CXXMethodDecl GarbageCollectionForTesting
struct _ast7215; // ParmVarDecl stack_state
struct _ast7216; // CXXMethodDecl IncreaseAllocatedSize
struct _ast7217; // ParmVarDecl bytes
struct _ast7218; // CXXMethodDecl DecreaseAllocatedSize
struct _ast7219; // ParmVarDecl bytes
struct _ast7220; // CXXMethodDecl isolate
struct _ast7221; // FunctionProtoType v8::Isolate *() const
struct _ast7222; // PointerType const v8::EmbedderHeapTracer *
struct _ast7223; // RecordType const v8::EmbedderHeapTracer
struct _ast7224; // FieldDecl isolate_
struct _ast7225; // CXXMethodDecl operator=
struct _ast7226; // ParmVarDecl 
struct _ast7227; // FunctionProtoType v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _ast7228; // LValueReferenceType const v8::EmbedderHeapTracer &
struct _ast7229; // LValueReferenceType v8::EmbedderHeapTracer &
struct _ast7230; // CXXRecordDecl SerializeInternalFieldsCallback
struct _ast7231; // CXXRecordDecl SerializeInternalFieldsCallback
struct _ast7232; // TypedefDecl CallbackFunction
struct _ast7233; // PointerType v8::StartupData (*)(Local<v8::Object>, int, void *)
struct _ast7234; // ParenType v8::StartupData (Local<v8::Object>, int, void *)
struct _ast7235; // FunctionProtoType v8::StartupData (Local<v8::Object>, int, void *)
struct _ast7236; // TemplateSpecializationType Local<v8::Object>
struct _ast7237; // RecordType v8::StartupData
struct _ast7238; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7239; // ParmVarDecl function
struct _ast7240; // ParmVarDecl data_arg
struct _ast7241; // FunctionProtoType void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7242; // TypedefType v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ast7243; // PointerType v8::SerializeInternalFieldsCallback *
struct _ast7244; // RecordType v8::SerializeInternalFieldsCallback
struct _ast7245; // FieldDecl callback
struct _ast7246; // FieldDecl data
struct _ast7247; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7248; // ParmVarDecl 
struct _ast7249; // FunctionProtoType void (const v8::SerializeInternalFieldsCallback &)
struct _ast7250; // LValueReferenceType const v8::SerializeInternalFieldsCallback &
struct _ast7251; // RecordType const v8::SerializeInternalFieldsCallback
struct _ast7252; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7253; // ParmVarDecl 
struct _ast7254; // FunctionProtoType void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _ast7255; // RValueReferenceType v8::SerializeInternalFieldsCallback &&
struct _ast7256; // CXXDestructorDecl ~SerializeInternalFieldsCallback
struct _ast7257; // TypedefDecl SerializeEmbedderFieldsCallback
struct _ast7258; // CXXRecordDecl DeserializeInternalFieldsCallback
struct _ast7259; // CXXRecordDecl DeserializeInternalFieldsCallback
struct _ast7260; // TypedefDecl CallbackFunction
struct _ast7261; // PointerType void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7262; // ParenType void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7263; // FunctionProtoType void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7264; // TemplateSpecializationType Local<v8::Object>
struct _ast7265; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7266; // ParmVarDecl function
struct _ast7267; // ParmVarDecl data_arg
struct _ast7268; // FunctionProtoType void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7269; // TypedefType v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ast7270; // PointerType v8::DeserializeInternalFieldsCallback *
struct _ast7271; // RecordType v8::DeserializeInternalFieldsCallback
struct _ast7272; // FieldDecl callback
struct _ast7273; // FieldDecl data
struct _ast7274; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7275; // ParmVarDecl 
struct _ast7276; // FunctionProtoType void (const v8::DeserializeInternalFieldsCallback &)
struct _ast7277; // LValueReferenceType const v8::DeserializeInternalFieldsCallback &
struct _ast7278; // RecordType const v8::DeserializeInternalFieldsCallback
struct _ast7279; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7280; // ParmVarDecl 
struct _ast7281; // FunctionProtoType void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ast7282; // RValueReferenceType v8::DeserializeInternalFieldsCallback &&
struct _ast7283; // CXXDestructorDecl ~DeserializeInternalFieldsCallback
struct _ast7284; // TypedefDecl DeserializeEmbedderFieldsCallback
struct _ast7285; // CXXRecordDecl Isolate
struct _ast7286; // CXXRecordDecl CreateParams
struct _ast7287; // CXXRecordDecl CreateParams
struct _ast7288; // CXXConstructorDecl CreateParams
struct _ast7289; // PointerType v8::Isolate::CreateParams *
struct _ast7290; // RecordType v8::Isolate::CreateParams
struct _ast7291; // FieldDecl code_event_handler
struct _ast7292; // FieldDecl constraints
struct _ast7293; // FieldDecl snapshot_blob
struct _ast7294; // FieldDecl counter_lookup_callback
struct _ast7295; // FieldDecl create_histogram_callback
struct _ast7296; // FieldDecl add_histogram_sample_callback
struct _ast7297; // FieldDecl array_buffer_allocator
struct _ast7298; // FieldDecl external_references
struct _ast7299; // FieldDecl allow_atomics_wait
struct _ast7300; // FieldDecl only_terminate_in_safe_scope
struct _ast7301; // CXXRecordDecl Scope
struct _ast7302; // CXXRecordDecl Scope
struct _ast7303; // CXXConstructorDecl Scope
struct _ast7304; // ParmVarDecl isolate
struct _ast7305; // PointerType v8::Isolate::Scope *
struct _ast7306; // RecordType v8::Isolate::Scope
struct _ast7307; // CXXDestructorDecl ~Scope
struct _ast7308; // CXXConstructorDecl Scope
struct _ast7309; // ParmVarDecl 
struct _ast7310; // FunctionProtoType void (const v8::Isolate::Scope &)
struct _ast7311; // LValueReferenceType const v8::Isolate::Scope &
struct _ast7312; // RecordType const v8::Isolate::Scope
struct _ast7313; // CXXMethodDecl operator=
struct _ast7314; // ParmVarDecl 
struct _ast7315; // FunctionProtoType v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _ast7316; // LValueReferenceType v8::Isolate::Scope &
struct _ast7317; // CXXRecordDecl DisallowJavascriptExecutionScope
struct _ast7318; // CXXRecordDecl DisallowJavascriptExecutionScope
struct _ast7319; // EnumDecl OnFailure
struct _ast7320; // EnumConstantDecl CRASH_ON_FAILURE
struct _ast7321; // EnumConstantDecl THROW_ON_FAILURE
struct _ast7322; // EnumConstantDecl DUMP_ON_FAILURE
struct _ast7323; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7324; // ParmVarDecl isolate
struct _ast7325; // ParmVarDecl on_failure
struct _ast7326; // FunctionProtoType void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ast7327; // EnumType v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ast7328; // PointerType v8::Isolate::DisallowJavascriptExecutionScope *
struct _ast7329; // RecordType v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7330; // CXXDestructorDecl ~DisallowJavascriptExecutionScope
struct _ast7331; // FunctionProtoType void ()
struct _ast7332; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7333; // ParmVarDecl 
struct _ast7334; // FunctionProtoType void (const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7335; // LValueReferenceType const v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7336; // RecordType const v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7337; // CXXMethodDecl operator=
struct _ast7338; // ParmVarDecl 
struct _ast7339; // FunctionProtoType v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7340; // LValueReferenceType v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7341; // CXXRecordDecl AllowJavascriptExecutionScope
struct _ast7342; // CXXRecordDecl AllowJavascriptExecutionScope
struct _ast7343; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7344; // ParmVarDecl isolate
struct _ast7345; // PointerType v8::Isolate::AllowJavascriptExecutionScope *
struct _ast7346; // RecordType v8::Isolate::AllowJavascriptExecutionScope
struct _ast7347; // CXXDestructorDecl ~AllowJavascriptExecutionScope
struct _ast7348; // FunctionProtoType void ()
struct _ast7349; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7350; // ParmVarDecl 
struct _ast7351; // FunctionProtoType void (const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7352; // LValueReferenceType const v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7353; // RecordType const v8::Isolate::AllowJavascriptExecutionScope
struct _ast7354; // CXXMethodDecl operator=
struct _ast7355; // ParmVarDecl 
struct _ast7356; // FunctionProtoType v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7357; // LValueReferenceType v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7358; // CXXRecordDecl SuppressMicrotaskExecutionScope
struct _ast7359; // CXXRecordDecl SuppressMicrotaskExecutionScope
struct _ast7360; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7361; // ParmVarDecl isolate
struct _ast7362; // PointerType v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ast7363; // RecordType v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7364; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7365; // ParmVarDecl microtask_queue
struct _ast7366; // FunctionProtoType void (v8::MicrotaskQueue *)
struct _ast7367; // CXXDestructorDecl ~SuppressMicrotaskExecutionScope
struct _ast7368; // FunctionProtoType void ()
struct _ast7369; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7370; // ParmVarDecl 
struct _ast7371; // FunctionProtoType void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7372; // LValueReferenceType const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7373; // RecordType const v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7374; // CXXMethodDecl operator=
struct _ast7375; // ParmVarDecl 
struct _ast7376; // FunctionProtoType v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7377; // LValueReferenceType v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7378; // CXXRecordDecl SafeForTerminationScope
struct _ast7379; // CXXRecordDecl SafeForTerminationScope
struct _ast7380; // CXXConstructorDecl SafeForTerminationScope
struct _ast7381; // ParmVarDecl isolate
struct _ast7382; // FunctionProtoType void (v8::Isolate *)
struct _ast7383; // PointerType v8::Isolate::SafeForTerminationScope *
struct _ast7384; // RecordType v8::Isolate::SafeForTerminationScope
struct _ast7385; // CXXDestructorDecl ~SafeForTerminationScope
struct _ast7386; // FunctionProtoType void ()
struct _ast7387; // CXXConstructorDecl SafeForTerminationScope
struct _ast7388; // ParmVarDecl 
struct _ast7389; // FunctionProtoType void (const v8::Isolate::SafeForTerminationScope &)
struct _ast7390; // LValueReferenceType const v8::Isolate::SafeForTerminationScope &
struct _ast7391; // RecordType const v8::Isolate::SafeForTerminationScope
struct _ast7392; // CXXMethodDecl operator=
struct _ast7393; // ParmVarDecl 
struct _ast7394; // FunctionProtoType v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
struct _ast7395; // LValueReferenceType v8::Isolate::SafeForTerminationScope &
struct _ast7396; // EnumDecl GarbageCollectionType
struct _ast7397; // EnumConstantDecl kFullGarbageCollection
struct _ast7398; // EnumConstantDecl kMinorGarbageCollection
struct _ast7399; // EnumDecl UseCounterFeature
struct _ast7400; // EnumConstantDecl kUseAsm
struct _ast7401; // EnumConstantDecl kBreakIterator
struct _ast7402; // EnumConstantDecl kLegacyConst
struct _ast7403; // EnumConstantDecl kMarkDequeOverflow
struct _ast7404; // EnumConstantDecl kStoreBufferOverflow
struct _ast7405; // EnumConstantDecl kSlotsBufferOverflow
struct _ast7406; // EnumConstantDecl kObjectObserve
struct _ast7407; // EnumConstantDecl kForcedGC
struct _ast7408; // EnumConstantDecl kSloppyMode
struct _ast7409; // EnumConstantDecl kStrictMode
struct _ast7410; // EnumConstantDecl kStrongMode
struct _ast7411; // EnumConstantDecl kRegExpPrototypeStickyGetter
struct _ast7412; // EnumConstantDecl kRegExpPrototypeToString
struct _ast7413; // EnumConstantDecl kRegExpPrototypeUnicodeGetter
struct _ast7414; // EnumConstantDecl kIntlV8Parse
struct _ast7415; // EnumConstantDecl kIntlPattern
struct _ast7416; // EnumConstantDecl kIntlResolved
struct _ast7417; // EnumConstantDecl kPromiseChain
struct _ast7418; // EnumConstantDecl kPromiseAccept
struct _ast7419; // EnumConstantDecl kPromiseDefer
struct _ast7420; // EnumConstantDecl kHtmlCommentInExternalScript
struct _ast7421; // EnumConstantDecl kHtmlComment
struct _ast7422; // EnumConstantDecl kSloppyModeBlockScopedFunctionRedefinition
struct _ast7423; // EnumConstantDecl kForInInitializer
struct _ast7424; // EnumConstantDecl kArrayProtectorDirtied
struct _ast7425; // EnumConstantDecl kArraySpeciesModified
struct _ast7426; // EnumConstantDecl kArrayPrototypeConstructorModified
struct _ast7427; // EnumConstantDecl kArrayInstanceProtoModified
struct _ast7428; // EnumConstantDecl kArrayInstanceConstructorModified
struct _ast7429; // EnumConstantDecl kLegacyFunctionDeclaration
struct _ast7430; // EnumConstantDecl kRegExpPrototypeSourceGetter
struct _ast7431; // EnumConstantDecl kRegExpPrototypeOldFlagGetter
struct _ast7432; // EnumConstantDecl kDecimalWithLeadingZeroInStrictMode
struct _ast7433; // EnumConstantDecl kLegacyDateParser
struct _ast7434; // EnumConstantDecl kDefineGetterOrSetterWouldThrow
struct _ast7435; // EnumConstantDecl kFunctionConstructorReturnedUndefined
struct _ast7436; // EnumConstantDecl kAssigmentExpressionLHSIsCallInSloppy
struct _ast7437; // EnumConstantDecl kAssigmentExpressionLHSIsCallInStrict
struct _ast7438; // EnumConstantDecl kPromiseConstructorReturnedUndefined
struct _ast7439; // EnumConstantDecl kConstructorNonUndefinedPrimitiveReturn
struct _ast7440; // EnumConstantDecl kLabeledExpressionStatement
struct _ast7441; // EnumConstantDecl kLineOrParagraphSeparatorAsLineTerminator
struct _ast7442; // EnumConstantDecl kIndexAccessor
struct _ast7443; // EnumConstantDecl kErrorCaptureStackTrace
struct _ast7444; // EnumConstantDecl kErrorPrepareStackTrace
struct _ast7445; // EnumConstantDecl kErrorStackTraceLimit
struct _ast7446; // EnumConstantDecl kWebAssemblyInstantiation
struct _ast7447; // EnumConstantDecl kDeoptimizerDisableSpeculation
struct _ast7448; // EnumConstantDecl kArrayPrototypeSortJSArrayModifiedPrototype
struct _ast7449; // EnumConstantDecl kFunctionTokenOffsetTooLongForToString
struct _ast7450; // EnumConstantDecl kWasmSharedMemory
struct _ast7451; // EnumConstantDecl kWasmThreadOpcodes
struct _ast7452; // EnumConstantDecl kAtomicsNotify
struct _ast7453; // EnumConstantDecl kAtomicsWake
struct _ast7454; // EnumConstantDecl kCollator
struct _ast7455; // EnumConstantDecl kNumberFormat
struct _ast7456; // EnumConstantDecl kDateTimeFormat
struct _ast7457; // EnumConstantDecl kPluralRules
struct _ast7458; // EnumConstantDecl kRelativeTimeFormat
struct _ast7459; // EnumConstantDecl kLocale
struct _ast7460; // EnumConstantDecl kListFormat
struct _ast7461; // EnumConstantDecl kSegmenter
struct _ast7462; // EnumConstantDecl kStringLocaleCompare
struct _ast7463; // EnumConstantDecl kStringToLocaleUpperCase
struct _ast7464; // EnumConstantDecl kStringToLocaleLowerCase
struct _ast7465; // EnumConstantDecl kNumberToLocaleString
struct _ast7466; // EnumConstantDecl kDateToLocaleString
struct _ast7467; // EnumConstantDecl kDateToLocaleDateString
struct _ast7468; // EnumConstantDecl kDateToLocaleTimeString
struct _ast7469; // EnumConstantDecl kAttemptOverrideReadOnlyOnPrototypeSloppy
struct _ast7470; // EnumConstantDecl kAttemptOverrideReadOnlyOnPrototypeStrict
struct _ast7471; // EnumConstantDecl kOptimizedFunctionWithOneShotBytecode
struct _ast7472; // EnumConstantDecl kRegExpMatchIsTrueishOnNonJSRegExp
struct _ast7473; // EnumConstantDecl kRegExpMatchIsFalseishOnJSRegExp
struct _ast7474; // EnumConstantDecl kDateGetTimezoneOffset
struct _ast7475; // EnumConstantDecl kStringNormalize
struct _ast7476; // EnumConstantDecl kUseCounterFeatureCount
struct _ast7477; // EnumDecl MessageErrorLevel
struct _ast7478; // EnumConstantDecl kMessageLog
struct _ast7479; // EnumConstantDecl kMessageDebug
struct _ast7480; // EnumConstantDecl kMessageInfo
struct _ast7481; // EnumConstantDecl kMessageError
struct _ast7482; // EnumConstantDecl kMessageWarning
struct _ast7483; // EnumConstantDecl kMessageAll
struct _ast7484; // TypedefDecl UseCounterCallback
struct _ast7485; // PointerType void (*)(v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ast7486; // ParenType void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ast7487; // FunctionProtoType void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ast7488; // EnumType v8::Isolate::UseCounterFeature
struct _ast7489; // CXXMethodDecl Allocate
struct _ast7490; // CXXMethodDecl Initialize
struct _ast7491; // ParmVarDecl isolate
struct _ast7492; // ParmVarDecl params
struct _ast7493; // FunctionProtoType void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _ast7494; // LValueReferenceType const v8::Isolate::CreateParams &
struct _ast7495; // RecordType const v8::Isolate::CreateParams
struct _ast7496; // CXXMethodDecl New
struct _ast7497; // ParmVarDecl params
struct _ast7498; // FunctionProtoType v8::Isolate *(const v8::Isolate::CreateParams &)
struct _ast7499; // CXXMethodDecl GetCurrent
struct _ast7500; // TypedefDecl AbortOnUncaughtExceptionCallback
struct _ast7501; // PointerType bool (*)(v8::Isolate *)
struct _ast7502; // ParenType bool (v8::Isolate *)
struct _ast7503; // CXXMethodDecl SetAbortOnUncaughtExceptionCallback
struct _ast7504; // ParmVarDecl callback
struct _ast7505; // FunctionProtoType void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ast7506; // TypedefType v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ast7507; // CXXMethodDecl SetHostImportModuleDynamicallyCallback
struct _ast7508; // ParmVarDecl callback
struct _ast7509; // FunctionProtoType void (v8::HostImportModuleDynamicallyCallback)
struct _ast7510; // TypedefType v8::HostImportModuleDynamicallyCallback
struct _ast7511; // CXXMethodDecl SetHostInitializeImportMetaObjectCallback
struct _ast7512; // ParmVarDecl callback
struct _ast7513; // FunctionProtoType void (v8::HostInitializeImportMetaObjectCallback)
struct _ast7514; // TypedefType v8::HostInitializeImportMetaObjectCallback
struct _ast7515; // CXXMethodDecl SetPrepareStackTraceCallback
struct _ast7516; // ParmVarDecl callback
struct _ast7517; // FunctionProtoType void (v8::PrepareStackTraceCallback)
struct _ast7518; // TypedefType v8::PrepareStackTraceCallback
struct _ast7519; // CXXMethodDecl MemoryPressureNotification
struct _ast7520; // ParmVarDecl level
struct _ast7521; // FunctionProtoType void (v8::MemoryPressureLevel)
struct _ast7522; // EnumType v8::MemoryPressureLevel
struct _ast7523; // CXXMethodDecl Enter
struct _ast7524; // CXXMethodDecl Exit
struct _ast7525; // CXXMethodDecl Dispose
struct _ast7526; // CXXMethodDecl DumpAndResetStats
struct _ast7527; // CXXMethodDecl DiscardThreadSpecificMetadata
struct _ast7528; // CXXMethodDecl SetData
struct _ast7529; // ParmVarDecl slot
struct _ast7530; // ParmVarDecl data
struct _ast7531; // FunctionProtoType void (uint32_t, void *)
struct _ast7532; // CXXMethodDecl GetData
struct _ast7533; // ParmVarDecl slot
struct _ast7534; // FunctionProtoType void *(uint32_t)
struct _ast7535; // CXXMethodDecl GetNumberOfDataSlots
struct _ast7536; // FunctionTemplateDecl GetDataFromSnapshotOnce
struct _ast7537; // TemplateTypeParmDecl T
struct _ast7538; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast7539; // ParmVarDecl index
struct _ast7540; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast7541; // TemplateSpecializationType MaybeLocal<T>
struct _ast7542; // CXXMethodDecl GetHeapStatistics
struct _ast7543; // ParmVarDecl heap_statistics
struct _ast7544; // FunctionProtoType void (v8::HeapStatistics *)
struct _ast7545; // CXXMethodDecl NumberOfHeapSpaces
struct _ast7546; // CXXMethodDecl GetHeapSpaceStatistics
struct _ast7547; // ParmVarDecl space_statistics
struct _ast7548; // ParmVarDecl index
struct _ast7549; // FunctionProtoType bool (v8::HeapSpaceStatistics *, size_t)
struct _ast7550; // CXXMethodDecl NumberOfTrackedHeapObjectTypes
struct _ast7551; // CXXMethodDecl GetHeapObjectStatisticsAtLastGC
struct _ast7552; // ParmVarDecl object_statistics
struct _ast7553; // ParmVarDecl type_index
struct _ast7554; // FunctionProtoType bool (v8::HeapObjectStatistics *, size_t)
struct _ast7555; // CXXMethodDecl GetHeapCodeAndMetadataStatistics
struct _ast7556; // ParmVarDecl object_statistics
struct _ast7557; // FunctionProtoType bool (v8::HeapCodeStatistics *)
struct _ast7558; // CXXMethodDecl GetStackSample
struct _ast7559; // ParmVarDecl state
struct _ast7560; // ParmVarDecl frames
struct _ast7561; // ParmVarDecl frames_limit
struct _ast7562; // ParmVarDecl sample_info
struct _ast7563; // FunctionProtoType void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
struct _ast7564; // LValueReferenceType const v8::RegisterState &
struct _ast7565; // RecordType const v8::RegisterState
struct _ast7566; // PointerType void **
struct _ast7567; // PointerType v8::SampleInfo *
struct _ast7568; // RecordType v8::SampleInfo
struct _ast7569; // CXXMethodDecl AdjustAmountOfExternalAllocatedMemory
struct _ast7570; // ParmVarDecl change_in_bytes
struct _ast7571; // FunctionProtoType int64_t (int64_t)
struct _ast7572; // CXXMethodDecl NumberOfPhantomHandleResetsSinceLastCall
struct _ast7573; // CXXMethodDecl GetHeapProfiler
struct _ast7574; // FunctionProtoType v8::HeapProfiler *()
struct _ast7575; // PointerType v8::HeapProfiler *
struct _ast7576; // RecordType v8::HeapProfiler
struct _ast7577; // CXXMethodDecl SetIdle
struct _ast7578; // ParmVarDecl is_idle
struct _ast7579; // CXXMethodDecl GetArrayBufferAllocator
struct _ast7580; // FunctionProtoType ArrayBuffer::Allocator *()
struct _ast7581; // PointerType ArrayBuffer::Allocator *
struct _ast7582; // ElaboratedType ArrayBuffer::Allocator
struct _ast7583; // CXXMethodDecl InContext
struct _ast7584; // CXXMethodDecl GetCurrentContext
struct _ast7585; // FunctionProtoType Local<v8::Context> ()
struct _ast7586; // TemplateSpecializationType Local<v8::Context>
struct _ast7587; // CXXMethodDecl GetEnteredContext
struct _ast7588; // FunctionProtoType Local<v8::Context> ()
struct _ast7589; // TemplateSpecializationType Local<v8::Context>
struct _ast7590; // CXXMethodDecl GetEnteredOrMicrotaskContext
struct _ast7591; // FunctionProtoType Local<v8::Context> ()
struct _ast7592; // TemplateSpecializationType Local<v8::Context>
struct _ast7593; // CXXMethodDecl GetIncumbentContext
struct _ast7594; // FunctionProtoType Local<v8::Context> ()
struct _ast7595; // TemplateSpecializationType Local<v8::Context>
struct _ast7596; // CXXMethodDecl ThrowException
struct _ast7597; // ParmVarDecl exception
struct _ast7598; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast7599; // TemplateSpecializationType Local<v8::Value>
struct _ast7600; // TemplateSpecializationType Local<v8::Value>
struct _ast7601; // TypedefDecl GCCallback
struct _ast7602; // PointerType void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ast7603; // ParenType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ast7604; // FunctionProtoType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ast7605; // TypedefDecl GCCallbackWithData
struct _ast7606; // PointerType void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ast7607; // ParenType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ast7608; // FunctionProtoType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ast7609; // CXXMethodDecl AddGCPrologueCallback
struct _ast7610; // ParmVarDecl callback
struct _ast7611; // ParmVarDecl data
struct _ast7612; // ParmVarDecl gc_type_filter
struct _ast7613; // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
struct _ast7614; // TypedefType v8::Isolate::GCCallbackWithData
struct _ast7615; // CXXMethodDecl AddGCPrologueCallback
struct _ast7616; // ParmVarDecl callback
struct _ast7617; // ParmVarDecl gc_type_filter
struct _ast7618; // FunctionProtoType void (v8::Isolate::GCCallback, v8::GCType)
struct _ast7619; // TypedefType v8::Isolate::GCCallback
struct _ast7620; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7621; // ParmVarDecl 
struct _ast7622; // ParmVarDecl data
struct _ast7623; // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *)
struct _ast7624; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7625; // ParmVarDecl callback
struct _ast7626; // FunctionProtoType void (v8::Isolate::GCCallback)
struct _ast7627; // CXXMethodDecl SetEmbedderHeapTracer
struct _ast7628; // ParmVarDecl tracer
struct _ast7629; // FunctionProtoType void (v8::EmbedderHeapTracer *)
struct _ast7630; // CXXMethodDecl GetEmbedderHeapTracer
struct _ast7631; // FunctionProtoType v8::EmbedderHeapTracer *()
struct _ast7632; // EnumDecl AtomicsWaitEvent
struct _ast7633; // EnumConstantDecl kStartWait
struct _ast7634; // EnumConstantDecl kWokenUp
struct _ast7635; // EnumConstantDecl kTimedOut
struct _ast7636; // EnumConstantDecl kTerminatedExecution
struct _ast7637; // EnumConstantDecl kAPIStopped
struct _ast7638; // EnumConstantDecl kNotEqual
struct _ast7639; // CXXRecordDecl AtomicsWaitWakeHandle
struct _ast7640; // CXXRecordDecl AtomicsWaitWakeHandle
struct _ast7641; // CXXMethodDecl Wake
struct _ast7642; // PointerType v8::Isolate::AtomicsWaitWakeHandle *
struct _ast7643; // RecordType v8::Isolate::AtomicsWaitWakeHandle
struct _ast7644; // TypedefDecl AtomicsWaitCallback
struct _ast7645; // PointerType void (*)(v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ast7646; // ParenType void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ast7647; // FunctionProtoType void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ast7648; // EnumType v8::Isolate::AtomicsWaitEvent
struct _ast7649; // TemplateSpecializationType Local<v8::SharedArrayBuffer>
struct _ast7650; // CXXMethodDecl SetAtomicsWaitCallback
struct _ast7651; // ParmVarDecl callback
struct _ast7652; // ParmVarDecl data
struct _ast7653; // FunctionProtoType void (v8::Isolate::AtomicsWaitCallback, void *)
struct _ast7654; // TypedefType v8::Isolate::AtomicsWaitCallback
struct _ast7655; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7656; // ParmVarDecl callback
struct _ast7657; // ParmVarDecl data
struct _ast7658; // ParmVarDecl gc_type_filter
struct _ast7659; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7660; // ParmVarDecl callback
struct _ast7661; // ParmVarDecl gc_type_filter
struct _ast7662; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7663; // ParmVarDecl callback
struct _ast7664; // ParmVarDecl data
struct _ast7665; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7666; // ParmVarDecl callback
struct _ast7667; // TypedefDecl GetExternallyAllocatedMemoryInBytesCallback
struct _ast7668; // PointerType size_t (*)()
struct _ast7669; // ParenType size_t ()
struct _ast7670; // CXXMethodDecl SetGetExternallyAllocatedMemoryInBytesCallback
struct _ast7671; // ParmVarDecl callback
struct _ast7672; // FunctionProtoType void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ast7673; // TypedefType v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ast7674; // CXXMethodDecl TerminateExecution
struct _ast7675; // CXXMethodDecl IsExecutionTerminating
struct _ast7676; // CXXMethodDecl CancelTerminateExecution
struct _ast7677; // CXXMethodDecl RequestInterrupt
struct _ast7678; // ParmVarDecl callback
struct _ast7679; // ParmVarDecl data
struct _ast7680; // FunctionProtoType void (v8::InterruptCallback, void *)
struct _ast7681; // TypedefType v8::InterruptCallback
struct _ast7682; // CXXMethodDecl RequestGarbageCollectionForTesting
struct _ast7683; // ParmVarDecl type
struct _ast7684; // FunctionProtoType void (v8::Isolate::GarbageCollectionType)
struct _ast7685; // EnumType v8::Isolate::GarbageCollectionType
struct _ast7686; // CXXMethodDecl SetEventLogger
struct _ast7687; // ParmVarDecl that
struct _ast7688; // FunctionProtoType void (v8::LogEventCallback)
struct _ast7689; // TypedefType v8::LogEventCallback
struct _ast7690; // CXXMethodDecl AddBeforeCallEnteredCallback
struct _ast7691; // ParmVarDecl callback
struct _ast7692; // FunctionProtoType void (v8::BeforeCallEnteredCallback)
struct _ast7693; // TypedefType v8::BeforeCallEnteredCallback
struct _ast7694; // CXXMethodDecl RemoveBeforeCallEnteredCallback
struct _ast7695; // ParmVarDecl callback
struct _ast7696; // CXXMethodDecl AddCallCompletedCallback
struct _ast7697; // ParmVarDecl callback
struct _ast7698; // FunctionProtoType void (v8::CallCompletedCallback)
struct _ast7699; // TypedefType v8::CallCompletedCallback
struct _ast7700; // CXXMethodDecl RemoveCallCompletedCallback
struct _ast7701; // ParmVarDecl callback
struct _ast7702; // CXXMethodDecl SetPromiseHook
struct _ast7703; // ParmVarDecl hook
struct _ast7704; // FunctionProtoType void (v8::PromiseHook)
struct _ast7705; // TypedefType v8::PromiseHook
struct _ast7706; // CXXMethodDecl SetPromiseRejectCallback
struct _ast7707; // ParmVarDecl callback
struct _ast7708; // FunctionProtoType void (v8::PromiseRejectCallback)
struct _ast7709; // TypedefType v8::PromiseRejectCallback
struct _ast7710; // CXXMethodDecl RunMicrotasks
struct _ast7711; // CXXMethodDecl EnqueueMicrotask
struct _ast7712; // ParmVarDecl microtask
struct _ast7713; // FunctionProtoType void (Local<v8::Function>)
struct _ast7714; // TemplateSpecializationType Local<v8::Function>
struct _ast7715; // CXXMethodDecl EnqueueMicrotask
struct _ast7716; // ParmVarDecl callback
struct _ast7717; // ParmVarDecl data
struct _ast7718; // FunctionProtoType void (v8::MicrotaskCallback, void *)
struct _ast7719; // CXXMethodDecl SetMicrotasksPolicy
struct _ast7720; // ParmVarDecl policy
struct _ast7721; // FunctionProtoType void (v8::MicrotasksPolicy)
struct _ast7722; // CXXMethodDecl GetMicrotasksPolicy
struct _ast7723; // FunctionProtoType v8::MicrotasksPolicy () const
struct _ast7724; // PointerType const v8::Isolate *
struct _ast7725; // RecordType const v8::Isolate
struct _ast7726; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7727; // ParmVarDecl callback
struct _ast7728; // FunctionProtoType void (v8::MicrotasksCompletedCallback)
struct _ast7729; // TypedefType v8::MicrotasksCompletedCallback
struct _ast7730; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7731; // ParmVarDecl callback
struct _ast7732; // ParmVarDecl data
struct _ast7733; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7734; // ParmVarDecl callback
struct _ast7735; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7736; // ParmVarDecl callback
struct _ast7737; // ParmVarDecl data
struct _ast7738; // CXXMethodDecl SetUseCounterCallback
struct _ast7739; // ParmVarDecl callback
struct _ast7740; // FunctionProtoType void (v8::Isolate::UseCounterCallback)
struct _ast7741; // TypedefType v8::Isolate::UseCounterCallback
struct _ast7742; // CXXMethodDecl SetCounterFunction
struct _ast7743; // ParmVarDecl 
struct _ast7744; // FunctionProtoType void (v8::CounterLookupCallback)
struct _ast7745; // TypedefType v8::CounterLookupCallback
struct _ast7746; // CXXMethodDecl SetCreateHistogramFunction
struct _ast7747; // ParmVarDecl 
struct _ast7748; // FunctionProtoType void (v8::CreateHistogramCallback)
struct _ast7749; // TypedefType v8::CreateHistogramCallback
struct _ast7750; // CXXMethodDecl SetAddHistogramSampleFunction
struct _ast7751; // ParmVarDecl 
struct _ast7752; // FunctionProtoType void (v8::AddHistogramSampleCallback)
struct _ast7753; // TypedefType v8::AddHistogramSampleCallback
struct _ast7754; // CXXMethodDecl IdleNotificationDeadline
struct _ast7755; // ParmVarDecl deadline_in_seconds
struct _ast7756; // CXXMethodDecl LowMemoryNotification
struct _ast7757; // CXXMethodDecl ContextDisposedNotification
struct _ast7758; // ParmVarDecl dependant_context
struct _ast7759; // FunctionProtoType int (bool)
struct _ast7760; // CXXMethodDecl IsolateInForegroundNotification
struct _ast7761; // CXXMethodDecl IsolateInBackgroundNotification
struct _ast7762; // CXXMethodDecl EnableMemorySavingsMode
struct _ast7763; // CXXMethodDecl DisableMemorySavingsMode
struct _ast7764; // CXXMethodDecl SetRAILMode
struct _ast7765; // ParmVarDecl rail_mode
struct _ast7766; // FunctionProtoType void (v8::RAILMode)
struct _ast7767; // EnumType v8::RAILMode
struct _ast7768; // BuiltinType unsigned int
struct _ast7769; // CXXMethodDecl IncreaseHeapLimitForDebugging
struct _ast7770; // CXXMethodDecl RestoreOriginalHeapLimit
struct _ast7771; // CXXMethodDecl IsHeapLimitIncreasedForDebugging
struct _ast7772; // CXXMethodDecl SetJitCodeEventHandler
struct _ast7773; // ParmVarDecl options
struct _ast7774; // ParmVarDecl event_handler
struct _ast7775; // FunctionProtoType void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _ast7776; // EnumType v8::JitCodeEventOptions
struct _ast7777; // TypedefType v8::JitCodeEventHandler
struct _ast7778; // CXXMethodDecl SetStackLimit
struct _ast7779; // ParmVarDecl stack_limit
struct _ast7780; // FunctionProtoType void (uintptr_t)
struct _ast7781; // TypedefType uintptr_t
struct _ast7782; // CXXMethodDecl GetCodeRange
struct _ast7783; // ParmVarDecl start
struct _ast7784; // ParmVarDecl length_in_bytes
struct _ast7785; // FunctionProtoType void (void **, size_t *)
struct _ast7786; // CXXMethodDecl GetUnwindState
struct _ast7787; // FunctionProtoType v8::UnwindState ()
struct _ast7788; // RecordType v8::UnwindState
struct _ast7789; // CXXMethodDecl SetFatalErrorHandler
struct _ast7790; // ParmVarDecl that
struct _ast7791; // FunctionProtoType void (v8::FatalErrorCallback)
struct _ast7792; // TypedefType v8::FatalErrorCallback
struct _ast7793; // CXXMethodDecl SetOOMErrorHandler
struct _ast7794; // ParmVarDecl that
struct _ast7795; // FunctionProtoType void (v8::OOMErrorCallback)
struct _ast7796; // TypedefType v8::OOMErrorCallback
struct _ast7797; // CXXMethodDecl AddNearHeapLimitCallback
struct _ast7798; // ParmVarDecl callback
struct _ast7799; // ParmVarDecl data
struct _ast7800; // FunctionProtoType void (v8::NearHeapLimitCallback, void *)
struct _ast7801; // TypedefType v8::NearHeapLimitCallback
struct _ast7802; // CXXMethodDecl RemoveNearHeapLimitCallback
struct _ast7803; // ParmVarDecl callback
struct _ast7804; // ParmVarDecl heap_limit
struct _ast7805; // FunctionProtoType void (v8::NearHeapLimitCallback, size_t)
struct _ast7806; // CXXMethodDecl AutomaticallyRestoreInitialHeapLimit
struct _ast7807; // ParmVarDecl threshold_percent
struct _ast7808; // CXXMethodDecl SetAllowCodeGenerationFromStringsCallback
struct _ast7809; // ParmVarDecl callback
struct _ast7810; // FunctionProtoType void (v8::AllowCodeGenerationFromStringsCallback)
struct _ast7811; // TypedefType v8::AllowCodeGenerationFromStringsCallback
struct _ast7812; // CXXMethodDecl SetAllowWasmCodeGenerationCallback
struct _ast7813; // ParmVarDecl callback
struct _ast7814; // FunctionProtoType void (v8::AllowWasmCodeGenerationCallback)
struct _ast7815; // TypedefType v8::AllowWasmCodeGenerationCallback
struct _ast7816; // CXXMethodDecl SetWasmModuleCallback
struct _ast7817; // ParmVarDecl callback
struct _ast7818; // FunctionProtoType void (v8::ExtensionCallback)
struct _ast7819; // TypedefType v8::ExtensionCallback
struct _ast7820; // CXXMethodDecl SetWasmInstanceCallback
struct _ast7821; // ParmVarDecl callback
struct _ast7822; // CXXMethodDecl SetWasmStreamingCallback
struct _ast7823; // ParmVarDecl callback
struct _ast7824; // FunctionProtoType void (v8::WasmStreamingCallback)
struct _ast7825; // TypedefType v8::WasmStreamingCallback
struct _ast7826; // CXXMethodDecl SetWasmThreadsEnabledCallback
struct _ast7827; // ParmVarDecl callback
struct _ast7828; // FunctionProtoType void (v8::WasmThreadsEnabledCallback)
struct _ast7829; // TypedefType v8::WasmThreadsEnabledCallback
struct _ast7830; // CXXMethodDecl IsDead
struct _ast7831; // CXXMethodDecl AddMessageListener
struct _ast7832; // ParmVarDecl that
struct _ast7833; // ParmVarDecl data
struct _ast7834; // FunctionProtoType bool (v8::MessageCallback, Local<v8::Value>)
struct _ast7835; // TypedefType v8::MessageCallback
struct _ast7836; // TemplateSpecializationType Local<v8::Value>
struct _ast7837; // CXXMethodDecl AddMessageListenerWithErrorLevel
struct _ast7838; // ParmVarDecl that
struct _ast7839; // ParmVarDecl message_levels
struct _ast7840; // ParmVarDecl data
struct _ast7841; // FunctionProtoType bool (v8::MessageCallback, int, Local<v8::Value>)
struct _ast7842; // TemplateSpecializationType Local<v8::Value>
struct _ast7843; // CXXMethodDecl RemoveMessageListeners
struct _ast7844; // ParmVarDecl that
struct _ast7845; // FunctionProtoType void (v8::MessageCallback)
struct _ast7846; // CXXMethodDecl SetFailedAccessCheckCallbackFunction
struct _ast7847; // ParmVarDecl 
struct _ast7848; // FunctionProtoType void (v8::FailedAccessCheckCallback)
struct _ast7849; // TypedefType v8::FailedAccessCheckCallback
struct _ast7850; // CXXMethodDecl SetCaptureStackTraceForUncaughtExceptions
struct _ast7851; // ParmVarDecl capture
struct _ast7852; // ParmVarDecl frame_limit
struct _ast7853; // ParmVarDecl options
struct _ast7854; // FunctionProtoType void (bool, int, StackTrace::StackTraceOptions)
struct _ast7855; // ElaboratedType StackTrace::StackTraceOptions
struct _ast7856; // CXXMethodDecl VisitExternalResources
struct _ast7857; // ParmVarDecl visitor
struct _ast7858; // FunctionProtoType void (v8::ExternalResourceVisitor *)
struct _ast7859; // CXXMethodDecl VisitHandlesWithClassIds
struct _ast7860; // ParmVarDecl visitor
struct _ast7861; // FunctionProtoType void (v8::PersistentHandleVisitor *)
struct _ast7862; // CXXMethodDecl VisitWeakHandles
struct _ast7863; // ParmVarDecl visitor
struct _ast7864; // CXXMethodDecl IsInUse
struct _ast7865; // CXXMethodDecl SetAllowAtomicsWait
struct _ast7866; // ParmVarDecl allow
struct _ast7867; // EnumDecl TimeZoneDetection
struct _ast7868; // EnumConstantDecl kSkip
struct _ast7869; // EnumConstantDecl kRedetect
struct _ast7870; // CXXMethodDecl DateTimeConfigurationChangeNotification
struct _ast7871; // ParmVarDecl time_zone_detection
struct _ast7872; // FunctionProtoType void (v8::Isolate::TimeZoneDetection)
struct _ast7873; // EnumType v8::Isolate::TimeZoneDetection
struct _ast7874; // CXXMethodDecl LocaleConfigurationChangeNotification
struct _ast7875; // CXXConstructorDecl Isolate
struct _ast7876; // CXXDestructorDecl ~Isolate
struct _ast7877; // FunctionProtoType void ()
struct _ast7878; // CXXConstructorDecl Isolate
struct _ast7879; // ParmVarDecl 
struct _ast7880; // FunctionProtoType void (const v8::Isolate &)
struct _ast7881; // LValueReferenceType const v8::Isolate &
struct _ast7882; // CXXMethodDecl operator=
struct _ast7883; // ParmVarDecl 
struct _ast7884; // FunctionProtoType v8::Isolate &(const v8::Isolate &)
struct _ast7885; // LValueReferenceType v8::Isolate &
struct _ast7886; // CXXMethodDecl operator new
struct _ast7887; // ParmVarDecl size
struct _ast7888; // CXXMethodDecl operator new[]
struct _ast7889; // ParmVarDecl size
struct _ast7890; // CXXMethodDecl operator delete
struct _ast7891; // ParmVarDecl 
struct _ast7892; // ParmVarDecl 
struct _ast7893; // FunctionProtoType void (void *, size_t) noexcept
struct _ast7894; // CXXMethodDecl operator delete[]
struct _ast7895; // ParmVarDecl 
struct _ast7896; // ParmVarDecl 
struct _ast7897; // CXXRecordDecl StartupData
struct _ast7898; // CXXMethodDecl CanBeRehashed
struct _ast7899; // PointerType const v8::StartupData *
struct _ast7900; // RecordType const v8::StartupData
struct _ast7901; // FieldDecl data
struct _ast7902; // FieldDecl raw_size
struct _ast7903; // TypedefDecl EntropySource
struct _ast7904; // PointerType bool (*)(unsigned char *, size_t)
struct _ast7905; // ParenType bool (unsigned char *, size_t)
struct _ast7906; // FunctionProtoType bool (unsigned char *, size_t)
struct _ast7907; // PointerType unsigned char *
struct _ast7908; // BuiltinType unsigned char
struct _ast7909; // TypedefDecl ReturnAddressLocationResolver
struct _ast7910; // PointerType uintptr_t (*)(uintptr_t)
struct _ast7911; // ParenType uintptr_t (uintptr_t)
struct _ast7912; // FunctionProtoType uintptr_t (uintptr_t)
struct _ast7913; // CXXRecordDecl V8
struct _ast7914; // CXXRecordDecl V8
struct _ast7915; // CXXMethodDecl SetNativesDataBlob
struct _ast7916; // ParmVarDecl startup_blob
struct _ast7917; // FunctionProtoType void (v8::StartupData *)
struct _ast7918; // PointerType v8::StartupData *
struct _ast7919; // CXXMethodDecl SetSnapshotDataBlob
struct _ast7920; // ParmVarDecl startup_blob
struct _ast7921; // CXXMethodDecl SetDcheckErrorHandler
struct _ast7922; // ParmVarDecl that
struct _ast7923; // FunctionProtoType void (v8::DcheckErrorCallback)
struct _ast7924; // TypedefType v8::DcheckErrorCallback
struct _ast7925; // CXXMethodDecl SetFlagsFromString
struct _ast7926; // ParmVarDecl str
struct _ast7927; // CXXMethodDecl SetFlagsFromString
struct _ast7928; // ParmVarDecl str
struct _ast7929; // ParmVarDecl length
struct _ast7930; // FunctionProtoType void (const char *, size_t)
struct _ast7931; // CXXMethodDecl SetFlagsFromString
struct _ast7932; // ParmVarDecl str
struct _ast7933; // ParmVarDecl length
struct _ast7934; // CXXMethodDecl SetFlagsFromCommandLine
struct _ast7935; // ParmVarDecl argc
struct _ast7936; // ParmVarDecl argv
struct _ast7937; // ParmVarDecl remove_flags
struct _ast7938; // FunctionProtoType void (int *, char **, bool)
struct _ast7939; // PointerType char **
struct _ast7940; // CXXMethodDecl GetVersion
struct _ast7941; // CXXMethodDecl Initialize
struct _ast7942; // CXXMethodDecl SetEntropySource
struct _ast7943; // ParmVarDecl source
struct _ast7944; // FunctionProtoType void (v8::EntropySource)
struct _ast7945; // TypedefType v8::EntropySource
struct _ast7946; // CXXMethodDecl SetReturnAddressLocationResolver
struct _ast7947; // ParmVarDecl return_address_resolver
struct _ast7948; // FunctionProtoType void (v8::ReturnAddressLocationResolver)
struct _ast7949; // TypedefType v8::ReturnAddressLocationResolver
struct _ast7950; // CXXMethodDecl Dispose
struct _ast7951; // CXXMethodDecl InitializeICU
struct _ast7952; // ParmVarDecl icu_data_file
struct _ast7953; // FunctionProtoType bool (const char *)
struct _ast7954; // CXXMethodDecl InitializeICUDefaultLocation
struct _ast7955; // ParmVarDecl exec_path
struct _ast7956; // ParmVarDecl icu_data_file
struct _ast7957; // FunctionProtoType bool (const char *, const char *)
struct _ast7958; // CXXMethodDecl InitializeExternalStartupData
struct _ast7959; // ParmVarDecl directory_path
struct _ast7960; // CXXMethodDecl InitializeExternalStartupData
struct _ast7961; // ParmVarDecl natives_blob
struct _ast7962; // ParmVarDecl snapshot_blob
struct _ast7963; // CXXMethodDecl InitializePlatform
struct _ast7964; // ParmVarDecl platform
struct _ast7965; // FunctionProtoType void (v8::Platform *)
struct _ast7966; // PointerType v8::Platform *
struct _ast7967; // RecordType v8::Platform
struct _ast7968; // CXXMethodDecl ShutdownPlatform
struct _ast7969; // CXXMethodDecl EnableWebAssemblyTrapHandler
struct _ast7970; // ParmVarDecl use_v8_signal_handler
struct _ast7971; // FunctionProtoType bool (bool)
struct _ast7972; // CXXMethodDecl SetUnhandledExceptionCallback
struct _ast7973; // ParmVarDecl unhandled_exception_callback
struct _ast7974; // FunctionProtoType void (v8::UnhandledExceptionCallback)
struct _ast7975; // TypedefType v8::UnhandledExceptionCallback
struct _ast7976; // CXXRecordDecl SnapshotCreator
struct _ast7977; // CXXRecordDecl SnapshotCreator
struct _ast7978; // EnumDecl FunctionCodeHandling
struct _ast7979; // EnumConstantDecl kClear
struct _ast7980; // EnumConstantDecl kKeep
struct _ast7981; // CXXConstructorDecl SnapshotCreator
struct _ast7982; // ParmVarDecl isolate
struct _ast7983; // ParmVarDecl external_references
struct _ast7984; // ParmVarDecl existing_blob
struct _ast7985; // FunctionProtoType void (v8::Isolate *, const intptr_t *, v8::StartupData *)
struct _ast7986; // PointerType const intptr_t *
struct _ast7987; // TypedefType const intptr_t
struct _ast7988; // TypedefType intptr_t
struct _ast7989; // PointerType v8::SnapshotCreator *
struct _ast7990; // RecordType v8::SnapshotCreator
struct _ast7991; // CXXConstructorDecl SnapshotCreator
struct _ast7992; // ParmVarDecl external_references
struct _ast7993; // ParmVarDecl existing_blob
struct _ast7994; // FunctionProtoType void (const intptr_t *, v8::StartupData *)
struct _ast7995; // CXXDestructorDecl ~SnapshotCreator
struct _ast7996; // FunctionProtoType void ()
struct _ast7997; // CXXMethodDecl GetIsolate
struct _ast7998; // CXXMethodDecl SetDefaultContext
struct _ast7999; // ParmVarDecl context
struct _ast8000; // ParmVarDecl callback
struct _ast8001; // FunctionProtoType void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8002; // TemplateSpecializationType Local<v8::Context>
struct _ast8003; // CXXMethodDecl AddContext
struct _ast8004; // ParmVarDecl context
struct _ast8005; // ParmVarDecl callback
struct _ast8006; // FunctionProtoType size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8007; // TemplateSpecializationType Local<v8::Context>
struct _ast8008; // CXXMethodDecl AddTemplate
struct _ast8009; // ParmVarDecl template_obj
struct _ast8010; // FunctionProtoType size_t (Local<v8::Template>)
struct _ast8011; // TemplateSpecializationType Local<v8::Template>
struct _ast8012; // FunctionTemplateDecl AddData
struct _ast8013; // TemplateTypeParmDecl T
struct _ast8014; // CXXMethodDecl AddData
struct _ast8015; // ParmVarDecl context
struct _ast8016; // ParmVarDecl object
struct _ast8017; // FunctionProtoType size_t (Local<v8::Context>, Local<T>)
struct _ast8018; // TemplateSpecializationType Local<v8::Context>
struct _ast8019; // TemplateSpecializationType Local<T>
struct _ast8020; // FunctionTemplateDecl AddData
struct _ast8021; // TemplateTypeParmDecl T
struct _ast8022; // CXXMethodDecl AddData
struct _ast8023; // ParmVarDecl object
struct _ast8024; // FunctionProtoType size_t (Local<T>)
struct _ast8025; // TemplateSpecializationType Local<T>
struct _ast8026; // CXXMethodDecl CreateBlob
struct _ast8027; // ParmVarDecl function_code_handling
struct _ast8028; // FunctionProtoType v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
struct _ast8029; // EnumType v8::SnapshotCreator::FunctionCodeHandling
struct _ast8030; // CXXConstructorDecl SnapshotCreator
struct _ast8031; // ParmVarDecl 
struct _ast8032; // FunctionProtoType void (const v8::SnapshotCreator &)
struct _ast8033; // LValueReferenceType const v8::SnapshotCreator &
struct _ast8034; // RecordType const v8::SnapshotCreator
struct _ast8035; // CXXMethodDecl operator=
struct _ast8036; // ParmVarDecl 
struct _ast8037; // TemplateTypeParmDecl T
struct _ast8038; // CXXRecordDecl Maybe
struct _ast8039; // CXXMethodDecl IsNothing
struct _ast8040; // PointerType const Maybe<T> *
struct _ast8041; // InjectedClassNameType const Maybe<T>
struct _ast8042; // InjectedClassNameType Maybe<T>
struct _ast8043; // CXXMethodDecl IsJust
struct _ast8044; // CXXMethodDecl ToChecked
struct _ast8045; // FunctionProtoType T () const
struct _ast8046; // TemplateTypeParmType T
struct _ast8047; // CXXMethodDecl Check
struct _ast8048; // CXXMethodDecl To
struct _ast8049; // ParmVarDecl out
struct _ast8050; // FunctionProtoType bool (T *) const
struct _ast8051; // PointerType T *
struct _ast8052; // CXXMethodDecl FromJust
struct _ast8053; // CXXMethodDecl FromMaybe
struct _ast8054; // ParmVarDecl default_value
struct _ast8055; // FunctionProtoType T (const T &) const
struct _ast8056; // LValueReferenceType const T &
struct _ast8057; // TemplateTypeParmType const T
struct _ast8058; // CXXMethodDecl operator==
struct _ast8059; // ParmVarDecl other
struct _ast8060; // FunctionProtoType bool (const Maybe<T> &) const
struct _ast8061; // LValueReferenceType const Maybe<T> &
struct _ast8062; // CXXMethodDecl operator!=
struct _ast8063; // ParmVarDecl other
struct _ast8064; // FunctionTemplateDecl Nothing
struct _ast8065; // TemplateTypeParmDecl T
struct _ast8066; // FunctionDecl Nothing
struct _ast8067; // FunctionProtoType Maybe<T> ()
struct _ast8068; // TemplateSpecializationType Maybe<T>
struct _ast8069; // FunctionTemplateDecl Just
struct _ast8070; // TemplateTypeParmDecl T
struct _ast8071; // FunctionDecl Just
struct _ast8072; // ParmVarDecl t
struct _ast8073; // FunctionProtoType Maybe<T> (const T &)
struct _ast8074; // LValueReferenceType const T &
struct _ast8075; // TemplateTypeParmType const T
struct _ast8076; // TemplateTypeParmType T
struct _ast8077; // TemplateSpecializationType Maybe<T>
struct _ast8078; // ClassTemplateSpecializationDecl Maybe
struct _ast8079; // CXXRecordDecl Maybe
struct _ast8080; // CXXMethodDecl IsNothing
struct _ast8081; // PointerType const v8::Maybe<void> *
struct _ast8082; // RecordType const v8::Maybe<void>
struct _ast8083; // RecordType v8::Maybe<void>
struct _ast8084; // CXXMethodDecl IsJust
struct _ast8085; // CXXMethodDecl operator==
struct _ast8086; // ParmVarDecl other
struct _ast8087; // FunctionProtoType bool (const v8::Maybe<void> &) const
struct _ast8088; // LValueReferenceType const v8::Maybe<void> &
struct _ast8089; // CXXMethodDecl operator!=
struct _ast8090; // ParmVarDecl other
struct _ast8091; // CXXConstructorDecl Maybe
struct _ast8092; // ParmVarDecl 
struct _ast8093; // FunctionProtoType void (const v8::Maybe<void> &)
struct _ast8094; // PointerType v8::Maybe<void> *
struct _ast8095; // CXXConstructorDecl Maybe
struct _ast8096; // ParmVarDecl 
struct _ast8097; // FunctionProtoType void (v8::Maybe<void> &&) noexcept
struct _ast8098; // RValueReferenceType v8::Maybe<void> &&
struct _ast8099; // CXXDestructorDecl ~Maybe
struct _ast8100; // FunctionDecl JustVoid
struct _ast8101; // FunctionProtoType Maybe<void> ()
struct _ast8102; // TemplateSpecializationType Maybe<void>
struct _ast8103; // CXXRecordDecl TryCatch
struct _ast8104; // CXXRecordDecl TryCatch
struct _ast8105; // CXXConstructorDecl TryCatch
struct _ast8106; // ParmVarDecl isolate
struct _ast8107; // PointerType v8::TryCatch *
struct _ast8108; // RecordType v8::TryCatch
struct _ast8109; // CXXDestructorDecl ~TryCatch
struct _ast8110; // FunctionProtoType void ()
struct _ast8111; // CXXMethodDecl HasCaught
struct _ast8112; // PointerType const v8::TryCatch *
struct _ast8113; // RecordType const v8::TryCatch
struct _ast8114; // CXXMethodDecl CanContinue
struct _ast8115; // CXXMethodDecl HasTerminated
struct _ast8116; // CXXMethodDecl ReThrow
struct _ast8117; // FunctionProtoType Local<v8::Value> ()
struct _ast8118; // TemplateSpecializationType Local<v8::Value>
struct _ast8119; // CXXMethodDecl Exception
struct _ast8120; // FunctionProtoType Local<v8::Value> () const
struct _ast8121; // TemplateSpecializationType Local<v8::Value>
struct _ast8122; // CXXMethodDecl StackTrace
struct _ast8123; // ParmVarDecl context
struct _ast8124; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _ast8125; // TemplateSpecializationType Local<v8::Context>
struct _ast8126; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8127; // CXXMethodDecl Message
struct _ast8128; // FunctionProtoType Local<v8::Message> () const
struct _ast8129; // TemplateSpecializationType Local<v8::Message>
struct _ast8130; // CXXMethodDecl Reset
struct _ast8131; // CXXMethodDecl SetVerbose
struct _ast8132; // ParmVarDecl value
struct _ast8133; // CXXMethodDecl IsVerbose
struct _ast8134; // CXXMethodDecl SetCaptureMessage
struct _ast8135; // ParmVarDecl value
struct _ast8136; // CXXMethodDecl JSStackComparableAddress
struct _ast8137; // ParmVarDecl handler
struct _ast8138; // FunctionProtoType void *(v8::TryCatch *)
struct _ast8139; // CXXConstructorDecl TryCatch
struct _ast8140; // ParmVarDecl 
struct _ast8141; // FunctionProtoType void (const v8::TryCatch &)
struct _ast8142; // LValueReferenceType const v8::TryCatch &
struct _ast8143; // CXXMethodDecl operator=
struct _ast8144; // ParmVarDecl 
struct _ast8145; // CXXRecordDecl ExtensionConfiguration
struct _ast8146; // CXXRecordDecl ExtensionConfiguration
struct _ast8147; // CXXConstructorDecl ExtensionConfiguration
struct _ast8148; // PointerType v8::ExtensionConfiguration *
struct _ast8149; // RecordType v8::ExtensionConfiguration
struct _ast8150; // CXXConstructorDecl ExtensionConfiguration
struct _ast8151; // ParmVarDecl name_count
struct _ast8152; // ParmVarDecl names
struct _ast8153; // FunctionProtoType void (int, const char **)
struct _ast8154; // DecayedType const char **
struct _ast8155; // CXXMethodDecl begin
struct _ast8156; // PointerType const v8::ExtensionConfiguration *
struct _ast8157; // RecordType const v8::ExtensionConfiguration
struct _ast8158; // CXXMethodDecl end
struct _ast8159; // CXXRecordDecl Context
struct _ast8160; // CXXMethodDecl Global
struct _ast8161; // FunctionProtoType Local<v8::Object> ()
struct _ast8162; // TemplateSpecializationType Local<v8::Object>
struct _ast8163; // PointerType v8::Context *
struct _ast8164; // RecordType v8::Context
struct _ast8165; // CXXMethodDecl DetachGlobal
struct _ast8166; // CXXMethodDecl New
struct _ast8167; // ParmVarDecl isolate
struct _ast8168; // ParmVarDecl extensions
struct _ast8169; // ParmVarDecl global_template
struct _ast8170; // ParmVarDecl global_object
struct _ast8171; // ParmVarDecl internal_fields_deserializer
struct _ast8172; // ParmVarDecl microtask_queue
struct _ast8173; // FunctionProtoType Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _ast8174; // TemplateSpecializationType MaybeLocal<v8::ObjectTemplate>
struct _ast8175; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8176; // TemplateSpecializationType Local<v8::Context>
struct _ast8177; // CXXMethodDecl FromSnapshot
struct _ast8178; // ParmVarDecl isolate
struct _ast8179; // ParmVarDecl context_snapshot_index
struct _ast8180; // ParmVarDecl embedder_fields_deserializer
struct _ast8181; // ParmVarDecl extensions
struct _ast8182; // ParmVarDecl global_object
struct _ast8183; // ParmVarDecl microtask_queue
struct _ast8184; // FunctionProtoType MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _ast8185; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8186; // TemplateSpecializationType MaybeLocal<v8::Context>
struct _ast8187; // CXXMethodDecl NewRemoteContext
struct _ast8188; // ParmVarDecl isolate
struct _ast8189; // ParmVarDecl global_template
struct _ast8190; // ParmVarDecl global_object
struct _ast8191; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ast8192; // TemplateSpecializationType Local<v8::ObjectTemplate>
struct _ast8193; // TemplateSpecializationType MaybeLocal<v8::Value>
struct _ast8194; // TemplateSpecializationType MaybeLocal<v8::Object>
struct _ast8195; // CXXMethodDecl SetSecurityToken
struct _ast8196; // ParmVarDecl token
struct _ast8197; // FunctionProtoType void (Local<v8::Value>)
struct _ast8198; // TemplateSpecializationType Local<v8::Value>
struct _ast8199; // CXXMethodDecl UseDefaultSecurityToken
struct _ast8200; // CXXMethodDecl GetSecurityToken
struct _ast8201; // FunctionProtoType Local<v8::Value> ()
struct _ast8202; // TemplateSpecializationType Local<v8::Value>
struct _ast8203; // CXXMethodDecl Enter
struct _ast8204; // CXXMethodDecl Exit
struct _ast8205; // CXXMethodDecl GetIsolate
struct _ast8206; // EnumDecl EmbedderDataFields
struct _ast8207; // EnumConstantDecl kDebugIdIndex
struct _ast8208; // CXXMethodDecl GetNumberOfEmbedderDataFields
struct _ast8209; // CXXMethodDecl GetEmbedderData
struct _ast8210; // ParmVarDecl index
struct _ast8211; // FunctionProtoType Local<v8::Value> (int)
struct _ast8212; // TemplateSpecializationType Local<v8::Value>
struct _ast8213; // CXXMethodDecl GetExtrasBindingObject
struct _ast8214; // FunctionProtoType Local<v8::Object> ()
struct _ast8215; // TemplateSpecializationType Local<v8::Object>
struct _ast8216; // CXXMethodDecl SetEmbedderData
struct _ast8217; // ParmVarDecl index
struct _ast8218; // ParmVarDecl value
struct _ast8219; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast8220; // TemplateSpecializationType Local<v8::Value>
struct _ast8221; // CXXMethodDecl GetAlignedPointerFromEmbedderData
struct _ast8222; // ParmVarDecl index
struct _ast8223; // CXXMethodDecl SetAlignedPointerInEmbedderData
struct _ast8224; // ParmVarDecl index
struct _ast8225; // ParmVarDecl value
struct _ast8226; // CXXMethodDecl AllowCodeGenerationFromStrings
struct _ast8227; // ParmVarDecl allow
struct _ast8228; // CXXMethodDecl IsCodeGenerationFromStringsAllowed
struct _ast8229; // CXXMethodDecl SetErrorMessageForCodeGenerationFromStrings
struct _ast8230; // ParmVarDecl message
struct _ast8231; // FunctionProtoType void (Local<v8::String>)
struct _ast8232; // TemplateSpecializationType Local<v8::String>
struct _ast8233; // FunctionTemplateDecl GetDataFromSnapshotOnce
struct _ast8234; // TemplateTypeParmDecl T
struct _ast8235; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast8236; // ParmVarDecl index
struct _ast8237; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast8238; // TemplateSpecializationType MaybeLocal<T>
struct _ast8239; // TypedefDecl AbortScriptExecutionCallback
struct _ast8240; // PointerType void (*)(v8::Isolate *, Local<v8::Context>)
struct _ast8241; // ParenType void (v8::Isolate *, Local<v8::Context>)
struct _ast8242; // FunctionProtoType void (v8::Isolate *, Local<v8::Context>)
struct _ast8243; // TemplateSpecializationType Local<v8::Context>
struct _ast8244; // CXXMethodDecl SetAbortScriptExecution
struct _ast8245; // ParmVarDecl callback
struct _ast8246; // FunctionProtoType void (v8::Context::AbortScriptExecutionCallback)
struct _ast8247; // TypedefType v8::Context::AbortScriptExecutionCallback
struct _ast8248; // CXXRecordDecl Scope
struct _ast8249; // CXXRecordDecl Scope
struct _ast8250; // CXXConstructorDecl Scope
struct _ast8251; // ParmVarDecl context
struct _ast8252; // FunctionProtoType void (Local<v8::Context>)
struct _ast8253; // TemplateSpecializationType Local<v8::Context>
struct _ast8254; // PointerType v8::Context::Scope *
struct _ast8255; // RecordType v8::Context::Scope
struct _ast8256; // CXXDestructorDecl ~Scope
struct _ast8257; // CXXRecordDecl BackupIncumbentScope
struct _ast8258; // CXXRecordDecl BackupIncumbentScope
struct _ast8259; // CXXConstructorDecl BackupIncumbentScope
struct _ast8260; // ParmVarDecl backup_incumbent_context
struct _ast8261; // FunctionProtoType void (Local<v8::Context>)
struct _ast8262; // TemplateSpecializationType Local<v8::Context>
struct _ast8263; // PointerType v8::Context::BackupIncumbentScope *
struct _ast8264; // RecordType v8::Context::BackupIncumbentScope
struct _ast8265; // CXXDestructorDecl ~BackupIncumbentScope
struct _ast8266; // FunctionProtoType void ()
struct _ast8267; // CXXMethodDecl JSStackComparableAddress
struct _ast8268; // FunctionProtoType uintptr_t () const
struct _ast8269; // PointerType const v8::Context::BackupIncumbentScope *
struct _ast8270; // RecordType const v8::Context::BackupIncumbentScope
struct _ast8271; // CXXRecordDecl Unlocker
struct _ast8272; // CXXRecordDecl Unlocker
struct _ast8273; // CXXConstructorDecl Unlocker
struct _ast8274; // ParmVarDecl isolate
struct _ast8275; // PointerType v8::Unlocker *
struct _ast8276; // RecordType v8::Unlocker
struct _ast8277; // CXXDestructorDecl ~Unlocker
struct _ast8278; // FunctionProtoType void ()
struct _ast8279; // CXXRecordDecl Locker
struct _ast8280; // CXXRecordDecl Locker
struct _ast8281; // CXXConstructorDecl Locker
struct _ast8282; // ParmVarDecl isolate
struct _ast8283; // PointerType v8::Locker *
struct _ast8284; // RecordType v8::Locker
struct _ast8285; // CXXDestructorDecl ~Locker
struct _ast8286; // FunctionProtoType void ()
struct _ast8287; // CXXMethodDecl IsLocked
struct _ast8288; // ParmVarDecl isolate
struct _ast8289; // CXXMethodDecl IsActive
struct _ast8290; // CXXConstructorDecl Locker
struct _ast8291; // ParmVarDecl 
struct _ast8292; // FunctionProtoType void (const v8::Locker &)
struct _ast8293; // LValueReferenceType const v8::Locker &
struct _ast8294; // RecordType const v8::Locker
struct _ast8295; // CXXMethodDecl operator=
struct _ast8296; // ParmVarDecl 
struct _ast8297; // CXXRecordDecl Unwinder
struct _ast8298; // CXXRecordDecl Unwinder
struct _ast8299; // CXXMethodDecl TryUnwindV8Frames
struct _ast8300; // ParmVarDecl unwind_state
struct _ast8301; // ParmVarDecl register_state
struct _ast8302; // ParmVarDecl stack_base
struct _ast8303; // FunctionProtoType bool (const v8::UnwindState &, v8::RegisterState *, const void *)
struct _ast8304; // LValueReferenceType const v8::UnwindState &
struct _ast8305; // RecordType const v8::UnwindState
struct _ast8306; // CXXMethodDecl PCIsInV8
struct _ast8307; // ParmVarDecl unwind_state
struct _ast8308; // ParmVarDecl pc
struct _ast8309; // FunctionProtoType bool (const v8::UnwindState &, void *)
struct _ast8310; // ParmVarDecl isolate
struct _ast8311; // ParmVarDecl that
struct _ast8312; // ParmVarDecl isolate
struct _ast8313; // ParmVarDecl that
struct _ast8314; // ParmVarDecl isolate
struct _ast8315; // ParmVarDecl that
struct _ast8316; // TemplateTypeParmDecl S
struct _ast8317; // ParmVarDecl isolate
struct _ast8318; // ParmVarDecl handle
struct _ast8319; // ParmVarDecl isolate
struct _ast8320; // ParmVarDecl index
struct _ast8321; // TemplateTypeParmDecl S
struct _ast8322; // ParmVarDecl isolate
struct _ast8323; // ParmVarDecl other
struct _ast8324; // TemplateTypeParmDecl S
struct _ast8325; // ParmVarDecl isolate
struct _ast8326; // ParmVarDecl other
struct _ast8327; // TemplateTypeParmDecl P
struct _ast8328; // ParmVarDecl parameter
struct _ast8329; // ParmVarDecl callback
struct _ast8330; // ParmVarDecl type
struct _ast8331; // TemplateTypeParmDecl P
struct _ast8332; // ParmVarDecl label
struct _ast8333; // ParmVarDecl class_id
struct _ast8334; // ParmVarDecl other
struct _ast8335; // TemplateTypeParmDecl S
struct _ast8336; // ParmVarDecl rhs
struct _ast8337; // TemplateTypeParmDecl S
struct _ast8338; // ParmVarDecl isolate
struct _ast8339; // ParmVarDecl other
struct _ast8340; // ParmVarDecl other
struct _ast8341; // TemplateTypeParmDecl S
struct _ast8342; // ParmVarDecl rhs
struct _ast8343; // ParmVarDecl class_id
struct _ast8344; // ParmVarDecl parameter
struct _ast8345; // ParmVarDecl callback
struct _ast8346; // TemplateTypeParmDecl S
struct _ast8347; // ParmVarDecl handle
struct _ast8348; // TemplateTypeParmDecl S
struct _ast8349; // ParmVarDecl handle
struct _ast8350; // TemplateTypeParmDecl S
struct _ast8351; // ParmVarDecl handle
struct _ast8352; // ParmVarDecl i
struct _ast8353; // ParmVarDecl i
struct _ast8354; // ParmVarDecl i
struct _ast8355; // ParmVarDecl value
struct _ast8356; // TemplateTypeParmDecl S
struct _ast8357; // ParmVarDecl whatever
struct _ast8358; // ParmVarDecl implicit_args
struct _ast8359; // ParmVarDecl values
struct _ast8360; // ParmVarDecl length
struct _ast8361; // ParmVarDecl i
struct _ast8362; // ParmVarDecl resource_name
struct _ast8363; // ParmVarDecl resource_line_offset
struct _ast8364; // ParmVarDecl resource_column_offset
struct _ast8365; // ParmVarDecl resource_is_shared_cross_origin
struct _ast8366; // ParmVarDecl script_id
struct _ast8367; // ParmVarDecl source_map_url
struct _ast8368; // ParmVarDecl resource_is_opaque
struct _ast8369; // ParmVarDecl is_wasm
struct _ast8370; // ParmVarDecl is_module
struct _ast8371; // ParmVarDecl host_defined_options
struct _ast8372; // ParmVarDecl string
struct _ast8373; // ParmVarDecl origin
struct _ast8374; // ParmVarDecl data
struct _ast8375; // ParmVarDecl string
struct _ast8376; // ParmVarDecl data
struct _ast8377; // ParmVarDecl isolate
struct _ast8378; // ParmVarDecl value
struct _ast8379; // ParmVarDecl isolate
struct _ast8380; // ParmVarDecl name
struct _ast8381; // ParmVarDecl value
struct _ast8382; // ParmVarDecl data
struct _ast8383; // ParmVarDecl data
struct _ast8384; // ParmVarDecl data
struct _ast8385; // ParmVarDecl data
struct _ast8386; // ParmVarDecl index
struct _ast8387; // ParmVarDecl index
struct _ast8388; // ParmVarDecl value
struct _ast8389; // ParmVarDecl isolate
struct _ast8390; // ParmVarDecl encoding_out
struct _ast8391; // TemplateTypeParmDecl T
struct _ast8392; // ParmVarDecl value
struct _ast8393; // ParmVarDecl value
struct _ast8394; // ParmVarDecl value
struct _ast8395; // ParmVarDecl value
struct _ast8396; // ParmVarDecl data
struct _ast8397; // ParmVarDecl value
struct _ast8398; // ParmVarDecl value
struct _ast8399; // ParmVarDecl value
struct _ast8400; // ParmVarDecl value
struct _ast8401; // ParmVarDecl value
struct _ast8402; // ParmVarDecl value
struct _ast8403; // ParmVarDecl value
struct _ast8404; // ParmVarDecl value
struct _ast8405; // ParmVarDecl value
struct _ast8406; // ParmVarDecl value
struct _ast8407; // ParmVarDecl value
struct _ast8408; // ParmVarDecl value
struct _ast8409; // ParmVarDecl value
struct _ast8410; // ParmVarDecl value
struct _ast8411; // ParmVarDecl value
struct _ast8412; // ParmVarDecl value
struct _ast8413; // ParmVarDecl value
struct _ast8414; // ParmVarDecl value
struct _ast8415; // ParmVarDecl value
struct _ast8416; // ParmVarDecl value
struct _ast8417; // ParmVarDecl value
struct _ast8418; // ParmVarDecl value
struct _ast8419; // ParmVarDecl value
struct _ast8420; // ParmVarDecl value
struct _ast8421; // ParmVarDecl value
struct _ast8422; // ParmVarDecl value
struct _ast8423; // ParmVarDecl value
struct _ast8424; // ParmVarDecl value
struct _ast8425; // ParmVarDecl value
struct _ast8426; // ParmVarDecl value
struct _ast8427; // ParmVarDecl value
struct _ast8428; // ParmVarDecl value
struct _ast8429; // ParmVarDecl value
struct _ast8430; // ParmVarDecl value
struct _ast8431; // ParmVarDecl value
struct _ast8432; // ParmVarDecl value
struct _ast8433; // ParmVarDecl value
struct _ast8434; // ParmVarDecl value
struct _ast8435; // ParmVarDecl isolate
struct _ast8436; // ParmVarDecl isolate
struct _ast8437; // ParmVarDecl isolate
struct _ast8438; // ParmVarDecl isolate
struct _ast8439; // ParmVarDecl slot
struct _ast8440; // ParmVarDecl data
struct _ast8441; // ParmVarDecl slot
struct _ast8442; // TemplateTypeParmDecl T
struct _ast8443; // ParmVarDecl index
struct _ast8444; // ParmVarDecl change_in_bytes
struct _ast8445; // ParmVarDecl index
struct _ast8446; // ParmVarDecl index
struct _ast8447; // TemplateTypeParmDecl T
struct _ast8448; // ParmVarDecl index
struct _ast8449; // TemplateTypeParmDecl T
struct _ast8450; // ParmVarDecl context
struct _ast8451; // ParmVarDecl object
struct _ast8452; // TemplateTypeParmDecl T
struct _ast8453; // ParmVarDecl object

struct _ast62: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast65>> {}; // CXXConstructorDecl Local
struct _ast63: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast64: VoidType {}; // BuiltinType void
struct _ast65: PointerType<_ast66> {}; // PointerType v8::Local<v8::Primitive> *
struct _ast66: StructOrClassRecordType<RecordType<_ast61>> {}; // RecordType v8::Local<v8::Primitive>
struct _ast69: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast71>, Pack<_ast70>>>, _ast65>> {}; // CXXConstructorDecl Local
struct _ast71: FunctionProtoType<_ast64, Pack<_ast72>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast73: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast75>, Pack<_ast74>>>, _ast65>> {}; // CXXConstructorDecl Local
struct _ast75: FunctionProtoType<_ast64, Pack<_ast76>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Primitive>)
struct _ast77: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast80> {}; // CXXMethodDecl IsEmpty
struct _ast78: FunctionProtoType<_ast79, Pack<>, ConstQualifiedType> {}; // FunctionProtoType bool () const
struct _ast79: BoolType {}; // BuiltinType bool
struct _ast80: PointerType<_ast81> {}; // PointerType const v8::Local<v8::Primitive> *
struct _ast81: ConstQualifiedType<_ast66> {}; // RecordType const v8::Local<v8::Primitive>
struct _ast82: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast65> {}; // CXXMethodDecl Clear
struct _ast83: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast84>, Pack<>>>, _ast80> {}; // CXXMethodDecl operator->
struct _ast84: FunctionProtoType<_ast85, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Primitive *() const
struct _ast85: PointerType<_ast86> {}; // PointerType v8::Primitive *
struct _ast87: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast84>, Pack<>>>, _ast80> {}; // CXXMethodDecl operator*
struct _ast90: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast92>, Pack<_ast91>>>, _ast80> {}; // CXXMethodDecl operator==
struct _ast92: FunctionProtoType<_ast79, Pack<_ast93>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast93: LValueReferenceType<ReferenceType<_ast94>> {}; // LValueReferenceType const Local<S> &
struct _ast94: ConstQualifiedType<_ast95> {}; // TemplateSpecializationType const Local<S>
struct _ast98: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast100>, Pack<_ast99>>>, _ast80> {}; // CXXMethodDecl operator==
struct _ast100: FunctionProtoType<_ast79, Pack<_ast101>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast101: LValueReferenceType<ReferenceType<_ast102>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast102: ConstQualifiedType<_ast103> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast106: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast108>, Pack<_ast107>>>, _ast80> {}; // CXXMethodDecl operator!=
struct _ast108: FunctionProtoType<_ast79, Pack<_ast109>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast109: LValueReferenceType<ReferenceType<_ast110>> {}; // LValueReferenceType const Local<S> &
struct _ast110: ConstQualifiedType<_ast111> {}; // TemplateSpecializationType const Local<S>
struct _ast114: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast116>, Pack<_ast115>>>, _ast80> {}; // CXXMethodDecl operator!=
struct _ast116: FunctionProtoType<_ast79, Pack<_ast117>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast117: LValueReferenceType<ReferenceType<_ast118>> {}; // LValueReferenceType const Persistent<S> &
struct _ast118: ConstQualifiedType<_ast119> {}; // TemplateSpecializationType const Persistent<S>
struct _ast122: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast124>, Pack<_ast123>>> {}; // CXXMethodDecl Cast
struct _ast124: FunctionProtoType<_ast126, Pack<_ast125>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (Local<S>)
struct _ast129: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast130>, Pack<>>>, _ast80> {}; // CXXMethodDecl As
struct _ast130: FunctionProtoType<_ast131, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast132: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast135>, Pack<_ast133, _ast134>>> {}; // CXXMethodDecl New
struct _ast135: FunctionProtoType<_ast139, Pack<_ast136, _ast138>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
struct _ast136: PointerType<_ast137> {}; // PointerType v8::Isolate *
struct _ast137: StructOrClassRecordType<RecordType<_ast4>> {}; // RecordType v8::Isolate
struct _ast140: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast143>, Pack<_ast141, _ast142>>> {}; // CXXMethodDecl New
struct _ast143: FunctionProtoType<_ast147, Pack<_ast136, _ast144>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
struct _ast144: LValueReferenceType<ReferenceType<_ast145>> {}; // LValueReferenceType const PersistentBase<v8::Primitive> &
struct _ast145: ConstQualifiedType<_ast146> {}; // TemplateSpecializationType const PersistentBase<v8::Primitive>
struct _ast148: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast151>, Pack<_ast149, _ast150>>> {}; // CXXMethodDecl New
struct _ast151: FunctionProtoType<_ast155, Pack<_ast136, _ast152>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
struct _ast152: LValueReferenceType<ReferenceType<_ast153>> {}; // LValueReferenceType const TracedGlobal<v8::Primitive> &
struct _ast153: ConstQualifiedType<_ast154> {}; // TemplateSpecializationType const TracedGlobal<v8::Primitive>
struct _ast156: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast158>, Pack<_ast157>>>, _ast65>> {}; // CXXConstructorDecl Local
struct _ast158: FunctionProtoType<_ast64, Pack<_ast159>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Primitive> &)
struct _ast159: LValueReferenceType<ReferenceType<_ast81>> {}; // LValueReferenceType const v8::Local<v8::Primitive> &
struct _ast160: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast162>, Pack<_ast161>>>, _ast65>> {}; // CXXConstructorDecl Local
struct _ast162: FunctionProtoType<_ast64, Pack<_ast163>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Primitive> &&) noexcept
struct _ast163: RValueReferenceType<ReferenceType<_ast66>> {}; // RValueReferenceType v8::Local<v8::Primitive> &&
struct _ast164: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast65>> {}; // CXXDestructorDecl ~Local
struct _ast165: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void () noexcept
struct _ast167: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast168>> {}; // CXXConstructorDecl Local
struct _ast168: PointerType<_ast169> {}; // PointerType v8::Local<v8::Boolean> *
struct _ast169: StructOrClassRecordType<RecordType<_ast166>> {}; // RecordType v8::Local<v8::Boolean>
struct _ast172: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast174>, Pack<_ast173>>>, _ast168>> {}; // CXXConstructorDecl Local
struct _ast174: FunctionProtoType<_ast64, Pack<_ast175>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast176: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast178>, Pack<_ast177>>>, _ast168>> {}; // CXXConstructorDecl Local
struct _ast178: FunctionProtoType<_ast64, Pack<_ast179>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Boolean>)
struct _ast180: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast181> {}; // CXXMethodDecl IsEmpty
struct _ast181: PointerType<_ast182> {}; // PointerType const v8::Local<v8::Boolean> *
struct _ast182: ConstQualifiedType<_ast169> {}; // RecordType const v8::Local<v8::Boolean>
struct _ast183: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast168> {}; // CXXMethodDecl Clear
struct _ast184: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast185>, Pack<>>>, _ast181> {}; // CXXMethodDecl operator->
struct _ast185: FunctionProtoType<_ast186, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Boolean *() const
struct _ast186: PointerType<_ast187> {}; // PointerType v8::Boolean *
struct _ast188: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast185>, Pack<>>>, _ast181> {}; // CXXMethodDecl operator*
struct _ast191: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast193>, Pack<_ast192>>>, _ast181> {}; // CXXMethodDecl operator==
struct _ast193: FunctionProtoType<_ast79, Pack<_ast194>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast194: LValueReferenceType<ReferenceType<_ast195>> {}; // LValueReferenceType const Local<S> &
struct _ast195: ConstQualifiedType<_ast196> {}; // TemplateSpecializationType const Local<S>
struct _ast199: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast201>, Pack<_ast200>>>, _ast181> {}; // CXXMethodDecl operator==
struct _ast201: FunctionProtoType<_ast79, Pack<_ast202>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast202: LValueReferenceType<ReferenceType<_ast203>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast203: ConstQualifiedType<_ast204> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast207: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast209>, Pack<_ast208>>>, _ast181> {}; // CXXMethodDecl operator!=
struct _ast209: FunctionProtoType<_ast79, Pack<_ast210>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast210: LValueReferenceType<ReferenceType<_ast211>> {}; // LValueReferenceType const Local<S> &
struct _ast211: ConstQualifiedType<_ast212> {}; // TemplateSpecializationType const Local<S>
struct _ast215: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast217>, Pack<_ast216>>>, _ast181> {}; // CXXMethodDecl operator!=
struct _ast217: FunctionProtoType<_ast79, Pack<_ast218>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast218: LValueReferenceType<ReferenceType<_ast219>> {}; // LValueReferenceType const Persistent<S> &
struct _ast219: ConstQualifiedType<_ast220> {}; // TemplateSpecializationType const Persistent<S>
struct _ast223: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast225>, Pack<_ast224>>> {}; // CXXMethodDecl Cast
struct _ast225: FunctionProtoType<_ast227, Pack<_ast226>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (Local<S>)
struct _ast230: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast231>, Pack<>>>, _ast181> {}; // CXXMethodDecl As
struct _ast231: FunctionProtoType<_ast232, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast233: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast236>, Pack<_ast234, _ast235>>> {}; // CXXMethodDecl New
struct _ast236: FunctionProtoType<_ast238, Pack<_ast136, _ast237>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _ast239: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast242>, Pack<_ast240, _ast241>>> {}; // CXXMethodDecl New
struct _ast242: FunctionProtoType<_ast246, Pack<_ast136, _ast243>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
struct _ast243: LValueReferenceType<ReferenceType<_ast244>> {}; // LValueReferenceType const PersistentBase<v8::Boolean> &
struct _ast244: ConstQualifiedType<_ast245> {}; // TemplateSpecializationType const PersistentBase<v8::Boolean>
struct _ast247: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast250>, Pack<_ast248, _ast249>>> {}; // CXXMethodDecl New
struct _ast250: FunctionProtoType<_ast254, Pack<_ast136, _ast251>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
struct _ast251: LValueReferenceType<ReferenceType<_ast252>> {}; // LValueReferenceType const TracedGlobal<v8::Boolean> &
struct _ast252: ConstQualifiedType<_ast253> {}; // TemplateSpecializationType const TracedGlobal<v8::Boolean>
struct _ast255: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast257>, Pack<_ast256>>>, _ast168>> {}; // CXXConstructorDecl Local
struct _ast257: FunctionProtoType<_ast64, Pack<_ast258>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Boolean> &)
struct _ast258: LValueReferenceType<ReferenceType<_ast182>> {}; // LValueReferenceType const v8::Local<v8::Boolean> &
struct _ast259: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast261>, Pack<_ast260>>>, _ast168>> {}; // CXXConstructorDecl Local
struct _ast261: FunctionProtoType<_ast64, Pack<_ast262>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Boolean> &&) noexcept
struct _ast262: RValueReferenceType<ReferenceType<_ast169>> {}; // RValueReferenceType v8::Local<v8::Boolean> &&
struct _ast263: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast168>> {}; // CXXDestructorDecl ~Local
struct _ast265: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast266>> {}; // CXXConstructorDecl Local
struct _ast266: PointerType<_ast267> {}; // PointerType v8::Local<v8::Value> *
struct _ast267: StructOrClassRecordType<RecordType<_ast264>> {}; // RecordType v8::Local<v8::Value>
struct _ast270: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast272>, Pack<_ast271>>>, _ast266>> {}; // CXXConstructorDecl Local
struct _ast272: FunctionProtoType<_ast64, Pack<_ast273>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast274: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast276>, Pack<_ast275>>>, _ast266>> {}; // CXXConstructorDecl Local
struct _ast276: FunctionProtoType<_ast64, Pack<_ast277>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Value>)
struct _ast278: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast279> {}; // CXXMethodDecl IsEmpty
struct _ast279: PointerType<_ast280> {}; // PointerType const v8::Local<v8::Value> *
struct _ast280: ConstQualifiedType<_ast267> {}; // RecordType const v8::Local<v8::Value>
struct _ast281: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast266> {}; // CXXMethodDecl Clear
struct _ast282: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast283>, Pack<>>>, _ast279> {}; // CXXMethodDecl operator->
struct _ast283: FunctionProtoType<_ast284, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Value *() const
struct _ast284: PointerType<_ast285> {}; // PointerType v8::Value *
struct _ast286: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast283>, Pack<>>>, _ast279> {}; // CXXMethodDecl operator*
struct _ast289: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast291>, Pack<_ast290>>>, _ast279> {}; // CXXMethodDecl operator==
struct _ast291: FunctionProtoType<_ast79, Pack<_ast292>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast292: LValueReferenceType<ReferenceType<_ast293>> {}; // LValueReferenceType const Local<S> &
struct _ast293: ConstQualifiedType<_ast294> {}; // TemplateSpecializationType const Local<S>
struct _ast297: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast299>, Pack<_ast298>>>, _ast279> {}; // CXXMethodDecl operator==
struct _ast299: FunctionProtoType<_ast79, Pack<_ast300>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast300: LValueReferenceType<ReferenceType<_ast301>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast301: ConstQualifiedType<_ast302> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast305: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast307>, Pack<_ast306>>>, _ast279> {}; // CXXMethodDecl operator!=
struct _ast307: FunctionProtoType<_ast79, Pack<_ast308>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast308: LValueReferenceType<ReferenceType<_ast309>> {}; // LValueReferenceType const Local<S> &
struct _ast309: ConstQualifiedType<_ast310> {}; // TemplateSpecializationType const Local<S>
struct _ast313: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast315>, Pack<_ast314>>>, _ast279> {}; // CXXMethodDecl operator!=
struct _ast315: FunctionProtoType<_ast79, Pack<_ast316>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast316: LValueReferenceType<ReferenceType<_ast317>> {}; // LValueReferenceType const Persistent<S> &
struct _ast317: ConstQualifiedType<_ast318> {}; // TemplateSpecializationType const Persistent<S>
struct _ast321: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast323>, Pack<_ast322>>> {}; // CXXMethodDecl Cast
struct _ast323: FunctionProtoType<_ast325, Pack<_ast324>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<S>)
struct _ast328: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast329>, Pack<>>>, _ast279> {}; // CXXMethodDecl As
struct _ast329: FunctionProtoType<_ast330, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast331: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast334>, Pack<_ast332, _ast333>>> {}; // CXXMethodDecl New
struct _ast334: FunctionProtoType<_ast336, Pack<_ast136, _ast335>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _ast337: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast340>, Pack<_ast338, _ast339>>> {}; // CXXMethodDecl New
struct _ast340: FunctionProtoType<_ast344, Pack<_ast136, _ast341>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
struct _ast341: LValueReferenceType<ReferenceType<_ast342>> {}; // LValueReferenceType const PersistentBase<v8::Value> &
struct _ast342: ConstQualifiedType<_ast343> {}; // TemplateSpecializationType const PersistentBase<v8::Value>
struct _ast345: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast348>, Pack<_ast346, _ast347>>> {}; // CXXMethodDecl New
struct _ast348: FunctionProtoType<_ast352, Pack<_ast136, _ast349>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
struct _ast349: LValueReferenceType<ReferenceType<_ast350>> {}; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast350: ConstQualifiedType<_ast351> {}; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast353: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast355>, Pack<_ast354>>>, _ast266>> {}; // CXXConstructorDecl Local
struct _ast355: FunctionProtoType<_ast64, Pack<_ast356>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Value> &) noexcept
struct _ast356: LValueReferenceType<ReferenceType<_ast280>> {}; // LValueReferenceType const v8::Local<v8::Value> &
struct _ast357: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast359>, Pack<_ast358>>>, _ast266>> {}; // CXXConstructorDecl Local
struct _ast359: FunctionProtoType<_ast64, Pack<_ast360>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Value> &&) noexcept
struct _ast360: RValueReferenceType<ReferenceType<_ast267>> {}; // RValueReferenceType v8::Local<v8::Value> &&
struct _ast361: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast266>> {}; // CXXDestructorDecl ~Local
struct _ast362: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast364>, Pack<_ast363>>>, _ast266> {}; // CXXMethodDecl operator=
struct _ast364: FunctionProtoType<_ast365, Pack<_ast356>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _ast365: LValueReferenceType<ReferenceType<_ast267>> {}; // LValueReferenceType v8::Local<v8::Value> &
struct _ast366: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast368>, Pack<_ast367>>>, _ast266> {}; // CXXMethodDecl operator=
struct _ast368: FunctionProtoType<_ast365, Pack<_ast360>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _ast370: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast371>> {}; // CXXConstructorDecl Local
struct _ast371: PointerType<_ast372> {}; // PointerType v8::Local<v8::PrimitiveArray> *
struct _ast372: StructOrClassRecordType<RecordType<_ast369>> {}; // RecordType v8::Local<v8::PrimitiveArray>
struct _ast375: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast377>, Pack<_ast376>>>, _ast371>> {}; // CXXConstructorDecl Local
struct _ast377: FunctionProtoType<_ast64, Pack<_ast378>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast379: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast381>, Pack<_ast380>>>, _ast371>> {}; // CXXConstructorDecl Local
struct _ast381: FunctionProtoType<_ast64, Pack<_ast382>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::PrimitiveArray>)
struct _ast383: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast384> {}; // CXXMethodDecl IsEmpty
struct _ast384: PointerType<_ast385> {}; // PointerType const v8::Local<v8::PrimitiveArray> *
struct _ast385: ConstQualifiedType<_ast372> {}; // RecordType const v8::Local<v8::PrimitiveArray>
struct _ast386: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast371> {}; // CXXMethodDecl Clear
struct _ast387: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast388>, Pack<>>>, _ast384> {}; // CXXMethodDecl operator->
struct _ast388: FunctionProtoType<_ast389, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::PrimitiveArray *() const
struct _ast389: PointerType<_ast390> {}; // PointerType v8::PrimitiveArray *
struct _ast391: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast388>, Pack<>>>, _ast384> {}; // CXXMethodDecl operator*
struct _ast394: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast396>, Pack<_ast395>>>, _ast384> {}; // CXXMethodDecl operator==
struct _ast396: FunctionProtoType<_ast79, Pack<_ast397>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast397: LValueReferenceType<ReferenceType<_ast398>> {}; // LValueReferenceType const Local<S> &
struct _ast398: ConstQualifiedType<_ast399> {}; // TemplateSpecializationType const Local<S>
struct _ast402: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast404>, Pack<_ast403>>>, _ast384> {}; // CXXMethodDecl operator==
struct _ast404: FunctionProtoType<_ast79, Pack<_ast405>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast405: LValueReferenceType<ReferenceType<_ast406>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast406: ConstQualifiedType<_ast407> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast410: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast412>, Pack<_ast411>>>, _ast384> {}; // CXXMethodDecl operator!=
struct _ast412: FunctionProtoType<_ast79, Pack<_ast413>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast413: LValueReferenceType<ReferenceType<_ast414>> {}; // LValueReferenceType const Local<S> &
struct _ast414: ConstQualifiedType<_ast415> {}; // TemplateSpecializationType const Local<S>
struct _ast418: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast420>, Pack<_ast419>>>, _ast384> {}; // CXXMethodDecl operator!=
struct _ast420: FunctionProtoType<_ast79, Pack<_ast421>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast421: LValueReferenceType<ReferenceType<_ast422>> {}; // LValueReferenceType const Persistent<S> &
struct _ast422: ConstQualifiedType<_ast423> {}; // TemplateSpecializationType const Persistent<S>
struct _ast426: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast428>, Pack<_ast427>>> {}; // CXXMethodDecl Cast
struct _ast428: FunctionProtoType<_ast430, Pack<_ast429>, UnqualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> (Local<S>)
struct _ast433: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast434>, Pack<>>>, _ast384> {}; // CXXMethodDecl As
struct _ast434: FunctionProtoType<_ast435, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast436: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast439>, Pack<_ast437, _ast438>>> {}; // CXXMethodDecl New
struct _ast439: FunctionProtoType<_ast441, Pack<_ast136, _ast440>, UnqualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
struct _ast442: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast445>, Pack<_ast443, _ast444>>> {}; // CXXMethodDecl New
struct _ast445: FunctionProtoType<_ast449, Pack<_ast136, _ast446>, UnqualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
struct _ast446: LValueReferenceType<ReferenceType<_ast447>> {}; // LValueReferenceType const PersistentBase<v8::PrimitiveArray> &
struct _ast447: ConstQualifiedType<_ast448> {}; // TemplateSpecializationType const PersistentBase<v8::PrimitiveArray>
struct _ast450: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast453>, Pack<_ast451, _ast452>>> {}; // CXXMethodDecl New
struct _ast453: FunctionProtoType<_ast457, Pack<_ast136, _ast454>, UnqualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
struct _ast454: LValueReferenceType<ReferenceType<_ast455>> {}; // LValueReferenceType const TracedGlobal<v8::PrimitiveArray> &
struct _ast455: ConstQualifiedType<_ast456> {}; // TemplateSpecializationType const TracedGlobal<v8::PrimitiveArray>
struct _ast458: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast460>, Pack<_ast459>>>, _ast371>> {}; // CXXConstructorDecl Local
struct _ast460: FunctionProtoType<_ast64, Pack<_ast461>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _ast461: LValueReferenceType<ReferenceType<_ast385>> {}; // LValueReferenceType const v8::Local<v8::PrimitiveArray> &
struct _ast462: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast464>, Pack<_ast463>>>, _ast371>> {}; // CXXConstructorDecl Local
struct _ast464: FunctionProtoType<_ast64, Pack<_ast465>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _ast465: RValueReferenceType<ReferenceType<_ast372>> {}; // RValueReferenceType v8::Local<v8::PrimitiveArray> &&
struct _ast466: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast371>> {}; // CXXDestructorDecl ~Local
struct _ast467: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast469>, Pack<_ast468>>>, _ast371> {}; // CXXMethodDecl operator=
struct _ast469: FunctionProtoType<_ast470, Pack<_ast461>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
struct _ast470: LValueReferenceType<ReferenceType<_ast372>> {}; // LValueReferenceType v8::Local<v8::PrimitiveArray> &
struct _ast471: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast473>, Pack<_ast472>>>, _ast371> {}; // CXXMethodDecl operator=
struct _ast473: FunctionProtoType<_ast470, Pack<_ast465>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
struct _ast475: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast476>> {}; // CXXConstructorDecl Local
struct _ast476: PointerType<_ast477> {}; // PointerType v8::Local<v8::Integer> *
struct _ast477: StructOrClassRecordType<RecordType<_ast474>> {}; // RecordType v8::Local<v8::Integer>
struct _ast480: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast482>, Pack<_ast481>>>, _ast476>> {}; // CXXConstructorDecl Local
struct _ast482: FunctionProtoType<_ast64, Pack<_ast483>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast484: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast486>, Pack<_ast485>>>, _ast476>> {}; // CXXConstructorDecl Local
struct _ast486: FunctionProtoType<_ast64, Pack<_ast487>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Integer>)
struct _ast488: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast489> {}; // CXXMethodDecl IsEmpty
struct _ast489: PointerType<_ast490> {}; // PointerType const v8::Local<v8::Integer> *
struct _ast490: ConstQualifiedType<_ast477> {}; // RecordType const v8::Local<v8::Integer>
struct _ast491: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast476> {}; // CXXMethodDecl Clear
struct _ast492: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast493>, Pack<>>>, _ast489> {}; // CXXMethodDecl operator->
struct _ast493: FunctionProtoType<_ast494, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Integer *() const
struct _ast494: PointerType<_ast495> {}; // PointerType v8::Integer *
struct _ast496: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast493>, Pack<>>>, _ast489> {}; // CXXMethodDecl operator*
struct _ast499: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast501>, Pack<_ast500>>>, _ast489> {}; // CXXMethodDecl operator==
struct _ast501: FunctionProtoType<_ast79, Pack<_ast502>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast502: LValueReferenceType<ReferenceType<_ast503>> {}; // LValueReferenceType const Local<S> &
struct _ast503: ConstQualifiedType<_ast504> {}; // TemplateSpecializationType const Local<S>
struct _ast507: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast509>, Pack<_ast508>>>, _ast489> {}; // CXXMethodDecl operator==
struct _ast509: FunctionProtoType<_ast79, Pack<_ast510>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast510: LValueReferenceType<ReferenceType<_ast511>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast511: ConstQualifiedType<_ast512> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast515: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast517>, Pack<_ast516>>>, _ast489> {}; // CXXMethodDecl operator!=
struct _ast517: FunctionProtoType<_ast79, Pack<_ast518>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast518: LValueReferenceType<ReferenceType<_ast519>> {}; // LValueReferenceType const Local<S> &
struct _ast519: ConstQualifiedType<_ast520> {}; // TemplateSpecializationType const Local<S>
struct _ast523: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast525>, Pack<_ast524>>>, _ast489> {}; // CXXMethodDecl operator!=
struct _ast525: FunctionProtoType<_ast79, Pack<_ast526>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast526: LValueReferenceType<ReferenceType<_ast527>> {}; // LValueReferenceType const Persistent<S> &
struct _ast527: ConstQualifiedType<_ast528> {}; // TemplateSpecializationType const Persistent<S>
struct _ast531: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast533>, Pack<_ast532>>> {}; // CXXMethodDecl Cast
struct _ast533: FunctionProtoType<_ast535, Pack<_ast534>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Integer> (Local<S>)
struct _ast538: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast539>, Pack<>>>, _ast489> {}; // CXXMethodDecl As
struct _ast539: FunctionProtoType<_ast540, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast541: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast544>, Pack<_ast542, _ast543>>> {}; // CXXMethodDecl New
struct _ast544: FunctionProtoType<_ast546, Pack<_ast136, _ast545>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _ast547: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast550>, Pack<_ast548, _ast549>>> {}; // CXXMethodDecl New
struct _ast550: FunctionProtoType<_ast554, Pack<_ast136, _ast551>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
struct _ast551: LValueReferenceType<ReferenceType<_ast552>> {}; // LValueReferenceType const PersistentBase<v8::Integer> &
struct _ast552: ConstQualifiedType<_ast553> {}; // TemplateSpecializationType const PersistentBase<v8::Integer>
struct _ast555: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast558>, Pack<_ast556, _ast557>>> {}; // CXXMethodDecl New
struct _ast558: FunctionProtoType<_ast562, Pack<_ast136, _ast559>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
struct _ast559: LValueReferenceType<ReferenceType<_ast560>> {}; // LValueReferenceType const TracedGlobal<v8::Integer> &
struct _ast560: ConstQualifiedType<_ast561> {}; // TemplateSpecializationType const TracedGlobal<v8::Integer>
struct _ast563: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast565>, Pack<_ast564>>>, _ast476>> {}; // CXXConstructorDecl Local
struct _ast565: FunctionProtoType<_ast64, Pack<_ast566>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Integer> &) noexcept
struct _ast566: LValueReferenceType<ReferenceType<_ast490>> {}; // LValueReferenceType const v8::Local<v8::Integer> &
struct _ast567: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast569>, Pack<_ast568>>>, _ast476>> {}; // CXXConstructorDecl Local
struct _ast569: FunctionProtoType<_ast64, Pack<_ast570>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Integer> &&) noexcept
struct _ast570: RValueReferenceType<ReferenceType<_ast477>> {}; // RValueReferenceType v8::Local<v8::Integer> &&
struct _ast571: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast476>> {}; // CXXDestructorDecl ~Local
struct _ast572: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast574>, Pack<_ast573>>>, _ast476> {}; // CXXMethodDecl operator=
struct _ast574: FunctionProtoType<_ast575, Pack<_ast566>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _ast575: LValueReferenceType<ReferenceType<_ast477>> {}; // LValueReferenceType v8::Local<v8::Integer> &
struct _ast576: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast578>, Pack<_ast577>>>, _ast476> {}; // CXXMethodDecl operator=
struct _ast578: FunctionProtoType<_ast575, Pack<_ast570>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _ast581: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast582>> {}; // CXXConstructorDecl Local
struct _ast582: PointerType<_ast583> {}; // PointerType v8::Local<v8::String> *
struct _ast583: StructOrClassRecordType<RecordType<_ast580>> {}; // RecordType v8::Local<v8::String>
struct _ast586: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast588>, Pack<_ast587>>>, _ast582>> {}; // CXXConstructorDecl Local
struct _ast588: FunctionProtoType<_ast64, Pack<_ast589>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast590: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast592>, Pack<_ast591>>>, _ast582>> {}; // CXXConstructorDecl Local
struct _ast592: FunctionProtoType<_ast64, Pack<_ast593>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast594: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast595> {}; // CXXMethodDecl IsEmpty
struct _ast595: PointerType<_ast596> {}; // PointerType const v8::Local<v8::String> *
struct _ast596: ConstQualifiedType<_ast583> {}; // RecordType const v8::Local<v8::String>
struct _ast597: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast582> {}; // CXXMethodDecl Clear
struct _ast598: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast599>, Pack<>>>, _ast595> {}; // CXXMethodDecl operator->
struct _ast599: FunctionProtoType<_ast600, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::String *() const
struct _ast600: PointerType<_ast601> {}; // PointerType v8::String *
struct _ast602: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast599>, Pack<>>>, _ast595> {}; // CXXMethodDecl operator*
struct _ast605: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast607>, Pack<_ast606>>>, _ast595> {}; // CXXMethodDecl operator==
struct _ast607: FunctionProtoType<_ast79, Pack<_ast608>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast608: LValueReferenceType<ReferenceType<_ast609>> {}; // LValueReferenceType const Local<S> &
struct _ast609: ConstQualifiedType<_ast610> {}; // TemplateSpecializationType const Local<S>
struct _ast613: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast615>, Pack<_ast614>>>, _ast595> {}; // CXXMethodDecl operator==
struct _ast615: FunctionProtoType<_ast79, Pack<_ast616>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast616: LValueReferenceType<ReferenceType<_ast617>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast617: ConstQualifiedType<_ast618> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast621: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast623>, Pack<_ast622>>>, _ast595> {}; // CXXMethodDecl operator!=
struct _ast623: FunctionProtoType<_ast79, Pack<_ast624>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast624: LValueReferenceType<ReferenceType<_ast625>> {}; // LValueReferenceType const Local<S> &
struct _ast625: ConstQualifiedType<_ast626> {}; // TemplateSpecializationType const Local<S>
struct _ast629: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast631>, Pack<_ast630>>>, _ast595> {}; // CXXMethodDecl operator!=
struct _ast631: FunctionProtoType<_ast79, Pack<_ast632>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast632: LValueReferenceType<ReferenceType<_ast633>> {}; // LValueReferenceType const Persistent<S> &
struct _ast633: ConstQualifiedType<_ast634> {}; // TemplateSpecializationType const Persistent<S>
struct _ast637: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast639>, Pack<_ast638>>> {}; // CXXMethodDecl Cast
struct _ast639: FunctionProtoType<_ast641, Pack<_ast640>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (Local<S>)
struct _ast644: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast645>, Pack<>>>, _ast595> {}; // CXXMethodDecl As
struct _ast645: FunctionProtoType<_ast646, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast647: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast650>, Pack<_ast648, _ast649>>> {}; // CXXMethodDecl New
struct _ast650: FunctionProtoType<_ast652, Pack<_ast136, _ast651>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _ast653: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast656>, Pack<_ast654, _ast655>>> {}; // CXXMethodDecl New
struct _ast656: FunctionProtoType<_ast660, Pack<_ast136, _ast657>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
struct _ast657: LValueReferenceType<ReferenceType<_ast658>> {}; // LValueReferenceType const PersistentBase<v8::String> &
struct _ast658: ConstQualifiedType<_ast659> {}; // TemplateSpecializationType const PersistentBase<v8::String>
struct _ast661: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast664>, Pack<_ast662, _ast663>>> {}; // CXXMethodDecl New
struct _ast664: FunctionProtoType<_ast668, Pack<_ast136, _ast665>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
struct _ast665: LValueReferenceType<ReferenceType<_ast666>> {}; // LValueReferenceType const TracedGlobal<v8::String> &
struct _ast666: ConstQualifiedType<_ast667> {}; // TemplateSpecializationType const TracedGlobal<v8::String>
struct _ast669: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast671>, Pack<_ast670>>>, _ast582>> {}; // CXXConstructorDecl Local
struct _ast671: FunctionProtoType<_ast64, Pack<_ast672>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::String> &) noexcept
struct _ast672: LValueReferenceType<ReferenceType<_ast596>> {}; // LValueReferenceType const v8::Local<v8::String> &
struct _ast673: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast675>, Pack<_ast674>>>, _ast582>> {}; // CXXConstructorDecl Local
struct _ast675: FunctionProtoType<_ast64, Pack<_ast676>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::String> &&) noexcept
struct _ast676: RValueReferenceType<ReferenceType<_ast583>> {}; // RValueReferenceType v8::Local<v8::String> &&
struct _ast677: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast679>, Pack<_ast678>>>, _ast582> {}; // CXXMethodDecl operator=
struct _ast679: FunctionProtoType<_ast680, Pack<_ast672>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _ast680: LValueReferenceType<ReferenceType<_ast583>> {}; // LValueReferenceType v8::Local<v8::String> &
struct _ast681: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast683>, Pack<_ast682>>>, _ast582> {}; // CXXMethodDecl operator=
struct _ast683: FunctionProtoType<_ast680, Pack<_ast676>, UnqualifiedType> {}; // FunctionProtoType v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _ast684: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast582>> {}; // CXXDestructorDecl ~Local
struct _ast686: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast687>> {}; // CXXConstructorDecl Local
struct _ast687: PointerType<_ast688> {}; // PointerType v8::Local<v8::Context> *
struct _ast688: StructOrClassRecordType<RecordType<_ast685>> {}; // RecordType v8::Local<v8::Context>
struct _ast691: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast693>, Pack<_ast692>>>, _ast687>> {}; // CXXConstructorDecl Local
struct _ast693: FunctionProtoType<_ast64, Pack<_ast694>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast695: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast697>, Pack<_ast696>>>, _ast687>> {}; // CXXConstructorDecl Local
struct _ast697: FunctionProtoType<_ast64, Pack<_ast698>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Context>)
struct _ast699: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast700> {}; // CXXMethodDecl IsEmpty
struct _ast700: PointerType<_ast701> {}; // PointerType const v8::Local<v8::Context> *
struct _ast701: ConstQualifiedType<_ast688> {}; // RecordType const v8::Local<v8::Context>
struct _ast702: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast687> {}; // CXXMethodDecl Clear
struct _ast703: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast704>, Pack<>>>, _ast700> {}; // CXXMethodDecl operator->
struct _ast704: FunctionProtoType<_ast705, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Context *() const
struct _ast705: PointerType<_ast706> {}; // PointerType v8::Context *
struct _ast707: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast704>, Pack<>>>, _ast700> {}; // CXXMethodDecl operator*
struct _ast710: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast712>, Pack<_ast711>>>, _ast700> {}; // CXXMethodDecl operator==
struct _ast712: FunctionProtoType<_ast79, Pack<_ast713>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast713: LValueReferenceType<ReferenceType<_ast714>> {}; // LValueReferenceType const Local<S> &
struct _ast714: ConstQualifiedType<_ast715> {}; // TemplateSpecializationType const Local<S>
struct _ast718: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast720>, Pack<_ast719>>>, _ast700> {}; // CXXMethodDecl operator==
struct _ast720: FunctionProtoType<_ast79, Pack<_ast721>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast721: LValueReferenceType<ReferenceType<_ast722>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast722: ConstQualifiedType<_ast723> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast726: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast728>, Pack<_ast727>>>, _ast700> {}; // CXXMethodDecl operator!=
struct _ast728: FunctionProtoType<_ast79, Pack<_ast729>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast729: LValueReferenceType<ReferenceType<_ast730>> {}; // LValueReferenceType const Local<S> &
struct _ast730: ConstQualifiedType<_ast731> {}; // TemplateSpecializationType const Local<S>
struct _ast734: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast736>, Pack<_ast735>>>, _ast700> {}; // CXXMethodDecl operator!=
struct _ast736: FunctionProtoType<_ast79, Pack<_ast737>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast737: LValueReferenceType<ReferenceType<_ast738>> {}; // LValueReferenceType const Persistent<S> &
struct _ast738: ConstQualifiedType<_ast739> {}; // TemplateSpecializationType const Persistent<S>
struct _ast742: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast744>, Pack<_ast743>>> {}; // CXXMethodDecl Cast
struct _ast744: FunctionProtoType<_ast746, Pack<_ast745>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> (Local<S>)
struct _ast749: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast750>, Pack<>>>, _ast700> {}; // CXXMethodDecl As
struct _ast750: FunctionProtoType<_ast751, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast752: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast755>, Pack<_ast753, _ast754>>> {}; // CXXMethodDecl New
struct _ast755: FunctionProtoType<_ast757, Pack<_ast136, _ast756>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _ast758: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast761>, Pack<_ast759, _ast760>>> {}; // CXXMethodDecl New
struct _ast761: FunctionProtoType<_ast765, Pack<_ast136, _ast762>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
struct _ast762: LValueReferenceType<ReferenceType<_ast763>> {}; // LValueReferenceType const PersistentBase<v8::Context> &
struct _ast763: ConstQualifiedType<_ast764> {}; // TemplateSpecializationType const PersistentBase<v8::Context>
struct _ast766: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast769>, Pack<_ast767, _ast768>>> {}; // CXXMethodDecl New
struct _ast769: FunctionProtoType<_ast773, Pack<_ast136, _ast770>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
struct _ast770: LValueReferenceType<ReferenceType<_ast771>> {}; // LValueReferenceType const TracedGlobal<v8::Context> &
struct _ast771: ConstQualifiedType<_ast772> {}; // TemplateSpecializationType const TracedGlobal<v8::Context>
struct _ast774: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast687>> {}; // CXXDestructorDecl ~Local
struct _ast775: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast777>, Pack<_ast776>>>, _ast687>> {}; // CXXConstructorDecl Local
struct _ast777: FunctionProtoType<_ast64, Pack<_ast778>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Context> &) noexcept
struct _ast778: LValueReferenceType<ReferenceType<_ast701>> {}; // LValueReferenceType const v8::Local<v8::Context> &
struct _ast779: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast781>, Pack<_ast780>>>, _ast687>> {}; // CXXConstructorDecl Local
struct _ast781: FunctionProtoType<_ast64, Pack<_ast782>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Context> &&) noexcept
struct _ast782: RValueReferenceType<ReferenceType<_ast688>> {}; // RValueReferenceType v8::Local<v8::Context> &&
struct _ast786: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast787>> {}; // CXXConstructorDecl Local
struct _ast787: PointerType<_ast788> {}; // PointerType v8::Local<v8::UnboundScript> *
struct _ast788: StructOrClassRecordType<RecordType<_ast785>> {}; // RecordType v8::Local<v8::UnboundScript>
struct _ast791: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast793>, Pack<_ast792>>>, _ast787>> {}; // CXXConstructorDecl Local
struct _ast793: FunctionProtoType<_ast64, Pack<_ast794>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast795: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast796> {}; // CXXMethodDecl IsEmpty
struct _ast796: PointerType<_ast797> {}; // PointerType const v8::Local<v8::UnboundScript> *
struct _ast797: ConstQualifiedType<_ast788> {}; // RecordType const v8::Local<v8::UnboundScript>
struct _ast798: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast787> {}; // CXXMethodDecl Clear
struct _ast799: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast800>, Pack<>>>, _ast796> {}; // CXXMethodDecl operator->
struct _ast800: FunctionProtoType<_ast801, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::UnboundScript *() const
struct _ast801: PointerType<_ast802> {}; // PointerType v8::UnboundScript *
struct _ast803: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast800>, Pack<>>>, _ast796> {}; // CXXMethodDecl operator*
struct _ast806: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast808>, Pack<_ast807>>>, _ast796> {}; // CXXMethodDecl operator==
struct _ast808: FunctionProtoType<_ast79, Pack<_ast809>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast809: LValueReferenceType<ReferenceType<_ast810>> {}; // LValueReferenceType const Local<S> &
struct _ast810: ConstQualifiedType<_ast811> {}; // TemplateSpecializationType const Local<S>
struct _ast814: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast816>, Pack<_ast815>>>, _ast796> {}; // CXXMethodDecl operator==
struct _ast816: FunctionProtoType<_ast79, Pack<_ast817>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast817: LValueReferenceType<ReferenceType<_ast818>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast818: ConstQualifiedType<_ast819> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast822: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast824>, Pack<_ast823>>>, _ast796> {}; // CXXMethodDecl operator!=
struct _ast824: FunctionProtoType<_ast79, Pack<_ast825>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast825: LValueReferenceType<ReferenceType<_ast826>> {}; // LValueReferenceType const Local<S> &
struct _ast826: ConstQualifiedType<_ast827> {}; // TemplateSpecializationType const Local<S>
struct _ast830: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast832>, Pack<_ast831>>>, _ast796> {}; // CXXMethodDecl operator!=
struct _ast832: FunctionProtoType<_ast79, Pack<_ast833>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast833: LValueReferenceType<ReferenceType<_ast834>> {}; // LValueReferenceType const Persistent<S> &
struct _ast834: ConstQualifiedType<_ast835> {}; // TemplateSpecializationType const Persistent<S>
struct _ast838: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast840>, Pack<_ast839>>> {}; // CXXMethodDecl Cast
struct _ast840: FunctionProtoType<_ast842, Pack<_ast841>, UnqualifiedType> {}; // FunctionProtoType Local<v8::UnboundScript> (Local<S>)
struct _ast845: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast846>, Pack<>>>, _ast796> {}; // CXXMethodDecl As
struct _ast846: FunctionProtoType<_ast847, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast848: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast851>, Pack<_ast849, _ast850>>> {}; // CXXMethodDecl New
struct _ast851: FunctionProtoType<_ast853, Pack<_ast136, _ast852>, UnqualifiedType> {}; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
struct _ast854: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast857>, Pack<_ast855, _ast856>>> {}; // CXXMethodDecl New
struct _ast857: FunctionProtoType<_ast861, Pack<_ast136, _ast858>, UnqualifiedType> {}; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
struct _ast858: LValueReferenceType<ReferenceType<_ast859>> {}; // LValueReferenceType const PersistentBase<v8::UnboundScript> &
struct _ast859: ConstQualifiedType<_ast860> {}; // TemplateSpecializationType const PersistentBase<v8::UnboundScript>
struct _ast862: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast865>, Pack<_ast863, _ast864>>> {}; // CXXMethodDecl New
struct _ast865: FunctionProtoType<_ast869, Pack<_ast136, _ast866>, UnqualifiedType> {}; // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
struct _ast866: LValueReferenceType<ReferenceType<_ast867>> {}; // LValueReferenceType const TracedGlobal<v8::UnboundScript> &
struct _ast867: ConstQualifiedType<_ast868> {}; // TemplateSpecializationType const TracedGlobal<v8::UnboundScript>
struct _ast872: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast873>> {}; // CXXConstructorDecl Local
struct _ast873: PointerType<_ast874> {}; // PointerType v8::Local<v8::Function> *
struct _ast874: StructOrClassRecordType<RecordType<_ast871>> {}; // RecordType v8::Local<v8::Function>
struct _ast877: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast879>, Pack<_ast878>>>, _ast873>> {}; // CXXConstructorDecl Local
struct _ast879: FunctionProtoType<_ast64, Pack<_ast880>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast881: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast883>, Pack<_ast882>>>, _ast873>> {}; // CXXConstructorDecl Local
struct _ast883: FunctionProtoType<_ast64, Pack<_ast884>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Function>)
struct _ast885: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast886> {}; // CXXMethodDecl IsEmpty
struct _ast886: PointerType<_ast887> {}; // PointerType const v8::Local<v8::Function> *
struct _ast887: ConstQualifiedType<_ast874> {}; // RecordType const v8::Local<v8::Function>
struct _ast888: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast873> {}; // CXXMethodDecl Clear
struct _ast889: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast890>, Pack<>>>, _ast886> {}; // CXXMethodDecl operator->
struct _ast890: FunctionProtoType<_ast891, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Function *() const
struct _ast891: PointerType<_ast892> {}; // PointerType v8::Function *
struct _ast893: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast890>, Pack<>>>, _ast886> {}; // CXXMethodDecl operator*
struct _ast896: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast898>, Pack<_ast897>>>, _ast886> {}; // CXXMethodDecl operator==
struct _ast898: FunctionProtoType<_ast79, Pack<_ast899>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast899: LValueReferenceType<ReferenceType<_ast900>> {}; // LValueReferenceType const Local<S> &
struct _ast900: ConstQualifiedType<_ast901> {}; // TemplateSpecializationType const Local<S>
struct _ast904: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast906>, Pack<_ast905>>>, _ast886> {}; // CXXMethodDecl operator==
struct _ast906: FunctionProtoType<_ast79, Pack<_ast907>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast907: LValueReferenceType<ReferenceType<_ast908>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast908: ConstQualifiedType<_ast909> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast912: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast914>, Pack<_ast913>>>, _ast886> {}; // CXXMethodDecl operator!=
struct _ast914: FunctionProtoType<_ast79, Pack<_ast915>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast915: LValueReferenceType<ReferenceType<_ast916>> {}; // LValueReferenceType const Local<S> &
struct _ast916: ConstQualifiedType<_ast917> {}; // TemplateSpecializationType const Local<S>
struct _ast920: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast922>, Pack<_ast921>>>, _ast886> {}; // CXXMethodDecl operator!=
struct _ast922: FunctionProtoType<_ast79, Pack<_ast923>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast923: LValueReferenceType<ReferenceType<_ast924>> {}; // LValueReferenceType const Persistent<S> &
struct _ast924: ConstQualifiedType<_ast925> {}; // TemplateSpecializationType const Persistent<S>
struct _ast928: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast930>, Pack<_ast929>>> {}; // CXXMethodDecl Cast
struct _ast930: FunctionProtoType<_ast932, Pack<_ast931>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Function> (Local<S>)
struct _ast935: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast936>, Pack<>>>, _ast886> {}; // CXXMethodDecl As
struct _ast936: FunctionProtoType<_ast937, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast938: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast941>, Pack<_ast939, _ast940>>> {}; // CXXMethodDecl New
struct _ast941: FunctionProtoType<_ast943, Pack<_ast136, _ast942>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _ast944: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast947>, Pack<_ast945, _ast946>>> {}; // CXXMethodDecl New
struct _ast947: FunctionProtoType<_ast951, Pack<_ast136, _ast948>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
struct _ast948: LValueReferenceType<ReferenceType<_ast949>> {}; // LValueReferenceType const PersistentBase<v8::Function> &
struct _ast949: ConstQualifiedType<_ast950> {}; // TemplateSpecializationType const PersistentBase<v8::Function>
struct _ast952: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast955>, Pack<_ast953, _ast954>>> {}; // CXXMethodDecl New
struct _ast955: FunctionProtoType<_ast959, Pack<_ast136, _ast956>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
struct _ast956: LValueReferenceType<ReferenceType<_ast957>> {}; // LValueReferenceType const TracedGlobal<v8::Function> &
struct _ast957: ConstQualifiedType<_ast958> {}; // TemplateSpecializationType const TracedGlobal<v8::Function>
struct _ast960: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast962>, Pack<_ast961>>>, _ast873>> {}; // CXXConstructorDecl Local
struct _ast962: FunctionProtoType<_ast64, Pack<_ast963>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Function> &)
struct _ast963: LValueReferenceType<ReferenceType<_ast887>> {}; // LValueReferenceType const v8::Local<v8::Function> &
struct _ast964: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast966>, Pack<_ast965>>>, _ast873>> {}; // CXXConstructorDecl Local
struct _ast966: FunctionProtoType<_ast64, Pack<_ast967>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Function> &&) noexcept
struct _ast967: RValueReferenceType<ReferenceType<_ast874>> {}; // RValueReferenceType v8::Local<v8::Function> &&
struct _ast968: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast873>> {}; // CXXDestructorDecl ~Local
struct _ast979: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast980>> {}; // CXXConstructorDecl Local
struct _ast980: PointerType<_ast981> {}; // PointerType v8::Local<v8::Name> *
struct _ast981: StructOrClassRecordType<RecordType<_ast978>> {}; // RecordType v8::Local<v8::Name>
struct _ast984: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast986>, Pack<_ast985>>>, _ast980>> {}; // CXXConstructorDecl Local
struct _ast986: FunctionProtoType<_ast64, Pack<_ast987>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast988: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast990>, Pack<_ast989>>>, _ast980>> {}; // CXXConstructorDecl Local
struct _ast990: FunctionProtoType<_ast64, Pack<_ast991>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast992: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast994>, Pack<_ast993>>>, _ast980>> {}; // CXXConstructorDecl Local
struct _ast994: FunctionProtoType<_ast64, Pack<_ast995>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>)
struct _ast996: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast997> {}; // CXXMethodDecl IsEmpty
struct _ast997: PointerType<_ast998> {}; // PointerType const v8::Local<v8::Name> *
struct _ast998: ConstQualifiedType<_ast981> {}; // RecordType const v8::Local<v8::Name>
struct _ast999: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast980> {}; // CXXMethodDecl Clear
struct _ast1000: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast1001>, Pack<>>>, _ast997> {}; // CXXMethodDecl operator->
struct _ast1001: FunctionProtoType<_ast1002, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Name *() const
struct _ast1002: PointerType<_ast1003> {}; // PointerType v8::Name *
struct _ast1004: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast1001>, Pack<>>>, _ast997> {}; // CXXMethodDecl operator*
struct _ast1007: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1009>, Pack<_ast1008>>>, _ast997> {}; // CXXMethodDecl operator==
struct _ast1009: FunctionProtoType<_ast79, Pack<_ast1010>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1010: LValueReferenceType<ReferenceType<_ast1011>> {}; // LValueReferenceType const Local<S> &
struct _ast1011: ConstQualifiedType<_ast1012> {}; // TemplateSpecializationType const Local<S>
struct _ast1015: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1017>, Pack<_ast1016>>>, _ast997> {}; // CXXMethodDecl operator==
struct _ast1017: FunctionProtoType<_ast79, Pack<_ast1018>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1018: LValueReferenceType<ReferenceType<_ast1019>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1019: ConstQualifiedType<_ast1020> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1023: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1025>, Pack<_ast1024>>>, _ast997> {}; // CXXMethodDecl operator!=
struct _ast1025: FunctionProtoType<_ast79, Pack<_ast1026>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1026: LValueReferenceType<ReferenceType<_ast1027>> {}; // LValueReferenceType const Local<S> &
struct _ast1027: ConstQualifiedType<_ast1028> {}; // TemplateSpecializationType const Local<S>
struct _ast1031: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1033>, Pack<_ast1032>>>, _ast997> {}; // CXXMethodDecl operator!=
struct _ast1033: FunctionProtoType<_ast79, Pack<_ast1034>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1034: LValueReferenceType<ReferenceType<_ast1035>> {}; // LValueReferenceType const Persistent<S> &
struct _ast1035: ConstQualifiedType<_ast1036> {}; // TemplateSpecializationType const Persistent<S>
struct _ast1039: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast1041>, Pack<_ast1040>>> {}; // CXXMethodDecl Cast
struct _ast1041: FunctionProtoType<_ast1043, Pack<_ast1042>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Name> (Local<S>)
struct _ast1046: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast1047>, Pack<>>>, _ast997> {}; // CXXMethodDecl As
struct _ast1047: FunctionProtoType<_ast1048, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast1049: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1052>, Pack<_ast1050, _ast1051>>> {}; // CXXMethodDecl New
struct _ast1052: FunctionProtoType<_ast1054, Pack<_ast136, _ast1053>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _ast1055: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1058>, Pack<_ast1056, _ast1057>>> {}; // CXXMethodDecl New
struct _ast1058: FunctionProtoType<_ast1062, Pack<_ast136, _ast1059>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
struct _ast1059: LValueReferenceType<ReferenceType<_ast1060>> {}; // LValueReferenceType const PersistentBase<v8::Name> &
struct _ast1060: ConstQualifiedType<_ast1061> {}; // TemplateSpecializationType const PersistentBase<v8::Name>
struct _ast1063: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1066>, Pack<_ast1064, _ast1065>>> {}; // CXXMethodDecl New
struct _ast1066: FunctionProtoType<_ast1070, Pack<_ast136, _ast1067>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
struct _ast1067: LValueReferenceType<ReferenceType<_ast1068>> {}; // LValueReferenceType const TracedGlobal<v8::Name> &
struct _ast1068: ConstQualifiedType<_ast1069> {}; // TemplateSpecializationType const TracedGlobal<v8::Name>
struct _ast1071: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1073>, Pack<_ast1072>>>, _ast980>> {}; // CXXConstructorDecl Local
struct _ast1073: FunctionProtoType<_ast64, Pack<_ast1074>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Name> &)
struct _ast1074: LValueReferenceType<ReferenceType<_ast998>> {}; // LValueReferenceType const v8::Local<v8::Name> &
struct _ast1075: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1077>, Pack<_ast1076>>>, _ast980>> {}; // CXXConstructorDecl Local
struct _ast1077: FunctionProtoType<_ast64, Pack<_ast1078>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Name> &&) noexcept
struct _ast1078: RValueReferenceType<ReferenceType<_ast981>> {}; // RValueReferenceType v8::Local<v8::Name> &&
struct _ast1079: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast980>> {}; // CXXDestructorDecl ~Local
struct _ast1081: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast1082>> {}; // CXXConstructorDecl Local
struct _ast1082: PointerType<_ast1083> {}; // PointerType v8::Local<v8::FunctionTemplate> *
struct _ast1083: StructOrClassRecordType<RecordType<_ast1080>> {}; // RecordType v8::Local<v8::FunctionTemplate>
struct _ast1086: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1088>, Pack<_ast1087>>>, _ast1082>> {}; // CXXConstructorDecl Local
struct _ast1088: FunctionProtoType<_ast64, Pack<_ast1089>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1090: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1092>, Pack<_ast1091>>>, _ast1082>> {}; // CXXConstructorDecl Local
struct _ast1092: FunctionProtoType<_ast64, Pack<_ast1093>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast1094: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1095> {}; // CXXMethodDecl IsEmpty
struct _ast1095: PointerType<_ast1096> {}; // PointerType const v8::Local<v8::FunctionTemplate> *
struct _ast1096: ConstQualifiedType<_ast1083> {}; // RecordType const v8::Local<v8::FunctionTemplate>
struct _ast1097: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast1082> {}; // CXXMethodDecl Clear
struct _ast1098: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast1099>, Pack<>>>, _ast1095> {}; // CXXMethodDecl operator->
struct _ast1099: FunctionProtoType<_ast1100, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::FunctionTemplate *() const
struct _ast1100: PointerType<_ast1101> {}; // PointerType v8::FunctionTemplate *
struct _ast1102: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast1099>, Pack<>>>, _ast1095> {}; // CXXMethodDecl operator*
struct _ast1105: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1107>, Pack<_ast1106>>>, _ast1095> {}; // CXXMethodDecl operator==
struct _ast1107: FunctionProtoType<_ast79, Pack<_ast1108>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1108: LValueReferenceType<ReferenceType<_ast1109>> {}; // LValueReferenceType const Local<S> &
struct _ast1109: ConstQualifiedType<_ast1110> {}; // TemplateSpecializationType const Local<S>
struct _ast1113: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1115>, Pack<_ast1114>>>, _ast1095> {}; // CXXMethodDecl operator==
struct _ast1115: FunctionProtoType<_ast79, Pack<_ast1116>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1116: LValueReferenceType<ReferenceType<_ast1117>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1117: ConstQualifiedType<_ast1118> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1121: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1123>, Pack<_ast1122>>>, _ast1095> {}; // CXXMethodDecl operator!=
struct _ast1123: FunctionProtoType<_ast79, Pack<_ast1124>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1124: LValueReferenceType<ReferenceType<_ast1125>> {}; // LValueReferenceType const Local<S> &
struct _ast1125: ConstQualifiedType<_ast1126> {}; // TemplateSpecializationType const Local<S>
struct _ast1129: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1131>, Pack<_ast1130>>>, _ast1095> {}; // CXXMethodDecl operator!=
struct _ast1131: FunctionProtoType<_ast79, Pack<_ast1132>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1132: LValueReferenceType<ReferenceType<_ast1133>> {}; // LValueReferenceType const Persistent<S> &
struct _ast1133: ConstQualifiedType<_ast1134> {}; // TemplateSpecializationType const Persistent<S>
struct _ast1137: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast1139>, Pack<_ast1138>>> {}; // CXXMethodDecl Cast
struct _ast1139: FunctionProtoType<_ast1141, Pack<_ast1140>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (Local<S>)
struct _ast1144: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast1145>, Pack<>>>, _ast1095> {}; // CXXMethodDecl As
struct _ast1145: FunctionProtoType<_ast1146, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast1147: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1150>, Pack<_ast1148, _ast1149>>> {}; // CXXMethodDecl New
struct _ast1150: FunctionProtoType<_ast1152, Pack<_ast136, _ast1151>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast1153: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1156>, Pack<_ast1154, _ast1155>>> {}; // CXXMethodDecl New
struct _ast1156: FunctionProtoType<_ast1160, Pack<_ast136, _ast1157>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
struct _ast1157: LValueReferenceType<ReferenceType<_ast1158>> {}; // LValueReferenceType const PersistentBase<v8::FunctionTemplate> &
struct _ast1158: ConstQualifiedType<_ast1159> {}; // TemplateSpecializationType const PersistentBase<v8::FunctionTemplate>
struct _ast1161: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1164>, Pack<_ast1162, _ast1163>>> {}; // CXXMethodDecl New
struct _ast1164: FunctionProtoType<_ast1168, Pack<_ast136, _ast1165>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
struct _ast1165: LValueReferenceType<ReferenceType<_ast1166>> {}; // LValueReferenceType const TracedGlobal<v8::FunctionTemplate> &
struct _ast1166: ConstQualifiedType<_ast1167> {}; // TemplateSpecializationType const TracedGlobal<v8::FunctionTemplate>
struct _ast1169: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1171>, Pack<_ast1170>>>, _ast1082>> {}; // CXXConstructorDecl Local
struct _ast1171: FunctionProtoType<_ast64, Pack<_ast1172>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::FunctionTemplate> &)
struct _ast1172: LValueReferenceType<ReferenceType<_ast1096>> {}; // LValueReferenceType const v8::Local<v8::FunctionTemplate> &
struct _ast1173: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1175>, Pack<_ast1174>>>, _ast1082>> {}; // CXXConstructorDecl Local
struct _ast1175: FunctionProtoType<_ast64, Pack<_ast1176>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _ast1176: RValueReferenceType<ReferenceType<_ast1083>> {}; // RValueReferenceType v8::Local<v8::FunctionTemplate> &&
struct _ast1177: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast1082>> {}; // CXXDestructorDecl ~Local
struct _ast1182: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast1183>> {}; // CXXConstructorDecl Local
struct _ast1183: PointerType<_ast1184> {}; // PointerType v8::Local<v8::Promise> *
struct _ast1184: StructOrClassRecordType<RecordType<_ast1181>> {}; // RecordType v8::Local<v8::Promise>
struct _ast1187: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1189>, Pack<_ast1188>>>, _ast1183>> {}; // CXXConstructorDecl Local
struct _ast1189: FunctionProtoType<_ast64, Pack<_ast1190>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1191: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1193>, Pack<_ast1192>>>, _ast1183>> {}; // CXXConstructorDecl Local
struct _ast1193: FunctionProtoType<_ast64, Pack<_ast1194>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Promise>)
struct _ast1195: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1196> {}; // CXXMethodDecl IsEmpty
struct _ast1196: PointerType<_ast1197> {}; // PointerType const v8::Local<v8::Promise> *
struct _ast1197: ConstQualifiedType<_ast1184> {}; // RecordType const v8::Local<v8::Promise>
struct _ast1198: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast1183> {}; // CXXMethodDecl Clear
struct _ast1199: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast1200>, Pack<>>>, _ast1196> {}; // CXXMethodDecl operator->
struct _ast1200: FunctionProtoType<_ast1201, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Promise *() const
struct _ast1201: PointerType<_ast1202> {}; // PointerType v8::Promise *
struct _ast1203: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast1200>, Pack<>>>, _ast1196> {}; // CXXMethodDecl operator*
struct _ast1206: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1208>, Pack<_ast1207>>>, _ast1196> {}; // CXXMethodDecl operator==
struct _ast1208: FunctionProtoType<_ast79, Pack<_ast1209>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1209: LValueReferenceType<ReferenceType<_ast1210>> {}; // LValueReferenceType const Local<S> &
struct _ast1210: ConstQualifiedType<_ast1211> {}; // TemplateSpecializationType const Local<S>
struct _ast1214: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1216>, Pack<_ast1215>>>, _ast1196> {}; // CXXMethodDecl operator==
struct _ast1216: FunctionProtoType<_ast79, Pack<_ast1217>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1217: LValueReferenceType<ReferenceType<_ast1218>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1218: ConstQualifiedType<_ast1219> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1222: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1224>, Pack<_ast1223>>>, _ast1196> {}; // CXXMethodDecl operator!=
struct _ast1224: FunctionProtoType<_ast79, Pack<_ast1225>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1225: LValueReferenceType<ReferenceType<_ast1226>> {}; // LValueReferenceType const Local<S> &
struct _ast1226: ConstQualifiedType<_ast1227> {}; // TemplateSpecializationType const Local<S>
struct _ast1230: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1232>, Pack<_ast1231>>>, _ast1196> {}; // CXXMethodDecl operator!=
struct _ast1232: FunctionProtoType<_ast79, Pack<_ast1233>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1233: LValueReferenceType<ReferenceType<_ast1234>> {}; // LValueReferenceType const Persistent<S> &
struct _ast1234: ConstQualifiedType<_ast1235> {}; // TemplateSpecializationType const Persistent<S>
struct _ast1238: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast1240>, Pack<_ast1239>>> {}; // CXXMethodDecl Cast
struct _ast1240: FunctionProtoType<_ast1242, Pack<_ast1241>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Promise> (Local<S>)
struct _ast1245: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast1246>, Pack<>>>, _ast1196> {}; // CXXMethodDecl As
struct _ast1246: FunctionProtoType<_ast1247, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast1248: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1251>, Pack<_ast1249, _ast1250>>> {}; // CXXMethodDecl New
struct _ast1251: FunctionProtoType<_ast1253, Pack<_ast136, _ast1252>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _ast1254: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1257>, Pack<_ast1255, _ast1256>>> {}; // CXXMethodDecl New
struct _ast1257: FunctionProtoType<_ast1261, Pack<_ast136, _ast1258>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
struct _ast1258: LValueReferenceType<ReferenceType<_ast1259>> {}; // LValueReferenceType const PersistentBase<v8::Promise> &
struct _ast1259: ConstQualifiedType<_ast1260> {}; // TemplateSpecializationType const PersistentBase<v8::Promise>
struct _ast1262: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1265>, Pack<_ast1263, _ast1264>>> {}; // CXXMethodDecl New
struct _ast1265: FunctionProtoType<_ast1269, Pack<_ast136, _ast1266>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
struct _ast1266: LValueReferenceType<ReferenceType<_ast1267>> {}; // LValueReferenceType const TracedGlobal<v8::Promise> &
struct _ast1267: ConstQualifiedType<_ast1268> {}; // TemplateSpecializationType const TracedGlobal<v8::Promise>
struct _ast1270: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1272>, Pack<_ast1271>>>, _ast1183>> {}; // CXXConstructorDecl Local
struct _ast1272: FunctionProtoType<_ast64, Pack<_ast1273>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Promise> &) noexcept
struct _ast1273: LValueReferenceType<ReferenceType<_ast1197>> {}; // LValueReferenceType const v8::Local<v8::Promise> &
struct _ast1274: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1276>, Pack<_ast1275>>>, _ast1183>> {}; // CXXConstructorDecl Local
struct _ast1276: FunctionProtoType<_ast64, Pack<_ast1277>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Promise> &&)
struct _ast1277: RValueReferenceType<ReferenceType<_ast1184>> {}; // RValueReferenceType v8::Local<v8::Promise> &&
struct _ast1292: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast1293>> {}; // CXXConstructorDecl Local
struct _ast1293: PointerType<_ast1294> {}; // PointerType v8::Local<v8::Data> *
struct _ast1294: StructOrClassRecordType<RecordType<_ast1291>> {}; // RecordType v8::Local<v8::Data>
struct _ast1297: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1299>, Pack<_ast1298>>>, _ast1293>> {}; // CXXConstructorDecl Local
struct _ast1299: FunctionProtoType<_ast64, Pack<_ast1300>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1301: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1303>, Pack<_ast1302>>>, _ast1293>> {}; // CXXConstructorDecl Local
struct _ast1303: FunctionProtoType<_ast64, Pack<_ast1304>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Data>)
struct _ast1305: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1306> {}; // CXXMethodDecl IsEmpty
struct _ast1306: PointerType<_ast1307> {}; // PointerType const v8::Local<v8::Data> *
struct _ast1307: ConstQualifiedType<_ast1294> {}; // RecordType const v8::Local<v8::Data>
struct _ast1308: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast1293> {}; // CXXMethodDecl Clear
struct _ast1309: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast1310>, Pack<>>>, _ast1306> {}; // CXXMethodDecl operator->
struct _ast1310: FunctionProtoType<_ast1311, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Data *() const
struct _ast1311: PointerType<_ast1312> {}; // PointerType v8::Data *
struct _ast1313: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast1310>, Pack<>>>, _ast1306> {}; // CXXMethodDecl operator*
struct _ast1316: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1318>, Pack<_ast1317>>>, _ast1306> {}; // CXXMethodDecl operator==
struct _ast1318: FunctionProtoType<_ast79, Pack<_ast1319>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1319: LValueReferenceType<ReferenceType<_ast1320>> {}; // LValueReferenceType const Local<S> &
struct _ast1320: ConstQualifiedType<_ast1321> {}; // TemplateSpecializationType const Local<S>
struct _ast1324: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1326>, Pack<_ast1325>>>, _ast1306> {}; // CXXMethodDecl operator==
struct _ast1326: FunctionProtoType<_ast79, Pack<_ast1327>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1327: LValueReferenceType<ReferenceType<_ast1328>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1328: ConstQualifiedType<_ast1329> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1332: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1334>, Pack<_ast1333>>>, _ast1306> {}; // CXXMethodDecl operator!=
struct _ast1334: FunctionProtoType<_ast79, Pack<_ast1335>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1335: LValueReferenceType<ReferenceType<_ast1336>> {}; // LValueReferenceType const Local<S> &
struct _ast1336: ConstQualifiedType<_ast1337> {}; // TemplateSpecializationType const Local<S>
struct _ast1340: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1342>, Pack<_ast1341>>>, _ast1306> {}; // CXXMethodDecl operator!=
struct _ast1342: FunctionProtoType<_ast79, Pack<_ast1343>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1343: LValueReferenceType<ReferenceType<_ast1344>> {}; // LValueReferenceType const Persistent<S> &
struct _ast1344: ConstQualifiedType<_ast1345> {}; // TemplateSpecializationType const Persistent<S>
struct _ast1348: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast1350>, Pack<_ast1349>>> {}; // CXXMethodDecl Cast
struct _ast1350: FunctionProtoType<_ast1352, Pack<_ast1351>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Data> (Local<S>)
struct _ast1355: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast1356>, Pack<>>>, _ast1306> {}; // CXXMethodDecl As
struct _ast1356: FunctionProtoType<_ast1357, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast1358: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1361>, Pack<_ast1359, _ast1360>>> {}; // CXXMethodDecl New
struct _ast1361: FunctionProtoType<_ast1363, Pack<_ast136, _ast1362>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _ast1364: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1367>, Pack<_ast1365, _ast1366>>> {}; // CXXMethodDecl New
struct _ast1367: FunctionProtoType<_ast1371, Pack<_ast136, _ast1368>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
struct _ast1368: LValueReferenceType<ReferenceType<_ast1369>> {}; // LValueReferenceType const PersistentBase<v8::Data> &
struct _ast1369: ConstQualifiedType<_ast1370> {}; // TemplateSpecializationType const PersistentBase<v8::Data>
struct _ast1372: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1375>, Pack<_ast1373, _ast1374>>> {}; // CXXMethodDecl New
struct _ast1375: FunctionProtoType<_ast1379, Pack<_ast136, _ast1376>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
struct _ast1376: LValueReferenceType<ReferenceType<_ast1377>> {}; // LValueReferenceType const TracedGlobal<v8::Data> &
struct _ast1377: ConstQualifiedType<_ast1378> {}; // TemplateSpecializationType const TracedGlobal<v8::Data>
struct _ast1380: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1382>, Pack<_ast1381>>>, _ast1293>> {}; // CXXConstructorDecl Local
struct _ast1382: FunctionProtoType<_ast64, Pack<_ast1383>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Data> &) noexcept
struct _ast1383: LValueReferenceType<ReferenceType<_ast1307>> {}; // LValueReferenceType const v8::Local<v8::Data> &
struct _ast1384: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1386>, Pack<_ast1385>>>, _ast1293>> {}; // CXXConstructorDecl Local
struct _ast1386: FunctionProtoType<_ast64, Pack<_ast1387>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Data> &&)
struct _ast1387: RValueReferenceType<ReferenceType<_ast1294>> {}; // RValueReferenceType v8::Local<v8::Data> &&
struct _ast1388: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast1293>> {}; // CXXDestructorDecl ~Local
struct _ast1390: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast1391>> {}; // CXXConstructorDecl Local
struct _ast1391: PointerType<_ast1392> {}; // PointerType v8::Local<v8::AccessorSignature> *
struct _ast1392: StructOrClassRecordType<RecordType<_ast1389>> {}; // RecordType v8::Local<v8::AccessorSignature>
struct _ast1395: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1397>, Pack<_ast1396>>>, _ast1391>> {}; // CXXConstructorDecl Local
struct _ast1397: FunctionProtoType<_ast64, Pack<_ast1398>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1399: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1401>, Pack<_ast1400>>>, _ast1391>> {}; // CXXConstructorDecl Local
struct _ast1401: FunctionProtoType<_ast64, Pack<_ast1402>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::AccessorSignature>)
struct _ast1403: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1404> {}; // CXXMethodDecl IsEmpty
struct _ast1404: PointerType<_ast1405> {}; // PointerType const v8::Local<v8::AccessorSignature> *
struct _ast1405: ConstQualifiedType<_ast1392> {}; // RecordType const v8::Local<v8::AccessorSignature>
struct _ast1406: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast1391> {}; // CXXMethodDecl Clear
struct _ast1407: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast1408>, Pack<>>>, _ast1404> {}; // CXXMethodDecl operator->
struct _ast1408: FunctionProtoType<_ast1409, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::AccessorSignature *() const
struct _ast1409: PointerType<_ast1410> {}; // PointerType v8::AccessorSignature *
struct _ast1411: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast1408>, Pack<>>>, _ast1404> {}; // CXXMethodDecl operator*
struct _ast1414: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1416>, Pack<_ast1415>>>, _ast1404> {}; // CXXMethodDecl operator==
struct _ast1416: FunctionProtoType<_ast79, Pack<_ast1417>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1417: LValueReferenceType<ReferenceType<_ast1418>> {}; // LValueReferenceType const Local<S> &
struct _ast1418: ConstQualifiedType<_ast1419> {}; // TemplateSpecializationType const Local<S>
struct _ast1422: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1424>, Pack<_ast1423>>>, _ast1404> {}; // CXXMethodDecl operator==
struct _ast1424: FunctionProtoType<_ast79, Pack<_ast1425>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1425: LValueReferenceType<ReferenceType<_ast1426>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1426: ConstQualifiedType<_ast1427> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1430: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1432>, Pack<_ast1431>>>, _ast1404> {}; // CXXMethodDecl operator!=
struct _ast1432: FunctionProtoType<_ast79, Pack<_ast1433>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1433: LValueReferenceType<ReferenceType<_ast1434>> {}; // LValueReferenceType const Local<S> &
struct _ast1434: ConstQualifiedType<_ast1435> {}; // TemplateSpecializationType const Local<S>
struct _ast1438: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1440>, Pack<_ast1439>>>, _ast1404> {}; // CXXMethodDecl operator!=
struct _ast1440: FunctionProtoType<_ast79, Pack<_ast1441>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1441: LValueReferenceType<ReferenceType<_ast1442>> {}; // LValueReferenceType const Persistent<S> &
struct _ast1442: ConstQualifiedType<_ast1443> {}; // TemplateSpecializationType const Persistent<S>
struct _ast1446: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast1448>, Pack<_ast1447>>> {}; // CXXMethodDecl Cast
struct _ast1448: FunctionProtoType<_ast1450, Pack<_ast1449>, UnqualifiedType> {}; // FunctionProtoType Local<v8::AccessorSignature> (Local<S>)
struct _ast1453: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast1454>, Pack<>>>, _ast1404> {}; // CXXMethodDecl As
struct _ast1454: FunctionProtoType<_ast1455, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast1456: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1459>, Pack<_ast1457, _ast1458>>> {}; // CXXMethodDecl New
struct _ast1459: FunctionProtoType<_ast1461, Pack<_ast136, _ast1460>, UnqualifiedType> {}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
struct _ast1462: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1465>, Pack<_ast1463, _ast1464>>> {}; // CXXMethodDecl New
struct _ast1465: FunctionProtoType<_ast1469, Pack<_ast136, _ast1466>, UnqualifiedType> {}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
struct _ast1466: LValueReferenceType<ReferenceType<_ast1467>> {}; // LValueReferenceType const PersistentBase<v8::AccessorSignature> &
struct _ast1467: ConstQualifiedType<_ast1468> {}; // TemplateSpecializationType const PersistentBase<v8::AccessorSignature>
struct _ast1470: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1473>, Pack<_ast1471, _ast1472>>> {}; // CXXMethodDecl New
struct _ast1473: FunctionProtoType<_ast1477, Pack<_ast136, _ast1474>, UnqualifiedType> {}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
struct _ast1474: LValueReferenceType<ReferenceType<_ast1475>> {}; // LValueReferenceType const TracedGlobal<v8::AccessorSignature> &
struct _ast1475: ConstQualifiedType<_ast1476> {}; // TemplateSpecializationType const TracedGlobal<v8::AccessorSignature>
struct _ast1478: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1480>, Pack<_ast1479>>>, _ast1391>> {}; // CXXConstructorDecl Local
struct _ast1480: FunctionProtoType<_ast64, Pack<_ast1481>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::AccessorSignature> &)
struct _ast1481: LValueReferenceType<ReferenceType<_ast1405>> {}; // LValueReferenceType const v8::Local<v8::AccessorSignature> &
struct _ast1482: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1484>, Pack<_ast1483>>>, _ast1391>> {}; // CXXConstructorDecl Local
struct _ast1484: FunctionProtoType<_ast64, Pack<_ast1485>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _ast1485: RValueReferenceType<ReferenceType<_ast1392>> {}; // RValueReferenceType v8::Local<v8::AccessorSignature> &&
struct _ast1486: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast1391>> {}; // CXXDestructorDecl ~Local
struct _ast1488: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast63>, Pack<>>>, _ast1489>> {}; // CXXConstructorDecl Local
struct _ast1489: PointerType<_ast1490> {}; // PointerType v8::Local<v8::Signature> *
struct _ast1490: StructOrClassRecordType<RecordType<_ast1487>> {}; // RecordType v8::Local<v8::Signature>
struct _ast1493: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1495>, Pack<_ast1494>>>, _ast1489>> {}; // CXXConstructorDecl Local
struct _ast1495: FunctionProtoType<_ast64, Pack<_ast1496>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1497: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1499>, Pack<_ast1498>>>, _ast1489>> {}; // CXXConstructorDecl Local
struct _ast1499: FunctionProtoType<_ast64, Pack<_ast1500>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Signature>)
struct _ast1501: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1502> {}; // CXXMethodDecl IsEmpty
struct _ast1502: PointerType<_ast1503> {}; // PointerType const v8::Local<v8::Signature> *
struct _ast1503: ConstQualifiedType<_ast1490> {}; // RecordType const v8::Local<v8::Signature>
struct _ast1504: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast1489> {}; // CXXMethodDecl Clear
struct _ast1505: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast1506>, Pack<>>>, _ast1502> {}; // CXXMethodDecl operator->
struct _ast1506: FunctionProtoType<_ast1507, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Signature *() const
struct _ast1507: PointerType<_ast1508> {}; // PointerType v8::Signature *
struct _ast1509: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast1506>, Pack<>>>, _ast1502> {}; // CXXMethodDecl operator*
struct _ast1512: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1514>, Pack<_ast1513>>>, _ast1502> {}; // CXXMethodDecl operator==
struct _ast1514: FunctionProtoType<_ast79, Pack<_ast1515>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1515: LValueReferenceType<ReferenceType<_ast1516>> {}; // LValueReferenceType const Local<S> &
struct _ast1516: ConstQualifiedType<_ast1517> {}; // TemplateSpecializationType const Local<S>
struct _ast1520: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1522>, Pack<_ast1521>>>, _ast1502> {}; // CXXMethodDecl operator==
struct _ast1522: FunctionProtoType<_ast79, Pack<_ast1523>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1523: LValueReferenceType<ReferenceType<_ast1524>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1524: ConstQualifiedType<_ast1525> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1528: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1530>, Pack<_ast1529>>>, _ast1502> {}; // CXXMethodDecl operator!=
struct _ast1530: FunctionProtoType<_ast79, Pack<_ast1531>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1531: LValueReferenceType<ReferenceType<_ast1532>> {}; // LValueReferenceType const Local<S> &
struct _ast1532: ConstQualifiedType<_ast1533> {}; // TemplateSpecializationType const Local<S>
struct _ast1536: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1538>, Pack<_ast1537>>>, _ast1502> {}; // CXXMethodDecl operator!=
struct _ast1538: FunctionProtoType<_ast79, Pack<_ast1539>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast1539: LValueReferenceType<ReferenceType<_ast1540>> {}; // LValueReferenceType const Persistent<S> &
struct _ast1540: ConstQualifiedType<_ast1541> {}; // TemplateSpecializationType const Persistent<S>
struct _ast1544: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast1546>, Pack<_ast1545>>> {}; // CXXMethodDecl Cast
struct _ast1546: FunctionProtoType<_ast1548, Pack<_ast1547>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Signature> (Local<S>)
struct _ast1551: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast1552>, Pack<>>>, _ast1502> {}; // CXXMethodDecl As
struct _ast1552: FunctionProtoType<_ast1553, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast1554: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1557>, Pack<_ast1555, _ast1556>>> {}; // CXXMethodDecl New
struct _ast1557: FunctionProtoType<_ast1559, Pack<_ast136, _ast1558>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
struct _ast1560: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1563>, Pack<_ast1561, _ast1562>>> {}; // CXXMethodDecl New
struct _ast1563: FunctionProtoType<_ast1567, Pack<_ast136, _ast1564>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
struct _ast1564: LValueReferenceType<ReferenceType<_ast1565>> {}; // LValueReferenceType const PersistentBase<v8::Signature> &
struct _ast1565: ConstQualifiedType<_ast1566> {}; // TemplateSpecializationType const PersistentBase<v8::Signature>
struct _ast1568: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast1571>, Pack<_ast1569, _ast1570>>> {}; // CXXMethodDecl New
struct _ast1571: FunctionProtoType<_ast1575, Pack<_ast136, _ast1572>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
struct _ast1572: LValueReferenceType<ReferenceType<_ast1573>> {}; // LValueReferenceType const TracedGlobal<v8::Signature> &
struct _ast1573: ConstQualifiedType<_ast1574> {}; // TemplateSpecializationType const TracedGlobal<v8::Signature>
struct _ast1576: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1578>, Pack<_ast1577>>>, _ast1489>> {}; // CXXConstructorDecl Local
struct _ast1578: FunctionProtoType<_ast64, Pack<_ast1579>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Local<v8::Signature> &)
struct _ast1579: LValueReferenceType<ReferenceType<_ast1503>> {}; // LValueReferenceType const v8::Local<v8::Signature> &
struct _ast1580: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str51>, _ast1582>, Pack<_ast1581>>>, _ast1489>> {}; // CXXConstructorDecl Local
struct _ast1582: FunctionProtoType<_ast64, Pack<_ast1583>, UnqualifiedType> {}; // FunctionProtoType void (v8::Local<v8::Signature> &&) noexcept
struct _ast1583: RValueReferenceType<ReferenceType<_ast1490>> {}; // RValueReferenceType v8::Local<v8::Signature> &&
struct _ast1584: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str65>, _ast165>, Pack<>>>, _ast1489>> {}; // CXXDestructorDecl ~Local
struct _ast1594: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast63>, Pack<>>>, _ast1595>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1595: PointerType<_ast1596> {}; // PointerType v8::MaybeLocal<v8::Value> *
struct _ast1596: StructOrClassRecordType<RecordType<_ast1593>> {}; // RecordType v8::MaybeLocal<v8::Value>
struct _ast1599: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1601>, Pack<_ast1600>>>, _ast1595>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1601: FunctionProtoType<_ast64, Pack<_ast1602>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1603: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1604> {}; // CXXMethodDecl IsEmpty
struct _ast1604: PointerType<_ast1605> {}; // PointerType const v8::MaybeLocal<v8::Value> *
struct _ast1605: ConstQualifiedType<_ast1596> {}; // RecordType const v8::MaybeLocal<v8::Value>
struct _ast1608: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str68>, _ast1610>, Pack<_ast1609>>>, _ast1604> {}; // CXXMethodDecl ToLocal
struct _ast1610: FunctionProtoType<_ast79, Pack<_ast1611>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<S> *) const
struct _ast1611: PointerType<_ast1612> {}; // PointerType Local<S> *
struct _ast1613: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str70>, _ast1614>, Pack<>>>, _ast1595> {}; // CXXMethodDecl ToLocalChecked
struct _ast1614: FunctionProtoType<_ast1615, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast1618: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str71>, _ast1620>, Pack<_ast1619>>>, _ast1604> {}; // CXXMethodDecl FromMaybe
struct _ast1620: FunctionProtoType<_ast1622, Pack<_ast1621>, ConstQualifiedType> {}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1623: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1625>, Pack<_ast1624>>>, _ast1595>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1625: FunctionProtoType<_ast64, Pack<_ast1626>, UnqualifiedType> {}; // FunctionProtoType void (const v8::MaybeLocal<v8::Value> &)
struct _ast1626: LValueReferenceType<ReferenceType<_ast1605>> {}; // LValueReferenceType const v8::MaybeLocal<v8::Value> &
struct _ast1627: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1629>, Pack<_ast1628>>>, _ast1595>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1629: FunctionProtoType<_ast64, Pack<_ast1630>, UnqualifiedType> {}; // FunctionProtoType void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _ast1630: RValueReferenceType<ReferenceType<_ast1596>> {}; // RValueReferenceType v8::MaybeLocal<v8::Value> &&
struct _ast1631: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str73>, _ast165>, Pack<>>>, _ast1595>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1636: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast63>, Pack<>>>, _ast1637>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1637: PointerType<_ast1638> {}; // PointerType v8::MaybeLocal<v8::String> *
struct _ast1638: StructOrClassRecordType<RecordType<_ast1635>> {}; // RecordType v8::MaybeLocal<v8::String>
struct _ast1641: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1643>, Pack<_ast1642>>>, _ast1637>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1643: FunctionProtoType<_ast64, Pack<_ast1644>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1645: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1646> {}; // CXXMethodDecl IsEmpty
struct _ast1646: PointerType<_ast1647> {}; // PointerType const v8::MaybeLocal<v8::String> *
struct _ast1647: ConstQualifiedType<_ast1638> {}; // RecordType const v8::MaybeLocal<v8::String>
struct _ast1650: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str68>, _ast1652>, Pack<_ast1651>>>, _ast1646> {}; // CXXMethodDecl ToLocal
struct _ast1652: FunctionProtoType<_ast79, Pack<_ast1653>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<S> *) const
struct _ast1653: PointerType<_ast1654> {}; // PointerType Local<S> *
struct _ast1655: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str70>, _ast1656>, Pack<>>>, _ast1637> {}; // CXXMethodDecl ToLocalChecked
struct _ast1656: FunctionProtoType<_ast1657, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> ()
struct _ast1660: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str71>, _ast1662>, Pack<_ast1661>>>, _ast1646> {}; // CXXMethodDecl FromMaybe
struct _ast1662: FunctionProtoType<_ast1664, Pack<_ast1663>, ConstQualifiedType> {}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1665: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str73>, _ast165>, Pack<>>>, _ast1637>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1667: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast63>, Pack<>>>, _ast1668>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1668: PointerType<_ast1669> {}; // PointerType v8::MaybeLocal<v8::Object> *
struct _ast1669: StructOrClassRecordType<RecordType<_ast1666>> {}; // RecordType v8::MaybeLocal<v8::Object>
struct _ast1672: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1674>, Pack<_ast1673>>>, _ast1668>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1674: FunctionProtoType<_ast64, Pack<_ast1675>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1676: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1677> {}; // CXXMethodDecl IsEmpty
struct _ast1677: PointerType<_ast1678> {}; // PointerType const v8::MaybeLocal<v8::Object> *
struct _ast1678: ConstQualifiedType<_ast1669> {}; // RecordType const v8::MaybeLocal<v8::Object>
struct _ast1681: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str68>, _ast1683>, Pack<_ast1682>>>, _ast1677> {}; // CXXMethodDecl ToLocal
struct _ast1683: FunctionProtoType<_ast79, Pack<_ast1684>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<S> *) const
struct _ast1684: PointerType<_ast1685> {}; // PointerType Local<S> *
struct _ast1686: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str70>, _ast1687>, Pack<>>>, _ast1668> {}; // CXXMethodDecl ToLocalChecked
struct _ast1687: FunctionProtoType<_ast1688, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> ()
struct _ast1691: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str71>, _ast1693>, Pack<_ast1692>>>, _ast1677> {}; // CXXMethodDecl FromMaybe
struct _ast1693: FunctionProtoType<_ast1695, Pack<_ast1694>, ConstQualifiedType> {}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1696: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str73>, _ast165>, Pack<>>>, _ast1668>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1697: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1699>, Pack<_ast1698>>>, _ast1668>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1699: FunctionProtoType<_ast64, Pack<_ast1700>, UnqualifiedType> {}; // FunctionProtoType void (const v8::MaybeLocal<v8::Object> &)
struct _ast1700: LValueReferenceType<ReferenceType<_ast1678>> {}; // LValueReferenceType const v8::MaybeLocal<v8::Object> &
struct _ast1701: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1703>, Pack<_ast1702>>>, _ast1668>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1703: FunctionProtoType<_ast64, Pack<_ast1704>, UnqualifiedType> {}; // FunctionProtoType void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _ast1704: RValueReferenceType<ReferenceType<_ast1669>> {}; // RValueReferenceType v8::MaybeLocal<v8::Object> &&
struct _ast1721: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast63>, Pack<>>>, _ast1722>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1722: PointerType<_ast1723> {}; // PointerType v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1723: StructOrClassRecordType<RecordType<_ast1720>> {}; // RecordType v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1726: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1728>, Pack<_ast1727>>>, _ast1722>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1728: FunctionProtoType<_ast64, Pack<_ast1729>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast1730: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1731> {}; // CXXMethodDecl IsEmpty
struct _ast1731: PointerType<_ast1732> {}; // PointerType const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ast1732: ConstQualifiedType<_ast1723> {}; // RecordType const v8::MaybeLocal<v8::ObjectTemplate>
struct _ast1735: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str68>, _ast1737>, Pack<_ast1736>>>, _ast1731> {}; // CXXMethodDecl ToLocal
struct _ast1737: FunctionProtoType<_ast79, Pack<_ast1738>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<S> *) const
struct _ast1738: PointerType<_ast1739> {}; // PointerType Local<S> *
struct _ast1740: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str70>, _ast1741>, Pack<>>>, _ast1722> {}; // CXXMethodDecl ToLocalChecked
struct _ast1741: FunctionProtoType<_ast1742, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast1745: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str71>, _ast1747>, Pack<_ast1746>>>, _ast1731> {}; // CXXMethodDecl FromMaybe
struct _ast1747: FunctionProtoType<_ast1749, Pack<_ast1748>, ConstQualifiedType> {}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast1750: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1752>, Pack<_ast1751>>>, _ast1722>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1752: FunctionProtoType<_ast64, Pack<_ast1753>, UnqualifiedType> {}; // FunctionProtoType void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ast1753: LValueReferenceType<ReferenceType<_ast1732>> {}; // LValueReferenceType const v8::MaybeLocal<v8::ObjectTemplate> &
struct _ast1754: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str67>, _ast1756>, Pack<_ast1755>>>, _ast1722>> {}; // CXXConstructorDecl MaybeLocal
struct _ast1756: FunctionProtoType<_ast64, Pack<_ast1757>, UnqualifiedType> {}; // FunctionProtoType void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _ast1757: RValueReferenceType<ReferenceType<_ast1723>> {}; // RValueReferenceType v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ast1758: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str73>, _ast165>, Pack<>>>, _ast1722>> {}; // CXXDestructorDecl ~MaybeLocal
struct _ast1777: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast63>, Pack<>>>, _ast1778> {}; // CXXMethodDecl Reset
struct _ast1778: PointerType<_ast1779> {}; // PointerType v8::PersistentBase<v8::Object> *
struct _ast1779: StructOrClassRecordType<RecordType<_ast1776>> {}; // RecordType v8::PersistentBase<v8::Object>
struct _ast1782: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast1785>, Pack<_ast1783, _ast1784>>>, _ast1778> {}; // CXXMethodDecl Reset
struct _ast1785: FunctionProtoType<_ast64, Pack<_ast136, _ast1786>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1786: LValueReferenceType<ReferenceType<_ast1787>> {}; // LValueReferenceType const Local<S> &
struct _ast1787: ConstQualifiedType<_ast1788> {}; // TemplateSpecializationType const Local<S>
struct _ast1791: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast1794>, Pack<_ast1792, _ast1793>>>, _ast1778> {}; // CXXMethodDecl Reset
struct _ast1794: FunctionProtoType<_ast64, Pack<_ast136, _ast1795>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast1795: LValueReferenceType<ReferenceType<_ast1796>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1796: ConstQualifiedType<_ast1797> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1798: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1799> {}; // CXXMethodDecl IsEmpty
struct _ast1799: PointerType<_ast1800> {}; // PointerType const v8::PersistentBase<v8::Object> *
struct _ast1800: ConstQualifiedType<_ast1779> {}; // RecordType const v8::PersistentBase<v8::Object>
struct _ast1801: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str79>, _ast63>, Pack<>>>, _ast1778> {}; // CXXMethodDecl Empty
struct _ast1802: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast1804>, Pack<_ast1803>>>, _ast1799> {}; // CXXMethodDecl Get
struct _ast1804: FunctionProtoType<_ast1805, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast1808: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1810>, Pack<_ast1809>>>, _ast1799> {}; // CXXMethodDecl operator==
struct _ast1810: FunctionProtoType<_ast79, Pack<_ast1811>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1811: LValueReferenceType<ReferenceType<_ast1812>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1812: ConstQualifiedType<_ast1813> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1816: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1818>, Pack<_ast1817>>>, _ast1799> {}; // CXXMethodDecl operator==
struct _ast1818: FunctionProtoType<_ast79, Pack<_ast1819>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1819: LValueReferenceType<ReferenceType<_ast1820>> {}; // LValueReferenceType const Local<S> &
struct _ast1820: ConstQualifiedType<_ast1821> {}; // TemplateSpecializationType const Local<S>
struct _ast1824: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1826>, Pack<_ast1825>>>, _ast1799> {}; // CXXMethodDecl operator!=
struct _ast1826: FunctionProtoType<_ast79, Pack<_ast1827>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1827: LValueReferenceType<ReferenceType<_ast1828>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1828: ConstQualifiedType<_ast1829> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1832: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1834>, Pack<_ast1833>>>, _ast1799> {}; // CXXMethodDecl operator!=
struct _ast1834: FunctionProtoType<_ast79, Pack<_ast1835>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1835: LValueReferenceType<ReferenceType<_ast1836>> {}; // LValueReferenceType const Local<S> &
struct _ast1836: ConstQualifiedType<_ast1837> {}; // TemplateSpecializationType const Local<S>
struct _ast1840: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str81>, _ast1844>, Pack<_ast1841, _ast1842, _ast1843>>>, _ast1778> {}; // CXXMethodDecl SetWeak
struct _ast1844: FunctionProtoType<_ast64, Pack<_ast1845, _ast1847, _ast1848>, UnqualifiedType> {}; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast1845: PointerType<_ast1846> {}; // PointerType P *
struct _ast1848: EnumType<_ast1850, _ast1849> {}; // EnumType v8::WeakCallbackType
struct _ast1849: ABIIndependentSizeType<SignedIntegerType, 4> {}; // BuiltinType int
struct _ast1851: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str81>, _ast63>, Pack<>>>, _ast1778> {}; // CXXMethodDecl SetWeak
struct _ast1854: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str87>, _ast1855>, Pack<>>>, _ast1778> {}; // CXXMethodDecl ClearWeak
struct _ast1855: FunctionProtoType<_ast1856, Pack<>, UnqualifiedType> {}; // FunctionProtoType P *()
struct _ast1856: PointerType<_ast1857> {}; // PointerType P *
struct _ast1858: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str87>, _ast63>, Pack<>>>, _ast1778> {}; // CXXMethodDecl ClearWeak
struct _ast1859: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str88>, _ast1861>, Pack<_ast1860>>>, _ast1778> {}; // CXXMethodDecl AnnotateStrongRetainer
struct _ast1861: FunctionProtoType<_ast64, Pack<_ast1862>, UnqualifiedType> {}; // FunctionProtoType void (const char *)
struct _ast1862: PointerType<_ast1863> {}; // PointerType const char *
struct _ast1863: ConstQualifiedType<_ast1864> {}; // BuiltinType const char
struct _ast1864: ABIIndependentSizeType<SignedIntegerType, 1> {}; // BuiltinType char
struct _ast1865: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str90>, _ast78>, Pack<>>>, _ast1799> {}; // CXXMethodDecl IsWeak
struct _ast1866: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str91>, _ast1868>, Pack<_ast1867>>>, _ast1778> {}; // CXXMethodDecl SetWrapperClassId
struct _ast1868: FunctionProtoType<_ast64, Pack<_ast1869>, UnqualifiedType> {}; // FunctionProtoType void (uint16_t)
struct _ast1869: ABIIndependentSizeType<UnsignedIntegerType, 2> {}; // TypedefType uint16_t
struct _ast1870: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str93>, _ast1871>, Pack<>>>, _ast1799> {}; // CXXMethodDecl WrapperClassId
struct _ast1871: FunctionProtoType<_ast1869, Pack<>, ConstQualifiedType> {}; // FunctionProtoType uint16_t () const
struct _ast1872: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str76>, _ast1874>, Pack<_ast1873>>>, _ast1778>> {}; // CXXConstructorDecl PersistentBase
struct _ast1874: FunctionProtoType<_ast64, Pack<_ast1875>, UnqualifiedType> {}; // FunctionProtoType void (const v8::PersistentBase<v8::Object> &)
struct _ast1875: LValueReferenceType<ReferenceType<_ast1800>> {}; // LValueReferenceType const v8::PersistentBase<v8::Object> &
struct _ast1876: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast1874>, Pack<_ast1877>>>, _ast1778> {}; // CXXMethodDecl operator=
struct _ast1881: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast63>, Pack<>>>, _ast1882> {}; // CXXMethodDecl Reset
struct _ast1882: PointerType<_ast1883> {}; // PointerType v8::PersistentBase<v8::Promise> *
struct _ast1883: StructOrClassRecordType<RecordType<_ast1880>> {}; // RecordType v8::PersistentBase<v8::Promise>
struct _ast1886: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast1889>, Pack<_ast1887, _ast1888>>>, _ast1882> {}; // CXXMethodDecl Reset
struct _ast1889: FunctionProtoType<_ast64, Pack<_ast136, _ast1890>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast1890: LValueReferenceType<ReferenceType<_ast1891>> {}; // LValueReferenceType const Local<S> &
struct _ast1891: ConstQualifiedType<_ast1892> {}; // TemplateSpecializationType const Local<S>
struct _ast1895: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast1898>, Pack<_ast1896, _ast1897>>>, _ast1882> {}; // CXXMethodDecl Reset
struct _ast1898: FunctionProtoType<_ast64, Pack<_ast136, _ast1899>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast1899: LValueReferenceType<ReferenceType<_ast1900>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1900: ConstQualifiedType<_ast1901> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1902: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast1903> {}; // CXXMethodDecl IsEmpty
struct _ast1903: PointerType<_ast1904> {}; // PointerType const v8::PersistentBase<v8::Promise> *
struct _ast1904: ConstQualifiedType<_ast1883> {}; // RecordType const v8::PersistentBase<v8::Promise>
struct _ast1905: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str79>, _ast63>, Pack<>>>, _ast1882> {}; // CXXMethodDecl Empty
struct _ast1906: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast1908>, Pack<_ast1907>>>, _ast1903> {}; // CXXMethodDecl Get
struct _ast1908: FunctionProtoType<_ast1909, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Promise> (v8::Isolate *) const
struct _ast1912: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1914>, Pack<_ast1913>>>, _ast1903> {}; // CXXMethodDecl operator==
struct _ast1914: FunctionProtoType<_ast79, Pack<_ast1915>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1915: LValueReferenceType<ReferenceType<_ast1916>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1916: ConstQualifiedType<_ast1917> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1920: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast1922>, Pack<_ast1921>>>, _ast1903> {}; // CXXMethodDecl operator==
struct _ast1922: FunctionProtoType<_ast79, Pack<_ast1923>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1923: LValueReferenceType<ReferenceType<_ast1924>> {}; // LValueReferenceType const Local<S> &
struct _ast1924: ConstQualifiedType<_ast1925> {}; // TemplateSpecializationType const Local<S>
struct _ast1928: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1930>, Pack<_ast1929>>>, _ast1903> {}; // CXXMethodDecl operator!=
struct _ast1930: FunctionProtoType<_ast79, Pack<_ast1931>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast1931: LValueReferenceType<ReferenceType<_ast1932>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast1932: ConstQualifiedType<_ast1933> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast1936: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast1938>, Pack<_ast1937>>>, _ast1903> {}; // CXXMethodDecl operator!=
struct _ast1938: FunctionProtoType<_ast79, Pack<_ast1939>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast1939: LValueReferenceType<ReferenceType<_ast1940>> {}; // LValueReferenceType const Local<S> &
struct _ast1940: ConstQualifiedType<_ast1941> {}; // TemplateSpecializationType const Local<S>
struct _ast1944: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str81>, _ast1948>, Pack<_ast1945, _ast1946, _ast1947>>>, _ast1882> {}; // CXXMethodDecl SetWeak
struct _ast1948: FunctionProtoType<_ast64, Pack<_ast1949, _ast1951, _ast1848>, UnqualifiedType> {}; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast1949: PointerType<_ast1950> {}; // PointerType P *
struct _ast1952: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str81>, _ast63>, Pack<>>>, _ast1882> {}; // CXXMethodDecl SetWeak
struct _ast1955: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str87>, _ast1956>, Pack<>>>, _ast1882> {}; // CXXMethodDecl ClearWeak
struct _ast1956: FunctionProtoType<_ast1957, Pack<>, UnqualifiedType> {}; // FunctionProtoType P *()
struct _ast1957: PointerType<_ast1958> {}; // PointerType P *
struct _ast1959: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str87>, _ast63>, Pack<>>>, _ast1882> {}; // CXXMethodDecl ClearWeak
struct _ast1960: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str88>, _ast1861>, Pack<_ast1961>>>, _ast1882> {}; // CXXMethodDecl AnnotateStrongRetainer
struct _ast1962: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str90>, _ast78>, Pack<>>>, _ast1903> {}; // CXXMethodDecl IsWeak
struct _ast1963: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str91>, _ast1868>, Pack<_ast1964>>>, _ast1882> {}; // CXXMethodDecl SetWrapperClassId
struct _ast1965: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str93>, _ast1871>, Pack<>>>, _ast1903> {}; // CXXMethodDecl WrapperClassId
struct _ast1966: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str76>, _ast1968>, Pack<_ast1967>>>, _ast1882>> {}; // CXXConstructorDecl PersistentBase
struct _ast1968: FunctionProtoType<_ast64, Pack<_ast1969>, UnqualifiedType> {}; // FunctionProtoType void (const v8::PersistentBase<v8::Promise> &)
struct _ast1969: LValueReferenceType<ReferenceType<_ast1904>> {}; // LValueReferenceType const v8::PersistentBase<v8::Promise> &
struct _ast1970: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast1968>, Pack<_ast1971>>>, _ast1882> {}; // CXXMethodDecl operator=
struct _ast1984: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str94>, _ast63>, Pack<>>>, _ast1985>> {}; // CXXConstructorDecl Persistent
struct _ast1985: PointerType<_ast1986> {}; // PointerType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast1986: StructOrClassRecordType<RecordType<_ast1983>> {}; // RecordType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast1989: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str94>, _ast1992>, Pack<_ast1990, _ast1991>>>, _ast1985>> {}; // CXXConstructorDecl Persistent
struct _ast1992: FunctionProtoType<_ast64, Pack<_ast136, _ast1993>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast1997: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str94>, _ast2000>, Pack<_ast1998, _ast1999>>>, _ast1985>> {}; // CXXConstructorDecl Persistent
struct _ast2000: FunctionProtoType<_ast64, Pack<_ast136, _ast2001>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2001: LValueReferenceType<ReferenceType<_ast2002>> {}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2002: ConstQualifiedType<_ast2003> {}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2004: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str94>, _ast2006>, Pack<_ast2005>>>, _ast1985>> {}; // CXXConstructorDecl Persistent
struct _ast2006: FunctionProtoType<_ast64, Pack<_ast2007>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2007: LValueReferenceType<ReferenceType<_ast2008>> {}; // LValueReferenceType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2008: ConstQualifiedType<_ast1986> {}; // RecordType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2012: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str94>, _ast2014>, Pack<_ast2013>>>, _ast1985>> {}; // CXXConstructorDecl Persistent
struct _ast2014: FunctionProtoType<_ast64, Pack<_ast2015>, UnqualifiedType> {}; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2015: LValueReferenceType<ReferenceType<_ast2016>> {}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2016: ConstQualifiedType<_ast2017> {}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2018: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str94>, _ast2020>, Pack<_ast2019>>>, _ast1985>> {}; // CXXConstructorDecl Persistent
struct _ast2020: FunctionProtoType<_ast64, Pack<_ast2021>, UnqualifiedType> {}; // FunctionProtoType void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2021: LValueReferenceType<ReferenceType<_ast2022>> {}; // LValueReferenceType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2022: ConstQualifiedType<_ast2023> {}; // TemplateSpecializationType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2024: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2026>, Pack<_ast2025>>>, _ast1985> {}; // CXXMethodDecl operator=
struct _ast2026: FunctionProtoType<_ast2027, Pack<_ast2007>, UnqualifiedType> {}; // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2027: LValueReferenceType<ReferenceType<_ast1986>> {}; // LValueReferenceType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2031: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2033>, Pack<_ast2032>>>, _ast1985> {}; // CXXMethodDecl operator=
struct _ast2033: FunctionProtoType<_ast2027, Pack<_ast2034>, UnqualifiedType> {}; // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _ast2034: LValueReferenceType<ReferenceType<_ast2035>> {}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2035: ConstQualifiedType<_ast2036> {}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2037: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2039>, Pack<_ast2038>>>, _ast1985> {}; // CXXMethodDecl operator=
struct _ast2039: FunctionProtoType<_ast2027, Pack<_ast2040>, UnqualifiedType> {}; // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ast2040: LValueReferenceType<ReferenceType<_ast2041>> {}; // LValueReferenceType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ast2041: ConstQualifiedType<_ast2042> {}; // TemplateSpecializationType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ast2043: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str97>, _ast2044>, Pack<>>>, _ast1985>> {}; // CXXDestructorDecl ~Persistent
struct _ast2044: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2047: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast2049>, Pack<_ast2048>>> {}; // CXXMethodDecl Cast
struct _ast2049: FunctionProtoType<_ast2053, Pack<_ast2050>, UnqualifiedType> {}; // FunctionProtoType Persistent<v8::Promise> &(const Persistent<S> &)
struct _ast2050: LValueReferenceType<ReferenceType<_ast2051>> {}; // LValueReferenceType const Persistent<S> &
struct _ast2051: ConstQualifiedType<_ast2052> {}; // TemplateSpecializationType const Persistent<S>
struct _ast2053: LValueReferenceType<ReferenceType<_ast2054>> {}; // LValueReferenceType Persistent<v8::Promise> &
struct _ast2057: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast2058>, Pack<>>>, _ast2061> {}; // CXXMethodDecl As
struct _ast2058: FunctionProtoType<_ast2059, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Persistent<S> &() const
struct _ast2059: LValueReferenceType<ReferenceType<_ast2060>> {}; // LValueReferenceType Persistent<S> &
struct _ast2061: PointerType<_ast2008> {}; // PointerType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ast2076: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str99>, _ast2077>, Pack<>>>, _ast2078>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2077: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2078: PointerType<_ast2079> {}; // PointerType v8::TracedGlobal<v8::Object> *
struct _ast2079: StructOrClassRecordType<RecordType<_ast2075>> {}; // RecordType v8::TracedGlobal<v8::Object>
struct _ast2080: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str100>, _ast2081>, Pack<>>>, _ast2078>> {}; // CXXDestructorDecl ~TracedGlobal
struct _ast2081: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2084: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str99>, _ast2087>, Pack<_ast2085, _ast2086>>>, _ast2078>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2087: FunctionProtoType<_ast64, Pack<_ast136, _ast2088>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2089: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str99>, _ast2091>, Pack<_ast2090>>>, _ast2078>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2091: FunctionProtoType<_ast64, Pack<_ast2092>, UnqualifiedType> {}; // FunctionProtoType void (v8::TracedGlobal<v8::Object> &&)
struct _ast2092: RValueReferenceType<ReferenceType<_ast2079>> {}; // RValueReferenceType v8::TracedGlobal<v8::Object> &&
struct _ast2095: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2097>, Pack<_ast2096>>>, _ast2078> {}; // CXXMethodDecl operator=
struct _ast2097: FunctionProtoType<_ast2100, Pack<_ast2098>, UnqualifiedType> {}; // FunctionProtoType v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _ast2098: RValueReferenceType<ReferenceType<_ast2099>> {}; // RValueReferenceType TracedGlobal<S> &&
struct _ast2100: LValueReferenceType<ReferenceType<_ast2079>> {}; // LValueReferenceType v8::TracedGlobal<v8::Object> &
struct _ast2101: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str99>, _ast2103>, Pack<_ast2102>>>, _ast2078>> {}; // CXXConstructorDecl TracedGlobal
struct _ast2103: FunctionProtoType<_ast64, Pack<_ast2104>, UnqualifiedType> {}; // FunctionProtoType void (const v8::TracedGlobal<v8::Object> &)
struct _ast2104: LValueReferenceType<ReferenceType<_ast2105>> {}; // LValueReferenceType const v8::TracedGlobal<v8::Object> &
struct _ast2105: ConstQualifiedType<_ast2079> {}; // RecordType const v8::TracedGlobal<v8::Object>
struct _ast2106: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2103>, Pack<_ast2107>>>, _ast2078> {}; // CXXMethodDecl operator=
struct _ast2108: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast2109> {}; // CXXMethodDecl IsEmpty
struct _ast2109: PointerType<_ast2105> {}; // PointerType const v8::TracedGlobal<v8::Object> *
struct _ast2110: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast63>, Pack<>>>, _ast2078> {}; // CXXMethodDecl Reset
struct _ast2113: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast2116>, Pack<_ast2114, _ast2115>>>, _ast2078> {}; // CXXMethodDecl Reset
struct _ast2116: FunctionProtoType<_ast64, Pack<_ast136, _ast2117>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2117: LValueReferenceType<ReferenceType<_ast2118>> {}; // LValueReferenceType const Local<S> &
struct _ast2118: ConstQualifiedType<_ast2119> {}; // TemplateSpecializationType const Local<S>
struct _ast2120: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast2122>, Pack<_ast2121>>>, _ast2109> {}; // CXXMethodDecl Get
struct _ast2122: FunctionProtoType<_ast2123, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
struct _ast2126: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast2127>, Pack<>>>, _ast2109> {}; // CXXMethodDecl As
struct _ast2127: FunctionProtoType<_ast2128, Pack<>, ConstQualifiedType> {}; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2128: LValueReferenceType<ReferenceType<_ast2129>> {}; // LValueReferenceType TracedGlobal<S> &
struct _ast2132: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2134>, Pack<_ast2133>>>, _ast2109> {}; // CXXMethodDecl operator==
struct _ast2134: FunctionProtoType<_ast79, Pack<_ast2135>, ConstQualifiedType> {}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2135: LValueReferenceType<ReferenceType<_ast2136>> {}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2136: ConstQualifiedType<_ast2137> {}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2140: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2142>, Pack<_ast2141>>>, _ast2109> {}; // CXXMethodDecl operator==
struct _ast2142: FunctionProtoType<_ast79, Pack<_ast2143>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2143: LValueReferenceType<ReferenceType<_ast2144>> {}; // LValueReferenceType const Local<S> &
struct _ast2144: ConstQualifiedType<_ast2145> {}; // TemplateSpecializationType const Local<S>
struct _ast2148: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2150>, Pack<_ast2149>>>, _ast2109> {}; // CXXMethodDecl operator!=
struct _ast2150: FunctionProtoType<_ast79, Pack<_ast2151>, ConstQualifiedType> {}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2151: LValueReferenceType<ReferenceType<_ast2152>> {}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2152: ConstQualifiedType<_ast2153> {}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2156: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2158>, Pack<_ast2157>>>, _ast2109> {}; // CXXMethodDecl operator!=
struct _ast2158: FunctionProtoType<_ast79, Pack<_ast2159>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2159: LValueReferenceType<ReferenceType<_ast2160>> {}; // LValueReferenceType const Local<S> &
struct _ast2160: ConstQualifiedType<_ast2161> {}; // TemplateSpecializationType const Local<S>
struct _ast2162: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str91>, _ast1868>, Pack<_ast2163>>>, _ast2078> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2164: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str93>, _ast1871>, Pack<>>>, _ast2109> {}; // CXXMethodDecl WrapperClassId
struct _ast2165: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str102>, _ast2168>, Pack<_ast2166, _ast2167>>>, _ast2078> {}; // CXXMethodDecl SetFinalizationCallback
struct _ast2168: FunctionProtoType<_ast64, Pack<_ast2169, _ast2170>, UnqualifiedType> {}; // FunctionProtoType void (void *, WeakCallbackInfo<void>::Callback)
struct _ast2169: PointerType<_ast64> {}; // PointerType void *
struct _ast2225: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str117>, _ast63>, Pack<>>>, _ast2226>> {}; // CXXConstructorDecl Local<T>
struct _ast2226: PointerType<_ast2227> {}; // PointerType Local<T> *
struct _ast2230: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str117>, _ast2232>, Pack<_ast2231>>>, _ast2226>> {}; // CXXConstructorDecl Local<T>
struct _ast2232: FunctionProtoType<_ast64, Pack<_ast2233>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast2234: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast2235> {}; // CXXMethodDecl IsEmpty
struct _ast2235: PointerType<_ast2236> {}; // PointerType const Local<T> *
struct _ast2236: ConstQualifiedType<_ast2227> {}; // InjectedClassNameType const Local<T>
struct _ast2237: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast2226> {}; // CXXMethodDecl Clear
struct _ast2238: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str56>, _ast2239>, Pack<>>>, _ast2235> {}; // CXXMethodDecl operator->
struct _ast2239: FunctionProtoType<_ast2240, Pack<>, ConstQualifiedType> {}; // FunctionProtoType T *() const
struct _ast2240: PointerType<_ast2241> {}; // PointerType T *
struct _ast2242: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast2239>, Pack<>>>, _ast2235> {}; // CXXMethodDecl operator*
struct _ast2245: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2247>, Pack<_ast2246>>>, _ast2235> {}; // CXXMethodDecl operator==
struct _ast2247: FunctionProtoType<_ast79, Pack<_ast2248>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2248: LValueReferenceType<ReferenceType<_ast2249>> {}; // LValueReferenceType const Local<S> &
struct _ast2249: ConstQualifiedType<_ast2250> {}; // TemplateSpecializationType const Local<S>
struct _ast2253: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2255>, Pack<_ast2254>>>, _ast2235> {}; // CXXMethodDecl operator==
struct _ast2255: FunctionProtoType<_ast79, Pack<_ast2256>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2256: LValueReferenceType<ReferenceType<_ast2257>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast2257: ConstQualifiedType<_ast2258> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2261: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2263>, Pack<_ast2262>>>, _ast2235> {}; // CXXMethodDecl operator!=
struct _ast2263: FunctionProtoType<_ast79, Pack<_ast2264>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2264: LValueReferenceType<ReferenceType<_ast2265>> {}; // LValueReferenceType const Local<S> &
struct _ast2265: ConstQualifiedType<_ast2266> {}; // TemplateSpecializationType const Local<S>
struct _ast2269: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2271>, Pack<_ast2270>>>, _ast2235> {}; // CXXMethodDecl operator!=
struct _ast2271: FunctionProtoType<_ast79, Pack<_ast2272>, ConstQualifiedType> {}; // FunctionProtoType bool (const Persistent<S> &) const
struct _ast2272: LValueReferenceType<ReferenceType<_ast2273>> {}; // LValueReferenceType const Persistent<S> &
struct _ast2273: ConstQualifiedType<_ast2274> {}; // TemplateSpecializationType const Persistent<S>
struct _ast2277: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast2279>, Pack<_ast2278>>> {}; // CXXMethodDecl Cast
struct _ast2279: FunctionProtoType<_ast2281, Pack<_ast2280>, UnqualifiedType> {}; // FunctionProtoType Local<T> (Local<S>)
struct _ast2284: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast2285>, Pack<>>>, _ast2235> {}; // CXXMethodDecl As
struct _ast2285: FunctionProtoType<_ast2286, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<S> () const
struct _ast2287: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast2290>, Pack<_ast2288, _ast2289>>> {}; // CXXMethodDecl New
struct _ast2290: FunctionProtoType<_ast2292, Pack<_ast136, _ast2291>, UnqualifiedType> {}; // FunctionProtoType Local<T> (v8::Isolate *, Local<T>)
struct _ast2293: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast2296>, Pack<_ast2294, _ast2295>>> {}; // CXXMethodDecl New
struct _ast2296: FunctionProtoType<_ast2300, Pack<_ast136, _ast2297>, UnqualifiedType> {}; // FunctionProtoType Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _ast2297: LValueReferenceType<ReferenceType<_ast2298>> {}; // LValueReferenceType const PersistentBase<T> &
struct _ast2298: ConstQualifiedType<_ast2299> {}; // TemplateSpecializationType const PersistentBase<T>
struct _ast2301: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast2304>, Pack<_ast2302, _ast2303>>> {}; // CXXMethodDecl New
struct _ast2304: FunctionProtoType<_ast2308, Pack<_ast136, _ast2305>, UnqualifiedType> {}; // FunctionProtoType Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _ast2305: LValueReferenceType<ReferenceType<_ast2306>> {}; // LValueReferenceType const TracedGlobal<T> &
struct _ast2306: ConstQualifiedType<_ast2307> {}; // TemplateSpecializationType const TracedGlobal<T>
struct _ast2310: TypedefNameDecl<TypeDecl<NamedDeclName<_str118>, _ast2311>> {}; // TypeAliasDecl Handle
struct _ast2315: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str119>, _ast63>, Pack<>>>, _ast2316>> {}; // CXXConstructorDecl MaybeLocal<T>
struct _ast2316: PointerType<_ast2317> {}; // PointerType MaybeLocal<T> *
struct _ast2320: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str119>, _ast2322>, Pack<_ast2321>>>, _ast2316>> {}; // CXXConstructorDecl MaybeLocal<T>
struct _ast2322: FunctionProtoType<_ast64, Pack<_ast2323>, UnqualifiedType> {}; // FunctionProtoType void (Local<S>)
struct _ast2324: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast2325> {}; // CXXMethodDecl IsEmpty
struct _ast2325: PointerType<_ast2326> {}; // PointerType const MaybeLocal<T> *
struct _ast2326: ConstQualifiedType<_ast2317> {}; // InjectedClassNameType const MaybeLocal<T>
struct _ast2329: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str68>, _ast2331>, Pack<_ast2330>>>, _ast2325> {}; // CXXMethodDecl ToLocal
struct _ast2331: FunctionProtoType<_ast79, Pack<_ast2332>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<S> *) const
struct _ast2332: PointerType<_ast2333> {}; // PointerType Local<S> *
struct _ast2334: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str70>, _ast2335>, Pack<>>>, _ast2316> {}; // CXXMethodDecl ToLocalChecked
struct _ast2335: FunctionProtoType<_ast2336, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<T> ()
struct _ast2339: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str71>, _ast2341>, Pack<_ast2340>>>, _ast2325> {}; // CXXMethodDecl FromMaybe
struct _ast2341: FunctionProtoType<_ast2343, Pack<_ast2342>, ConstQualifiedType> {}; // FunctionProtoType Local<S> (Local<S>) const
struct _ast2346: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str120>, _ast63>, Pack<>>>, _ast2347>> {}; // CXXConstructorDecl Eternal<T>
struct _ast2347: PointerType<_ast2348> {}; // PointerType Eternal<T> *
struct _ast2351: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str120>, _ast2354>, Pack<_ast2352, _ast2353>>>, _ast2347>> {}; // CXXConstructorDecl Eternal<T>
struct _ast2354: FunctionProtoType<_ast64, Pack<_ast136, _ast2355>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2356: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast2358>, Pack<_ast2357>>>, _ast2360> {}; // CXXMethodDecl Get
struct _ast2358: FunctionProtoType<_ast2359, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2360: PointerType<_ast2361> {}; // PointerType const Eternal<T> *
struct _ast2361: ConstQualifiedType<_ast2348> {}; // InjectedClassNameType const Eternal<T>
struct _ast2362: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast2360> {}; // CXXMethodDecl IsEmpty
struct _ast2365: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast2368>, Pack<_ast2366, _ast2367>>>, _ast2347> {}; // CXXMethodDecl Set
struct _ast2368: FunctionProtoType<_ast64, Pack<_ast136, _ast2369>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2376: TypedefNameDecl<TypeDecl<NamedDeclName<_str126>, _ast2377>> {}; // TypedefDecl Callback
struct _ast2377: PointerType<_ast2378> {}; // PointerType void (*)(const WeakCallbackInfo<T> &)
struct _ast2378: UnqualifiedType<_ast2379> {}; // ParenType void (const WeakCallbackInfo<T> &)
struct _ast2379: FunctionProtoType<_ast64, Pack<_ast2380>, UnqualifiedType> {}; // FunctionProtoType void (const WeakCallbackInfo<T> &)
struct _ast2380: LValueReferenceType<ReferenceType<_ast2381>> {}; // LValueReferenceType const WeakCallbackInfo<T> &
struct _ast2381: ConstQualifiedType<_ast2382> {}; // TemplateSpecializationType const WeakCallbackInfo<T>
struct _ast2383: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str127>, _ast2388>, Pack<_ast2384, _ast2385, _ast2386, _ast2387>>>, _ast2394>> {}; // CXXConstructorDecl WeakCallbackInfo<T>
struct _ast2388: FunctionProtoType<_ast64, Pack<_ast136, _ast2389, _ast2391, _ast2392>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
struct _ast2389: PointerType<_ast2390> {}; // PointerType T *
struct _ast2392: PointerType<_ast2393> {}; // PointerType v8::WeakCallbackInfo::Callback *
struct _ast2393: TypedefType<_ast2376> {}; // TypedefType v8::WeakCallbackInfo::Callback
struct _ast2394: PointerType<_ast2395> {}; // PointerType WeakCallbackInfo<T> *
struct _ast2396: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast2398> {}; // CXXMethodDecl GetIsolate
struct _ast2397: FunctionProtoType<_ast136, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Isolate *() const
struct _ast2398: PointerType<_ast2399> {}; // PointerType const WeakCallbackInfo<T> *
struct _ast2399: ConstQualifiedType<_ast2395> {}; // InjectedClassNameType const WeakCallbackInfo<T>
struct _ast2400: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str130>, _ast2401>, Pack<>>>, _ast2398> {}; // CXXMethodDecl GetParameter
struct _ast2401: FunctionProtoType<_ast2389, Pack<>, ConstQualifiedType> {}; // FunctionProtoType T *() const
struct _ast2402: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str131>, _ast2404>, Pack<_ast2403>>>, _ast2398> {}; // CXXMethodDecl GetInternalField
struct _ast2404: FunctionProtoType<_ast2169, Pack<_ast1849>, ConstQualifiedType> {}; // FunctionProtoType void *(int) const
struct _ast2405: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str133>, _ast2407>, Pack<_ast2406>>>, _ast2398> {}; // CXXMethodDecl SetSecondPassCallback
struct _ast2407: FunctionProtoType<_ast64, Pack<_ast2393>, ConstQualifiedType> {}; // FunctionProtoType void (v8::WeakCallbackInfo::Callback) const
struct _ast2409: TypedefNameDecl<TypeDecl<NamedDeclName<_str126>, _ast2410>> {}; // TypedefDecl Callback
struct _ast2410: PointerType<_ast2411> {}; // PointerType void (*)(const WeakCallbackInfo<void> &)
struct _ast2411: UnqualifiedType<_ast2412> {}; // ParenType void (const WeakCallbackInfo<void> &)
struct _ast2412: FunctionProtoType<_ast64, Pack<_ast2413>, UnqualifiedType> {}; // FunctionProtoType void (const WeakCallbackInfo<void> &)
struct _ast2413: LValueReferenceType<ReferenceType<_ast2414>> {}; // LValueReferenceType const WeakCallbackInfo<void> &
struct _ast2414: ConstQualifiedType<_ast2415> {}; // TemplateSpecializationType const WeakCallbackInfo<void>
struct _ast2417: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str125>, _ast2422>, Pack<_ast2418, _ast2419, _ast2420, _ast2421>>>, _ast2427>> {}; // CXXConstructorDecl WeakCallbackInfo
struct _ast2422: FunctionProtoType<_ast64, Pack<_ast136, _ast2423, _ast2391, _ast2425>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
struct _ast2423: PointerType<_ast2424> {}; // PointerType void *
struct _ast2425: PointerType<_ast2426> {}; // PointerType v8::WeakCallbackInfo<void>::Callback *
struct _ast2426: TypedefType<_ast2409> {}; // TypedefType v8::WeakCallbackInfo<void>::Callback
struct _ast2427: PointerType<_ast2428> {}; // PointerType v8::WeakCallbackInfo<void> *
struct _ast2428: StructOrClassRecordType<RecordType<_ast2408>> {}; // RecordType v8::WeakCallbackInfo<void>
struct _ast2429: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast2430> {}; // CXXMethodDecl GetIsolate
struct _ast2430: PointerType<_ast2431> {}; // PointerType const v8::WeakCallbackInfo<void> *
struct _ast2431: ConstQualifiedType<_ast2428> {}; // RecordType const v8::WeakCallbackInfo<void>
struct _ast2432: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str130>, _ast2433>, Pack<>>>, _ast2430> {}; // CXXMethodDecl GetParameter
struct _ast2433: FunctionProtoType<_ast2423, Pack<>, ConstQualifiedType> {}; // FunctionProtoType void *() const
struct _ast2434: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str131>, _ast2404>, Pack<_ast2435>>>, _ast2430> {}; // CXXMethodDecl GetInternalField
struct _ast2436: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str133>, _ast2438>, Pack<_ast2437>>>, _ast2430> {}; // CXXMethodDecl SetSecondPassCallback
struct _ast2438: FunctionProtoType<_ast64, Pack<_ast2426>, ConstQualifiedType> {}; // FunctionProtoType void (v8::WeakCallbackInfo<void>::Callback) const
struct _ast2444: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast63>, Pack<>>>, _ast2445> {}; // CXXMethodDecl Reset
struct _ast2445: PointerType<_ast2446> {}; // PointerType PersistentBase<T> *
struct _ast2449: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast2452>, Pack<_ast2450, _ast2451>>>, _ast2445> {}; // CXXMethodDecl Reset
struct _ast2452: FunctionProtoType<_ast64, Pack<_ast136, _ast2453>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2453: LValueReferenceType<ReferenceType<_ast2454>> {}; // LValueReferenceType const Local<S> &
struct _ast2454: ConstQualifiedType<_ast2455> {}; // TemplateSpecializationType const Local<S>
struct _ast2458: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast2461>, Pack<_ast2459, _ast2460>>>, _ast2445> {}; // CXXMethodDecl Reset
struct _ast2461: FunctionProtoType<_ast64, Pack<_ast136, _ast2462>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2462: LValueReferenceType<ReferenceType<_ast2463>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast2463: ConstQualifiedType<_ast2464> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2465: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast2466> {}; // CXXMethodDecl IsEmpty
struct _ast2466: PointerType<_ast2467> {}; // PointerType const PersistentBase<T> *
struct _ast2467: ConstQualifiedType<_ast2446> {}; // InjectedClassNameType const PersistentBase<T>
struct _ast2468: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str79>, _ast63>, Pack<>>>, _ast2445> {}; // CXXMethodDecl Empty
struct _ast2469: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast2471>, Pack<_ast2470>>>, _ast2466> {}; // CXXMethodDecl Get
struct _ast2471: FunctionProtoType<_ast2472, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2475: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2477>, Pack<_ast2476>>>, _ast2466> {}; // CXXMethodDecl operator==
struct _ast2477: FunctionProtoType<_ast79, Pack<_ast2478>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2478: LValueReferenceType<ReferenceType<_ast2479>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast2479: ConstQualifiedType<_ast2480> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2483: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2485>, Pack<_ast2484>>>, _ast2466> {}; // CXXMethodDecl operator==
struct _ast2485: FunctionProtoType<_ast79, Pack<_ast2486>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2486: LValueReferenceType<ReferenceType<_ast2487>> {}; // LValueReferenceType const Local<S> &
struct _ast2487: ConstQualifiedType<_ast2488> {}; // TemplateSpecializationType const Local<S>
struct _ast2491: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2493>, Pack<_ast2492>>>, _ast2466> {}; // CXXMethodDecl operator!=
struct _ast2493: FunctionProtoType<_ast79, Pack<_ast2494>, ConstQualifiedType> {}; // FunctionProtoType bool (const PersistentBase<S> &) const
struct _ast2494: LValueReferenceType<ReferenceType<_ast2495>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast2495: ConstQualifiedType<_ast2496> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2499: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2501>, Pack<_ast2500>>>, _ast2466> {}; // CXXMethodDecl operator!=
struct _ast2501: FunctionProtoType<_ast79, Pack<_ast2502>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2502: LValueReferenceType<ReferenceType<_ast2503>> {}; // LValueReferenceType const Local<S> &
struct _ast2503: ConstQualifiedType<_ast2504> {}; // TemplateSpecializationType const Local<S>
struct _ast2507: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str81>, _ast2511>, Pack<_ast2508, _ast2509, _ast2510>>>, _ast2445> {}; // CXXMethodDecl SetWeak
struct _ast2511: FunctionProtoType<_ast64, Pack<_ast2512, _ast2514, _ast1848>, UnqualifiedType> {}; // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ast2512: PointerType<_ast2513> {}; // PointerType P *
struct _ast2515: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str81>, _ast63>, Pack<>>>, _ast2445> {}; // CXXMethodDecl SetWeak
struct _ast2518: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str87>, _ast2519>, Pack<>>>, _ast2445> {}; // CXXMethodDecl ClearWeak
struct _ast2519: FunctionProtoType<_ast2520, Pack<>, UnqualifiedType> {}; // FunctionProtoType P *()
struct _ast2520: PointerType<_ast2521> {}; // PointerType P *
struct _ast2522: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str87>, _ast63>, Pack<>>>, _ast2445> {}; // CXXMethodDecl ClearWeak
struct _ast2523: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str88>, _ast1861>, Pack<_ast2524>>>, _ast2445> {}; // CXXMethodDecl AnnotateStrongRetainer
struct _ast2525: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str90>, _ast78>, Pack<>>>, _ast2466> {}; // CXXMethodDecl IsWeak
struct _ast2526: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str91>, _ast1868>, Pack<_ast2527>>>, _ast2445> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2528: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str93>, _ast1871>, Pack<>>>, _ast2466> {}; // CXXMethodDecl WrapperClassId
struct _ast2529: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str138>, _ast2531>, Pack<_ast2530>>>, _ast2445>> {}; // CXXConstructorDecl PersistentBase<T>
struct _ast2531: FunctionProtoType<_ast64, Pack<_ast2532>, UnqualifiedType> {}; // FunctionProtoType void (const PersistentBase<T> &)
struct _ast2532: LValueReferenceType<ReferenceType<_ast2467>> {}; // LValueReferenceType const PersistentBase<T> &
struct _ast2533: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2531>, Pack<_ast2534>>>, _ast2445> {}; // CXXMethodDecl operator=
struct _ast2537: TypedefNameDecl<TypeDecl<NamedDeclName<_str139>, _ast2538>> {}; // TypedefDecl NonCopyablePersistent
struct _ast2543: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str141>, _ast2546>, Pack<_ast2544, _ast2545>>> {}; // CXXMethodDecl Copy
struct _ast2546: FunctionProtoType<_ast64, Pack<_ast2547, _ast2550>, UnqualifiedType> {}; // FunctionProtoType void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ast2547: LValueReferenceType<ReferenceType<_ast2548>> {}; // LValueReferenceType const Persistent<S, M> &
struct _ast2548: ConstQualifiedType<_ast2549> {}; // TemplateSpecializationType const Persistent<S, M>
struct _ast2550: PointerType<_ast2551> {}; // PointerType v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ast2551: TypedefType<_ast2537> {}; // TypedefType v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ast2554: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str144>, _ast63>, Pack<>>> {}; // CXXMethodDecl Uncompilable
struct _ast2559: TypedefNameDecl<TypeDecl<NamedDeclName<_str147>, _ast2560>> {}; // TypedefDecl CopyablePersistent
struct _ast2565: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str141>, _ast2568>, Pack<_ast2566, _ast2567>>> {}; // CXXMethodDecl Copy
struct _ast2568: FunctionProtoType<_ast64, Pack<_ast2569, _ast2572>, UnqualifiedType> {}; // FunctionProtoType void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ast2569: LValueReferenceType<ReferenceType<_ast2570>> {}; // LValueReferenceType const Persistent<S, M> &
struct _ast2570: ConstQualifiedType<_ast2571> {}; // TemplateSpecializationType const Persistent<S, M>
struct _ast2572: PointerType<_ast2573> {}; // PointerType v8::CopyablePersistentTraits::CopyablePersistent *
struct _ast2573: TypedefType<_ast2559> {}; // TypedefType v8::CopyablePersistentTraits::CopyablePersistent
struct _ast2578: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str148>, _ast63>, Pack<>>>, _ast2579>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2579: PointerType<_ast2580> {}; // PointerType Persistent<T, M> *
struct _ast2583: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str148>, _ast2586>, Pack<_ast2584, _ast2585>>>, _ast2579>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2586: FunctionProtoType<_ast64, Pack<_ast136, _ast2587>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2591: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str148>, _ast2594>, Pack<_ast2592, _ast2593>>>, _ast2579>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2594: FunctionProtoType<_ast64, Pack<_ast136, _ast2595>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
struct _ast2595: LValueReferenceType<ReferenceType<_ast2596>> {}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2596: ConstQualifiedType<_ast2597> {}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2598: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str148>, _ast2600>, Pack<_ast2599>>>, _ast2579>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2600: FunctionProtoType<_ast64, Pack<_ast2601>, UnqualifiedType> {}; // FunctionProtoType void (const Persistent<T, M> &)
struct _ast2601: LValueReferenceType<ReferenceType<_ast2602>> {}; // LValueReferenceType const Persistent<T, M> &
struct _ast2602: ConstQualifiedType<_ast2580> {}; // InjectedClassNameType const Persistent<T, M>
struct _ast2606: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str148>, _ast2608>, Pack<_ast2607>>>, _ast2579>> {}; // CXXConstructorDecl Persistent<T, M>
struct _ast2608: FunctionProtoType<_ast64, Pack<_ast2609>, UnqualifiedType> {}; // FunctionProtoType void (const Persistent<S, M2> &)
struct _ast2609: LValueReferenceType<ReferenceType<_ast2610>> {}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2610: ConstQualifiedType<_ast2611> {}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2612: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2614>, Pack<_ast2613>>>, _ast2579> {}; // CXXMethodDecl operator=
struct _ast2614: FunctionProtoType<_ast2615, Pack<_ast2601>, UnqualifiedType> {}; // FunctionProtoType Persistent<T, M> &(const Persistent<T, M> &)
struct _ast2615: LValueReferenceType<ReferenceType<_ast2580>> {}; // LValueReferenceType Persistent<T, M> &
struct _ast2619: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2621>, Pack<_ast2620>>>, _ast2579> {}; // CXXMethodDecl operator=
struct _ast2621: FunctionProtoType<_ast2615, Pack<_ast2622>, UnqualifiedType> {}; // FunctionProtoType Persistent<T, M> &(const Persistent<S, M2> &)
struct _ast2622: LValueReferenceType<ReferenceType<_ast2623>> {}; // LValueReferenceType const Persistent<S, M2> &
struct _ast2623: ConstQualifiedType<_ast2624> {}; // TemplateSpecializationType const Persistent<S, M2>
struct _ast2625: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str149>, _ast63>, Pack<>>>, _ast2579>> {}; // CXXDestructorDecl ~Persistent<T, M>
struct _ast2628: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast2630>, Pack<_ast2629>>> {}; // CXXMethodDecl Cast
struct _ast2630: FunctionProtoType<_ast2634, Pack<_ast2631>, UnqualifiedType> {}; // FunctionProtoType Persistent<T> &(const Persistent<S> &)
struct _ast2631: LValueReferenceType<ReferenceType<_ast2632>> {}; // LValueReferenceType const Persistent<S> &
struct _ast2632: ConstQualifiedType<_ast2633> {}; // TemplateSpecializationType const Persistent<S>
struct _ast2634: LValueReferenceType<ReferenceType<_ast2635>> {}; // LValueReferenceType Persistent<T> &
struct _ast2638: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast2639>, Pack<>>>, _ast2642> {}; // CXXMethodDecl As
struct _ast2639: FunctionProtoType<_ast2640, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Persistent<S> &() const
struct _ast2640: LValueReferenceType<ReferenceType<_ast2641>> {}; // LValueReferenceType Persistent<S> &
struct _ast2642: PointerType<_ast2602> {}; // PointerType const Persistent<T, M> *
struct _ast2645: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str150>, _ast63>, Pack<>>>, _ast2646>> {}; // CXXConstructorDecl Global<T>
struct _ast2646: PointerType<_ast2647> {}; // PointerType Global<T> *
struct _ast2650: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str150>, _ast2653>, Pack<_ast2651, _ast2652>>>, _ast2646>> {}; // CXXConstructorDecl Global<T>
struct _ast2653: FunctionProtoType<_ast64, Pack<_ast136, _ast2654>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2657: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str150>, _ast2660>, Pack<_ast2658, _ast2659>>>, _ast2646>> {}; // CXXConstructorDecl Global<T>
struct _ast2660: FunctionProtoType<_ast64, Pack<_ast136, _ast2661>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
struct _ast2661: LValueReferenceType<ReferenceType<_ast2662>> {}; // LValueReferenceType const PersistentBase<S> &
struct _ast2662: ConstQualifiedType<_ast2663> {}; // TemplateSpecializationType const PersistentBase<S>
struct _ast2664: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str150>, _ast2666>, Pack<_ast2665>>>, _ast2646>> {}; // CXXConstructorDecl Global<T>
struct _ast2666: FunctionProtoType<_ast64, Pack<_ast2667>, UnqualifiedType> {}; // FunctionProtoType void (Global<T> &&)
struct _ast2667: RValueReferenceType<ReferenceType<_ast2647>> {}; // RValueReferenceType Global<T> &&
struct _ast2668: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str151>, _ast63>, Pack<>>>, _ast2646>> {}; // CXXDestructorDecl ~Global<T>
struct _ast2671: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2673>, Pack<_ast2672>>>, _ast2646> {}; // CXXMethodDecl operator=
struct _ast2673: FunctionProtoType<_ast2676, Pack<_ast2674>, UnqualifiedType> {}; // FunctionProtoType Global<T> &(Global<S> &&)
struct _ast2674: RValueReferenceType<ReferenceType<_ast2675>> {}; // RValueReferenceType Global<S> &&
struct _ast2676: LValueReferenceType<ReferenceType<_ast2647>> {}; // LValueReferenceType Global<T> &
struct _ast2677: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str152>, _ast2678>, Pack<>>>, _ast2646> {}; // CXXMethodDecl Pass
struct _ast2678: FunctionProtoType<_ast2647, Pack<>, UnqualifiedType> {}; // FunctionProtoType Global<T> ()
struct _ast2679: TypedefNameDecl<TypeDecl<NamedDeclName<_str153>, _ast64>> {}; // TypedefDecl MoveOnlyTypeForCPP03
struct _ast2680: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str150>, _ast2682>, Pack<_ast2681>>>, _ast2646>> {}; // CXXConstructorDecl Global<T>
struct _ast2682: FunctionProtoType<_ast64, Pack<_ast2683>, UnqualifiedType> {}; // FunctionProtoType void (const Global<T> &)
struct _ast2683: LValueReferenceType<ReferenceType<_ast2684>> {}; // LValueReferenceType const Global<T> &
struct _ast2684: ConstQualifiedType<_ast2647> {}; // InjectedClassNameType const Global<T>
struct _ast2685: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2682>, Pack<_ast2686>>>, _ast2646> {}; // CXXMethodDecl operator=
struct _ast2688: TypedefNameDecl<TypeDecl<NamedDeclName<_str154>, _ast2689>> {}; // TypeAliasDecl UniquePersistent
struct _ast2693: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str155>, _ast63>, Pack<>>>, _ast2694>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2694: PointerType<_ast2695> {}; // PointerType TracedGlobal<T> *
struct _ast2696: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str156>, _ast63>, Pack<>>>, _ast2694>> {}; // CXXDestructorDecl ~TracedGlobal<T>
struct _ast2699: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str155>, _ast2702>, Pack<_ast2700, _ast2701>>>, _ast2694>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2702: FunctionProtoType<_ast64, Pack<_ast136, _ast2703>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<S>)
struct _ast2704: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str155>, _ast2706>, Pack<_ast2705>>>, _ast2694>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2706: FunctionProtoType<_ast64, Pack<_ast2707>, UnqualifiedType> {}; // FunctionProtoType void (TracedGlobal<T> &&)
struct _ast2707: RValueReferenceType<ReferenceType<_ast2695>> {}; // RValueReferenceType TracedGlobal<T> &&
struct _ast2710: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2712>, Pack<_ast2711>>>, _ast2694> {}; // CXXMethodDecl operator=
struct _ast2712: FunctionProtoType<_ast2715, Pack<_ast2713>, UnqualifiedType> {}; // FunctionProtoType TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ast2713: RValueReferenceType<ReferenceType<_ast2714>> {}; // RValueReferenceType TracedGlobal<S> &&
struct _ast2715: LValueReferenceType<ReferenceType<_ast2695>> {}; // LValueReferenceType TracedGlobal<T> &
struct _ast2716: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str155>, _ast2718>, Pack<_ast2717>>>, _ast2694>> {}; // CXXConstructorDecl TracedGlobal<T>
struct _ast2718: FunctionProtoType<_ast64, Pack<_ast2719>, UnqualifiedType> {}; // FunctionProtoType void (const TracedGlobal<T> &)
struct _ast2719: LValueReferenceType<ReferenceType<_ast2720>> {}; // LValueReferenceType const TracedGlobal<T> &
struct _ast2720: ConstQualifiedType<_ast2695> {}; // InjectedClassNameType const TracedGlobal<T>
struct _ast2721: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2718>, Pack<_ast2722>>>, _ast2694> {}; // CXXMethodDecl operator=
struct _ast2723: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str54>, _ast78>, Pack<>>>, _ast2724> {}; // CXXMethodDecl IsEmpty
struct _ast2724: PointerType<_ast2720> {}; // PointerType const TracedGlobal<T> *
struct _ast2725: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast63>, Pack<>>>, _ast2694> {}; // CXXMethodDecl Reset
struct _ast2728: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast2731>, Pack<_ast2729, _ast2730>>>, _ast2694> {}; // CXXMethodDecl Reset
struct _ast2731: FunctionProtoType<_ast64, Pack<_ast136, _ast2732>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const Local<S> &)
struct _ast2732: LValueReferenceType<ReferenceType<_ast2733>> {}; // LValueReferenceType const Local<S> &
struct _ast2733: ConstQualifiedType<_ast2734> {}; // TemplateSpecializationType const Local<S>
struct _ast2735: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast2737>, Pack<_ast2736>>>, _ast2724> {}; // CXXMethodDecl Get
struct _ast2737: FunctionProtoType<_ast2738, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<T> (v8::Isolate *) const
struct _ast2741: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str61>, _ast2742>, Pack<>>>, _ast2724> {}; // CXXMethodDecl As
struct _ast2742: FunctionProtoType<_ast2743, Pack<>, ConstQualifiedType> {}; // FunctionProtoType TracedGlobal<S> &() const
struct _ast2743: LValueReferenceType<ReferenceType<_ast2744>> {}; // LValueReferenceType TracedGlobal<S> &
struct _ast2747: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2749>, Pack<_ast2748>>>, _ast2724> {}; // CXXMethodDecl operator==
struct _ast2749: FunctionProtoType<_ast79, Pack<_ast2750>, ConstQualifiedType> {}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2750: LValueReferenceType<ReferenceType<_ast2751>> {}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2751: ConstQualifiedType<_ast2752> {}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2755: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast2757>, Pack<_ast2756>>>, _ast2724> {}; // CXXMethodDecl operator==
struct _ast2757: FunctionProtoType<_ast79, Pack<_ast2758>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2758: LValueReferenceType<ReferenceType<_ast2759>> {}; // LValueReferenceType const Local<S> &
struct _ast2759: ConstQualifiedType<_ast2760> {}; // TemplateSpecializationType const Local<S>
struct _ast2763: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2765>, Pack<_ast2764>>>, _ast2724> {}; // CXXMethodDecl operator!=
struct _ast2765: FunctionProtoType<_ast79, Pack<_ast2766>, ConstQualifiedType> {}; // FunctionProtoType bool (const TracedGlobal<S> &) const
struct _ast2766: LValueReferenceType<ReferenceType<_ast2767>> {}; // LValueReferenceType const TracedGlobal<S> &
struct _ast2767: ConstQualifiedType<_ast2768> {}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast2771: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast2773>, Pack<_ast2772>>>, _ast2724> {}; // CXXMethodDecl operator!=
struct _ast2773: FunctionProtoType<_ast79, Pack<_ast2774>, ConstQualifiedType> {}; // FunctionProtoType bool (const Local<S> &) const
struct _ast2774: LValueReferenceType<ReferenceType<_ast2775>> {}; // LValueReferenceType const Local<S> &
struct _ast2775: ConstQualifiedType<_ast2776> {}; // TemplateSpecializationType const Local<S>
struct _ast2777: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str91>, _ast1868>, Pack<_ast2778>>>, _ast2694> {}; // CXXMethodDecl SetWrapperClassId
struct _ast2779: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str93>, _ast1871>, Pack<>>>, _ast2724> {}; // CXXMethodDecl WrapperClassId
struct _ast2780: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str102>, _ast2168>, Pack<_ast2781, _ast2782>>>, _ast2694> {}; // CXXMethodDecl SetFinalizationCallback
struct _ast2785: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str157>, _ast2787>, Pack<_ast2786>>>, _ast2788>> {}; // CXXConstructorDecl HandleScope
struct _ast2787: FunctionProtoType<_ast64, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *)
struct _ast2788: PointerType<_ast2789> {}; // PointerType v8::HandleScope *
struct _ast2789: StructOrClassRecordType<RecordType<_ast2783>> {}; // RecordType v8::HandleScope
struct _ast2790: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str158>, _ast2791>, Pack<>>>, _ast2788>> {}; // CXXDestructorDecl ~HandleScope
struct _ast2791: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2792: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str159>, _ast2794>, Pack<_ast2793>>> {}; // CXXMethodDecl NumberOfHandles
struct _ast2794: FunctionProtoType<_ast1849, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType int (v8::Isolate *)
struct _ast2795: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast2796> {}; // CXXMethodDecl GetIsolate
struct _ast2796: PointerType<_ast2797> {}; // PointerType const v8::HandleScope *
struct _ast2797: ConstQualifiedType<_ast2789> {}; // RecordType const v8::HandleScope
struct _ast2798: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str157>, _ast2800>, Pack<_ast2799>>>, _ast2788>> {}; // CXXConstructorDecl HandleScope
struct _ast2800: FunctionProtoType<_ast64, Pack<_ast2801>, UnqualifiedType> {}; // FunctionProtoType void (const v8::HandleScope &)
struct _ast2801: LValueReferenceType<ReferenceType<_ast2797>> {}; // LValueReferenceType const v8::HandleScope &
struct _ast2802: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2800>, Pack<_ast2803>>>, _ast2788> {}; // CXXMethodDecl operator=
struct _ast2804: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str157>, _ast2805>, Pack<>>>, _ast2788>> {}; // CXXConstructorDecl HandleScope
struct _ast2805: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2806: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str160>, _ast2787>, Pack<_ast2807>>>, _ast2788> {}; // CXXMethodDecl Initialize
struct _ast2808: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str161>, _ast2811>, Pack<_ast2809, _ast2810>>> {}; // CXXMethodDecl CreateHandle
struct _ast2811: FunctionProtoType<_ast2815, Pack<_ast2812, _ast2814>, UnqualifiedType> {}; // FunctionProtoType internal::Address *(internal::Isolate *, internal::Address)
struct _ast2812: PointerType<_ast2813> {}; // PointerType internal::Isolate *
struct _ast2815: PointerType<_ast2814> {}; // PointerType internal::Address *
struct _ast2817: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str113>, _ast2787>, Pack<_ast2818>>>, _ast2819>> {}; // CXXConstructorDecl EscapableHandleScope
struct _ast2819: PointerType<_ast2820> {}; // PointerType v8::EscapableHandleScope *
struct _ast2820: StructOrClassRecordType<RecordType<_ast2217>> {}; // RecordType v8::EscapableHandleScope
struct _ast2821: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str163>, _ast2822>, Pack<>>>, _ast2819>> {}; // CXXDestructorDecl ~EscapableHandleScope
struct _ast2822: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2825: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str164>, _ast2827>, Pack<_ast2826>>>, _ast2819> {}; // CXXMethodDecl Escape
struct _ast2827: FunctionProtoType<_ast2829, Pack<_ast2828>, UnqualifiedType> {}; // FunctionProtoType Local<T> (Local<T>)
struct _ast2832: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str165>, _ast2834>, Pack<_ast2833>>>, _ast2819> {}; // CXXMethodDecl EscapeMaybe
struct _ast2834: FunctionProtoType<_ast2836, Pack<_ast2835>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<T> (MaybeLocal<T>)
struct _ast2837: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str113>, _ast2839>, Pack<_ast2838>>>, _ast2819>> {}; // CXXConstructorDecl EscapableHandleScope
struct _ast2839: FunctionProtoType<_ast64, Pack<_ast2840>, UnqualifiedType> {}; // FunctionProtoType void (const v8::EscapableHandleScope &)
struct _ast2840: LValueReferenceType<ReferenceType<_ast2841>> {}; // LValueReferenceType const v8::EscapableHandleScope &
struct _ast2841: ConstQualifiedType<_ast2820> {}; // RecordType const v8::EscapableHandleScope
struct _ast2842: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2839>, Pack<_ast2843>>>, _ast2819> {}; // CXXMethodDecl operator=
struct _ast2846: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str166>, _ast2787>, Pack<_ast2847>>>, _ast2848>> {}; // CXXConstructorDecl SealHandleScope
struct _ast2848: PointerType<_ast2849> {}; // PointerType v8::SealHandleScope *
struct _ast2849: StructOrClassRecordType<RecordType<_ast2844>> {}; // RecordType v8::SealHandleScope
struct _ast2850: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str167>, _ast2851>, Pack<>>>, _ast2848>> {}; // CXXDestructorDecl ~SealHandleScope
struct _ast2851: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast2852: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str166>, _ast2854>, Pack<_ast2853>>>, _ast2848>> {}; // CXXConstructorDecl SealHandleScope
struct _ast2854: FunctionProtoType<_ast64, Pack<_ast2855>, UnqualifiedType> {}; // FunctionProtoType void (const v8::SealHandleScope &)
struct _ast2855: LValueReferenceType<ReferenceType<_ast2856>> {}; // LValueReferenceType const v8::SealHandleScope &
struct _ast2856: ConstQualifiedType<_ast2849> {}; // RecordType const v8::SealHandleScope
struct _ast2857: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2854>, Pack<_ast2858>>>, _ast2848> {}; // CXXMethodDecl operator=
struct _ast2862: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str169>, _ast2863>, Pack<>>>, _ast2865> {}; // CXXMethodDecl GetResourceName
struct _ast2863: FunctionProtoType<_ast2864, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast2865: PointerType<_ast2866> {}; // PointerType v8::ScriptOrModule *
struct _ast2866: StructOrClassRecordType<RecordType<_ast2860>> {}; // RecordType v8::ScriptOrModule
struct _ast2867: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str170>, _ast2868>, Pack<>>>, _ast2865> {}; // CXXMethodDecl GetHostDefinedOptions
struct _ast2868: FunctionProtoType<_ast2869, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> ()
struct _ast2871: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast2874>, Pack<_ast2872, _ast2873>>> {}; // CXXMethodDecl New
struct _ast2874: FunctionProtoType<_ast2875, Pack<_ast136, _ast1849>, UnqualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _ast2876: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str172>, _ast2877>, Pack<>>>, _ast2878> {}; // CXXMethodDecl Length
struct _ast2877: FunctionProtoType<_ast1849, Pack<>, ConstQualifiedType> {}; // FunctionProtoType int () const
struct _ast2878: PointerType<_ast2879> {}; // PointerType const v8::PrimitiveArray *
struct _ast2879: ConstQualifiedType<_ast2880> {}; // RecordType const v8::PrimitiveArray
struct _ast2880: StructOrClassRecordType<RecordType<_ast52>> {}; // RecordType v8::PrimitiveArray
struct _ast2881: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast2885>, Pack<_ast2882, _ast2883, _ast2884>>>, _ast2887> {}; // CXXMethodDecl Set
struct _ast2885: FunctionProtoType<_ast64, Pack<_ast136, _ast1849, _ast2886>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, int, Local<v8::Primitive>)
struct _ast2887: PointerType<_ast2880> {}; // PointerType v8::PrimitiveArray *
struct _ast2888: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast2891>, Pack<_ast2889, _ast2890>>>, _ast2887> {}; // CXXMethodDecl Get
struct _ast2891: FunctionProtoType<_ast2892, Pack<_ast136, _ast1849>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, int)
struct _ast2895: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str174>, _ast2900>, Pack<_ast2896, _ast2897, _ast2898, _ast2899>>>, _ast2901>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2900: FunctionProtoType<_ast64, Pack<_ast79, _ast79, _ast79, _ast79>, UnqualifiedType> {}; // FunctionProtoType void (bool, bool, bool, bool)
struct _ast2901: PointerType<_ast2902> {}; // PointerType v8::ScriptOriginOptions *
struct _ast2902: StructOrClassRecordType<RecordType<_ast2893>> {}; // RecordType v8::ScriptOriginOptions
struct _ast2903: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str174>, _ast2905>, Pack<_ast2904>>>, _ast2901>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2905: FunctionProtoType<_ast64, Pack<_ast1849>, UnqualifiedType> {}; // FunctionProtoType void (int)
struct _ast2906: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str180>, _ast78>, Pack<>>>, _ast2907> {}; // CXXMethodDecl IsSharedCrossOrigin
struct _ast2907: PointerType<_ast2908> {}; // PointerType const v8::ScriptOriginOptions *
struct _ast2908: ConstQualifiedType<_ast2902> {}; // RecordType const v8::ScriptOriginOptions
struct _ast2909: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str181>, _ast78>, Pack<>>>, _ast2907> {}; // CXXMethodDecl IsOpaque
struct _ast2910: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str182>, _ast78>, Pack<>>>, _ast2907> {}; // CXXMethodDecl IsWasm
struct _ast2911: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str183>, _ast78>, Pack<>>>, _ast2907> {}; // CXXMethodDecl IsModule
struct _ast2912: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str184>, _ast2877>, Pack<>>>, _ast2907> {}; // CXXMethodDecl Flags
struct _ast2913: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str174>, _ast2915>, Pack<_ast2914>>>, _ast2901>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2915: FunctionProtoType<_ast64, Pack<_ast2916>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ScriptOriginOptions &) noexcept
struct _ast2916: LValueReferenceType<ReferenceType<_ast2908>> {}; // LValueReferenceType const v8::ScriptOriginOptions &
struct _ast2917: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str174>, _ast2919>, Pack<_ast2918>>>, _ast2901>> {}; // CXXConstructorDecl ScriptOriginOptions
struct _ast2919: FunctionProtoType<_ast64, Pack<_ast2920>, UnqualifiedType> {}; // FunctionProtoType void (v8::ScriptOriginOptions &&) noexcept
struct _ast2920: RValueReferenceType<ReferenceType<_ast2902>> {}; // RValueReferenceType v8::ScriptOriginOptions &&
struct _ast2921: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str185>, _ast165>, Pack<>>>, _ast2901>> {}; // CXXDestructorDecl ~ScriptOriginOptions
struct _ast2922: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2924>, Pack<_ast2923>>>, _ast2901> {}; // CXXMethodDecl operator=
struct _ast2924: FunctionProtoType<_ast2925, Pack<_ast2916>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
struct _ast2925: LValueReferenceType<ReferenceType<_ast2902>> {}; // LValueReferenceType v8::ScriptOriginOptions &
struct _ast2926: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2928>, Pack<_ast2927>>>, _ast2901> {}; // CXXMethodDecl operator=
struct _ast2928: FunctionProtoType<_ast2925, Pack<_ast2920>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _ast2931: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str186>, _ast2942>, Pack<_ast2932, _ast2933, _ast2934, _ast2935, _ast2936, _ast2937, _ast2938, _ast2939, _ast2940, _ast2941>>>, _ast2953>> {}; // CXXConstructorDecl ScriptOrigin
struct _ast2942: FunctionProtoType<_ast64, Pack<_ast2943, _ast2944, _ast2945, _ast2946, _ast2947, _ast2948, _ast2949, _ast2950, _ast2951, _ast2952>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _ast2953: PointerType<_ast2954> {}; // PointerType v8::ScriptOrigin *
struct _ast2954: StructOrClassRecordType<RecordType<_ast2929>> {}; // RecordType v8::ScriptOrigin
struct _ast2955: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str195>, _ast2956>, Pack<>>>, _ast2958> {}; // CXXMethodDecl ResourceName
struct _ast2956: FunctionProtoType<_ast2957, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast2958: PointerType<_ast2959> {}; // PointerType const v8::ScriptOrigin *
struct _ast2959: ConstQualifiedType<_ast2954> {}; // RecordType const v8::ScriptOrigin
struct _ast2960: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str196>, _ast2961>, Pack<>>>, _ast2958> {}; // CXXMethodDecl ResourceLineOffset
struct _ast2961: FunctionProtoType<_ast2962, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Integer> () const
struct _ast2963: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str197>, _ast2964>, Pack<>>>, _ast2958> {}; // CXXMethodDecl ResourceColumnOffset
struct _ast2964: FunctionProtoType<_ast2965, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Integer> () const
struct _ast2966: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str198>, _ast2967>, Pack<>>>, _ast2958> {}; // CXXMethodDecl ScriptID
struct _ast2967: FunctionProtoType<_ast2968, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Integer> () const
struct _ast2969: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str199>, _ast2970>, Pack<>>>, _ast2958> {}; // CXXMethodDecl SourceMapUrl
struct _ast2970: FunctionProtoType<_ast2971, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast2972: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str200>, _ast2973>, Pack<>>>, _ast2958> {}; // CXXMethodDecl HostDefinedOptions
struct _ast2973: FunctionProtoType<_ast2974, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::PrimitiveArray> () const
struct _ast2975: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str201>, _ast2976>, Pack<>>>, _ast2958> {}; // CXXMethodDecl Options
struct _ast2976: FunctionProtoType<_ast2902, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::ScriptOriginOptions () const
struct _ast2977: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str186>, _ast2979>, Pack<_ast2978>>>, _ast2953>> {}; // CXXConstructorDecl ScriptOrigin
struct _ast2979: FunctionProtoType<_ast64, Pack<_ast2980>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ScriptOrigin &)
struct _ast2980: LValueReferenceType<ReferenceType<_ast2959>> {}; // LValueReferenceType const v8::ScriptOrigin &
struct _ast2981: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast2983>, Pack<_ast2982>>>, _ast2953> {}; // CXXMethodDecl operator=
struct _ast2983: FunctionProtoType<_ast2985, Pack<_ast2984>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ast2984: RValueReferenceType<ReferenceType<_ast2954>> {}; // RValueReferenceType v8::ScriptOrigin &&
struct _ast2985: LValueReferenceType<ReferenceType<_ast2954>> {}; // LValueReferenceType v8::ScriptOrigin &
struct _ast2986: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str186>, _ast2988>, Pack<_ast2987>>>, _ast2953>> {}; // CXXConstructorDecl ScriptOrigin
struct _ast2988: FunctionProtoType<_ast64, Pack<_ast2984>, UnqualifiedType> {}; // FunctionProtoType void (v8::ScriptOrigin &&)
struct _ast2991: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str203>, _ast2992>, Pack<>>>, _ast2994> {}; // CXXMethodDecl BindToCurrentContext
struct _ast2992: FunctionProtoType<_ast2993, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Script> ()
struct _ast2994: PointerType<_ast2995> {}; // PointerType v8::UnboundScript *
struct _ast2995: StructOrClassRecordType<RecordType<_ast2989>> {}; // RecordType v8::UnboundScript
struct _ast2996: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str204>, _ast2997>, Pack<>>>, _ast2994> {}; // CXXMethodDecl GetId
struct _ast2997: FunctionProtoType<_ast1849, Pack<>, UnqualifiedType> {}; // FunctionProtoType int ()
struct _ast2998: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str205>, _ast2999>, Pack<>>>, _ast2994> {}; // CXXMethodDecl GetScriptName
struct _ast2999: FunctionProtoType<_ast3000, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast3001: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str206>, _ast3002>, Pack<>>>, _ast2994> {}; // CXXMethodDecl GetSourceURL
struct _ast3002: FunctionProtoType<_ast3003, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast3004: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str207>, _ast3005>, Pack<>>>, _ast2994> {}; // CXXMethodDecl GetSourceMappingURL
struct _ast3005: FunctionProtoType<_ast3006, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast3007: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str208>, _ast3009>, Pack<_ast3008>>>, _ast2994> {}; // CXXMethodDecl GetLineNumber
struct _ast3009: FunctionProtoType<_ast1849, Pack<_ast1849>, UnqualifiedType> {}; // FunctionProtoType int (int)
struct _ast3015: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str208>, _ast2997>, Pack<>>>, _ast3016> {}; // CXXMethodDecl GetLineNumber
struct _ast3016: PointerType<_ast3017> {}; // PointerType v8::Location *
struct _ast3017: StructOrClassRecordType<RecordType<_ast3013>> {}; // RecordType v8::Location
struct _ast3018: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str213>, _ast2997>, Pack<>>>, _ast3016> {}; // CXXMethodDecl GetColumnNumber
struct _ast3019: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str212>, _ast3022>, Pack<_ast3020, _ast3021>>>, _ast3016>> {}; // CXXConstructorDecl Location
struct _ast3022: FunctionProtoType<_ast64, Pack<_ast1849, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void (int, int)
struct _ast3032: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str224>, _ast3033>, Pack<>>>, _ast3035> {}; // CXXMethodDecl GetStatus
struct _ast3033: FunctionProtoType<_ast3034, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Module::Status () const
struct _ast3034: EnumType<_ast3025, _ast1849> {}; // EnumType v8::Module::Status
struct _ast3035: PointerType<_ast3036> {}; // PointerType const v8::Module *
struct _ast3036: ConstQualifiedType<_ast3037> {}; // RecordType const v8::Module
struct _ast3037: StructOrClassRecordType<RecordType<_ast3023>> {}; // RecordType v8::Module
struct _ast3038: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str225>, _ast3039>, Pack<>>>, _ast3035> {}; // CXXMethodDecl GetException
struct _ast3039: FunctionProtoType<_ast3040, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast3041: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str226>, _ast2877>, Pack<>>>, _ast3035> {}; // CXXMethodDecl GetModuleRequestsLength
struct _ast3042: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str227>, _ast3044>, Pack<_ast3043>>>, _ast3035> {}; // CXXMethodDecl GetModuleRequest
struct _ast3044: FunctionProtoType<_ast3045, Pack<_ast1849>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> (int) const
struct _ast3046: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str229>, _ast3048>, Pack<_ast3047>>>, _ast3035> {}; // CXXMethodDecl GetModuleRequestLocation
struct _ast3048: FunctionProtoType<_ast3017, Pack<_ast1849>, ConstQualifiedType> {}; // FunctionProtoType v8::Location (int) const
struct _ast3049: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str230>, _ast2877>, Pack<>>>, _ast3035> {}; // CXXMethodDecl GetIdentityHash
struct _ast3050: TypedefNameDecl<TypeDecl<NamedDeclName<_str231>, _ast3051>> {}; // TypedefDecl ResolveCallback
struct _ast3051: PointerType<_ast3052> {}; // PointerType MaybeLocal<v8::Module> (*)(Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ast3052: UnqualifiedType<_ast3053> {}; // ParenType MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ast3053: FunctionProtoType<_ast3057, Pack<_ast3054, _ast3055, _ast3056>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ast3058: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str232>, _ast3061>, Pack<_ast3059, _ast3060>>>, _ast3065> {}; // CXXMethodDecl InstantiateModule
struct _ast3061: FunctionProtoType<_ast3064, Pack<_ast3062, _ast3063>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
struct _ast3063: TypedefType<_ast3050> {}; // TypedefType v8::Module::ResolveCallback
struct _ast3065: PointerType<_ast3037> {}; // PointerType v8::Module *
struct _ast3066: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str234>, _ast3068>, Pack<_ast3067>>>, _ast3065> {}; // CXXMethodDecl Evaluate
struct _ast3068: FunctionProtoType<_ast3070, Pack<_ast3069>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3071: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str235>, _ast3072>, Pack<>>>, _ast3065> {}; // CXXMethodDecl GetModuleNamespace
struct _ast3072: FunctionProtoType<_ast3073, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast3074: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str236>, _ast3075>, Pack<>>>, _ast3065> {}; // CXXMethodDecl GetUnboundModuleScript
struct _ast3075: FunctionProtoType<_ast3076, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::UnboundModuleScript> ()
struct _ast3078: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str237>, _ast3082>, Pack<_ast3079, _ast3080, _ast3081>>> {}; // CXXMethodDecl Compile
struct _ast3082: FunctionProtoType<_ast3085, Pack<_ast3083, _ast3084, _ast2953>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _ast3086: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str239>, _ast3088>, Pack<_ast3087>>>, _ast3091> {}; // CXXMethodDecl Run
struct _ast3088: FunctionProtoType<_ast3090, Pack<_ast3089>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3091: PointerType<_ast3092> {}; // PointerType v8::Script *
struct _ast3092: StructOrClassRecordType<RecordType<_ast42>> {}; // RecordType v8::Script
struct _ast3093: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str240>, _ast3094>, Pack<>>>, _ast3091> {}; // CXXMethodDecl GetUnboundScript
struct _ast3094: FunctionProtoType<_ast3095, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::UnboundScript> ()
struct _ast3103: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str242>, _ast63>, Pack<>>>, _ast3104>> {}; // CXXConstructorDecl CachedData
struct _ast3104: PointerType<_ast3105> {}; // PointerType v8::ScriptCompiler::CachedData *
struct _ast3105: StructOrClassRecordType<RecordType<_ast3098>> {}; // RecordType v8::ScriptCompiler::CachedData
struct _ast3106: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str242>, _ast3110>, Pack<_ast3107, _ast3108, _ast3109>>>, _ast3104>> {}; // CXXConstructorDecl CachedData
struct _ast3110: FunctionProtoType<_ast64, Pack<_ast3111, _ast1849, _ast3114>, UnqualifiedType> {}; // FunctionProtoType void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ast3111: PointerType<_ast3112> {}; // PointerType const uint8_t *
struct _ast3112: ConstQualifiedType<_ast3113> {}; // TypedefType const uint8_t
struct _ast3113: ABIIndependentSizeType<UnsignedIntegerType, 1> {}; // TypedefType uint8_t
struct _ast3114: EnumType<_ast3100, _ast1849> {}; // EnumType v8::ScriptCompiler::CachedData::BufferPolicy
struct _ast3115: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str247>, _ast165>, Pack<>>>, _ast3104>> {}; // CXXDestructorDecl ~CachedData
struct _ast3120: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str242>, _ast3122>, Pack<_ast3121>>>, _ast3104>> {}; // CXXConstructorDecl CachedData
struct _ast3122: FunctionProtoType<_ast64, Pack<_ast3123>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ScriptCompiler::CachedData &)
struct _ast3123: LValueReferenceType<ReferenceType<_ast3124>> {}; // LValueReferenceType const v8::ScriptCompiler::CachedData &
struct _ast3124: ConstQualifiedType<_ast3105> {}; // RecordType const v8::ScriptCompiler::CachedData
struct _ast3125: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3127>, Pack<_ast3126>>>, _ast3104> {}; // CXXMethodDecl operator=
struct _ast3127: FunctionProtoType<_ast3128, Pack<_ast3123>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
struct _ast3128: LValueReferenceType<ReferenceType<_ast3105>> {}; // LValueReferenceType v8::ScriptCompiler::CachedData &
struct _ast3131: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str249>, _ast3135>, Pack<_ast3132, _ast3133, _ast3134>>>, _ast3137>> {}; // CXXConstructorDecl Source
struct _ast3135: FunctionProtoType<_ast64, Pack<_ast3136, _ast2980, _ast3104>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _ast3137: PointerType<_ast3138> {}; // PointerType v8::ScriptCompiler::Source *
struct _ast3138: StructOrClassRecordType<RecordType<_ast3129>> {}; // RecordType v8::ScriptCompiler::Source
struct _ast3139: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str249>, _ast3142>, Pack<_ast3140, _ast3141>>>, _ast3137>> {}; // CXXConstructorDecl Source
struct _ast3142: FunctionProtoType<_ast64, Pack<_ast3143, _ast3104>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
struct _ast3144: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str252>, _ast165>, Pack<>>>, _ast3137>> {}; // CXXDestructorDecl ~Source
struct _ast3145: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str253>, _ast3146>, Pack<>>>, _ast3148> {}; // CXXMethodDecl GetCachedData
struct _ast3146: FunctionProtoType<_ast3147, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const v8::ScriptCompiler::CachedData *() const
struct _ast3147: PointerType<_ast3124> {}; // PointerType const v8::ScriptCompiler::CachedData *
struct _ast3148: PointerType<_ast3149> {}; // PointerType const v8::ScriptCompiler::Source *
struct _ast3149: ConstQualifiedType<_ast3138> {}; // RecordType const v8::ScriptCompiler::Source
struct _ast3150: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str254>, _ast3151>, Pack<>>>, _ast3148> {}; // CXXMethodDecl GetResourceOptions
struct _ast3151: FunctionProtoType<_ast2916, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const v8::ScriptOriginOptions &() const
struct _ast3152: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str249>, _ast3154>, Pack<_ast3153>>>, _ast3137>> {}; // CXXConstructorDecl Source
struct _ast3154: FunctionProtoType<_ast64, Pack<_ast3155>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ScriptCompiler::Source &)
struct _ast3155: LValueReferenceType<ReferenceType<_ast3149>> {}; // LValueReferenceType const v8::ScriptCompiler::Source &
struct _ast3156: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3158>, Pack<_ast3157>>>, _ast3137> {}; // CXXMethodDecl operator=
struct _ast3158: FunctionProtoType<_ast3159, Pack<_ast3155>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
struct _ast3159: LValueReferenceType<ReferenceType<_ast3138>> {}; // LValueReferenceType v8::ScriptCompiler::Source &
struct _ast3162: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str256>, _ast3163>, Pack<>>>, _ast3164>>> {}; // CXXDestructorDecl ~ExternalSourceStream
struct _ast3163: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3164: PointerType<_ast3165> {}; // PointerType v8::ScriptCompiler::ExternalSourceStream *
struct _ast3165: StructOrClassRecordType<RecordType<_ast3160>> {}; // RecordType v8::ScriptCompiler::ExternalSourceStream
struct _ast3166: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str257>, _ast3168>, Pack<_ast3167>>>, _ast3164>> {}; // CXXMethodDecl GetMoreData
struct _ast3168: FunctionProtoType<_ast3170, Pack<_ast3169>, UnqualifiedType> {}; // FunctionProtoType size_t (const uint8_t **)
struct _ast3169: PointerType<_ast3111> {}; // PointerType const uint8_t **
struct _ast3170: PointerSizeType<UnsignedIntegerType> {}; // TypedefType size_t
struct _ast3171: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str259>, _ast3172>, Pack<>>>, _ast3164>> {}; // CXXMethodDecl SetBookmark
struct _ast3172: FunctionProtoType<_ast79, Pack<>, UnqualifiedType> {}; // FunctionProtoType bool ()
struct _ast3173: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str260>, _ast63>, Pack<>>>, _ast3164>> {}; // CXXMethodDecl ResetToBookmark
struct _ast3174: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3176>, Pack<_ast3175>>>, _ast3164> {}; // CXXMethodDecl operator=
struct _ast3176: FunctionProtoType<_ast3179, Pack<_ast3177>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _ast3177: LValueReferenceType<ReferenceType<_ast3178>> {}; // LValueReferenceType const v8::ScriptCompiler::ExternalSourceStream &
struct _ast3178: ConstQualifiedType<_ast3165> {}; // RecordType const v8::ScriptCompiler::ExternalSourceStream
struct _ast3179: LValueReferenceType<ReferenceType<_ast3165>> {}; // LValueReferenceType v8::ScriptCompiler::ExternalSourceStream &
struct _ast3186: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str261>, _ast3189>, Pack<_ast3187, _ast3188>>>, _ast3191>> {}; // CXXConstructorDecl StreamedSource
struct _ast3189: FunctionProtoType<_ast64, Pack<_ast3164, _ast3190>, UnqualifiedType> {}; // FunctionProtoType void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3190: EnumType<_ast3182, _ast1849> {}; // EnumType v8::ScriptCompiler::StreamedSource::Encoding
struct _ast3191: PointerType<_ast3192> {}; // PointerType v8::ScriptCompiler::StreamedSource *
struct _ast3192: StructOrClassRecordType<RecordType<_ast3180>> {}; // RecordType v8::ScriptCompiler::StreamedSource
struct _ast3193: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str261>, _ast3196>, Pack<_ast3194, _ast3195>>>, _ast3191>> {}; // CXXConstructorDecl StreamedSource
struct _ast3196: FunctionProtoType<_ast64, Pack<_ast3197, _ast3190>, UnqualifiedType> {}; // FunctionProtoType void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ast3198: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str268>, _ast3199>, Pack<>>>, _ast3191>> {}; // CXXDestructorDecl ~StreamedSource
struct _ast3199: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3200: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str269>, _ast3201>, Pack<>>>, _ast3204> {}; // CXXMethodDecl impl
struct _ast3201: FunctionProtoType<_ast3202, Pack<>, ConstQualifiedType> {}; // FunctionProtoType internal::ScriptStreamingData *() const
struct _ast3202: PointerType<_ast3203> {}; // PointerType internal::ScriptStreamingData *
struct _ast3204: PointerType<_ast3205> {}; // PointerType const v8::ScriptCompiler::StreamedSource *
struct _ast3205: ConstQualifiedType<_ast3192> {}; // RecordType const v8::ScriptCompiler::StreamedSource
struct _ast3206: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str261>, _ast3208>, Pack<_ast3207>>>, _ast3191>> {}; // CXXConstructorDecl StreamedSource
struct _ast3208: FunctionProtoType<_ast64, Pack<_ast3209>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ScriptCompiler::StreamedSource &)
struct _ast3209: LValueReferenceType<ReferenceType<_ast3205>> {}; // LValueReferenceType const v8::ScriptCompiler::StreamedSource &
struct _ast3210: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3212>, Pack<_ast3211>>>, _ast3191> {}; // CXXMethodDecl operator=
struct _ast3212: FunctionProtoType<_ast3213, Pack<_ast3209>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
struct _ast3213: LValueReferenceType<ReferenceType<_ast3192>> {}; // LValueReferenceType v8::ScriptCompiler::StreamedSource &
struct _ast3216: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str239>, _ast63>, Pack<>>>, _ast3217> {}; // CXXMethodDecl Run
struct _ast3217: PointerType<_ast3218> {}; // PointerType v8::ScriptCompiler::ScriptStreamingTask *
struct _ast3218: StructOrClassRecordType<RecordType<_ast3214>> {}; // RecordType v8::ScriptCompiler::ScriptStreamingTask
struct _ast3239: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str291>, _ast3244>, Pack<_ast3240, _ast3241, _ast3242, _ast3243>>> {}; // CXXMethodDecl CompileUnboundScript
struct _ast3244: FunctionProtoType<_ast3247, Pack<_ast136, _ast3137, _ast3245, _ast3246>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3245: EnumType<_ast3219, _ast1849> {}; // EnumType v8::ScriptCompiler::CompileOptions
struct _ast3246: EnumType<_ast3223, _ast1849> {}; // EnumType v8::ScriptCompiler::NoCacheReason
struct _ast3248: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str237>, _ast3253>, Pack<_ast3249, _ast3250, _ast3251, _ast3252>>> {}; // CXXMethodDecl Compile
struct _ast3253: FunctionProtoType<_ast3255, Pack<_ast3254, _ast3137, _ast3245, _ast3246>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3256: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str294>, _ast3260>, Pack<_ast3257, _ast3258, _ast3259>>> {}; // CXXMethodDecl StartStreamingScript
struct _ast3260: FunctionProtoType<_ast3217, Pack<_ast136, _ast3191, _ast3245>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _ast3261: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str237>, _ast3266>, Pack<_ast3262, _ast3263, _ast3264, _ast3265>>> {}; // CXXMethodDecl Compile
struct _ast3266: FunctionProtoType<_ast3269, Pack<_ast3267, _ast3191, _ast3268, _ast2980>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
struct _ast3270: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str296>, _ast3271>, Pack<>>> {}; // CXXMethodDecl CachedDataVersionTag
struct _ast3271: FunctionProtoType<_ast3272, Pack<>, UnqualifiedType> {}; // FunctionProtoType uint32_t ()
struct _ast3272: ABIIndependentSizeType<UnsignedIntegerType, 4> {}; // TypedefType uint32_t
struct _ast3273: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str297>, _ast3278>, Pack<_ast3274, _ast3275, _ast3276, _ast3277>>> {}; // CXXMethodDecl CompileModule
struct _ast3278: FunctionProtoType<_ast3279, Pack<_ast136, _ast3137, _ast3245, _ast3246>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3280: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str298>, _ast3289>, Pack<_ast3281, _ast3282, _ast3283, _ast3284, _ast3285, _ast3286, _ast3287, _ast3288>>> {}; // CXXMethodDecl CompileFunctionInContext
struct _ast3289: FunctionProtoType<_ast3293, Pack<_ast3290, _ast3137, _ast3170, _ast3291, _ast3170, _ast3292, _ast3245, _ast3246>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ast3294: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str303>, _ast3296>, Pack<_ast3295>>> {}; // CXXMethodDecl CreateCodeCache
struct _ast3296: FunctionProtoType<_ast3104, Pack<_ast3297>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
struct _ast3298: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str303>, _ast3300>, Pack<_ast3299>>> {}; // CXXMethodDecl CreateCodeCache
struct _ast3300: FunctionProtoType<_ast3104, Pack<_ast3301>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
struct _ast3302: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str306>, _ast3304>, Pack<_ast3303>>> {}; // CXXMethodDecl CreateCodeCacheForFunction
struct _ast3304: FunctionProtoType<_ast3104, Pack<_ast3305>, UnqualifiedType> {}; // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _ast3308: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast3309>, Pack<>>>, _ast3311> {}; // CXXMethodDecl Get
struct _ast3309: FunctionProtoType<_ast3310, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> () const
struct _ast3311: PointerType<_ast3312> {}; // PointerType const v8::Message *
struct _ast3312: ConstQualifiedType<_ast3313> {}; // RecordType const v8::Message
struct _ast3313: StructOrClassRecordType<RecordType<_ast3306>> {}; // RecordType v8::Message
struct _ast3314: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetIsolate
struct _ast3315: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str309>, _ast3317>, Pack<_ast3316>>>, _ast3311> {}; // CXXMethodDecl GetSourceLine
struct _ast3317: FunctionProtoType<_ast3319, Pack<_ast3318>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3320: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str310>, _ast3321>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetScriptOrigin
struct _ast3321: FunctionProtoType<_ast2954, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::ScriptOrigin () const
struct _ast3322: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str311>, _ast3323>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetScriptResourceName
struct _ast3323: FunctionProtoType<_ast3324, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast3325: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str312>, _ast3326>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetStackTrace
struct _ast3326: FunctionProtoType<_ast3327, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::StackTrace> () const
struct _ast3328: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str208>, _ast3330>, Pack<_ast3329>>>, _ast3311> {}; // CXXMethodDecl GetLineNumber
struct _ast3330: FunctionProtoType<_ast3332, Pack<_ast3331>, ConstQualifiedType> {}; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3333: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str313>, _ast2877>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetStartPosition
struct _ast3334: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str314>, _ast2877>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetEndPosition
struct _ast3335: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str315>, _ast2877>, Pack<>>>, _ast3311> {}; // CXXMethodDecl ErrorLevel
struct _ast3336: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str316>, _ast2877>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetStartColumn
struct _ast3337: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str316>, _ast3339>, Pack<_ast3338>>>, _ast3311> {}; // CXXMethodDecl GetStartColumn
struct _ast3339: FunctionProtoType<_ast3341, Pack<_ast3340>, ConstQualifiedType> {}; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3342: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str317>, _ast2877>, Pack<>>>, _ast3311> {}; // CXXMethodDecl GetEndColumn
struct _ast3343: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str317>, _ast3345>, Pack<_ast3344>>>, _ast3311> {}; // CXXMethodDecl GetEndColumn
struct _ast3345: FunctionProtoType<_ast3347, Pack<_ast3346>, ConstQualifiedType> {}; // FunctionProtoType Maybe<int> (Local<v8::Context>) const
struct _ast3348: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str180>, _ast78>, Pack<>>>, _ast3311> {}; // CXXMethodDecl IsSharedCrossOrigin
struct _ast3349: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str181>, _ast78>, Pack<>>>, _ast3311> {}; // CXXMethodDecl IsOpaque
struct _ast3350: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str318>, _ast3353>, Pack<_ast3351, _ast3352>>> {}; // CXXMethodDecl PrintCurrentStackTrace
struct _ast3353: FunctionProtoType<_ast64, Pack<_ast136, _ast3354>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, FILE *)
struct _ast3354: PointerType<_ast3355> {}; // PointerType FILE *
struct _ast3355: TypedefType<_ast3356> {}; // TypedefType FILE
struct _ast3356: TypedefNameDecl<TypeDecl<NamedDeclName<_str319>, _ast3357>> {}; // TypedefDecl FILE
struct _ast3374: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str335>, _ast3377>, Pack<_ast3375, _ast3376>>>, _ast3379> {}; // CXXMethodDecl GetFrame
struct _ast3377: FunctionProtoType<_ast3378, Pack<_ast136, _ast3272>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _ast3379: PointerType<_ast3380> {}; // PointerType const v8::StackTrace *
struct _ast3380: ConstQualifiedType<_ast3381> {}; // RecordType const v8::StackTrace
struct _ast3381: StructOrClassRecordType<RecordType<_ast47>> {}; // RecordType v8::StackTrace
struct _ast3382: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str336>, _ast2877>, Pack<>>>, _ast3379> {}; // CXXMethodDecl GetFrameCount
struct _ast3383: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str337>, _ast3387>, Pack<_ast3384, _ast3385, _ast3386>>> {}; // CXXMethodDecl CurrentStackTrace
struct _ast3387: FunctionProtoType<_ast3389, Pack<_ast136, _ast1849, _ast3388>, UnqualifiedType> {}; // FunctionProtoType Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
struct _ast3388: EnumType<_ast3362, _ast1849> {}; // EnumType v8::StackTrace::StackTraceOptions
struct _ast3391: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str208>, _ast2877>, Pack<>>>, _ast3392> {}; // CXXMethodDecl GetLineNumber
struct _ast3392: PointerType<_ast3393> {}; // PointerType const v8::StackFrame *
struct _ast3393: ConstQualifiedType<_ast3394> {}; // RecordType const v8::StackFrame
struct _ast3394: StructOrClassRecordType<RecordType<_ast46>> {}; // RecordType v8::StackFrame
struct _ast3395: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str339>, _ast2877>, Pack<>>>, _ast3392> {}; // CXXMethodDecl GetColumn
struct _ast3396: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str340>, _ast2877>, Pack<>>>, _ast3392> {}; // CXXMethodDecl GetScriptId
struct _ast3397: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str205>, _ast3398>, Pack<>>>, _ast3392> {}; // CXXMethodDecl GetScriptName
struct _ast3398: FunctionProtoType<_ast3399, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> () const
struct _ast3400: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str341>, _ast3401>, Pack<>>>, _ast3392> {}; // CXXMethodDecl GetScriptNameOrSourceURL
struct _ast3401: FunctionProtoType<_ast3402, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> () const
struct _ast3403: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str342>, _ast3404>, Pack<>>>, _ast3392> {}; // CXXMethodDecl GetFunctionName
struct _ast3404: FunctionProtoType<_ast3405, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> () const
struct _ast3406: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str343>, _ast78>, Pack<>>>, _ast3392> {}; // CXXMethodDecl IsEval
struct _ast3407: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str344>, _ast78>, Pack<>>>, _ast3392> {}; // CXXMethodDecl IsConstructor
struct _ast3408: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str182>, _ast78>, Pack<>>>, _ast3392> {}; // CXXMethodDecl IsWasm
struct _ast3409: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str345>, _ast78>, Pack<>>>, _ast3392> {}; // CXXMethodDecl IsUserJavaScript
struct _ast3421: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str355>, _ast63>, Pack<>>>, _ast3422>> {}; // CXXConstructorDecl RegisterState
struct _ast3422: PointerType<_ast3423> {}; // PointerType v8::RegisterState *
struct _ast3423: StructOrClassRecordType<RecordType<_ast3419>> {}; // RecordType v8::RegisterState
struct _ast3447: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str374>, _ast3450>, Pack<_ast3448, _ast3449>>> {}; // CXXMethodDecl Parse
struct _ast3450: FunctionProtoType<_ast3453, Pack<_ast3451, _ast3452>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
struct _ast3454: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str376>, _ast3458>, Pack<_ast3455, _ast3456, _ast3457>>> {}; // CXXMethodDecl Stringify
struct _ast3458: FunctionProtoType<_ast3462, Pack<_ast3459, _ast3460, _ast3461>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _ast3467: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str381>, _ast3468>, Pack<>>>, _ast3469>>> {}; // CXXDestructorDecl ~Delegate
struct _ast3468: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3469: PointerType<_ast3470> {}; // PointerType v8::ValueSerializer::Delegate *
struct _ast3470: StructOrClassRecordType<RecordType<_ast3465>> {}; // RecordType v8::ValueSerializer::Delegate
struct _ast3471: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str382>, _ast3473>, Pack<_ast3472>>>, _ast3469>> {}; // CXXMethodDecl ThrowDataCloneError
struct _ast3473: FunctionProtoType<_ast64, Pack<_ast3474>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast3475: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str384>, _ast3478>, Pack<_ast3476, _ast3477>>>, _ast3469>> {}; // CXXMethodDecl WriteHostObject
struct _ast3478: FunctionProtoType<_ast3480, Pack<_ast136, _ast3479>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _ast3481: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str386>, _ast3484>, Pack<_ast3482, _ast3483>>>, _ast3469>> {}; // CXXMethodDecl GetSharedArrayBufferId
struct _ast3484: FunctionProtoType<_ast3486, Pack<_ast136, _ast3485>, UnqualifiedType> {}; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
struct _ast3487: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str388>, _ast3490>, Pack<_ast3488, _ast3489>>>, _ast3469>> {}; // CXXMethodDecl GetWasmModuleTransferId
struct _ast3490: FunctionProtoType<_ast3492, Pack<_ast136, _ast3491>, UnqualifiedType> {}; // FunctionProtoType Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
struct _ast3493: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str390>, _ast3497>, Pack<_ast3494, _ast3495, _ast3496>>>, _ast3469>> {}; // CXXMethodDecl ReallocateBufferMemory
struct _ast3497: FunctionProtoType<_ast2169, Pack<_ast2169, _ast3170, _ast3498>, UnqualifiedType> {}; // FunctionProtoType void *(void *, size_t, size_t *)
struct _ast3498: PointerType<_ast3170> {}; // PointerType size_t *
struct _ast3499: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str394>, _ast3501>, Pack<_ast3500>>>, _ast3469>> {}; // CXXMethodDecl FreeBufferMemory
struct _ast3501: FunctionProtoType<_ast64, Pack<_ast2169>, UnqualifiedType> {}; // FunctionProtoType void (void *)
struct _ast3502: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3504>, Pack<_ast3503>>>, _ast3469> {}; // CXXMethodDecl operator=
struct _ast3504: FunctionProtoType<_ast3507, Pack<_ast3505>, UnqualifiedType> {}; // FunctionProtoType v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
struct _ast3505: LValueReferenceType<ReferenceType<_ast3506>> {}; // LValueReferenceType const v8::ValueSerializer::Delegate &
struct _ast3506: ConstQualifiedType<_ast3470> {}; // RecordType const v8::ValueSerializer::Delegate
struct _ast3507: LValueReferenceType<ReferenceType<_ast3470>> {}; // LValueReferenceType v8::ValueSerializer::Delegate &
struct _ast3508: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str379>, _ast2787>, Pack<_ast3509>>>, _ast3510>> {}; // CXXConstructorDecl ValueSerializer
struct _ast3510: PointerType<_ast3511> {}; // PointerType v8::ValueSerializer *
struct _ast3511: StructOrClassRecordType<RecordType<_ast3463>> {}; // RecordType v8::ValueSerializer
struct _ast3512: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str379>, _ast3515>, Pack<_ast3513, _ast3514>>>, _ast3510>> {}; // CXXConstructorDecl ValueSerializer
struct _ast3515: FunctionProtoType<_ast64, Pack<_ast136, _ast3469>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _ast3516: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str397>, _ast3517>, Pack<>>>, _ast3510>> {}; // CXXDestructorDecl ~ValueSerializer
struct _ast3517: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3518: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str398>, _ast63>, Pack<>>>, _ast3510> {}; // CXXMethodDecl WriteHeader
struct _ast3519: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str399>, _ast3522>, Pack<_ast3520, _ast3521>>>, _ast3510> {}; // CXXMethodDecl WriteValue
struct _ast3522: FunctionProtoType<_ast3525, Pack<_ast3523, _ast3524>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast3526: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str400>, _ast3527>, Pack<>>>, _ast3510> {}; // CXXMethodDecl Release
struct _ast3527: FunctionProtoType<_ast3528, Pack<>, UnqualifiedType> {}; // FunctionProtoType std::pair<uint8_t *, size_t> ()
struct _ast3529: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str401>, _ast3532>, Pack<_ast3530, _ast3531>>>, _ast3510> {}; // CXXMethodDecl TransferArrayBuffer
struct _ast3532: FunctionProtoType<_ast64, Pack<_ast3272, _ast3533>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3534: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str404>, _ast3536>, Pack<_ast3535>>>, _ast3510> {}; // CXXMethodDecl SetTreatArrayBufferViewsAsHostObjects
struct _ast3536: FunctionProtoType<_ast64, Pack<_ast79>, UnqualifiedType> {}; // FunctionProtoType void (bool)
struct _ast3537: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str406>, _ast3539>, Pack<_ast3538>>>, _ast3510> {}; // CXXMethodDecl WriteUint32
struct _ast3539: FunctionProtoType<_ast64, Pack<_ast3272>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t)
struct _ast3540: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str407>, _ast3542>, Pack<_ast3541>>>, _ast3510> {}; // CXXMethodDecl WriteUint64
struct _ast3542: FunctionProtoType<_ast64, Pack<_ast3543>, UnqualifiedType> {}; // FunctionProtoType void (uint64_t)
struct _ast3543: ABIIndependentSizeType<UnsignedIntegerType, 8> {}; // TypedefType uint64_t
struct _ast3544: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str408>, _ast3546>, Pack<_ast3545>>>, _ast3510> {}; // CXXMethodDecl WriteDouble
struct _ast3546: FunctionProtoType<_ast64, Pack<_ast3547>, UnqualifiedType> {}; // FunctionProtoType void (double)
struct _ast3547: ABIIndependentSizeType<FloatingPointType, 8> {}; // BuiltinType double
struct _ast3548: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str409>, _ast3551>, Pack<_ast3549, _ast3550>>>, _ast3510> {}; // CXXMethodDecl WriteRawBytes
struct _ast3551: FunctionProtoType<_ast64, Pack<_ast3552, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (const void *, size_t)
struct _ast3552: PointerType<_ast3553> {}; // PointerType const void *
struct _ast3553: ConstQualifiedType<_ast64> {}; // BuiltinType const void
struct _ast3554: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str379>, _ast3556>, Pack<_ast3555>>>, _ast3510>> {}; // CXXConstructorDecl ValueSerializer
struct _ast3556: FunctionProtoType<_ast64, Pack<_ast3557>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ValueSerializer &)
struct _ast3557: LValueReferenceType<ReferenceType<_ast3558>> {}; // LValueReferenceType const v8::ValueSerializer &
struct _ast3558: ConstQualifiedType<_ast3511> {}; // RecordType const v8::ValueSerializer
struct _ast3559: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3556>, Pack<_ast3560>>>, _ast3510> {}; // CXXMethodDecl operator=
struct _ast3565: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str381>, _ast3566>, Pack<>>>, _ast3567>>> {}; // CXXDestructorDecl ~Delegate
struct _ast3566: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3567: PointerType<_ast3568> {}; // PointerType v8::ValueDeserializer::Delegate *
struct _ast3568: StructOrClassRecordType<RecordType<_ast3563>> {}; // RecordType v8::ValueDeserializer::Delegate
struct _ast3569: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str411>, _ast3571>, Pack<_ast3570>>>, _ast3567>> {}; // CXXMethodDecl ReadHostObject
struct _ast3571: FunctionProtoType<_ast3572, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *)
struct _ast3573: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str412>, _ast3576>, Pack<_ast3574, _ast3575>>>, _ast3567>> {}; // CXXMethodDecl GetWasmModuleFromId
struct _ast3576: FunctionProtoType<_ast3577, Pack<_ast136, _ast3272>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
struct _ast3578: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str413>, _ast3581>, Pack<_ast3579, _ast3580>>>, _ast3567>> {}; // CXXMethodDecl GetSharedArrayBufferFromId
struct _ast3581: FunctionProtoType<_ast3582, Pack<_ast136, _ast3272>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
struct _ast3583: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3585>, Pack<_ast3584>>>, _ast3567> {}; // CXXMethodDecl operator=
struct _ast3585: FunctionProtoType<_ast3588, Pack<_ast3586>, UnqualifiedType> {}; // FunctionProtoType v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
struct _ast3586: LValueReferenceType<ReferenceType<_ast3587>> {}; // LValueReferenceType const v8::ValueDeserializer::Delegate &
struct _ast3587: ConstQualifiedType<_ast3568> {}; // RecordType const v8::ValueDeserializer::Delegate
struct _ast3588: LValueReferenceType<ReferenceType<_ast3568>> {}; // LValueReferenceType v8::ValueDeserializer::Delegate &
struct _ast3589: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str410>, _ast3593>, Pack<_ast3590, _ast3591, _ast3592>>>, _ast3594>> {}; // CXXConstructorDecl ValueDeserializer
struct _ast3593: FunctionProtoType<_ast64, Pack<_ast136, _ast3111, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t)
struct _ast3594: PointerType<_ast3595> {}; // PointerType v8::ValueDeserializer *
struct _ast3595: StructOrClassRecordType<RecordType<_ast3561>> {}; // RecordType v8::ValueDeserializer
struct _ast3596: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str410>, _ast3601>, Pack<_ast3597, _ast3598, _ast3599, _ast3600>>>, _ast3594>> {}; // CXXConstructorDecl ValueDeserializer
struct _ast3601: FunctionProtoType<_ast64, Pack<_ast136, _ast3111, _ast3170, _ast3567>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
struct _ast3602: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str415>, _ast3603>, Pack<>>>, _ast3594>> {}; // CXXDestructorDecl ~ValueDeserializer
struct _ast3603: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3604: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str416>, _ast3606>, Pack<_ast3605>>>, _ast3594> {}; // CXXMethodDecl ReadHeader
struct _ast3606: FunctionProtoType<_ast3608, Pack<_ast3607>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>)
struct _ast3609: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str417>, _ast3611>, Pack<_ast3610>>>, _ast3594> {}; // CXXMethodDecl ReadValue
struct _ast3611: FunctionProtoType<_ast3613, Pack<_ast3612>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ast3614: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str401>, _ast3617>, Pack<_ast3615, _ast3616>>>, _ast3594> {}; // CXXMethodDecl TransferArrayBuffer
struct _ast3617: FunctionProtoType<_ast64, Pack<_ast3272, _ast3618>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
struct _ast3619: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str418>, _ast3622>, Pack<_ast3620, _ast3621>>>, _ast3594> {}; // CXXMethodDecl TransferSharedArrayBuffer
struct _ast3622: FunctionProtoType<_ast64, Pack<_ast3272, _ast3623>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _ast3624: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str420>, _ast3536>, Pack<_ast3625>>>, _ast3594> {}; // CXXMethodDecl SetSupportsLegacyWireFormat
struct _ast3626: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str422>, _ast3536>, Pack<_ast3627>>>, _ast3594> {}; // CXXMethodDecl SetExpectInlineWasm
struct _ast3628: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str424>, _ast3629>, Pack<>>>, _ast3630> {}; // CXXMethodDecl GetWireFormatVersion
struct _ast3629: FunctionProtoType<_ast3272, Pack<>, ConstQualifiedType> {}; // FunctionProtoType uint32_t () const
struct _ast3630: PointerType<_ast3631> {}; // PointerType const v8::ValueDeserializer *
struct _ast3631: ConstQualifiedType<_ast3595> {}; // RecordType const v8::ValueDeserializer
struct _ast3632: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str425>, _ast3634>, Pack<_ast3633>>>, _ast3594> {}; // CXXMethodDecl ReadUint32
struct _ast3634: FunctionProtoType<_ast79, Pack<_ast3635>, UnqualifiedType> {}; // FunctionProtoType bool (uint32_t *)
struct _ast3635: PointerType<_ast3272> {}; // PointerType uint32_t *
struct _ast3636: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str426>, _ast3638>, Pack<_ast3637>>>, _ast3594> {}; // CXXMethodDecl ReadUint64
struct _ast3638: FunctionProtoType<_ast79, Pack<_ast3639>, UnqualifiedType> {}; // FunctionProtoType bool (uint64_t *)
struct _ast3639: PointerType<_ast3543> {}; // PointerType uint64_t *
struct _ast3640: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str427>, _ast3642>, Pack<_ast3641>>>, _ast3594> {}; // CXXMethodDecl ReadDouble
struct _ast3642: FunctionProtoType<_ast79, Pack<_ast3643>, UnqualifiedType> {}; // FunctionProtoType bool (double *)
struct _ast3643: PointerType<_ast3547> {}; // PointerType double *
struct _ast3644: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str428>, _ast3647>, Pack<_ast3645, _ast3646>>>, _ast3594> {}; // CXXMethodDecl ReadRawBytes
struct _ast3647: FunctionProtoType<_ast79, Pack<_ast3170, _ast3648>, UnqualifiedType> {}; // FunctionProtoType bool (size_t, const void **)
struct _ast3648: PointerType<_ast3552> {}; // PointerType const void **
struct _ast3649: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str410>, _ast3651>, Pack<_ast3650>>>, _ast3594>> {}; // CXXConstructorDecl ValueDeserializer
struct _ast3651: FunctionProtoType<_ast64, Pack<_ast3652>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ValueDeserializer &)
struct _ast3652: LValueReferenceType<ReferenceType<_ast3631>> {}; // LValueReferenceType const v8::ValueDeserializer &
struct _ast3653: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3651>, Pack<_ast3654>>>, _ast3594> {}; // CXXMethodDecl operator=
struct _ast3656: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str429>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsUndefined
struct _ast3657: PointerType<_ast3658> {}; // PointerType const v8::Value *
struct _ast3658: ConstQualifiedType<_ast3659> {}; // RecordType const v8::Value
struct _ast3659: StructOrClassRecordType<RecordType<_ast56>> {}; // RecordType v8::Value
struct _ast3660: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str430>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsNull
struct _ast3661: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str431>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsNullOrUndefined
struct _ast3662: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str432>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsTrue
struct _ast3663: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str433>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsFalse
struct _ast3664: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str434>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsName
struct _ast3665: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str435>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsString
struct _ast3666: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str436>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsSymbol
struct _ast3667: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str437>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsFunction
struct _ast3668: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str438>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsArray
struct _ast3669: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str439>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsObject
struct _ast3670: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str440>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsBigInt
struct _ast3671: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str441>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsBoolean
struct _ast3672: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str442>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsNumber
struct _ast3673: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str443>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsExternal
struct _ast3674: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str444>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsInt32
struct _ast3675: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str445>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsUint32
struct _ast3676: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str446>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsDate
struct _ast3677: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str447>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsArgumentsObject
struct _ast3678: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str448>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsBigIntObject
struct _ast3679: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str449>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsBooleanObject
struct _ast3680: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str450>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsNumberObject
struct _ast3681: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str451>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsStringObject
struct _ast3682: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str452>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsSymbolObject
struct _ast3683: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str453>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsNativeError
struct _ast3684: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str454>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsRegExp
struct _ast3685: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str455>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsAsyncFunction
struct _ast3686: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str456>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsGeneratorFunction
struct _ast3687: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str457>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsGeneratorObject
struct _ast3688: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str458>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsPromise
struct _ast3689: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str459>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsMap
struct _ast3690: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str460>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsSet
struct _ast3691: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str461>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsMapIterator
struct _ast3692: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str462>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsSetIterator
struct _ast3693: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str463>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsWeakMap
struct _ast3694: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str464>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsWeakSet
struct _ast3695: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str465>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsArrayBuffer
struct _ast3696: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str466>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsArrayBufferView
struct _ast3697: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str467>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsTypedArray
struct _ast3698: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str468>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsUint8Array
struct _ast3699: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str469>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsUint8ClampedArray
struct _ast3700: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str470>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsInt8Array
struct _ast3701: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str471>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsUint16Array
struct _ast3702: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str472>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsInt16Array
struct _ast3703: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str473>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsUint32Array
struct _ast3704: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str474>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsInt32Array
struct _ast3705: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str475>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsFloat32Array
struct _ast3706: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str476>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsFloat64Array
struct _ast3707: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str477>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsBigInt64Array
struct _ast3708: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str478>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsBigUint64Array
struct _ast3709: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str479>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsDataView
struct _ast3710: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str480>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsSharedArrayBuffer
struct _ast3711: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str481>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsProxy
struct _ast3712: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str482>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsWebAssemblyCompiledModule
struct _ast3713: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str483>, _ast78>, Pack<>>>, _ast3657> {}; // CXXMethodDecl IsModuleNamespaceObject
struct _ast3714: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str484>, _ast3716>, Pack<_ast3715>>>, _ast3657> {}; // CXXMethodDecl ToBigInt
struct _ast3716: FunctionProtoType<_ast3718, Pack<_ast3717>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _ast3719: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str485>, _ast3721>, Pack<_ast3720>>>, _ast3657> {}; // CXXMethodDecl ToNumber
struct _ast3721: FunctionProtoType<_ast3723, Pack<_ast3722>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _ast3724: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str486>, _ast3726>, Pack<_ast3725>>>, _ast3657> {}; // CXXMethodDecl ToString
struct _ast3726: FunctionProtoType<_ast3728, Pack<_ast3727>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3729: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str487>, _ast3731>, Pack<_ast3730>>>, _ast3657> {}; // CXXMethodDecl ToDetailString
struct _ast3731: FunctionProtoType<_ast3733, Pack<_ast3732>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ast3734: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str488>, _ast3736>, Pack<_ast3735>>>, _ast3657> {}; // CXXMethodDecl ToObject
struct _ast3736: FunctionProtoType<_ast3738, Pack<_ast3737>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast3739: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str489>, _ast3741>, Pack<_ast3740>>>, _ast3657> {}; // CXXMethodDecl ToInteger
struct _ast3741: FunctionProtoType<_ast3743, Pack<_ast3742>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _ast3744: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str490>, _ast3746>, Pack<_ast3745>>>, _ast3657> {}; // CXXMethodDecl ToUint32
struct _ast3746: FunctionProtoType<_ast3748, Pack<_ast3747>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast3749: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str491>, _ast3751>, Pack<_ast3750>>>, _ast3657> {}; // CXXMethodDecl ToInt32
struct _ast3751: FunctionProtoType<_ast3753, Pack<_ast3752>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _ast3754: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str492>, _ast3756>, Pack<_ast3755>>>, _ast3657> {}; // CXXMethodDecl ToBoolean
struct _ast3756: FunctionProtoType<_ast3757, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *) const
struct _ast3758: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str493>, _ast3760>, Pack<_ast3759>>>, _ast3657> {}; // CXXMethodDecl ToArrayIndex
struct _ast3760: FunctionProtoType<_ast3762, Pack<_ast3761>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ast3763: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str494>, _ast3765>, Pack<_ast3764>>>, _ast3657> {}; // CXXMethodDecl BooleanValue
struct _ast3765: FunctionProtoType<_ast79, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType bool (v8::Isolate *) const
struct _ast3766: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str495>, _ast3768>, Pack<_ast3767>>>, _ast3657> {}; // CXXMethodDecl NumberValue
struct _ast3768: FunctionProtoType<_ast3770, Pack<_ast3769>, ConstQualifiedType> {}; // FunctionProtoType Maybe<double> (Local<v8::Context>) const
struct _ast3771: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str496>, _ast3773>, Pack<_ast3772>>>, _ast3657> {}; // CXXMethodDecl IntegerValue
struct _ast3773: FunctionProtoType<_ast3775, Pack<_ast3774>, ConstQualifiedType> {}; // FunctionProtoType Maybe<int64_t> (Local<v8::Context>) const
struct _ast3776: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str497>, _ast3778>, Pack<_ast3777>>>, _ast3657> {}; // CXXMethodDecl Uint32Value
struct _ast3778: FunctionProtoType<_ast3780, Pack<_ast3779>, ConstQualifiedType> {}; // FunctionProtoType Maybe<uint32_t> (Local<v8::Context>) const
struct _ast3781: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str498>, _ast3783>, Pack<_ast3782>>>, _ast3657> {}; // CXXMethodDecl Int32Value
struct _ast3783: FunctionProtoType<_ast3785, Pack<_ast3784>, ConstQualifiedType> {}; // FunctionProtoType Maybe<int32_t> (Local<v8::Context>) const
struct _ast3786: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str499>, _ast3789>, Pack<_ast3787, _ast3788>>>, _ast3657> {}; // CXXMethodDecl Equals
struct _ast3789: FunctionProtoType<_ast3792, Pack<_ast3790, _ast3791>, ConstQualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _ast3793: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str500>, _ast3795>, Pack<_ast3794>>>, _ast3657> {}; // CXXMethodDecl StrictEquals
struct _ast3795: FunctionProtoType<_ast79, Pack<_ast3796>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3797: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str501>, _ast3799>, Pack<_ast3798>>>, _ast3657> {}; // CXXMethodDecl SameValue
struct _ast3799: FunctionProtoType<_ast79, Pack<_ast3800>, ConstQualifiedType> {}; // FunctionProtoType bool (Local<v8::Value>) const
struct _ast3803: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast3805>, Pack<_ast3804>>> {}; // CXXMethodDecl Cast
struct _ast3805: FunctionProtoType<_ast3808, Pack<_ast3806>, UnqualifiedType> {}; // FunctionProtoType v8::Value *(T *)
struct _ast3806: PointerType<_ast3807> {}; // PointerType T *
struct _ast3808: PointerType<_ast3659> {}; // PointerType v8::Value *
struct _ast3809: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str502>, _ast3811>, Pack<_ast3810>>>, _ast3808> {}; // CXXMethodDecl TypeOf
struct _ast3811: FunctionProtoType<_ast3812, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3813: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str503>, _ast3816>, Pack<_ast3814, _ast3815>>>, _ast3808> {}; // CXXMethodDecl InstanceOf
struct _ast3816: FunctionProtoType<_ast3819, Pack<_ast3817, _ast3818>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _ast3822: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast78>, Pack<>>>, _ast3823> {}; // CXXMethodDecl Value
struct _ast3823: PointerType<_ast3824> {}; // PointerType const v8::Boolean *
struct _ast3824: ConstQualifiedType<_ast3825> {}; // RecordType const v8::Boolean
struct _ast3825: StructOrClassRecordType<RecordType<_ast10>> {}; // RecordType v8::Boolean
struct _ast3826: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast3828>, Pack<_ast3827>>> {}; // CXXMethodDecl Cast
struct _ast3828: FunctionProtoType<_ast3831, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::Boolean *(v8::Value *)
struct _ast3829: PointerType<_ast3830> {}; // PointerType v8::Value *
struct _ast3831: PointerType<_ast3825> {}; // PointerType v8::Boolean *
struct _ast3832: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast3835>, Pack<_ast3833, _ast3834>>> {}; // CXXMethodDecl New
struct _ast3835: FunctionProtoType<_ast3836, Pack<_ast136, _ast79>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, bool)
struct _ast3838: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str230>, _ast2997>, Pack<>>>, _ast3839> {}; // CXXMethodDecl GetIdentityHash
struct _ast3839: PointerType<_ast3840> {}; // PointerType v8::Name *
struct _ast3840: StructOrClassRecordType<RecordType<_ast30>> {}; // RecordType v8::Name
struct _ast3841: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast3843>, Pack<_ast3842>>> {}; // CXXMethodDecl Cast
struct _ast3843: FunctionProtoType<_ast3839, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Name *(v8::Value *)
struct _ast3853: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str172>, _ast2877>, Pack<>>>, _ast3854> {}; // CXXMethodDecl Length
struct _ast3854: PointerType<_ast3855> {}; // PointerType const v8::String *
struct _ast3855: ConstQualifiedType<_ast3856> {}; // RecordType const v8::String
struct _ast3856: StructOrClassRecordType<RecordType<_ast48>> {}; // RecordType v8::String
struct _ast3857: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str512>, _ast3859>, Pack<_ast3858>>>, _ast3854> {}; // CXXMethodDecl Utf8Length
struct _ast3859: FunctionProtoType<_ast1849, Pack<_ast136>, ConstQualifiedType> {}; // FunctionProtoType int (v8::Isolate *) const
struct _ast3860: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str513>, _ast78>, Pack<>>>, _ast3854> {}; // CXXMethodDecl IsOneByte
struct _ast3861: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str514>, _ast78>, Pack<>>>, _ast3854> {}; // CXXMethodDecl ContainsOnlyOneByte
struct _ast3868: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str521>, _ast3874>, Pack<_ast3869, _ast3870, _ast3871, _ast3872, _ast3873>>>, _ast3854> {}; // CXXMethodDecl Write
struct _ast3874: FunctionProtoType<_ast1849, Pack<_ast136, _ast3875, _ast1849, _ast1849, _ast1849>, ConstQualifiedType> {}; // FunctionProtoType int (v8::Isolate *, uint16_t *, int, int, int) const
struct _ast3875: PointerType<_ast1869> {}; // PointerType uint16_t *
struct _ast3876: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str522>, _ast3882>, Pack<_ast3877, _ast3878, _ast3879, _ast3880, _ast3881>>>, _ast3854> {}; // CXXMethodDecl WriteOneByte
struct _ast3882: FunctionProtoType<_ast1849, Pack<_ast136, _ast3883, _ast1849, _ast1849, _ast1849>, ConstQualifiedType> {}; // FunctionProtoType int (v8::Isolate *, uint8_t *, int, int, int) const
struct _ast3883: PointerType<_ast3113> {}; // PointerType uint8_t *
struct _ast3884: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str523>, _ast3890>, Pack<_ast3885, _ast3886, _ast3887, _ast3888, _ast3889>>>, _ast3854> {}; // CXXMethodDecl WriteUtf8
struct _ast3890: FunctionProtoType<_ast1849, Pack<_ast136, _ast3891, _ast1849, _ast3892, _ast1849>, ConstQualifiedType> {}; // FunctionProtoType int (v8::Isolate *, char *, int, int *, int) const
struct _ast3891: PointerType<_ast1864> {}; // PointerType char *
struct _ast3892: PointerType<_ast1849> {}; // PointerType int *
struct _ast3893: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str79>, _ast3895>, Pack<_ast3894>>> {}; // CXXMethodDecl Empty
struct _ast3895: FunctionProtoType<_ast3896, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (v8::Isolate *)
struct _ast3897: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str443>, _ast78>, Pack<>>>, _ast3854> {}; // CXXMethodDecl IsExternal
struct _ast3898: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str525>, _ast78>, Pack<>>>, _ast3854> {}; // CXXMethodDecl IsExternalOneByte
struct _ast3901: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str527>, _ast165>, Pack<>>>, _ast3902>>> {}; // CXXDestructorDecl ~ExternalStringResourceBase
struct _ast3902: PointerType<_ast3903> {}; // PointerType v8::String::ExternalStringResourceBase *
struct _ast3903: StructOrClassRecordType<RecordType<_ast3899>> {}; // RecordType v8::String::ExternalStringResourceBase
struct _ast3904: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str528>, _ast78>, Pack<>>>, _ast3905>> {}; // CXXMethodDecl IsCacheable
struct _ast3905: PointerType<_ast3906> {}; // PointerType const v8::String::ExternalStringResourceBase *
struct _ast3906: ConstQualifiedType<_ast3903> {}; // RecordType const v8::String::ExternalStringResourceBase
struct _ast3907: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str526>, _ast3909>, Pack<_ast3908>>>, _ast3902>> {}; // CXXConstructorDecl ExternalStringResourceBase
struct _ast3909: FunctionProtoType<_ast64, Pack<_ast3910>, UnqualifiedType> {}; // FunctionProtoType void (const v8::String::ExternalStringResourceBase &)
struct _ast3910: LValueReferenceType<ReferenceType<_ast3906>> {}; // LValueReferenceType const v8::String::ExternalStringResourceBase &
struct _ast3911: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3909>, Pack<_ast3912>>>, _ast3902> {}; // CXXMethodDecl operator=
struct _ast3913: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str526>, _ast3914>, Pack<>>>, _ast3902>> {}; // CXXConstructorDecl ExternalStringResourceBase
struct _ast3914: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3915: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str529>, _ast63>, Pack<>>>, _ast3902>> {}; // CXXMethodDecl Dispose
struct _ast3916: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str530>, _ast3917>, Pack<>>>, _ast3905>> {}; // CXXMethodDecl Lock
struct _ast3917: FunctionProtoType<_ast64, Pack<>, ConstQualifiedType> {}; // FunctionProtoType void () const
struct _ast3918: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str531>, _ast3917>, Pack<>>>, _ast3905>> {}; // CXXMethodDecl Unlock
struct _ast3921: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str533>, _ast165>, Pack<>>>, _ast3922>>> {}; // CXXDestructorDecl ~ExternalStringResource
struct _ast3922: PointerType<_ast3923> {}; // PointerType v8::String::ExternalStringResource *
struct _ast3923: StructOrClassRecordType<RecordType<_ast3919>> {}; // RecordType v8::String::ExternalStringResource
struct _ast3924: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str134>, _ast3925>, Pack<>>>, _ast3928>> {}; // CXXMethodDecl data
struct _ast3925: FunctionProtoType<_ast3926, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const uint16_t *() const
struct _ast3926: PointerType<_ast3927> {}; // PointerType const uint16_t *
struct _ast3927: ConstQualifiedType<_ast1869> {}; // TypedefType const uint16_t
struct _ast3928: PointerType<_ast3929> {}; // PointerType const v8::String::ExternalStringResource *
struct _ast3929: ConstQualifiedType<_ast3923> {}; // RecordType const v8::String::ExternalStringResource
struct _ast3930: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str171>, _ast3931>, Pack<>>>, _ast3928>> {}; // CXXMethodDecl length
struct _ast3931: FunctionProtoType<_ast3170, Pack<>, ConstQualifiedType> {}; // FunctionProtoType size_t () const
struct _ast3932: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str532>, _ast3933>, Pack<>>>, _ast3922>> {}; // CXXConstructorDecl ExternalStringResource
struct _ast3933: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3934: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str532>, _ast3936>, Pack<_ast3935>>>, _ast3922>> {}; // CXXConstructorDecl ExternalStringResource
struct _ast3936: FunctionProtoType<_ast64, Pack<_ast3937>, UnqualifiedType> {}; // FunctionProtoType void (const v8::String::ExternalStringResource &)
struct _ast3937: LValueReferenceType<ReferenceType<_ast3929>> {}; // LValueReferenceType const v8::String::ExternalStringResource &
struct _ast3938: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3940>, Pack<_ast3939>>>, _ast3922> {}; // CXXMethodDecl operator=
struct _ast3940: FunctionProtoType<_ast3941, Pack<_ast3937>, UnqualifiedType> {}; // FunctionProtoType v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
struct _ast3941: LValueReferenceType<ReferenceType<_ast3923>> {}; // LValueReferenceType v8::String::ExternalStringResource &
struct _ast3944: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str535>, _ast165>, Pack<>>>, _ast3945>>> {}; // CXXDestructorDecl ~ExternalOneByteStringResource
struct _ast3945: PointerType<_ast3946> {}; // PointerType v8::String::ExternalOneByteStringResource *
struct _ast3946: StructOrClassRecordType<RecordType<_ast3942>> {}; // RecordType v8::String::ExternalOneByteStringResource
struct _ast3947: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str134>, _ast3948>, Pack<>>>, _ast3949>> {}; // CXXMethodDecl data
struct _ast3948: FunctionProtoType<_ast1862, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const char *() const
struct _ast3949: PointerType<_ast3950> {}; // PointerType const v8::String::ExternalOneByteStringResource *
struct _ast3950: ConstQualifiedType<_ast3946> {}; // RecordType const v8::String::ExternalOneByteStringResource
struct _ast3951: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str171>, _ast3931>, Pack<>>>, _ast3949>> {}; // CXXMethodDecl length
struct _ast3952: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str534>, _ast3953>, Pack<>>>, _ast3945>> {}; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast3953: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast3954: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str534>, _ast3956>, Pack<_ast3955>>>, _ast3945>> {}; // CXXConstructorDecl ExternalOneByteStringResource
struct _ast3956: FunctionProtoType<_ast64, Pack<_ast3957>, UnqualifiedType> {}; // FunctionProtoType void (const v8::String::ExternalOneByteStringResource &)
struct _ast3957: LValueReferenceType<ReferenceType<_ast3950>> {}; // LValueReferenceType const v8::String::ExternalOneByteStringResource &
struct _ast3958: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast3960>, Pack<_ast3959>>>, _ast3945> {}; // CXXMethodDecl operator=
struct _ast3960: FunctionProtoType<_ast3961, Pack<_ast3957>, UnqualifiedType> {}; // FunctionProtoType v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
struct _ast3961: LValueReferenceType<ReferenceType<_ast3946>> {}; // LValueReferenceType v8::String::ExternalOneByteStringResource &
struct _ast3962: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str536>, _ast3964>, Pack<_ast3963>>>, _ast3854> {}; // CXXMethodDecl GetExternalStringResourceBase
struct _ast3964: FunctionProtoType<_ast3902, Pack<_ast3965>, ConstQualifiedType> {}; // FunctionProtoType v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
struct _ast3965: PointerType<_ast3966> {}; // PointerType v8::String::Encoding *
struct _ast3966: EnumType<_ast3849, _ast1849> {}; // EnumType v8::String::Encoding
struct _ast3967: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str538>, _ast3968>, Pack<>>>, _ast3854> {}; // CXXMethodDecl GetExternalStringResource
struct _ast3968: FunctionProtoType<_ast3922, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::String::ExternalStringResource *() const
struct _ast3969: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str539>, _ast3970>, Pack<>>>, _ast3854> {}; // CXXMethodDecl GetExternalOneByteStringResource
struct _ast3970: FunctionProtoType<_ast3949, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const v8::String::ExternalOneByteStringResource *() const
struct _ast3971: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast3973>, Pack<_ast3972>>> {}; // CXXMethodDecl Cast
struct _ast3973: FunctionProtoType<_ast3974, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::String *(v8::Value *)
struct _ast3974: PointerType<_ast3856> {}; // PointerType v8::String *
struct _ast3975: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str540>, _ast3980>, Pack<_ast3976, _ast3977, _ast3978, _ast3979>>> {}; // CXXMethodDecl NewFromUtf8
struct _ast3980: FunctionProtoType<_ast3982, Pack<_ast136, _ast1862, _ast3981, _ast1849>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
struct _ast3981: EnumType<_ast3844, _ast1849> {}; // EnumType v8::NewStringType
struct _ast3983: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str541>, _ast3988>, Pack<_ast3984, _ast3985, _ast3986, _ast3987>>> {}; // CXXMethodDecl NewFromOneByte
struct _ast3988: FunctionProtoType<_ast3989, Pack<_ast136, _ast3111, _ast3981, _ast1849>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
struct _ast3990: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str542>, _ast3995>, Pack<_ast3991, _ast3992, _ast3993, _ast3994>>> {}; // CXXMethodDecl NewFromTwoByte
struct _ast3995: FunctionProtoType<_ast3996, Pack<_ast136, _ast3926, _ast3981, _ast1849>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
struct _ast3997: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str543>, _ast4001>, Pack<_ast3998, _ast3999, _ast4000>>> {}; // CXXMethodDecl Concat
struct _ast4001: FunctionProtoType<_ast4004, Pack<_ast136, _ast4002, _ast4003>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
struct _ast4005: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str546>, _ast4008>, Pack<_ast4006, _ast4007>>> {}; // CXXMethodDecl NewExternalTwoByte
struct _ast4008: FunctionProtoType<_ast4009, Pack<_ast136, _ast3922>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
struct _ast4010: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str548>, _ast4012>, Pack<_ast4011>>>, _ast3974> {}; // CXXMethodDecl MakeExternal
struct _ast4012: FunctionProtoType<_ast79, Pack<_ast3922>, UnqualifiedType> {}; // FunctionProtoType bool (v8::String::ExternalStringResource *)
struct _ast4013: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str549>, _ast4016>, Pack<_ast4014, _ast4015>>> {}; // CXXMethodDecl NewExternalOneByte
struct _ast4016: FunctionProtoType<_ast4017, Pack<_ast136, _ast3945>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
struct _ast4018: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str548>, _ast4020>, Pack<_ast4019>>>, _ast3974> {}; // CXXMethodDecl MakeExternal
struct _ast4020: FunctionProtoType<_ast79, Pack<_ast3945>, UnqualifiedType> {}; // FunctionProtoType bool (v8::String::ExternalOneByteStringResource *)
struct _ast4021: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str550>, _ast3172>, Pack<>>>, _ast3974> {}; // CXXMethodDecl CanMakeExternal
struct _ast4022: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str551>, _ast4024>, Pack<_ast4023>>>, _ast3974> {}; // CXXMethodDecl StringEquals
struct _ast4024: FunctionProtoType<_ast79, Pack<_ast4025>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::String>)
struct _ast4028: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str553>, _ast4031>, Pack<_ast4029, _ast4030>>>, _ast4033>> {}; // CXXConstructorDecl Utf8Value
struct _ast4031: FunctionProtoType<_ast64, Pack<_ast136, _ast4032>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4033: PointerType<_ast4034> {}; // PointerType v8::String::Utf8Value *
struct _ast4034: StructOrClassRecordType<RecordType<_ast4026>> {}; // RecordType v8::String::Utf8Value
struct _ast4035: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str554>, _ast4036>, Pack<>>>, _ast4033>> {}; // CXXDestructorDecl ~Utf8Value
struct _ast4036: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast4037: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast4038>, Pack<>>>, _ast4033> {}; // CXXMethodDecl operator*
struct _ast4038: FunctionProtoType<_ast3891, Pack<>, UnqualifiedType> {}; // FunctionProtoType char *()
struct _ast4039: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast3948>, Pack<>>>, _ast4040> {}; // CXXMethodDecl operator*
struct _ast4040: PointerType<_ast4041> {}; // PointerType const v8::String::Utf8Value *
struct _ast4041: ConstQualifiedType<_ast4034> {}; // RecordType const v8::String::Utf8Value
struct _ast4042: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str171>, _ast2877>, Pack<>>>, _ast4040> {}; // CXXMethodDecl length
struct _ast4043: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str553>, _ast4045>, Pack<_ast4044>>>, _ast4033>> {}; // CXXConstructorDecl Utf8Value
struct _ast4045: FunctionProtoType<_ast64, Pack<_ast4046>, UnqualifiedType> {}; // FunctionProtoType void (const v8::String::Utf8Value &)
struct _ast4046: LValueReferenceType<ReferenceType<_ast4041>> {}; // LValueReferenceType const v8::String::Utf8Value &
struct _ast4047: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast4045>, Pack<_ast4048>>>, _ast4033> {}; // CXXMethodDecl operator=
struct _ast4051: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast4054>, Pack<_ast4052, _ast4053>>>, _ast4056>> {}; // CXXConstructorDecl Value
struct _ast4054: FunctionProtoType<_ast64, Pack<_ast136, _ast4055>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
struct _ast4056: PointerType<_ast4057> {}; // PointerType v8::String::Value *
struct _ast4057: StructOrClassRecordType<RecordType<_ast4049>> {}; // RecordType v8::String::Value
struct _ast4058: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str555>, _ast4059>, Pack<>>>, _ast4056>> {}; // CXXDestructorDecl ~Value
struct _ast4059: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast4060: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast4061>, Pack<>>>, _ast4056> {}; // CXXMethodDecl operator*
struct _ast4061: FunctionProtoType<_ast3875, Pack<>, UnqualifiedType> {}; // FunctionProtoType uint16_t *()
struct _ast4062: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str57>, _ast3925>, Pack<>>>, _ast4063> {}; // CXXMethodDecl operator*
struct _ast4063: PointerType<_ast4064> {}; // PointerType const v8::String::Value *
struct _ast4064: ConstQualifiedType<_ast4057> {}; // RecordType const v8::String::Value
struct _ast4065: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str171>, _ast2877>, Pack<>>>, _ast4063> {}; // CXXMethodDecl length
struct _ast4066: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast4068>, Pack<_ast4067>>>, _ast4056>> {}; // CXXConstructorDecl Value
struct _ast4068: FunctionProtoType<_ast64, Pack<_ast4069>, UnqualifiedType> {}; // FunctionProtoType void (const v8::String::Value &)
struct _ast4069: LValueReferenceType<ReferenceType<_ast4064>> {}; // LValueReferenceType const v8::String::Value &
struct _ast4070: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast4068>, Pack<_ast4071>>>, _ast4056> {}; // CXXMethodDecl operator=
struct _ast4073: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str23>, _ast4074>, Pack<>>>, _ast4076> {}; // CXXMethodDecl Name
struct _ast4074: FunctionProtoType<_ast4075, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast4076: PointerType<_ast4077> {}; // PointerType const v8::Symbol *
struct _ast4077: ConstQualifiedType<_ast4078> {}; // RecordType const v8::Symbol
struct _ast4078: StructOrClassRecordType<RecordType<_ast50>> {}; // RecordType v8::Symbol
struct _ast4079: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4082>, Pack<_ast4080, _ast4081>>> {}; // CXXMethodDecl New
struct _ast4082: FunctionProtoType<_ast4084, Pack<_ast136, _ast4083>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4085: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str557>, _ast4088>, Pack<_ast4086, _ast4087>>> {}; // CXXMethodDecl For
struct _ast4088: FunctionProtoType<_ast4090, Pack<_ast136, _ast4089>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4091: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str558>, _ast4094>, Pack<_ast4092, _ast4093>>> {}; // CXXMethodDecl ForApi
struct _ast4094: FunctionProtoType<_ast4096, Pack<_ast136, _ast4095>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ast4097: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str559>, _ast4099>, Pack<_ast4098>>> {}; // CXXMethodDecl GetAsyncIterator
struct _ast4099: FunctionProtoType<_ast4100, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4101: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str560>, _ast4103>, Pack<_ast4102>>> {}; // CXXMethodDecl GetHasInstance
struct _ast4103: FunctionProtoType<_ast4104, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4105: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str561>, _ast4107>, Pack<_ast4106>>> {}; // CXXMethodDecl GetIsConcatSpreadable
struct _ast4107: FunctionProtoType<_ast4108, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4109: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str562>, _ast4111>, Pack<_ast4110>>> {}; // CXXMethodDecl GetIterator
struct _ast4111: FunctionProtoType<_ast4112, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4113: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str563>, _ast4115>, Pack<_ast4114>>> {}; // CXXMethodDecl GetMatch
struct _ast4115: FunctionProtoType<_ast4116, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4117: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str564>, _ast4119>, Pack<_ast4118>>> {}; // CXXMethodDecl GetReplace
struct _ast4119: FunctionProtoType<_ast4120, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4121: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str565>, _ast4123>, Pack<_ast4122>>> {}; // CXXMethodDecl GetSearch
struct _ast4123: FunctionProtoType<_ast4124, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4125: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str566>, _ast4127>, Pack<_ast4126>>> {}; // CXXMethodDecl GetSplit
struct _ast4127: FunctionProtoType<_ast4128, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4129: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str567>, _ast4131>, Pack<_ast4130>>> {}; // CXXMethodDecl GetToPrimitive
struct _ast4131: FunctionProtoType<_ast4132, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4133: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str568>, _ast4135>, Pack<_ast4134>>> {}; // CXXMethodDecl GetToStringTag
struct _ast4135: FunctionProtoType<_ast4136, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4137: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str569>, _ast4139>, Pack<_ast4138>>> {}; // CXXMethodDecl GetUnscopables
struct _ast4139: FunctionProtoType<_ast4140, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
struct _ast4141: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4143>, Pack<_ast4142>>> {}; // CXXMethodDecl Cast
struct _ast4143: FunctionProtoType<_ast4144, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Symbol *(v8::Value *)
struct _ast4144: PointerType<_ast4078> {}; // PointerType v8::Symbol *
struct _ast4146: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str23>, _ast4147>, Pack<>>>, _ast4149> {}; // CXXMethodDecl Name
struct _ast4147: FunctionProtoType<_ast4148, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast4149: PointerType<_ast4150> {}; // PointerType const v8::Private *
struct _ast4150: ConstQualifiedType<_ast4151> {}; // RecordType const v8::Private
struct _ast4151: StructOrClassRecordType<RecordType<_ast53>> {}; // RecordType v8::Private
struct _ast4152: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4155>, Pack<_ast4153, _ast4154>>> {}; // CXXMethodDecl New
struct _ast4155: FunctionProtoType<_ast4157, Pack<_ast136, _ast4156>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4158: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str558>, _ast4161>, Pack<_ast4159, _ast4160>>> {}; // CXXMethodDecl ForApi
struct _ast4161: FunctionProtoType<_ast4163, Pack<_ast136, _ast4162>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ast4164: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4166>, Pack<_ast4165>>> {}; // CXXMethodDecl Cast
struct _ast4166: FunctionProtoType<_ast4169, Pack<_ast4167>, UnqualifiedType> {}; // FunctionProtoType v8::Private *(v8::Data *)
struct _ast4167: PointerType<_ast4168> {}; // PointerType v8::Data *
struct _ast4168: StructOrClassRecordType<RecordType<_ast3>> {}; // RecordType v8::Data
struct _ast4169: PointerType<_ast4151> {}; // PointerType v8::Private *
struct _ast4171: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast4172>, Pack<>>>, _ast4173> {}; // CXXMethodDecl Value
struct _ast4172: FunctionProtoType<_ast3547, Pack<>, ConstQualifiedType> {}; // FunctionProtoType double () const
struct _ast4173: PointerType<_ast4174> {}; // PointerType const v8::Number *
struct _ast4174: ConstQualifiedType<_ast4175> {}; // RecordType const v8::Number
struct _ast4175: StructOrClassRecordType<RecordType<_ast31>> {}; // RecordType v8::Number
struct _ast4176: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4179>, Pack<_ast4177, _ast4178>>> {}; // CXXMethodDecl New
struct _ast4179: FunctionProtoType<_ast4180, Pack<_ast136, _ast3547>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Number> (v8::Isolate *, double)
struct _ast4181: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4183>, Pack<_ast4182>>> {}; // CXXMethodDecl Cast
struct _ast4183: FunctionProtoType<_ast4184, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::Number *(v8::Value *)
struct _ast4184: PointerType<_ast4175> {}; // PointerType v8::Number *
struct _ast4186: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4189>, Pack<_ast4187, _ast4188>>> {}; // CXXMethodDecl New
struct _ast4189: FunctionProtoType<_ast4191, Pack<_ast136, _ast4190>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, int32_t)
struct _ast4190: ABIIndependentSizeType<SignedIntegerType, 4> {}; // TypedefType int32_t
struct _ast4192: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str570>, _ast4195>, Pack<_ast4193, _ast4194>>> {}; // CXXMethodDecl NewFromUnsigned
struct _ast4195: FunctionProtoType<_ast4196, Pack<_ast136, _ast3272>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _ast4197: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast4198>, Pack<>>>, _ast4200> {}; // CXXMethodDecl Value
struct _ast4198: FunctionProtoType<_ast4199, Pack<>, ConstQualifiedType> {}; // FunctionProtoType int64_t () const
struct _ast4199: ABIIndependentSizeType<SignedIntegerType, 8> {}; // TypedefType int64_t
struct _ast4200: PointerType<_ast4201> {}; // PointerType const v8::Integer *
struct _ast4201: ConstQualifiedType<_ast4202> {}; // RecordType const v8::Integer
struct _ast4202: StructOrClassRecordType<RecordType<_ast19>> {}; // RecordType v8::Integer
struct _ast4203: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4205>, Pack<_ast4204>>> {}; // CXXMethodDecl Cast
struct _ast4205: FunctionProtoType<_ast4206, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::Integer *(v8::Value *)
struct _ast4206: PointerType<_ast4202> {}; // PointerType v8::Integer *
struct _ast4208: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast4209>, Pack<>>>, _ast4210> {}; // CXXMethodDecl Value
struct _ast4209: FunctionProtoType<_ast4190, Pack<>, ConstQualifiedType> {}; // FunctionProtoType int32_t () const
struct _ast4210: PointerType<_ast4211> {}; // PointerType const v8::Int32 *
struct _ast4211: ConstQualifiedType<_ast4212> {}; // RecordType const v8::Int32
struct _ast4212: StructOrClassRecordType<RecordType<_ast18>> {}; // RecordType v8::Int32
struct _ast4213: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4215>, Pack<_ast4214>>> {}; // CXXMethodDecl Cast
struct _ast4215: FunctionProtoType<_ast4216, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::Int32 *(v8::Value *)
struct _ast4216: PointerType<_ast4212> {}; // PointerType v8::Int32 *
struct _ast4218: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast3629>, Pack<>>>, _ast4219> {}; // CXXMethodDecl Value
struct _ast4219: PointerType<_ast4220> {}; // PointerType const v8::Uint32 *
struct _ast4220: ConstQualifiedType<_ast4221> {}; // RecordType const v8::Uint32
struct _ast4221: StructOrClassRecordType<RecordType<_ast54>> {}; // RecordType v8::Uint32
struct _ast4222: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4224>, Pack<_ast4223>>> {}; // CXXMethodDecl Cast
struct _ast4224: FunctionProtoType<_ast4225, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::Uint32 *(v8::Value *)
struct _ast4225: PointerType<_ast4221> {}; // PointerType v8::Uint32 *
struct _ast4227: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4230>, Pack<_ast4228, _ast4229>>> {}; // CXXMethodDecl New
struct _ast4230: FunctionProtoType<_ast4231, Pack<_ast136, _ast4199>, UnqualifiedType> {}; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ast4232: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str570>, _ast4235>, Pack<_ast4233, _ast4234>>> {}; // CXXMethodDecl NewFromUnsigned
struct _ast4235: FunctionProtoType<_ast4236, Pack<_ast136, _ast3543>, UnqualifiedType> {}; // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _ast4237: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str571>, _ast4242>, Pack<_ast4238, _ast4239, _ast4240, _ast4241>>> {}; // CXXMethodDecl NewFromWords
struct _ast4242: FunctionProtoType<_ast4246, Pack<_ast4243, _ast1849, _ast1849, _ast4244>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
struct _ast4244: PointerType<_ast4245> {}; // PointerType const uint64_t *
struct _ast4245: ConstQualifiedType<_ast3543> {}; // TypedefType const uint64_t
struct _ast4247: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str575>, _ast4249>, Pack<_ast4248>>>, _ast4251> {}; // CXXMethodDecl Uint64Value
struct _ast4249: FunctionProtoType<_ast3543, Pack<_ast4250>, ConstQualifiedType> {}; // FunctionProtoType uint64_t (bool *) const
struct _ast4250: PointerType<_ast79> {}; // PointerType bool *
struct _ast4251: PointerType<_ast4252> {}; // PointerType const v8::BigInt *
struct _ast4252: ConstQualifiedType<_ast4253> {}; // RecordType const v8::BigInt
struct _ast4253: StructOrClassRecordType<RecordType<_ast8>> {}; // RecordType v8::BigInt
struct _ast4254: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str577>, _ast4256>, Pack<_ast4255>>>, _ast4251> {}; // CXXMethodDecl Int64Value
struct _ast4256: FunctionProtoType<_ast4199, Pack<_ast4250>, ConstQualifiedType> {}; // FunctionProtoType int64_t (bool *) const
struct _ast4257: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str578>, _ast2877>, Pack<>>>, _ast4251> {}; // CXXMethodDecl WordCount
struct _ast4258: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str579>, _ast4262>, Pack<_ast4259, _ast4260, _ast4261>>>, _ast4251> {}; // CXXMethodDecl ToWordsArray
struct _ast4262: FunctionProtoType<_ast64, Pack<_ast3892, _ast3892, _ast3639>, ConstQualifiedType> {}; // FunctionProtoType void (int *, int *, uint64_t *) const
struct _ast4263: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4265>, Pack<_ast4264>>> {}; // CXXMethodDecl Cast
struct _ast4265: FunctionProtoType<_ast4266, Pack<_ast3829>, UnqualifiedType> {}; // FunctionProtoType v8::BigInt *(v8::Value *)
struct _ast4266: PointerType<_ast4253> {}; // PointerType v8::BigInt *
struct _ast4272: TypedefNameDecl<TypeDecl<NamedDeclName<_str585>, _ast4273>> {}; // TypedefDecl AccessorGetterCallback
struct _ast4273: PointerType<_ast4274> {}; // PointerType void (*)(Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4274: UnqualifiedType<_ast4275> {}; // ParenType void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4275: FunctionProtoType<_ast64, Pack<_ast4276, _ast4277>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4277: LValueReferenceType<ReferenceType<_ast4278>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast4278: ConstQualifiedType<_ast4279> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast4280: TypedefNameDecl<TypeDecl<NamedDeclName<_str586>, _ast4281>> {}; // TypedefDecl AccessorNameGetterCallback
struct _ast4281: PointerType<_ast4282> {}; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4282: UnqualifiedType<_ast4283> {}; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4283: FunctionProtoType<_ast64, Pack<_ast4284, _ast4285>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast4285: LValueReferenceType<ReferenceType<_ast4286>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast4286: ConstQualifiedType<_ast4287> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast4288: TypedefNameDecl<TypeDecl<NamedDeclName<_str587>, _ast4289>> {}; // TypedefDecl AccessorSetterCallback
struct _ast4289: PointerType<_ast4290> {}; // PointerType void (*)(Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4290: UnqualifiedType<_ast4291> {}; // ParenType void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4291: FunctionProtoType<_ast64, Pack<_ast4292, _ast4293, _ast4294>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4294: LValueReferenceType<ReferenceType<_ast4295>> {}; // LValueReferenceType const PropertyCallbackInfo<void> &
struct _ast4295: ConstQualifiedType<_ast4296> {}; // TemplateSpecializationType const PropertyCallbackInfo<void>
struct _ast4297: TypedefNameDecl<TypeDecl<NamedDeclName<_str588>, _ast4298>> {}; // TypedefDecl AccessorNameSetterCallback
struct _ast4298: PointerType<_ast4299> {}; // PointerType void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4299: UnqualifiedType<_ast4300> {}; // ParenType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4300: FunctionProtoType<_ast64, Pack<_ast4301, _ast4302, _ast4303>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ast4303: LValueReferenceType<ReferenceType<_ast4304>> {}; // LValueReferenceType const PropertyCallbackInfo<void> &
struct _ast4304: ConstQualifiedType<_ast4305> {}; // TemplateSpecializationType const PropertyCallbackInfo<void>
struct _ast4335: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4338>, Pack<_ast4336, _ast4337>>>, _ast4341> {}; // CXXMethodDecl Set
struct _ast4338: FunctionProtoType<_ast79, Pack<_ast4339, _ast4340>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::Value>, Local<v8::Value>)
struct _ast4341: PointerType<_ast4342> {}; // PointerType v8::Object *
struct _ast4342: StructOrClassRecordType<RecordType<_ast33>> {}; // RecordType v8::Object
struct _ast4343: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4347>, Pack<_ast4344, _ast4345, _ast4346>>>, _ast4341> {}; // CXXMethodDecl Set
struct _ast4347: FunctionProtoType<_ast4351, Pack<_ast4348, _ast4349, _ast4350>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast4352: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4355>, Pack<_ast4353, _ast4354>>>, _ast4341> {}; // CXXMethodDecl Set
struct _ast4355: FunctionProtoType<_ast79, Pack<_ast3272, _ast4356>, UnqualifiedType> {}; // FunctionProtoType bool (uint32_t, Local<v8::Value>)
struct _ast4357: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4361>, Pack<_ast4358, _ast4359, _ast4360>>>, _ast4341> {}; // CXXMethodDecl Set
struct _ast4361: FunctionProtoType<_ast4364, Pack<_ast4362, _ast3272, _ast4363>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4365: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str618>, _ast4369>, Pack<_ast4366, _ast4367, _ast4368>>>, _ast4341> {}; // CXXMethodDecl CreateDataProperty
struct _ast4369: FunctionProtoType<_ast4373, Pack<_ast4370, _ast4371, _ast4372>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
struct _ast4374: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str618>, _ast4378>, Pack<_ast4375, _ast4376, _ast4377>>>, _ast4341> {}; // CXXMethodDecl CreateDataProperty
struct _ast4378: FunctionProtoType<_ast4381, Pack<_ast4379, _ast3272, _ast4380>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ast4382: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str619>, _ast4387>, Pack<_ast4383, _ast4384, _ast4385, _ast4386>>>, _ast4341> {}; // CXXMethodDecl DefineOwnProperty
struct _ast4387: FunctionProtoType<_ast4392, Pack<_ast4388, _ast4389, _ast4390, _ast4391>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _ast4391: EnumType<_ast4267, _ast1849> {}; // EnumType v8::PropertyAttribute
struct _ast4393: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str621>, _ast4397>, Pack<_ast4394, _ast4395, _ast4396>>>, _ast4341> {}; // CXXMethodDecl DefineProperty
struct _ast4397: FunctionProtoType<_ast4402, Pack<_ast4398, _ast4399, _ast4400>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
struct _ast4400: LValueReferenceType<ReferenceType<_ast4401>> {}; // LValueReferenceType v8::PropertyDescriptor &
struct _ast4401: StructOrClassRecordType<RecordType<_ast39>> {}; // RecordType v8::PropertyDescriptor
struct _ast4403: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast4405>, Pack<_ast4404>>>, _ast4341> {}; // CXXMethodDecl Get
struct _ast4405: FunctionProtoType<_ast4407, Pack<_ast4406>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast4408: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast4411>, Pack<_ast4409, _ast4410>>>, _ast4341> {}; // CXXMethodDecl Get
struct _ast4411: FunctionProtoType<_ast4414, Pack<_ast4412, _ast4413>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast4415: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast4417>, Pack<_ast4416>>>, _ast4341> {}; // CXXMethodDecl Get
struct _ast4417: FunctionProtoType<_ast4418, Pack<_ast3272>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (uint32_t)
struct _ast4419: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast4422>, Pack<_ast4420, _ast4421>>>, _ast4341> {}; // CXXMethodDecl Get
struct _ast4422: FunctionProtoType<_ast4424, Pack<_ast4423, _ast3272>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _ast4425: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str623>, _ast4428>, Pack<_ast4426, _ast4427>>>, _ast4341> {}; // CXXMethodDecl GetPropertyAttributes
struct _ast4428: FunctionProtoType<_ast4431, Pack<_ast4429, _ast4430>, UnqualifiedType> {}; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
struct _ast4432: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str624>, _ast4435>, Pack<_ast4433, _ast4434>>>, _ast4341> {}; // CXXMethodDecl GetOwnPropertyDescriptor
struct _ast4435: FunctionProtoType<_ast4438, Pack<_ast4436, _ast4437>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4439: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str625>, _ast4442>, Pack<_ast4440, _ast4441>>>, _ast4341> {}; // CXXMethodDecl Has
struct _ast4442: FunctionProtoType<_ast4445, Pack<_ast4443, _ast4444>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4446: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str626>, _ast4449>, Pack<_ast4447, _ast4448>>>, _ast4341> {}; // CXXMethodDecl Delete
struct _ast4449: FunctionProtoType<_ast4452, Pack<_ast4450, _ast4451>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4453: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str625>, _ast4456>, Pack<_ast4454, _ast4455>>>, _ast4341> {}; // CXXMethodDecl Has
struct _ast4456: FunctionProtoType<_ast4458, Pack<_ast4457, _ast3272>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4459: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str626>, _ast4462>, Pack<_ast4460, _ast4461>>>, _ast4341> {}; // CXXMethodDecl Delete
struct _ast4462: FunctionProtoType<_ast4464, Pack<_ast4463, _ast3272>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4465: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str627>, _ast4475>, Pack<_ast4466, _ast4467, _ast4468, _ast4469, _ast4470, _ast4471, _ast4472, _ast4473, _ast4474>>>, _ast4341> {}; // CXXMethodDecl SetAccessor
struct _ast4475: FunctionProtoType<_ast4483, Pack<_ast4476, _ast4477, _ast4478, _ast4479, _ast4480, _ast4481, _ast4391, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4478: TypedefType<_ast4280> {}; // TypedefType v8::AccessorNameGetterCallback
struct _ast4479: TypedefType<_ast4297> {}; // TypedefType v8::AccessorNameSetterCallback
struct _ast4481: EnumType<_ast4306, _ast1849> {}; // EnumType v8::AccessControl
struct _ast4482: EnumType<_ast4318, _ast1849> {}; // EnumType v8::SideEffectType
struct _ast4484: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str634>, _ast4490>, Pack<_ast4485, _ast4486, _ast4487, _ast4488, _ast4489>>>, _ast4341> {}; // CXXMethodDecl SetAccessorProperty
struct _ast4490: FunctionProtoType<_ast64, Pack<_ast4491, _ast4492, _ast4493, _ast4391, _ast4481>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _ast4494: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str635>, _ast4503>, Pack<_ast4495, _ast4496, _ast4497, _ast4498, _ast4499, _ast4500, _ast4501, _ast4502>>>, _ast4341> {}; // CXXMethodDecl SetNativeDataProperty
struct _ast4503: FunctionProtoType<_ast4507, Pack<_ast4504, _ast4505, _ast4478, _ast4479, _ast4506, _ast4391, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4508: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str636>, _ast4516>, Pack<_ast4509, _ast4510, _ast4511, _ast4512, _ast4513, _ast4514, _ast4515>>>, _ast4341> {}; // CXXMethodDecl SetLazyDataProperty
struct _ast4516: FunctionProtoType<_ast4520, Pack<_ast4517, _ast4518, _ast4478, _ast4519, _ast4391, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast4521: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str637>, _ast4524>, Pack<_ast4522, _ast4523>>>, _ast4341> {}; // CXXMethodDecl HasPrivate
struct _ast4524: FunctionProtoType<_ast4527, Pack<_ast4525, _ast4526>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4528: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str638>, _ast4532>, Pack<_ast4529, _ast4530, _ast4531>>>, _ast4341> {}; // CXXMethodDecl SetPrivate
struct _ast4532: FunctionProtoType<_ast4536, Pack<_ast4533, _ast4534, _ast4535>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
struct _ast4537: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str639>, _ast4540>, Pack<_ast4538, _ast4539>>>, _ast4341> {}; // CXXMethodDecl DeletePrivate
struct _ast4540: FunctionProtoType<_ast4543, Pack<_ast4541, _ast4542>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ast4544: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str640>, _ast4547>, Pack<_ast4545, _ast4546>>>, _ast4341> {}; // CXXMethodDecl GetPrivate
struct _ast4547: FunctionProtoType<_ast4550, Pack<_ast4548, _ast4549>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
struct _ast4551: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str641>, _ast4553>, Pack<_ast4552>>>, _ast4341> {}; // CXXMethodDecl GetPropertyNames
struct _ast4553: FunctionProtoType<_ast4555, Pack<_ast4554>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4556: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str641>, _ast4562>, Pack<_ast4557, _ast4558, _ast4559, _ast4560, _ast4561>>>, _ast4341> {}; // CXXMethodDecl GetPropertyNames
struct _ast4562: FunctionProtoType<_ast4568, Pack<_ast4563, _ast4564, _ast4565, _ast4566, _ast4567>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
struct _ast4564: EnumType<_ast4322, _ast1849> {}; // EnumType v8::KeyCollectionMode
struct _ast4565: EnumType<_ast4311, _ast1849> {}; // EnumType v8::PropertyFilter
struct _ast4566: EnumType<_ast4325, _ast1849> {}; // EnumType v8::IndexFilter
struct _ast4567: EnumType<_ast4328, _ast1849> {}; // EnumType v8::KeyConversionMode
struct _ast4569: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str645>, _ast4571>, Pack<_ast4570>>>, _ast4341> {}; // CXXMethodDecl GetOwnPropertyNames
struct _ast4571: FunctionProtoType<_ast4573, Pack<_ast4572>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ast4574: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str645>, _ast4578>, Pack<_ast4575, _ast4576, _ast4577>>>, _ast4341> {}; // CXXMethodDecl GetOwnPropertyNames
struct _ast4578: FunctionProtoType<_ast4580, Pack<_ast4579, _ast4565, _ast4567>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
struct _ast4581: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str647>, _ast4582>, Pack<>>>, _ast4341> {}; // CXXMethodDecl GetPrototype
struct _ast4582: FunctionProtoType<_ast4583, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast4584: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str648>, _ast4587>, Pack<_ast4585, _ast4586>>>, _ast4341> {}; // CXXMethodDecl SetPrototype
struct _ast4587: FunctionProtoType<_ast4590, Pack<_ast4588, _ast4589>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4591: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str650>, _ast4593>, Pack<_ast4592>>>, _ast4341> {}; // CXXMethodDecl FindInstanceInPrototypeChain
struct _ast4593: FunctionProtoType<_ast4595, Pack<_ast4594>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _ast4596: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str652>, _ast4598>, Pack<_ast4597>>>, _ast4341> {}; // CXXMethodDecl ObjectProtoToString
struct _ast4598: FunctionProtoType<_ast4600, Pack<_ast4599>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>)
struct _ast4601: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str653>, _ast4602>, Pack<>>>, _ast4341> {}; // CXXMethodDecl GetConstructorName
struct _ast4602: FunctionProtoType<_ast4603, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::String> ()
struct _ast4604: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str654>, _ast4607>, Pack<_ast4605, _ast4606>>>, _ast4341> {}; // CXXMethodDecl SetIntegrityLevel
struct _ast4607: FunctionProtoType<_ast4610, Pack<_ast4608, _ast4609>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _ast4609: EnumType<_ast4331, _ast1849> {}; // EnumType v8::IntegrityLevel
struct _ast4611: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str656>, _ast2997>, Pack<>>>, _ast4341> {}; // CXXMethodDecl InternalFieldCount
struct _ast4612: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str656>, _ast4614>, Pack<_ast4613>>> {}; // CXXMethodDecl InternalFieldCount
struct _ast4614: FunctionProtoType<_ast1849, Pack<_ast4615>, UnqualifiedType> {}; // FunctionProtoType int (const PersistentBase<v8::Object> &)
struct _ast4615: LValueReferenceType<ReferenceType<_ast4616>> {}; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4616: ConstQualifiedType<_ast4617> {}; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4618: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str656>, _ast4620>, Pack<_ast4619>>> {}; // CXXMethodDecl InternalFieldCount
struct _ast4620: FunctionProtoType<_ast1849, Pack<_ast4621>, UnqualifiedType> {}; // FunctionProtoType int (const TracedGlobal<v8::Object> &)
struct _ast4621: LValueReferenceType<ReferenceType<_ast4622>> {}; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4622: ConstQualifiedType<_ast4623> {}; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4624: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str131>, _ast4626>, Pack<_ast4625>>>, _ast4341> {}; // CXXMethodDecl GetInternalField
struct _ast4626: FunctionProtoType<_ast4627, Pack<_ast1849>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (int)
struct _ast4628: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str657>, _ast4631>, Pack<_ast4629, _ast4630>>>, _ast4341> {}; // CXXMethodDecl SetInternalField
struct _ast4631: FunctionProtoType<_ast64, Pack<_ast1849, _ast4632>, UnqualifiedType> {}; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast4633: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str658>, _ast4635>, Pack<_ast4634>>>, _ast4341> {}; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4635: FunctionProtoType<_ast2169, Pack<_ast1849>, UnqualifiedType> {}; // FunctionProtoType void *(int)
struct _ast4636: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str658>, _ast4639>, Pack<_ast4637, _ast4638>>> {}; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4639: FunctionProtoType<_ast2169, Pack<_ast4640, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void *(const PersistentBase<v8::Object> &, int)
struct _ast4640: LValueReferenceType<ReferenceType<_ast4641>> {}; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4641: ConstQualifiedType<_ast4642> {}; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4643: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str658>, _ast4646>, Pack<_ast4644, _ast4645>>> {}; // CXXMethodDecl GetAlignedPointerFromInternalField
struct _ast4646: FunctionProtoType<_ast2169, Pack<_ast4647, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void *(const TracedGlobal<v8::Object> &, int)
struct _ast4647: LValueReferenceType<ReferenceType<_ast4648>> {}; // LValueReferenceType const TracedGlobal<v8::Object> &
struct _ast4648: ConstQualifiedType<_ast4649> {}; // TemplateSpecializationType const TracedGlobal<v8::Object>
struct _ast4650: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str659>, _ast4653>, Pack<_ast4651, _ast4652>>>, _ast4341> {}; // CXXMethodDecl SetAlignedPointerInInternalField
struct _ast4653: FunctionProtoType<_ast64, Pack<_ast1849, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (int, void *)
struct _ast4654: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str660>, _ast4658>, Pack<_ast4655, _ast4656, _ast4657>>>, _ast4341> {}; // CXXMethodDecl SetAlignedPointerInInternalFields
struct _ast4658: FunctionProtoType<_ast64, Pack<_ast1849, _ast4659, _ast4660>, UnqualifiedType> {}; // FunctionProtoType void (int, int *, void **)
struct _ast4661: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str664>, _ast4664>, Pack<_ast4662, _ast4663>>>, _ast4341> {}; // CXXMethodDecl HasOwnProperty
struct _ast4664: FunctionProtoType<_ast4667, Pack<_ast4665, _ast4666>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4668: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str664>, _ast4671>, Pack<_ast4669, _ast4670>>>, _ast4341> {}; // CXXMethodDecl HasOwnProperty
struct _ast4671: FunctionProtoType<_ast4673, Pack<_ast4672, _ast3272>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4674: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str665>, _ast4677>, Pack<_ast4675, _ast4676>>>, _ast4341> {}; // CXXMethodDecl HasRealNamedProperty
struct _ast4677: FunctionProtoType<_ast4680, Pack<_ast4678, _ast4679>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4681: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str666>, _ast4684>, Pack<_ast4682, _ast4683>>>, _ast4341> {}; // CXXMethodDecl HasRealIndexedProperty
struct _ast4684: FunctionProtoType<_ast4686, Pack<_ast4685, _ast3272>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ast4687: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str667>, _ast4690>, Pack<_ast4688, _ast4689>>>, _ast4341> {}; // CXXMethodDecl HasRealNamedCallbackProperty
struct _ast4690: FunctionProtoType<_ast4693, Pack<_ast4691, _ast4692>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ast4694: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str668>, _ast4697>, Pack<_ast4695, _ast4696>>>, _ast4341> {}; // CXXMethodDecl GetRealNamedPropertyInPrototypeChain
struct _ast4697: FunctionProtoType<_ast4700, Pack<_ast4698, _ast4699>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4701: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str669>, _ast4704>, Pack<_ast4702, _ast4703>>>, _ast4341> {}; // CXXMethodDecl GetRealNamedPropertyAttributesInPrototypeChain
struct _ast4704: FunctionProtoType<_ast4707, Pack<_ast4705, _ast4706>, UnqualifiedType> {}; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast4708: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str670>, _ast4711>, Pack<_ast4709, _ast4710>>>, _ast4341> {}; // CXXMethodDecl GetRealNamedProperty
struct _ast4711: FunctionProtoType<_ast4714, Pack<_ast4712, _ast4713>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ast4715: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str671>, _ast4718>, Pack<_ast4716, _ast4717>>>, _ast4341> {}; // CXXMethodDecl GetRealNamedPropertyAttributes
struct _ast4718: FunctionProtoType<_ast4721, Pack<_ast4719, _ast4720>, UnqualifiedType> {}; // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ast4722: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str672>, _ast3172>, Pack<>>>, _ast4341> {}; // CXXMethodDecl HasNamedLookupInterceptor
struct _ast4723: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str673>, _ast3172>, Pack<>>>, _ast4341> {}; // CXXMethodDecl HasIndexedLookupInterceptor
struct _ast4724: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str230>, _ast2997>, Pack<>>>, _ast4341> {}; // CXXMethodDecl GetIdentityHash
struct _ast4725: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str674>, _ast4726>, Pack<>>>, _ast4341> {}; // CXXMethodDecl Clone
struct _ast4726: FunctionProtoType<_ast4727, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> ()
struct _ast4728: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str675>, _ast4729>, Pack<>>>, _ast4341> {}; // CXXMethodDecl CreationContext
struct _ast4729: FunctionProtoType<_ast4730, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> ()
struct _ast4731: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str675>, _ast4733>, Pack<_ast4732>>> {}; // CXXMethodDecl CreationContext
struct _ast4733: FunctionProtoType<_ast4737, Pack<_ast4734>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _ast4734: LValueReferenceType<ReferenceType<_ast4735>> {}; // LValueReferenceType const PersistentBase<v8::Object> &
struct _ast4735: ConstQualifiedType<_ast4736> {}; // TemplateSpecializationType const PersistentBase<v8::Object>
struct _ast4738: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str676>, _ast3172>, Pack<>>>, _ast4341> {}; // CXXMethodDecl IsCallable
struct _ast4739: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str344>, _ast3172>, Pack<>>>, _ast4341> {}; // CXXMethodDecl IsConstructor
struct _ast4740: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str677>, _ast4745>, Pack<_ast4741, _ast4742, _ast4743, _ast4744>>>, _ast4341> {}; // CXXMethodDecl CallAsFunction
struct _ast4745: FunctionProtoType<_ast4749, Pack<_ast4746, _ast4747, _ast1849, _ast4748>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast4750: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str680>, _ast4754>, Pack<_ast4751, _ast4752, _ast4753>>>, _ast4341> {}; // CXXMethodDecl CallAsConstructor
struct _ast4754: FunctionProtoType<_ast4757, Pack<_ast4755, _ast1849, _ast4756>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
struct _ast4758: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast4759>, Pack<>>>, _ast4341> {}; // CXXMethodDecl GetIsolate
struct _ast4759: FunctionProtoType<_ast136, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate *()
struct _ast4760: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str681>, _ast4762>, Pack<_ast4761>>>, _ast4341> {}; // CXXMethodDecl PreviewEntries
struct _ast4762: FunctionProtoType<_ast4763, Pack<_ast4250>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Array> (bool *)
struct _ast4764: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4766>, Pack<_ast4765>>> {}; // CXXMethodDecl New
struct _ast4766: FunctionProtoType<_ast4767, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> (v8::Isolate *)
struct _ast4768: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4774>, Pack<_ast4769, _ast4770, _ast4771, _ast4772, _ast4773>>> {}; // CXXMethodDecl New
struct _ast4774: FunctionProtoType<_ast4780, Pack<_ast136, _ast4775, _ast4776, _ast4778, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _ast4776: PointerType<_ast4777> {}; // PointerType Local<v8::Name> *
struct _ast4778: PointerType<_ast4779> {}; // PointerType Local<v8::Value> *
struct _ast4781: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4783>, Pack<_ast4782>>> {}; // CXXMethodDecl Cast
struct _ast4783: FunctionProtoType<_ast4341, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Object *(v8::Value *)
struct _ast4785: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str172>, _ast3629>, Pack<>>>, _ast4786> {}; // CXXMethodDecl Length
struct _ast4786: PointerType<_ast4787> {}; // PointerType const v8::Array *
struct _ast4787: ConstQualifiedType<_ast4788> {}; // RecordType const v8::Array
struct _ast4788: StructOrClassRecordType<RecordType<_ast6>> {}; // RecordType v8::Array
struct _ast4789: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4792>, Pack<_ast4790, _ast4791>>> {}; // CXXMethodDecl New
struct _ast4792: FunctionProtoType<_ast4793, Pack<_ast136, _ast1849>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Array> (v8::Isolate *, int)
struct _ast4794: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4798>, Pack<_ast4795, _ast4796, _ast4797>>> {}; // CXXMethodDecl New
struct _ast4798: FunctionProtoType<_ast4801, Pack<_ast136, _ast4799, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
struct _ast4799: PointerType<_ast4800> {}; // PointerType Local<v8::Value> *
struct _ast4802: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4804>, Pack<_ast4803>>> {}; // CXXMethodDecl Cast
struct _ast4804: FunctionProtoType<_ast4805, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Array *(v8::Value *)
struct _ast4805: PointerType<_ast4788> {}; // PointerType v8::Array *
struct _ast4808: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str687>, _ast3931>, Pack<>>>, _ast4809> {}; // CXXMethodDecl Size
struct _ast4809: PointerType<_ast4810> {}; // PointerType const v8::Map *
struct _ast4810: ConstQualifiedType<_ast4811> {}; // RecordType const v8::Map
struct _ast4811: StructOrClassRecordType<RecordType<_ast4806>> {}; // RecordType v8::Map
struct _ast4812: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast4813> {}; // CXXMethodDecl Clear
struct _ast4813: PointerType<_ast4811> {}; // PointerType v8::Map *
struct _ast4814: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast4817>, Pack<_ast4815, _ast4816>>>, _ast4813> {}; // CXXMethodDecl Get
struct _ast4817: FunctionProtoType<_ast4820, Pack<_ast4818, _ast4819>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ast4821: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4825>, Pack<_ast4822, _ast4823, _ast4824>>>, _ast4813> {}; // CXXMethodDecl Set
struct _ast4825: FunctionProtoType<_ast4829, Pack<_ast4826, _ast4827, _ast4828>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ast4830: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str625>, _ast4833>, Pack<_ast4831, _ast4832>>>, _ast4813> {}; // CXXMethodDecl Has
struct _ast4833: FunctionProtoType<_ast4836, Pack<_ast4834, _ast4835>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4837: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str626>, _ast4840>, Pack<_ast4838, _ast4839>>>, _ast4813> {}; // CXXMethodDecl Delete
struct _ast4840: FunctionProtoType<_ast4843, Pack<_ast4841, _ast4842>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4844: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str688>, _ast4845>, Pack<>>>, _ast4809> {}; // CXXMethodDecl AsArray
struct _ast4845: FunctionProtoType<_ast4846, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Array> () const
struct _ast4847: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4849>, Pack<_ast4848>>> {}; // CXXMethodDecl New
struct _ast4849: FunctionProtoType<_ast4850, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Map> (v8::Isolate *)
struct _ast4851: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4853>, Pack<_ast4852>>> {}; // CXXMethodDecl Cast
struct _ast4853: FunctionProtoType<_ast4813, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Map *(v8::Value *)
struct _ast4856: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str687>, _ast3931>, Pack<>>>, _ast4857> {}; // CXXMethodDecl Size
struct _ast4857: PointerType<_ast4858> {}; // PointerType const v8::Set *
struct _ast4858: ConstQualifiedType<_ast4859> {}; // RecordType const v8::Set
struct _ast4859: StructOrClassRecordType<RecordType<_ast4854>> {}; // RecordType v8::Set
struct _ast4860: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str55>, _ast63>, Pack<>>>, _ast4861> {}; // CXXMethodDecl Clear
struct _ast4861: PointerType<_ast4859> {}; // PointerType v8::Set *
struct _ast4862: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str689>, _ast4865>, Pack<_ast4863, _ast4864>>>, _ast4861> {}; // CXXMethodDecl Add
struct _ast4865: FunctionProtoType<_ast4868, Pack<_ast4866, _ast4867>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
struct _ast4869: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str625>, _ast4872>, Pack<_ast4870, _ast4871>>>, _ast4861> {}; // CXXMethodDecl Has
struct _ast4872: FunctionProtoType<_ast4875, Pack<_ast4873, _ast4874>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4876: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str626>, _ast4879>, Pack<_ast4877, _ast4878>>>, _ast4861> {}; // CXXMethodDecl Delete
struct _ast4879: FunctionProtoType<_ast4882, Pack<_ast4880, _ast4881>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast4883: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str688>, _ast4884>, Pack<>>>, _ast4857> {}; // CXXMethodDecl AsArray
struct _ast4884: FunctionProtoType<_ast4885, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Array> () const
struct _ast4886: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast4888>, Pack<_ast4887>>> {}; // CXXMethodDecl New
struct _ast4888: FunctionProtoType<_ast4889, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Set> (v8::Isolate *)
struct _ast4890: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast4892>, Pack<_ast4891>>> {}; // CXXMethodDecl Cast
struct _ast4892: FunctionProtoType<_ast4861, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Set *(v8::Value *)
struct _ast4897: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str690>, _ast4899>, Pack<_ast4898>>>, _ast4903>> {}; // CXXConstructorDecl ReturnValue<T>
struct _ast4899: FunctionProtoType<_ast64, Pack<_ast4900>, UnqualifiedType> {}; // FunctionProtoType void (const ReturnValue<S> &)
struct _ast4900: LValueReferenceType<ReferenceType<_ast4901>> {}; // LValueReferenceType const ReturnValue<S> &
struct _ast4901: ConstQualifiedType<_ast4902> {}; // TemplateSpecializationType const ReturnValue<S>
struct _ast4903: PointerType<_ast4904> {}; // PointerType ReturnValue<T> *
struct _ast4907: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4909>, Pack<_ast4908>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4909: FunctionProtoType<_ast64, Pack<_ast4910>, UnqualifiedType> {}; // FunctionProtoType void (const Global<S> &)
struct _ast4910: LValueReferenceType<ReferenceType<_ast4911>> {}; // LValueReferenceType const Global<S> &
struct _ast4911: ConstQualifiedType<_ast4912> {}; // TemplateSpecializationType const Global<S>
struct _ast4915: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4917>, Pack<_ast4916>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4917: FunctionProtoType<_ast64, Pack<_ast4918>, UnqualifiedType> {}; // FunctionProtoType void (const TracedGlobal<S> &)
struct _ast4918: LValueReferenceType<ReferenceType<_ast4919>> {}; // LValueReferenceType const TracedGlobal<S> &
struct _ast4919: ConstQualifiedType<_ast4920> {}; // TemplateSpecializationType const TracedGlobal<S>
struct _ast4923: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4925>, Pack<_ast4924>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4925: FunctionProtoType<_ast64, Pack<_ast4926>, UnqualifiedType> {}; // FunctionProtoType void (const Local<S>)
struct _ast4926: ConstQualifiedType<_ast4927> {}; // TemplateSpecializationType const Local<S>
struct _ast4928: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast3536>, Pack<_ast4929>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4930: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast3546>, Pack<_ast4931>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4932: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4934>, Pack<_ast4933>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4934: FunctionProtoType<_ast64, Pack<_ast4190>, UnqualifiedType> {}; // FunctionProtoType void (int32_t)
struct _ast4935: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast3539>, Pack<_ast4936>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4937: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str691>, _ast63>, Pack<>>>, _ast4903> {}; // CXXMethodDecl SetNull
struct _ast4938: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str692>, _ast63>, Pack<>>>, _ast4903> {}; // CXXMethodDecl SetUndefined
struct _ast4939: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str693>, _ast63>, Pack<>>>, _ast4903> {}; // CXXMethodDecl SetEmptyString
struct _ast4940: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast4941> {}; // CXXMethodDecl GetIsolate
struct _ast4941: PointerType<_ast4942> {}; // PointerType const ReturnValue<T> *
struct _ast4942: ConstQualifiedType<_ast4904> {}; // InjectedClassNameType const ReturnValue<T>
struct _ast4945: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast4947>, Pack<_ast4946>>>, _ast4903> {}; // CXXMethodDecl Set
struct _ast4947: FunctionProtoType<_ast64, Pack<_ast4948>, UnqualifiedType> {}; // FunctionProtoType void (S *)
struct _ast4948: PointerType<_ast4949> {}; // PointerType S *
struct _ast4950: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str80>, _ast4951>, Pack<>>>, _ast4941> {}; // CXXMethodDecl Get
struct _ast4951: FunctionProtoType<_ast4952, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast4955: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str172>, _ast2877>, Pack<>>>, _ast4956> {}; // CXXMethodDecl Length
struct _ast4956: PointerType<_ast4957> {}; // PointerType const FunctionCallbackInfo<T> *
struct _ast4957: ConstQualifiedType<_ast4958> {}; // InjectedClassNameType const FunctionCallbackInfo<T>
struct _ast4959: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str695>, _ast4961>, Pack<_ast4960>>>, _ast4956> {}; // CXXMethodDecl operator[]
struct _ast4961: FunctionProtoType<_ast4962, Pack<_ast1849>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> (int) const
struct _ast4963: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str696>, _ast4964>, Pack<>>>, _ast4956> {}; // CXXMethodDecl This
struct _ast4964: FunctionProtoType<_ast4965, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Object> () const
struct _ast4966: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str697>, _ast4967>, Pack<>>>, _ast4956> {}; // CXXMethodDecl Holder
struct _ast4967: FunctionProtoType<_ast4968, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Object> () const
struct _ast4969: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str698>, _ast4970>, Pack<>>>, _ast4956> {}; // CXXMethodDecl NewTarget
struct _ast4970: FunctionProtoType<_ast4971, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast4972: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str699>, _ast78>, Pack<>>>, _ast4956> {}; // CXXMethodDecl IsConstructCall
struct _ast4973: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str3>, _ast4974>, Pack<>>>, _ast4956> {}; // CXXMethodDecl Data
struct _ast4974: FunctionProtoType<_ast4975, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast4976: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast4956> {}; // CXXMethodDecl GetIsolate
struct _ast4977: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str700>, _ast4978>, Pack<>>>, _ast4956> {}; // CXXMethodDecl GetReturnValue
struct _ast4978: FunctionProtoType<_ast4979, Pack<>, ConstQualifiedType> {}; // FunctionProtoType ReturnValue<T> () const
struct _ast4987: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str708>, _ast4991>, Pack<_ast4988, _ast4989, _ast4990>>>, _ast4992>> {}; // CXXConstructorDecl FunctionCallbackInfo<T>
struct _ast4991: FunctionProtoType<_ast64, Pack<_ast2815, _ast2815, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void (internal::Address *, internal::Address *, int)
struct _ast4992: PointerType<_ast4958> {}; // PointerType FunctionCallbackInfo<T> *
struct _ast4998: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast2397>, Pack<>>>, _ast4999> {}; // CXXMethodDecl GetIsolate
struct _ast4999: PointerType<_ast5000> {}; // PointerType const PropertyCallbackInfo<T> *
struct _ast5000: ConstQualifiedType<_ast5001> {}; // InjectedClassNameType const PropertyCallbackInfo<T>
struct _ast5002: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str3>, _ast5003>, Pack<>>>, _ast4999> {}; // CXXMethodDecl Data
struct _ast5003: FunctionProtoType<_ast5004, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5005: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str696>, _ast5006>, Pack<>>>, _ast4999> {}; // CXXMethodDecl This
struct _ast5006: FunctionProtoType<_ast5007, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Object> () const
struct _ast5008: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str697>, _ast5009>, Pack<>>>, _ast4999> {}; // CXXMethodDecl Holder
struct _ast5009: FunctionProtoType<_ast5010, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Object> () const
struct _ast5011: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str700>, _ast5012>, Pack<>>>, _ast4999> {}; // CXXMethodDecl GetReturnValue
struct _ast5012: FunctionProtoType<_ast5013, Pack<>, ConstQualifiedType> {}; // FunctionProtoType ReturnValue<T> () const
struct _ast5014: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str713>, _ast78>, Pack<>>>, _ast4999> {}; // CXXMethodDecl ShouldThrowOnError
struct _ast5023: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str716>, _ast5025>, Pack<_ast5024>>>, _ast5026>> {}; // CXXConstructorDecl PropertyCallbackInfo<T>
struct _ast5025: FunctionProtoType<_ast64, Pack<_ast2815>, UnqualifiedType> {}; // FunctionProtoType void (internal::Address *)
struct _ast5026: PointerType<_ast5001> {}; // PointerType PropertyCallbackInfo<T> *
struct _ast5028: TypedefNameDecl<TypeDecl<NamedDeclName<_str719>, _ast5029>> {}; // TypedefDecl FunctionCallback
struct _ast5029: PointerType<_ast5030> {}; // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast5030: UnqualifiedType<_ast5031> {}; // ParenType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast5031: FunctionProtoType<_ast64, Pack<_ast5032>, UnqualifiedType> {}; // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast5032: LValueReferenceType<ReferenceType<_ast5033>> {}; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast5033: ConstQualifiedType<_ast5034> {}; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast5039: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5046>, Pack<_ast5040, _ast5041, _ast5042, _ast5043, _ast5044, _ast5045>>> {}; // CXXMethodDecl New
struct _ast5046: FunctionProtoType<_ast5051, Pack<_ast5047, _ast5048, _ast5049, _ast1849, _ast5050, _ast4482>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast5048: TypedefType<_ast5028> {}; // TypedefType v8::FunctionCallback
struct _ast5050: EnumType<_ast5035, _ast1849> {}; // EnumType v8::ConstructorBehavior
struct _ast5052: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str725>, _ast5056>, Pack<_ast5053, _ast5054, _ast5055>>>, _ast5060> {}; // CXXMethodDecl NewInstance
struct _ast5056: FunctionProtoType<_ast5059, Pack<_ast5057, _ast1849, _ast5058>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
struct _ast5060: PointerType<_ast5061> {}; // PointerType const v8::Function *
struct _ast5061: ConstQualifiedType<_ast5062> {}; // RecordType const v8::Function
struct _ast5062: StructOrClassRecordType<RecordType<_ast14>> {}; // RecordType v8::Function
struct _ast5063: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str725>, _ast5065>, Pack<_ast5064>>>, _ast5060> {}; // CXXMethodDecl NewInstance
struct _ast5065: FunctionProtoType<_ast5067, Pack<_ast5066>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ast5068: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str726>, _ast5073>, Pack<_ast5069, _ast5070, _ast5071, _ast5072>>>, _ast5060> {}; // CXXMethodDecl NewInstanceWithSideEffectType
struct _ast5073: FunctionProtoType<_ast5076, Pack<_ast5074, _ast1849, _ast5075, _ast4482>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
struct _ast5077: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str727>, _ast5082>, Pack<_ast5078, _ast5079, _ast5080, _ast5081>>>, _ast5087> {}; // CXXMethodDecl Call
struct _ast5082: FunctionProtoType<_ast5086, Pack<_ast5083, _ast5084, _ast1849, _ast5085>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ast5087: PointerType<_ast5062> {}; // PointerType v8::Function *
struct _ast5088: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str728>, _ast5090>, Pack<_ast5089>>>, _ast5087> {}; // CXXMethodDecl SetName
struct _ast5090: FunctionProtoType<_ast64, Pack<_ast5091>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast5092: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str729>, _ast5093>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetName
struct _ast5093: FunctionProtoType<_ast5094, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5095: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str730>, _ast5096>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetInferredName
struct _ast5096: FunctionProtoType<_ast5097, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5098: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str731>, _ast5099>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetDebugName
struct _ast5099: FunctionProtoType<_ast5100, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5101: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str732>, _ast5102>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetDisplayName
struct _ast5102: FunctionProtoType<_ast5103, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5104: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str733>, _ast2877>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetScriptLineNumber
struct _ast5105: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str734>, _ast2877>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetScriptColumnNumber
struct _ast5106: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str735>, _ast2877>, Pack<>>>, _ast5060> {}; // CXXMethodDecl ScriptId
struct _ast5107: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str736>, _ast5108>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetBoundFunction
struct _ast5108: FunctionProtoType<_ast5109, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5110: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str310>, _ast3321>, Pack<>>>, _ast5060> {}; // CXXMethodDecl GetScriptOrigin
struct _ast5111: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5113>, Pack<_ast5112>>> {}; // CXXMethodDecl Cast
struct _ast5113: FunctionProtoType<_ast5087, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Function *(v8::Value *)
struct _ast5122: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5124>, Pack<_ast5123>>> {}; // CXXMethodDecl New
struct _ast5124: FunctionProtoType<_ast5126, Pack<_ast5125>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _ast5127: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str743>, _ast5128>, Pack<>>>, _ast5130> {}; // CXXMethodDecl GetPromise
struct _ast5128: FunctionProtoType<_ast5129, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Promise> ()
struct _ast5130: PointerType<_ast5131> {}; // PointerType v8::Promise::Resolver *
struct _ast5131: StructOrClassRecordType<RecordType<_ast5120>> {}; // RecordType v8::Promise::Resolver
struct _ast5132: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str744>, _ast5135>, Pack<_ast5133, _ast5134>>>, _ast5130> {}; // CXXMethodDecl Resolve
struct _ast5135: FunctionProtoType<_ast5138, Pack<_ast5136, _ast5137>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5139: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str745>, _ast5142>, Pack<_ast5140, _ast5141>>>, _ast5130> {}; // CXXMethodDecl Reject
struct _ast5142: FunctionProtoType<_ast5145, Pack<_ast5143, _ast5144>, UnqualifiedType> {}; // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ast5146: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5148>, Pack<_ast5147>>> {}; // CXXMethodDecl Cast
struct _ast5148: FunctionProtoType<_ast5130, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Promise::Resolver *(v8::Value *)
struct _ast5149: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str746>, _ast5152>, Pack<_ast5150, _ast5151>>>, _ast5156> {}; // CXXMethodDecl Catch
struct _ast5152: FunctionProtoType<_ast5155, Pack<_ast5153, _ast5154>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5156: PointerType<_ast5157> {}; // PointerType v8::Promise *
struct _ast5157: StructOrClassRecordType<RecordType<_ast38>> {}; // RecordType v8::Promise
struct _ast5158: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str748>, _ast5161>, Pack<_ast5159, _ast5160>>>, _ast5156> {}; // CXXMethodDecl Then
struct _ast5161: FunctionProtoType<_ast5164, Pack<_ast5162, _ast5163>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ast5165: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str748>, _ast5169>, Pack<_ast5166, _ast5167, _ast5168>>>, _ast5156> {}; // CXXMethodDecl Then
struct _ast5169: FunctionProtoType<_ast5173, Pack<_ast5170, _ast5171, _ast5172>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
struct _ast5174: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str751>, _ast3172>, Pack<>>>, _ast5156> {}; // CXXMethodDecl HasHandler
struct _ast5175: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str752>, _ast5176>, Pack<>>>, _ast5156> {}; // CXXMethodDecl Result
struct _ast5176: FunctionProtoType<_ast5177, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast5178: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str753>, _ast5179>, Pack<>>>, _ast5156> {}; // CXXMethodDecl State
struct _ast5179: FunctionProtoType<_ast5180, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::Promise::PromiseState ()
struct _ast5180: EnumType<_ast5116, _ast1849> {}; // EnumType v8::Promise::PromiseState
struct _ast5181: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str754>, _ast63>, Pack<>>>, _ast5156> {}; // CXXMethodDecl MarkAsHandled
struct _ast5182: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5184>, Pack<_ast5183>>> {}; // CXXMethodDecl Cast
struct _ast5184: FunctionProtoType<_ast5156, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Promise *(v8::Value *)
struct _ast5187: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str32>, _ast63>, Pack<>>>, _ast5188>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5188: PointerType<_ast4401> {}; // PointerType v8::PropertyDescriptor *
struct _ast5189: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str32>, _ast5191>, Pack<_ast5190>>>, _ast5188>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5191: FunctionProtoType<_ast64, Pack<_ast5192>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Value>)
struct _ast5193: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str32>, _ast5196>, Pack<_ast5194, _ast5195>>>, _ast5188>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5196: FunctionProtoType<_ast64, Pack<_ast5197, _ast79>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Value>, bool)
struct _ast5198: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str32>, _ast5201>, Pack<_ast5199, _ast5200>>>, _ast5188>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5201: FunctionProtoType<_ast64, Pack<_ast5202, _ast5203>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Value>, Local<v8::Value>)
struct _ast5204: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str759>, _ast5205>, Pack<>>>, _ast5188>> {}; // CXXDestructorDecl ~PropertyDescriptor
struct _ast5205: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5206: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str162>, _ast5207>, Pack<>>>, _ast5209> {}; // CXXMethodDecl value
struct _ast5207: FunctionProtoType<_ast5208, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5209: PointerType<_ast5210> {}; // PointerType const v8::PropertyDescriptor *
struct _ast5210: ConstQualifiedType<_ast4401> {}; // RecordType const v8::PropertyDescriptor
struct _ast5211: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str760>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl has_value
struct _ast5212: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str757>, _ast5213>, Pack<>>>, _ast5209> {}; // CXXMethodDecl get
struct _ast5213: FunctionProtoType<_ast5214, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5215: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str761>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl has_get
struct _ast5216: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str758>, _ast5217>, Pack<>>>, _ast5209> {}; // CXXMethodDecl set
struct _ast5217: FunctionProtoType<_ast5218, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast5219: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str762>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl has_set
struct _ast5220: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str763>, _ast3536>, Pack<_ast5221>>>, _ast5188> {}; // CXXMethodDecl set_enumerable
struct _ast5222: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str764>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl enumerable
struct _ast5223: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str765>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl has_enumerable
struct _ast5224: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str766>, _ast3536>, Pack<_ast5225>>>, _ast5188> {}; // CXXMethodDecl set_configurable
struct _ast5226: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str767>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl configurable
struct _ast5227: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str768>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl has_configurable
struct _ast5228: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str756>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl writable
struct _ast5229: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str769>, _ast78>, Pack<>>>, _ast5209> {}; // CXXMethodDecl has_writable
struct _ast5231: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str771>, _ast5232>, Pack<>>>, _ast5209> {}; // CXXMethodDecl get_private
struct _ast5232: FunctionProtoType<_ast5233, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::PropertyDescriptor::PrivateData *() const
struct _ast5233: PointerType<_ast5234> {}; // PointerType v8::PropertyDescriptor::PrivateData *
struct _ast5234: StructOrClassRecordType<RecordType<_ast5230>> {}; // RecordType v8::PropertyDescriptor::PrivateData
struct _ast5235: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str32>, _ast5237>, Pack<_ast5236>>>, _ast5188>> {}; // CXXConstructorDecl PropertyDescriptor
struct _ast5237: FunctionProtoType<_ast64, Pack<_ast5238>, UnqualifiedType> {}; // FunctionProtoType void (const v8::PropertyDescriptor &)
struct _ast5238: LValueReferenceType<ReferenceType<_ast5210>> {}; // LValueReferenceType const v8::PropertyDescriptor &
struct _ast5239: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5237>, Pack<_ast5240>>>, _ast5188> {}; // CXXMethodDecl operator=
struct _ast5242: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str772>, _ast5243>, Pack<>>>, _ast5245> {}; // CXXMethodDecl GetTarget
struct _ast5243: FunctionProtoType<_ast5244, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast5245: PointerType<_ast5246> {}; // PointerType v8::Proxy *
struct _ast5246: StructOrClassRecordType<RecordType<_ast40>> {}; // RecordType v8::Proxy
struct _ast5247: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str773>, _ast5248>, Pack<>>>, _ast5245> {}; // CXXMethodDecl GetHandler
struct _ast5248: FunctionProtoType<_ast5249, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast5250: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str774>, _ast3172>, Pack<>>>, _ast5245> {}; // CXXMethodDecl IsRevoked
struct _ast5251: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str775>, _ast63>, Pack<>>>, _ast5245> {}; // CXXMethodDecl Revoke
struct _ast5252: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5256>, Pack<_ast5253, _ast5254, _ast5255>>> {}; // CXXMethodDecl New
struct _ast5256: FunctionProtoType<_ast5260, Pack<_ast5257, _ast5258, _ast5259>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
struct _ast5261: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5263>, Pack<_ast5262>>> {}; // CXXMethodDecl Cast
struct _ast5263: FunctionProtoType<_ast5245, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Proxy *(v8::Value *)
struct _ast5268: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str779>, _ast63>, Pack<>>>, _ast5269>> {}; // CXXConstructorDecl MemorySpan<T>
struct _ast5269: PointerType<_ast5270> {}; // PointerType MemorySpan<T> *
struct _ast5271: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str779>, _ast5274>, Pack<_ast5272, _ast5273>>>, _ast5269>> {}; // CXXConstructorDecl MemorySpan<T>
struct _ast5274: FunctionProtoType<_ast64, Pack<_ast5275, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (T *, size_t)
struct _ast5275: PointerType<_ast5276> {}; // PointerType T *
struct _ast5277: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str134>, _ast5278>, Pack<>>>, _ast5279> {}; // CXXMethodDecl data
struct _ast5278: FunctionProtoType<_ast5275, Pack<>, ConstQualifiedType> {}; // FunctionProtoType T *() const
struct _ast5279: PointerType<_ast5280> {}; // PointerType const MemorySpan<T> *
struct _ast5280: ConstQualifiedType<_ast5270> {}; // InjectedClassNameType const MemorySpan<T>
struct _ast5281: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str392>, _ast3931>, Pack<>>>, _ast5279> {}; // CXXMethodDecl size
struct _ast5283: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str778>, _ast5284>, Pack<>>>, _ast5285>> {}; // CXXConstructorDecl MemorySpan
struct _ast5284: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5285: PointerType<_ast5286> {}; // PointerType v8::MemorySpan<const unsigned char> *
struct _ast5286: StructOrClassRecordType<RecordType<_ast5282>> {}; // RecordType v8::MemorySpan<const unsigned char>
struct _ast5287: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str778>, _ast5290>, Pack<_ast5288, _ast5289>>>, _ast5285>> {}; // CXXConstructorDecl MemorySpan
struct _ast5290: FunctionProtoType<_ast64, Pack<_ast5291, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (const unsigned char *, size_t)
struct _ast5291: PointerType<_ast5292> {}; // PointerType const unsigned char *
struct _ast5293: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str134>, _ast5294>, Pack<>>>, _ast5295> {}; // CXXMethodDecl data
struct _ast5294: FunctionProtoType<_ast5291, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const unsigned char *() const
struct _ast5295: PointerType<_ast5296> {}; // PointerType const v8::MemorySpan<const unsigned char> *
struct _ast5296: ConstQualifiedType<_ast5286> {}; // RecordType const v8::MemorySpan<const unsigned char>
struct _ast5297: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str392>, _ast3931>, Pack<>>>, _ast5295> {}; // CXXMethodDecl size
struct _ast5298: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str778>, _ast5300>, Pack<_ast5299>>>, _ast5285>> {}; // CXXConstructorDecl MemorySpan
struct _ast5300: FunctionProtoType<_ast64, Pack<_ast5301>, UnqualifiedType> {}; // FunctionProtoType void (const v8::MemorySpan<const unsigned char> &)
struct _ast5301: LValueReferenceType<ReferenceType<_ast5296>> {}; // LValueReferenceType const v8::MemorySpan<const unsigned char> &
struct _ast5302: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str778>, _ast5304>, Pack<_ast5303>>>, _ast5285>> {}; // CXXConstructorDecl MemorySpan
struct _ast5304: FunctionProtoType<_ast64, Pack<_ast5305>, UnqualifiedType> {}; // FunctionProtoType void (v8::MemorySpan<const unsigned char> &&)
struct _ast5305: RValueReferenceType<ReferenceType<_ast5286>> {}; // RValueReferenceType v8::MemorySpan<const unsigned char> &&
struct _ast5310: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str780>, _ast5313>, Pack<_ast5311, _ast5312>>>, _ast5315>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5313: FunctionProtoType<_ast64, Pack<_ast5314, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (std::unique_ptr<const uint8_t []>, size_t)
struct _ast5315: PointerType<_ast5316> {}; // PointerType v8::OwnedBuffer *
struct _ast5316: StructOrClassRecordType<RecordType<_ast5306>> {}; // RecordType v8::OwnedBuffer
struct _ast5317: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str780>, _ast5318>, Pack<>>>, _ast5315>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5318: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5319: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str780>, _ast5321>, Pack<_ast5320>>>, _ast5315>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5321: FunctionProtoType<_ast64, Pack<_ast5322>, UnqualifiedType> {}; // FunctionProtoType void (const v8::OwnedBuffer &)
struct _ast5322: LValueReferenceType<ReferenceType<_ast5323>> {}; // LValueReferenceType const v8::OwnedBuffer &
struct _ast5323: ConstQualifiedType<_ast5316> {}; // RecordType const v8::OwnedBuffer
struct _ast5324: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str780>, _ast5326>, Pack<_ast5325>>>, _ast5315>> {}; // CXXConstructorDecl OwnedBuffer
struct _ast5326: FunctionProtoType<_ast64, Pack<_ast5327>, UnqualifiedType> {}; // FunctionProtoType void (v8::OwnedBuffer &&) noexcept
struct _ast5327: RValueReferenceType<ReferenceType<_ast5316>> {}; // RValueReferenceType v8::OwnedBuffer &&
struct _ast5328: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5330>, Pack<_ast5329>>>, _ast5315> {}; // CXXMethodDecl operator=
struct _ast5330: FunctionProtoType<_ast5331, Pack<_ast5327>, UnqualifiedType> {}; // FunctionProtoType v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ast5331: LValueReferenceType<ReferenceType<_ast5316>> {}; // LValueReferenceType v8::OwnedBuffer &
struct _ast5332: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str781>, _ast165>, Pack<>>>, _ast5315>> {}; // CXXDestructorDecl ~OwnedBuffer
struct _ast5333: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5335>, Pack<_ast5334>>>, _ast5315> {}; // CXXMethodDecl operator=
struct _ast5335: FunctionProtoType<_ast5331, Pack<_ast5322>, UnqualifiedType> {}; // FunctionProtoType v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ast5338: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str783>, _ast5339>, Pack<>>>, _ast5340> {}; // CXXMethodDecl Serialize
struct _ast5339: FunctionProtoType<_ast5316, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::OwnedBuffer ()
struct _ast5340: PointerType<_ast5341> {}; // PointerType v8::CompiledWasmModule *
struct _ast5341: StructOrClassRecordType<RecordType<_ast5336>> {}; // RecordType v8::CompiledWasmModule
struct _ast5342: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str784>, _ast5343>, Pack<>>>, _ast5340> {}; // CXXMethodDecl GetWireBytesRef
struct _ast5343: FunctionProtoType<_ast5344, Pack<>, UnqualifiedType> {}; // FunctionProtoType MemorySpan<const uint8_t> ()
struct _ast5345: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str782>, _ast5347>, Pack<_ast5346>>>, _ast5340>> {}; // CXXConstructorDecl CompiledWasmModule
struct _ast5347: FunctionProtoType<_ast64, Pack<_ast5348>, UnqualifiedType> {}; // FunctionProtoType void (const v8::CompiledWasmModule &)
struct _ast5348: LValueReferenceType<ReferenceType<_ast5349>> {}; // LValueReferenceType const v8::CompiledWasmModule &
struct _ast5349: ConstQualifiedType<_ast5341> {}; // RecordType const v8::CompiledWasmModule
struct _ast5350: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str782>, _ast5352>, Pack<_ast5351>>>, _ast5340>> {}; // CXXConstructorDecl CompiledWasmModule
struct _ast5352: FunctionProtoType<_ast64, Pack<_ast5353>, UnqualifiedType> {}; // FunctionProtoType void (v8::CompiledWasmModule &&)
struct _ast5353: RValueReferenceType<ReferenceType<_ast5341>> {}; // RValueReferenceType v8::CompiledWasmModule &&
struct _ast5354: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5356>, Pack<_ast5355>>>, _ast5340> {}; // CXXMethodDecl operator=
struct _ast5356: FunctionProtoType<_ast5357, Pack<_ast5353>, UnqualifiedType> {}; // FunctionProtoType v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _ast5357: LValueReferenceType<ReferenceType<_ast5341>> {}; // LValueReferenceType v8::CompiledWasmModule &
struct _ast5358: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str785>, _ast5359>, Pack<>>>, _ast5340>> {}; // CXXDestructorDecl ~CompiledWasmModule
struct _ast5359: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5363: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str786>, _ast5365>, Pack<_ast5364>>>, _ast5368>> {}; // CXXConstructorDecl TransferrableModule
struct _ast5365: FunctionProtoType<_ast64, Pack<_ast5366>, UnqualifiedType> {}; // FunctionProtoType void (v8::WasmModuleObject::TransferrableModule &&)
struct _ast5366: RValueReferenceType<ReferenceType<_ast5367>> {}; // RValueReferenceType v8::WasmModuleObject::TransferrableModule &&
struct _ast5367: StructOrClassRecordType<RecordType<_ast5361>> {}; // RecordType v8::WasmModuleObject::TransferrableModule
struct _ast5368: PointerType<_ast5367> {}; // PointerType v8::WasmModuleObject::TransferrableModule *
struct _ast5369: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str786>, _ast5371>, Pack<_ast5370>>>, _ast5368>> {}; // CXXConstructorDecl TransferrableModule
struct _ast5371: FunctionProtoType<_ast64, Pack<_ast5372>, UnqualifiedType> {}; // FunctionProtoType void (const v8::WasmModuleObject::TransferrableModule &)
struct _ast5372: LValueReferenceType<ReferenceType<_ast5373>> {}; // LValueReferenceType const v8::WasmModuleObject::TransferrableModule &
struct _ast5373: ConstQualifiedType<_ast5367> {}; // RecordType const v8::WasmModuleObject::TransferrableModule
struct _ast5374: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5376>, Pack<_ast5375>>>, _ast5368> {}; // CXXMethodDecl operator=
struct _ast5376: FunctionProtoType<_ast5377, Pack<_ast5366>, UnqualifiedType> {}; // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
struct _ast5377: LValueReferenceType<ReferenceType<_ast5367>> {}; // LValueReferenceType v8::WasmModuleObject::TransferrableModule &
struct _ast5378: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5380>, Pack<_ast5379>>>, _ast5368> {}; // CXXMethodDecl operator=
struct _ast5380: FunctionProtoType<_ast5377, Pack<_ast5372>, UnqualifiedType> {}; // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
struct _ast5381: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str787>, _ast5382>, Pack<>>>, _ast5368>> {}; // CXXDestructorDecl ~TransferrableModule
struct _ast5382: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5383: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str788>, _ast5384>, Pack<>>>, _ast5385> {}; // CXXMethodDecl GetTransferrableModule
struct _ast5384: FunctionProtoType<_ast5367, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::WasmModuleObject::TransferrableModule ()
struct _ast5385: PointerType<_ast5386> {}; // PointerType v8::WasmModuleObject *
struct _ast5386: StructOrClassRecordType<RecordType<_ast57>> {}; // RecordType v8::WasmModuleObject
struct _ast5387: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str789>, _ast5390>, Pack<_ast5388, _ast5389>>> {}; // CXXMethodDecl FromTransferrableModule
struct _ast5390: FunctionProtoType<_ast5391, Pack<_ast136, _ast5372>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
struct _ast5392: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str790>, _ast5393>, Pack<>>>, _ast5385> {}; // CXXMethodDecl GetCompiledModule
struct _ast5393: FunctionProtoType<_ast5341, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::CompiledWasmModule ()
struct _ast5394: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str791>, _ast5398>, Pack<_ast5395, _ast5396, _ast5397>>> {}; // CXXMethodDecl DeserializeOrCompile
struct _ast5398: FunctionProtoType<_ast5401, Pack<_ast136, _ast5399, _ast5400>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _ast5402: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5404>, Pack<_ast5403>>> {}; // CXXMethodDecl Cast
struct _ast5404: FunctionProtoType<_ast5385, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::WasmModuleObject *(v8::Value *)
struct _ast5410: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str797>, _ast5411>, Pack<>>>, _ast5412>>> {}; // CXXDestructorDecl ~Client
struct _ast5411: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5412: PointerType<_ast5413> {}; // PointerType v8::WasmStreaming::Client *
struct _ast5413: StructOrClassRecordType<RecordType<_ast5408>> {}; // RecordType v8::WasmStreaming::Client
struct _ast5414: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str798>, _ast5416>, Pack<_ast5415>>>, _ast5412>> {}; // CXXMethodDecl OnModuleCompiled
struct _ast5416: FunctionProtoType<_ast64, Pack<_ast5341>, UnqualifiedType> {}; // FunctionProtoType void (v8::CompiledWasmModule)
struct _ast5417: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5419>, Pack<_ast5418>>>, _ast5412> {}; // CXXMethodDecl operator=
struct _ast5419: FunctionProtoType<_ast5422, Pack<_ast5420>, UnqualifiedType> {}; // FunctionProtoType v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
struct _ast5420: LValueReferenceType<ReferenceType<_ast5421>> {}; // LValueReferenceType const v8::WasmStreaming::Client &
struct _ast5421: ConstQualifiedType<_ast5413> {}; // RecordType const v8::WasmStreaming::Client
struct _ast5422: LValueReferenceType<ReferenceType<_ast5413>> {}; // LValueReferenceType v8::WasmStreaming::Client &
struct _ast5423: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str794>, _ast5425>, Pack<_ast5424>>>, _ast5427>> {}; // CXXConstructorDecl WasmStreaming
struct _ast5425: FunctionProtoType<_ast64, Pack<_ast5426>, UnqualifiedType> {}; // FunctionProtoType void (std::unique_ptr<WasmStreamingImpl>)
struct _ast5427: PointerType<_ast5428> {}; // PointerType v8::WasmStreaming *
struct _ast5428: StructOrClassRecordType<RecordType<_ast5405>> {}; // RecordType v8::WasmStreaming
struct _ast5429: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str800>, _ast5430>, Pack<>>>, _ast5427>> {}; // CXXDestructorDecl ~WasmStreaming
struct _ast5430: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5431: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str801>, _ast5434>, Pack<_ast5432, _ast5433>>>, _ast5427> {}; // CXXMethodDecl OnBytesReceived
struct _ast5434: FunctionProtoType<_ast64, Pack<_ast3111, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (const uint8_t *, size_t)
struct _ast5435: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str803>, _ast63>, Pack<>>>, _ast5427> {}; // CXXMethodDecl Finish
struct _ast5436: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str804>, _ast5438>, Pack<_ast5437>>>, _ast5427> {}; // CXXMethodDecl Abort
struct _ast5438: FunctionProtoType<_ast64, Pack<_ast5439>, UnqualifiedType> {}; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5440: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str806>, _ast5443>, Pack<_ast5441, _ast5442>>>, _ast5427> {}; // CXXMethodDecl SetCompiledModuleBytes
struct _ast5443: FunctionProtoType<_ast79, Pack<_ast3111, _ast3170>, UnqualifiedType> {}; // FunctionProtoType bool (const uint8_t *, size_t)
struct _ast5444: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str807>, _ast5446>, Pack<_ast5445>>>, _ast5427> {}; // CXXMethodDecl SetClient
struct _ast5446: FunctionProtoType<_ast64, Pack<_ast5447>, UnqualifiedType> {}; // FunctionProtoType void (std::shared_ptr<Client>)
struct _ast5448: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str809>, _ast5451>, Pack<_ast5449, _ast5450>>> {}; // CXXMethodDecl Unpack
struct _ast5451: FunctionProtoType<_ast5453, Pack<_ast136, _ast5452>, UnqualifiedType> {}; // FunctionProtoType std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
struct _ast5454: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str794>, _ast5456>, Pack<_ast5455>>>, _ast5427>> {}; // CXXConstructorDecl WasmStreaming
struct _ast5456: FunctionProtoType<_ast64, Pack<_ast5457>, UnqualifiedType> {}; // FunctionProtoType void (const v8::WasmStreaming &)
struct _ast5457: LValueReferenceType<ReferenceType<_ast5458>> {}; // LValueReferenceType const v8::WasmStreaming &
struct _ast5458: ConstQualifiedType<_ast5428> {}; // RecordType const v8::WasmStreaming
struct _ast5461: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str810>, _ast2787>, Pack<_ast5462>>>, _ast5463>> {}; // CXXConstructorDecl WasmModuleObjectBuilderStreaming
struct _ast5463: PointerType<_ast5464> {}; // PointerType v8::WasmModuleObjectBuilderStreaming *
struct _ast5464: StructOrClassRecordType<RecordType<_ast5459>> {}; // RecordType v8::WasmModuleObjectBuilderStreaming
struct _ast5465: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str801>, _ast5434>, Pack<_ast5466, _ast5467>>>, _ast5463> {}; // CXXMethodDecl OnBytesReceived
struct _ast5468: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str803>, _ast63>, Pack<>>>, _ast5463> {}; // CXXMethodDecl Finish
struct _ast5469: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str804>, _ast5471>, Pack<_ast5470>>>, _ast5463> {}; // CXXMethodDecl Abort
struct _ast5471: FunctionProtoType<_ast64, Pack<_ast5472>, UnqualifiedType> {}; // FunctionProtoType void (MaybeLocal<v8::Value>)
struct _ast5473: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str743>, _ast5474>, Pack<>>>, _ast5463> {}; // CXXMethodDecl GetPromise
struct _ast5474: FunctionProtoType<_ast5475, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Promise> ()
struct _ast5476: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str811>, _ast5477>, Pack<>>>, _ast5463>> {}; // CXXDestructorDecl ~WasmModuleObjectBuilderStreaming
struct _ast5477: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5484: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str815>, _ast5485>, Pack<>>>, _ast5486>>> {}; // CXXDestructorDecl ~Allocator
struct _ast5485: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast5486: PointerType<_ast5487> {}; // PointerType v8::ArrayBuffer::Allocator *
struct _ast5487: StructOrClassRecordType<RecordType<_ast5482>> {}; // RecordType v8::ArrayBuffer::Allocator
struct _ast5488: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str816>, _ast5490>, Pack<_ast5489>>>, _ast5486>> {}; // CXXMethodDecl Allocate
struct _ast5490: FunctionProtoType<_ast2169, Pack<_ast3170>, UnqualifiedType> {}; // FunctionProtoType void *(size_t)
struct _ast5491: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str817>, _ast5490>, Pack<_ast5492>>>, _ast5486>> {}; // CXXMethodDecl AllocateUninitialized
struct _ast5493: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str818>, _ast5496>, Pack<_ast5494, _ast5495>>>, _ast5486>> {}; // CXXMethodDecl Free
struct _ast5496: FunctionProtoType<_ast64, Pack<_ast2169, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (void *, size_t)
struct _ast5500: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str821>, _ast5501>, Pack<>>> {}; // CXXMethodDecl NewDefaultAllocator
struct _ast5501: FunctionProtoType<_ast5486, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::ArrayBuffer::Allocator *()
struct _ast5502: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast5504>, Pack<_ast5503>>>, _ast5486> {}; // CXXMethodDecl operator=
struct _ast5504: FunctionProtoType<_ast5507, Pack<_ast5505>, UnqualifiedType> {}; // FunctionProtoType v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
struct _ast5505: LValueReferenceType<ReferenceType<_ast5506>> {}; // LValueReferenceType const v8::ArrayBuffer::Allocator &
struct _ast5506: ConstQualifiedType<_ast5487> {}; // RecordType const v8::ArrayBuffer::Allocator
struct _ast5507: LValueReferenceType<ReferenceType<_ast5487>> {}; // LValueReferenceType v8::ArrayBuffer::Allocator &
struct _ast5510: TypedefNameDecl<TypeDecl<NamedDeclName<_str823>, _ast5511>> {}; // TypeAliasDecl DeleterCallback
struct _ast5511: PointerType<_ast5512> {}; // PointerType void (*)(void *, size_t, void *)
struct _ast5512: UnqualifiedType<_ast5513> {}; // ParenType void (void *, size_t, void *)
struct _ast5513: FunctionProtoType<_ast64, Pack<_ast2169, _ast3170, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (void *, size_t, void *)
struct _ast5514: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str822>, _ast63>, Pack<>>>, _ast5515>> {}; // CXXConstructorDecl Contents
struct _ast5515: PointerType<_ast5516> {}; // PointerType v8::ArrayBuffer::Contents *
struct _ast5516: StructOrClassRecordType<RecordType<_ast5508>> {}; // RecordType v8::ArrayBuffer::Contents
struct _ast5517: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str824>, _ast5518>, Pack<>>>, _ast5519> {}; // CXXMethodDecl AllocationBase
struct _ast5518: FunctionProtoType<_ast2169, Pack<>, ConstQualifiedType> {}; // FunctionProtoType void *() const
struct _ast5519: PointerType<_ast5520> {}; // PointerType const v8::ArrayBuffer::Contents *
struct _ast5520: ConstQualifiedType<_ast5516> {}; // RecordType const v8::ArrayBuffer::Contents
struct _ast5521: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str825>, _ast3931>, Pack<>>>, _ast5519> {}; // CXXMethodDecl AllocationLength
struct _ast5522: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str819>, _ast5523>, Pack<>>>, _ast5519> {}; // CXXMethodDecl AllocationMode
struct _ast5523: FunctionProtoType<_ast5524, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5525: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str3>, _ast5518>, Pack<>>>, _ast5519> {}; // CXXMethodDecl Data
struct _ast5526: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str826>, _ast3931>, Pack<>>>, _ast5519> {}; // CXXMethodDecl ByteLength
struct _ast5527: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str827>, _ast5528>, Pack<>>>, _ast5519> {}; // CXXMethodDecl Deleter
struct _ast5528: FunctionProtoType<_ast5529, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::ArrayBuffer::Contents::DeleterCallback () const
struct _ast5529: TypedefType<_ast5510> {}; // TypedefType v8::ArrayBuffer::Contents::DeleterCallback
struct _ast5530: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str828>, _ast5518>, Pack<>>>, _ast5519> {}; // CXXMethodDecl DeleterData
struct _ast5531: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str826>, _ast3931>, Pack<>>>, _ast5532> {}; // CXXMethodDecl ByteLength
struct _ast5532: PointerType<_ast5533> {}; // PointerType const v8::ArrayBuffer *
struct _ast5533: ConstQualifiedType<_ast5534> {}; // RecordType const v8::ArrayBuffer
struct _ast5534: StructOrClassRecordType<RecordType<_ast7>> {}; // RecordType v8::ArrayBuffer
struct _ast5535: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5538>, Pack<_ast5536, _ast5537>>> {}; // CXXMethodDecl New
struct _ast5538: FunctionProtoType<_ast5539, Pack<_ast136, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _ast5540: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5545>, Pack<_ast5541, _ast5542, _ast5543, _ast5544>>> {}; // CXXMethodDecl New
struct _ast5545: FunctionProtoType<_ast5547, Pack<_ast136, _ast2169, _ast3170, _ast5546>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5546: EnumType<_ast5478, _ast1849> {}; // EnumType v8::ArrayBufferCreationMode
struct _ast5548: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str443>, _ast78>, Pack<>>>, _ast5532> {}; // CXXMethodDecl IsExternal
struct _ast5549: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str830>, _ast78>, Pack<>>>, _ast5532> {}; // CXXMethodDecl IsDetachable
struct _ast5550: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str831>, _ast78>, Pack<>>>, _ast5532> {}; // CXXMethodDecl IsNeuterable
struct _ast5551: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str832>, _ast63>, Pack<>>>, _ast5552> {}; // CXXMethodDecl Detach
struct _ast5552: PointerType<_ast5534> {}; // PointerType v8::ArrayBuffer *
struct _ast5553: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str833>, _ast63>, Pack<>>>, _ast5552> {}; // CXXMethodDecl Neuter
struct _ast5554: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str834>, _ast5555>, Pack<>>>, _ast5552> {}; // CXXMethodDecl Externalize
struct _ast5555: FunctionProtoType<_ast5516, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::ArrayBuffer::Contents ()
struct _ast5556: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str835>, _ast5555>, Pack<>>>, _ast5552> {}; // CXXMethodDecl GetContents
struct _ast5557: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5559>, Pack<_ast5558>>> {}; // CXXMethodDecl Cast
struct _ast5559: FunctionProtoType<_ast5552, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::ArrayBuffer *(v8::Value *)
struct _ast5564: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str838>, _ast5565>, Pack<>>>, _ast5567> {}; // CXXMethodDecl Buffer
struct _ast5565: FunctionProtoType<_ast5566, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ArrayBuffer> ()
struct _ast5567: PointerType<_ast5568> {}; // PointerType v8::ArrayBufferView *
struct _ast5568: StructOrClassRecordType<RecordType<_ast5562>> {}; // RecordType v8::ArrayBufferView
struct _ast5569: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str839>, _ast5570>, Pack<>>>, _ast5567> {}; // CXXMethodDecl ByteOffset
struct _ast5570: FunctionProtoType<_ast3170, Pack<>, UnqualifiedType> {}; // FunctionProtoType size_t ()
struct _ast5571: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str826>, _ast5570>, Pack<>>>, _ast5567> {}; // CXXMethodDecl ByteLength
struct _ast5572: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str840>, _ast5575>, Pack<_ast5573, _ast5574>>>, _ast5567> {}; // CXXMethodDecl CopyContents
struct _ast5575: FunctionProtoType<_ast3170, Pack<_ast2169, _ast3170>, UnqualifiedType> {}; // FunctionProtoType size_t (void *, size_t)
struct _ast5576: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str841>, _ast78>, Pack<>>>, _ast5577> {}; // CXXMethodDecl HasBuffer
struct _ast5577: PointerType<_ast5578> {}; // PointerType const v8::ArrayBufferView *
struct _ast5578: ConstQualifiedType<_ast5568> {}; // RecordType const v8::ArrayBufferView
struct _ast5579: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5581>, Pack<_ast5580>>> {}; // CXXMethodDecl Cast
struct _ast5581: FunctionProtoType<_ast5567, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::ArrayBufferView *(v8::Value *)
struct _ast5587: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str172>, _ast5570>, Pack<>>>, _ast5588> {}; // CXXMethodDecl Length
struct _ast5588: PointerType<_ast5589> {}; // PointerType v8::TypedArray *
struct _ast5589: StructOrClassRecordType<RecordType<_ast5584>> {}; // RecordType v8::TypedArray
struct _ast5590: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5592>, Pack<_ast5591>>> {}; // CXXMethodDecl Cast
struct _ast5592: FunctionProtoType<_ast5588, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::TypedArray *(v8::Value *)
struct _ast5595: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5599>, Pack<_ast5596, _ast5597, _ast5598>>> {}; // CXXMethodDecl New
struct _ast5599: FunctionProtoType<_ast5601, Pack<_ast5600, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5602: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5606>, Pack<_ast5603, _ast5604, _ast5605>>> {}; // CXXMethodDecl New
struct _ast5606: FunctionProtoType<_ast5608, Pack<_ast5607, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5609: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5611>, Pack<_ast5610>>> {}; // CXXMethodDecl Cast
struct _ast5611: FunctionProtoType<_ast5612, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Uint8Array *(v8::Value *)
struct _ast5612: PointerType<_ast5613> {}; // PointerType v8::Uint8Array *
struct _ast5613: StructOrClassRecordType<RecordType<_ast5593>> {}; // RecordType v8::Uint8Array
struct _ast5616: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5620>, Pack<_ast5617, _ast5618, _ast5619>>> {}; // CXXMethodDecl New
struct _ast5620: FunctionProtoType<_ast5622, Pack<_ast5621, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5623: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5627>, Pack<_ast5624, _ast5625, _ast5626>>> {}; // CXXMethodDecl New
struct _ast5627: FunctionProtoType<_ast5629, Pack<_ast5628, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5630: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5632>, Pack<_ast5631>>> {}; // CXXMethodDecl Cast
struct _ast5632: FunctionProtoType<_ast5633, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Uint8ClampedArray *(v8::Value *)
struct _ast5633: PointerType<_ast5634> {}; // PointerType v8::Uint8ClampedArray *
struct _ast5634: StructOrClassRecordType<RecordType<_ast5614>> {}; // RecordType v8::Uint8ClampedArray
struct _ast5637: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5641>, Pack<_ast5638, _ast5639, _ast5640>>> {}; // CXXMethodDecl New
struct _ast5641: FunctionProtoType<_ast5643, Pack<_ast5642, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5644: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5648>, Pack<_ast5645, _ast5646, _ast5647>>> {}; // CXXMethodDecl New
struct _ast5648: FunctionProtoType<_ast5650, Pack<_ast5649, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5651: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5653>, Pack<_ast5652>>> {}; // CXXMethodDecl Cast
struct _ast5653: FunctionProtoType<_ast5654, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Int8Array *(v8::Value *)
struct _ast5654: PointerType<_ast5655> {}; // PointerType v8::Int8Array *
struct _ast5655: StructOrClassRecordType<RecordType<_ast5635>> {}; // RecordType v8::Int8Array
struct _ast5658: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5662>, Pack<_ast5659, _ast5660, _ast5661>>> {}; // CXXMethodDecl New
struct _ast5662: FunctionProtoType<_ast5664, Pack<_ast5663, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5665: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5669>, Pack<_ast5666, _ast5667, _ast5668>>> {}; // CXXMethodDecl New
struct _ast5669: FunctionProtoType<_ast5671, Pack<_ast5670, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5672: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5674>, Pack<_ast5673>>> {}; // CXXMethodDecl Cast
struct _ast5674: FunctionProtoType<_ast5675, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Uint16Array *(v8::Value *)
struct _ast5675: PointerType<_ast5676> {}; // PointerType v8::Uint16Array *
struct _ast5676: StructOrClassRecordType<RecordType<_ast5656>> {}; // RecordType v8::Uint16Array
struct _ast5679: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5683>, Pack<_ast5680, _ast5681, _ast5682>>> {}; // CXXMethodDecl New
struct _ast5683: FunctionProtoType<_ast5685, Pack<_ast5684, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5686: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5690>, Pack<_ast5687, _ast5688, _ast5689>>> {}; // CXXMethodDecl New
struct _ast5690: FunctionProtoType<_ast5692, Pack<_ast5691, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5693: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5695>, Pack<_ast5694>>> {}; // CXXMethodDecl Cast
struct _ast5695: FunctionProtoType<_ast5696, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Int16Array *(v8::Value *)
struct _ast5696: PointerType<_ast5697> {}; // PointerType v8::Int16Array *
struct _ast5697: StructOrClassRecordType<RecordType<_ast5677>> {}; // RecordType v8::Int16Array
struct _ast5700: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5704>, Pack<_ast5701, _ast5702, _ast5703>>> {}; // CXXMethodDecl New
struct _ast5704: FunctionProtoType<_ast5706, Pack<_ast5705, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5707: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5711>, Pack<_ast5708, _ast5709, _ast5710>>> {}; // CXXMethodDecl New
struct _ast5711: FunctionProtoType<_ast5713, Pack<_ast5712, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5714: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5716>, Pack<_ast5715>>> {}; // CXXMethodDecl Cast
struct _ast5716: FunctionProtoType<_ast5717, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Uint32Array *(v8::Value *)
struct _ast5717: PointerType<_ast5718> {}; // PointerType v8::Uint32Array *
struct _ast5718: StructOrClassRecordType<RecordType<_ast5698>> {}; // RecordType v8::Uint32Array
struct _ast5721: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5725>, Pack<_ast5722, _ast5723, _ast5724>>> {}; // CXXMethodDecl New
struct _ast5725: FunctionProtoType<_ast5727, Pack<_ast5726, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5728: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5732>, Pack<_ast5729, _ast5730, _ast5731>>> {}; // CXXMethodDecl New
struct _ast5732: FunctionProtoType<_ast5734, Pack<_ast5733, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5735: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5737>, Pack<_ast5736>>> {}; // CXXMethodDecl Cast
struct _ast5737: FunctionProtoType<_ast5738, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Int32Array *(v8::Value *)
struct _ast5738: PointerType<_ast5739> {}; // PointerType v8::Int32Array *
struct _ast5739: StructOrClassRecordType<RecordType<_ast5719>> {}; // RecordType v8::Int32Array
struct _ast5742: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5746>, Pack<_ast5743, _ast5744, _ast5745>>> {}; // CXXMethodDecl New
struct _ast5746: FunctionProtoType<_ast5748, Pack<_ast5747, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5749: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5753>, Pack<_ast5750, _ast5751, _ast5752>>> {}; // CXXMethodDecl New
struct _ast5753: FunctionProtoType<_ast5755, Pack<_ast5754, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5756: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5758>, Pack<_ast5757>>> {}; // CXXMethodDecl Cast
struct _ast5758: FunctionProtoType<_ast5759, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Float32Array *(v8::Value *)
struct _ast5759: PointerType<_ast5760> {}; // PointerType v8::Float32Array *
struct _ast5760: StructOrClassRecordType<RecordType<_ast5740>> {}; // RecordType v8::Float32Array
struct _ast5763: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5767>, Pack<_ast5764, _ast5765, _ast5766>>> {}; // CXXMethodDecl New
struct _ast5767: FunctionProtoType<_ast5769, Pack<_ast5768, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5770: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5774>, Pack<_ast5771, _ast5772, _ast5773>>> {}; // CXXMethodDecl New
struct _ast5774: FunctionProtoType<_ast5776, Pack<_ast5775, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5777: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5779>, Pack<_ast5778>>> {}; // CXXMethodDecl Cast
struct _ast5779: FunctionProtoType<_ast5780, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Float64Array *(v8::Value *)
struct _ast5780: PointerType<_ast5781> {}; // PointerType v8::Float64Array *
struct _ast5781: StructOrClassRecordType<RecordType<_ast5761>> {}; // RecordType v8::Float64Array
struct _ast5784: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5788>, Pack<_ast5785, _ast5786, _ast5787>>> {}; // CXXMethodDecl New
struct _ast5788: FunctionProtoType<_ast5790, Pack<_ast5789, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5791: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5795>, Pack<_ast5792, _ast5793, _ast5794>>> {}; // CXXMethodDecl New
struct _ast5795: FunctionProtoType<_ast5797, Pack<_ast5796, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5798: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5800>, Pack<_ast5799>>> {}; // CXXMethodDecl Cast
struct _ast5800: FunctionProtoType<_ast5801, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::BigInt64Array *(v8::Value *)
struct _ast5801: PointerType<_ast5802> {}; // PointerType v8::BigInt64Array *
struct _ast5802: StructOrClassRecordType<RecordType<_ast5782>> {}; // RecordType v8::BigInt64Array
struct _ast5805: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5809>, Pack<_ast5806, _ast5807, _ast5808>>> {}; // CXXMethodDecl New
struct _ast5809: FunctionProtoType<_ast5811, Pack<_ast5810, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5812: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5816>, Pack<_ast5813, _ast5814, _ast5815>>> {}; // CXXMethodDecl New
struct _ast5816: FunctionProtoType<_ast5818, Pack<_ast5817, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5819: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5821>, Pack<_ast5820>>> {}; // CXXMethodDecl Cast
struct _ast5821: FunctionProtoType<_ast5822, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::BigUint64Array *(v8::Value *)
struct _ast5822: PointerType<_ast5823> {}; // PointerType v8::BigUint64Array *
struct _ast5823: StructOrClassRecordType<RecordType<_ast5803>> {}; // RecordType v8::BigUint64Array
struct _ast5826: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5830>, Pack<_ast5827, _ast5828, _ast5829>>> {}; // CXXMethodDecl New
struct _ast5830: FunctionProtoType<_ast5832, Pack<_ast5831, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ast5833: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5837>, Pack<_ast5834, _ast5835, _ast5836>>> {}; // CXXMethodDecl New
struct _ast5837: FunctionProtoType<_ast5839, Pack<_ast5838, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ast5840: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5842>, Pack<_ast5841>>> {}; // CXXMethodDecl Cast
struct _ast5842: FunctionProtoType<_ast5843, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::DataView *(v8::Value *)
struct _ast5843: PointerType<_ast5844> {}; // PointerType v8::DataView *
struct _ast5844: StructOrClassRecordType<RecordType<_ast5824>> {}; // RecordType v8::DataView
struct _ast5848: TypedefNameDecl<TypeDecl<NamedDeclName<_str814>, _ast5849>> {}; // TypeAliasDecl Allocator
struct _ast5850: TypedefNameDecl<TypeDecl<NamedDeclName<_str823>, _ast5511>> {}; // TypeAliasDecl DeleterCallback
struct _ast5851: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str822>, _ast63>, Pack<>>>, _ast5852>> {}; // CXXConstructorDecl Contents
struct _ast5852: PointerType<_ast5853> {}; // PointerType v8::SharedArrayBuffer::Contents *
struct _ast5853: StructOrClassRecordType<RecordType<_ast5846>> {}; // RecordType v8::SharedArrayBuffer::Contents
struct _ast5854: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str824>, _ast5518>, Pack<>>>, _ast5855> {}; // CXXMethodDecl AllocationBase
struct _ast5855: PointerType<_ast5856> {}; // PointerType const v8::SharedArrayBuffer::Contents *
struct _ast5856: ConstQualifiedType<_ast5853> {}; // RecordType const v8::SharedArrayBuffer::Contents
struct _ast5857: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str825>, _ast3931>, Pack<>>>, _ast5855> {}; // CXXMethodDecl AllocationLength
struct _ast5858: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str819>, _ast5859>, Pack<>>>, _ast5855> {}; // CXXMethodDecl AllocationMode
struct _ast5859: FunctionProtoType<_ast5860, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Allocator::AllocationMode () const
struct _ast5861: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str3>, _ast5518>, Pack<>>>, _ast5855> {}; // CXXMethodDecl Data
struct _ast5862: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str826>, _ast3931>, Pack<>>>, _ast5855> {}; // CXXMethodDecl ByteLength
struct _ast5863: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str827>, _ast5864>, Pack<>>>, _ast5855> {}; // CXXMethodDecl Deleter
struct _ast5864: FunctionProtoType<_ast5865, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _ast5865: TypedefType<_ast5850> {}; // TypedefType v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ast5866: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str828>, _ast5518>, Pack<>>>, _ast5855> {}; // CXXMethodDecl DeleterData
struct _ast5867: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str826>, _ast3931>, Pack<>>>, _ast5868> {}; // CXXMethodDecl ByteLength
struct _ast5868: PointerType<_ast5869> {}; // PointerType const v8::SharedArrayBuffer *
struct _ast5869: ConstQualifiedType<_ast5870> {}; // RecordType const v8::SharedArrayBuffer
struct _ast5870: StructOrClassRecordType<RecordType<_ast43>> {}; // RecordType v8::SharedArrayBuffer
struct _ast5871: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5874>, Pack<_ast5872, _ast5873>>> {}; // CXXMethodDecl New
struct _ast5874: FunctionProtoType<_ast5875, Pack<_ast136, _ast3170>, UnqualifiedType> {}; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _ast5876: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5881>, Pack<_ast5877, _ast5878, _ast5879, _ast5880>>> {}; // CXXMethodDecl New
struct _ast5881: FunctionProtoType<_ast5882, Pack<_ast136, _ast2169, _ast3170, _ast5546>, UnqualifiedType> {}; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ast5883: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5887>, Pack<_ast5884, _ast5885, _ast5886>>> {}; // CXXMethodDecl New
struct _ast5887: FunctionProtoType<_ast5891, Pack<_ast136, _ast5888, _ast5546>, UnqualifiedType> {}; // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _ast5888: LValueReferenceType<ReferenceType<_ast5889>> {}; // LValueReferenceType const SharedArrayBuffer::Contents &
struct _ast5889: ConstQualifiedType<_ast5890> {}; // ElaboratedType const SharedArrayBuffer::Contents
struct _ast5892: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str443>, _ast78>, Pack<>>>, _ast5868> {}; // CXXMethodDecl IsExternal
struct _ast5893: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str834>, _ast5894>, Pack<>>>, _ast5895> {}; // CXXMethodDecl Externalize
struct _ast5894: FunctionProtoType<_ast5853, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::SharedArrayBuffer::Contents ()
struct _ast5895: PointerType<_ast5870> {}; // PointerType v8::SharedArrayBuffer *
struct _ast5896: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str835>, _ast5894>, Pack<>>>, _ast5895> {}; // CXXMethodDecl GetContents
struct _ast5897: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5899>, Pack<_ast5898>>> {}; // CXXMethodDecl Cast
struct _ast5899: FunctionProtoType<_ast5895, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::SharedArrayBuffer *(v8::Value *)
struct _ast5902: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5905>, Pack<_ast5903, _ast5904>>> {}; // CXXMethodDecl New
struct _ast5905: FunctionProtoType<_ast5907, Pack<_ast5906, _ast3547>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _ast5908: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str857>, _ast4172>, Pack<>>>, _ast5909> {}; // CXXMethodDecl ValueOf
struct _ast5909: PointerType<_ast5910> {}; // PointerType const v8::Date *
struct _ast5910: ConstQualifiedType<_ast5911> {}; // RecordType const v8::Date
struct _ast5911: StructOrClassRecordType<RecordType<_ast12>> {}; // RecordType v8::Date
struct _ast5912: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5914>, Pack<_ast5913>>> {}; // CXXMethodDecl Cast
struct _ast5914: FunctionProtoType<_ast5915, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::Date *(v8::Value *)
struct _ast5915: PointerType<_ast5911> {}; // PointerType v8::Date *
struct _ast5917: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5920>, Pack<_ast5918, _ast5919>>> {}; // CXXMethodDecl New
struct _ast5920: FunctionProtoType<_ast5921, Pack<_ast136, _ast3547>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, double)
struct _ast5922: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str857>, _ast4172>, Pack<>>>, _ast5923> {}; // CXXMethodDecl ValueOf
struct _ast5923: PointerType<_ast5924> {}; // PointerType const v8::NumberObject *
struct _ast5924: ConstQualifiedType<_ast5925> {}; // RecordType const v8::NumberObject
struct _ast5925: StructOrClassRecordType<RecordType<_ast32>> {}; // RecordType v8::NumberObject
struct _ast5926: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5928>, Pack<_ast5927>>> {}; // CXXMethodDecl Cast
struct _ast5928: FunctionProtoType<_ast5929, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::NumberObject *(v8::Value *)
struct _ast5929: PointerType<_ast5925> {}; // PointerType v8::NumberObject *
struct _ast5931: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5934>, Pack<_ast5932, _ast5933>>> {}; // CXXMethodDecl New
struct _ast5934: FunctionProtoType<_ast5935, Pack<_ast136, _ast4199>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, int64_t)
struct _ast5936: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str857>, _ast5937>, Pack<>>>, _ast5939> {}; // CXXMethodDecl ValueOf
struct _ast5937: FunctionProtoType<_ast5938, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::BigInt> () const
struct _ast5939: PointerType<_ast5940> {}; // PointerType const v8::BigIntObject *
struct _ast5940: ConstQualifiedType<_ast5941> {}; // RecordType const v8::BigIntObject
struct _ast5941: StructOrClassRecordType<RecordType<_ast9>> {}; // RecordType v8::BigIntObject
struct _ast5942: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5944>, Pack<_ast5943>>> {}; // CXXMethodDecl Cast
struct _ast5944: FunctionProtoType<_ast5945, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::BigIntObject *(v8::Value *)
struct _ast5945: PointerType<_ast5941> {}; // PointerType v8::BigIntObject *
struct _ast5947: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5950>, Pack<_ast5948, _ast5949>>> {}; // CXXMethodDecl New
struct _ast5950: FunctionProtoType<_ast5951, Pack<_ast136, _ast79>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, bool)
struct _ast5952: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str857>, _ast78>, Pack<>>>, _ast5953> {}; // CXXMethodDecl ValueOf
struct _ast5953: PointerType<_ast5954> {}; // PointerType const v8::BooleanObject *
struct _ast5954: ConstQualifiedType<_ast5955> {}; // RecordType const v8::BooleanObject
struct _ast5955: StructOrClassRecordType<RecordType<_ast11>> {}; // RecordType v8::BooleanObject
struct _ast5956: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5958>, Pack<_ast5957>>> {}; // CXXMethodDecl Cast
struct _ast5958: FunctionProtoType<_ast5959, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::BooleanObject *(v8::Value *)
struct _ast5959: PointerType<_ast5955> {}; // PointerType v8::BooleanObject *
struct _ast5961: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5964>, Pack<_ast5962, _ast5963>>> {}; // CXXMethodDecl New
struct _ast5964: FunctionProtoType<_ast5966, Pack<_ast136, _ast5965>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _ast5967: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str857>, _ast5968>, Pack<>>>, _ast5970> {}; // CXXMethodDecl ValueOf
struct _ast5968: FunctionProtoType<_ast5969, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> () const
struct _ast5970: PointerType<_ast5971> {}; // PointerType const v8::StringObject *
struct _ast5971: ConstQualifiedType<_ast5972> {}; // RecordType const v8::StringObject
struct _ast5972: StructOrClassRecordType<RecordType<_ast49>> {}; // RecordType v8::StringObject
struct _ast5973: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5975>, Pack<_ast5974>>> {}; // CXXMethodDecl Cast
struct _ast5975: FunctionProtoType<_ast5976, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::StringObject *(v8::Value *)
struct _ast5976: PointerType<_ast5972> {}; // PointerType v8::StringObject *
struct _ast5978: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast5981>, Pack<_ast5979, _ast5980>>> {}; // CXXMethodDecl New
struct _ast5981: FunctionProtoType<_ast5983, Pack<_ast136, _ast5982>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _ast5984: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str857>, _ast5985>, Pack<>>>, _ast5987> {}; // CXXMethodDecl ValueOf
struct _ast5985: FunctionProtoType<_ast5986, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Symbol> () const
struct _ast5987: PointerType<_ast5988> {}; // PointerType const v8::SymbolObject *
struct _ast5988: ConstQualifiedType<_ast5989> {}; // RecordType const v8::SymbolObject
struct _ast5989: StructOrClassRecordType<RecordType<_ast51>> {}; // RecordType v8::SymbolObject
struct _ast5990: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast5992>, Pack<_ast5991>>> {}; // CXXMethodDecl Cast
struct _ast5992: FunctionProtoType<_ast5993, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::SymbolObject *(v8::Value *)
struct _ast5993: PointerType<_ast5989> {}; // PointerType v8::SymbolObject *
struct _ast6004: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6008>, Pack<_ast6005, _ast6006, _ast6007>>> {}; // CXXMethodDecl New
struct _ast6008: FunctionProtoType<_ast6012, Pack<_ast6009, _ast6010, _ast6011>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _ast6011: EnumType<_ast5996, _ast1849> {}; // EnumType v8::RegExp::Flags
struct _ast6013: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str867>, _ast6014>, Pack<>>>, _ast6016> {}; // CXXMethodDecl GetSource
struct _ast6014: FunctionProtoType<_ast6015, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::String> () const
struct _ast6016: PointerType<_ast6017> {}; // PointerType const v8::RegExp *
struct _ast6017: ConstQualifiedType<_ast6018> {}; // RecordType const v8::RegExp
struct _ast6018: StructOrClassRecordType<RecordType<_ast5994>> {}; // RecordType v8::RegExp
struct _ast6019: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str868>, _ast6020>, Pack<>>>, _ast6016> {}; // CXXMethodDecl GetFlags
struct _ast6020: FunctionProtoType<_ast6011, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::RegExp::Flags () const
struct _ast6021: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast6023>, Pack<_ast6022>>> {}; // CXXMethodDecl Cast
struct _ast6023: FunctionProtoType<_ast6024, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::RegExp *(v8::Value *)
struct _ast6024: PointerType<_ast6018> {}; // PointerType v8::RegExp *
struct _ast6026: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6029>, Pack<_ast6027, _ast6028>>> {}; // CXXMethodDecl New
struct _ast6029: FunctionProtoType<_ast6030, Pack<_ast136, _ast2169>, UnqualifiedType> {}; // FunctionProtoType Local<v8::External> (v8::Isolate *, void *)
struct _ast6031: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast6033>, Pack<_ast6032>>> {}; // CXXMethodDecl Cast
struct _ast6033: FunctionProtoType<_ast6034, Pack<_ast3808>, UnqualifiedType> {}; // FunctionProtoType v8::External *(v8::Value *)
struct _ast6034: PointerType<_ast6035> {}; // PointerType v8::External *
struct _ast6035: StructOrClassRecordType<RecordType<_ast13>> {}; // RecordType v8::External
struct _ast6036: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str49>, _ast5518>, Pack<>>>, _ast6037> {}; // CXXMethodDecl Value
struct _ast6037: PointerType<_ast6038> {}; // PointerType const v8::External *
struct _ast6038: ConstQualifiedType<_ast6035> {}; // RecordType const v8::External
struct _ast6048: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast6052>, Pack<_ast6049, _ast6050, _ast6051>>>, _ast6055> {}; // CXXMethodDecl Set
struct _ast6052: FunctionProtoType<_ast64, Pack<_ast6053, _ast6054, _ast4391>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6055: PointerType<_ast6056> {}; // PointerType v8::Template *
struct _ast6056: StructOrClassRecordType<RecordType<_ast6046>> {}; // RecordType v8::Template
struct _ast6057: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str638>, _ast6061>, Pack<_ast6058, _ast6059, _ast6060>>>, _ast6055> {}; // CXXMethodDecl SetPrivate
struct _ast6061: FunctionProtoType<_ast64, Pack<_ast6062, _ast6063, _ast4391>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
struct _ast6064: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str122>, _ast6068>, Pack<_ast6065, _ast6066, _ast6067>>>, _ast6055> {}; // CXXMethodDecl Set
struct _ast6068: FunctionProtoType<_ast64, Pack<_ast136, _ast1862, _ast6069>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const char *, Local<v8::Data>)
struct _ast6070: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str634>, _ast6076>, Pack<_ast6071, _ast6072, _ast6073, _ast6074, _ast6075>>>, _ast6055> {}; // CXXMethodDecl SetAccessorProperty
struct _ast6076: FunctionProtoType<_ast64, Pack<_ast6077, _ast6078, _ast6079, _ast4391, _ast4481>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _ast6080: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str635>, _ast6090>, Pack<_ast6081, _ast6082, _ast6083, _ast6084, _ast6085, _ast6086, _ast6087, _ast6088, _ast6089>>>, _ast6055> {}; // CXXMethodDecl SetNativeDataProperty
struct _ast6090: FunctionProtoType<_ast64, Pack<_ast6091, _ast6092, _ast6093, _ast6094, _ast4391, _ast6095, _ast4481, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6092: TypedefType<_ast4272> {}; // TypedefType v8::AccessorGetterCallback
struct _ast6093: TypedefType<_ast4288> {}; // TypedefType v8::AccessorSetterCallback
struct _ast6096: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str635>, _ast6106>, Pack<_ast6097, _ast6098, _ast6099, _ast6100, _ast6101, _ast6102, _ast6103, _ast6104, _ast6105>>>, _ast6055> {}; // CXXMethodDecl SetNativeDataProperty
struct _ast6106: FunctionProtoType<_ast64, Pack<_ast6107, _ast4478, _ast4479, _ast6108, _ast4391, _ast6109, _ast4481, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ast6110: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str636>, _ast6117>, Pack<_ast6111, _ast6112, _ast6113, _ast6114, _ast6115, _ast6116>>>, _ast6055> {}; // CXXMethodDecl SetLazyDataProperty
struct _ast6117: FunctionProtoType<_ast64, Pack<_ast6118, _ast4478, _ast6119, _ast4391, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ast6120: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str878>, _ast6124>, Pack<_ast6121, _ast6122, _ast6123>>>, _ast6055> {}; // CXXMethodDecl SetIntrinsicDataProperty
struct _ast6124: FunctionProtoType<_ast64, Pack<_ast6125, _ast6126, _ast4391>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
struct _ast6126: EnumType<_ast6039, _ast1849> {}; // EnumType v8::Intrinsic
struct _ast6127: TypedefNameDecl<TypeDecl<NamedDeclName<_str880>, _ast6128>> {}; // TypedefDecl GenericNamedPropertyGetterCallback
struct _ast6128: PointerType<_ast6129> {}; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6129: UnqualifiedType<_ast6130> {}; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6130: FunctionProtoType<_ast64, Pack<_ast6131, _ast6132>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6132: LValueReferenceType<ReferenceType<_ast6133>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6133: ConstQualifiedType<_ast6134> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6135: TypedefNameDecl<TypeDecl<NamedDeclName<_str881>, _ast6136>> {}; // TypedefDecl GenericNamedPropertySetterCallback
struct _ast6136: PointerType<_ast6137> {}; // PointerType void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6137: UnqualifiedType<_ast6138> {}; // ParenType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6138: FunctionProtoType<_ast64, Pack<_ast6139, _ast6140, _ast6141>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6141: LValueReferenceType<ReferenceType<_ast6142>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6142: ConstQualifiedType<_ast6143> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6144: TypedefNameDecl<TypeDecl<NamedDeclName<_str882>, _ast6145>> {}; // TypedefDecl GenericNamedPropertyQueryCallback
struct _ast6145: PointerType<_ast6146> {}; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6146: UnqualifiedType<_ast6147> {}; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6147: FunctionProtoType<_ast64, Pack<_ast6148, _ast6149>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6149: LValueReferenceType<ReferenceType<_ast6150>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Integer> &
struct _ast6150: ConstQualifiedType<_ast6151> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Integer>
struct _ast6152: TypedefNameDecl<TypeDecl<NamedDeclName<_str883>, _ast6153>> {}; // TypedefDecl GenericNamedPropertyDeleterCallback
struct _ast6153: PointerType<_ast6154> {}; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6154: UnqualifiedType<_ast6155> {}; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6155: FunctionProtoType<_ast64, Pack<_ast6156, _ast6157>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6157: LValueReferenceType<ReferenceType<_ast6158>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Boolean> &
struct _ast6158: ConstQualifiedType<_ast6159> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Boolean>
struct _ast6160: TypedefNameDecl<TypeDecl<NamedDeclName<_str884>, _ast6161>> {}; // TypedefDecl GenericNamedPropertyEnumeratorCallback
struct _ast6161: PointerType<_ast6162> {}; // PointerType void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _ast6162: UnqualifiedType<_ast6163> {}; // ParenType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6163: FunctionProtoType<_ast64, Pack<_ast6164>, UnqualifiedType> {}; // FunctionProtoType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6164: LValueReferenceType<ReferenceType<_ast6165>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Array> &
struct _ast6165: ConstQualifiedType<_ast6166> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Array>
struct _ast6167: TypedefNameDecl<TypeDecl<NamedDeclName<_str885>, _ast6168>> {}; // TypedefDecl GenericNamedPropertyDefinerCallback
struct _ast6168: PointerType<_ast6169> {}; // PointerType void (*)(Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6169: UnqualifiedType<_ast6170> {}; // ParenType void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6170: FunctionProtoType<_ast64, Pack<_ast6171, _ast5238, _ast6172>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6172: LValueReferenceType<ReferenceType<_ast6173>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6173: ConstQualifiedType<_ast6174> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6175: TypedefNameDecl<TypeDecl<NamedDeclName<_str886>, _ast6176>> {}; // TypedefDecl GenericNamedPropertyDescriptorCallback
struct _ast6176: PointerType<_ast6177> {}; // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6177: UnqualifiedType<_ast6178> {}; // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6178: FunctionProtoType<_ast64, Pack<_ast6179, _ast6180>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6180: LValueReferenceType<ReferenceType<_ast6181>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6181: ConstQualifiedType<_ast6182> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6183: TypedefNameDecl<TypeDecl<NamedDeclName<_str887>, _ast6184>> {}; // TypedefDecl IndexedPropertyGetterCallback
struct _ast6184: PointerType<_ast6185> {}; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6185: UnqualifiedType<_ast6186> {}; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6186: FunctionProtoType<_ast64, Pack<_ast3272, _ast6187>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6187: LValueReferenceType<ReferenceType<_ast6188>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6188: ConstQualifiedType<_ast6189> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6190: TypedefNameDecl<TypeDecl<NamedDeclName<_str888>, _ast6191>> {}; // TypedefDecl IndexedPropertySetterCallback
struct _ast6191: PointerType<_ast6192> {}; // PointerType void (*)(uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6192: UnqualifiedType<_ast6193> {}; // ParenType void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6193: FunctionProtoType<_ast64, Pack<_ast3272, _ast6194, _ast6195>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ast6195: LValueReferenceType<ReferenceType<_ast6196>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6196: ConstQualifiedType<_ast6197> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6198: TypedefNameDecl<TypeDecl<NamedDeclName<_str889>, _ast6199>> {}; // TypedefDecl IndexedPropertyQueryCallback
struct _ast6199: PointerType<_ast6200> {}; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6200: UnqualifiedType<_ast6201> {}; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6201: FunctionProtoType<_ast64, Pack<_ast3272, _ast6202>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ast6202: LValueReferenceType<ReferenceType<_ast6203>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Integer> &
struct _ast6203: ConstQualifiedType<_ast6204> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Integer>
struct _ast6205: TypedefNameDecl<TypeDecl<NamedDeclName<_str890>, _ast6206>> {}; // TypedefDecl IndexedPropertyDeleterCallback
struct _ast6206: PointerType<_ast6207> {}; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6207: UnqualifiedType<_ast6208> {}; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6208: FunctionProtoType<_ast64, Pack<_ast3272, _ast6209>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ast6209: LValueReferenceType<ReferenceType<_ast6210>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Boolean> &
struct _ast6210: ConstQualifiedType<_ast6211> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Boolean>
struct _ast6212: TypedefNameDecl<TypeDecl<NamedDeclName<_str891>, _ast6213>> {}; // TypedefDecl IndexedPropertyEnumeratorCallback
struct _ast6213: PointerType<_ast6214> {}; // PointerType void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _ast6214: UnqualifiedType<_ast6215> {}; // ParenType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6215: FunctionProtoType<_ast64, Pack<_ast6216>, UnqualifiedType> {}; // FunctionProtoType void (const PropertyCallbackInfo<v8::Array> &)
struct _ast6216: LValueReferenceType<ReferenceType<_ast6217>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Array> &
struct _ast6217: ConstQualifiedType<_ast6218> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Array>
struct _ast6219: TypedefNameDecl<TypeDecl<NamedDeclName<_str892>, _ast6220>> {}; // TypedefDecl IndexedPropertyDefinerCallback
struct _ast6220: PointerType<_ast6221> {}; // PointerType void (*)(uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6221: UnqualifiedType<_ast6222> {}; // ParenType void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6222: FunctionProtoType<_ast64, Pack<_ast3272, _ast5238, _ast6223>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ast6223: LValueReferenceType<ReferenceType<_ast6224>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6224: ConstQualifiedType<_ast6225> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6226: TypedefNameDecl<TypeDecl<NamedDeclName<_str893>, _ast6227>> {}; // TypedefDecl IndexedPropertyDescriptorCallback
struct _ast6227: PointerType<_ast6228> {}; // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6228: UnqualifiedType<_ast6229> {}; // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6229: FunctionProtoType<_ast64, Pack<_ast3272, _ast6230>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ast6230: LValueReferenceType<ReferenceType<_ast6231>> {}; // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
struct _ast6231: ConstQualifiedType<_ast6232> {}; // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
struct _ast6239: TypedefNameDecl<TypeDecl<NamedDeclName<_str900>, _ast6240>> {}; // TypedefDecl AccessCheckCallback
struct _ast6240: PointerType<_ast6241> {}; // PointerType bool (*)(Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ast6241: UnqualifiedType<_ast6242> {}; // ParenType bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ast6242: FunctionProtoType<_ast79, Pack<_ast6243, _ast6244, _ast6245>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ast6247: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6255>, Pack<_ast6248, _ast6249, _ast6250, _ast6251, _ast6252, _ast6253, _ast6254>>> {}; // CXXMethodDecl New
struct _ast6255: FunctionProtoType<_ast6258, Pack<_ast136, _ast5048, _ast6256, _ast6257, _ast1849, _ast5050, _ast4482>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ast6259: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str901>, _ast6262>, Pack<_ast6260, _ast6261>>> {}; // CXXMethodDecl FromSnapshot
struct _ast6262: FunctionProtoType<_ast6263, Pack<_ast136, _ast3170>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _ast6264: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str902>, _ast6272>, Pack<_ast6265, _ast6266, _ast6267, _ast6268, _ast6269, _ast6270, _ast6271>>> {}; // CXXMethodDecl NewWithCache
struct _ast6272: FunctionProtoType<_ast6276, Pack<_ast136, _ast5048, _ast6273, _ast6274, _ast6275, _ast1849, _ast4482>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
struct _ast6277: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str904>, _ast6279>, Pack<_ast6278>>>, _ast6282> {}; // CXXMethodDecl GetFunction
struct _ast6279: FunctionProtoType<_ast6281, Pack<_ast6280>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>)
struct _ast6282: PointerType<_ast6283> {}; // PointerType v8::FunctionTemplate *
struct _ast6283: StructOrClassRecordType<RecordType<_ast15>> {}; // RecordType v8::FunctionTemplate
struct _ast6284: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str905>, _ast6285>, Pack<>>>, _ast6282> {}; // CXXMethodDecl NewRemoteInstance
struct _ast6285: FunctionProtoType<_ast6286, Pack<>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> ()
struct _ast6287: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str906>, _ast6291>, Pack<_ast6288, _ast6289, _ast6290>>>, _ast6282> {}; // CXXMethodDecl SetCallHandler
struct _ast6291: FunctionProtoType<_ast64, Pack<_ast5048, _ast6292, _ast4482>, UnqualifiedType> {}; // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
struct _ast6293: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str907>, _ast2905>, Pack<_ast6294>>>, _ast6282> {}; // CXXMethodDecl SetLength
struct _ast6295: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str908>, _ast6296>, Pack<>>>, _ast6282> {}; // CXXMethodDecl InstanceTemplate
struct _ast6296: FunctionProtoType<_ast6297, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6298: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str909>, _ast6300>, Pack<_ast6299>>>, _ast6282> {}; // CXXMethodDecl Inherit
struct _ast6300: FunctionProtoType<_ast64, Pack<_ast6301>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6302: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str911>, _ast6303>, Pack<>>>, _ast6282> {}; // CXXMethodDecl PrototypeTemplate
struct _ast6303: FunctionProtoType<_ast6304, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ObjectTemplate> ()
struct _ast6305: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str912>, _ast6307>, Pack<_ast6306>>>, _ast6282> {}; // CXXMethodDecl SetPrototypeProviderTemplate
struct _ast6307: FunctionProtoType<_ast64, Pack<_ast6308>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::FunctionTemplate>)
struct _ast6309: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str914>, _ast6311>, Pack<_ast6310>>>, _ast6282> {}; // CXXMethodDecl SetClassName
struct _ast6311: FunctionProtoType<_ast64, Pack<_ast6312>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast6313: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str915>, _ast3536>, Pack<_ast6314>>>, _ast6282> {}; // CXXMethodDecl SetAcceptAnyReceiver
struct _ast6315: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str916>, _ast63>, Pack<>>>, _ast6282> {}; // CXXMethodDecl ReadOnlyPrototype
struct _ast6316: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str917>, _ast63>, Pack<>>>, _ast6282> {}; // CXXMethodDecl RemovePrototype
struct _ast6317: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str918>, _ast6319>, Pack<_ast6318>>>, _ast6282> {}; // CXXMethodDecl HasInstance
struct _ast6319: FunctionProtoType<_ast79, Pack<_ast6320>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::Value>)
struct _ast6321: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast6323>, Pack<_ast6322>>> {}; // CXXMethodDecl Cast
struct _ast6323: FunctionProtoType<_ast6282, Pack<_ast4167>, UnqualifiedType> {}; // FunctionProtoType v8::FunctionTemplate *(v8::Data *)
struct _ast6332: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str923>, _ast6342>, Pack<_ast6333, _ast6334, _ast6335, _ast6336, _ast6337, _ast6338, _ast6339, _ast6340, _ast6341>>>, _ast6352>> {}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6342: FunctionProtoType<_ast64, Pack<_ast6343, _ast6344, _ast6345, _ast6346, _ast6347, _ast6348, _ast6349, _ast6350, _ast6351>, UnqualifiedType> {}; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6343: TypedefType<_ast6127> {}; // TypedefType v8::GenericNamedPropertyGetterCallback
struct _ast6344: TypedefType<_ast6135> {}; // TypedefType v8::GenericNamedPropertySetterCallback
struct _ast6345: TypedefType<_ast6144> {}; // TypedefType v8::GenericNamedPropertyQueryCallback
struct _ast6346: TypedefType<_ast6152> {}; // TypedefType v8::GenericNamedPropertyDeleterCallback
struct _ast6347: TypedefType<_ast6160> {}; // TypedefType v8::GenericNamedPropertyEnumeratorCallback
struct _ast6348: TypedefType<_ast6167> {}; // TypedefType v8::GenericNamedPropertyDefinerCallback
struct _ast6349: TypedefType<_ast6175> {}; // TypedefType v8::GenericNamedPropertyDescriptorCallback
struct _ast6351: EnumType<_ast6324, _ast1849> {}; // EnumType v8::PropertyHandlerFlags
struct _ast6352: PointerType<_ast6353> {}; // PointerType v8::NamedPropertyHandlerConfiguration *
struct _ast6353: StructOrClassRecordType<RecordType<_ast6330>> {}; // RecordType v8::NamedPropertyHandlerConfiguration
struct _ast6354: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str923>, _ast6362>, Pack<_ast6355, _ast6356, _ast6357, _ast6358, _ast6359, _ast6360, _ast6361>>>, _ast6352>> {}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6362: FunctionProtoType<_ast64, Pack<_ast6343, _ast6344, _ast6345, _ast6346, _ast6347, _ast6363, _ast6351>, UnqualifiedType> {}; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6364: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str923>, _ast6373>, Pack<_ast6365, _ast6366, _ast6367, _ast6368, _ast6369, _ast6370, _ast6371, _ast6372>>>, _ast6352>> {}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6373: FunctionProtoType<_ast64, Pack<_ast6343, _ast6344, _ast6349, _ast6346, _ast6347, _ast6348, _ast6374, _ast6351>, UnqualifiedType> {}; // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6384: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str923>, _ast6386>, Pack<_ast6385>>>, _ast6352>> {}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6386: FunctionProtoType<_ast64, Pack<_ast6387>, UnqualifiedType> {}; // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6387: LValueReferenceType<ReferenceType<_ast6388>> {}; // LValueReferenceType const v8::NamedPropertyHandlerConfiguration &
struct _ast6388: ConstQualifiedType<_ast6353> {}; // RecordType const v8::NamedPropertyHandlerConfiguration
struct _ast6389: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str923>, _ast6391>, Pack<_ast6390>>>, _ast6352>> {}; // CXXConstructorDecl NamedPropertyHandlerConfiguration
struct _ast6391: FunctionProtoType<_ast64, Pack<_ast6392>, UnqualifiedType> {}; // FunctionProtoType void (v8::NamedPropertyHandlerConfiguration &&)
struct _ast6392: RValueReferenceType<ReferenceType<_ast6353>> {}; // RValueReferenceType v8::NamedPropertyHandlerConfiguration &&
struct _ast6395: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str928>, _ast6405>, Pack<_ast6396, _ast6397, _ast6398, _ast6399, _ast6400, _ast6401, _ast6402, _ast6403, _ast6404>>>, _ast6414>> {}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6405: FunctionProtoType<_ast64, Pack<_ast6406, _ast6407, _ast6408, _ast6409, _ast6410, _ast6411, _ast6412, _ast6413, _ast6351>, UnqualifiedType> {}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6406: TypedefType<_ast6183> {}; // TypedefType v8::IndexedPropertyGetterCallback
struct _ast6407: TypedefType<_ast6190> {}; // TypedefType v8::IndexedPropertySetterCallback
struct _ast6408: TypedefType<_ast6198> {}; // TypedefType v8::IndexedPropertyQueryCallback
struct _ast6409: TypedefType<_ast6205> {}; // TypedefType v8::IndexedPropertyDeleterCallback
struct _ast6410: TypedefType<_ast6212> {}; // TypedefType v8::IndexedPropertyEnumeratorCallback
struct _ast6411: TypedefType<_ast6219> {}; // TypedefType v8::IndexedPropertyDefinerCallback
struct _ast6412: TypedefType<_ast6226> {}; // TypedefType v8::IndexedPropertyDescriptorCallback
struct _ast6414: PointerType<_ast6415> {}; // PointerType v8::IndexedPropertyHandlerConfiguration *
struct _ast6415: StructOrClassRecordType<RecordType<_ast6393>> {}; // RecordType v8::IndexedPropertyHandlerConfiguration
struct _ast6416: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str928>, _ast6424>, Pack<_ast6417, _ast6418, _ast6419, _ast6420, _ast6421, _ast6422, _ast6423>>>, _ast6414>> {}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6424: FunctionProtoType<_ast64, Pack<_ast6406, _ast6407, _ast6408, _ast6409, _ast6410, _ast6425, _ast6351>, UnqualifiedType> {}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6426: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str928>, _ast6435>, Pack<_ast6427, _ast6428, _ast6429, _ast6430, _ast6431, _ast6432, _ast6433, _ast6434>>>, _ast6414>> {}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6435: FunctionProtoType<_ast64, Pack<_ast6406, _ast6407, _ast6412, _ast6409, _ast6410, _ast6411, _ast6436, _ast6351>, UnqualifiedType> {}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ast6446: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str928>, _ast6448>, Pack<_ast6447>>>, _ast6414>> {}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6448: FunctionProtoType<_ast64, Pack<_ast6449>, UnqualifiedType> {}; // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6449: LValueReferenceType<ReferenceType<_ast6450>> {}; // LValueReferenceType const v8::IndexedPropertyHandlerConfiguration &
struct _ast6450: ConstQualifiedType<_ast6415> {}; // RecordType const v8::IndexedPropertyHandlerConfiguration
struct _ast6451: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str928>, _ast6453>, Pack<_ast6452>>>, _ast6414>> {}; // CXXConstructorDecl IndexedPropertyHandlerConfiguration
struct _ast6453: FunctionProtoType<_ast64, Pack<_ast6454>, UnqualifiedType> {}; // FunctionProtoType void (v8::IndexedPropertyHandlerConfiguration &&)
struct _ast6454: RValueReferenceType<ReferenceType<_ast6415>> {}; // RValueReferenceType v8::IndexedPropertyHandlerConfiguration &&
struct _ast6455: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str929>, _ast165>, Pack<>>>, _ast6414>> {}; // CXXDestructorDecl ~IndexedPropertyHandlerConfiguration
struct _ast6457: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6460>, Pack<_ast6458, _ast6459>>> {}; // CXXMethodDecl New
struct _ast6460: FunctionProtoType<_ast6462, Pack<_ast136, _ast6461>, UnqualifiedType> {}; // FunctionProtoType Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6463: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str901>, _ast6466>, Pack<_ast6464, _ast6465>>> {}; // CXXMethodDecl FromSnapshot
struct _ast6466: FunctionProtoType<_ast6467, Pack<_ast136, _ast3170>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _ast6468: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str725>, _ast6470>, Pack<_ast6469>>>, _ast6473> {}; // CXXMethodDecl NewInstance
struct _ast6470: FunctionProtoType<_ast6472, Pack<_ast6471>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>)
struct _ast6473: PointerType<_ast6474> {}; // PointerType v8::ObjectTemplate *
struct _ast6474: StructOrClassRecordType<RecordType<_ast35>> {}; // RecordType v8::ObjectTemplate
struct _ast6475: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str627>, _ast6485>, Pack<_ast6476, _ast6477, _ast6478, _ast6479, _ast6480, _ast6481, _ast6482, _ast6483, _ast6484>>>, _ast6473> {}; // CXXMethodDecl SetAccessor
struct _ast6485: FunctionProtoType<_ast64, Pack<_ast6486, _ast6092, _ast6093, _ast6487, _ast4481, _ast4391, _ast6488, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6489: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str627>, _ast6499>, Pack<_ast6490, _ast6491, _ast6492, _ast6493, _ast6494, _ast6495, _ast6496, _ast6497, _ast6498>>>, _ast6473> {}; // CXXMethodDecl SetAccessor
struct _ast6499: FunctionProtoType<_ast64, Pack<_ast6500, _ast4478, _ast4479, _ast6501, _ast4481, _ast4391, _ast6502, _ast4482, _ast4482>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ast6503: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str931>, _ast6505>, Pack<_ast6504>>>, _ast6473> {}; // CXXMethodDecl SetHandler
struct _ast6505: FunctionProtoType<_ast64, Pack<_ast6387>, UnqualifiedType> {}; // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
struct _ast6506: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str933>, _ast6513>, Pack<_ast6507, _ast6508, _ast6509, _ast6510, _ast6511, _ast6512>>>, _ast6473> {}; // CXXMethodDecl SetIndexedPropertyHandler
struct _ast6513: FunctionProtoType<_ast64, Pack<_ast6406, _ast6407, _ast6408, _ast6409, _ast6410, _ast6514>, UnqualifiedType> {}; // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _ast6515: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str931>, _ast6517>, Pack<_ast6516>>>, _ast6473> {}; // CXXMethodDecl SetHandler
struct _ast6517: FunctionProtoType<_ast64, Pack<_ast6449>, UnqualifiedType> {}; // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ast6518: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str934>, _ast6521>, Pack<_ast6519, _ast6520>>>, _ast6473> {}; // CXXMethodDecl SetCallAsFunctionHandler
struct _ast6521: FunctionProtoType<_ast64, Pack<_ast5048, _ast6522>, UnqualifiedType> {}; // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>)
struct _ast6523: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str935>, _ast63>, Pack<>>>, _ast6473> {}; // CXXMethodDecl MarkAsUndetectable
struct _ast6524: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str936>, _ast6527>, Pack<_ast6525, _ast6526>>>, _ast6473> {}; // CXXMethodDecl SetAccessCheckCallback
struct _ast6527: FunctionProtoType<_ast64, Pack<_ast6528, _ast6529>, UnqualifiedType> {}; // FunctionProtoType void (v8::AccessCheckCallback, Local<v8::Value>)
struct _ast6528: TypedefType<_ast6239> {}; // TypedefType v8::AccessCheckCallback
struct _ast6530: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str937>, _ast6535>, Pack<_ast6531, _ast6532, _ast6533, _ast6534>>>, _ast6473> {}; // CXXMethodDecl SetAccessCheckCallbackAndHandler
struct _ast6535: FunctionProtoType<_ast64, Pack<_ast6528, _ast6387, _ast6449, _ast6536>, UnqualifiedType> {}; // FunctionProtoType void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ast6537: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str656>, _ast2997>, Pack<>>>, _ast6473> {}; // CXXMethodDecl InternalFieldCount
struct _ast6538: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str940>, _ast2905>, Pack<_ast6539>>>, _ast6473> {}; // CXXMethodDecl SetInternalFieldCount
struct _ast6540: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str941>, _ast3172>, Pack<>>>, _ast6473> {}; // CXXMethodDecl IsImmutableProto
struct _ast6541: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str942>, _ast63>, Pack<>>>, _ast6473> {}; // CXXMethodDecl SetImmutableProto
struct _ast6542: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast6544>, Pack<_ast6543>>> {}; // CXXMethodDecl Cast
struct _ast6544: FunctionProtoType<_ast6473, Pack<_ast4167>, UnqualifiedType> {}; // FunctionProtoType v8::ObjectTemplate *(v8::Data *)
struct _ast6546: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6549>, Pack<_ast6547, _ast6548>>> {}; // CXXMethodDecl New
struct _ast6549: FunctionProtoType<_ast6551, Pack<_ast136, _ast6550>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6552: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast6554>, Pack<_ast6553>>> {}; // CXXMethodDecl Cast
struct _ast6554: FunctionProtoType<_ast6555, Pack<_ast4167>, UnqualifiedType> {}; // FunctionProtoType v8::Signature *(v8::Data *)
struct _ast6555: PointerType<_ast6556> {}; // PointerType v8::Signature *
struct _ast6556: StructOrClassRecordType<RecordType<_ast44>> {}; // RecordType v8::Signature
struct _ast6558: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6561>, Pack<_ast6559, _ast6560>>> {}; // CXXMethodDecl New
struct _ast6561: FunctionProtoType<_ast6563, Pack<_ast136, _ast6562>, UnqualifiedType> {}; // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ast6564: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str60>, _ast6566>, Pack<_ast6565>>> {}; // CXXMethodDecl Cast
struct _ast6566: FunctionProtoType<_ast6567, Pack<_ast4167>, UnqualifiedType> {}; // FunctionProtoType v8::AccessorSignature *(v8::Data *)
struct _ast6567: PointerType<_ast6568> {}; // PointerType v8::AccessorSignature *
struct _ast6568: StructOrClassRecordType<RecordType<_ast5>> {}; // RecordType v8::AccessorSignature
struct _ast6571: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str944>, _ast6577>, Pack<_ast6572, _ast6573, _ast6574, _ast6575, _ast6576>>>, _ast6579>> {}; // CXXConstructorDecl Extension
struct _ast6577: FunctionProtoType<_ast64, Pack<_ast1862, _ast1862, _ast1849, _ast6578, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void (const char *, const char *, int, const char **, int)
struct _ast6578: PointerType<_ast1862> {}; // PointerType const char **
struct _ast6579: PointerType<_ast6580> {}; // PointerType v8::Extension *
struct _ast6580: StructOrClassRecordType<RecordType<_ast6569>> {}; // RecordType v8::Extension
struct _ast6581: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str948>, _ast165>, Pack<>>>, _ast6579>>> {}; // CXXDestructorDecl ~Extension
struct _ast6582: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str949>, _ast6585>, Pack<_ast6583, _ast6584>>>, _ast6579>> {}; // CXXMethodDecl GetNativeFunctionTemplate
struct _ast6585: FunctionProtoType<_ast6587, Pack<_ast136, _ast6586>, UnqualifiedType> {}; // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
struct _ast6588: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str556>, _ast3948>, Pack<>>>, _ast6589> {}; // CXXMethodDecl name
struct _ast6589: PointerType<_ast6590> {}; // PointerType const v8::Extension *
struct _ast6590: ConstQualifiedType<_ast6580> {}; // RecordType const v8::Extension
struct _ast6591: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str947>, _ast3931>, Pack<>>>, _ast6589> {}; // CXXMethodDecl source_length
struct _ast6592: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str142>, _ast6593>, Pack<>>>, _ast6589> {}; // CXXMethodDecl source
struct _ast6593: FunctionProtoType<_ast6594, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const String::ExternalOneByteStringResource *() const
struct _ast6594: PointerType<_ast6595> {}; // PointerType const String::ExternalOneByteStringResource *
struct _ast6595: ConstQualifiedType<_ast6596> {}; // ElaboratedType const String::ExternalOneByteStringResource
struct _ast6597: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str950>, _ast2877>, Pack<>>>, _ast6589> {}; // CXXMethodDecl dependency_count
struct _ast6598: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str951>, _ast6599>, Pack<>>>, _ast6589> {}; // CXXMethodDecl dependencies
struct _ast6599: FunctionProtoType<_ast6578, Pack<>, ConstQualifiedType> {}; // FunctionProtoType const char **() const
struct _ast6600: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str952>, _ast3536>, Pack<_ast6601>>>, _ast6579> {}; // CXXMethodDecl set_auto_enable
struct _ast6602: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str953>, _ast3172>, Pack<>>>, _ast6579> {}; // CXXMethodDecl auto_enable
struct _ast6603: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str944>, _ast6605>, Pack<_ast6604>>>, _ast6579>> {}; // CXXConstructorDecl Extension
struct _ast6605: FunctionProtoType<_ast64, Pack<_ast6606>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Extension &)
struct _ast6606: LValueReferenceType<ReferenceType<_ast6590>> {}; // LValueReferenceType const v8::Extension &
struct _ast6607: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast6605>, Pack<_ast6608>>>, _ast6579> {}; // CXXMethodDecl operator=
struct _ast6609: FunctionDecl<TypeDecl<NamedDeclName<_str954>, _ast6611>, Pack<_ast6610>> {}; // FunctionDecl RegisterExtension
struct _ast6611: FunctionProtoType<_ast64, Pack<_ast6612>, UnqualifiedType> {}; // FunctionProtoType void (std::unique_ptr<Extension>)
struct _ast6613: FunctionDecl<TypeDecl<NamedDeclName<_str955>, _ast6615>, Pack<_ast6614>> {}; // FunctionDecl Undefined
struct _ast6615: FunctionProtoType<_ast6616, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6618: FunctionDecl<TypeDecl<NamedDeclName<_str956>, _ast6620>, Pack<_ast6619>> {}; // FunctionDecl Null
struct _ast6620: FunctionProtoType<_ast6621, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
struct _ast6623: FunctionDecl<TypeDecl<NamedDeclName<_str957>, _ast6625>, Pack<_ast6624>> {}; // FunctionDecl True
struct _ast6625: FunctionProtoType<_ast6626, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6628: FunctionDecl<TypeDecl<NamedDeclName<_str958>, _ast6630>, Pack<_ast6629>> {}; // FunctionDecl False
struct _ast6630: FunctionProtoType<_ast6631, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
struct _ast6635: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str960>, _ast6638>, Pack<_ast6636, _ast6637>>>, _ast6639> {}; // CXXMethodDecl ConfigureDefaultsFromHeapSize
struct _ast6638: FunctionProtoType<_ast64, Pack<_ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (size_t, size_t)
struct _ast6639: PointerType<_ast6640> {}; // PointerType v8::ResourceConstraints *
struct _ast6640: StructOrClassRecordType<RecordType<_ast6633>> {}; // RecordType v8::ResourceConstraints
struct _ast6641: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str963>, _ast6644>, Pack<_ast6642, _ast6643>>>, _ast6639> {}; // CXXMethodDecl ConfigureDefaults
struct _ast6644: FunctionProtoType<_ast64, Pack<_ast3543, _ast3543>, UnqualifiedType> {}; // FunctionProtoType void (uint64_t, uint64_t)
struct _ast6645: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str966>, _ast6646>, Pack<>>>, _ast6647> {}; // CXXMethodDecl stack_limit
struct _ast6646: FunctionProtoType<_ast3635, Pack<>, ConstQualifiedType> {}; // FunctionProtoType uint32_t *() const
struct _ast6647: PointerType<_ast6648> {}; // PointerType const v8::ResourceConstraints *
struct _ast6648: ConstQualifiedType<_ast6640> {}; // RecordType const v8::ResourceConstraints
struct _ast6649: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str967>, _ast6651>, Pack<_ast6650>>>, _ast6639> {}; // CXXMethodDecl set_stack_limit
struct _ast6651: FunctionProtoType<_ast64, Pack<_ast3635>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t *)
struct _ast6652: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str968>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl code_range_size_in_bytes
struct _ast6653: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str969>, _ast6655>, Pack<_ast6654>>>, _ast6639> {}; // CXXMethodDecl set_code_range_size_in_bytes
struct _ast6655: FunctionProtoType<_ast64, Pack<_ast3170>, UnqualifiedType> {}; // FunctionProtoType void (size_t)
struct _ast6656: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str971>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl max_old_generation_size_in_bytes
struct _ast6657: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str972>, _ast6655>, Pack<_ast6658>>>, _ast6639> {}; // CXXMethodDecl set_max_old_generation_size_in_bytes
struct _ast6659: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str973>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl max_young_generation_size_in_bytes
struct _ast6660: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str974>, _ast6655>, Pack<_ast6661>>>, _ast6639> {}; // CXXMethodDecl set_max_young_generation_size_in_bytes
struct _ast6662: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str975>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl initial_old_generation_size_in_bytes
struct _ast6663: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str976>, _ast6655>, Pack<_ast6664>>>, _ast6639> {}; // CXXMethodDecl set_initial_old_generation_size_in_bytes
struct _ast6665: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str978>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl initial_young_generation_size_in_bytes
struct _ast6666: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str979>, _ast6655>, Pack<_ast6667>>>, _ast6639> {}; // CXXMethodDecl set_initial_young_generation_size_in_bytes
struct _ast6668: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str980>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl code_range_size
struct _ast6669: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str981>, _ast6655>, Pack<_ast6670>>>, _ast6639> {}; // CXXMethodDecl set_code_range_size
struct _ast6671: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str983>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl max_semi_space_size_in_kb
struct _ast6672: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str984>, _ast6655>, Pack<_ast6673>>>, _ast6639> {}; // CXXMethodDecl set_max_semi_space_size_in_kb
struct _ast6674: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str986>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl max_old_space_size
struct _ast6675: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str987>, _ast6655>, Pack<_ast6676>>>, _ast6639> {}; // CXXMethodDecl set_max_old_space_size
struct _ast6677: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str988>, _ast3931>, Pack<>>>, _ast6647> {}; // CXXMethodDecl max_zone_pool_size
struct _ast6678: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str989>, _ast6655>, Pack<_ast6679>>>, _ast6639> {}; // CXXMethodDecl set_max_zone_pool_size
struct _ast6680: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str959>, _ast165>, Pack<>>>, _ast6639>> {}; // CXXConstructorDecl ResourceConstraints
struct _ast6681: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str959>, _ast6683>, Pack<_ast6682>>>, _ast6639>> {}; // CXXConstructorDecl ResourceConstraints
struct _ast6683: FunctionProtoType<_ast64, Pack<_ast6684>, UnqualifiedType> {}; // FunctionProtoType void (const v8::ResourceConstraints &)
struct _ast6684: LValueReferenceType<ReferenceType<_ast6648>> {}; // LValueReferenceType const v8::ResourceConstraints &
struct _ast6685: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str959>, _ast6687>, Pack<_ast6686>>>, _ast6639>> {}; // CXXConstructorDecl ResourceConstraints
struct _ast6687: FunctionProtoType<_ast64, Pack<_ast6688>, UnqualifiedType> {}; // FunctionProtoType void (v8::ResourceConstraints &&)
struct _ast6688: RValueReferenceType<ReferenceType<_ast6640>> {}; // RValueReferenceType v8::ResourceConstraints &&
struct _ast6689: TypedefNameDecl<TypeDecl<NamedDeclName<_str990>, _ast6690>> {}; // TypedefDecl FatalErrorCallback
struct _ast6690: PointerType<_ast6691> {}; // PointerType void (*)(const char *, const char *)
struct _ast6691: UnqualifiedType<_ast6692> {}; // ParenType void (const char *, const char *)
struct _ast6692: FunctionProtoType<_ast64, Pack<_ast1862, _ast1862>, UnqualifiedType> {}; // FunctionProtoType void (const char *, const char *)
struct _ast6693: TypedefNameDecl<TypeDecl<NamedDeclName<_str991>, _ast6694>> {}; // TypedefDecl OOMErrorCallback
struct _ast6694: PointerType<_ast6695> {}; // PointerType void (*)(const char *, bool)
struct _ast6695: UnqualifiedType<_ast6696> {}; // ParenType void (const char *, bool)
struct _ast6696: FunctionProtoType<_ast64, Pack<_ast1862, _ast79>, UnqualifiedType> {}; // FunctionProtoType void (const char *, bool)
struct _ast6697: TypedefNameDecl<TypeDecl<NamedDeclName<_str992>, _ast6698>> {}; // TypedefDecl DcheckErrorCallback
struct _ast6698: PointerType<_ast6699> {}; // PointerType void (*)(const char *, int, const char *)
struct _ast6699: UnqualifiedType<_ast6700> {}; // ParenType void (const char *, int, const char *)
struct _ast6700: FunctionProtoType<_ast64, Pack<_ast1862, _ast1849, _ast1862>, UnqualifiedType> {}; // FunctionProtoType void (const char *, int, const char *)
struct _ast6701: TypedefNameDecl<TypeDecl<NamedDeclName<_str993>, _ast6702>> {}; // TypedefDecl MessageCallback
struct _ast6702: PointerType<_ast6703> {}; // PointerType void (*)(Local<v8::Message>, Local<v8::Value>)
struct _ast6703: UnqualifiedType<_ast6704> {}; // ParenType void (Local<v8::Message>, Local<v8::Value>)
struct _ast6704: FunctionProtoType<_ast64, Pack<_ast6705, _ast6706>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Message>, Local<v8::Value>)
struct _ast6707: TypedefNameDecl<TypeDecl<NamedDeclName<_str994>, _ast6708>> {}; // TypedefDecl LogEventCallback
struct _ast6708: PointerType<_ast6709> {}; // PointerType void (*)(const char *, int)
struct _ast6709: UnqualifiedType<_ast6710> {}; // ParenType void (const char *, int)
struct _ast6710: FunctionProtoType<_ast64, Pack<_ast1862, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void (const char *, int)
struct _ast6713: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str996>, _ast6715>, Pack<_ast6714>>> {}; // CXXMethodDecl RangeError
struct _ast6715: FunctionProtoType<_ast6717, Pack<_ast6716>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6718: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str997>, _ast6720>, Pack<_ast6719>>> {}; // CXXMethodDecl ReferenceError
struct _ast6720: FunctionProtoType<_ast6722, Pack<_ast6721>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6723: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str998>, _ast6725>, Pack<_ast6724>>> {}; // CXXMethodDecl SyntaxError
struct _ast6725: FunctionProtoType<_ast6727, Pack<_ast6726>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6728: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str999>, _ast6730>, Pack<_ast6729>>> {}; // CXXMethodDecl TypeError
struct _ast6730: FunctionProtoType<_ast6732, Pack<_ast6731>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6733: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1000>, _ast6735>, Pack<_ast6734>>> {}; // CXXMethodDecl Error
struct _ast6735: FunctionProtoType<_ast6737, Pack<_ast6736>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::String>)
struct _ast6738: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1001>, _ast6741>, Pack<_ast6739, _ast6740>>> {}; // CXXMethodDecl CreateMessage
struct _ast6741: FunctionProtoType<_ast6743, Pack<_ast136, _ast6742>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _ast6744: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str312>, _ast6746>, Pack<_ast6745>>> {}; // CXXMethodDecl GetStackTrace
struct _ast6746: FunctionProtoType<_ast6748, Pack<_ast6747>, UnqualifiedType> {}; // FunctionProtoType Local<v8::StackTrace> (Local<v8::Value>)
struct _ast6749: TypedefNameDecl<TypeDecl<NamedDeclName<_str1002>, _ast6750>> {}; // TypedefDecl CounterLookupCallback
struct _ast6750: PointerType<_ast6751> {}; // PointerType int *(*)(const char *)
struct _ast6751: UnqualifiedType<_ast6752> {}; // ParenType int *(const char *)
struct _ast6752: FunctionProtoType<_ast3892, Pack<_ast1862>, UnqualifiedType> {}; // FunctionProtoType int *(const char *)
struct _ast6753: TypedefNameDecl<TypeDecl<NamedDeclName<_str1003>, _ast6754>> {}; // TypedefDecl CreateHistogramCallback
struct _ast6754: PointerType<_ast6755> {}; // PointerType void *(*)(const char *, int, int, size_t)
struct _ast6755: UnqualifiedType<_ast6756> {}; // ParenType void *(const char *, int, int, size_t)
struct _ast6756: FunctionProtoType<_ast2169, Pack<_ast1862, _ast1849, _ast1849, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void *(const char *, int, int, size_t)
struct _ast6757: TypedefNameDecl<TypeDecl<NamedDeclName<_str1004>, _ast6758>> {}; // TypedefDecl AddHistogramSampleCallback
struct _ast6758: PointerType<_ast6759> {}; // PointerType void (*)(void *, int)
struct _ast6759: UnqualifiedType<_ast6760> {}; // ParenType void (void *, int)
struct _ast6760: FunctionProtoType<_ast64, Pack<_ast2169, _ast1849>, UnqualifiedType> {}; // FunctionProtoType void (void *, int)
struct _ast6761: TypedefNameDecl<TypeDecl<NamedDeclName<_str1005>, _ast6762>> {}; // TypedefDecl BeforeCallEnteredCallback
struct _ast6762: PointerType<_ast6763> {}; // PointerType void (*)(v8::Isolate *)
struct _ast6763: UnqualifiedType<_ast2787> {}; // ParenType void (v8::Isolate *)
struct _ast6764: TypedefNameDecl<TypeDecl<NamedDeclName<_str1006>, _ast6762>> {}; // TypedefDecl CallCompletedCallback
struct _ast6765: TypedefNameDecl<TypeDecl<NamedDeclName<_str1007>, _ast6766>> {}; // TypedefDecl HostImportModuleDynamicallyCallback
struct _ast6766: PointerType<_ast6767> {}; // PointerType MaybeLocal<v8::Promise> (*)(Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ast6767: UnqualifiedType<_ast6768> {}; // ParenType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ast6768: FunctionProtoType<_ast6772, Pack<_ast6769, _ast6770, _ast6771>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ast6773: TypedefNameDecl<TypeDecl<NamedDeclName<_str1008>, _ast6774>> {}; // TypedefDecl HostInitializeImportMetaObjectCallback
struct _ast6774: PointerType<_ast6775> {}; // PointerType void (*)(Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ast6775: UnqualifiedType<_ast6776> {}; // ParenType void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ast6776: FunctionProtoType<_ast64, Pack<_ast6777, _ast6778, _ast6779>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ast6780: TypedefNameDecl<TypeDecl<NamedDeclName<_str1009>, _ast6781>> {}; // TypedefDecl PrepareStackTraceCallback
struct _ast6781: PointerType<_ast6782> {}; // PointerType MaybeLocal<v8::Value> (*)(Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ast6782: UnqualifiedType<_ast6783> {}; // ParenType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ast6783: FunctionProtoType<_ast6787, Pack<_ast6784, _ast6785, _ast6786>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ast6793: TypedefNameDecl<TypeDecl<NamedDeclName<_str1015>, _ast6794>> {}; // TypedefDecl PromiseHook
struct _ast6794: PointerType<_ast6795> {}; // PointerType void (*)(v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ast6795: UnqualifiedType<_ast6796> {}; // ParenType void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ast6796: FunctionProtoType<_ast64, Pack<_ast6797, _ast6798, _ast6799>, UnqualifiedType> {}; // FunctionProtoType void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ast6797: EnumType<_ast6788, _ast1849> {}; // EnumType v8::PromiseHookType
struct _ast6807: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1021>, _ast6811>, Pack<_ast6808, _ast6809, _ast6810>>>, _ast6815>> {}; // CXXConstructorDecl PromiseRejectMessage
struct _ast6811: FunctionProtoType<_ast64, Pack<_ast6812, _ast6813, _ast6814>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
struct _ast6813: EnumType<_ast6800, _ast1849> {}; // EnumType v8::PromiseRejectEvent
struct _ast6815: PointerType<_ast6816> {}; // PointerType v8::PromiseRejectMessage *
struct _ast6816: StructOrClassRecordType<RecordType<_ast6805>> {}; // RecordType v8::PromiseRejectMessage
struct _ast6817: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str743>, _ast6818>, Pack<>>>, _ast6820> {}; // CXXMethodDecl GetPromise
struct _ast6818: FunctionProtoType<_ast6819, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Promise> () const
struct _ast6820: PointerType<_ast6821> {}; // PointerType const v8::PromiseRejectMessage *
struct _ast6821: ConstQualifiedType<_ast6816> {}; // RecordType const v8::PromiseRejectMessage
struct _ast6822: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1024>, _ast6823>, Pack<>>>, _ast6820> {}; // CXXMethodDecl GetEvent
struct _ast6823: FunctionProtoType<_ast6813, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::PromiseRejectEvent () const
struct _ast6824: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1025>, _ast6825>, Pack<>>>, _ast6820> {}; // CXXMethodDecl GetValue
struct _ast6825: FunctionProtoType<_ast6826, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast6827: TypedefNameDecl<TypeDecl<NamedDeclName<_str1026>, _ast6828>> {}; // TypedefDecl PromiseRejectCallback
struct _ast6828: PointerType<_ast6829> {}; // PointerType void (*)(v8::PromiseRejectMessage)
struct _ast6829: UnqualifiedType<_ast6830> {}; // ParenType void (v8::PromiseRejectMessage)
struct _ast6830: FunctionProtoType<_ast64, Pack<_ast6816>, UnqualifiedType> {}; // FunctionProtoType void (v8::PromiseRejectMessage)
struct _ast6831: TypedefNameDecl<TypeDecl<NamedDeclName<_str1027>, _ast6762>> {}; // TypedefDecl MicrotasksCompletedCallback
struct _ast6832: TypedefNameDecl<TypeDecl<NamedDeclName<_str1028>, _ast6833>> {}; // TypedefDecl MicrotasksCompletedCallbackWithData
struct _ast6833: PointerType<_ast6834> {}; // PointerType void (*)(v8::Isolate *, void *)
struct _ast6834: UnqualifiedType<_ast6835> {}; // ParenType void (v8::Isolate *, void *)
struct _ast6835: FunctionProtoType<_ast64, Pack<_ast136, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, void *)
struct _ast6836: TypedefNameDecl<TypeDecl<NamedDeclName<_str1029>, _ast6837>> {}; // TypedefDecl MicrotaskCallback
struct _ast6837: PointerType<_ast6838> {}; // PointerType void (*)(void *)
struct _ast6838: UnqualifiedType<_ast3501> {}; // ParenType void (void *)
struct _ast6844: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast6847>, Pack<_ast6845, _ast6846>>> {}; // CXXMethodDecl New
struct _ast6847: FunctionProtoType<_ast6849, Pack<_ast136, _ast6848>, UnqualifiedType> {}; // FunctionProtoType std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
struct _ast6848: EnumType<_ast6839, _ast1849> {}; // EnumType v8::MicrotasksPolicy
struct _ast6850: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1035>, _ast6851>, Pack<>>>, _ast6852>>> {}; // CXXDestructorDecl ~MicrotaskQueue
struct _ast6851: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast6852: PointerType<_ast6853> {}; // PointerType v8::MicrotaskQueue *
struct _ast6853: StructOrClassRecordType<RecordType<_ast29>> {}; // RecordType v8::MicrotaskQueue
struct _ast6854: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1036>, _ast6857>, Pack<_ast6855, _ast6856>>>, _ast6852>> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast6857: FunctionProtoType<_ast64, Pack<_ast136, _ast6858>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<v8::Function>)
struct _ast6859: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1036>, _ast6863>, Pack<_ast6860, _ast6861, _ast6862>>>, _ast6852>> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast6863: FunctionProtoType<_ast64, Pack<_ast6864, _ast6866, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _ast6864: PointerType<_ast6865> {}; // PointerType v8::Isolate *
struct _ast6866: TypedefType<_ast6836> {}; // TypedefType v8::MicrotaskCallback
struct _ast6867: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1038>, _ast6870>, Pack<_ast6868, _ast6869>>>, _ast6852>> {}; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast6870: FunctionProtoType<_ast64, Pack<_ast6871, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ast6871: TypedefType<_ast6832> {}; // TypedefType v8::MicrotasksCompletedCallbackWithData
struct _ast6872: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1039>, _ast6870>, Pack<_ast6873, _ast6874>>>, _ast6852>> {}; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast6875: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1040>, _ast2787>, Pack<_ast6876>>>, _ast6852>> {}; // CXXMethodDecl PerformCheckpoint
struct _ast6877: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1041>, _ast78>, Pack<>>>, _ast6878>> {}; // CXXMethodDecl IsRunningMicrotasks
struct _ast6878: PointerType<_ast6879> {}; // PointerType const v8::MicrotaskQueue *
struct _ast6879: ConstQualifiedType<_ast6853> {}; // RecordType const v8::MicrotaskQueue
struct _ast6880: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1042>, _ast2877>, Pack<>>>, _ast6878>> {}; // CXXMethodDecl GetMicrotasksScopeDepth
struct _ast6881: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str22>, _ast6883>, Pack<_ast6882>>>, _ast6852>> {}; // CXXConstructorDecl MicrotaskQueue
struct _ast6883: FunctionProtoType<_ast64, Pack<_ast6884>, UnqualifiedType> {}; // FunctionProtoType void (const v8::MicrotaskQueue &)
struct _ast6884: LValueReferenceType<ReferenceType<_ast6879>> {}; // LValueReferenceType const v8::MicrotaskQueue &
struct _ast6885: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast6887>, Pack<_ast6886>>>, _ast6852> {}; // CXXMethodDecl operator=
struct _ast6887: FunctionProtoType<_ast6888, Pack<_ast6884>, UnqualifiedType> {}; // FunctionProtoType v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _ast6888: LValueReferenceType<ReferenceType<_ast6853>> {}; // LValueReferenceType v8::MicrotaskQueue &
struct _ast6894: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1043>, _ast6897>, Pack<_ast6895, _ast6896>>>, _ast6899>> {}; // CXXConstructorDecl MicrotasksScope
struct _ast6897: FunctionProtoType<_ast64, Pack<_ast136, _ast6898>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _ast6898: EnumType<_ast6891, _ast1849> {}; // EnumType v8::MicrotasksScope::Type
struct _ast6899: PointerType<_ast6900> {}; // PointerType v8::MicrotasksScope *
struct _ast6900: StructOrClassRecordType<RecordType<_ast6889>> {}; // RecordType v8::MicrotasksScope
struct _ast6901: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1043>, _ast6905>, Pack<_ast6902, _ast6903, _ast6904>>>, _ast6899>> {}; // CXXConstructorDecl MicrotasksScope
struct _ast6905: FunctionProtoType<_ast64, Pack<_ast136, _ast6852, _ast6898>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
struct _ast6906: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1048>, _ast6907>, Pack<>>>, _ast6899>> {}; // CXXDestructorDecl ~MicrotasksScope
struct _ast6907: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast6908: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1040>, _ast2787>, Pack<_ast6909>>> {}; // CXXMethodDecl PerformCheckpoint
struct _ast6910: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1049>, _ast2794>, Pack<_ast6911>>> {}; // CXXMethodDecl GetCurrentDepth
struct _ast6912: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1041>, _ast6914>, Pack<_ast6913>>> {}; // CXXMethodDecl IsRunningMicrotasks
struct _ast6914: FunctionProtoType<_ast79, Pack<_ast136>, UnqualifiedType> {}; // FunctionProtoType bool (v8::Isolate *)
struct _ast6915: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1043>, _ast6917>, Pack<_ast6916>>>, _ast6899>> {}; // CXXConstructorDecl MicrotasksScope
struct _ast6917: FunctionProtoType<_ast64, Pack<_ast6918>, UnqualifiedType> {}; // FunctionProtoType void (const v8::MicrotasksScope &)
struct _ast6918: LValueReferenceType<ReferenceType<_ast6919>> {}; // LValueReferenceType const v8::MicrotasksScope &
struct _ast6919: ConstQualifiedType<_ast6900> {}; // RecordType const v8::MicrotasksScope
struct _ast6920: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast6922>, Pack<_ast6921>>>, _ast6899> {}; // CXXMethodDecl operator=
struct _ast6922: FunctionProtoType<_ast6923, Pack<_ast6918>, UnqualifiedType> {}; // FunctionProtoType v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _ast6923: LValueReferenceType<ReferenceType<_ast6900>> {}; // LValueReferenceType v8::MicrotasksScope &
struct _ast6924: TypedefNameDecl<TypeDecl<NamedDeclName<_str1050>, _ast6925>> {}; // TypedefDecl FailedAccessCheckCallback
struct _ast6925: PointerType<_ast6926> {}; // PointerType void (*)(Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ast6926: UnqualifiedType<_ast6927> {}; // ParenType void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ast6927: FunctionProtoType<_ast64, Pack<_ast6928, _ast6929, _ast6930>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ast6929: EnumType<_ast6233, _ast1849> {}; // EnumType v8::AccessType
struct _ast6931: TypedefNameDecl<TypeDecl<NamedDeclName<_str1051>, _ast6932>> {}; // TypedefDecl AllowCodeGenerationFromStringsCallback
struct _ast6932: PointerType<_ast6933> {}; // PointerType bool (*)(Local<v8::Context>, Local<v8::String>)
struct _ast6933: UnqualifiedType<_ast6934> {}; // ParenType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6934: FunctionProtoType<_ast79, Pack<_ast6935, _ast6936>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6937: TypedefNameDecl<TypeDecl<NamedDeclName<_str1052>, _ast6938>> {}; // TypedefDecl ExtensionCallback
struct _ast6938: PointerType<_ast6939> {}; // PointerType bool (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast6939: UnqualifiedType<_ast6940> {}; // ParenType bool (const FunctionCallbackInfo<v8::Value> &)
struct _ast6940: FunctionProtoType<_ast79, Pack<_ast6941>, UnqualifiedType> {}; // FunctionProtoType bool (const FunctionCallbackInfo<v8::Value> &)
struct _ast6941: LValueReferenceType<ReferenceType<_ast6942>> {}; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast6942: ConstQualifiedType<_ast6943> {}; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast6944: TypedefNameDecl<TypeDecl<NamedDeclName<_str1053>, _ast6945>> {}; // TypedefDecl AllowWasmCodeGenerationCallback
struct _ast6945: PointerType<_ast6946> {}; // PointerType bool (*)(Local<v8::Context>, Local<v8::String>)
struct _ast6946: UnqualifiedType<_ast6947> {}; // ParenType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6947: FunctionProtoType<_ast79, Pack<_ast6948, _ast6949>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::Context>, Local<v8::String>)
struct _ast6950: TypedefNameDecl<TypeDecl<NamedDeclName<_str1054>, _ast6951>> {}; // TypedefDecl ApiImplementationCallback
struct _ast6951: PointerType<_ast6952> {}; // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast6952: UnqualifiedType<_ast6953> {}; // ParenType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6953: FunctionProtoType<_ast64, Pack<_ast6954>, UnqualifiedType> {}; // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6954: LValueReferenceType<ReferenceType<_ast6955>> {}; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast6955: ConstQualifiedType<_ast6956> {}; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast6957: TypedefNameDecl<TypeDecl<NamedDeclName<_str1055>, _ast6958>> {}; // TypedefDecl WasmStreamingCallback
struct _ast6958: PointerType<_ast6959> {}; // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ast6959: UnqualifiedType<_ast6960> {}; // ParenType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6960: FunctionProtoType<_ast64, Pack<_ast6961>, UnqualifiedType> {}; // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
struct _ast6961: LValueReferenceType<ReferenceType<_ast6962>> {}; // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
struct _ast6962: ConstQualifiedType<_ast6963> {}; // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
struct _ast6964: TypedefNameDecl<TypeDecl<NamedDeclName<_str1056>, _ast6965>> {}; // TypedefDecl WasmThreadsEnabledCallback
struct _ast6965: PointerType<_ast6966> {}; // PointerType bool (*)(Local<v8::Context>)
struct _ast6966: UnqualifiedType<_ast6967> {}; // ParenType bool (Local<v8::Context>)
struct _ast6967: FunctionProtoType<_ast79, Pack<_ast6968>, UnqualifiedType> {}; // FunctionProtoType bool (Local<v8::Context>)
struct _ast6983: TypedefNameDecl<TypeDecl<NamedDeclName<_str1071>, _ast6984>> {}; // TypedefDecl GCCallback
struct _ast6984: PointerType<_ast6985> {}; // PointerType void (*)(v8::GCType, v8::GCCallbackFlags)
struct _ast6985: UnqualifiedType<_ast6986> {}; // ParenType void (v8::GCType, v8::GCCallbackFlags)
struct _ast6986: FunctionProtoType<_ast64, Pack<_ast6987, _ast6988>, UnqualifiedType> {}; // FunctionProtoType void (v8::GCType, v8::GCCallbackFlags)
struct _ast6987: EnumType<_ast6969, _ast1849> {}; // EnumType v8::GCType
struct _ast6988: EnumType<_ast6975, _ast1849> {}; // EnumType v8::GCCallbackFlags
struct _ast6989: TypedefNameDecl<TypeDecl<NamedDeclName<_str1072>, _ast6833>> {}; // TypedefDecl InterruptCallback
struct _ast6990: TypedefNameDecl<TypeDecl<NamedDeclName<_str1073>, _ast6991>> {}; // TypedefDecl NearHeapLimitCallback
struct _ast6991: PointerType<_ast6992> {}; // PointerType size_t (*)(void *, size_t, size_t)
struct _ast6992: UnqualifiedType<_ast6993> {}; // ParenType size_t (void *, size_t, size_t)
struct _ast6993: FunctionProtoType<_ast3170, Pack<_ast2169, _ast3170, _ast3170>, UnqualifiedType> {}; // FunctionProtoType size_t (void *, size_t, size_t)
struct _ast6996: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1074>, _ast63>, Pack<>>>, _ast6997>> {}; // CXXConstructorDecl HeapStatistics
struct _ast6997: PointerType<_ast6998> {}; // PointerType v8::HeapStatistics *
struct _ast6998: StructOrClassRecordType<RecordType<_ast6994>> {}; // RecordType v8::HeapStatistics
struct _ast6999: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1075>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl total_heap_size
struct _ast7000: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1076>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl total_heap_size_executable
struct _ast7001: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1077>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl total_physical_size
struct _ast7002: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1078>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl total_available_size
struct _ast7003: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1079>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl used_heap_size
struct _ast7004: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1080>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl heap_size_limit
struct _ast7005: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1081>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl malloced_memory
struct _ast7006: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1082>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl external_memory
struct _ast7007: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1083>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl peak_malloced_memory
struct _ast7008: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1084>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl number_of_native_contexts
struct _ast7009: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1085>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl number_of_detached_contexts
struct _ast7010: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1086>, _ast5570>, Pack<>>>, _ast6997> {}; // CXXMethodDecl does_zap_garbage
struct _ast7013: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1087>, _ast63>, Pack<>>>, _ast7014>> {}; // CXXConstructorDecl HeapSpaceStatistics
struct _ast7014: PointerType<_ast7015> {}; // PointerType v8::HeapSpaceStatistics *
struct _ast7015: StructOrClassRecordType<RecordType<_ast7011>> {}; // RecordType v8::HeapSpaceStatistics
struct _ast7016: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1088>, _ast7017>, Pack<>>>, _ast7014> {}; // CXXMethodDecl space_name
struct _ast7017: FunctionProtoType<_ast1862, Pack<>, UnqualifiedType> {}; // FunctionProtoType const char *()
struct _ast7018: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1089>, _ast5570>, Pack<>>>, _ast7014> {}; // CXXMethodDecl space_size
struct _ast7019: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1090>, _ast5570>, Pack<>>>, _ast7014> {}; // CXXMethodDecl space_used_size
struct _ast7020: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1091>, _ast5570>, Pack<>>>, _ast7014> {}; // CXXMethodDecl space_available_size
struct _ast7021: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1092>, _ast5570>, Pack<>>>, _ast7014> {}; // CXXMethodDecl physical_space_size
struct _ast7024: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1093>, _ast63>, Pack<>>>, _ast7025>> {}; // CXXConstructorDecl HeapObjectStatistics
struct _ast7025: PointerType<_ast7026> {}; // PointerType v8::HeapObjectStatistics *
struct _ast7026: StructOrClassRecordType<RecordType<_ast7022>> {}; // RecordType v8::HeapObjectStatistics
struct _ast7027: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1094>, _ast7017>, Pack<>>>, _ast7025> {}; // CXXMethodDecl object_type
struct _ast7028: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1095>, _ast7017>, Pack<>>>, _ast7025> {}; // CXXMethodDecl object_sub_type
struct _ast7029: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1096>, _ast5570>, Pack<>>>, _ast7025> {}; // CXXMethodDecl object_count
struct _ast7030: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1097>, _ast5570>, Pack<>>>, _ast7025> {}; // CXXMethodDecl object_size
struct _ast7033: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1098>, _ast63>, Pack<>>>, _ast7034>> {}; // CXXConstructorDecl HeapCodeStatistics
struct _ast7034: PointerType<_ast7035> {}; // PointerType v8::HeapCodeStatistics *
struct _ast7035: StructOrClassRecordType<RecordType<_ast7031>> {}; // RecordType v8::HeapCodeStatistics
struct _ast7036: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1099>, _ast5570>, Pack<>>>, _ast7034> {}; // CXXMethodDecl code_and_metadata_size
struct _ast7037: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1100>, _ast5570>, Pack<>>>, _ast7034> {}; // CXXMethodDecl bytecode_and_metadata_size
struct _ast7038: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1101>, _ast5570>, Pack<>>>, _ast7034> {}; // CXXMethodDecl external_script_source_size
struct _ast7086: TypedefNameDecl<TypeDecl<NamedDeclName<_str1137>, _ast7087>> {}; // TypedefDecl JitCodeEventHandler
struct _ast7087: PointerType<_ast7088> {}; // PointerType void (*)(const v8::JitCodeEvent *)
struct _ast7088: UnqualifiedType<_ast7089> {}; // ParenType void (const v8::JitCodeEvent *)
struct _ast7089: FunctionProtoType<_ast64, Pack<_ast7090>, UnqualifiedType> {}; // FunctionProtoType void (const v8::JitCodeEvent *)
struct _ast7090: PointerType<_ast7091> {}; // PointerType const v8::JitCodeEvent *
struct _ast7091: ConstQualifiedType<_ast7092> {}; // RecordType const v8::JitCodeEvent
struct _ast7092: StructOrClassRecordType<RecordType<_ast7039>> {}; // RecordType v8::JitCodeEvent
struct _ast7093: TypedefNameDecl<TypeDecl<NamedDeclName<_str1138>, _ast7094>> {}; // TypedefDecl UnhandledExceptionCallback
struct _ast7094: PointerType<_ast7095> {}; // PointerType int (*)(_EXCEPTION_POINTERS *)
struct _ast7095: UnqualifiedType<_ast7096> {}; // ParenType int (_EXCEPTION_POINTERS *)
struct _ast7096: FunctionProtoType<_ast1849, Pack<_ast7097>, UnqualifiedType> {}; // FunctionProtoType int (_EXCEPTION_POINTERS *)
struct _ast7097: PointerType<_ast7098> {}; // PointerType _EXCEPTION_POINTERS *
struct _ast7098: StructOrClassRecordType<RecordType<_ast7099>> {}; // RecordType _EXCEPTION_POINTERS
struct _ast7102: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1141>, _ast7103>, Pack<>>>, _ast7104>>> {}; // CXXDestructorDecl ~ExternalResourceVisitor
struct _ast7103: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7104: PointerType<_ast7105> {}; // PointerType v8::ExternalResourceVisitor *
struct _ast7105: StructOrClassRecordType<RecordType<_ast7100>> {}; // RecordType v8::ExternalResourceVisitor
struct _ast7106: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1142>, _ast7108>, Pack<_ast7107>>>, _ast7104>> {}; // CXXMethodDecl VisitExternalString
struct _ast7108: FunctionProtoType<_ast64, Pack<_ast7109>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast7110: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7112>, Pack<_ast7111>>>, _ast7104> {}; // CXXMethodDecl operator=
struct _ast7112: FunctionProtoType<_ast7115, Pack<_ast7113>, UnqualifiedType> {}; // FunctionProtoType v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
struct _ast7113: LValueReferenceType<ReferenceType<_ast7114>> {}; // LValueReferenceType const v8::ExternalResourceVisitor &
struct _ast7114: ConstQualifiedType<_ast7105> {}; // RecordType const v8::ExternalResourceVisitor
struct _ast7115: LValueReferenceType<ReferenceType<_ast7105>> {}; // LValueReferenceType v8::ExternalResourceVisitor &
struct _ast7118: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1145>, _ast7119>, Pack<>>>, _ast7120>>> {}; // CXXDestructorDecl ~PersistentHandleVisitor
struct _ast7119: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7120: PointerType<_ast7121> {}; // PointerType v8::PersistentHandleVisitor *
struct _ast7121: StructOrClassRecordType<RecordType<_ast7116>> {}; // RecordType v8::PersistentHandleVisitor
struct _ast7122: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1146>, _ast7125>, Pack<_ast7123, _ast7124>>>, _ast7120>> {}; // CXXMethodDecl VisitPersistentHandle
struct _ast7125: FunctionProtoType<_ast64, Pack<_ast7126, _ast1869>, UnqualifiedType> {}; // FunctionProtoType void (Persistent<v8::Value> *, uint16_t)
struct _ast7126: PointerType<_ast7127> {}; // PointerType Persistent<v8::Value> *
struct _ast7128: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7130>, Pack<_ast7129>>>, _ast7120> {}; // CXXMethodDecl operator=
struct _ast7130: FunctionProtoType<_ast7133, Pack<_ast7131>, UnqualifiedType> {}; // FunctionProtoType v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
struct _ast7131: LValueReferenceType<ReferenceType<_ast7132>> {}; // LValueReferenceType const v8::PersistentHandleVisitor &
struct _ast7132: ConstQualifiedType<_ast7121> {}; // RecordType const v8::PersistentHandleVisitor
struct _ast7133: LValueReferenceType<ReferenceType<_ast7121>> {}; // LValueReferenceType v8::PersistentHandleVisitor &
struct _ast7149: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1159>, _ast7150>, Pack<>>>, _ast7151>>> {}; // CXXDestructorDecl ~TracedGlobalHandleVisitor
struct _ast7150: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7151: PointerType<_ast7152> {}; // PointerType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ast7152: StructOrClassRecordType<RecordType<_ast7147>> {}; // RecordType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7153: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1160>, _ast7155>, Pack<_ast7154>>>, _ast7151>> {}; // CXXMethodDecl VisitTracedGlobalHandle
struct _ast7155: FunctionProtoType<_ast64, Pack<_ast7156>, UnqualifiedType> {}; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7156: LValueReferenceType<ReferenceType<_ast7157>> {}; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7157: ConstQualifiedType<_ast7158> {}; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7159: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7161>, Pack<_ast7160>>>, _ast7151> {}; // CXXMethodDecl operator=
struct _ast7161: FunctionProtoType<_ast7164, Pack<_ast7162>, UnqualifiedType> {}; // FunctionProtoType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ast7162: LValueReferenceType<ReferenceType<_ast7163>> {}; // LValueReferenceType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7163: ConstQualifiedType<_ast7152> {}; // RecordType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ast7164: LValueReferenceType<ReferenceType<_ast7152>> {}; // LValueReferenceType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ast7169: DestructorDecl<VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1163>, _ast7170>, Pack<>>>, _ast7171>>> {}; // CXXDestructorDecl ~EmbedderHeapTracer
struct _ast7170: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7171: PointerType<_ast7172> {}; // PointerType v8::EmbedderHeapTracer *
struct _ast7172: StructOrClassRecordType<RecordType<_ast7138>> {}; // RecordType v8::EmbedderHeapTracer
struct _ast7173: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1164>, _ast7175>, Pack<_ast7174>>>, _ast7171> {}; // CXXMethodDecl IterateTracedGlobalHandles
struct _ast7175: FunctionProtoType<_ast64, Pack<_ast7151>, UnqualifiedType> {}; // FunctionProtoType void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _ast7176: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1166>, _ast7178>, Pack<_ast7177>>>, _ast7171>> {}; // CXXMethodDecl RegisterV8References
struct _ast7178: FunctionProtoType<_ast64, Pack<_ast7179>, UnqualifiedType> {}; // FunctionProtoType void (const std::vector<std::pair<void *, void *> > &)
struct _ast7179: LValueReferenceType<ReferenceType<_ast7180>> {}; // LValueReferenceType const std::vector<std::pair<void *, void *> > &
struct _ast7180: ConstQualifiedType<_ast7181> {}; // ElaboratedType const std::vector<std::pair<void *, void *> >
struct _ast7182: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1167>, _ast7184>, Pack<_ast7183>>>, _ast7171> {}; // CXXMethodDecl RegisterEmbedderReference
struct _ast7184: FunctionProtoType<_ast64, Pack<_ast7185>, UnqualifiedType> {}; // FunctionProtoType void (const TracedGlobal<v8::Value> &)
struct _ast7185: LValueReferenceType<ReferenceType<_ast7186>> {}; // LValueReferenceType const TracedGlobal<v8::Value> &
struct _ast7186: ConstQualifiedType<_ast7187> {}; // TemplateSpecializationType const TracedGlobal<v8::Value>
struct _ast7188: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1169>, _ast63>, Pack<>>>, _ast7171>> {}; // CXXMethodDecl TracePrologue
struct _ast7189: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1169>, _ast7191>, Pack<_ast7190>>>, _ast7171>> {}; // CXXMethodDecl TracePrologue
struct _ast7191: FunctionProtoType<_ast64, Pack<_ast7192>, UnqualifiedType> {}; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceFlags)
struct _ast7192: EnumType<_ast7140, _ast3543> {}; // EnumType v8::EmbedderHeapTracer::TraceFlags
struct _ast7193: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1170>, _ast7195>, Pack<_ast7194>>>, _ast7171>> {}; // CXXMethodDecl AdvanceTracing
struct _ast7195: FunctionProtoType<_ast79, Pack<_ast3547>, UnqualifiedType> {}; // FunctionProtoType bool (double)
struct _ast7196: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1172>, _ast3172>, Pack<>>>, _ast7171>> {}; // CXXMethodDecl IsTracingDone
struct _ast7197: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1173>, _ast63>, Pack<>>>, _ast7171>> {}; // CXXMethodDecl TraceEpilogue
struct _ast7198: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1173>, _ast7200>, Pack<_ast7199>>>, _ast7171>> {}; // CXXMethodDecl TraceEpilogue
struct _ast7200: FunctionProtoType<_ast64, Pack<_ast7201>, UnqualifiedType> {}; // FunctionProtoType void (v8::EmbedderHeapTracer::TraceSummary *)
struct _ast7201: PointerType<_ast7202> {}; // PointerType v8::EmbedderHeapTracer::TraceSummary *
struct _ast7202: StructOrClassRecordType<RecordType<_ast7165>> {}; // RecordType v8::EmbedderHeapTracer::TraceSummary
struct _ast7203: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1175>, _ast7205>, Pack<_ast7204>>>, _ast7171>> {}; // CXXMethodDecl EnterFinalPause
struct _ast7205: FunctionProtoType<_ast64, Pack<_ast7206>, UnqualifiedType> {}; // FunctionProtoType void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ast7206: EnumType<_ast7143, _ast1849> {}; // EnumType v8::EmbedderHeapTracer::EmbedderStackState
struct _ast7207: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1177>, _ast63>, Pack<>>>, _ast7171> {}; // CXXMethodDecl FinalizeTracing
struct _ast7208: VirtualMethodDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1178>, _ast7210>, Pack<_ast7209>>>, _ast7171>> {}; // CXXMethodDecl IsRootForNonTracingGC
struct _ast7210: FunctionProtoType<_ast79, Pack<_ast7211>, UnqualifiedType> {}; // FunctionProtoType bool (const v8::TracedGlobal<v8::Value> &)
struct _ast7211: LValueReferenceType<ReferenceType<_ast7212>> {}; // LValueReferenceType const v8::TracedGlobal<v8::Value> &
struct _ast7212: ConstQualifiedType<_ast7213> {}; // ElaboratedType const v8::TracedGlobal<v8::Value>
struct _ast7214: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1179>, _ast7205>, Pack<_ast7215>>>, _ast7171> {}; // CXXMethodDecl GarbageCollectionForTesting
struct _ast7216: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1180>, _ast6655>, Pack<_ast7217>>>, _ast7171> {}; // CXXMethodDecl IncreaseAllocatedSize
struct _ast7218: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1181>, _ast6655>, Pack<_ast7219>>>, _ast7171> {}; // CXXMethodDecl DecreaseAllocatedSize
struct _ast7220: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str63>, _ast7221>, Pack<>>>, _ast7222> {}; // CXXMethodDecl isolate
struct _ast7221: FunctionProtoType<_ast6864, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::Isolate *() const
struct _ast7222: PointerType<_ast7223> {}; // PointerType const v8::EmbedderHeapTracer *
struct _ast7223: ConstQualifiedType<_ast7172> {}; // RecordType const v8::EmbedderHeapTracer
struct _ast7225: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7227>, Pack<_ast7226>>>, _ast7171> {}; // CXXMethodDecl operator=
struct _ast7227: FunctionProtoType<_ast7229, Pack<_ast7228>, UnqualifiedType> {}; // FunctionProtoType v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _ast7228: LValueReferenceType<ReferenceType<_ast7223>> {}; // LValueReferenceType const v8::EmbedderHeapTracer &
struct _ast7229: LValueReferenceType<ReferenceType<_ast7172>> {}; // LValueReferenceType v8::EmbedderHeapTracer &
struct _ast7232: TypedefNameDecl<TypeDecl<NamedDeclName<_str1184>, _ast7233>> {}; // TypedefDecl CallbackFunction
struct _ast7233: PointerType<_ast7234> {}; // PointerType v8::StartupData (*)(Local<v8::Object>, int, void *)
struct _ast7234: UnqualifiedType<_ast7235> {}; // ParenType v8::StartupData (Local<v8::Object>, int, void *)
struct _ast7235: FunctionProtoType<_ast7237, Pack<_ast7236, _ast1849, _ast2169>, UnqualifiedType> {}; // FunctionProtoType v8::StartupData (Local<v8::Object>, int, void *)
struct _ast7237: StructOrClassRecordType<RecordType<_ast45>> {}; // RecordType v8::StartupData
struct _ast7238: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1183>, _ast7241>, Pack<_ast7239, _ast7240>>>, _ast7243>> {}; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7241: FunctionProtoType<_ast64, Pack<_ast7242, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7242: TypedefType<_ast7232> {}; // TypedefType v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ast7243: PointerType<_ast7244> {}; // PointerType v8::SerializeInternalFieldsCallback *
struct _ast7244: StructOrClassRecordType<RecordType<_ast7230>> {}; // RecordType v8::SerializeInternalFieldsCallback
struct _ast7247: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1183>, _ast7249>, Pack<_ast7248>>>, _ast7243>> {}; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7249: FunctionProtoType<_ast64, Pack<_ast7250>, UnqualifiedType> {}; // FunctionProtoType void (const v8::SerializeInternalFieldsCallback &)
struct _ast7250: LValueReferenceType<ReferenceType<_ast7251>> {}; // LValueReferenceType const v8::SerializeInternalFieldsCallback &
struct _ast7251: ConstQualifiedType<_ast7244> {}; // RecordType const v8::SerializeInternalFieldsCallback
struct _ast7252: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1183>, _ast7254>, Pack<_ast7253>>>, _ast7243>> {}; // CXXConstructorDecl SerializeInternalFieldsCallback
struct _ast7254: FunctionProtoType<_ast64, Pack<_ast7255>, UnqualifiedType> {}; // FunctionProtoType void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _ast7255: RValueReferenceType<ReferenceType<_ast7244>> {}; // RValueReferenceType v8::SerializeInternalFieldsCallback &&
struct _ast7256: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1186>, _ast165>, Pack<>>>, _ast7243>> {}; // CXXDestructorDecl ~SerializeInternalFieldsCallback
struct _ast7257: TypedefNameDecl<TypeDecl<NamedDeclName<_str1187>, _ast7244>> {}; // TypedefDecl SerializeEmbedderFieldsCallback
struct _ast7260: TypedefNameDecl<TypeDecl<NamedDeclName<_str1184>, _ast7261>> {}; // TypedefDecl CallbackFunction
struct _ast7261: PointerType<_ast7262> {}; // PointerType void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7262: UnqualifiedType<_ast7263> {}; // ParenType void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7263: FunctionProtoType<_ast64, Pack<_ast7264, _ast1849, _ast7237, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ast7265: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1188>, _ast7268>, Pack<_ast7266, _ast7267>>>, _ast7270>> {}; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7268: FunctionProtoType<_ast64, Pack<_ast7269, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _ast7269: TypedefType<_ast7260> {}; // TypedefType v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ast7270: PointerType<_ast7271> {}; // PointerType v8::DeserializeInternalFieldsCallback *
struct _ast7271: StructOrClassRecordType<RecordType<_ast7258>> {}; // RecordType v8::DeserializeInternalFieldsCallback
struct _ast7274: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1188>, _ast7276>, Pack<_ast7275>>>, _ast7270>> {}; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7276: FunctionProtoType<_ast64, Pack<_ast7277>, UnqualifiedType> {}; // FunctionProtoType void (const v8::DeserializeInternalFieldsCallback &)
struct _ast7277: LValueReferenceType<ReferenceType<_ast7278>> {}; // LValueReferenceType const v8::DeserializeInternalFieldsCallback &
struct _ast7278: ConstQualifiedType<_ast7271> {}; // RecordType const v8::DeserializeInternalFieldsCallback
struct _ast7279: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1188>, _ast7281>, Pack<_ast7280>>>, _ast7270>> {}; // CXXConstructorDecl DeserializeInternalFieldsCallback
struct _ast7281: FunctionProtoType<_ast64, Pack<_ast7282>, UnqualifiedType> {}; // FunctionProtoType void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ast7282: RValueReferenceType<ReferenceType<_ast7271>> {}; // RValueReferenceType v8::DeserializeInternalFieldsCallback &&
struct _ast7283: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1189>, _ast165>, Pack<>>>, _ast7270>> {}; // CXXDestructorDecl ~DeserializeInternalFieldsCallback
struct _ast7284: TypedefNameDecl<TypeDecl<NamedDeclName<_str1190>, _ast7271>> {}; // TypedefDecl DeserializeEmbedderFieldsCallback
struct _ast7288: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1191>, _ast63>, Pack<>>>, _ast7289>> {}; // CXXConstructorDecl CreateParams
struct _ast7289: PointerType<_ast7290> {}; // PointerType v8::Isolate::CreateParams *
struct _ast7290: StructOrClassRecordType<RecordType<_ast7286>> {}; // RecordType v8::Isolate::CreateParams
struct _ast7303: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1202>, _ast2787>, Pack<_ast7304>>>, _ast7305>> {}; // CXXConstructorDecl Scope
struct _ast7305: PointerType<_ast7306> {}; // PointerType v8::Isolate::Scope *
struct _ast7306: StructOrClassRecordType<RecordType<_ast7301>> {}; // RecordType v8::Isolate::Scope
struct _ast7307: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1203>, _ast165>, Pack<>>>, _ast7305>> {}; // CXXDestructorDecl ~Scope
struct _ast7308: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1202>, _ast7310>, Pack<_ast7309>>>, _ast7305>> {}; // CXXConstructorDecl Scope
struct _ast7310: FunctionProtoType<_ast64, Pack<_ast7311>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Isolate::Scope &)
struct _ast7311: LValueReferenceType<ReferenceType<_ast7312>> {}; // LValueReferenceType const v8::Isolate::Scope &
struct _ast7312: ConstQualifiedType<_ast7306> {}; // RecordType const v8::Isolate::Scope
struct _ast7313: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7315>, Pack<_ast7314>>>, _ast7305> {}; // CXXMethodDecl operator=
struct _ast7315: FunctionProtoType<_ast7316, Pack<_ast7311>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _ast7316: LValueReferenceType<ReferenceType<_ast7306>> {}; // LValueReferenceType v8::Isolate::Scope &
struct _ast7323: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1204>, _ast7326>, Pack<_ast7324, _ast7325>>>, _ast7328>> {}; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7326: FunctionProtoType<_ast64, Pack<_ast136, _ast7327>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ast7327: EnumType<_ast7319, _ast1849> {}; // EnumType v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ast7328: PointerType<_ast7329> {}; // PointerType v8::Isolate::DisallowJavascriptExecutionScope *
struct _ast7329: StructOrClassRecordType<RecordType<_ast7317>> {}; // RecordType v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7330: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1210>, _ast7331>, Pack<>>>, _ast7328>> {}; // CXXDestructorDecl ~DisallowJavascriptExecutionScope
struct _ast7331: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7332: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1204>, _ast7334>, Pack<_ast7333>>>, _ast7328>> {}; // CXXConstructorDecl DisallowJavascriptExecutionScope
struct _ast7334: FunctionProtoType<_ast64, Pack<_ast7335>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7335: LValueReferenceType<ReferenceType<_ast7336>> {}; // LValueReferenceType const v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7336: ConstQualifiedType<_ast7329> {}; // RecordType const v8::Isolate::DisallowJavascriptExecutionScope
struct _ast7337: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7339>, Pack<_ast7338>>>, _ast7328> {}; // CXXMethodDecl operator=
struct _ast7339: FunctionProtoType<_ast7340, Pack<_ast7335>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ast7340: LValueReferenceType<ReferenceType<_ast7329>> {}; // LValueReferenceType v8::Isolate::DisallowJavascriptExecutionScope &
struct _ast7343: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1211>, _ast2787>, Pack<_ast7344>>>, _ast7345>> {}; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7345: PointerType<_ast7346> {}; // PointerType v8::Isolate::AllowJavascriptExecutionScope *
struct _ast7346: StructOrClassRecordType<RecordType<_ast7341>> {}; // RecordType v8::Isolate::AllowJavascriptExecutionScope
struct _ast7347: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1212>, _ast7348>, Pack<>>>, _ast7345>> {}; // CXXDestructorDecl ~AllowJavascriptExecutionScope
struct _ast7348: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7349: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1211>, _ast7351>, Pack<_ast7350>>>, _ast7345>> {}; // CXXConstructorDecl AllowJavascriptExecutionScope
struct _ast7351: FunctionProtoType<_ast64, Pack<_ast7352>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7352: LValueReferenceType<ReferenceType<_ast7353>> {}; // LValueReferenceType const v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7353: ConstQualifiedType<_ast7346> {}; // RecordType const v8::Isolate::AllowJavascriptExecutionScope
struct _ast7354: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7356>, Pack<_ast7355>>>, _ast7345> {}; // CXXMethodDecl operator=
struct _ast7356: FunctionProtoType<_ast7357, Pack<_ast7352>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ast7357: LValueReferenceType<ReferenceType<_ast7346>> {}; // LValueReferenceType v8::Isolate::AllowJavascriptExecutionScope &
struct _ast7360: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1213>, _ast2787>, Pack<_ast7361>>>, _ast7362>> {}; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7362: PointerType<_ast7363> {}; // PointerType v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ast7363: StructOrClassRecordType<RecordType<_ast7358>> {}; // RecordType v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7364: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1213>, _ast7366>, Pack<_ast7365>>>, _ast7362>> {}; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7366: FunctionProtoType<_ast64, Pack<_ast6852>, UnqualifiedType> {}; // FunctionProtoType void (v8::MicrotaskQueue *)
struct _ast7367: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1214>, _ast7368>, Pack<>>>, _ast7362>> {}; // CXXDestructorDecl ~SuppressMicrotaskExecutionScope
struct _ast7368: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7369: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1213>, _ast7371>, Pack<_ast7370>>>, _ast7362>> {}; // CXXConstructorDecl SuppressMicrotaskExecutionScope
struct _ast7371: FunctionProtoType<_ast64, Pack<_ast7372>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7372: LValueReferenceType<ReferenceType<_ast7373>> {}; // LValueReferenceType const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7373: ConstQualifiedType<_ast7363> {}; // RecordType const v8::Isolate::SuppressMicrotaskExecutionScope
struct _ast7374: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7376>, Pack<_ast7375>>>, _ast7362> {}; // CXXMethodDecl operator=
struct _ast7376: FunctionProtoType<_ast7377, Pack<_ast7372>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ast7377: LValueReferenceType<ReferenceType<_ast7363>> {}; // LValueReferenceType v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ast7380: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1215>, _ast7382>, Pack<_ast7381>>>, _ast7383>> {}; // CXXConstructorDecl SafeForTerminationScope
struct _ast7382: FunctionProtoType<_ast64, Pack<_ast6864>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *)
struct _ast7383: PointerType<_ast7384> {}; // PointerType v8::Isolate::SafeForTerminationScope *
struct _ast7384: StructOrClassRecordType<RecordType<_ast7378>> {}; // RecordType v8::Isolate::SafeForTerminationScope
struct _ast7385: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1216>, _ast7386>, Pack<>>>, _ast7383>> {}; // CXXDestructorDecl ~SafeForTerminationScope
struct _ast7386: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7387: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1215>, _ast7389>, Pack<_ast7388>>>, _ast7383>> {}; // CXXConstructorDecl SafeForTerminationScope
struct _ast7389: FunctionProtoType<_ast64, Pack<_ast7390>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Isolate::SafeForTerminationScope &)
struct _ast7390: LValueReferenceType<ReferenceType<_ast7391>> {}; // LValueReferenceType const v8::Isolate::SafeForTerminationScope &
struct _ast7391: ConstQualifiedType<_ast7384> {}; // RecordType const v8::Isolate::SafeForTerminationScope
struct _ast7392: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7394>, Pack<_ast7393>>>, _ast7383> {}; // CXXMethodDecl operator=
struct _ast7394: FunctionProtoType<_ast7395, Pack<_ast7390>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
struct _ast7395: LValueReferenceType<ReferenceType<_ast7384>> {}; // LValueReferenceType v8::Isolate::SafeForTerminationScope &
struct _ast7484: TypedefNameDecl<TypeDecl<NamedDeclName<_str1305>, _ast7485>> {}; // TypedefDecl UseCounterCallback
struct _ast7485: PointerType<_ast7486> {}; // PointerType void (*)(v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ast7486: UnqualifiedType<_ast7487> {}; // ParenType void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ast7487: FunctionProtoType<_ast64, Pack<_ast136, _ast7488>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ast7488: EnumType<_ast7399, _ast1849> {}; // EnumType v8::Isolate::UseCounterFeature
struct _ast7489: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str816>, _ast4759>, Pack<>>> {}; // CXXMethodDecl Allocate
struct _ast7490: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str160>, _ast7493>, Pack<_ast7491, _ast7492>>> {}; // CXXMethodDecl Initialize
struct _ast7493: FunctionProtoType<_ast64, Pack<_ast136, _ast7494>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _ast7494: LValueReferenceType<ReferenceType<_ast7495>> {}; // LValueReferenceType const v8::Isolate::CreateParams &
struct _ast7495: ConstQualifiedType<_ast7290> {}; // RecordType const v8::Isolate::CreateParams
struct _ast7496: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast7498>, Pack<_ast7497>>> {}; // CXXMethodDecl New
struct _ast7498: FunctionProtoType<_ast136, Pack<_ast7494>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate *(const v8::Isolate::CreateParams &)
struct _ast7499: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1307>, _ast4759>, Pack<>>> {}; // CXXMethodDecl GetCurrent
struct _ast7500: TypedefNameDecl<TypeDecl<NamedDeclName<_str1308>, _ast7501>> {}; // TypedefDecl AbortOnUncaughtExceptionCallback
struct _ast7501: PointerType<_ast7502> {}; // PointerType bool (*)(v8::Isolate *)
struct _ast7502: UnqualifiedType<_ast6914> {}; // ParenType bool (v8::Isolate *)
struct _ast7503: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1309>, _ast7505>, Pack<_ast7504>>>, _ast136> {}; // CXXMethodDecl SetAbortOnUncaughtExceptionCallback
struct _ast7505: FunctionProtoType<_ast64, Pack<_ast7506>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ast7506: TypedefType<_ast7500> {}; // TypedefType v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ast7507: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1310>, _ast7509>, Pack<_ast7508>>>, _ast136> {}; // CXXMethodDecl SetHostImportModuleDynamicallyCallback
struct _ast7509: FunctionProtoType<_ast64, Pack<_ast7510>, UnqualifiedType> {}; // FunctionProtoType void (v8::HostImportModuleDynamicallyCallback)
struct _ast7510: TypedefType<_ast6765> {}; // TypedefType v8::HostImportModuleDynamicallyCallback
struct _ast7511: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1311>, _ast7513>, Pack<_ast7512>>>, _ast136> {}; // CXXMethodDecl SetHostInitializeImportMetaObjectCallback
struct _ast7513: FunctionProtoType<_ast64, Pack<_ast7514>, UnqualifiedType> {}; // FunctionProtoType void (v8::HostInitializeImportMetaObjectCallback)
struct _ast7514: TypedefType<_ast6773> {}; // TypedefType v8::HostInitializeImportMetaObjectCallback
struct _ast7515: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1312>, _ast7517>, Pack<_ast7516>>>, _ast136> {}; // CXXMethodDecl SetPrepareStackTraceCallback
struct _ast7517: FunctionProtoType<_ast64, Pack<_ast7518>, UnqualifiedType> {}; // FunctionProtoType void (v8::PrepareStackTraceCallback)
struct _ast7518: TypedefType<_ast6780> {}; // TypedefType v8::PrepareStackTraceCallback
struct _ast7519: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1313>, _ast7521>, Pack<_ast7520>>>, _ast136> {}; // CXXMethodDecl MemoryPressureNotification
struct _ast7521: FunctionProtoType<_ast64, Pack<_ast7522>, UnqualifiedType> {}; // FunctionProtoType void (v8::MemoryPressureLevel)
struct _ast7522: EnumType<_ast7134, _ast1849> {}; // EnumType v8::MemoryPressureLevel
struct _ast7523: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1314>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl Enter
struct _ast7524: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1315>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl Exit
struct _ast7525: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str529>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl Dispose
struct _ast7526: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1316>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl DumpAndResetStats
struct _ast7527: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1317>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl DiscardThreadSpecificMetadata
struct _ast7528: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1318>, _ast7531>, Pack<_ast7529, _ast7530>>>, _ast136> {}; // CXXMethodDecl SetData
struct _ast7531: FunctionProtoType<_ast64, Pack<_ast3272, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (uint32_t, void *)
struct _ast7532: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1320>, _ast7534>, Pack<_ast7533>>>, _ast136> {}; // CXXMethodDecl GetData
struct _ast7534: FunctionProtoType<_ast2169, Pack<_ast3272>, UnqualifiedType> {}; // FunctionProtoType void *(uint32_t)
struct _ast7535: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1321>, _ast3271>, Pack<>>> {}; // CXXMethodDecl GetNumberOfDataSlots
struct _ast7538: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1322>, _ast7540>, Pack<_ast7539>>>, _ast136> {}; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast7540: FunctionProtoType<_ast7541, Pack<_ast3170>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast7542: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1323>, _ast7544>, Pack<_ast7543>>>, _ast136> {}; // CXXMethodDecl GetHeapStatistics
struct _ast7544: FunctionProtoType<_ast64, Pack<_ast6997>, UnqualifiedType> {}; // FunctionProtoType void (v8::HeapStatistics *)
struct _ast7545: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1325>, _ast5570>, Pack<>>>, _ast136> {}; // CXXMethodDecl NumberOfHeapSpaces
struct _ast7546: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1326>, _ast7549>, Pack<_ast7547, _ast7548>>>, _ast136> {}; // CXXMethodDecl GetHeapSpaceStatistics
struct _ast7549: FunctionProtoType<_ast79, Pack<_ast7014, _ast3170>, UnqualifiedType> {}; // FunctionProtoType bool (v8::HeapSpaceStatistics *, size_t)
struct _ast7550: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1328>, _ast5570>, Pack<>>>, _ast136> {}; // CXXMethodDecl NumberOfTrackedHeapObjectTypes
struct _ast7551: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1329>, _ast7554>, Pack<_ast7552, _ast7553>>>, _ast136> {}; // CXXMethodDecl GetHeapObjectStatisticsAtLastGC
struct _ast7554: FunctionProtoType<_ast79, Pack<_ast7025, _ast3170>, UnqualifiedType> {}; // FunctionProtoType bool (v8::HeapObjectStatistics *, size_t)
struct _ast7555: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1332>, _ast7557>, Pack<_ast7556>>>, _ast136> {}; // CXXMethodDecl GetHeapCodeAndMetadataStatistics
struct _ast7557: FunctionProtoType<_ast79, Pack<_ast7034>, UnqualifiedType> {}; // FunctionProtoType bool (v8::HeapCodeStatistics *)
struct _ast7558: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1333>, _ast7563>, Pack<_ast7559, _ast7560, _ast7561, _ast7562>>>, _ast136> {}; // CXXMethodDecl GetStackSample
struct _ast7563: FunctionProtoType<_ast64, Pack<_ast7564, _ast7566, _ast3170, _ast7567>, UnqualifiedType> {}; // FunctionProtoType void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
struct _ast7564: LValueReferenceType<ReferenceType<_ast7565>> {}; // LValueReferenceType const v8::RegisterState &
struct _ast7565: ConstQualifiedType<_ast3423> {}; // RecordType const v8::RegisterState
struct _ast7566: PointerType<_ast2169> {}; // PointerType void **
struct _ast7567: PointerType<_ast7568> {}; // PointerType v8::SampleInfo *
struct _ast7568: StructOrClassRecordType<RecordType<_ast3428>> {}; // RecordType v8::SampleInfo
struct _ast7569: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1338>, _ast7571>, Pack<_ast7570>>>, _ast136> {}; // CXXMethodDecl AdjustAmountOfExternalAllocatedMemory
struct _ast7571: FunctionProtoType<_ast4199, Pack<_ast4199>, UnqualifiedType> {}; // FunctionProtoType int64_t (int64_t)
struct _ast7572: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1340>, _ast5570>, Pack<>>>, _ast136> {}; // CXXMethodDecl NumberOfPhantomHandleResetsSinceLastCall
struct _ast7573: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1341>, _ast7574>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetHeapProfiler
struct _ast7574: FunctionProtoType<_ast7575, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::HeapProfiler *()
struct _ast7575: PointerType<_ast7576> {}; // PointerType v8::HeapProfiler *
struct _ast7576: StructOrClassRecordType<RecordType<_ast16>> {}; // RecordType v8::HeapProfiler
struct _ast7577: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1342>, _ast3536>, Pack<_ast7578>>>, _ast136> {}; // CXXMethodDecl SetIdle
struct _ast7579: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1344>, _ast7580>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetArrayBufferAllocator
struct _ast7580: FunctionProtoType<_ast7581, Pack<>, UnqualifiedType> {}; // FunctionProtoType ArrayBuffer::Allocator *()
struct _ast7581: PointerType<_ast7582> {}; // PointerType ArrayBuffer::Allocator *
struct _ast7583: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1345>, _ast3172>, Pack<>>>, _ast136> {}; // CXXMethodDecl InContext
struct _ast7584: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1346>, _ast7585>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetCurrentContext
struct _ast7585: FunctionProtoType<_ast7586, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> ()
struct _ast7587: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1347>, _ast7588>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetEnteredContext
struct _ast7588: FunctionProtoType<_ast7589, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> ()
struct _ast7590: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1348>, _ast7591>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetEnteredOrMicrotaskContext
struct _ast7591: FunctionProtoType<_ast7592, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> ()
struct _ast7593: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1349>, _ast7594>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetIncumbentContext
struct _ast7594: FunctionProtoType<_ast7595, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> ()
struct _ast7596: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1350>, _ast7598>, Pack<_ast7597>>>, _ast136> {}; // CXXMethodDecl ThrowException
struct _ast7598: FunctionProtoType<_ast7600, Pack<_ast7599>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
struct _ast7601: TypedefNameDecl<TypeDecl<NamedDeclName<_str1071>, _ast7602>> {}; // TypedefDecl GCCallback
struct _ast7602: PointerType<_ast7603> {}; // PointerType void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ast7603: UnqualifiedType<_ast7604> {}; // ParenType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ast7604: FunctionProtoType<_ast64, Pack<_ast136, _ast6987, _ast6988>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ast7605: TypedefNameDecl<TypeDecl<NamedDeclName<_str1351>, _ast7606>> {}; // TypedefDecl GCCallbackWithData
struct _ast7606: PointerType<_ast7607> {}; // PointerType void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ast7607: UnqualifiedType<_ast7608> {}; // ParenType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ast7608: FunctionProtoType<_ast64, Pack<_ast136, _ast6987, _ast6988, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ast7609: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1352>, _ast7613>, Pack<_ast7610, _ast7611, _ast7612>>>, _ast136> {}; // CXXMethodDecl AddGCPrologueCallback
struct _ast7613: FunctionProtoType<_ast64, Pack<_ast7614, _ast2169, _ast6987>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
struct _ast7614: TypedefType<_ast7605> {}; // TypedefType v8::Isolate::GCCallbackWithData
struct _ast7615: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1352>, _ast7618>, Pack<_ast7616, _ast7617>>>, _ast136> {}; // CXXMethodDecl AddGCPrologueCallback
struct _ast7618: FunctionProtoType<_ast64, Pack<_ast7619, _ast6987>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::GCCallback, v8::GCType)
struct _ast7619: TypedefType<_ast7601> {}; // TypedefType v8::Isolate::GCCallback
struct _ast7620: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1354>, _ast7623>, Pack<_ast7621, _ast7622>>>, _ast136> {}; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7623: FunctionProtoType<_ast64, Pack<_ast7614, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *)
struct _ast7624: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1354>, _ast7626>, Pack<_ast7625>>>, _ast136> {}; // CXXMethodDecl RemoveGCPrologueCallback
struct _ast7626: FunctionProtoType<_ast64, Pack<_ast7619>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::GCCallback)
struct _ast7627: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1355>, _ast7629>, Pack<_ast7628>>>, _ast136> {}; // CXXMethodDecl SetEmbedderHeapTracer
struct _ast7629: FunctionProtoType<_ast64, Pack<_ast7171>, UnqualifiedType> {}; // FunctionProtoType void (v8::EmbedderHeapTracer *)
struct _ast7630: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1357>, _ast7631>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetEmbedderHeapTracer
struct _ast7631: FunctionProtoType<_ast7171, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::EmbedderHeapTracer *()
struct _ast7641: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1366>, _ast63>, Pack<>>>, _ast7642> {}; // CXXMethodDecl Wake
struct _ast7642: PointerType<_ast7643> {}; // PointerType v8::Isolate::AtomicsWaitWakeHandle *
struct _ast7643: StructOrClassRecordType<RecordType<_ast7639>> {}; // RecordType v8::Isolate::AtomicsWaitWakeHandle
struct _ast7644: TypedefNameDecl<TypeDecl<NamedDeclName<_str1367>, _ast7645>> {}; // TypedefDecl AtomicsWaitCallback
struct _ast7645: PointerType<_ast7646> {}; // PointerType void (*)(v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ast7646: UnqualifiedType<_ast7647> {}; // ParenType void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ast7647: FunctionProtoType<_ast64, Pack<_ast7648, _ast7649, _ast3170, _ast4199, _ast3547, _ast7642, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ast7648: EnumType<_ast7632, _ast1849> {}; // EnumType v8::Isolate::AtomicsWaitEvent
struct _ast7650: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1368>, _ast7653>, Pack<_ast7651, _ast7652>>>, _ast136> {}; // CXXMethodDecl SetAtomicsWaitCallback
struct _ast7653: FunctionProtoType<_ast64, Pack<_ast7654, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::AtomicsWaitCallback, void *)
struct _ast7654: TypedefType<_ast7644> {}; // TypedefType v8::Isolate::AtomicsWaitCallback
struct _ast7655: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1369>, _ast7613>, Pack<_ast7656, _ast7657, _ast7658>>>, _ast136> {}; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7659: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1369>, _ast7618>, Pack<_ast7660, _ast7661>>>, _ast136> {}; // CXXMethodDecl AddGCEpilogueCallback
struct _ast7662: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1370>, _ast7623>, Pack<_ast7663, _ast7664>>>, _ast136> {}; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7665: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1370>, _ast7626>, Pack<_ast7666>>>, _ast136> {}; // CXXMethodDecl RemoveGCEpilogueCallback
struct _ast7667: TypedefNameDecl<TypeDecl<NamedDeclName<_str1371>, _ast7668>> {}; // TypedefDecl GetExternallyAllocatedMemoryInBytesCallback
struct _ast7668: PointerType<_ast7669> {}; // PointerType size_t (*)()
struct _ast7669: UnqualifiedType<_ast5570> {}; // ParenType size_t ()
struct _ast7670: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1372>, _ast7672>, Pack<_ast7671>>>, _ast136> {}; // CXXMethodDecl SetGetExternallyAllocatedMemoryInBytesCallback
struct _ast7672: FunctionProtoType<_ast64, Pack<_ast7673>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ast7673: TypedefType<_ast7667> {}; // TypedefType v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ast7674: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1373>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl TerminateExecution
struct _ast7675: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1374>, _ast3172>, Pack<>>>, _ast136> {}; // CXXMethodDecl IsExecutionTerminating
struct _ast7676: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1375>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl CancelTerminateExecution
struct _ast7677: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1376>, _ast7680>, Pack<_ast7678, _ast7679>>>, _ast136> {}; // CXXMethodDecl RequestInterrupt
struct _ast7680: FunctionProtoType<_ast64, Pack<_ast7681, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::InterruptCallback, void *)
struct _ast7681: TypedefType<_ast6989> {}; // TypedefType v8::InterruptCallback
struct _ast7682: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1377>, _ast7684>, Pack<_ast7683>>>, _ast136> {}; // CXXMethodDecl RequestGarbageCollectionForTesting
struct _ast7684: FunctionProtoType<_ast64, Pack<_ast7685>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::GarbageCollectionType)
struct _ast7685: EnumType<_ast7396, _ast1849> {}; // EnumType v8::Isolate::GarbageCollectionType
struct _ast7686: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1378>, _ast7688>, Pack<_ast7687>>>, _ast136> {}; // CXXMethodDecl SetEventLogger
struct _ast7688: FunctionProtoType<_ast64, Pack<_ast7689>, UnqualifiedType> {}; // FunctionProtoType void (v8::LogEventCallback)
struct _ast7689: TypedefType<_ast6707> {}; // TypedefType v8::LogEventCallback
struct _ast7690: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1379>, _ast7692>, Pack<_ast7691>>>, _ast136> {}; // CXXMethodDecl AddBeforeCallEnteredCallback
struct _ast7692: FunctionProtoType<_ast64, Pack<_ast7693>, UnqualifiedType> {}; // FunctionProtoType void (v8::BeforeCallEnteredCallback)
struct _ast7693: TypedefType<_ast6761> {}; // TypedefType v8::BeforeCallEnteredCallback
struct _ast7694: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1380>, _ast7692>, Pack<_ast7695>>>, _ast136> {}; // CXXMethodDecl RemoveBeforeCallEnteredCallback
struct _ast7696: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1381>, _ast7698>, Pack<_ast7697>>>, _ast136> {}; // CXXMethodDecl AddCallCompletedCallback
struct _ast7698: FunctionProtoType<_ast64, Pack<_ast7699>, UnqualifiedType> {}; // FunctionProtoType void (v8::CallCompletedCallback)
struct _ast7699: TypedefType<_ast6764> {}; // TypedefType v8::CallCompletedCallback
struct _ast7700: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1382>, _ast7698>, Pack<_ast7701>>>, _ast136> {}; // CXXMethodDecl RemoveCallCompletedCallback
struct _ast7702: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1383>, _ast7704>, Pack<_ast7703>>>, _ast136> {}; // CXXMethodDecl SetPromiseHook
struct _ast7704: FunctionProtoType<_ast64, Pack<_ast7705>, UnqualifiedType> {}; // FunctionProtoType void (v8::PromiseHook)
struct _ast7705: TypedefType<_ast6793> {}; // TypedefType v8::PromiseHook
struct _ast7706: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1385>, _ast7708>, Pack<_ast7707>>>, _ast136> {}; // CXXMethodDecl SetPromiseRejectCallback
struct _ast7708: FunctionProtoType<_ast64, Pack<_ast7709>, UnqualifiedType> {}; // FunctionProtoType void (v8::PromiseRejectCallback)
struct _ast7709: TypedefType<_ast6827> {}; // TypedefType v8::PromiseRejectCallback
struct _ast7710: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1386>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl RunMicrotasks
struct _ast7711: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1036>, _ast7713>, Pack<_ast7712>>>, _ast136> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast7713: FunctionProtoType<_ast64, Pack<_ast7714>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Function>)
struct _ast7715: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1036>, _ast7718>, Pack<_ast7716, _ast7717>>>, _ast136> {}; // CXXMethodDecl EnqueueMicrotask
struct _ast7718: FunctionProtoType<_ast64, Pack<_ast6866, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::MicrotaskCallback, void *)
struct _ast7719: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1387>, _ast7721>, Pack<_ast7720>>>, _ast136> {}; // CXXMethodDecl SetMicrotasksPolicy
struct _ast7721: FunctionProtoType<_ast64, Pack<_ast6848>, UnqualifiedType> {}; // FunctionProtoType void (v8::MicrotasksPolicy)
struct _ast7722: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1388>, _ast7723>, Pack<>>>, _ast7724> {}; // CXXMethodDecl GetMicrotasksPolicy
struct _ast7723: FunctionProtoType<_ast6848, Pack<>, ConstQualifiedType> {}; // FunctionProtoType v8::MicrotasksPolicy () const
struct _ast7724: PointerType<_ast7725> {}; // PointerType const v8::Isolate *
struct _ast7725: ConstQualifiedType<_ast137> {}; // RecordType const v8::Isolate
struct _ast7726: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1038>, _ast7728>, Pack<_ast7727>>>, _ast136> {}; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7728: FunctionProtoType<_ast64, Pack<_ast7729>, UnqualifiedType> {}; // FunctionProtoType void (v8::MicrotasksCompletedCallback)
struct _ast7729: TypedefType<_ast6831> {}; // TypedefType v8::MicrotasksCompletedCallback
struct _ast7730: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1038>, _ast6870>, Pack<_ast7731, _ast7732>>>, _ast136> {}; // CXXMethodDecl AddMicrotasksCompletedCallback
struct _ast7733: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1039>, _ast7728>, Pack<_ast7734>>>, _ast136> {}; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7735: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1039>, _ast6870>, Pack<_ast7736, _ast7737>>>, _ast136> {}; // CXXMethodDecl RemoveMicrotasksCompletedCallback
struct _ast7738: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1389>, _ast7740>, Pack<_ast7739>>>, _ast136> {}; // CXXMethodDecl SetUseCounterCallback
struct _ast7740: FunctionProtoType<_ast64, Pack<_ast7741>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::UseCounterCallback)
struct _ast7741: TypedefType<_ast7484> {}; // TypedefType v8::Isolate::UseCounterCallback
struct _ast7742: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1390>, _ast7744>, Pack<_ast7743>>>, _ast136> {}; // CXXMethodDecl SetCounterFunction
struct _ast7744: FunctionProtoType<_ast64, Pack<_ast7745>, UnqualifiedType> {}; // FunctionProtoType void (v8::CounterLookupCallback)
struct _ast7745: TypedefType<_ast6749> {}; // TypedefType v8::CounterLookupCallback
struct _ast7746: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1391>, _ast7748>, Pack<_ast7747>>>, _ast136> {}; // CXXMethodDecl SetCreateHistogramFunction
struct _ast7748: FunctionProtoType<_ast64, Pack<_ast7749>, UnqualifiedType> {}; // FunctionProtoType void (v8::CreateHistogramCallback)
struct _ast7749: TypedefType<_ast6753> {}; // TypedefType v8::CreateHistogramCallback
struct _ast7750: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1392>, _ast7752>, Pack<_ast7751>>>, _ast136> {}; // CXXMethodDecl SetAddHistogramSampleFunction
struct _ast7752: FunctionProtoType<_ast64, Pack<_ast7753>, UnqualifiedType> {}; // FunctionProtoType void (v8::AddHistogramSampleCallback)
struct _ast7753: TypedefType<_ast6757> {}; // TypedefType v8::AddHistogramSampleCallback
struct _ast7754: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1393>, _ast7195>, Pack<_ast7755>>>, _ast136> {}; // CXXMethodDecl IdleNotificationDeadline
struct _ast7756: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1395>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl LowMemoryNotification
struct _ast7757: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1396>, _ast7759>, Pack<_ast7758>>>, _ast136> {}; // CXXMethodDecl ContextDisposedNotification
struct _ast7759: FunctionProtoType<_ast1849, Pack<_ast79>, UnqualifiedType> {}; // FunctionProtoType int (bool)
struct _ast7760: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1398>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl IsolateInForegroundNotification
struct _ast7761: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1399>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl IsolateInBackgroundNotification
struct _ast7762: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1400>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl EnableMemorySavingsMode
struct _ast7763: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1401>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl DisableMemorySavingsMode
struct _ast7764: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1402>, _ast7766>, Pack<_ast7765>>>, _ast136> {}; // CXXMethodDecl SetRAILMode
struct _ast7766: FunctionProtoType<_ast64, Pack<_ast7767>, UnqualifiedType> {}; // FunctionProtoType void (v8::RAILMode)
struct _ast7767: EnumType<_ast7078, _ast7768> {}; // EnumType v8::RAILMode
struct _ast7768: ABIIndependentSizeType<UnsignedIntegerType, 4> {}; // BuiltinType unsigned int
struct _ast7769: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1404>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl IncreaseHeapLimitForDebugging
struct _ast7770: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1405>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl RestoreOriginalHeapLimit
struct _ast7771: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1406>, _ast3172>, Pack<>>>, _ast136> {}; // CXXMethodDecl IsHeapLimitIncreasedForDebugging
struct _ast7772: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1407>, _ast7775>, Pack<_ast7773, _ast7774>>>, _ast136> {}; // CXXMethodDecl SetJitCodeEventHandler
struct _ast7775: FunctionProtoType<_ast64, Pack<_ast7776, _ast7777>, UnqualifiedType> {}; // FunctionProtoType void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _ast7776: EnumType<_ast7083, _ast1849> {}; // EnumType v8::JitCodeEventOptions
struct _ast7777: TypedefType<_ast7086> {}; // TypedefType v8::JitCodeEventHandler
struct _ast7778: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1409>, _ast7780>, Pack<_ast7779>>>, _ast136> {}; // CXXMethodDecl SetStackLimit
struct _ast7780: FunctionProtoType<_ast64, Pack<_ast7781>, UnqualifiedType> {}; // FunctionProtoType void (uintptr_t)
struct _ast7781: PointerSizeType<UnsignedIntegerType> {}; // TypedefType uintptr_t
struct _ast7782: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1410>, _ast7785>, Pack<_ast7783, _ast7784>>>, _ast136> {}; // CXXMethodDecl GetCodeRange
struct _ast7785: FunctionProtoType<_ast64, Pack<_ast7566, _ast3498>, UnqualifiedType> {}; // FunctionProtoType void (void **, size_t *)
struct _ast7786: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1411>, _ast7787>, Pack<>>>, _ast136> {}; // CXXMethodDecl GetUnwindState
struct _ast7787: FunctionProtoType<_ast7788, Pack<>, UnqualifiedType> {}; // FunctionProtoType v8::UnwindState ()
struct _ast7788: StructOrClassRecordType<RecordType<_ast3440>> {}; // RecordType v8::UnwindState
struct _ast7789: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1412>, _ast7791>, Pack<_ast7790>>>, _ast136> {}; // CXXMethodDecl SetFatalErrorHandler
struct _ast7791: FunctionProtoType<_ast64, Pack<_ast7792>, UnqualifiedType> {}; // FunctionProtoType void (v8::FatalErrorCallback)
struct _ast7792: TypedefType<_ast6689> {}; // TypedefType v8::FatalErrorCallback
struct _ast7793: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1413>, _ast7795>, Pack<_ast7794>>>, _ast136> {}; // CXXMethodDecl SetOOMErrorHandler
struct _ast7795: FunctionProtoType<_ast64, Pack<_ast7796>, UnqualifiedType> {}; // FunctionProtoType void (v8::OOMErrorCallback)
struct _ast7796: TypedefType<_ast6693> {}; // TypedefType v8::OOMErrorCallback
struct _ast7797: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1414>, _ast7800>, Pack<_ast7798, _ast7799>>>, _ast136> {}; // CXXMethodDecl AddNearHeapLimitCallback
struct _ast7800: FunctionProtoType<_ast64, Pack<_ast7801, _ast2169>, UnqualifiedType> {}; // FunctionProtoType void (v8::NearHeapLimitCallback, void *)
struct _ast7801: TypedefType<_ast6990> {}; // TypedefType v8::NearHeapLimitCallback
struct _ast7802: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1415>, _ast7805>, Pack<_ast7803, _ast7804>>>, _ast136> {}; // CXXMethodDecl RemoveNearHeapLimitCallback
struct _ast7805: FunctionProtoType<_ast64, Pack<_ast7801, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (v8::NearHeapLimitCallback, size_t)
struct _ast7806: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1417>, _ast3546>, Pack<_ast7807>>>, _ast136> {}; // CXXMethodDecl AutomaticallyRestoreInitialHeapLimit
struct _ast7808: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1419>, _ast7810>, Pack<_ast7809>>>, _ast136> {}; // CXXMethodDecl SetAllowCodeGenerationFromStringsCallback
struct _ast7810: FunctionProtoType<_ast64, Pack<_ast7811>, UnqualifiedType> {}; // FunctionProtoType void (v8::AllowCodeGenerationFromStringsCallback)
struct _ast7811: TypedefType<_ast6931> {}; // TypedefType v8::AllowCodeGenerationFromStringsCallback
struct _ast7812: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1420>, _ast7814>, Pack<_ast7813>>>, _ast136> {}; // CXXMethodDecl SetAllowWasmCodeGenerationCallback
struct _ast7814: FunctionProtoType<_ast64, Pack<_ast7815>, UnqualifiedType> {}; // FunctionProtoType void (v8::AllowWasmCodeGenerationCallback)
struct _ast7815: TypedefType<_ast6944> {}; // TypedefType v8::AllowWasmCodeGenerationCallback
struct _ast7816: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1421>, _ast7818>, Pack<_ast7817>>>, _ast136> {}; // CXXMethodDecl SetWasmModuleCallback
struct _ast7818: FunctionProtoType<_ast64, Pack<_ast7819>, UnqualifiedType> {}; // FunctionProtoType void (v8::ExtensionCallback)
struct _ast7819: TypedefType<_ast6937> {}; // TypedefType v8::ExtensionCallback
struct _ast7820: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1422>, _ast7818>, Pack<_ast7821>>>, _ast136> {}; // CXXMethodDecl SetWasmInstanceCallback
struct _ast7822: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1423>, _ast7824>, Pack<_ast7823>>>, _ast136> {}; // CXXMethodDecl SetWasmStreamingCallback
struct _ast7824: FunctionProtoType<_ast64, Pack<_ast7825>, UnqualifiedType> {}; // FunctionProtoType void (v8::WasmStreamingCallback)
struct _ast7825: TypedefType<_ast6957> {}; // TypedefType v8::WasmStreamingCallback
struct _ast7826: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1424>, _ast7828>, Pack<_ast7827>>>, _ast136> {}; // CXXMethodDecl SetWasmThreadsEnabledCallback
struct _ast7828: FunctionProtoType<_ast64, Pack<_ast7829>, UnqualifiedType> {}; // FunctionProtoType void (v8::WasmThreadsEnabledCallback)
struct _ast7829: TypedefType<_ast6964> {}; // TypedefType v8::WasmThreadsEnabledCallback
struct _ast7830: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1425>, _ast3172>, Pack<>>>, _ast136> {}; // CXXMethodDecl IsDead
struct _ast7831: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1426>, _ast7834>, Pack<_ast7832, _ast7833>>>, _ast136> {}; // CXXMethodDecl AddMessageListener
struct _ast7834: FunctionProtoType<_ast79, Pack<_ast7835, _ast7836>, UnqualifiedType> {}; // FunctionProtoType bool (v8::MessageCallback, Local<v8::Value>)
struct _ast7835: TypedefType<_ast6701> {}; // TypedefType v8::MessageCallback
struct _ast7837: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1427>, _ast7841>, Pack<_ast7838, _ast7839, _ast7840>>>, _ast136> {}; // CXXMethodDecl AddMessageListenerWithErrorLevel
struct _ast7841: FunctionProtoType<_ast79, Pack<_ast7835, _ast1849, _ast7842>, UnqualifiedType> {}; // FunctionProtoType bool (v8::MessageCallback, int, Local<v8::Value>)
struct _ast7843: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1429>, _ast7845>, Pack<_ast7844>>>, _ast136> {}; // CXXMethodDecl RemoveMessageListeners
struct _ast7845: FunctionProtoType<_ast64, Pack<_ast7835>, UnqualifiedType> {}; // FunctionProtoType void (v8::MessageCallback)
struct _ast7846: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1430>, _ast7848>, Pack<_ast7847>>>, _ast136> {}; // CXXMethodDecl SetFailedAccessCheckCallbackFunction
struct _ast7848: FunctionProtoType<_ast64, Pack<_ast7849>, UnqualifiedType> {}; // FunctionProtoType void (v8::FailedAccessCheckCallback)
struct _ast7849: TypedefType<_ast6924> {}; // TypedefType v8::FailedAccessCheckCallback
struct _ast7850: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1431>, _ast7854>, Pack<_ast7851, _ast7852, _ast7853>>>, _ast136> {}; // CXXMethodDecl SetCaptureStackTraceForUncaughtExceptions
struct _ast7854: FunctionProtoType<_ast64, Pack<_ast79, _ast1849, _ast7855>, UnqualifiedType> {}; // FunctionProtoType void (bool, int, StackTrace::StackTraceOptions)
struct _ast7856: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1433>, _ast7858>, Pack<_ast7857>>>, _ast136> {}; // CXXMethodDecl VisitExternalResources
struct _ast7858: FunctionProtoType<_ast64, Pack<_ast7104>, UnqualifiedType> {}; // FunctionProtoType void (v8::ExternalResourceVisitor *)
struct _ast7859: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1434>, _ast7861>, Pack<_ast7860>>>, _ast136> {}; // CXXMethodDecl VisitHandlesWithClassIds
struct _ast7861: FunctionProtoType<_ast64, Pack<_ast7120>, UnqualifiedType> {}; // FunctionProtoType void (v8::PersistentHandleVisitor *)
struct _ast7862: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1435>, _ast7861>, Pack<_ast7863>>>, _ast136> {}; // CXXMethodDecl VisitWeakHandles
struct _ast7864: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1436>, _ast3172>, Pack<>>>, _ast136> {}; // CXXMethodDecl IsInUse
struct _ast7865: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1437>, _ast3536>, Pack<_ast7866>>>, _ast136> {}; // CXXMethodDecl SetAllowAtomicsWait
struct _ast7870: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1442>, _ast7872>, Pack<_ast7871>>>, _ast136> {}; // CXXMethodDecl DateTimeConfigurationChangeNotification
struct _ast7872: FunctionProtoType<_ast64, Pack<_ast7873>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate::TimeZoneDetection)
struct _ast7873: EnumType<_ast7867, _ast1849> {}; // EnumType v8::Isolate::TimeZoneDetection
struct _ast7874: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1444>, _ast63>, Pack<>>>, _ast136> {}; // CXXMethodDecl LocaleConfigurationChangeNotification
struct _ast7875: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str4>, _ast63>, Pack<>>>, _ast136>> {}; // CXXConstructorDecl Isolate
struct _ast7876: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1445>, _ast7877>, Pack<>>>, _ast136>> {}; // CXXDestructorDecl ~Isolate
struct _ast7877: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7878: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str4>, _ast7880>, Pack<_ast7879>>>, _ast136>> {}; // CXXConstructorDecl Isolate
struct _ast7880: FunctionProtoType<_ast64, Pack<_ast7881>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Isolate &)
struct _ast7881: LValueReferenceType<ReferenceType<_ast7725>> {}; // LValueReferenceType const v8::Isolate &
struct _ast7882: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast7884>, Pack<_ast7883>>>, _ast136> {}; // CXXMethodDecl operator=
struct _ast7884: FunctionProtoType<_ast7885, Pack<_ast7881>, UnqualifiedType> {}; // FunctionProtoType v8::Isolate &(const v8::Isolate &)
struct _ast7885: LValueReferenceType<ReferenceType<_ast137>> {}; // LValueReferenceType v8::Isolate &
struct _ast7886: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1446>, _ast5490>, Pack<_ast7887>>> {}; // CXXMethodDecl operator new
struct _ast7888: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1447>, _ast5490>, Pack<_ast7889>>> {}; // CXXMethodDecl operator new[]
struct _ast7890: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1448>, _ast7893>, Pack<_ast7891, _ast7892>>> {}; // CXXMethodDecl operator delete
struct _ast7893: FunctionProtoType<_ast64, Pack<_ast2169, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (void *, size_t) noexcept
struct _ast7894: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1449>, _ast7893>, Pack<_ast7895, _ast7896>>> {}; // CXXMethodDecl operator delete[]
struct _ast7898: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1450>, _ast78>, Pack<>>>, _ast7899> {}; // CXXMethodDecl CanBeRehashed
struct _ast7899: PointerType<_ast7900> {}; // PointerType const v8::StartupData *
struct _ast7900: ConstQualifiedType<_ast7237> {}; // RecordType const v8::StartupData
struct _ast7903: TypedefNameDecl<TypeDecl<NamedDeclName<_str1452>, _ast7904>> {}; // TypedefDecl EntropySource
struct _ast7904: PointerType<_ast7905> {}; // PointerType bool (*)(unsigned char *, size_t)
struct _ast7905: UnqualifiedType<_ast7906> {}; // ParenType bool (unsigned char *, size_t)
struct _ast7906: FunctionProtoType<_ast79, Pack<_ast7907, _ast3170>, UnqualifiedType> {}; // FunctionProtoType bool (unsigned char *, size_t)
struct _ast7907: PointerType<_ast7908> {}; // PointerType unsigned char *
struct _ast7908: ABIIndependentSizeType<UnsignedIntegerType, 1> {}; // BuiltinType unsigned char
struct _ast7909: TypedefNameDecl<TypeDecl<NamedDeclName<_str1453>, _ast7910>> {}; // TypedefDecl ReturnAddressLocationResolver
struct _ast7910: PointerType<_ast7911> {}; // PointerType uintptr_t (*)(uintptr_t)
struct _ast7911: UnqualifiedType<_ast7912> {}; // ParenType uintptr_t (uintptr_t)
struct _ast7912: FunctionProtoType<_ast7781, Pack<_ast7781>, UnqualifiedType> {}; // FunctionProtoType uintptr_t (uintptr_t)
struct _ast7915: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1455>, _ast7917>, Pack<_ast7916>>> {}; // CXXMethodDecl SetNativesDataBlob
struct _ast7917: FunctionProtoType<_ast64, Pack<_ast7918>, UnqualifiedType> {}; // FunctionProtoType void (v8::StartupData *)
struct _ast7918: PointerType<_ast7237> {}; // PointerType v8::StartupData *
struct _ast7919: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1457>, _ast7917>, Pack<_ast7920>>> {}; // CXXMethodDecl SetSnapshotDataBlob
struct _ast7921: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1458>, _ast7923>, Pack<_ast7922>>> {}; // CXXMethodDecl SetDcheckErrorHandler
struct _ast7923: FunctionProtoType<_ast64, Pack<_ast7924>, UnqualifiedType> {}; // FunctionProtoType void (v8::DcheckErrorCallback)
struct _ast7924: TypedefType<_ast6697> {}; // TypedefType v8::DcheckErrorCallback
struct _ast7925: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1459>, _ast1861>, Pack<_ast7926>>> {}; // CXXMethodDecl SetFlagsFromString
struct _ast7927: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1459>, _ast7930>, Pack<_ast7928, _ast7929>>> {}; // CXXMethodDecl SetFlagsFromString
struct _ast7930: FunctionProtoType<_ast64, Pack<_ast1862, _ast3170>, UnqualifiedType> {}; // FunctionProtoType void (const char *, size_t)
struct _ast7931: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1459>, _ast6710>, Pack<_ast7932, _ast7933>>> {}; // CXXMethodDecl SetFlagsFromString
struct _ast7934: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1460>, _ast7938>, Pack<_ast7935, _ast7936, _ast7937>>> {}; // CXXMethodDecl SetFlagsFromCommandLine
struct _ast7938: FunctionProtoType<_ast64, Pack<_ast3892, _ast7939, _ast79>, UnqualifiedType> {}; // FunctionProtoType void (int *, char **, bool)
struct _ast7939: PointerType<_ast3891> {}; // PointerType char **
struct _ast7940: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1462>, _ast7017>, Pack<>>> {}; // CXXMethodDecl GetVersion
struct _ast7941: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str160>, _ast3172>, Pack<>>> {}; // CXXMethodDecl Initialize
struct _ast7942: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1463>, _ast7944>, Pack<_ast7943>>> {}; // CXXMethodDecl SetEntropySource
struct _ast7944: FunctionProtoType<_ast64, Pack<_ast7945>, UnqualifiedType> {}; // FunctionProtoType void (v8::EntropySource)
struct _ast7945: TypedefType<_ast7903> {}; // TypedefType v8::EntropySource
struct _ast7946: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1464>, _ast7948>, Pack<_ast7947>>> {}; // CXXMethodDecl SetReturnAddressLocationResolver
struct _ast7948: FunctionProtoType<_ast64, Pack<_ast7949>, UnqualifiedType> {}; // FunctionProtoType void (v8::ReturnAddressLocationResolver)
struct _ast7949: TypedefType<_ast7909> {}; // TypedefType v8::ReturnAddressLocationResolver
struct _ast7950: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str529>, _ast3172>, Pack<>>> {}; // CXXMethodDecl Dispose
struct _ast7951: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1466>, _ast7953>, Pack<_ast7952>>> {}; // CXXMethodDecl InitializeICU
struct _ast7953: FunctionProtoType<_ast79, Pack<_ast1862>, UnqualifiedType> {}; // FunctionProtoType bool (const char *)
struct _ast7954: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1468>, _ast7957>, Pack<_ast7955, _ast7956>>> {}; // CXXMethodDecl InitializeICUDefaultLocation
struct _ast7957: FunctionProtoType<_ast79, Pack<_ast1862, _ast1862>, UnqualifiedType> {}; // FunctionProtoType bool (const char *, const char *)
struct _ast7958: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1470>, _ast1861>, Pack<_ast7959>>> {}; // CXXMethodDecl InitializeExternalStartupData
struct _ast7960: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1470>, _ast6692>, Pack<_ast7961, _ast7962>>> {}; // CXXMethodDecl InitializeExternalStartupData
struct _ast7963: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1473>, _ast7965>, Pack<_ast7964>>> {}; // CXXMethodDecl InitializePlatform
struct _ast7965: FunctionProtoType<_ast64, Pack<_ast7966>, UnqualifiedType> {}; // FunctionProtoType void (v8::Platform *)
struct _ast7966: PointerType<_ast7967> {}; // PointerType v8::Platform *
struct _ast7967: StructOrClassRecordType<RecordType<_ast36>> {}; // RecordType v8::Platform
struct _ast7968: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1475>, _ast63>, Pack<>>> {}; // CXXMethodDecl ShutdownPlatform
struct _ast7969: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1476>, _ast7971>, Pack<_ast7970>>> {}; // CXXMethodDecl EnableWebAssemblyTrapHandler
struct _ast7971: FunctionProtoType<_ast79, Pack<_ast79>, UnqualifiedType> {}; // FunctionProtoType bool (bool)
struct _ast7972: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1478>, _ast7974>, Pack<_ast7973>>> {}; // CXXMethodDecl SetUnhandledExceptionCallback
struct _ast7974: FunctionProtoType<_ast64, Pack<_ast7975>, UnqualifiedType> {}; // FunctionProtoType void (v8::UnhandledExceptionCallback)
struct _ast7975: TypedefType<_ast7093> {}; // TypedefType v8::UnhandledExceptionCallback
struct _ast7981: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1480>, _ast7985>, Pack<_ast7982, _ast7983, _ast7984>>>, _ast7989>> {}; // CXXConstructorDecl SnapshotCreator
struct _ast7985: FunctionProtoType<_ast64, Pack<_ast136, _ast7986, _ast7918>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, const intptr_t *, v8::StartupData *)
struct _ast7986: PointerType<_ast7987> {}; // PointerType const intptr_t *
struct _ast7987: ConstQualifiedType<_ast7988> {}; // TypedefType const intptr_t
struct _ast7988: PointerSizeType<SignedIntegerType> {}; // TypedefType intptr_t
struct _ast7989: PointerType<_ast7990> {}; // PointerType v8::SnapshotCreator *
struct _ast7990: StructOrClassRecordType<RecordType<_ast7976>> {}; // RecordType v8::SnapshotCreator
struct _ast7991: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1480>, _ast7994>, Pack<_ast7992, _ast7993>>>, _ast7989>> {}; // CXXConstructorDecl SnapshotCreator
struct _ast7994: FunctionProtoType<_ast64, Pack<_ast7986, _ast7918>, UnqualifiedType> {}; // FunctionProtoType void (const intptr_t *, v8::StartupData *)
struct _ast7995: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1485>, _ast7996>, Pack<>>>, _ast7989>> {}; // CXXDestructorDecl ~SnapshotCreator
struct _ast7996: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast7997: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast4759>, Pack<>>>, _ast7989> {}; // CXXMethodDecl GetIsolate
struct _ast7998: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1486>, _ast8001>, Pack<_ast7999, _ast8000>>>, _ast7989> {}; // CXXMethodDecl SetDefaultContext
struct _ast8001: FunctionProtoType<_ast64, Pack<_ast8002, _ast7244>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8003: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1487>, _ast8006>, Pack<_ast8004, _ast8005>>>, _ast7989> {}; // CXXMethodDecl AddContext
struct _ast8006: FunctionProtoType<_ast3170, Pack<_ast8007, _ast7244>, UnqualifiedType> {}; // FunctionProtoType size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ast8008: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1488>, _ast8010>, Pack<_ast8009>>>, _ast7989> {}; // CXXMethodDecl AddTemplate
struct _ast8010: FunctionProtoType<_ast3170, Pack<_ast8011>, UnqualifiedType> {}; // FunctionProtoType size_t (Local<v8::Template>)
struct _ast8014: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1490>, _ast8017>, Pack<_ast8015, _ast8016>>>, _ast7989> {}; // CXXMethodDecl AddData
struct _ast8017: FunctionProtoType<_ast3170, Pack<_ast8018, _ast8019>, UnqualifiedType> {}; // FunctionProtoType size_t (Local<v8::Context>, Local<T>)
struct _ast8022: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1490>, _ast8024>, Pack<_ast8023>>>, _ast7989> {}; // CXXMethodDecl AddData
struct _ast8024: FunctionProtoType<_ast3170, Pack<_ast8025>, UnqualifiedType> {}; // FunctionProtoType size_t (Local<T>)
struct _ast8026: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1491>, _ast8028>, Pack<_ast8027>>>, _ast7989> {}; // CXXMethodDecl CreateBlob
struct _ast8028: FunctionProtoType<_ast7237, Pack<_ast8029>, UnqualifiedType> {}; // FunctionProtoType v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
struct _ast8029: EnumType<_ast7978, _ast1849> {}; // EnumType v8::SnapshotCreator::FunctionCodeHandling
struct _ast8030: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1480>, _ast8032>, Pack<_ast8031>>>, _ast7989>> {}; // CXXConstructorDecl SnapshotCreator
struct _ast8032: FunctionProtoType<_ast64, Pack<_ast8033>, UnqualifiedType> {}; // FunctionProtoType void (const v8::SnapshotCreator &)
struct _ast8033: LValueReferenceType<ReferenceType<_ast8034>> {}; // LValueReferenceType const v8::SnapshotCreator &
struct _ast8034: ConstQualifiedType<_ast7990> {}; // RecordType const v8::SnapshotCreator
struct _ast8035: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast8032>, Pack<_ast8036>>>, _ast7989> {}; // CXXMethodDecl operator=
struct _ast8039: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1493>, _ast78>, Pack<>>>, _ast8040> {}; // CXXMethodDecl IsNothing
struct _ast8040: PointerType<_ast8041> {}; // PointerType const Maybe<T> *
struct _ast8041: ConstQualifiedType<_ast8042> {}; // InjectedClassNameType const Maybe<T>
struct _ast8043: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1494>, _ast78>, Pack<>>>, _ast8040> {}; // CXXMethodDecl IsJust
struct _ast8044: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1495>, _ast8045>, Pack<>>>, _ast8040> {}; // CXXMethodDecl ToChecked
struct _ast8045: FunctionProtoType<_ast8046, Pack<>, ConstQualifiedType> {}; // FunctionProtoType T () const
struct _ast8047: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1496>, _ast3917>, Pack<>>>, _ast8040> {}; // CXXMethodDecl Check
struct _ast8048: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1497>, _ast8050>, Pack<_ast8049>>>, _ast8040> {}; // CXXMethodDecl To
struct _ast8050: FunctionProtoType<_ast79, Pack<_ast8051>, ConstQualifiedType> {}; // FunctionProtoType bool (T *) const
struct _ast8051: PointerType<_ast8046> {}; // PointerType T *
struct _ast8052: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1498>, _ast8045>, Pack<>>>, _ast8040> {}; // CXXMethodDecl FromJust
struct _ast8053: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str71>, _ast8055>, Pack<_ast8054>>>, _ast8040> {}; // CXXMethodDecl FromMaybe
struct _ast8055: FunctionProtoType<_ast8046, Pack<_ast8056>, ConstQualifiedType> {}; // FunctionProtoType T (const T &) const
struct _ast8056: LValueReferenceType<ReferenceType<_ast8057>> {}; // LValueReferenceType const T &
struct _ast8057: ConstQualifiedType<_ast8046> {}; // TemplateTypeParmType const T
struct _ast8058: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast8060>, Pack<_ast8059>>>, _ast8040> {}; // CXXMethodDecl operator==
struct _ast8060: FunctionProtoType<_ast79, Pack<_ast8061>, ConstQualifiedType> {}; // FunctionProtoType bool (const Maybe<T> &) const
struct _ast8061: LValueReferenceType<ReferenceType<_ast8041>> {}; // LValueReferenceType const Maybe<T> &
struct _ast8062: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast8060>, Pack<_ast8063>>>, _ast8040> {}; // CXXMethodDecl operator!=
struct _ast8066: FunctionDecl<TypeDecl<NamedDeclName<_str1499>, _ast8067>, Pack<>> {}; // FunctionDecl Nothing
struct _ast8067: FunctionProtoType<_ast8068, Pack<>, UnqualifiedType> {}; // FunctionProtoType Maybe<T> ()
struct _ast8071: FunctionDecl<TypeDecl<NamedDeclName<_str1500>, _ast8073>, Pack<_ast8072>> {}; // FunctionDecl Just
struct _ast8073: FunctionProtoType<_ast8077, Pack<_ast8074>, UnqualifiedType> {}; // FunctionProtoType Maybe<T> (const T &)
struct _ast8074: LValueReferenceType<ReferenceType<_ast8075>> {}; // LValueReferenceType const T &
struct _ast8075: ConstQualifiedType<_ast8076> {}; // TemplateTypeParmType const T
struct _ast8080: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1493>, _ast78>, Pack<>>>, _ast8081> {}; // CXXMethodDecl IsNothing
struct _ast8081: PointerType<_ast8082> {}; // PointerType const v8::Maybe<void> *
struct _ast8082: ConstQualifiedType<_ast8083> {}; // RecordType const v8::Maybe<void>
struct _ast8083: StructOrClassRecordType<RecordType<_ast8078>> {}; // RecordType v8::Maybe<void>
struct _ast8084: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1494>, _ast78>, Pack<>>>, _ast8081> {}; // CXXMethodDecl IsJust
struct _ast8085: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str58>, _ast8087>, Pack<_ast8086>>>, _ast8081> {}; // CXXMethodDecl operator==
struct _ast8087: FunctionProtoType<_ast79, Pack<_ast8088>, ConstQualifiedType> {}; // FunctionProtoType bool (const v8::Maybe<void> &) const
struct _ast8088: LValueReferenceType<ReferenceType<_ast8082>> {}; // LValueReferenceType const v8::Maybe<void> &
struct _ast8089: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str59>, _ast8087>, Pack<_ast8090>>>, _ast8081> {}; // CXXMethodDecl operator!=
struct _ast8091: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str20>, _ast8093>, Pack<_ast8092>>>, _ast8094>> {}; // CXXConstructorDecl Maybe
struct _ast8093: FunctionProtoType<_ast64, Pack<_ast8088>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Maybe<void> &)
struct _ast8094: PointerType<_ast8083> {}; // PointerType v8::Maybe<void> *
struct _ast8095: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str20>, _ast8097>, Pack<_ast8096>>>, _ast8094>> {}; // CXXConstructorDecl Maybe
struct _ast8097: FunctionProtoType<_ast64, Pack<_ast8098>, UnqualifiedType> {}; // FunctionProtoType void (v8::Maybe<void> &&) noexcept
struct _ast8098: RValueReferenceType<ReferenceType<_ast8083>> {}; // RValueReferenceType v8::Maybe<void> &&
struct _ast8099: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1502>, _ast165>, Pack<>>>, _ast8094>> {}; // CXXDestructorDecl ~Maybe
struct _ast8100: FunctionDecl<TypeDecl<NamedDeclName<_str1503>, _ast8101>, Pack<>> {}; // FunctionDecl JustVoid
struct _ast8101: FunctionProtoType<_ast8102, Pack<>, UnqualifiedType> {}; // FunctionProtoType Maybe<void> ()
struct _ast8105: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1504>, _ast2787>, Pack<_ast8106>>>, _ast8107>> {}; // CXXConstructorDecl TryCatch
struct _ast8107: PointerType<_ast8108> {}; // PointerType v8::TryCatch *
struct _ast8108: StructOrClassRecordType<RecordType<_ast8103>> {}; // RecordType v8::TryCatch
struct _ast8109: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1505>, _ast8110>, Pack<>>>, _ast8107>> {}; // CXXDestructorDecl ~TryCatch
struct _ast8110: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast8111: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1506>, _ast78>, Pack<>>>, _ast8112> {}; // CXXMethodDecl HasCaught
struct _ast8112: PointerType<_ast8113> {}; // PointerType const v8::TryCatch *
struct _ast8113: ConstQualifiedType<_ast8108> {}; // RecordType const v8::TryCatch
struct _ast8114: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1507>, _ast78>, Pack<>>>, _ast8112> {}; // CXXMethodDecl CanContinue
struct _ast8115: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1508>, _ast78>, Pack<>>>, _ast8112> {}; // CXXMethodDecl HasTerminated
struct _ast8116: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1509>, _ast8117>, Pack<>>>, _ast8107> {}; // CXXMethodDecl ReThrow
struct _ast8117: FunctionProtoType<_ast8118, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast8119: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str995>, _ast8120>, Pack<>>>, _ast8112> {}; // CXXMethodDecl Exception
struct _ast8120: FunctionProtoType<_ast8121, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Value> () const
struct _ast8122: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str40>, _ast8124>, Pack<_ast8123>>>, _ast8112> {}; // CXXMethodDecl StackTrace
struct _ast8124: FunctionProtoType<_ast8126, Pack<_ast8125>, ConstQualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _ast8127: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str308>, _ast8128>, Pack<>>>, _ast8112> {}; // CXXMethodDecl Message
struct _ast8128: FunctionProtoType<_ast8129, Pack<>, ConstQualifiedType> {}; // FunctionProtoType Local<v8::Message> () const
struct _ast8130: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str77>, _ast63>, Pack<>>>, _ast8107> {}; // CXXMethodDecl Reset
struct _ast8131: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1510>, _ast3536>, Pack<_ast8132>>>, _ast8107> {}; // CXXMethodDecl SetVerbose
struct _ast8133: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1511>, _ast78>, Pack<>>>, _ast8112> {}; // CXXMethodDecl IsVerbose
struct _ast8134: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1512>, _ast3536>, Pack<_ast8135>>>, _ast8107> {}; // CXXMethodDecl SetCaptureMessage
struct _ast8136: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1513>, _ast8138>, Pack<_ast8137>>> {}; // CXXMethodDecl JSStackComparableAddress
struct _ast8138: FunctionProtoType<_ast2169, Pack<_ast8107>, UnqualifiedType> {}; // FunctionProtoType void *(v8::TryCatch *)
struct _ast8139: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1504>, _ast8141>, Pack<_ast8140>>>, _ast8107>> {}; // CXXConstructorDecl TryCatch
struct _ast8141: FunctionProtoType<_ast64, Pack<_ast8142>, UnqualifiedType> {}; // FunctionProtoType void (const v8::TryCatch &)
struct _ast8142: LValueReferenceType<ReferenceType<_ast8113>> {}; // LValueReferenceType const v8::TryCatch &
struct _ast8143: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast8141>, Pack<_ast8144>>>, _ast8107> {}; // CXXMethodDecl operator=
struct _ast8147: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1514>, _ast63>, Pack<>>>, _ast8148>> {}; // CXXConstructorDecl ExtensionConfiguration
struct _ast8148: PointerType<_ast8149> {}; // PointerType v8::ExtensionConfiguration *
struct _ast8149: StructOrClassRecordType<RecordType<_ast8145>> {}; // RecordType v8::ExtensionConfiguration
struct _ast8150: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1514>, _ast8153>, Pack<_ast8151, _ast8152>>>, _ast8148>> {}; // CXXConstructorDecl ExtensionConfiguration
struct _ast8153: FunctionProtoType<_ast64, Pack<_ast1849, _ast8154>, UnqualifiedType> {}; // FunctionProtoType void (int, const char **)
struct _ast8155: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1516>, _ast6599>, Pack<>>>, _ast8156> {}; // CXXMethodDecl begin
struct _ast8156: PointerType<_ast8157> {}; // PointerType const v8::ExtensionConfiguration *
struct _ast8157: ConstQualifiedType<_ast8149> {}; // RecordType const v8::ExtensionConfiguration
struct _ast8158: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1517>, _ast6599>, Pack<>>>, _ast8156> {}; // CXXMethodDecl end
struct _ast8160: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str98>, _ast8161>, Pack<>>>, _ast8163> {}; // CXXMethodDecl Global
struct _ast8161: FunctionProtoType<_ast8162, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> ()
struct _ast8163: PointerType<_ast8164> {}; // PointerType v8::Context *
struct _ast8164: StructOrClassRecordType<RecordType<_ast2>> {}; // RecordType v8::Context
struct _ast8165: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1518>, _ast63>, Pack<>>>, _ast8163> {}; // CXXMethodDecl DetachGlobal
struct _ast8166: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str62>, _ast8173>, Pack<_ast8167, _ast8168, _ast8169, _ast8170, _ast8171, _ast8172>>> {}; // CXXMethodDecl New
struct _ast8173: FunctionProtoType<_ast8176, Pack<_ast136, _ast8148, _ast8174, _ast8175, _ast7271, _ast6852>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _ast8177: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str901>, _ast8184>, Pack<_ast8178, _ast8179, _ast8180, _ast8181, _ast8182, _ast8183>>> {}; // CXXMethodDecl FromSnapshot
struct _ast8184: FunctionProtoType<_ast8186, Pack<_ast136, _ast3170, _ast7271, _ast8148, _ast8185, _ast6852>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _ast8187: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1525>, _ast8191>, Pack<_ast8188, _ast8189, _ast8190>>> {}; // CXXMethodDecl NewRemoteContext
struct _ast8191: FunctionProtoType<_ast8194, Pack<_ast136, _ast8192, _ast8193>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ast8195: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1526>, _ast8197>, Pack<_ast8196>>>, _ast8163> {}; // CXXMethodDecl SetSecurityToken
struct _ast8197: FunctionProtoType<_ast64, Pack<_ast8198>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Value>)
struct _ast8199: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1528>, _ast63>, Pack<>>>, _ast8163> {}; // CXXMethodDecl UseDefaultSecurityToken
struct _ast8200: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1529>, _ast8201>, Pack<>>>, _ast8163> {}; // CXXMethodDecl GetSecurityToken
struct _ast8201: FunctionProtoType<_ast8202, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> ()
struct _ast8203: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1314>, _ast63>, Pack<>>>, _ast8163> {}; // CXXMethodDecl Enter
struct _ast8204: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1315>, _ast63>, Pack<>>>, _ast8163> {}; // CXXMethodDecl Exit
struct _ast8205: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str129>, _ast4759>, Pack<>>>, _ast8163> {}; // CXXMethodDecl GetIsolate
struct _ast8208: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1532>, _ast3271>, Pack<>>>, _ast8163> {}; // CXXMethodDecl GetNumberOfEmbedderDataFields
struct _ast8209: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1533>, _ast8211>, Pack<_ast8210>>>, _ast8163> {}; // CXXMethodDecl GetEmbedderData
struct _ast8211: FunctionProtoType<_ast8212, Pack<_ast1849>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Value> (int)
struct _ast8213: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1534>, _ast8214>, Pack<>>>, _ast8163> {}; // CXXMethodDecl GetExtrasBindingObject
struct _ast8214: FunctionProtoType<_ast8215, Pack<>, UnqualifiedType> {}; // FunctionProtoType Local<v8::Object> ()
struct _ast8216: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1535>, _ast8219>, Pack<_ast8217, _ast8218>>>, _ast8163> {}; // CXXMethodDecl SetEmbedderData
struct _ast8219: FunctionProtoType<_ast64, Pack<_ast1849, _ast8220>, UnqualifiedType> {}; // FunctionProtoType void (int, Local<v8::Value>)
struct _ast8221: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1536>, _ast4635>, Pack<_ast8222>>>, _ast8163> {}; // CXXMethodDecl GetAlignedPointerFromEmbedderData
struct _ast8223: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1537>, _ast4653>, Pack<_ast8224, _ast8225>>>, _ast8163> {}; // CXXMethodDecl SetAlignedPointerInEmbedderData
struct _ast8226: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1538>, _ast3536>, Pack<_ast8227>>>, _ast8163> {}; // CXXMethodDecl AllowCodeGenerationFromStrings
struct _ast8228: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1539>, _ast3172>, Pack<>>>, _ast8163> {}; // CXXMethodDecl IsCodeGenerationFromStringsAllowed
struct _ast8229: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1540>, _ast8231>, Pack<_ast8230>>>, _ast8163> {}; // CXXMethodDecl SetErrorMessageForCodeGenerationFromStrings
struct _ast8231: FunctionProtoType<_ast64, Pack<_ast8232>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::String>)
struct _ast8235: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1322>, _ast8237>, Pack<_ast8236>>>, _ast8163> {}; // CXXMethodDecl GetDataFromSnapshotOnce
struct _ast8237: FunctionProtoType<_ast8238, Pack<_ast3170>, UnqualifiedType> {}; // FunctionProtoType MaybeLocal<T> (size_t)
struct _ast8239: TypedefNameDecl<TypeDecl<NamedDeclName<_str1541>, _ast8240>> {}; // TypedefDecl AbortScriptExecutionCallback
struct _ast8240: PointerType<_ast8241> {}; // PointerType void (*)(v8::Isolate *, Local<v8::Context>)
struct _ast8241: UnqualifiedType<_ast8242> {}; // ParenType void (v8::Isolate *, Local<v8::Context>)
struct _ast8242: FunctionProtoType<_ast64, Pack<_ast136, _ast8243>, UnqualifiedType> {}; // FunctionProtoType void (v8::Isolate *, Local<v8::Context>)
struct _ast8244: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1542>, _ast8246>, Pack<_ast8245>>>, _ast8163> {}; // CXXMethodDecl SetAbortScriptExecution
struct _ast8246: FunctionProtoType<_ast64, Pack<_ast8247>, UnqualifiedType> {}; // FunctionProtoType void (v8::Context::AbortScriptExecutionCallback)
struct _ast8247: TypedefType<_ast8239> {}; // TypedefType v8::Context::AbortScriptExecutionCallback
struct _ast8250: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1202>, _ast8252>, Pack<_ast8251>>>, _ast8254>> {}; // CXXConstructorDecl Scope
struct _ast8252: FunctionProtoType<_ast64, Pack<_ast8253>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Context>)
struct _ast8254: PointerType<_ast8255> {}; // PointerType v8::Context::Scope *
struct _ast8255: StructOrClassRecordType<RecordType<_ast8248>> {}; // RecordType v8::Context::Scope
struct _ast8256: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1203>, _ast165>, Pack<>>>, _ast8254>> {}; // CXXDestructorDecl ~Scope
struct _ast8259: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1543>, _ast8261>, Pack<_ast8260>>>, _ast8263>> {}; // CXXConstructorDecl BackupIncumbentScope
struct _ast8261: FunctionProtoType<_ast64, Pack<_ast8262>, UnqualifiedType> {}; // FunctionProtoType void (Local<v8::Context>)
struct _ast8263: PointerType<_ast8264> {}; // PointerType v8::Context::BackupIncumbentScope *
struct _ast8264: StructOrClassRecordType<RecordType<_ast8257>> {}; // RecordType v8::Context::BackupIncumbentScope
struct _ast8265: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1545>, _ast8266>, Pack<>>>, _ast8263>> {}; // CXXDestructorDecl ~BackupIncumbentScope
struct _ast8266: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast8267: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1513>, _ast8268>, Pack<>>>, _ast8269> {}; // CXXMethodDecl JSStackComparableAddress
struct _ast8268: FunctionProtoType<_ast7781, Pack<>, ConstQualifiedType> {}; // FunctionProtoType uintptr_t () const
struct _ast8269: PointerType<_ast8270> {}; // PointerType const v8::Context::BackupIncumbentScope *
struct _ast8270: ConstQualifiedType<_ast8264> {}; // RecordType const v8::Context::BackupIncumbentScope
struct _ast8273: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1546>, _ast2787>, Pack<_ast8274>>>, _ast8275>> {}; // CXXConstructorDecl Unlocker
struct _ast8275: PointerType<_ast8276> {}; // PointerType v8::Unlocker *
struct _ast8276: StructOrClassRecordType<RecordType<_ast8271>> {}; // RecordType v8::Unlocker
struct _ast8277: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1547>, _ast8278>, Pack<>>>, _ast8275>> {}; // CXXDestructorDecl ~Unlocker
struct _ast8278: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast8281: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1548>, _ast2787>, Pack<_ast8282>>>, _ast8283>> {}; // CXXConstructorDecl Locker
struct _ast8283: PointerType<_ast8284> {}; // PointerType v8::Locker *
struct _ast8284: StructOrClassRecordType<RecordType<_ast8279>> {}; // RecordType v8::Locker
struct _ast8285: DestructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1549>, _ast8286>, Pack<>>>, _ast8283>> {}; // CXXDestructorDecl ~Locker
struct _ast8286: FunctionProtoType<_ast64, Pack<>, UnqualifiedType> {}; // FunctionProtoType void ()
struct _ast8287: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1550>, _ast6914>, Pack<_ast8288>>> {}; // CXXMethodDecl IsLocked
struct _ast8289: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1551>, _ast3172>, Pack<>>> {}; // CXXMethodDecl IsActive
struct _ast8290: ConstructorDecl<InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1548>, _ast8292>, Pack<_ast8291>>>, _ast8283>> {}; // CXXConstructorDecl Locker
struct _ast8292: FunctionProtoType<_ast64, Pack<_ast8293>, UnqualifiedType> {}; // FunctionProtoType void (const v8::Locker &)
struct _ast8293: LValueReferenceType<ReferenceType<_ast8294>> {}; // LValueReferenceType const v8::Locker &
struct _ast8294: ConstQualifiedType<_ast8284> {}; // RecordType const v8::Locker
struct _ast8295: InstanceMethodDecl<MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str66>, _ast8292>, Pack<_ast8296>>>, _ast8283> {}; // CXXMethodDecl operator=
struct _ast8299: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1553>, _ast8303>, Pack<_ast8300, _ast8301, _ast8302>>> {}; // CXXMethodDecl TryUnwindV8Frames
struct _ast8303: FunctionProtoType<_ast79, Pack<_ast8304, _ast3422, _ast3552>, UnqualifiedType> {}; // FunctionProtoType bool (const v8::UnwindState &, v8::RegisterState *, const void *)
struct _ast8304: LValueReferenceType<ReferenceType<_ast8305>> {}; // LValueReferenceType const v8::UnwindState &
struct _ast8305: ConstQualifiedType<_ast7788> {}; // RecordType const v8::UnwindState
struct _ast8306: MethodDecl<FunctionDecl<TypeDecl<NamedDeclName<_str1557>, _ast8309>, Pack<_ast8307, _ast8308>>> {}; // CXXMethodDecl PCIsInV8
struct _ast8309: FunctionProtoType<_ast79, Pack<_ast8304, _ast2169>, UnqualifiedType> {}; // FunctionProtoType bool (const v8::UnwindState &, void *)

#include "emit.h"
int main() {
  emit<_ast62>(); // CXXConstructorDecl Local
  emit<_ast63>(); // FunctionProtoType void ()
  emit<_ast64>(); // BuiltinType void
  emit<_ast65>(); // PointerType v8::Local<v8::Primitive> *
  emit<_ast66>(); // RecordType v8::Local<v8::Primitive>
  emit<_ast69>(); // CXXConstructorDecl Local
  emit<_ast71>(); // FunctionProtoType void (Local<S>)
  emit<_ast73>(); // CXXConstructorDecl Local
  emit<_ast75>(); // FunctionProtoType void (Local<v8::Primitive>)
  emit<_ast77>(); // CXXMethodDecl IsEmpty
  emit<_ast78>(); // FunctionProtoType bool () const
  emit<_ast79>(); // BuiltinType bool
  emit<_ast80>(); // PointerType const v8::Local<v8::Primitive> *
  emit<_ast81>(); // RecordType const v8::Local<v8::Primitive>
  emit<_ast82>(); // CXXMethodDecl Clear
  emit<_ast83>(); // CXXMethodDecl operator->
  emit<_ast84>(); // FunctionProtoType v8::Primitive *() const
  emit<_ast85>(); // PointerType v8::Primitive *
  emit<_ast87>(); // CXXMethodDecl operator*
  emit<_ast90>(); // CXXMethodDecl operator==
  emit<_ast92>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast93>(); // LValueReferenceType const Local<S> &
  emit<_ast94>(); // TemplateSpecializationType const Local<S>
  emit<_ast98>(); // CXXMethodDecl operator==
  emit<_ast100>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast101>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast102>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast106>(); // CXXMethodDecl operator!=
  emit<_ast108>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast109>(); // LValueReferenceType const Local<S> &
  emit<_ast110>(); // TemplateSpecializationType const Local<S>
  emit<_ast114>(); // CXXMethodDecl operator!=
  emit<_ast116>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast117>(); // LValueReferenceType const Persistent<S> &
  emit<_ast118>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast122>(); // CXXMethodDecl Cast
  emit<_ast124>(); // FunctionProtoType Local<v8::Primitive> (Local<S>)
  emit<_ast129>(); // CXXMethodDecl As
  emit<_ast130>(); // FunctionProtoType Local<S> () const
  emit<_ast132>(); // CXXMethodDecl New
  emit<_ast135>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
  emit<_ast136>(); // PointerType v8::Isolate *
  emit<_ast137>(); // RecordType v8::Isolate
  emit<_ast140>(); // CXXMethodDecl New
  emit<_ast143>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
  emit<_ast144>(); // LValueReferenceType const PersistentBase<v8::Primitive> &
  emit<_ast145>(); // TemplateSpecializationType const PersistentBase<v8::Primitive>
  emit<_ast148>(); // CXXMethodDecl New
  emit<_ast151>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
  emit<_ast152>(); // LValueReferenceType const TracedGlobal<v8::Primitive> &
  emit<_ast153>(); // TemplateSpecializationType const TracedGlobal<v8::Primitive>
  emit<_ast156>(); // CXXConstructorDecl Local
  emit<_ast158>(); // FunctionProtoType void (const v8::Local<v8::Primitive> &)
  emit<_ast159>(); // LValueReferenceType const v8::Local<v8::Primitive> &
  emit<_ast160>(); // CXXConstructorDecl Local
  emit<_ast162>(); // FunctionProtoType void (v8::Local<v8::Primitive> &&) noexcept
  emit<_ast163>(); // RValueReferenceType v8::Local<v8::Primitive> &&
  emit<_ast164>(); // CXXDestructorDecl ~Local
  emit<_ast165>(); // FunctionProtoType void () noexcept
  emit<_ast167>(); // CXXConstructorDecl Local
  emit<_ast168>(); // PointerType v8::Local<v8::Boolean> *
  emit<_ast169>(); // RecordType v8::Local<v8::Boolean>
  emit<_ast172>(); // CXXConstructorDecl Local
  emit<_ast174>(); // FunctionProtoType void (Local<S>)
  emit<_ast176>(); // CXXConstructorDecl Local
  emit<_ast178>(); // FunctionProtoType void (Local<v8::Boolean>)
  emit<_ast180>(); // CXXMethodDecl IsEmpty
  emit<_ast181>(); // PointerType const v8::Local<v8::Boolean> *
  emit<_ast182>(); // RecordType const v8::Local<v8::Boolean>
  emit<_ast183>(); // CXXMethodDecl Clear
  emit<_ast184>(); // CXXMethodDecl operator->
  emit<_ast185>(); // FunctionProtoType v8::Boolean *() const
  emit<_ast186>(); // PointerType v8::Boolean *
  emit<_ast188>(); // CXXMethodDecl operator*
  emit<_ast191>(); // CXXMethodDecl operator==
  emit<_ast193>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast194>(); // LValueReferenceType const Local<S> &
  emit<_ast195>(); // TemplateSpecializationType const Local<S>
  emit<_ast199>(); // CXXMethodDecl operator==
  emit<_ast201>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast202>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast203>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast207>(); // CXXMethodDecl operator!=
  emit<_ast209>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast210>(); // LValueReferenceType const Local<S> &
  emit<_ast211>(); // TemplateSpecializationType const Local<S>
  emit<_ast215>(); // CXXMethodDecl operator!=
  emit<_ast217>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast218>(); // LValueReferenceType const Persistent<S> &
  emit<_ast219>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast223>(); // CXXMethodDecl Cast
  emit<_ast225>(); // FunctionProtoType Local<v8::Boolean> (Local<S>)
  emit<_ast230>(); // CXXMethodDecl As
  emit<_ast231>(); // FunctionProtoType Local<S> () const
  emit<_ast233>(); // CXXMethodDecl New
  emit<_ast236>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
  emit<_ast239>(); // CXXMethodDecl New
  emit<_ast242>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
  emit<_ast243>(); // LValueReferenceType const PersistentBase<v8::Boolean> &
  emit<_ast244>(); // TemplateSpecializationType const PersistentBase<v8::Boolean>
  emit<_ast247>(); // CXXMethodDecl New
  emit<_ast250>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
  emit<_ast251>(); // LValueReferenceType const TracedGlobal<v8::Boolean> &
  emit<_ast252>(); // TemplateSpecializationType const TracedGlobal<v8::Boolean>
  emit<_ast255>(); // CXXConstructorDecl Local
  emit<_ast257>(); // FunctionProtoType void (const v8::Local<v8::Boolean> &)
  emit<_ast258>(); // LValueReferenceType const v8::Local<v8::Boolean> &
  emit<_ast259>(); // CXXConstructorDecl Local
  emit<_ast261>(); // FunctionProtoType void (v8::Local<v8::Boolean> &&) noexcept
  emit<_ast262>(); // RValueReferenceType v8::Local<v8::Boolean> &&
  emit<_ast263>(); // CXXDestructorDecl ~Local
  emit<_ast265>(); // CXXConstructorDecl Local
  emit<_ast266>(); // PointerType v8::Local<v8::Value> *
  emit<_ast267>(); // RecordType v8::Local<v8::Value>
  emit<_ast270>(); // CXXConstructorDecl Local
  emit<_ast272>(); // FunctionProtoType void (Local<S>)
  emit<_ast274>(); // CXXConstructorDecl Local
  emit<_ast276>(); // FunctionProtoType void (Local<v8::Value>)
  emit<_ast278>(); // CXXMethodDecl IsEmpty
  emit<_ast279>(); // PointerType const v8::Local<v8::Value> *
  emit<_ast280>(); // RecordType const v8::Local<v8::Value>
  emit<_ast281>(); // CXXMethodDecl Clear
  emit<_ast282>(); // CXXMethodDecl operator->
  emit<_ast283>(); // FunctionProtoType v8::Value *() const
  emit<_ast284>(); // PointerType v8::Value *
  emit<_ast286>(); // CXXMethodDecl operator*
  emit<_ast289>(); // CXXMethodDecl operator==
  emit<_ast291>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast292>(); // LValueReferenceType const Local<S> &
  emit<_ast293>(); // TemplateSpecializationType const Local<S>
  emit<_ast297>(); // CXXMethodDecl operator==
  emit<_ast299>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast300>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast301>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast305>(); // CXXMethodDecl operator!=
  emit<_ast307>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast308>(); // LValueReferenceType const Local<S> &
  emit<_ast309>(); // TemplateSpecializationType const Local<S>
  emit<_ast313>(); // CXXMethodDecl operator!=
  emit<_ast315>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast316>(); // LValueReferenceType const Persistent<S> &
  emit<_ast317>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast321>(); // CXXMethodDecl Cast
  emit<_ast323>(); // FunctionProtoType Local<v8::Value> (Local<S>)
  emit<_ast328>(); // CXXMethodDecl As
  emit<_ast329>(); // FunctionProtoType Local<S> () const
  emit<_ast331>(); // CXXMethodDecl New
  emit<_ast334>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
  emit<_ast337>(); // CXXMethodDecl New
  emit<_ast340>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
  emit<_ast341>(); // LValueReferenceType const PersistentBase<v8::Value> &
  emit<_ast342>(); // TemplateSpecializationType const PersistentBase<v8::Value>
  emit<_ast345>(); // CXXMethodDecl New
  emit<_ast348>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
  emit<_ast349>(); // LValueReferenceType const TracedGlobal<v8::Value> &
  emit<_ast350>(); // TemplateSpecializationType const TracedGlobal<v8::Value>
  emit<_ast353>(); // CXXConstructorDecl Local
  emit<_ast355>(); // FunctionProtoType void (const v8::Local<v8::Value> &) noexcept
  emit<_ast356>(); // LValueReferenceType const v8::Local<v8::Value> &
  emit<_ast357>(); // CXXConstructorDecl Local
  emit<_ast359>(); // FunctionProtoType void (v8::Local<v8::Value> &&) noexcept
  emit<_ast360>(); // RValueReferenceType v8::Local<v8::Value> &&
  emit<_ast361>(); // CXXDestructorDecl ~Local
  emit<_ast362>(); // CXXMethodDecl operator=
  emit<_ast364>(); // FunctionProtoType v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
  emit<_ast365>(); // LValueReferenceType v8::Local<v8::Value> &
  emit<_ast366>(); // CXXMethodDecl operator=
  emit<_ast368>(); // FunctionProtoType v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
  emit<_ast370>(); // CXXConstructorDecl Local
  emit<_ast371>(); // PointerType v8::Local<v8::PrimitiveArray> *
  emit<_ast372>(); // RecordType v8::Local<v8::PrimitiveArray>
  emit<_ast375>(); // CXXConstructorDecl Local
  emit<_ast377>(); // FunctionProtoType void (Local<S>)
  emit<_ast379>(); // CXXConstructorDecl Local
  emit<_ast381>(); // FunctionProtoType void (Local<v8::PrimitiveArray>)
  emit<_ast383>(); // CXXMethodDecl IsEmpty
  emit<_ast384>(); // PointerType const v8::Local<v8::PrimitiveArray> *
  emit<_ast385>(); // RecordType const v8::Local<v8::PrimitiveArray>
  emit<_ast386>(); // CXXMethodDecl Clear
  emit<_ast387>(); // CXXMethodDecl operator->
  emit<_ast388>(); // FunctionProtoType v8::PrimitiveArray *() const
  emit<_ast389>(); // PointerType v8::PrimitiveArray *
  emit<_ast391>(); // CXXMethodDecl operator*
  emit<_ast394>(); // CXXMethodDecl operator==
  emit<_ast396>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast397>(); // LValueReferenceType const Local<S> &
  emit<_ast398>(); // TemplateSpecializationType const Local<S>
  emit<_ast402>(); // CXXMethodDecl operator==
  emit<_ast404>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast405>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast406>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast410>(); // CXXMethodDecl operator!=
  emit<_ast412>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast413>(); // LValueReferenceType const Local<S> &
  emit<_ast414>(); // TemplateSpecializationType const Local<S>
  emit<_ast418>(); // CXXMethodDecl operator!=
  emit<_ast420>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast421>(); // LValueReferenceType const Persistent<S> &
  emit<_ast422>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast426>(); // CXXMethodDecl Cast
  emit<_ast428>(); // FunctionProtoType Local<v8::PrimitiveArray> (Local<S>)
  emit<_ast433>(); // CXXMethodDecl As
  emit<_ast434>(); // FunctionProtoType Local<S> () const
  emit<_ast436>(); // CXXMethodDecl New
  emit<_ast439>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
  emit<_ast442>(); // CXXMethodDecl New
  emit<_ast445>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
  emit<_ast446>(); // LValueReferenceType const PersistentBase<v8::PrimitiveArray> &
  emit<_ast447>(); // TemplateSpecializationType const PersistentBase<v8::PrimitiveArray>
  emit<_ast450>(); // CXXMethodDecl New
  emit<_ast453>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
  emit<_ast454>(); // LValueReferenceType const TracedGlobal<v8::PrimitiveArray> &
  emit<_ast455>(); // TemplateSpecializationType const TracedGlobal<v8::PrimitiveArray>
  emit<_ast458>(); // CXXConstructorDecl Local
  emit<_ast460>(); // FunctionProtoType void (const v8::Local<v8::PrimitiveArray> &) noexcept
  emit<_ast461>(); // LValueReferenceType const v8::Local<v8::PrimitiveArray> &
  emit<_ast462>(); // CXXConstructorDecl Local
  emit<_ast464>(); // FunctionProtoType void (v8::Local<v8::PrimitiveArray> &&) noexcept
  emit<_ast465>(); // RValueReferenceType v8::Local<v8::PrimitiveArray> &&
  emit<_ast466>(); // CXXDestructorDecl ~Local
  emit<_ast467>(); // CXXMethodDecl operator=
  emit<_ast469>(); // FunctionProtoType v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
  emit<_ast470>(); // LValueReferenceType v8::Local<v8::PrimitiveArray> &
  emit<_ast471>(); // CXXMethodDecl operator=
  emit<_ast473>(); // FunctionProtoType v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
  emit<_ast475>(); // CXXConstructorDecl Local
  emit<_ast476>(); // PointerType v8::Local<v8::Integer> *
  emit<_ast477>(); // RecordType v8::Local<v8::Integer>
  emit<_ast480>(); // CXXConstructorDecl Local
  emit<_ast482>(); // FunctionProtoType void (Local<S>)
  emit<_ast484>(); // CXXConstructorDecl Local
  emit<_ast486>(); // FunctionProtoType void (Local<v8::Integer>)
  emit<_ast488>(); // CXXMethodDecl IsEmpty
  emit<_ast489>(); // PointerType const v8::Local<v8::Integer> *
  emit<_ast490>(); // RecordType const v8::Local<v8::Integer>
  emit<_ast491>(); // CXXMethodDecl Clear
  emit<_ast492>(); // CXXMethodDecl operator->
  emit<_ast493>(); // FunctionProtoType v8::Integer *() const
  emit<_ast494>(); // PointerType v8::Integer *
  emit<_ast496>(); // CXXMethodDecl operator*
  emit<_ast499>(); // CXXMethodDecl operator==
  emit<_ast501>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast502>(); // LValueReferenceType const Local<S> &
  emit<_ast503>(); // TemplateSpecializationType const Local<S>
  emit<_ast507>(); // CXXMethodDecl operator==
  emit<_ast509>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast510>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast511>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast515>(); // CXXMethodDecl operator!=
  emit<_ast517>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast518>(); // LValueReferenceType const Local<S> &
  emit<_ast519>(); // TemplateSpecializationType const Local<S>
  emit<_ast523>(); // CXXMethodDecl operator!=
  emit<_ast525>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast526>(); // LValueReferenceType const Persistent<S> &
  emit<_ast527>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast531>(); // CXXMethodDecl Cast
  emit<_ast533>(); // FunctionProtoType Local<v8::Integer> (Local<S>)
  emit<_ast538>(); // CXXMethodDecl As
  emit<_ast539>(); // FunctionProtoType Local<S> () const
  emit<_ast541>(); // CXXMethodDecl New
  emit<_ast544>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
  emit<_ast547>(); // CXXMethodDecl New
  emit<_ast550>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
  emit<_ast551>(); // LValueReferenceType const PersistentBase<v8::Integer> &
  emit<_ast552>(); // TemplateSpecializationType const PersistentBase<v8::Integer>
  emit<_ast555>(); // CXXMethodDecl New
  emit<_ast558>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
  emit<_ast559>(); // LValueReferenceType const TracedGlobal<v8::Integer> &
  emit<_ast560>(); // TemplateSpecializationType const TracedGlobal<v8::Integer>
  emit<_ast563>(); // CXXConstructorDecl Local
  emit<_ast565>(); // FunctionProtoType void (const v8::Local<v8::Integer> &) noexcept
  emit<_ast566>(); // LValueReferenceType const v8::Local<v8::Integer> &
  emit<_ast567>(); // CXXConstructorDecl Local
  emit<_ast569>(); // FunctionProtoType void (v8::Local<v8::Integer> &&) noexcept
  emit<_ast570>(); // RValueReferenceType v8::Local<v8::Integer> &&
  emit<_ast571>(); // CXXDestructorDecl ~Local
  emit<_ast572>(); // CXXMethodDecl operator=
  emit<_ast574>(); // FunctionProtoType v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
  emit<_ast575>(); // LValueReferenceType v8::Local<v8::Integer> &
  emit<_ast576>(); // CXXMethodDecl operator=
  emit<_ast578>(); // FunctionProtoType v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
  emit<_ast581>(); // CXXConstructorDecl Local
  emit<_ast582>(); // PointerType v8::Local<v8::String> *
  emit<_ast583>(); // RecordType v8::Local<v8::String>
  emit<_ast586>(); // CXXConstructorDecl Local
  emit<_ast588>(); // FunctionProtoType void (Local<S>)
  emit<_ast590>(); // CXXConstructorDecl Local
  emit<_ast592>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast594>(); // CXXMethodDecl IsEmpty
  emit<_ast595>(); // PointerType const v8::Local<v8::String> *
  emit<_ast596>(); // RecordType const v8::Local<v8::String>
  emit<_ast597>(); // CXXMethodDecl Clear
  emit<_ast598>(); // CXXMethodDecl operator->
  emit<_ast599>(); // FunctionProtoType v8::String *() const
  emit<_ast600>(); // PointerType v8::String *
  emit<_ast602>(); // CXXMethodDecl operator*
  emit<_ast605>(); // CXXMethodDecl operator==
  emit<_ast607>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast608>(); // LValueReferenceType const Local<S> &
  emit<_ast609>(); // TemplateSpecializationType const Local<S>
  emit<_ast613>(); // CXXMethodDecl operator==
  emit<_ast615>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast616>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast617>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast621>(); // CXXMethodDecl operator!=
  emit<_ast623>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast624>(); // LValueReferenceType const Local<S> &
  emit<_ast625>(); // TemplateSpecializationType const Local<S>
  emit<_ast629>(); // CXXMethodDecl operator!=
  emit<_ast631>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast632>(); // LValueReferenceType const Persistent<S> &
  emit<_ast633>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast637>(); // CXXMethodDecl Cast
  emit<_ast639>(); // FunctionProtoType Local<v8::String> (Local<S>)
  emit<_ast644>(); // CXXMethodDecl As
  emit<_ast645>(); // FunctionProtoType Local<S> () const
  emit<_ast647>(); // CXXMethodDecl New
  emit<_ast650>(); // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>)
  emit<_ast653>(); // CXXMethodDecl New
  emit<_ast656>(); // FunctionProtoType Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
  emit<_ast657>(); // LValueReferenceType const PersistentBase<v8::String> &
  emit<_ast658>(); // TemplateSpecializationType const PersistentBase<v8::String>
  emit<_ast661>(); // CXXMethodDecl New
  emit<_ast664>(); // FunctionProtoType Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
  emit<_ast665>(); // LValueReferenceType const TracedGlobal<v8::String> &
  emit<_ast666>(); // TemplateSpecializationType const TracedGlobal<v8::String>
  emit<_ast669>(); // CXXConstructorDecl Local
  emit<_ast671>(); // FunctionProtoType void (const v8::Local<v8::String> &) noexcept
  emit<_ast672>(); // LValueReferenceType const v8::Local<v8::String> &
  emit<_ast673>(); // CXXConstructorDecl Local
  emit<_ast675>(); // FunctionProtoType void (v8::Local<v8::String> &&) noexcept
  emit<_ast676>(); // RValueReferenceType v8::Local<v8::String> &&
  emit<_ast677>(); // CXXMethodDecl operator=
  emit<_ast679>(); // FunctionProtoType v8::Local<v8::String> &(const v8::Local<v8::String> &)
  emit<_ast680>(); // LValueReferenceType v8::Local<v8::String> &
  emit<_ast681>(); // CXXMethodDecl operator=
  emit<_ast683>(); // FunctionProtoType v8::Local<v8::String> &(v8::Local<v8::String> &&)
  emit<_ast684>(); // CXXDestructorDecl ~Local
  emit<_ast686>(); // CXXConstructorDecl Local
  emit<_ast687>(); // PointerType v8::Local<v8::Context> *
  emit<_ast688>(); // RecordType v8::Local<v8::Context>
  emit<_ast691>(); // CXXConstructorDecl Local
  emit<_ast693>(); // FunctionProtoType void (Local<S>)
  emit<_ast695>(); // CXXConstructorDecl Local
  emit<_ast697>(); // FunctionProtoType void (Local<v8::Context>)
  emit<_ast699>(); // CXXMethodDecl IsEmpty
  emit<_ast700>(); // PointerType const v8::Local<v8::Context> *
  emit<_ast701>(); // RecordType const v8::Local<v8::Context>
  emit<_ast702>(); // CXXMethodDecl Clear
  emit<_ast703>(); // CXXMethodDecl operator->
  emit<_ast704>(); // FunctionProtoType v8::Context *() const
  emit<_ast705>(); // PointerType v8::Context *
  emit<_ast707>(); // CXXMethodDecl operator*
  emit<_ast710>(); // CXXMethodDecl operator==
  emit<_ast712>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast713>(); // LValueReferenceType const Local<S> &
  emit<_ast714>(); // TemplateSpecializationType const Local<S>
  emit<_ast718>(); // CXXMethodDecl operator==
  emit<_ast720>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast721>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast722>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast726>(); // CXXMethodDecl operator!=
  emit<_ast728>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast729>(); // LValueReferenceType const Local<S> &
  emit<_ast730>(); // TemplateSpecializationType const Local<S>
  emit<_ast734>(); // CXXMethodDecl operator!=
  emit<_ast736>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast737>(); // LValueReferenceType const Persistent<S> &
  emit<_ast738>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast742>(); // CXXMethodDecl Cast
  emit<_ast744>(); // FunctionProtoType Local<v8::Context> (Local<S>)
  emit<_ast749>(); // CXXMethodDecl As
  emit<_ast750>(); // FunctionProtoType Local<S> () const
  emit<_ast752>(); // CXXMethodDecl New
  emit<_ast755>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
  emit<_ast758>(); // CXXMethodDecl New
  emit<_ast761>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
  emit<_ast762>(); // LValueReferenceType const PersistentBase<v8::Context> &
  emit<_ast763>(); // TemplateSpecializationType const PersistentBase<v8::Context>
  emit<_ast766>(); // CXXMethodDecl New
  emit<_ast769>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
  emit<_ast770>(); // LValueReferenceType const TracedGlobal<v8::Context> &
  emit<_ast771>(); // TemplateSpecializationType const TracedGlobal<v8::Context>
  emit<_ast774>(); // CXXDestructorDecl ~Local
  emit<_ast775>(); // CXXConstructorDecl Local
  emit<_ast777>(); // FunctionProtoType void (const v8::Local<v8::Context> &) noexcept
  emit<_ast778>(); // LValueReferenceType const v8::Local<v8::Context> &
  emit<_ast779>(); // CXXConstructorDecl Local
  emit<_ast781>(); // FunctionProtoType void (v8::Local<v8::Context> &&) noexcept
  emit<_ast782>(); // RValueReferenceType v8::Local<v8::Context> &&
  emit<_ast786>(); // CXXConstructorDecl Local
  emit<_ast787>(); // PointerType v8::Local<v8::UnboundScript> *
  emit<_ast788>(); // RecordType v8::Local<v8::UnboundScript>
  emit<_ast791>(); // CXXConstructorDecl Local
  emit<_ast793>(); // FunctionProtoType void (Local<S>)
  emit<_ast795>(); // CXXMethodDecl IsEmpty
  emit<_ast796>(); // PointerType const v8::Local<v8::UnboundScript> *
  emit<_ast797>(); // RecordType const v8::Local<v8::UnboundScript>
  emit<_ast798>(); // CXXMethodDecl Clear
  emit<_ast799>(); // CXXMethodDecl operator->
  emit<_ast800>(); // FunctionProtoType v8::UnboundScript *() const
  emit<_ast801>(); // PointerType v8::UnboundScript *
  emit<_ast803>(); // CXXMethodDecl operator*
  emit<_ast806>(); // CXXMethodDecl operator==
  emit<_ast808>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast809>(); // LValueReferenceType const Local<S> &
  emit<_ast810>(); // TemplateSpecializationType const Local<S>
  emit<_ast814>(); // CXXMethodDecl operator==
  emit<_ast816>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast817>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast818>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast822>(); // CXXMethodDecl operator!=
  emit<_ast824>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast825>(); // LValueReferenceType const Local<S> &
  emit<_ast826>(); // TemplateSpecializationType const Local<S>
  emit<_ast830>(); // CXXMethodDecl operator!=
  emit<_ast832>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast833>(); // LValueReferenceType const Persistent<S> &
  emit<_ast834>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast838>(); // CXXMethodDecl Cast
  emit<_ast840>(); // FunctionProtoType Local<v8::UnboundScript> (Local<S>)
  emit<_ast845>(); // CXXMethodDecl As
  emit<_ast846>(); // FunctionProtoType Local<S> () const
  emit<_ast848>(); // CXXMethodDecl New
  emit<_ast851>(); // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
  emit<_ast854>(); // CXXMethodDecl New
  emit<_ast857>(); // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
  emit<_ast858>(); // LValueReferenceType const PersistentBase<v8::UnboundScript> &
  emit<_ast859>(); // TemplateSpecializationType const PersistentBase<v8::UnboundScript>
  emit<_ast862>(); // CXXMethodDecl New
  emit<_ast865>(); // FunctionProtoType Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
  emit<_ast866>(); // LValueReferenceType const TracedGlobal<v8::UnboundScript> &
  emit<_ast867>(); // TemplateSpecializationType const TracedGlobal<v8::UnboundScript>
  emit<_ast872>(); // CXXConstructorDecl Local
  emit<_ast873>(); // PointerType v8::Local<v8::Function> *
  emit<_ast874>(); // RecordType v8::Local<v8::Function>
  emit<_ast877>(); // CXXConstructorDecl Local
  emit<_ast879>(); // FunctionProtoType void (Local<S>)
  emit<_ast881>(); // CXXConstructorDecl Local
  emit<_ast883>(); // FunctionProtoType void (Local<v8::Function>)
  emit<_ast885>(); // CXXMethodDecl IsEmpty
  emit<_ast886>(); // PointerType const v8::Local<v8::Function> *
  emit<_ast887>(); // RecordType const v8::Local<v8::Function>
  emit<_ast888>(); // CXXMethodDecl Clear
  emit<_ast889>(); // CXXMethodDecl operator->
  emit<_ast890>(); // FunctionProtoType v8::Function *() const
  emit<_ast891>(); // PointerType v8::Function *
  emit<_ast893>(); // CXXMethodDecl operator*
  emit<_ast896>(); // CXXMethodDecl operator==
  emit<_ast898>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast899>(); // LValueReferenceType const Local<S> &
  emit<_ast900>(); // TemplateSpecializationType const Local<S>
  emit<_ast904>(); // CXXMethodDecl operator==
  emit<_ast906>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast907>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast908>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast912>(); // CXXMethodDecl operator!=
  emit<_ast914>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast915>(); // LValueReferenceType const Local<S> &
  emit<_ast916>(); // TemplateSpecializationType const Local<S>
  emit<_ast920>(); // CXXMethodDecl operator!=
  emit<_ast922>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast923>(); // LValueReferenceType const Persistent<S> &
  emit<_ast924>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast928>(); // CXXMethodDecl Cast
  emit<_ast930>(); // FunctionProtoType Local<v8::Function> (Local<S>)
  emit<_ast935>(); // CXXMethodDecl As
  emit<_ast936>(); // FunctionProtoType Local<S> () const
  emit<_ast938>(); // CXXMethodDecl New
  emit<_ast941>(); // FunctionProtoType Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
  emit<_ast944>(); // CXXMethodDecl New
  emit<_ast947>(); // FunctionProtoType Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
  emit<_ast948>(); // LValueReferenceType const PersistentBase<v8::Function> &
  emit<_ast949>(); // TemplateSpecializationType const PersistentBase<v8::Function>
  emit<_ast952>(); // CXXMethodDecl New
  emit<_ast955>(); // FunctionProtoType Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
  emit<_ast956>(); // LValueReferenceType const TracedGlobal<v8::Function> &
  emit<_ast957>(); // TemplateSpecializationType const TracedGlobal<v8::Function>
  emit<_ast960>(); // CXXConstructorDecl Local
  emit<_ast962>(); // FunctionProtoType void (const v8::Local<v8::Function> &)
  emit<_ast963>(); // LValueReferenceType const v8::Local<v8::Function> &
  emit<_ast964>(); // CXXConstructorDecl Local
  emit<_ast966>(); // FunctionProtoType void (v8::Local<v8::Function> &&) noexcept
  emit<_ast967>(); // RValueReferenceType v8::Local<v8::Function> &&
  emit<_ast968>(); // CXXDestructorDecl ~Local
  emit<_ast979>(); // CXXConstructorDecl Local
  emit<_ast980>(); // PointerType v8::Local<v8::Name> *
  emit<_ast981>(); // RecordType v8::Local<v8::Name>
  emit<_ast984>(); // CXXConstructorDecl Local
  emit<_ast986>(); // FunctionProtoType void (Local<S>)
  emit<_ast988>(); // CXXConstructorDecl Local
  emit<_ast990>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast992>(); // CXXConstructorDecl Local
  emit<_ast994>(); // FunctionProtoType void (Local<v8::Name>)
  emit<_ast996>(); // CXXMethodDecl IsEmpty
  emit<_ast997>(); // PointerType const v8::Local<v8::Name> *
  emit<_ast998>(); // RecordType const v8::Local<v8::Name>
  emit<_ast999>(); // CXXMethodDecl Clear
  emit<_ast1000>(); // CXXMethodDecl operator->
  emit<_ast1001>(); // FunctionProtoType v8::Name *() const
  emit<_ast1002>(); // PointerType v8::Name *
  emit<_ast1004>(); // CXXMethodDecl operator*
  emit<_ast1007>(); // CXXMethodDecl operator==
  emit<_ast1009>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1010>(); // LValueReferenceType const Local<S> &
  emit<_ast1011>(); // TemplateSpecializationType const Local<S>
  emit<_ast1015>(); // CXXMethodDecl operator==
  emit<_ast1017>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1018>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1019>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1023>(); // CXXMethodDecl operator!=
  emit<_ast1025>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1026>(); // LValueReferenceType const Local<S> &
  emit<_ast1027>(); // TemplateSpecializationType const Local<S>
  emit<_ast1031>(); // CXXMethodDecl operator!=
  emit<_ast1033>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1034>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1035>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1039>(); // CXXMethodDecl Cast
  emit<_ast1041>(); // FunctionProtoType Local<v8::Name> (Local<S>)
  emit<_ast1046>(); // CXXMethodDecl As
  emit<_ast1047>(); // FunctionProtoType Local<S> () const
  emit<_ast1049>(); // CXXMethodDecl New
  emit<_ast1052>(); // FunctionProtoType Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
  emit<_ast1055>(); // CXXMethodDecl New
  emit<_ast1058>(); // FunctionProtoType Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
  emit<_ast1059>(); // LValueReferenceType const PersistentBase<v8::Name> &
  emit<_ast1060>(); // TemplateSpecializationType const PersistentBase<v8::Name>
  emit<_ast1063>(); // CXXMethodDecl New
  emit<_ast1066>(); // FunctionProtoType Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
  emit<_ast1067>(); // LValueReferenceType const TracedGlobal<v8::Name> &
  emit<_ast1068>(); // TemplateSpecializationType const TracedGlobal<v8::Name>
  emit<_ast1071>(); // CXXConstructorDecl Local
  emit<_ast1073>(); // FunctionProtoType void (const v8::Local<v8::Name> &)
  emit<_ast1074>(); // LValueReferenceType const v8::Local<v8::Name> &
  emit<_ast1075>(); // CXXConstructorDecl Local
  emit<_ast1077>(); // FunctionProtoType void (v8::Local<v8::Name> &&) noexcept
  emit<_ast1078>(); // RValueReferenceType v8::Local<v8::Name> &&
  emit<_ast1079>(); // CXXDestructorDecl ~Local
  emit<_ast1081>(); // CXXConstructorDecl Local
  emit<_ast1082>(); // PointerType v8::Local<v8::FunctionTemplate> *
  emit<_ast1083>(); // RecordType v8::Local<v8::FunctionTemplate>
  emit<_ast1086>(); // CXXConstructorDecl Local
  emit<_ast1088>(); // FunctionProtoType void (Local<S>)
  emit<_ast1090>(); // CXXConstructorDecl Local
  emit<_ast1092>(); // FunctionProtoType void (Local<v8::FunctionTemplate>)
  emit<_ast1094>(); // CXXMethodDecl IsEmpty
  emit<_ast1095>(); // PointerType const v8::Local<v8::FunctionTemplate> *
  emit<_ast1096>(); // RecordType const v8::Local<v8::FunctionTemplate>
  emit<_ast1097>(); // CXXMethodDecl Clear
  emit<_ast1098>(); // CXXMethodDecl operator->
  emit<_ast1099>(); // FunctionProtoType v8::FunctionTemplate *() const
  emit<_ast1100>(); // PointerType v8::FunctionTemplate *
  emit<_ast1102>(); // CXXMethodDecl operator*
  emit<_ast1105>(); // CXXMethodDecl operator==
  emit<_ast1107>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1108>(); // LValueReferenceType const Local<S> &
  emit<_ast1109>(); // TemplateSpecializationType const Local<S>
  emit<_ast1113>(); // CXXMethodDecl operator==
  emit<_ast1115>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1116>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1117>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1121>(); // CXXMethodDecl operator!=
  emit<_ast1123>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1124>(); // LValueReferenceType const Local<S> &
  emit<_ast1125>(); // TemplateSpecializationType const Local<S>
  emit<_ast1129>(); // CXXMethodDecl operator!=
  emit<_ast1131>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1132>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1133>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1137>(); // CXXMethodDecl Cast
  emit<_ast1139>(); // FunctionProtoType Local<v8::FunctionTemplate> (Local<S>)
  emit<_ast1144>(); // CXXMethodDecl As
  emit<_ast1145>(); // FunctionProtoType Local<S> () const
  emit<_ast1147>(); // CXXMethodDecl New
  emit<_ast1150>(); // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
  emit<_ast1153>(); // CXXMethodDecl New
  emit<_ast1156>(); // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
  emit<_ast1157>(); // LValueReferenceType const PersistentBase<v8::FunctionTemplate> &
  emit<_ast1158>(); // TemplateSpecializationType const PersistentBase<v8::FunctionTemplate>
  emit<_ast1161>(); // CXXMethodDecl New
  emit<_ast1164>(); // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
  emit<_ast1165>(); // LValueReferenceType const TracedGlobal<v8::FunctionTemplate> &
  emit<_ast1166>(); // TemplateSpecializationType const TracedGlobal<v8::FunctionTemplate>
  emit<_ast1169>(); // CXXConstructorDecl Local
  emit<_ast1171>(); // FunctionProtoType void (const v8::Local<v8::FunctionTemplate> &)
  emit<_ast1172>(); // LValueReferenceType const v8::Local<v8::FunctionTemplate> &
  emit<_ast1173>(); // CXXConstructorDecl Local
  emit<_ast1175>(); // FunctionProtoType void (v8::Local<v8::FunctionTemplate> &&) noexcept
  emit<_ast1176>(); // RValueReferenceType v8::Local<v8::FunctionTemplate> &&
  emit<_ast1177>(); // CXXDestructorDecl ~Local
  emit<_ast1182>(); // CXXConstructorDecl Local
  emit<_ast1183>(); // PointerType v8::Local<v8::Promise> *
  emit<_ast1184>(); // RecordType v8::Local<v8::Promise>
  emit<_ast1187>(); // CXXConstructorDecl Local
  emit<_ast1189>(); // FunctionProtoType void (Local<S>)
  emit<_ast1191>(); // CXXConstructorDecl Local
  emit<_ast1193>(); // FunctionProtoType void (Local<v8::Promise>)
  emit<_ast1195>(); // CXXMethodDecl IsEmpty
  emit<_ast1196>(); // PointerType const v8::Local<v8::Promise> *
  emit<_ast1197>(); // RecordType const v8::Local<v8::Promise>
  emit<_ast1198>(); // CXXMethodDecl Clear
  emit<_ast1199>(); // CXXMethodDecl operator->
  emit<_ast1200>(); // FunctionProtoType v8::Promise *() const
  emit<_ast1201>(); // PointerType v8::Promise *
  emit<_ast1203>(); // CXXMethodDecl operator*
  emit<_ast1206>(); // CXXMethodDecl operator==
  emit<_ast1208>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1209>(); // LValueReferenceType const Local<S> &
  emit<_ast1210>(); // TemplateSpecializationType const Local<S>
  emit<_ast1214>(); // CXXMethodDecl operator==
  emit<_ast1216>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1217>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1218>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1222>(); // CXXMethodDecl operator!=
  emit<_ast1224>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1225>(); // LValueReferenceType const Local<S> &
  emit<_ast1226>(); // TemplateSpecializationType const Local<S>
  emit<_ast1230>(); // CXXMethodDecl operator!=
  emit<_ast1232>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1233>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1234>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1238>(); // CXXMethodDecl Cast
  emit<_ast1240>(); // FunctionProtoType Local<v8::Promise> (Local<S>)
  emit<_ast1245>(); // CXXMethodDecl As
  emit<_ast1246>(); // FunctionProtoType Local<S> () const
  emit<_ast1248>(); // CXXMethodDecl New
  emit<_ast1251>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
  emit<_ast1254>(); // CXXMethodDecl New
  emit<_ast1257>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
  emit<_ast1258>(); // LValueReferenceType const PersistentBase<v8::Promise> &
  emit<_ast1259>(); // TemplateSpecializationType const PersistentBase<v8::Promise>
  emit<_ast1262>(); // CXXMethodDecl New
  emit<_ast1265>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
  emit<_ast1266>(); // LValueReferenceType const TracedGlobal<v8::Promise> &
  emit<_ast1267>(); // TemplateSpecializationType const TracedGlobal<v8::Promise>
  emit<_ast1270>(); // CXXConstructorDecl Local
  emit<_ast1272>(); // FunctionProtoType void (const v8::Local<v8::Promise> &) noexcept
  emit<_ast1273>(); // LValueReferenceType const v8::Local<v8::Promise> &
  emit<_ast1274>(); // CXXConstructorDecl Local
  emit<_ast1276>(); // FunctionProtoType void (v8::Local<v8::Promise> &&)
  emit<_ast1277>(); // RValueReferenceType v8::Local<v8::Promise> &&
  emit<_ast1292>(); // CXXConstructorDecl Local
  emit<_ast1293>(); // PointerType v8::Local<v8::Data> *
  emit<_ast1294>(); // RecordType v8::Local<v8::Data>
  emit<_ast1297>(); // CXXConstructorDecl Local
  emit<_ast1299>(); // FunctionProtoType void (Local<S>)
  emit<_ast1301>(); // CXXConstructorDecl Local
  emit<_ast1303>(); // FunctionProtoType void (Local<v8::Data>)
  emit<_ast1305>(); // CXXMethodDecl IsEmpty
  emit<_ast1306>(); // PointerType const v8::Local<v8::Data> *
  emit<_ast1307>(); // RecordType const v8::Local<v8::Data>
  emit<_ast1308>(); // CXXMethodDecl Clear
  emit<_ast1309>(); // CXXMethodDecl operator->
  emit<_ast1310>(); // FunctionProtoType v8::Data *() const
  emit<_ast1311>(); // PointerType v8::Data *
  emit<_ast1313>(); // CXXMethodDecl operator*
  emit<_ast1316>(); // CXXMethodDecl operator==
  emit<_ast1318>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1319>(); // LValueReferenceType const Local<S> &
  emit<_ast1320>(); // TemplateSpecializationType const Local<S>
  emit<_ast1324>(); // CXXMethodDecl operator==
  emit<_ast1326>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1327>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1328>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1332>(); // CXXMethodDecl operator!=
  emit<_ast1334>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1335>(); // LValueReferenceType const Local<S> &
  emit<_ast1336>(); // TemplateSpecializationType const Local<S>
  emit<_ast1340>(); // CXXMethodDecl operator!=
  emit<_ast1342>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1343>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1344>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1348>(); // CXXMethodDecl Cast
  emit<_ast1350>(); // FunctionProtoType Local<v8::Data> (Local<S>)
  emit<_ast1355>(); // CXXMethodDecl As
  emit<_ast1356>(); // FunctionProtoType Local<S> () const
  emit<_ast1358>(); // CXXMethodDecl New
  emit<_ast1361>(); // FunctionProtoType Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
  emit<_ast1364>(); // CXXMethodDecl New
  emit<_ast1367>(); // FunctionProtoType Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
  emit<_ast1368>(); // LValueReferenceType const PersistentBase<v8::Data> &
  emit<_ast1369>(); // TemplateSpecializationType const PersistentBase<v8::Data>
  emit<_ast1372>(); // CXXMethodDecl New
  emit<_ast1375>(); // FunctionProtoType Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
  emit<_ast1376>(); // LValueReferenceType const TracedGlobal<v8::Data> &
  emit<_ast1377>(); // TemplateSpecializationType const TracedGlobal<v8::Data>
  emit<_ast1380>(); // CXXConstructorDecl Local
  emit<_ast1382>(); // FunctionProtoType void (const v8::Local<v8::Data> &) noexcept
  emit<_ast1383>(); // LValueReferenceType const v8::Local<v8::Data> &
  emit<_ast1384>(); // CXXConstructorDecl Local
  emit<_ast1386>(); // FunctionProtoType void (v8::Local<v8::Data> &&)
  emit<_ast1387>(); // RValueReferenceType v8::Local<v8::Data> &&
  emit<_ast1388>(); // CXXDestructorDecl ~Local
  emit<_ast1390>(); // CXXConstructorDecl Local
  emit<_ast1391>(); // PointerType v8::Local<v8::AccessorSignature> *
  emit<_ast1392>(); // RecordType v8::Local<v8::AccessorSignature>
  emit<_ast1395>(); // CXXConstructorDecl Local
  emit<_ast1397>(); // FunctionProtoType void (Local<S>)
  emit<_ast1399>(); // CXXConstructorDecl Local
  emit<_ast1401>(); // FunctionProtoType void (Local<v8::AccessorSignature>)
  emit<_ast1403>(); // CXXMethodDecl IsEmpty
  emit<_ast1404>(); // PointerType const v8::Local<v8::AccessorSignature> *
  emit<_ast1405>(); // RecordType const v8::Local<v8::AccessorSignature>
  emit<_ast1406>(); // CXXMethodDecl Clear
  emit<_ast1407>(); // CXXMethodDecl operator->
  emit<_ast1408>(); // FunctionProtoType v8::AccessorSignature *() const
  emit<_ast1409>(); // PointerType v8::AccessorSignature *
  emit<_ast1411>(); // CXXMethodDecl operator*
  emit<_ast1414>(); // CXXMethodDecl operator==
  emit<_ast1416>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1417>(); // LValueReferenceType const Local<S> &
  emit<_ast1418>(); // TemplateSpecializationType const Local<S>
  emit<_ast1422>(); // CXXMethodDecl operator==
  emit<_ast1424>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1425>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1426>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1430>(); // CXXMethodDecl operator!=
  emit<_ast1432>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1433>(); // LValueReferenceType const Local<S> &
  emit<_ast1434>(); // TemplateSpecializationType const Local<S>
  emit<_ast1438>(); // CXXMethodDecl operator!=
  emit<_ast1440>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1441>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1442>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1446>(); // CXXMethodDecl Cast
  emit<_ast1448>(); // FunctionProtoType Local<v8::AccessorSignature> (Local<S>)
  emit<_ast1453>(); // CXXMethodDecl As
  emit<_ast1454>(); // FunctionProtoType Local<S> () const
  emit<_ast1456>(); // CXXMethodDecl New
  emit<_ast1459>(); // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
  emit<_ast1462>(); // CXXMethodDecl New
  emit<_ast1465>(); // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
  emit<_ast1466>(); // LValueReferenceType const PersistentBase<v8::AccessorSignature> &
  emit<_ast1467>(); // TemplateSpecializationType const PersistentBase<v8::AccessorSignature>
  emit<_ast1470>(); // CXXMethodDecl New
  emit<_ast1473>(); // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
  emit<_ast1474>(); // LValueReferenceType const TracedGlobal<v8::AccessorSignature> &
  emit<_ast1475>(); // TemplateSpecializationType const TracedGlobal<v8::AccessorSignature>
  emit<_ast1478>(); // CXXConstructorDecl Local
  emit<_ast1480>(); // FunctionProtoType void (const v8::Local<v8::AccessorSignature> &)
  emit<_ast1481>(); // LValueReferenceType const v8::Local<v8::AccessorSignature> &
  emit<_ast1482>(); // CXXConstructorDecl Local
  emit<_ast1484>(); // FunctionProtoType void (v8::Local<v8::AccessorSignature> &&) noexcept
  emit<_ast1485>(); // RValueReferenceType v8::Local<v8::AccessorSignature> &&
  emit<_ast1486>(); // CXXDestructorDecl ~Local
  emit<_ast1488>(); // CXXConstructorDecl Local
  emit<_ast1489>(); // PointerType v8::Local<v8::Signature> *
  emit<_ast1490>(); // RecordType v8::Local<v8::Signature>
  emit<_ast1493>(); // CXXConstructorDecl Local
  emit<_ast1495>(); // FunctionProtoType void (Local<S>)
  emit<_ast1497>(); // CXXConstructorDecl Local
  emit<_ast1499>(); // FunctionProtoType void (Local<v8::Signature>)
  emit<_ast1501>(); // CXXMethodDecl IsEmpty
  emit<_ast1502>(); // PointerType const v8::Local<v8::Signature> *
  emit<_ast1503>(); // RecordType const v8::Local<v8::Signature>
  emit<_ast1504>(); // CXXMethodDecl Clear
  emit<_ast1505>(); // CXXMethodDecl operator->
  emit<_ast1506>(); // FunctionProtoType v8::Signature *() const
  emit<_ast1507>(); // PointerType v8::Signature *
  emit<_ast1509>(); // CXXMethodDecl operator*
  emit<_ast1512>(); // CXXMethodDecl operator==
  emit<_ast1514>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1515>(); // LValueReferenceType const Local<S> &
  emit<_ast1516>(); // TemplateSpecializationType const Local<S>
  emit<_ast1520>(); // CXXMethodDecl operator==
  emit<_ast1522>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1523>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1524>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1528>(); // CXXMethodDecl operator!=
  emit<_ast1530>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1531>(); // LValueReferenceType const Local<S> &
  emit<_ast1532>(); // TemplateSpecializationType const Local<S>
  emit<_ast1536>(); // CXXMethodDecl operator!=
  emit<_ast1538>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast1539>(); // LValueReferenceType const Persistent<S> &
  emit<_ast1540>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast1544>(); // CXXMethodDecl Cast
  emit<_ast1546>(); // FunctionProtoType Local<v8::Signature> (Local<S>)
  emit<_ast1551>(); // CXXMethodDecl As
  emit<_ast1552>(); // FunctionProtoType Local<S> () const
  emit<_ast1554>(); // CXXMethodDecl New
  emit<_ast1557>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
  emit<_ast1560>(); // CXXMethodDecl New
  emit<_ast1563>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
  emit<_ast1564>(); // LValueReferenceType const PersistentBase<v8::Signature> &
  emit<_ast1565>(); // TemplateSpecializationType const PersistentBase<v8::Signature>
  emit<_ast1568>(); // CXXMethodDecl New
  emit<_ast1571>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
  emit<_ast1572>(); // LValueReferenceType const TracedGlobal<v8::Signature> &
  emit<_ast1573>(); // TemplateSpecializationType const TracedGlobal<v8::Signature>
  emit<_ast1576>(); // CXXConstructorDecl Local
  emit<_ast1578>(); // FunctionProtoType void (const v8::Local<v8::Signature> &)
  emit<_ast1579>(); // LValueReferenceType const v8::Local<v8::Signature> &
  emit<_ast1580>(); // CXXConstructorDecl Local
  emit<_ast1582>(); // FunctionProtoType void (v8::Local<v8::Signature> &&) noexcept
  emit<_ast1583>(); // RValueReferenceType v8::Local<v8::Signature> &&
  emit<_ast1584>(); // CXXDestructorDecl ~Local
  emit<_ast1594>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1595>(); // PointerType v8::MaybeLocal<v8::Value> *
  emit<_ast1596>(); // RecordType v8::MaybeLocal<v8::Value>
  emit<_ast1599>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1601>(); // FunctionProtoType void (Local<S>)
  emit<_ast1603>(); // CXXMethodDecl IsEmpty
  emit<_ast1604>(); // PointerType const v8::MaybeLocal<v8::Value> *
  emit<_ast1605>(); // RecordType const v8::MaybeLocal<v8::Value>
  emit<_ast1608>(); // CXXMethodDecl ToLocal
  emit<_ast1610>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1611>(); // PointerType Local<S> *
  emit<_ast1613>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1614>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast1618>(); // CXXMethodDecl FromMaybe
  emit<_ast1620>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1623>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1625>(); // FunctionProtoType void (const v8::MaybeLocal<v8::Value> &)
  emit<_ast1626>(); // LValueReferenceType const v8::MaybeLocal<v8::Value> &
  emit<_ast1627>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1629>(); // FunctionProtoType void (v8::MaybeLocal<v8::Value> &&) noexcept
  emit<_ast1630>(); // RValueReferenceType v8::MaybeLocal<v8::Value> &&
  emit<_ast1631>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1636>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1637>(); // PointerType v8::MaybeLocal<v8::String> *
  emit<_ast1638>(); // RecordType v8::MaybeLocal<v8::String>
  emit<_ast1641>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1643>(); // FunctionProtoType void (Local<S>)
  emit<_ast1645>(); // CXXMethodDecl IsEmpty
  emit<_ast1646>(); // PointerType const v8::MaybeLocal<v8::String> *
  emit<_ast1647>(); // RecordType const v8::MaybeLocal<v8::String>
  emit<_ast1650>(); // CXXMethodDecl ToLocal
  emit<_ast1652>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1653>(); // PointerType Local<S> *
  emit<_ast1655>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1656>(); // FunctionProtoType Local<v8::String> ()
  emit<_ast1660>(); // CXXMethodDecl FromMaybe
  emit<_ast1662>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1665>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1667>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1668>(); // PointerType v8::MaybeLocal<v8::Object> *
  emit<_ast1669>(); // RecordType v8::MaybeLocal<v8::Object>
  emit<_ast1672>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1674>(); // FunctionProtoType void (Local<S>)
  emit<_ast1676>(); // CXXMethodDecl IsEmpty
  emit<_ast1677>(); // PointerType const v8::MaybeLocal<v8::Object> *
  emit<_ast1678>(); // RecordType const v8::MaybeLocal<v8::Object>
  emit<_ast1681>(); // CXXMethodDecl ToLocal
  emit<_ast1683>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1684>(); // PointerType Local<S> *
  emit<_ast1686>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1687>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast1691>(); // CXXMethodDecl FromMaybe
  emit<_ast1693>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1696>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1697>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1699>(); // FunctionProtoType void (const v8::MaybeLocal<v8::Object> &)
  emit<_ast1700>(); // LValueReferenceType const v8::MaybeLocal<v8::Object> &
  emit<_ast1701>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1703>(); // FunctionProtoType void (v8::MaybeLocal<v8::Object> &&) noexcept
  emit<_ast1704>(); // RValueReferenceType v8::MaybeLocal<v8::Object> &&
  emit<_ast1721>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1722>(); // PointerType v8::MaybeLocal<v8::ObjectTemplate> *
  emit<_ast1723>(); // RecordType v8::MaybeLocal<v8::ObjectTemplate>
  emit<_ast1726>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1728>(); // FunctionProtoType void (Local<S>)
  emit<_ast1730>(); // CXXMethodDecl IsEmpty
  emit<_ast1731>(); // PointerType const v8::MaybeLocal<v8::ObjectTemplate> *
  emit<_ast1732>(); // RecordType const v8::MaybeLocal<v8::ObjectTemplate>
  emit<_ast1735>(); // CXXMethodDecl ToLocal
  emit<_ast1737>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast1738>(); // PointerType Local<S> *
  emit<_ast1740>(); // CXXMethodDecl ToLocalChecked
  emit<_ast1741>(); // FunctionProtoType Local<v8::ObjectTemplate> ()
  emit<_ast1745>(); // CXXMethodDecl FromMaybe
  emit<_ast1747>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast1750>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1752>(); // FunctionProtoType void (const v8::MaybeLocal<v8::ObjectTemplate> &)
  emit<_ast1753>(); // LValueReferenceType const v8::MaybeLocal<v8::ObjectTemplate> &
  emit<_ast1754>(); // CXXConstructorDecl MaybeLocal
  emit<_ast1756>(); // FunctionProtoType void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
  emit<_ast1757>(); // RValueReferenceType v8::MaybeLocal<v8::ObjectTemplate> &&
  emit<_ast1758>(); // CXXDestructorDecl ~MaybeLocal
  emit<_ast1777>(); // CXXMethodDecl Reset
  emit<_ast1778>(); // PointerType v8::PersistentBase<v8::Object> *
  emit<_ast1779>(); // RecordType v8::PersistentBase<v8::Object>
  emit<_ast1782>(); // CXXMethodDecl Reset
  emit<_ast1785>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast1786>(); // LValueReferenceType const Local<S> &
  emit<_ast1787>(); // TemplateSpecializationType const Local<S>
  emit<_ast1791>(); // CXXMethodDecl Reset
  emit<_ast1794>(); // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
  emit<_ast1795>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1796>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1798>(); // CXXMethodDecl IsEmpty
  emit<_ast1799>(); // PointerType const v8::PersistentBase<v8::Object> *
  emit<_ast1800>(); // RecordType const v8::PersistentBase<v8::Object>
  emit<_ast1801>(); // CXXMethodDecl Empty
  emit<_ast1802>(); // CXXMethodDecl Get
  emit<_ast1804>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
  emit<_ast1808>(); // CXXMethodDecl operator==
  emit<_ast1810>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1811>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1812>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1816>(); // CXXMethodDecl operator==
  emit<_ast1818>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1819>(); // LValueReferenceType const Local<S> &
  emit<_ast1820>(); // TemplateSpecializationType const Local<S>
  emit<_ast1824>(); // CXXMethodDecl operator!=
  emit<_ast1826>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1827>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1828>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1832>(); // CXXMethodDecl operator!=
  emit<_ast1834>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1835>(); // LValueReferenceType const Local<S> &
  emit<_ast1836>(); // TemplateSpecializationType const Local<S>
  emit<_ast1840>(); // CXXMethodDecl SetWeak
  emit<_ast1844>(); // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
  emit<_ast1845>(); // PointerType P *
  emit<_ast1848>(); // EnumType v8::WeakCallbackType
  emit<_ast1849>(); // BuiltinType int
  emit<_ast1851>(); // CXXMethodDecl SetWeak
  emit<_ast1854>(); // CXXMethodDecl ClearWeak
  emit<_ast1855>(); // FunctionProtoType P *()
  emit<_ast1856>(); // PointerType P *
  emit<_ast1858>(); // CXXMethodDecl ClearWeak
  emit<_ast1859>(); // CXXMethodDecl AnnotateStrongRetainer
  emit<_ast1861>(); // FunctionProtoType void (const char *)
  emit<_ast1862>(); // PointerType const char *
  emit<_ast1863>(); // BuiltinType const char
  emit<_ast1864>(); // BuiltinType char
  emit<_ast1865>(); // CXXMethodDecl IsWeak
  emit<_ast1866>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast1868>(); // FunctionProtoType void (uint16_t)
  emit<_ast1869>(); // TypedefType uint16_t
  emit<_ast1870>(); // CXXMethodDecl WrapperClassId
  emit<_ast1871>(); // FunctionProtoType uint16_t () const
  emit<_ast1872>(); // CXXConstructorDecl PersistentBase
  emit<_ast1874>(); // FunctionProtoType void (const v8::PersistentBase<v8::Object> &)
  emit<_ast1875>(); // LValueReferenceType const v8::PersistentBase<v8::Object> &
  emit<_ast1876>(); // CXXMethodDecl operator=
  emit<_ast1881>(); // CXXMethodDecl Reset
  emit<_ast1882>(); // PointerType v8::PersistentBase<v8::Promise> *
  emit<_ast1883>(); // RecordType v8::PersistentBase<v8::Promise>
  emit<_ast1886>(); // CXXMethodDecl Reset
  emit<_ast1889>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast1890>(); // LValueReferenceType const Local<S> &
  emit<_ast1891>(); // TemplateSpecializationType const Local<S>
  emit<_ast1895>(); // CXXMethodDecl Reset
  emit<_ast1898>(); // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
  emit<_ast1899>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1900>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1902>(); // CXXMethodDecl IsEmpty
  emit<_ast1903>(); // PointerType const v8::PersistentBase<v8::Promise> *
  emit<_ast1904>(); // RecordType const v8::PersistentBase<v8::Promise>
  emit<_ast1905>(); // CXXMethodDecl Empty
  emit<_ast1906>(); // CXXMethodDecl Get
  emit<_ast1908>(); // FunctionProtoType Local<v8::Promise> (v8::Isolate *) const
  emit<_ast1912>(); // CXXMethodDecl operator==
  emit<_ast1914>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1915>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1916>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1920>(); // CXXMethodDecl operator==
  emit<_ast1922>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1923>(); // LValueReferenceType const Local<S> &
  emit<_ast1924>(); // TemplateSpecializationType const Local<S>
  emit<_ast1928>(); // CXXMethodDecl operator!=
  emit<_ast1930>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast1931>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast1932>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast1936>(); // CXXMethodDecl operator!=
  emit<_ast1938>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast1939>(); // LValueReferenceType const Local<S> &
  emit<_ast1940>(); // TemplateSpecializationType const Local<S>
  emit<_ast1944>(); // CXXMethodDecl SetWeak
  emit<_ast1948>(); // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
  emit<_ast1949>(); // PointerType P *
  emit<_ast1952>(); // CXXMethodDecl SetWeak
  emit<_ast1955>(); // CXXMethodDecl ClearWeak
  emit<_ast1956>(); // FunctionProtoType P *()
  emit<_ast1957>(); // PointerType P *
  emit<_ast1959>(); // CXXMethodDecl ClearWeak
  emit<_ast1960>(); // CXXMethodDecl AnnotateStrongRetainer
  emit<_ast1962>(); // CXXMethodDecl IsWeak
  emit<_ast1963>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast1965>(); // CXXMethodDecl WrapperClassId
  emit<_ast1966>(); // CXXConstructorDecl PersistentBase
  emit<_ast1968>(); // FunctionProtoType void (const v8::PersistentBase<v8::Promise> &)
  emit<_ast1969>(); // LValueReferenceType const v8::PersistentBase<v8::Promise> &
  emit<_ast1970>(); // CXXMethodDecl operator=
  emit<_ast1984>(); // CXXConstructorDecl Persistent
  emit<_ast1985>(); // PointerType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
  emit<_ast1986>(); // RecordType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast1989>(); // CXXConstructorDecl Persistent
  emit<_ast1992>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast1997>(); // CXXConstructorDecl Persistent
  emit<_ast2000>(); // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
  emit<_ast2001>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2002>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2004>(); // CXXConstructorDecl Persistent
  emit<_ast2006>(); // FunctionProtoType void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2007>(); // LValueReferenceType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2008>(); // RecordType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2012>(); // CXXConstructorDecl Persistent
  emit<_ast2014>(); // FunctionProtoType void (const Persistent<S, M2> &)
  emit<_ast2015>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2016>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2018>(); // CXXConstructorDecl Persistent
  emit<_ast2020>(); // FunctionProtoType void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2021>(); // LValueReferenceType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2022>(); // TemplateSpecializationType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2024>(); // CXXMethodDecl operator=
  emit<_ast2026>(); // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2027>(); // LValueReferenceType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2031>(); // CXXMethodDecl operator=
  emit<_ast2033>(); // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
  emit<_ast2034>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2035>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2037>(); // CXXMethodDecl operator=
  emit<_ast2039>(); // FunctionProtoType v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
  emit<_ast2040>(); // LValueReferenceType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
  emit<_ast2041>(); // TemplateSpecializationType const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
  emit<_ast2043>(); // CXXDestructorDecl ~Persistent
  emit<_ast2044>(); // FunctionProtoType void ()
  emit<_ast2047>(); // CXXMethodDecl Cast
  emit<_ast2049>(); // FunctionProtoType Persistent<v8::Promise> &(const Persistent<S> &)
  emit<_ast2050>(); // LValueReferenceType const Persistent<S> &
  emit<_ast2051>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast2053>(); // LValueReferenceType Persistent<v8::Promise> &
  emit<_ast2057>(); // CXXMethodDecl As
  emit<_ast2058>(); // FunctionProtoType Persistent<S> &() const
  emit<_ast2059>(); // LValueReferenceType Persistent<S> &
  emit<_ast2061>(); // PointerType const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
  emit<_ast2076>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2077>(); // FunctionProtoType void ()
  emit<_ast2078>(); // PointerType v8::TracedGlobal<v8::Object> *
  emit<_ast2079>(); // RecordType v8::TracedGlobal<v8::Object>
  emit<_ast2080>(); // CXXDestructorDecl ~TracedGlobal
  emit<_ast2081>(); // FunctionProtoType void ()
  emit<_ast2084>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2087>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2089>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2091>(); // FunctionProtoType void (v8::TracedGlobal<v8::Object> &&)
  emit<_ast2092>(); // RValueReferenceType v8::TracedGlobal<v8::Object> &&
  emit<_ast2095>(); // CXXMethodDecl operator=
  emit<_ast2097>(); // FunctionProtoType v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
  emit<_ast2098>(); // RValueReferenceType TracedGlobal<S> &&
  emit<_ast2100>(); // LValueReferenceType v8::TracedGlobal<v8::Object> &
  emit<_ast2101>(); // CXXConstructorDecl TracedGlobal
  emit<_ast2103>(); // FunctionProtoType void (const v8::TracedGlobal<v8::Object> &)
  emit<_ast2104>(); // LValueReferenceType const v8::TracedGlobal<v8::Object> &
  emit<_ast2105>(); // RecordType const v8::TracedGlobal<v8::Object>
  emit<_ast2106>(); // CXXMethodDecl operator=
  emit<_ast2108>(); // CXXMethodDecl IsEmpty
  emit<_ast2109>(); // PointerType const v8::TracedGlobal<v8::Object> *
  emit<_ast2110>(); // CXXMethodDecl Reset
  emit<_ast2113>(); // CXXMethodDecl Reset
  emit<_ast2116>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast2117>(); // LValueReferenceType const Local<S> &
  emit<_ast2118>(); // TemplateSpecializationType const Local<S>
  emit<_ast2120>(); // CXXMethodDecl Get
  emit<_ast2122>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *) const
  emit<_ast2126>(); // CXXMethodDecl As
  emit<_ast2127>(); // FunctionProtoType TracedGlobal<S> &() const
  emit<_ast2128>(); // LValueReferenceType TracedGlobal<S> &
  emit<_ast2132>(); // CXXMethodDecl operator==
  emit<_ast2134>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2135>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2136>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2140>(); // CXXMethodDecl operator==
  emit<_ast2142>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2143>(); // LValueReferenceType const Local<S> &
  emit<_ast2144>(); // TemplateSpecializationType const Local<S>
  emit<_ast2148>(); // CXXMethodDecl operator!=
  emit<_ast2150>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2151>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2152>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2156>(); // CXXMethodDecl operator!=
  emit<_ast2158>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2159>(); // LValueReferenceType const Local<S> &
  emit<_ast2160>(); // TemplateSpecializationType const Local<S>
  emit<_ast2162>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2164>(); // CXXMethodDecl WrapperClassId
  emit<_ast2165>(); // CXXMethodDecl SetFinalizationCallback
  emit<_ast2168>(); // FunctionProtoType void (void *, WeakCallbackInfo<void>::Callback)
  emit<_ast2169>(); // PointerType void *
  emit<_ast2225>(); // CXXConstructorDecl Local<T>
  emit<_ast2226>(); // PointerType Local<T> *
  emit<_ast2230>(); // CXXConstructorDecl Local<T>
  emit<_ast2232>(); // FunctionProtoType void (Local<S>)
  emit<_ast2234>(); // CXXMethodDecl IsEmpty
  emit<_ast2235>(); // PointerType const Local<T> *
  emit<_ast2236>(); // InjectedClassNameType const Local<T>
  emit<_ast2237>(); // CXXMethodDecl Clear
  emit<_ast2238>(); // CXXMethodDecl operator->
  emit<_ast2239>(); // FunctionProtoType T *() const
  emit<_ast2240>(); // PointerType T *
  emit<_ast2242>(); // CXXMethodDecl operator*
  emit<_ast2245>(); // CXXMethodDecl operator==
  emit<_ast2247>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2248>(); // LValueReferenceType const Local<S> &
  emit<_ast2249>(); // TemplateSpecializationType const Local<S>
  emit<_ast2253>(); // CXXMethodDecl operator==
  emit<_ast2255>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast2256>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2257>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2261>(); // CXXMethodDecl operator!=
  emit<_ast2263>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2264>(); // LValueReferenceType const Local<S> &
  emit<_ast2265>(); // TemplateSpecializationType const Local<S>
  emit<_ast2269>(); // CXXMethodDecl operator!=
  emit<_ast2271>(); // FunctionProtoType bool (const Persistent<S> &) const
  emit<_ast2272>(); // LValueReferenceType const Persistent<S> &
  emit<_ast2273>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast2277>(); // CXXMethodDecl Cast
  emit<_ast2279>(); // FunctionProtoType Local<T> (Local<S>)
  emit<_ast2284>(); // CXXMethodDecl As
  emit<_ast2285>(); // FunctionProtoType Local<S> () const
  emit<_ast2287>(); // CXXMethodDecl New
  emit<_ast2290>(); // FunctionProtoType Local<T> (v8::Isolate *, Local<T>)
  emit<_ast2293>(); // CXXMethodDecl New
  emit<_ast2296>(); // FunctionProtoType Local<T> (v8::Isolate *, const PersistentBase<T> &)
  emit<_ast2297>(); // LValueReferenceType const PersistentBase<T> &
  emit<_ast2298>(); // TemplateSpecializationType const PersistentBase<T>
  emit<_ast2301>(); // CXXMethodDecl New
  emit<_ast2304>(); // FunctionProtoType Local<T> (v8::Isolate *, const TracedGlobal<T> &)
  emit<_ast2305>(); // LValueReferenceType const TracedGlobal<T> &
  emit<_ast2306>(); // TemplateSpecializationType const TracedGlobal<T>
  emit<_ast2310>(); // TypeAliasDecl Handle
  emit<_ast2315>(); // CXXConstructorDecl MaybeLocal<T>
  emit<_ast2316>(); // PointerType MaybeLocal<T> *
  emit<_ast2320>(); // CXXConstructorDecl MaybeLocal<T>
  emit<_ast2322>(); // FunctionProtoType void (Local<S>)
  emit<_ast2324>(); // CXXMethodDecl IsEmpty
  emit<_ast2325>(); // PointerType const MaybeLocal<T> *
  emit<_ast2326>(); // InjectedClassNameType const MaybeLocal<T>
  emit<_ast2329>(); // CXXMethodDecl ToLocal
  emit<_ast2331>(); // FunctionProtoType bool (Local<S> *) const
  emit<_ast2332>(); // PointerType Local<S> *
  emit<_ast2334>(); // CXXMethodDecl ToLocalChecked
  emit<_ast2335>(); // FunctionProtoType Local<T> ()
  emit<_ast2339>(); // CXXMethodDecl FromMaybe
  emit<_ast2341>(); // FunctionProtoType Local<S> (Local<S>) const
  emit<_ast2346>(); // CXXConstructorDecl Eternal<T>
  emit<_ast2347>(); // PointerType Eternal<T> *
  emit<_ast2351>(); // CXXConstructorDecl Eternal<T>
  emit<_ast2354>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2356>(); // CXXMethodDecl Get
  emit<_ast2358>(); // FunctionProtoType Local<T> (v8::Isolate *) const
  emit<_ast2360>(); // PointerType const Eternal<T> *
  emit<_ast2361>(); // InjectedClassNameType const Eternal<T>
  emit<_ast2362>(); // CXXMethodDecl IsEmpty
  emit<_ast2365>(); // CXXMethodDecl Set
  emit<_ast2368>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2376>(); // TypedefDecl Callback
  emit<_ast2377>(); // PointerType void (*)(const WeakCallbackInfo<T> &)
  emit<_ast2378>(); // ParenType void (const WeakCallbackInfo<T> &)
  emit<_ast2379>(); // FunctionProtoType void (const WeakCallbackInfo<T> &)
  emit<_ast2380>(); // LValueReferenceType const WeakCallbackInfo<T> &
  emit<_ast2381>(); // TemplateSpecializationType const WeakCallbackInfo<T>
  emit<_ast2383>(); // CXXConstructorDecl WeakCallbackInfo<T>
  emit<_ast2388>(); // FunctionProtoType void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
  emit<_ast2389>(); // PointerType T *
  emit<_ast2392>(); // PointerType v8::WeakCallbackInfo::Callback *
  emit<_ast2393>(); // TypedefType v8::WeakCallbackInfo::Callback
  emit<_ast2394>(); // PointerType WeakCallbackInfo<T> *
  emit<_ast2396>(); // CXXMethodDecl GetIsolate
  emit<_ast2397>(); // FunctionProtoType v8::Isolate *() const
  emit<_ast2398>(); // PointerType const WeakCallbackInfo<T> *
  emit<_ast2399>(); // InjectedClassNameType const WeakCallbackInfo<T>
  emit<_ast2400>(); // CXXMethodDecl GetParameter
  emit<_ast2401>(); // FunctionProtoType T *() const
  emit<_ast2402>(); // CXXMethodDecl GetInternalField
  emit<_ast2404>(); // FunctionProtoType void *(int) const
  emit<_ast2405>(); // CXXMethodDecl SetSecondPassCallback
  emit<_ast2407>(); // FunctionProtoType void (v8::WeakCallbackInfo::Callback) const
  emit<_ast2409>(); // TypedefDecl Callback
  emit<_ast2410>(); // PointerType void (*)(const WeakCallbackInfo<void> &)
  emit<_ast2411>(); // ParenType void (const WeakCallbackInfo<void> &)
  emit<_ast2412>(); // FunctionProtoType void (const WeakCallbackInfo<void> &)
  emit<_ast2413>(); // LValueReferenceType const WeakCallbackInfo<void> &
  emit<_ast2414>(); // TemplateSpecializationType const WeakCallbackInfo<void>
  emit<_ast2417>(); // CXXConstructorDecl WeakCallbackInfo
  emit<_ast2422>(); // FunctionProtoType void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
  emit<_ast2423>(); // PointerType void *
  emit<_ast2425>(); // PointerType v8::WeakCallbackInfo<void>::Callback *
  emit<_ast2426>(); // TypedefType v8::WeakCallbackInfo<void>::Callback
  emit<_ast2427>(); // PointerType v8::WeakCallbackInfo<void> *
  emit<_ast2428>(); // RecordType v8::WeakCallbackInfo<void>
  emit<_ast2429>(); // CXXMethodDecl GetIsolate
  emit<_ast2430>(); // PointerType const v8::WeakCallbackInfo<void> *
  emit<_ast2431>(); // RecordType const v8::WeakCallbackInfo<void>
  emit<_ast2432>(); // CXXMethodDecl GetParameter
  emit<_ast2433>(); // FunctionProtoType void *() const
  emit<_ast2434>(); // CXXMethodDecl GetInternalField
  emit<_ast2436>(); // CXXMethodDecl SetSecondPassCallback
  emit<_ast2438>(); // FunctionProtoType void (v8::WeakCallbackInfo<void>::Callback) const
  emit<_ast2444>(); // CXXMethodDecl Reset
  emit<_ast2445>(); // PointerType PersistentBase<T> *
  emit<_ast2449>(); // CXXMethodDecl Reset
  emit<_ast2452>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast2453>(); // LValueReferenceType const Local<S> &
  emit<_ast2454>(); // TemplateSpecializationType const Local<S>
  emit<_ast2458>(); // CXXMethodDecl Reset
  emit<_ast2461>(); // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
  emit<_ast2462>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2463>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2465>(); // CXXMethodDecl IsEmpty
  emit<_ast2466>(); // PointerType const PersistentBase<T> *
  emit<_ast2467>(); // InjectedClassNameType const PersistentBase<T>
  emit<_ast2468>(); // CXXMethodDecl Empty
  emit<_ast2469>(); // CXXMethodDecl Get
  emit<_ast2471>(); // FunctionProtoType Local<T> (v8::Isolate *) const
  emit<_ast2475>(); // CXXMethodDecl operator==
  emit<_ast2477>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast2478>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2479>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2483>(); // CXXMethodDecl operator==
  emit<_ast2485>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2486>(); // LValueReferenceType const Local<S> &
  emit<_ast2487>(); // TemplateSpecializationType const Local<S>
  emit<_ast2491>(); // CXXMethodDecl operator!=
  emit<_ast2493>(); // FunctionProtoType bool (const PersistentBase<S> &) const
  emit<_ast2494>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2495>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2499>(); // CXXMethodDecl operator!=
  emit<_ast2501>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2502>(); // LValueReferenceType const Local<S> &
  emit<_ast2503>(); // TemplateSpecializationType const Local<S>
  emit<_ast2507>(); // CXXMethodDecl SetWeak
  emit<_ast2511>(); // FunctionProtoType void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
  emit<_ast2512>(); // PointerType P *
  emit<_ast2515>(); // CXXMethodDecl SetWeak
  emit<_ast2518>(); // CXXMethodDecl ClearWeak
  emit<_ast2519>(); // FunctionProtoType P *()
  emit<_ast2520>(); // PointerType P *
  emit<_ast2522>(); // CXXMethodDecl ClearWeak
  emit<_ast2523>(); // CXXMethodDecl AnnotateStrongRetainer
  emit<_ast2525>(); // CXXMethodDecl IsWeak
  emit<_ast2526>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2528>(); // CXXMethodDecl WrapperClassId
  emit<_ast2529>(); // CXXConstructorDecl PersistentBase<T>
  emit<_ast2531>(); // FunctionProtoType void (const PersistentBase<T> &)
  emit<_ast2532>(); // LValueReferenceType const PersistentBase<T> &
  emit<_ast2533>(); // CXXMethodDecl operator=
  emit<_ast2537>(); // TypedefDecl NonCopyablePersistent
  emit<_ast2543>(); // CXXMethodDecl Copy
  emit<_ast2546>(); // FunctionProtoType void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
  emit<_ast2547>(); // LValueReferenceType const Persistent<S, M> &
  emit<_ast2548>(); // TemplateSpecializationType const Persistent<S, M>
  emit<_ast2550>(); // PointerType v8::NonCopyablePersistentTraits::NonCopyablePersistent *
  emit<_ast2551>(); // TypedefType v8::NonCopyablePersistentTraits::NonCopyablePersistent
  emit<_ast2554>(); // CXXMethodDecl Uncompilable
  emit<_ast2559>(); // TypedefDecl CopyablePersistent
  emit<_ast2565>(); // CXXMethodDecl Copy
  emit<_ast2568>(); // FunctionProtoType void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
  emit<_ast2569>(); // LValueReferenceType const Persistent<S, M> &
  emit<_ast2570>(); // TemplateSpecializationType const Persistent<S, M>
  emit<_ast2572>(); // PointerType v8::CopyablePersistentTraits::CopyablePersistent *
  emit<_ast2573>(); // TypedefType v8::CopyablePersistentTraits::CopyablePersistent
  emit<_ast2578>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2579>(); // PointerType Persistent<T, M> *
  emit<_ast2583>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2586>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2591>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2594>(); // FunctionProtoType void (v8::Isolate *, const Persistent<S, M2> &)
  emit<_ast2595>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2596>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2598>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2600>(); // FunctionProtoType void (const Persistent<T, M> &)
  emit<_ast2601>(); // LValueReferenceType const Persistent<T, M> &
  emit<_ast2602>(); // InjectedClassNameType const Persistent<T, M>
  emit<_ast2606>(); // CXXConstructorDecl Persistent<T, M>
  emit<_ast2608>(); // FunctionProtoType void (const Persistent<S, M2> &)
  emit<_ast2609>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2610>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2612>(); // CXXMethodDecl operator=
  emit<_ast2614>(); // FunctionProtoType Persistent<T, M> &(const Persistent<T, M> &)
  emit<_ast2615>(); // LValueReferenceType Persistent<T, M> &
  emit<_ast2619>(); // CXXMethodDecl operator=
  emit<_ast2621>(); // FunctionProtoType Persistent<T, M> &(const Persistent<S, M2> &)
  emit<_ast2622>(); // LValueReferenceType const Persistent<S, M2> &
  emit<_ast2623>(); // TemplateSpecializationType const Persistent<S, M2>
  emit<_ast2625>(); // CXXDestructorDecl ~Persistent<T, M>
  emit<_ast2628>(); // CXXMethodDecl Cast
  emit<_ast2630>(); // FunctionProtoType Persistent<T> &(const Persistent<S> &)
  emit<_ast2631>(); // LValueReferenceType const Persistent<S> &
  emit<_ast2632>(); // TemplateSpecializationType const Persistent<S>
  emit<_ast2634>(); // LValueReferenceType Persistent<T> &
  emit<_ast2638>(); // CXXMethodDecl As
  emit<_ast2639>(); // FunctionProtoType Persistent<S> &() const
  emit<_ast2640>(); // LValueReferenceType Persistent<S> &
  emit<_ast2642>(); // PointerType const Persistent<T, M> *
  emit<_ast2645>(); // CXXConstructorDecl Global<T>
  emit<_ast2646>(); // PointerType Global<T> *
  emit<_ast2650>(); // CXXConstructorDecl Global<T>
  emit<_ast2653>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2657>(); // CXXConstructorDecl Global<T>
  emit<_ast2660>(); // FunctionProtoType void (v8::Isolate *, const PersistentBase<S> &)
  emit<_ast2661>(); // LValueReferenceType const PersistentBase<S> &
  emit<_ast2662>(); // TemplateSpecializationType const PersistentBase<S>
  emit<_ast2664>(); // CXXConstructorDecl Global<T>
  emit<_ast2666>(); // FunctionProtoType void (Global<T> &&)
  emit<_ast2667>(); // RValueReferenceType Global<T> &&
  emit<_ast2668>(); // CXXDestructorDecl ~Global<T>
  emit<_ast2671>(); // CXXMethodDecl operator=
  emit<_ast2673>(); // FunctionProtoType Global<T> &(Global<S> &&)
  emit<_ast2674>(); // RValueReferenceType Global<S> &&
  emit<_ast2676>(); // LValueReferenceType Global<T> &
  emit<_ast2677>(); // CXXMethodDecl Pass
  emit<_ast2678>(); // FunctionProtoType Global<T> ()
  emit<_ast2679>(); // TypedefDecl MoveOnlyTypeForCPP03
  emit<_ast2680>(); // CXXConstructorDecl Global<T>
  emit<_ast2682>(); // FunctionProtoType void (const Global<T> &)
  emit<_ast2683>(); // LValueReferenceType const Global<T> &
  emit<_ast2684>(); // InjectedClassNameType const Global<T>
  emit<_ast2685>(); // CXXMethodDecl operator=
  emit<_ast2688>(); // TypeAliasDecl UniquePersistent
  emit<_ast2693>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2694>(); // PointerType TracedGlobal<T> *
  emit<_ast2696>(); // CXXDestructorDecl ~TracedGlobal<T>
  emit<_ast2699>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2702>(); // FunctionProtoType void (v8::Isolate *, Local<S>)
  emit<_ast2704>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2706>(); // FunctionProtoType void (TracedGlobal<T> &&)
  emit<_ast2707>(); // RValueReferenceType TracedGlobal<T> &&
  emit<_ast2710>(); // CXXMethodDecl operator=
  emit<_ast2712>(); // FunctionProtoType TracedGlobal<T> &(TracedGlobal<S> &&)
  emit<_ast2713>(); // RValueReferenceType TracedGlobal<S> &&
  emit<_ast2715>(); // LValueReferenceType TracedGlobal<T> &
  emit<_ast2716>(); // CXXConstructorDecl TracedGlobal<T>
  emit<_ast2718>(); // FunctionProtoType void (const TracedGlobal<T> &)
  emit<_ast2719>(); // LValueReferenceType const TracedGlobal<T> &
  emit<_ast2720>(); // InjectedClassNameType const TracedGlobal<T>
  emit<_ast2721>(); // CXXMethodDecl operator=
  emit<_ast2723>(); // CXXMethodDecl IsEmpty
  emit<_ast2724>(); // PointerType const TracedGlobal<T> *
  emit<_ast2725>(); // CXXMethodDecl Reset
  emit<_ast2728>(); // CXXMethodDecl Reset
  emit<_ast2731>(); // FunctionProtoType void (v8::Isolate *, const Local<S> &)
  emit<_ast2732>(); // LValueReferenceType const Local<S> &
  emit<_ast2733>(); // TemplateSpecializationType const Local<S>
  emit<_ast2735>(); // CXXMethodDecl Get
  emit<_ast2737>(); // FunctionProtoType Local<T> (v8::Isolate *) const
  emit<_ast2741>(); // CXXMethodDecl As
  emit<_ast2742>(); // FunctionProtoType TracedGlobal<S> &() const
  emit<_ast2743>(); // LValueReferenceType TracedGlobal<S> &
  emit<_ast2747>(); // CXXMethodDecl operator==
  emit<_ast2749>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2750>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2751>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2755>(); // CXXMethodDecl operator==
  emit<_ast2757>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2758>(); // LValueReferenceType const Local<S> &
  emit<_ast2759>(); // TemplateSpecializationType const Local<S>
  emit<_ast2763>(); // CXXMethodDecl operator!=
  emit<_ast2765>(); // FunctionProtoType bool (const TracedGlobal<S> &) const
  emit<_ast2766>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast2767>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast2771>(); // CXXMethodDecl operator!=
  emit<_ast2773>(); // FunctionProtoType bool (const Local<S> &) const
  emit<_ast2774>(); // LValueReferenceType const Local<S> &
  emit<_ast2775>(); // TemplateSpecializationType const Local<S>
  emit<_ast2777>(); // CXXMethodDecl SetWrapperClassId
  emit<_ast2779>(); // CXXMethodDecl WrapperClassId
  emit<_ast2780>(); // CXXMethodDecl SetFinalizationCallback
  emit<_ast2785>(); // CXXConstructorDecl HandleScope
  emit<_ast2787>(); // FunctionProtoType void (v8::Isolate *)
  emit<_ast2788>(); // PointerType v8::HandleScope *
  emit<_ast2789>(); // RecordType v8::HandleScope
  emit<_ast2790>(); // CXXDestructorDecl ~HandleScope
  emit<_ast2791>(); // FunctionProtoType void ()
  emit<_ast2792>(); // CXXMethodDecl NumberOfHandles
  emit<_ast2794>(); // FunctionProtoType int (v8::Isolate *)
  emit<_ast2795>(); // CXXMethodDecl GetIsolate
  emit<_ast2796>(); // PointerType const v8::HandleScope *
  emit<_ast2797>(); // RecordType const v8::HandleScope
  emit<_ast2798>(); // CXXConstructorDecl HandleScope
  emit<_ast2800>(); // FunctionProtoType void (const v8::HandleScope &)
  emit<_ast2801>(); // LValueReferenceType const v8::HandleScope &
  emit<_ast2802>(); // CXXMethodDecl operator=
  emit<_ast2804>(); // CXXConstructorDecl HandleScope
  emit<_ast2805>(); // FunctionProtoType void ()
  emit<_ast2806>(); // CXXMethodDecl Initialize
  emit<_ast2808>(); // CXXMethodDecl CreateHandle
  emit<_ast2811>(); // FunctionProtoType internal::Address *(internal::Isolate *, internal::Address)
  emit<_ast2812>(); // PointerType internal::Isolate *
  emit<_ast2815>(); // PointerType internal::Address *
  emit<_ast2817>(); // CXXConstructorDecl EscapableHandleScope
  emit<_ast2819>(); // PointerType v8::EscapableHandleScope *
  emit<_ast2820>(); // RecordType v8::EscapableHandleScope
  emit<_ast2821>(); // CXXDestructorDecl ~EscapableHandleScope
  emit<_ast2822>(); // FunctionProtoType void ()
  emit<_ast2825>(); // CXXMethodDecl Escape
  emit<_ast2827>(); // FunctionProtoType Local<T> (Local<T>)
  emit<_ast2832>(); // CXXMethodDecl EscapeMaybe
  emit<_ast2834>(); // FunctionProtoType MaybeLocal<T> (MaybeLocal<T>)
  emit<_ast2837>(); // CXXConstructorDecl EscapableHandleScope
  emit<_ast2839>(); // FunctionProtoType void (const v8::EscapableHandleScope &)
  emit<_ast2840>(); // LValueReferenceType const v8::EscapableHandleScope &
  emit<_ast2841>(); // RecordType const v8::EscapableHandleScope
  emit<_ast2842>(); // CXXMethodDecl operator=
  emit<_ast2846>(); // CXXConstructorDecl SealHandleScope
  emit<_ast2848>(); // PointerType v8::SealHandleScope *
  emit<_ast2849>(); // RecordType v8::SealHandleScope
  emit<_ast2850>(); // CXXDestructorDecl ~SealHandleScope
  emit<_ast2851>(); // FunctionProtoType void ()
  emit<_ast2852>(); // CXXConstructorDecl SealHandleScope
  emit<_ast2854>(); // FunctionProtoType void (const v8::SealHandleScope &)
  emit<_ast2855>(); // LValueReferenceType const v8::SealHandleScope &
  emit<_ast2856>(); // RecordType const v8::SealHandleScope
  emit<_ast2857>(); // CXXMethodDecl operator=
  emit<_ast2862>(); // CXXMethodDecl GetResourceName
  emit<_ast2863>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast2865>(); // PointerType v8::ScriptOrModule *
  emit<_ast2866>(); // RecordType v8::ScriptOrModule
  emit<_ast2867>(); // CXXMethodDecl GetHostDefinedOptions
  emit<_ast2868>(); // FunctionProtoType Local<v8::PrimitiveArray> ()
  emit<_ast2871>(); // CXXMethodDecl New
  emit<_ast2874>(); // FunctionProtoType Local<v8::PrimitiveArray> (v8::Isolate *, int)
  emit<_ast2876>(); // CXXMethodDecl Length
  emit<_ast2877>(); // FunctionProtoType int () const
  emit<_ast2878>(); // PointerType const v8::PrimitiveArray *
  emit<_ast2879>(); // RecordType const v8::PrimitiveArray
  emit<_ast2880>(); // RecordType v8::PrimitiveArray
  emit<_ast2881>(); // CXXMethodDecl Set
  emit<_ast2885>(); // FunctionProtoType void (v8::Isolate *, int, Local<v8::Primitive>)
  emit<_ast2887>(); // PointerType v8::PrimitiveArray *
  emit<_ast2888>(); // CXXMethodDecl Get
  emit<_ast2891>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *, int)
  emit<_ast2895>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2900>(); // FunctionProtoType void (bool, bool, bool, bool)
  emit<_ast2901>(); // PointerType v8::ScriptOriginOptions *
  emit<_ast2902>(); // RecordType v8::ScriptOriginOptions
  emit<_ast2903>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2905>(); // FunctionProtoType void (int)
  emit<_ast2906>(); // CXXMethodDecl IsSharedCrossOrigin
  emit<_ast2907>(); // PointerType const v8::ScriptOriginOptions *
  emit<_ast2908>(); // RecordType const v8::ScriptOriginOptions
  emit<_ast2909>(); // CXXMethodDecl IsOpaque
  emit<_ast2910>(); // CXXMethodDecl IsWasm
  emit<_ast2911>(); // CXXMethodDecl IsModule
  emit<_ast2912>(); // CXXMethodDecl Flags
  emit<_ast2913>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2915>(); // FunctionProtoType void (const v8::ScriptOriginOptions &) noexcept
  emit<_ast2916>(); // LValueReferenceType const v8::ScriptOriginOptions &
  emit<_ast2917>(); // CXXConstructorDecl ScriptOriginOptions
  emit<_ast2919>(); // FunctionProtoType void (v8::ScriptOriginOptions &&) noexcept
  emit<_ast2920>(); // RValueReferenceType v8::ScriptOriginOptions &&
  emit<_ast2921>(); // CXXDestructorDecl ~ScriptOriginOptions
  emit<_ast2922>(); // CXXMethodDecl operator=
  emit<_ast2924>(); // FunctionProtoType v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
  emit<_ast2925>(); // LValueReferenceType v8::ScriptOriginOptions &
  emit<_ast2926>(); // CXXMethodDecl operator=
  emit<_ast2928>(); // FunctionProtoType v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
  emit<_ast2931>(); // CXXConstructorDecl ScriptOrigin
  emit<_ast2942>(); // FunctionProtoType void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
  emit<_ast2953>(); // PointerType v8::ScriptOrigin *
  emit<_ast2954>(); // RecordType v8::ScriptOrigin
  emit<_ast2955>(); // CXXMethodDecl ResourceName
  emit<_ast2956>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast2958>(); // PointerType const v8::ScriptOrigin *
  emit<_ast2959>(); // RecordType const v8::ScriptOrigin
  emit<_ast2960>(); // CXXMethodDecl ResourceLineOffset
  emit<_ast2961>(); // FunctionProtoType Local<v8::Integer> () const
  emit<_ast2963>(); // CXXMethodDecl ResourceColumnOffset
  emit<_ast2964>(); // FunctionProtoType Local<v8::Integer> () const
  emit<_ast2966>(); // CXXMethodDecl ScriptID
  emit<_ast2967>(); // FunctionProtoType Local<v8::Integer> () const
  emit<_ast2969>(); // CXXMethodDecl SourceMapUrl
  emit<_ast2970>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast2972>(); // CXXMethodDecl HostDefinedOptions
  emit<_ast2973>(); // FunctionProtoType Local<v8::PrimitiveArray> () const
  emit<_ast2975>(); // CXXMethodDecl Options
  emit<_ast2976>(); // FunctionProtoType v8::ScriptOriginOptions () const
  emit<_ast2977>(); // CXXConstructorDecl ScriptOrigin
  emit<_ast2979>(); // FunctionProtoType void (const v8::ScriptOrigin &)
  emit<_ast2980>(); // LValueReferenceType const v8::ScriptOrigin &
  emit<_ast2981>(); // CXXMethodDecl operator=
  emit<_ast2983>(); // FunctionProtoType v8::ScriptOrigin &(v8::ScriptOrigin &&)
  emit<_ast2984>(); // RValueReferenceType v8::ScriptOrigin &&
  emit<_ast2985>(); // LValueReferenceType v8::ScriptOrigin &
  emit<_ast2986>(); // CXXConstructorDecl ScriptOrigin
  emit<_ast2988>(); // FunctionProtoType void (v8::ScriptOrigin &&)
  emit<_ast2991>(); // CXXMethodDecl BindToCurrentContext
  emit<_ast2992>(); // FunctionProtoType Local<v8::Script> ()
  emit<_ast2994>(); // PointerType v8::UnboundScript *
  emit<_ast2995>(); // RecordType v8::UnboundScript
  emit<_ast2996>(); // CXXMethodDecl GetId
  emit<_ast2997>(); // FunctionProtoType int ()
  emit<_ast2998>(); // CXXMethodDecl GetScriptName
  emit<_ast2999>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3001>(); // CXXMethodDecl GetSourceURL
  emit<_ast3002>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3004>(); // CXXMethodDecl GetSourceMappingURL
  emit<_ast3005>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3007>(); // CXXMethodDecl GetLineNumber
  emit<_ast3009>(); // FunctionProtoType int (int)
  emit<_ast3015>(); // CXXMethodDecl GetLineNumber
  emit<_ast3016>(); // PointerType v8::Location *
  emit<_ast3017>(); // RecordType v8::Location
  emit<_ast3018>(); // CXXMethodDecl GetColumnNumber
  emit<_ast3019>(); // CXXConstructorDecl Location
  emit<_ast3022>(); // FunctionProtoType void (int, int)
  emit<_ast3032>(); // CXXMethodDecl GetStatus
  emit<_ast3033>(); // FunctionProtoType v8::Module::Status () const
  emit<_ast3034>(); // EnumType v8::Module::Status
  emit<_ast3035>(); // PointerType const v8::Module *
  emit<_ast3036>(); // RecordType const v8::Module
  emit<_ast3037>(); // RecordType v8::Module
  emit<_ast3038>(); // CXXMethodDecl GetException
  emit<_ast3039>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast3041>(); // CXXMethodDecl GetModuleRequestsLength
  emit<_ast3042>(); // CXXMethodDecl GetModuleRequest
  emit<_ast3044>(); // FunctionProtoType Local<v8::String> (int) const
  emit<_ast3046>(); // CXXMethodDecl GetModuleRequestLocation
  emit<_ast3048>(); // FunctionProtoType v8::Location (int) const
  emit<_ast3049>(); // CXXMethodDecl GetIdentityHash
  emit<_ast3050>(); // TypedefDecl ResolveCallback
  emit<_ast3051>(); // PointerType MaybeLocal<v8::Module> (*)(Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
  emit<_ast3052>(); // ParenType MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
  emit<_ast3053>(); // FunctionProtoType MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
  emit<_ast3058>(); // CXXMethodDecl InstantiateModule
  emit<_ast3061>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
  emit<_ast3063>(); // TypedefType v8::Module::ResolveCallback
  emit<_ast3065>(); // PointerType v8::Module *
  emit<_ast3066>(); // CXXMethodDecl Evaluate
  emit<_ast3068>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
  emit<_ast3071>(); // CXXMethodDecl GetModuleNamespace
  emit<_ast3072>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast3074>(); // CXXMethodDecl GetUnboundModuleScript
  emit<_ast3075>(); // FunctionProtoType Local<v8::UnboundModuleScript> ()
  emit<_ast3078>(); // CXXMethodDecl Compile
  emit<_ast3082>(); // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
  emit<_ast3086>(); // CXXMethodDecl Run
  emit<_ast3088>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
  emit<_ast3091>(); // PointerType v8::Script *
  emit<_ast3092>(); // RecordType v8::Script
  emit<_ast3093>(); // CXXMethodDecl GetUnboundScript
  emit<_ast3094>(); // FunctionProtoType Local<v8::UnboundScript> ()
  emit<_ast3103>(); // CXXConstructorDecl CachedData
  emit<_ast3104>(); // PointerType v8::ScriptCompiler::CachedData *
  emit<_ast3105>(); // RecordType v8::ScriptCompiler::CachedData
  emit<_ast3106>(); // CXXConstructorDecl CachedData
  emit<_ast3110>(); // FunctionProtoType void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
  emit<_ast3111>(); // PointerType const uint8_t *
  emit<_ast3112>(); // TypedefType const uint8_t
  emit<_ast3113>(); // TypedefType uint8_t
  emit<_ast3114>(); // EnumType v8::ScriptCompiler::CachedData::BufferPolicy
  emit<_ast3115>(); // CXXDestructorDecl ~CachedData
  emit<_ast3120>(); // CXXConstructorDecl CachedData
  emit<_ast3122>(); // FunctionProtoType void (const v8::ScriptCompiler::CachedData &)
  emit<_ast3123>(); // LValueReferenceType const v8::ScriptCompiler::CachedData &
  emit<_ast3124>(); // RecordType const v8::ScriptCompiler::CachedData
  emit<_ast3125>(); // CXXMethodDecl operator=
  emit<_ast3127>(); // FunctionProtoType v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
  emit<_ast3128>(); // LValueReferenceType v8::ScriptCompiler::CachedData &
  emit<_ast3131>(); // CXXConstructorDecl Source
  emit<_ast3135>(); // FunctionProtoType void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
  emit<_ast3137>(); // PointerType v8::ScriptCompiler::Source *
  emit<_ast3138>(); // RecordType v8::ScriptCompiler::Source
  emit<_ast3139>(); // CXXConstructorDecl Source
  emit<_ast3142>(); // FunctionProtoType void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
  emit<_ast3144>(); // CXXDestructorDecl ~Source
  emit<_ast3145>(); // CXXMethodDecl GetCachedData
  emit<_ast3146>(); // FunctionProtoType const v8::ScriptCompiler::CachedData *() const
  emit<_ast3147>(); // PointerType const v8::ScriptCompiler::CachedData *
  emit<_ast3148>(); // PointerType const v8::ScriptCompiler::Source *
  emit<_ast3149>(); // RecordType const v8::ScriptCompiler::Source
  emit<_ast3150>(); // CXXMethodDecl GetResourceOptions
  emit<_ast3151>(); // FunctionProtoType const v8::ScriptOriginOptions &() const
  emit<_ast3152>(); // CXXConstructorDecl Source
  emit<_ast3154>(); // FunctionProtoType void (const v8::ScriptCompiler::Source &)
  emit<_ast3155>(); // LValueReferenceType const v8::ScriptCompiler::Source &
  emit<_ast3156>(); // CXXMethodDecl operator=
  emit<_ast3158>(); // FunctionProtoType v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
  emit<_ast3159>(); // LValueReferenceType v8::ScriptCompiler::Source &
  emit<_ast3162>(); // CXXDestructorDecl ~ExternalSourceStream
  emit<_ast3163>(); // FunctionProtoType void ()
  emit<_ast3164>(); // PointerType v8::ScriptCompiler::ExternalSourceStream *
  emit<_ast3165>(); // RecordType v8::ScriptCompiler::ExternalSourceStream
  emit<_ast3166>(); // CXXMethodDecl GetMoreData
  emit<_ast3168>(); // FunctionProtoType size_t (const uint8_t **)
  emit<_ast3169>(); // PointerType const uint8_t **
  emit<_ast3170>(); // TypedefType size_t
  emit<_ast3171>(); // CXXMethodDecl SetBookmark
  emit<_ast3172>(); // FunctionProtoType bool ()
  emit<_ast3173>(); // CXXMethodDecl ResetToBookmark
  emit<_ast3174>(); // CXXMethodDecl operator=
  emit<_ast3176>(); // FunctionProtoType v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
  emit<_ast3177>(); // LValueReferenceType const v8::ScriptCompiler::ExternalSourceStream &
  emit<_ast3178>(); // RecordType const v8::ScriptCompiler::ExternalSourceStream
  emit<_ast3179>(); // LValueReferenceType v8::ScriptCompiler::ExternalSourceStream &
  emit<_ast3186>(); // CXXConstructorDecl StreamedSource
  emit<_ast3189>(); // FunctionProtoType void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
  emit<_ast3190>(); // EnumType v8::ScriptCompiler::StreamedSource::Encoding
  emit<_ast3191>(); // PointerType v8::ScriptCompiler::StreamedSource *
  emit<_ast3192>(); // RecordType v8::ScriptCompiler::StreamedSource
  emit<_ast3193>(); // CXXConstructorDecl StreamedSource
  emit<_ast3196>(); // FunctionProtoType void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
  emit<_ast3198>(); // CXXDestructorDecl ~StreamedSource
  emit<_ast3199>(); // FunctionProtoType void ()
  emit<_ast3200>(); // CXXMethodDecl impl
  emit<_ast3201>(); // FunctionProtoType internal::ScriptStreamingData *() const
  emit<_ast3202>(); // PointerType internal::ScriptStreamingData *
  emit<_ast3204>(); // PointerType const v8::ScriptCompiler::StreamedSource *
  emit<_ast3205>(); // RecordType const v8::ScriptCompiler::StreamedSource
  emit<_ast3206>(); // CXXConstructorDecl StreamedSource
  emit<_ast3208>(); // FunctionProtoType void (const v8::ScriptCompiler::StreamedSource &)
  emit<_ast3209>(); // LValueReferenceType const v8::ScriptCompiler::StreamedSource &
  emit<_ast3210>(); // CXXMethodDecl operator=
  emit<_ast3212>(); // FunctionProtoType v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
  emit<_ast3213>(); // LValueReferenceType v8::ScriptCompiler::StreamedSource &
  emit<_ast3216>(); // CXXMethodDecl Run
  emit<_ast3217>(); // PointerType v8::ScriptCompiler::ScriptStreamingTask *
  emit<_ast3218>(); // RecordType v8::ScriptCompiler::ScriptStreamingTask
  emit<_ast3239>(); // CXXMethodDecl CompileUnboundScript
  emit<_ast3244>(); // FunctionProtoType MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
  emit<_ast3245>(); // EnumType v8::ScriptCompiler::CompileOptions
  emit<_ast3246>(); // EnumType v8::ScriptCompiler::NoCacheReason
  emit<_ast3248>(); // CXXMethodDecl Compile
  emit<_ast3253>(); // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
  emit<_ast3256>(); // CXXMethodDecl StartStreamingScript
  emit<_ast3260>(); // FunctionProtoType v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
  emit<_ast3261>(); // CXXMethodDecl Compile
  emit<_ast3266>(); // FunctionProtoType MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
  emit<_ast3270>(); // CXXMethodDecl CachedDataVersionTag
  emit<_ast3271>(); // FunctionProtoType uint32_t ()
  emit<_ast3272>(); // TypedefType uint32_t
  emit<_ast3273>(); // CXXMethodDecl CompileModule
  emit<_ast3278>(); // FunctionProtoType MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
  emit<_ast3280>(); // CXXMethodDecl CompileFunctionInContext
  emit<_ast3289>(); // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
  emit<_ast3294>(); // CXXMethodDecl CreateCodeCache
  emit<_ast3296>(); // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
  emit<_ast3298>(); // CXXMethodDecl CreateCodeCache
  emit<_ast3300>(); // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
  emit<_ast3302>(); // CXXMethodDecl CreateCodeCacheForFunction
  emit<_ast3304>(); // FunctionProtoType v8::ScriptCompiler::CachedData *(Local<v8::Function>)
  emit<_ast3308>(); // CXXMethodDecl Get
  emit<_ast3309>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3311>(); // PointerType const v8::Message *
  emit<_ast3312>(); // RecordType const v8::Message
  emit<_ast3313>(); // RecordType v8::Message
  emit<_ast3314>(); // CXXMethodDecl GetIsolate
  emit<_ast3315>(); // CXXMethodDecl GetSourceLine
  emit<_ast3317>(); // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
  emit<_ast3320>(); // CXXMethodDecl GetScriptOrigin
  emit<_ast3321>(); // FunctionProtoType v8::ScriptOrigin () const
  emit<_ast3322>(); // CXXMethodDecl GetScriptResourceName
  emit<_ast3323>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast3325>(); // CXXMethodDecl GetStackTrace
  emit<_ast3326>(); // FunctionProtoType Local<v8::StackTrace> () const
  emit<_ast3328>(); // CXXMethodDecl GetLineNumber
  emit<_ast3330>(); // FunctionProtoType Maybe<int> (Local<v8::Context>) const
  emit<_ast3333>(); // CXXMethodDecl GetStartPosition
  emit<_ast3334>(); // CXXMethodDecl GetEndPosition
  emit<_ast3335>(); // CXXMethodDecl ErrorLevel
  emit<_ast3336>(); // CXXMethodDecl GetStartColumn
  emit<_ast3337>(); // CXXMethodDecl GetStartColumn
  emit<_ast3339>(); // FunctionProtoType Maybe<int> (Local<v8::Context>) const
  emit<_ast3342>(); // CXXMethodDecl GetEndColumn
  emit<_ast3343>(); // CXXMethodDecl GetEndColumn
  emit<_ast3345>(); // FunctionProtoType Maybe<int> (Local<v8::Context>) const
  emit<_ast3348>(); // CXXMethodDecl IsSharedCrossOrigin
  emit<_ast3349>(); // CXXMethodDecl IsOpaque
  emit<_ast3350>(); // CXXMethodDecl PrintCurrentStackTrace
  emit<_ast3353>(); // FunctionProtoType void (v8::Isolate *, FILE *)
  emit<_ast3354>(); // PointerType FILE *
  emit<_ast3355>(); // TypedefType FILE
  emit<_ast3356>(); // TypedefDecl FILE
  emit<_ast3374>(); // CXXMethodDecl GetFrame
  emit<_ast3377>(); // FunctionProtoType Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
  emit<_ast3379>(); // PointerType const v8::StackTrace *
  emit<_ast3380>(); // RecordType const v8::StackTrace
  emit<_ast3381>(); // RecordType v8::StackTrace
  emit<_ast3382>(); // CXXMethodDecl GetFrameCount
  emit<_ast3383>(); // CXXMethodDecl CurrentStackTrace
  emit<_ast3387>(); // FunctionProtoType Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
  emit<_ast3388>(); // EnumType v8::StackTrace::StackTraceOptions
  emit<_ast3391>(); // CXXMethodDecl GetLineNumber
  emit<_ast3392>(); // PointerType const v8::StackFrame *
  emit<_ast3393>(); // RecordType const v8::StackFrame
  emit<_ast3394>(); // RecordType v8::StackFrame
  emit<_ast3395>(); // CXXMethodDecl GetColumn
  emit<_ast3396>(); // CXXMethodDecl GetScriptId
  emit<_ast3397>(); // CXXMethodDecl GetScriptName
  emit<_ast3398>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3400>(); // CXXMethodDecl GetScriptNameOrSourceURL
  emit<_ast3401>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3403>(); // CXXMethodDecl GetFunctionName
  emit<_ast3404>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast3406>(); // CXXMethodDecl IsEval
  emit<_ast3407>(); // CXXMethodDecl IsConstructor
  emit<_ast3408>(); // CXXMethodDecl IsWasm
  emit<_ast3409>(); // CXXMethodDecl IsUserJavaScript
  emit<_ast3421>(); // CXXConstructorDecl RegisterState
  emit<_ast3422>(); // PointerType v8::RegisterState *
  emit<_ast3423>(); // RecordType v8::RegisterState
  emit<_ast3447>(); // CXXMethodDecl Parse
  emit<_ast3450>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
  emit<_ast3454>(); // CXXMethodDecl Stringify
  emit<_ast3458>(); // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
  emit<_ast3467>(); // CXXDestructorDecl ~Delegate
  emit<_ast3468>(); // FunctionProtoType void ()
  emit<_ast3469>(); // PointerType v8::ValueSerializer::Delegate *
  emit<_ast3470>(); // RecordType v8::ValueSerializer::Delegate
  emit<_ast3471>(); // CXXMethodDecl ThrowDataCloneError
  emit<_ast3473>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast3475>(); // CXXMethodDecl WriteHostObject
  emit<_ast3478>(); // FunctionProtoType Maybe<bool> (v8::Isolate *, Local<v8::Object>)
  emit<_ast3481>(); // CXXMethodDecl GetSharedArrayBufferId
  emit<_ast3484>(); // FunctionProtoType Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
  emit<_ast3487>(); // CXXMethodDecl GetWasmModuleTransferId
  emit<_ast3490>(); // FunctionProtoType Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
  emit<_ast3493>(); // CXXMethodDecl ReallocateBufferMemory
  emit<_ast3497>(); // FunctionProtoType void *(void *, size_t, size_t *)
  emit<_ast3498>(); // PointerType size_t *
  emit<_ast3499>(); // CXXMethodDecl FreeBufferMemory
  emit<_ast3501>(); // FunctionProtoType void (void *)
  emit<_ast3502>(); // CXXMethodDecl operator=
  emit<_ast3504>(); // FunctionProtoType v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
  emit<_ast3505>(); // LValueReferenceType const v8::ValueSerializer::Delegate &
  emit<_ast3506>(); // RecordType const v8::ValueSerializer::Delegate
  emit<_ast3507>(); // LValueReferenceType v8::ValueSerializer::Delegate &
  emit<_ast3508>(); // CXXConstructorDecl ValueSerializer
  emit<_ast3510>(); // PointerType v8::ValueSerializer *
  emit<_ast3511>(); // RecordType v8::ValueSerializer
  emit<_ast3512>(); // CXXConstructorDecl ValueSerializer
  emit<_ast3515>(); // FunctionProtoType void (v8::Isolate *, v8::ValueSerializer::Delegate *)
  emit<_ast3516>(); // CXXDestructorDecl ~ValueSerializer
  emit<_ast3517>(); // FunctionProtoType void ()
  emit<_ast3518>(); // CXXMethodDecl WriteHeader
  emit<_ast3519>(); // CXXMethodDecl WriteValue
  emit<_ast3522>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast3526>(); // CXXMethodDecl Release
  emit<_ast3527>(); // FunctionProtoType std::pair<uint8_t *, size_t> ()
  emit<_ast3529>(); // CXXMethodDecl TransferArrayBuffer
  emit<_ast3532>(); // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
  emit<_ast3534>(); // CXXMethodDecl SetTreatArrayBufferViewsAsHostObjects
  emit<_ast3536>(); // FunctionProtoType void (bool)
  emit<_ast3537>(); // CXXMethodDecl WriteUint32
  emit<_ast3539>(); // FunctionProtoType void (uint32_t)
  emit<_ast3540>(); // CXXMethodDecl WriteUint64
  emit<_ast3542>(); // FunctionProtoType void (uint64_t)
  emit<_ast3543>(); // TypedefType uint64_t
  emit<_ast3544>(); // CXXMethodDecl WriteDouble
  emit<_ast3546>(); // FunctionProtoType void (double)
  emit<_ast3547>(); // BuiltinType double
  emit<_ast3548>(); // CXXMethodDecl WriteRawBytes
  emit<_ast3551>(); // FunctionProtoType void (const void *, size_t)
  emit<_ast3552>(); // PointerType const void *
  emit<_ast3553>(); // BuiltinType const void
  emit<_ast3554>(); // CXXConstructorDecl ValueSerializer
  emit<_ast3556>(); // FunctionProtoType void (const v8::ValueSerializer &)
  emit<_ast3557>(); // LValueReferenceType const v8::ValueSerializer &
  emit<_ast3558>(); // RecordType const v8::ValueSerializer
  emit<_ast3559>(); // CXXMethodDecl operator=
  emit<_ast3565>(); // CXXDestructorDecl ~Delegate
  emit<_ast3566>(); // FunctionProtoType void ()
  emit<_ast3567>(); // PointerType v8::ValueDeserializer::Delegate *
  emit<_ast3568>(); // RecordType v8::ValueDeserializer::Delegate
  emit<_ast3569>(); // CXXMethodDecl ReadHostObject
  emit<_ast3571>(); // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *)
  emit<_ast3573>(); // CXXMethodDecl GetWasmModuleFromId
  emit<_ast3576>(); // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
  emit<_ast3578>(); // CXXMethodDecl GetSharedArrayBufferFromId
  emit<_ast3581>(); // FunctionProtoType MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
  emit<_ast3583>(); // CXXMethodDecl operator=
  emit<_ast3585>(); // FunctionProtoType v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
  emit<_ast3586>(); // LValueReferenceType const v8::ValueDeserializer::Delegate &
  emit<_ast3587>(); // RecordType const v8::ValueDeserializer::Delegate
  emit<_ast3588>(); // LValueReferenceType v8::ValueDeserializer::Delegate &
  emit<_ast3589>(); // CXXConstructorDecl ValueDeserializer
  emit<_ast3593>(); // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t)
  emit<_ast3594>(); // PointerType v8::ValueDeserializer *
  emit<_ast3595>(); // RecordType v8::ValueDeserializer
  emit<_ast3596>(); // CXXConstructorDecl ValueDeserializer
  emit<_ast3601>(); // FunctionProtoType void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
  emit<_ast3602>(); // CXXDestructorDecl ~ValueDeserializer
  emit<_ast3603>(); // FunctionProtoType void ()
  emit<_ast3604>(); // CXXMethodDecl ReadHeader
  emit<_ast3606>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>)
  emit<_ast3609>(); // CXXMethodDecl ReadValue
  emit<_ast3611>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>)
  emit<_ast3614>(); // CXXMethodDecl TransferArrayBuffer
  emit<_ast3617>(); // FunctionProtoType void (uint32_t, Local<v8::ArrayBuffer>)
  emit<_ast3619>(); // CXXMethodDecl TransferSharedArrayBuffer
  emit<_ast3622>(); // FunctionProtoType void (uint32_t, Local<v8::SharedArrayBuffer>)
  emit<_ast3624>(); // CXXMethodDecl SetSupportsLegacyWireFormat
  emit<_ast3626>(); // CXXMethodDecl SetExpectInlineWasm
  emit<_ast3628>(); // CXXMethodDecl GetWireFormatVersion
  emit<_ast3629>(); // FunctionProtoType uint32_t () const
  emit<_ast3630>(); // PointerType const v8::ValueDeserializer *
  emit<_ast3631>(); // RecordType const v8::ValueDeserializer
  emit<_ast3632>(); // CXXMethodDecl ReadUint32
  emit<_ast3634>(); // FunctionProtoType bool (uint32_t *)
  emit<_ast3635>(); // PointerType uint32_t *
  emit<_ast3636>(); // CXXMethodDecl ReadUint64
  emit<_ast3638>(); // FunctionProtoType bool (uint64_t *)
  emit<_ast3639>(); // PointerType uint64_t *
  emit<_ast3640>(); // CXXMethodDecl ReadDouble
  emit<_ast3642>(); // FunctionProtoType bool (double *)
  emit<_ast3643>(); // PointerType double *
  emit<_ast3644>(); // CXXMethodDecl ReadRawBytes
  emit<_ast3647>(); // FunctionProtoType bool (size_t, const void **)
  emit<_ast3648>(); // PointerType const void **
  emit<_ast3649>(); // CXXConstructorDecl ValueDeserializer
  emit<_ast3651>(); // FunctionProtoType void (const v8::ValueDeserializer &)
  emit<_ast3652>(); // LValueReferenceType const v8::ValueDeserializer &
  emit<_ast3653>(); // CXXMethodDecl operator=
  emit<_ast3656>(); // CXXMethodDecl IsUndefined
  emit<_ast3657>(); // PointerType const v8::Value *
  emit<_ast3658>(); // RecordType const v8::Value
  emit<_ast3659>(); // RecordType v8::Value
  emit<_ast3660>(); // CXXMethodDecl IsNull
  emit<_ast3661>(); // CXXMethodDecl IsNullOrUndefined
  emit<_ast3662>(); // CXXMethodDecl IsTrue
  emit<_ast3663>(); // CXXMethodDecl IsFalse
  emit<_ast3664>(); // CXXMethodDecl IsName
  emit<_ast3665>(); // CXXMethodDecl IsString
  emit<_ast3666>(); // CXXMethodDecl IsSymbol
  emit<_ast3667>(); // CXXMethodDecl IsFunction
  emit<_ast3668>(); // CXXMethodDecl IsArray
  emit<_ast3669>(); // CXXMethodDecl IsObject
  emit<_ast3670>(); // CXXMethodDecl IsBigInt
  emit<_ast3671>(); // CXXMethodDecl IsBoolean
  emit<_ast3672>(); // CXXMethodDecl IsNumber
  emit<_ast3673>(); // CXXMethodDecl IsExternal
  emit<_ast3674>(); // CXXMethodDecl IsInt32
  emit<_ast3675>(); // CXXMethodDecl IsUint32
  emit<_ast3676>(); // CXXMethodDecl IsDate
  emit<_ast3677>(); // CXXMethodDecl IsArgumentsObject
  emit<_ast3678>(); // CXXMethodDecl IsBigIntObject
  emit<_ast3679>(); // CXXMethodDecl IsBooleanObject
  emit<_ast3680>(); // CXXMethodDecl IsNumberObject
  emit<_ast3681>(); // CXXMethodDecl IsStringObject
  emit<_ast3682>(); // CXXMethodDecl IsSymbolObject
  emit<_ast3683>(); // CXXMethodDecl IsNativeError
  emit<_ast3684>(); // CXXMethodDecl IsRegExp
  emit<_ast3685>(); // CXXMethodDecl IsAsyncFunction
  emit<_ast3686>(); // CXXMethodDecl IsGeneratorFunction
  emit<_ast3687>(); // CXXMethodDecl IsGeneratorObject
  emit<_ast3688>(); // CXXMethodDecl IsPromise
  emit<_ast3689>(); // CXXMethodDecl IsMap
  emit<_ast3690>(); // CXXMethodDecl IsSet
  emit<_ast3691>(); // CXXMethodDecl IsMapIterator
  emit<_ast3692>(); // CXXMethodDecl IsSetIterator
  emit<_ast3693>(); // CXXMethodDecl IsWeakMap
  emit<_ast3694>(); // CXXMethodDecl IsWeakSet
  emit<_ast3695>(); // CXXMethodDecl IsArrayBuffer
  emit<_ast3696>(); // CXXMethodDecl IsArrayBufferView
  emit<_ast3697>(); // CXXMethodDecl IsTypedArray
  emit<_ast3698>(); // CXXMethodDecl IsUint8Array
  emit<_ast3699>(); // CXXMethodDecl IsUint8ClampedArray
  emit<_ast3700>(); // CXXMethodDecl IsInt8Array
  emit<_ast3701>(); // CXXMethodDecl IsUint16Array
  emit<_ast3702>(); // CXXMethodDecl IsInt16Array
  emit<_ast3703>(); // CXXMethodDecl IsUint32Array
  emit<_ast3704>(); // CXXMethodDecl IsInt32Array
  emit<_ast3705>(); // CXXMethodDecl IsFloat32Array
  emit<_ast3706>(); // CXXMethodDecl IsFloat64Array
  emit<_ast3707>(); // CXXMethodDecl IsBigInt64Array
  emit<_ast3708>(); // CXXMethodDecl IsBigUint64Array
  emit<_ast3709>(); // CXXMethodDecl IsDataView
  emit<_ast3710>(); // CXXMethodDecl IsSharedArrayBuffer
  emit<_ast3711>(); // CXXMethodDecl IsProxy
  emit<_ast3712>(); // CXXMethodDecl IsWebAssemblyCompiledModule
  emit<_ast3713>(); // CXXMethodDecl IsModuleNamespaceObject
  emit<_ast3714>(); // CXXMethodDecl ToBigInt
  emit<_ast3716>(); // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>) const
  emit<_ast3719>(); // CXXMethodDecl ToNumber
  emit<_ast3721>(); // FunctionProtoType MaybeLocal<v8::Number> (Local<v8::Context>) const
  emit<_ast3724>(); // CXXMethodDecl ToString
  emit<_ast3726>(); // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
  emit<_ast3729>(); // CXXMethodDecl ToDetailString
  emit<_ast3731>(); // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>) const
  emit<_ast3734>(); // CXXMethodDecl ToObject
  emit<_ast3736>(); // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
  emit<_ast3739>(); // CXXMethodDecl ToInteger
  emit<_ast3741>(); // FunctionProtoType MaybeLocal<v8::Integer> (Local<v8::Context>) const
  emit<_ast3744>(); // CXXMethodDecl ToUint32
  emit<_ast3746>(); // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
  emit<_ast3749>(); // CXXMethodDecl ToInt32
  emit<_ast3751>(); // FunctionProtoType MaybeLocal<v8::Int32> (Local<v8::Context>) const
  emit<_ast3754>(); // CXXMethodDecl ToBoolean
  emit<_ast3756>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *) const
  emit<_ast3758>(); // CXXMethodDecl ToArrayIndex
  emit<_ast3760>(); // FunctionProtoType MaybeLocal<v8::Uint32> (Local<v8::Context>) const
  emit<_ast3763>(); // CXXMethodDecl BooleanValue
  emit<_ast3765>(); // FunctionProtoType bool (v8::Isolate *) const
  emit<_ast3766>(); // CXXMethodDecl NumberValue
  emit<_ast3768>(); // FunctionProtoType Maybe<double> (Local<v8::Context>) const
  emit<_ast3771>(); // CXXMethodDecl IntegerValue
  emit<_ast3773>(); // FunctionProtoType Maybe<int64_t> (Local<v8::Context>) const
  emit<_ast3776>(); // CXXMethodDecl Uint32Value
  emit<_ast3778>(); // FunctionProtoType Maybe<uint32_t> (Local<v8::Context>) const
  emit<_ast3781>(); // CXXMethodDecl Int32Value
  emit<_ast3783>(); // FunctionProtoType Maybe<int32_t> (Local<v8::Context>) const
  emit<_ast3786>(); // CXXMethodDecl Equals
  emit<_ast3789>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
  emit<_ast3793>(); // CXXMethodDecl StrictEquals
  emit<_ast3795>(); // FunctionProtoType bool (Local<v8::Value>) const
  emit<_ast3797>(); // CXXMethodDecl SameValue
  emit<_ast3799>(); // FunctionProtoType bool (Local<v8::Value>) const
  emit<_ast3803>(); // CXXMethodDecl Cast
  emit<_ast3805>(); // FunctionProtoType v8::Value *(T *)
  emit<_ast3806>(); // PointerType T *
  emit<_ast3808>(); // PointerType v8::Value *
  emit<_ast3809>(); // CXXMethodDecl TypeOf
  emit<_ast3811>(); // FunctionProtoType Local<v8::String> (v8::Isolate *)
  emit<_ast3813>(); // CXXMethodDecl InstanceOf
  emit<_ast3816>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
  emit<_ast3822>(); // CXXMethodDecl Value
  emit<_ast3823>(); // PointerType const v8::Boolean *
  emit<_ast3824>(); // RecordType const v8::Boolean
  emit<_ast3825>(); // RecordType v8::Boolean
  emit<_ast3826>(); // CXXMethodDecl Cast
  emit<_ast3828>(); // FunctionProtoType v8::Boolean *(v8::Value *)
  emit<_ast3829>(); // PointerType v8::Value *
  emit<_ast3831>(); // PointerType v8::Boolean *
  emit<_ast3832>(); // CXXMethodDecl New
  emit<_ast3835>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *, bool)
  emit<_ast3838>(); // CXXMethodDecl GetIdentityHash
  emit<_ast3839>(); // PointerType v8::Name *
  emit<_ast3840>(); // RecordType v8::Name
  emit<_ast3841>(); // CXXMethodDecl Cast
  emit<_ast3843>(); // FunctionProtoType v8::Name *(v8::Value *)
  emit<_ast3853>(); // CXXMethodDecl Length
  emit<_ast3854>(); // PointerType const v8::String *
  emit<_ast3855>(); // RecordType const v8::String
  emit<_ast3856>(); // RecordType v8::String
  emit<_ast3857>(); // CXXMethodDecl Utf8Length
  emit<_ast3859>(); // FunctionProtoType int (v8::Isolate *) const
  emit<_ast3860>(); // CXXMethodDecl IsOneByte
  emit<_ast3861>(); // CXXMethodDecl ContainsOnlyOneByte
  emit<_ast3868>(); // CXXMethodDecl Write
  emit<_ast3874>(); // FunctionProtoType int (v8::Isolate *, uint16_t *, int, int, int) const
  emit<_ast3875>(); // PointerType uint16_t *
  emit<_ast3876>(); // CXXMethodDecl WriteOneByte
  emit<_ast3882>(); // FunctionProtoType int (v8::Isolate *, uint8_t *, int, int, int) const
  emit<_ast3883>(); // PointerType uint8_t *
  emit<_ast3884>(); // CXXMethodDecl WriteUtf8
  emit<_ast3890>(); // FunctionProtoType int (v8::Isolate *, char *, int, int *, int) const
  emit<_ast3891>(); // PointerType char *
  emit<_ast3892>(); // PointerType int *
  emit<_ast3893>(); // CXXMethodDecl Empty
  emit<_ast3895>(); // FunctionProtoType Local<v8::String> (v8::Isolate *)
  emit<_ast3897>(); // CXXMethodDecl IsExternal
  emit<_ast3898>(); // CXXMethodDecl IsExternalOneByte
  emit<_ast3901>(); // CXXDestructorDecl ~ExternalStringResourceBase
  emit<_ast3902>(); // PointerType v8::String::ExternalStringResourceBase *
  emit<_ast3903>(); // RecordType v8::String::ExternalStringResourceBase
  emit<_ast3904>(); // CXXMethodDecl IsCacheable
  emit<_ast3905>(); // PointerType const v8::String::ExternalStringResourceBase *
  emit<_ast3906>(); // RecordType const v8::String::ExternalStringResourceBase
  emit<_ast3907>(); // CXXConstructorDecl ExternalStringResourceBase
  emit<_ast3909>(); // FunctionProtoType void (const v8::String::ExternalStringResourceBase &)
  emit<_ast3910>(); // LValueReferenceType const v8::String::ExternalStringResourceBase &
  emit<_ast3911>(); // CXXMethodDecl operator=
  emit<_ast3913>(); // CXXConstructorDecl ExternalStringResourceBase
  emit<_ast3914>(); // FunctionProtoType void ()
  emit<_ast3915>(); // CXXMethodDecl Dispose
  emit<_ast3916>(); // CXXMethodDecl Lock
  emit<_ast3917>(); // FunctionProtoType void () const
  emit<_ast3918>(); // CXXMethodDecl Unlock
  emit<_ast3921>(); // CXXDestructorDecl ~ExternalStringResource
  emit<_ast3922>(); // PointerType v8::String::ExternalStringResource *
  emit<_ast3923>(); // RecordType v8::String::ExternalStringResource
  emit<_ast3924>(); // CXXMethodDecl data
  emit<_ast3925>(); // FunctionProtoType const uint16_t *() const
  emit<_ast3926>(); // PointerType const uint16_t *
  emit<_ast3927>(); // TypedefType const uint16_t
  emit<_ast3928>(); // PointerType const v8::String::ExternalStringResource *
  emit<_ast3929>(); // RecordType const v8::String::ExternalStringResource
  emit<_ast3930>(); // CXXMethodDecl length
  emit<_ast3931>(); // FunctionProtoType size_t () const
  emit<_ast3932>(); // CXXConstructorDecl ExternalStringResource
  emit<_ast3933>(); // FunctionProtoType void ()
  emit<_ast3934>(); // CXXConstructorDecl ExternalStringResource
  emit<_ast3936>(); // FunctionProtoType void (const v8::String::ExternalStringResource &)
  emit<_ast3937>(); // LValueReferenceType const v8::String::ExternalStringResource &
  emit<_ast3938>(); // CXXMethodDecl operator=
  emit<_ast3940>(); // FunctionProtoType v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
  emit<_ast3941>(); // LValueReferenceType v8::String::ExternalStringResource &
  emit<_ast3944>(); // CXXDestructorDecl ~ExternalOneByteStringResource
  emit<_ast3945>(); // PointerType v8::String::ExternalOneByteStringResource *
  emit<_ast3946>(); // RecordType v8::String::ExternalOneByteStringResource
  emit<_ast3947>(); // CXXMethodDecl data
  emit<_ast3948>(); // FunctionProtoType const char *() const
  emit<_ast3949>(); // PointerType const v8::String::ExternalOneByteStringResource *
  emit<_ast3950>(); // RecordType const v8::String::ExternalOneByteStringResource
  emit<_ast3951>(); // CXXMethodDecl length
  emit<_ast3952>(); // CXXConstructorDecl ExternalOneByteStringResource
  emit<_ast3953>(); // FunctionProtoType void ()
  emit<_ast3954>(); // CXXConstructorDecl ExternalOneByteStringResource
  emit<_ast3956>(); // FunctionProtoType void (const v8::String::ExternalOneByteStringResource &)
  emit<_ast3957>(); // LValueReferenceType const v8::String::ExternalOneByteStringResource &
  emit<_ast3958>(); // CXXMethodDecl operator=
  emit<_ast3960>(); // FunctionProtoType v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
  emit<_ast3961>(); // LValueReferenceType v8::String::ExternalOneByteStringResource &
  emit<_ast3962>(); // CXXMethodDecl GetExternalStringResourceBase
  emit<_ast3964>(); // FunctionProtoType v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
  emit<_ast3965>(); // PointerType v8::String::Encoding *
  emit<_ast3966>(); // EnumType v8::String::Encoding
  emit<_ast3967>(); // CXXMethodDecl GetExternalStringResource
  emit<_ast3968>(); // FunctionProtoType v8::String::ExternalStringResource *() const
  emit<_ast3969>(); // CXXMethodDecl GetExternalOneByteStringResource
  emit<_ast3970>(); // FunctionProtoType const v8::String::ExternalOneByteStringResource *() const
  emit<_ast3971>(); // CXXMethodDecl Cast
  emit<_ast3973>(); // FunctionProtoType v8::String *(v8::Value *)
  emit<_ast3974>(); // PointerType v8::String *
  emit<_ast3975>(); // CXXMethodDecl NewFromUtf8
  emit<_ast3980>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
  emit<_ast3981>(); // EnumType v8::NewStringType
  emit<_ast3983>(); // CXXMethodDecl NewFromOneByte
  emit<_ast3988>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
  emit<_ast3990>(); // CXXMethodDecl NewFromTwoByte
  emit<_ast3995>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
  emit<_ast3997>(); // CXXMethodDecl Concat
  emit<_ast4001>(); // FunctionProtoType Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
  emit<_ast4005>(); // CXXMethodDecl NewExternalTwoByte
  emit<_ast4008>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
  emit<_ast4010>(); // CXXMethodDecl MakeExternal
  emit<_ast4012>(); // FunctionProtoType bool (v8::String::ExternalStringResource *)
  emit<_ast4013>(); // CXXMethodDecl NewExternalOneByte
  emit<_ast4016>(); // FunctionProtoType MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
  emit<_ast4018>(); // CXXMethodDecl MakeExternal
  emit<_ast4020>(); // FunctionProtoType bool (v8::String::ExternalOneByteStringResource *)
  emit<_ast4021>(); // CXXMethodDecl CanMakeExternal
  emit<_ast4022>(); // CXXMethodDecl StringEquals
  emit<_ast4024>(); // FunctionProtoType bool (Local<v8::String>)
  emit<_ast4028>(); // CXXConstructorDecl Utf8Value
  emit<_ast4031>(); // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
  emit<_ast4033>(); // PointerType v8::String::Utf8Value *
  emit<_ast4034>(); // RecordType v8::String::Utf8Value
  emit<_ast4035>(); // CXXDestructorDecl ~Utf8Value
  emit<_ast4036>(); // FunctionProtoType void ()
  emit<_ast4037>(); // CXXMethodDecl operator*
  emit<_ast4038>(); // FunctionProtoType char *()
  emit<_ast4039>(); // CXXMethodDecl operator*
  emit<_ast4040>(); // PointerType const v8::String::Utf8Value *
  emit<_ast4041>(); // RecordType const v8::String::Utf8Value
  emit<_ast4042>(); // CXXMethodDecl length
  emit<_ast4043>(); // CXXConstructorDecl Utf8Value
  emit<_ast4045>(); // FunctionProtoType void (const v8::String::Utf8Value &)
  emit<_ast4046>(); // LValueReferenceType const v8::String::Utf8Value &
  emit<_ast4047>(); // CXXMethodDecl operator=
  emit<_ast4051>(); // CXXConstructorDecl Value
  emit<_ast4054>(); // FunctionProtoType void (v8::Isolate *, Local<v8::Value>)
  emit<_ast4056>(); // PointerType v8::String::Value *
  emit<_ast4057>(); // RecordType v8::String::Value
  emit<_ast4058>(); // CXXDestructorDecl ~Value
  emit<_ast4059>(); // FunctionProtoType void ()
  emit<_ast4060>(); // CXXMethodDecl operator*
  emit<_ast4061>(); // FunctionProtoType uint16_t *()
  emit<_ast4062>(); // CXXMethodDecl operator*
  emit<_ast4063>(); // PointerType const v8::String::Value *
  emit<_ast4064>(); // RecordType const v8::String::Value
  emit<_ast4065>(); // CXXMethodDecl length
  emit<_ast4066>(); // CXXConstructorDecl Value
  emit<_ast4068>(); // FunctionProtoType void (const v8::String::Value &)
  emit<_ast4069>(); // LValueReferenceType const v8::String::Value &
  emit<_ast4070>(); // CXXMethodDecl operator=
  emit<_ast4073>(); // CXXMethodDecl Name
  emit<_ast4074>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4076>(); // PointerType const v8::Symbol *
  emit<_ast4077>(); // RecordType const v8::Symbol
  emit<_ast4078>(); // RecordType v8::Symbol
  emit<_ast4079>(); // CXXMethodDecl New
  emit<_ast4082>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
  emit<_ast4085>(); // CXXMethodDecl For
  emit<_ast4088>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
  emit<_ast4091>(); // CXXMethodDecl ForApi
  emit<_ast4094>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
  emit<_ast4097>(); // CXXMethodDecl GetAsyncIterator
  emit<_ast4099>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4101>(); // CXXMethodDecl GetHasInstance
  emit<_ast4103>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4105>(); // CXXMethodDecl GetIsConcatSpreadable
  emit<_ast4107>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4109>(); // CXXMethodDecl GetIterator
  emit<_ast4111>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4113>(); // CXXMethodDecl GetMatch
  emit<_ast4115>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4117>(); // CXXMethodDecl GetReplace
  emit<_ast4119>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4121>(); // CXXMethodDecl GetSearch
  emit<_ast4123>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4125>(); // CXXMethodDecl GetSplit
  emit<_ast4127>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4129>(); // CXXMethodDecl GetToPrimitive
  emit<_ast4131>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4133>(); // CXXMethodDecl GetToStringTag
  emit<_ast4135>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4137>(); // CXXMethodDecl GetUnscopables
  emit<_ast4139>(); // FunctionProtoType Local<v8::Symbol> (v8::Isolate *)
  emit<_ast4141>(); // CXXMethodDecl Cast
  emit<_ast4143>(); // FunctionProtoType v8::Symbol *(v8::Value *)
  emit<_ast4144>(); // PointerType v8::Symbol *
  emit<_ast4146>(); // CXXMethodDecl Name
  emit<_ast4147>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4149>(); // PointerType const v8::Private *
  emit<_ast4150>(); // RecordType const v8::Private
  emit<_ast4151>(); // RecordType v8::Private
  emit<_ast4152>(); // CXXMethodDecl New
  emit<_ast4155>(); // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
  emit<_ast4158>(); // CXXMethodDecl ForApi
  emit<_ast4161>(); // FunctionProtoType Local<v8::Private> (v8::Isolate *, Local<v8::String>)
  emit<_ast4164>(); // CXXMethodDecl Cast
  emit<_ast4166>(); // FunctionProtoType v8::Private *(v8::Data *)
  emit<_ast4167>(); // PointerType v8::Data *
  emit<_ast4168>(); // RecordType v8::Data
  emit<_ast4169>(); // PointerType v8::Private *
  emit<_ast4171>(); // CXXMethodDecl Value
  emit<_ast4172>(); // FunctionProtoType double () const
  emit<_ast4173>(); // PointerType const v8::Number *
  emit<_ast4174>(); // RecordType const v8::Number
  emit<_ast4175>(); // RecordType v8::Number
  emit<_ast4176>(); // CXXMethodDecl New
  emit<_ast4179>(); // FunctionProtoType Local<v8::Number> (v8::Isolate *, double)
  emit<_ast4181>(); // CXXMethodDecl Cast
  emit<_ast4183>(); // FunctionProtoType v8::Number *(v8::Value *)
  emit<_ast4184>(); // PointerType v8::Number *
  emit<_ast4186>(); // CXXMethodDecl New
  emit<_ast4189>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, int32_t)
  emit<_ast4190>(); // TypedefType int32_t
  emit<_ast4192>(); // CXXMethodDecl NewFromUnsigned
  emit<_ast4195>(); // FunctionProtoType Local<v8::Integer> (v8::Isolate *, uint32_t)
  emit<_ast4197>(); // CXXMethodDecl Value
  emit<_ast4198>(); // FunctionProtoType int64_t () const
  emit<_ast4199>(); // TypedefType int64_t
  emit<_ast4200>(); // PointerType const v8::Integer *
  emit<_ast4201>(); // RecordType const v8::Integer
  emit<_ast4202>(); // RecordType v8::Integer
  emit<_ast4203>(); // CXXMethodDecl Cast
  emit<_ast4205>(); // FunctionProtoType v8::Integer *(v8::Value *)
  emit<_ast4206>(); // PointerType v8::Integer *
  emit<_ast4208>(); // CXXMethodDecl Value
  emit<_ast4209>(); // FunctionProtoType int32_t () const
  emit<_ast4210>(); // PointerType const v8::Int32 *
  emit<_ast4211>(); // RecordType const v8::Int32
  emit<_ast4212>(); // RecordType v8::Int32
  emit<_ast4213>(); // CXXMethodDecl Cast
  emit<_ast4215>(); // FunctionProtoType v8::Int32 *(v8::Value *)
  emit<_ast4216>(); // PointerType v8::Int32 *
  emit<_ast4218>(); // CXXMethodDecl Value
  emit<_ast4219>(); // PointerType const v8::Uint32 *
  emit<_ast4220>(); // RecordType const v8::Uint32
  emit<_ast4221>(); // RecordType v8::Uint32
  emit<_ast4222>(); // CXXMethodDecl Cast
  emit<_ast4224>(); // FunctionProtoType v8::Uint32 *(v8::Value *)
  emit<_ast4225>(); // PointerType v8::Uint32 *
  emit<_ast4227>(); // CXXMethodDecl New
  emit<_ast4230>(); // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, int64_t)
  emit<_ast4232>(); // CXXMethodDecl NewFromUnsigned
  emit<_ast4235>(); // FunctionProtoType Local<v8::BigInt> (v8::Isolate *, uint64_t)
  emit<_ast4237>(); // CXXMethodDecl NewFromWords
  emit<_ast4242>(); // FunctionProtoType MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
  emit<_ast4244>(); // PointerType const uint64_t *
  emit<_ast4245>(); // TypedefType const uint64_t
  emit<_ast4247>(); // CXXMethodDecl Uint64Value
  emit<_ast4249>(); // FunctionProtoType uint64_t (bool *) const
  emit<_ast4250>(); // PointerType bool *
  emit<_ast4251>(); // PointerType const v8::BigInt *
  emit<_ast4252>(); // RecordType const v8::BigInt
  emit<_ast4253>(); // RecordType v8::BigInt
  emit<_ast4254>(); // CXXMethodDecl Int64Value
  emit<_ast4256>(); // FunctionProtoType int64_t (bool *) const
  emit<_ast4257>(); // CXXMethodDecl WordCount
  emit<_ast4258>(); // CXXMethodDecl ToWordsArray
  emit<_ast4262>(); // FunctionProtoType void (int *, int *, uint64_t *) const
  emit<_ast4263>(); // CXXMethodDecl Cast
  emit<_ast4265>(); // FunctionProtoType v8::BigInt *(v8::Value *)
  emit<_ast4266>(); // PointerType v8::BigInt *
  emit<_ast4272>(); // TypedefDecl AccessorGetterCallback
  emit<_ast4273>(); // PointerType void (*)(Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast4274>(); // ParenType void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast4275>(); // FunctionProtoType void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast4277>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast4278>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast4280>(); // TypedefDecl AccessorNameGetterCallback
  emit<_ast4281>(); // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast4282>(); // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast4283>(); // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast4285>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast4286>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast4288>(); // TypedefDecl AccessorSetterCallback
  emit<_ast4289>(); // PointerType void (*)(Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
  emit<_ast4290>(); // ParenType void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
  emit<_ast4291>(); // FunctionProtoType void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
  emit<_ast4294>(); // LValueReferenceType const PropertyCallbackInfo<void> &
  emit<_ast4295>(); // TemplateSpecializationType const PropertyCallbackInfo<void>
  emit<_ast4297>(); // TypedefDecl AccessorNameSetterCallback
  emit<_ast4298>(); // PointerType void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
  emit<_ast4299>(); // ParenType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
  emit<_ast4300>(); // FunctionProtoType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
  emit<_ast4303>(); // LValueReferenceType const PropertyCallbackInfo<void> &
  emit<_ast4304>(); // TemplateSpecializationType const PropertyCallbackInfo<void>
  emit<_ast4335>(); // CXXMethodDecl Set
  emit<_ast4338>(); // FunctionProtoType bool (Local<v8::Value>, Local<v8::Value>)
  emit<_ast4341>(); // PointerType v8::Object *
  emit<_ast4342>(); // RecordType v8::Object
  emit<_ast4343>(); // CXXMethodDecl Set
  emit<_ast4347>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
  emit<_ast4352>(); // CXXMethodDecl Set
  emit<_ast4355>(); // FunctionProtoType bool (uint32_t, Local<v8::Value>)
  emit<_ast4357>(); // CXXMethodDecl Set
  emit<_ast4361>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
  emit<_ast4365>(); // CXXMethodDecl CreateDataProperty
  emit<_ast4369>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
  emit<_ast4374>(); // CXXMethodDecl CreateDataProperty
  emit<_ast4378>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
  emit<_ast4382>(); // CXXMethodDecl DefineOwnProperty
  emit<_ast4387>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
  emit<_ast4391>(); // EnumType v8::PropertyAttribute
  emit<_ast4393>(); // CXXMethodDecl DefineProperty
  emit<_ast4397>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
  emit<_ast4400>(); // LValueReferenceType v8::PropertyDescriptor &
  emit<_ast4401>(); // RecordType v8::PropertyDescriptor
  emit<_ast4403>(); // CXXMethodDecl Get
  emit<_ast4405>(); // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
  emit<_ast4408>(); // CXXMethodDecl Get
  emit<_ast4411>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4415>(); // CXXMethodDecl Get
  emit<_ast4417>(); // FunctionProtoType Local<v8::Value> (uint32_t)
  emit<_ast4419>(); // CXXMethodDecl Get
  emit<_ast4422>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
  emit<_ast4425>(); // CXXMethodDecl GetPropertyAttributes
  emit<_ast4428>(); // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4432>(); // CXXMethodDecl GetOwnPropertyDescriptor
  emit<_ast4435>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4439>(); // CXXMethodDecl Has
  emit<_ast4442>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4446>(); // CXXMethodDecl Delete
  emit<_ast4449>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4453>(); // CXXMethodDecl Has
  emit<_ast4456>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
  emit<_ast4459>(); // CXXMethodDecl Delete
  emit<_ast4462>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
  emit<_ast4465>(); // CXXMethodDecl SetAccessor
  emit<_ast4475>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
  emit<_ast4478>(); // TypedefType v8::AccessorNameGetterCallback
  emit<_ast4479>(); // TypedefType v8::AccessorNameSetterCallback
  emit<_ast4481>(); // EnumType v8::AccessControl
  emit<_ast4482>(); // EnumType v8::SideEffectType
  emit<_ast4484>(); // CXXMethodDecl SetAccessorProperty
  emit<_ast4490>(); // FunctionProtoType void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
  emit<_ast4494>(); // CXXMethodDecl SetNativeDataProperty
  emit<_ast4503>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
  emit<_ast4508>(); // CXXMethodDecl SetLazyDataProperty
  emit<_ast4516>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
  emit<_ast4521>(); // CXXMethodDecl HasPrivate
  emit<_ast4524>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
  emit<_ast4528>(); // CXXMethodDecl SetPrivate
  emit<_ast4532>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
  emit<_ast4537>(); // CXXMethodDecl DeletePrivate
  emit<_ast4540>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
  emit<_ast4544>(); // CXXMethodDecl GetPrivate
  emit<_ast4547>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
  emit<_ast4551>(); // CXXMethodDecl GetPropertyNames
  emit<_ast4553>(); // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
  emit<_ast4556>(); // CXXMethodDecl GetPropertyNames
  emit<_ast4562>(); // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
  emit<_ast4564>(); // EnumType v8::KeyCollectionMode
  emit<_ast4565>(); // EnumType v8::PropertyFilter
  emit<_ast4566>(); // EnumType v8::IndexFilter
  emit<_ast4567>(); // EnumType v8::KeyConversionMode
  emit<_ast4569>(); // CXXMethodDecl GetOwnPropertyNames
  emit<_ast4571>(); // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>)
  emit<_ast4574>(); // CXXMethodDecl GetOwnPropertyNames
  emit<_ast4578>(); // FunctionProtoType MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
  emit<_ast4581>(); // CXXMethodDecl GetPrototype
  emit<_ast4582>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast4584>(); // CXXMethodDecl SetPrototype
  emit<_ast4587>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4591>(); // CXXMethodDecl FindInstanceInPrototypeChain
  emit<_ast4593>(); // FunctionProtoType Local<v8::Object> (Local<v8::FunctionTemplate>)
  emit<_ast4596>(); // CXXMethodDecl ObjectProtoToString
  emit<_ast4598>(); // FunctionProtoType MaybeLocal<v8::String> (Local<v8::Context>)
  emit<_ast4601>(); // CXXMethodDecl GetConstructorName
  emit<_ast4602>(); // FunctionProtoType Local<v8::String> ()
  emit<_ast4604>(); // CXXMethodDecl SetIntegrityLevel
  emit<_ast4607>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
  emit<_ast4609>(); // EnumType v8::IntegrityLevel
  emit<_ast4611>(); // CXXMethodDecl InternalFieldCount
  emit<_ast4612>(); // CXXMethodDecl InternalFieldCount
  emit<_ast4614>(); // FunctionProtoType int (const PersistentBase<v8::Object> &)
  emit<_ast4615>(); // LValueReferenceType const PersistentBase<v8::Object> &
  emit<_ast4616>(); // TemplateSpecializationType const PersistentBase<v8::Object>
  emit<_ast4618>(); // CXXMethodDecl InternalFieldCount
  emit<_ast4620>(); // FunctionProtoType int (const TracedGlobal<v8::Object> &)
  emit<_ast4621>(); // LValueReferenceType const TracedGlobal<v8::Object> &
  emit<_ast4622>(); // TemplateSpecializationType const TracedGlobal<v8::Object>
  emit<_ast4624>(); // CXXMethodDecl GetInternalField
  emit<_ast4626>(); // FunctionProtoType Local<v8::Value> (int)
  emit<_ast4628>(); // CXXMethodDecl SetInternalField
  emit<_ast4631>(); // FunctionProtoType void (int, Local<v8::Value>)
  emit<_ast4633>(); // CXXMethodDecl GetAlignedPointerFromInternalField
  emit<_ast4635>(); // FunctionProtoType void *(int)
  emit<_ast4636>(); // CXXMethodDecl GetAlignedPointerFromInternalField
  emit<_ast4639>(); // FunctionProtoType void *(const PersistentBase<v8::Object> &, int)
  emit<_ast4640>(); // LValueReferenceType const PersistentBase<v8::Object> &
  emit<_ast4641>(); // TemplateSpecializationType const PersistentBase<v8::Object>
  emit<_ast4643>(); // CXXMethodDecl GetAlignedPointerFromInternalField
  emit<_ast4646>(); // FunctionProtoType void *(const TracedGlobal<v8::Object> &, int)
  emit<_ast4647>(); // LValueReferenceType const TracedGlobal<v8::Object> &
  emit<_ast4648>(); // TemplateSpecializationType const TracedGlobal<v8::Object>
  emit<_ast4650>(); // CXXMethodDecl SetAlignedPointerInInternalField
  emit<_ast4653>(); // FunctionProtoType void (int, void *)
  emit<_ast4654>(); // CXXMethodDecl SetAlignedPointerInInternalFields
  emit<_ast4658>(); // FunctionProtoType void (int, int *, void **)
  emit<_ast4661>(); // CXXMethodDecl HasOwnProperty
  emit<_ast4664>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4668>(); // CXXMethodDecl HasOwnProperty
  emit<_ast4671>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
  emit<_ast4674>(); // CXXMethodDecl HasRealNamedProperty
  emit<_ast4677>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4681>(); // CXXMethodDecl HasRealIndexedProperty
  emit<_ast4684>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, uint32_t)
  emit<_ast4687>(); // CXXMethodDecl HasRealNamedCallbackProperty
  emit<_ast4690>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4694>(); // CXXMethodDecl GetRealNamedPropertyInPrototypeChain
  emit<_ast4697>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4701>(); // CXXMethodDecl GetRealNamedPropertyAttributesInPrototypeChain
  emit<_ast4704>(); // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4708>(); // CXXMethodDecl GetRealNamedProperty
  emit<_ast4711>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4715>(); // CXXMethodDecl GetRealNamedPropertyAttributes
  emit<_ast4718>(); // FunctionProtoType Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
  emit<_ast4722>(); // CXXMethodDecl HasNamedLookupInterceptor
  emit<_ast4723>(); // CXXMethodDecl HasIndexedLookupInterceptor
  emit<_ast4724>(); // CXXMethodDecl GetIdentityHash
  emit<_ast4725>(); // CXXMethodDecl Clone
  emit<_ast4726>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast4728>(); // CXXMethodDecl CreationContext
  emit<_ast4729>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast4731>(); // CXXMethodDecl CreationContext
  emit<_ast4733>(); // FunctionProtoType Local<v8::Context> (const PersistentBase<v8::Object> &)
  emit<_ast4734>(); // LValueReferenceType const PersistentBase<v8::Object> &
  emit<_ast4735>(); // TemplateSpecializationType const PersistentBase<v8::Object>
  emit<_ast4738>(); // CXXMethodDecl IsCallable
  emit<_ast4739>(); // CXXMethodDecl IsConstructor
  emit<_ast4740>(); // CXXMethodDecl CallAsFunction
  emit<_ast4745>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
  emit<_ast4750>(); // CXXMethodDecl CallAsConstructor
  emit<_ast4754>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
  emit<_ast4758>(); // CXXMethodDecl GetIsolate
  emit<_ast4759>(); // FunctionProtoType v8::Isolate *()
  emit<_ast4760>(); // CXXMethodDecl PreviewEntries
  emit<_ast4762>(); // FunctionProtoType MaybeLocal<v8::Array> (bool *)
  emit<_ast4764>(); // CXXMethodDecl New
  emit<_ast4766>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *)
  emit<_ast4768>(); // CXXMethodDecl New
  emit<_ast4774>(); // FunctionProtoType Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
  emit<_ast4776>(); // PointerType Local<v8::Name> *
  emit<_ast4778>(); // PointerType Local<v8::Value> *
  emit<_ast4781>(); // CXXMethodDecl Cast
  emit<_ast4783>(); // FunctionProtoType v8::Object *(v8::Value *)
  emit<_ast4785>(); // CXXMethodDecl Length
  emit<_ast4786>(); // PointerType const v8::Array *
  emit<_ast4787>(); // RecordType const v8::Array
  emit<_ast4788>(); // RecordType v8::Array
  emit<_ast4789>(); // CXXMethodDecl New
  emit<_ast4792>(); // FunctionProtoType Local<v8::Array> (v8::Isolate *, int)
  emit<_ast4794>(); // CXXMethodDecl New
  emit<_ast4798>(); // FunctionProtoType Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
  emit<_ast4799>(); // PointerType Local<v8::Value> *
  emit<_ast4802>(); // CXXMethodDecl Cast
  emit<_ast4804>(); // FunctionProtoType v8::Array *(v8::Value *)
  emit<_ast4805>(); // PointerType v8::Array *
  emit<_ast4808>(); // CXXMethodDecl Size
  emit<_ast4809>(); // PointerType const v8::Map *
  emit<_ast4810>(); // RecordType const v8::Map
  emit<_ast4811>(); // RecordType v8::Map
  emit<_ast4812>(); // CXXMethodDecl Clear
  emit<_ast4813>(); // PointerType v8::Map *
  emit<_ast4814>(); // CXXMethodDecl Get
  emit<_ast4817>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4821>(); // CXXMethodDecl Set
  emit<_ast4825>(); // FunctionProtoType MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
  emit<_ast4830>(); // CXXMethodDecl Has
  emit<_ast4833>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4837>(); // CXXMethodDecl Delete
  emit<_ast4840>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4844>(); // CXXMethodDecl AsArray
  emit<_ast4845>(); // FunctionProtoType Local<v8::Array> () const
  emit<_ast4847>(); // CXXMethodDecl New
  emit<_ast4849>(); // FunctionProtoType Local<v8::Map> (v8::Isolate *)
  emit<_ast4851>(); // CXXMethodDecl Cast
  emit<_ast4853>(); // FunctionProtoType v8::Map *(v8::Value *)
  emit<_ast4856>(); // CXXMethodDecl Size
  emit<_ast4857>(); // PointerType const v8::Set *
  emit<_ast4858>(); // RecordType const v8::Set
  emit<_ast4859>(); // RecordType v8::Set
  emit<_ast4860>(); // CXXMethodDecl Clear
  emit<_ast4861>(); // PointerType v8::Set *
  emit<_ast4862>(); // CXXMethodDecl Add
  emit<_ast4865>(); // FunctionProtoType MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4869>(); // CXXMethodDecl Has
  emit<_ast4872>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4876>(); // CXXMethodDecl Delete
  emit<_ast4879>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast4883>(); // CXXMethodDecl AsArray
  emit<_ast4884>(); // FunctionProtoType Local<v8::Array> () const
  emit<_ast4886>(); // CXXMethodDecl New
  emit<_ast4888>(); // FunctionProtoType Local<v8::Set> (v8::Isolate *)
  emit<_ast4890>(); // CXXMethodDecl Cast
  emit<_ast4892>(); // FunctionProtoType v8::Set *(v8::Value *)
  emit<_ast4897>(); // CXXConstructorDecl ReturnValue<T>
  emit<_ast4899>(); // FunctionProtoType void (const ReturnValue<S> &)
  emit<_ast4900>(); // LValueReferenceType const ReturnValue<S> &
  emit<_ast4901>(); // TemplateSpecializationType const ReturnValue<S>
  emit<_ast4903>(); // PointerType ReturnValue<T> *
  emit<_ast4907>(); // CXXMethodDecl Set
  emit<_ast4909>(); // FunctionProtoType void (const Global<S> &)
  emit<_ast4910>(); // LValueReferenceType const Global<S> &
  emit<_ast4911>(); // TemplateSpecializationType const Global<S>
  emit<_ast4915>(); // CXXMethodDecl Set
  emit<_ast4917>(); // FunctionProtoType void (const TracedGlobal<S> &)
  emit<_ast4918>(); // LValueReferenceType const TracedGlobal<S> &
  emit<_ast4919>(); // TemplateSpecializationType const TracedGlobal<S>
  emit<_ast4923>(); // CXXMethodDecl Set
  emit<_ast4925>(); // FunctionProtoType void (const Local<S>)
  emit<_ast4926>(); // TemplateSpecializationType const Local<S>
  emit<_ast4928>(); // CXXMethodDecl Set
  emit<_ast4930>(); // CXXMethodDecl Set
  emit<_ast4932>(); // CXXMethodDecl Set
  emit<_ast4934>(); // FunctionProtoType void (int32_t)
  emit<_ast4935>(); // CXXMethodDecl Set
  emit<_ast4937>(); // CXXMethodDecl SetNull
  emit<_ast4938>(); // CXXMethodDecl SetUndefined
  emit<_ast4939>(); // CXXMethodDecl SetEmptyString
  emit<_ast4940>(); // CXXMethodDecl GetIsolate
  emit<_ast4941>(); // PointerType const ReturnValue<T> *
  emit<_ast4942>(); // InjectedClassNameType const ReturnValue<T>
  emit<_ast4945>(); // CXXMethodDecl Set
  emit<_ast4947>(); // FunctionProtoType void (S *)
  emit<_ast4948>(); // PointerType S *
  emit<_ast4950>(); // CXXMethodDecl Get
  emit<_ast4951>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4955>(); // CXXMethodDecl Length
  emit<_ast4956>(); // PointerType const FunctionCallbackInfo<T> *
  emit<_ast4957>(); // InjectedClassNameType const FunctionCallbackInfo<T>
  emit<_ast4959>(); // CXXMethodDecl operator[]
  emit<_ast4961>(); // FunctionProtoType Local<v8::Value> (int) const
  emit<_ast4963>(); // CXXMethodDecl This
  emit<_ast4964>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast4966>(); // CXXMethodDecl Holder
  emit<_ast4967>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast4969>(); // CXXMethodDecl NewTarget
  emit<_ast4970>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4972>(); // CXXMethodDecl IsConstructCall
  emit<_ast4973>(); // CXXMethodDecl Data
  emit<_ast4974>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast4976>(); // CXXMethodDecl GetIsolate
  emit<_ast4977>(); // CXXMethodDecl GetReturnValue
  emit<_ast4978>(); // FunctionProtoType ReturnValue<T> () const
  emit<_ast4987>(); // CXXConstructorDecl FunctionCallbackInfo<T>
  emit<_ast4991>(); // FunctionProtoType void (internal::Address *, internal::Address *, int)
  emit<_ast4992>(); // PointerType FunctionCallbackInfo<T> *
  emit<_ast4998>(); // CXXMethodDecl GetIsolate
  emit<_ast4999>(); // PointerType const PropertyCallbackInfo<T> *
  emit<_ast5000>(); // InjectedClassNameType const PropertyCallbackInfo<T>
  emit<_ast5002>(); // CXXMethodDecl Data
  emit<_ast5003>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5005>(); // CXXMethodDecl This
  emit<_ast5006>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast5008>(); // CXXMethodDecl Holder
  emit<_ast5009>(); // FunctionProtoType Local<v8::Object> () const
  emit<_ast5011>(); // CXXMethodDecl GetReturnValue
  emit<_ast5012>(); // FunctionProtoType ReturnValue<T> () const
  emit<_ast5014>(); // CXXMethodDecl ShouldThrowOnError
  emit<_ast5023>(); // CXXConstructorDecl PropertyCallbackInfo<T>
  emit<_ast5025>(); // FunctionProtoType void (internal::Address *)
  emit<_ast5026>(); // PointerType PropertyCallbackInfo<T> *
  emit<_ast5028>(); // TypedefDecl FunctionCallback
  emit<_ast5029>(); // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
  emit<_ast5030>(); // ParenType void (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast5031>(); // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast5032>(); // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
  emit<_ast5033>(); // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
  emit<_ast5039>(); // CXXMethodDecl New
  emit<_ast5046>(); // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
  emit<_ast5048>(); // TypedefType v8::FunctionCallback
  emit<_ast5050>(); // EnumType v8::ConstructorBehavior
  emit<_ast5052>(); // CXXMethodDecl NewInstance
  emit<_ast5056>(); // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
  emit<_ast5060>(); // PointerType const v8::Function *
  emit<_ast5061>(); // RecordType const v8::Function
  emit<_ast5062>(); // RecordType v8::Function
  emit<_ast5063>(); // CXXMethodDecl NewInstance
  emit<_ast5065>(); // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>) const
  emit<_ast5068>(); // CXXMethodDecl NewInstanceWithSideEffectType
  emit<_ast5073>(); // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
  emit<_ast5077>(); // CXXMethodDecl Call
  emit<_ast5082>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
  emit<_ast5087>(); // PointerType v8::Function *
  emit<_ast5088>(); // CXXMethodDecl SetName
  emit<_ast5090>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast5092>(); // CXXMethodDecl GetName
  emit<_ast5093>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5095>(); // CXXMethodDecl GetInferredName
  emit<_ast5096>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5098>(); // CXXMethodDecl GetDebugName
  emit<_ast5099>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5101>(); // CXXMethodDecl GetDisplayName
  emit<_ast5102>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5104>(); // CXXMethodDecl GetScriptLineNumber
  emit<_ast5105>(); // CXXMethodDecl GetScriptColumnNumber
  emit<_ast5106>(); // CXXMethodDecl ScriptId
  emit<_ast5107>(); // CXXMethodDecl GetBoundFunction
  emit<_ast5108>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5110>(); // CXXMethodDecl GetScriptOrigin
  emit<_ast5111>(); // CXXMethodDecl Cast
  emit<_ast5113>(); // FunctionProtoType v8::Function *(v8::Value *)
  emit<_ast5122>(); // CXXMethodDecl New
  emit<_ast5124>(); // FunctionProtoType MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
  emit<_ast5127>(); // CXXMethodDecl GetPromise
  emit<_ast5128>(); // FunctionProtoType Local<v8::Promise> ()
  emit<_ast5130>(); // PointerType v8::Promise::Resolver *
  emit<_ast5131>(); // RecordType v8::Promise::Resolver
  emit<_ast5132>(); // CXXMethodDecl Resolve
  emit<_ast5135>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast5139>(); // CXXMethodDecl Reject
  emit<_ast5142>(); // FunctionProtoType Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
  emit<_ast5146>(); // CXXMethodDecl Cast
  emit<_ast5148>(); // FunctionProtoType v8::Promise::Resolver *(v8::Value *)
  emit<_ast5149>(); // CXXMethodDecl Catch
  emit<_ast5152>(); // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
  emit<_ast5156>(); // PointerType v8::Promise *
  emit<_ast5157>(); // RecordType v8::Promise
  emit<_ast5158>(); // CXXMethodDecl Then
  emit<_ast5161>(); // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
  emit<_ast5165>(); // CXXMethodDecl Then
  emit<_ast5169>(); // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
  emit<_ast5174>(); // CXXMethodDecl HasHandler
  emit<_ast5175>(); // CXXMethodDecl Result
  emit<_ast5176>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast5178>(); // CXXMethodDecl State
  emit<_ast5179>(); // FunctionProtoType v8::Promise::PromiseState ()
  emit<_ast5180>(); // EnumType v8::Promise::PromiseState
  emit<_ast5181>(); // CXXMethodDecl MarkAsHandled
  emit<_ast5182>(); // CXXMethodDecl Cast
  emit<_ast5184>(); // FunctionProtoType v8::Promise *(v8::Value *)
  emit<_ast5187>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5188>(); // PointerType v8::PropertyDescriptor *
  emit<_ast5189>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5191>(); // FunctionProtoType void (Local<v8::Value>)
  emit<_ast5193>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5196>(); // FunctionProtoType void (Local<v8::Value>, bool)
  emit<_ast5198>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5201>(); // FunctionProtoType void (Local<v8::Value>, Local<v8::Value>)
  emit<_ast5204>(); // CXXDestructorDecl ~PropertyDescriptor
  emit<_ast5205>(); // FunctionProtoType void ()
  emit<_ast5206>(); // CXXMethodDecl value
  emit<_ast5207>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5209>(); // PointerType const v8::PropertyDescriptor *
  emit<_ast5210>(); // RecordType const v8::PropertyDescriptor
  emit<_ast5211>(); // CXXMethodDecl has_value
  emit<_ast5212>(); // CXXMethodDecl get
  emit<_ast5213>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5215>(); // CXXMethodDecl has_get
  emit<_ast5216>(); // CXXMethodDecl set
  emit<_ast5217>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast5219>(); // CXXMethodDecl has_set
  emit<_ast5220>(); // CXXMethodDecl set_enumerable
  emit<_ast5222>(); // CXXMethodDecl enumerable
  emit<_ast5223>(); // CXXMethodDecl has_enumerable
  emit<_ast5224>(); // CXXMethodDecl set_configurable
  emit<_ast5226>(); // CXXMethodDecl configurable
  emit<_ast5227>(); // CXXMethodDecl has_configurable
  emit<_ast5228>(); // CXXMethodDecl writable
  emit<_ast5229>(); // CXXMethodDecl has_writable
  emit<_ast5231>(); // CXXMethodDecl get_private
  emit<_ast5232>(); // FunctionProtoType v8::PropertyDescriptor::PrivateData *() const
  emit<_ast5233>(); // PointerType v8::PropertyDescriptor::PrivateData *
  emit<_ast5234>(); // RecordType v8::PropertyDescriptor::PrivateData
  emit<_ast5235>(); // CXXConstructorDecl PropertyDescriptor
  emit<_ast5237>(); // FunctionProtoType void (const v8::PropertyDescriptor &)
  emit<_ast5238>(); // LValueReferenceType const v8::PropertyDescriptor &
  emit<_ast5239>(); // CXXMethodDecl operator=
  emit<_ast5242>(); // CXXMethodDecl GetTarget
  emit<_ast5243>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast5245>(); // PointerType v8::Proxy *
  emit<_ast5246>(); // RecordType v8::Proxy
  emit<_ast5247>(); // CXXMethodDecl GetHandler
  emit<_ast5248>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast5250>(); // CXXMethodDecl IsRevoked
  emit<_ast5251>(); // CXXMethodDecl Revoke
  emit<_ast5252>(); // CXXMethodDecl New
  emit<_ast5256>(); // FunctionProtoType MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
  emit<_ast5261>(); // CXXMethodDecl Cast
  emit<_ast5263>(); // FunctionProtoType v8::Proxy *(v8::Value *)
  emit<_ast5268>(); // CXXConstructorDecl MemorySpan<T>
  emit<_ast5269>(); // PointerType MemorySpan<T> *
  emit<_ast5271>(); // CXXConstructorDecl MemorySpan<T>
  emit<_ast5274>(); // FunctionProtoType void (T *, size_t)
  emit<_ast5275>(); // PointerType T *
  emit<_ast5277>(); // CXXMethodDecl data
  emit<_ast5278>(); // FunctionProtoType T *() const
  emit<_ast5279>(); // PointerType const MemorySpan<T> *
  emit<_ast5280>(); // InjectedClassNameType const MemorySpan<T>
  emit<_ast5281>(); // CXXMethodDecl size
  emit<_ast5283>(); // CXXConstructorDecl MemorySpan
  emit<_ast5284>(); // FunctionProtoType void ()
  emit<_ast5285>(); // PointerType v8::MemorySpan<const unsigned char> *
  emit<_ast5286>(); // RecordType v8::MemorySpan<const unsigned char>
  emit<_ast5287>(); // CXXConstructorDecl MemorySpan
  emit<_ast5290>(); // FunctionProtoType void (const unsigned char *, size_t)
  emit<_ast5291>(); // PointerType const unsigned char *
  emit<_ast5293>(); // CXXMethodDecl data
  emit<_ast5294>(); // FunctionProtoType const unsigned char *() const
  emit<_ast5295>(); // PointerType const v8::MemorySpan<const unsigned char> *
  emit<_ast5296>(); // RecordType const v8::MemorySpan<const unsigned char>
  emit<_ast5297>(); // CXXMethodDecl size
  emit<_ast5298>(); // CXXConstructorDecl MemorySpan
  emit<_ast5300>(); // FunctionProtoType void (const v8::MemorySpan<const unsigned char> &)
  emit<_ast5301>(); // LValueReferenceType const v8::MemorySpan<const unsigned char> &
  emit<_ast5302>(); // CXXConstructorDecl MemorySpan
  emit<_ast5304>(); // FunctionProtoType void (v8::MemorySpan<const unsigned char> &&)
  emit<_ast5305>(); // RValueReferenceType v8::MemorySpan<const unsigned char> &&
  emit<_ast5310>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5313>(); // FunctionProtoType void (std::unique_ptr<const uint8_t []>, size_t)
  emit<_ast5315>(); // PointerType v8::OwnedBuffer *
  emit<_ast5316>(); // RecordType v8::OwnedBuffer
  emit<_ast5317>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5318>(); // FunctionProtoType void ()
  emit<_ast5319>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5321>(); // FunctionProtoType void (const v8::OwnedBuffer &)
  emit<_ast5322>(); // LValueReferenceType const v8::OwnedBuffer &
  emit<_ast5323>(); // RecordType const v8::OwnedBuffer
  emit<_ast5324>(); // CXXConstructorDecl OwnedBuffer
  emit<_ast5326>(); // FunctionProtoType void (v8::OwnedBuffer &&) noexcept
  emit<_ast5327>(); // RValueReferenceType v8::OwnedBuffer &&
  emit<_ast5328>(); // CXXMethodDecl operator=
  emit<_ast5330>(); // FunctionProtoType v8::OwnedBuffer &(v8::OwnedBuffer &&)
  emit<_ast5331>(); // LValueReferenceType v8::OwnedBuffer &
  emit<_ast5332>(); // CXXDestructorDecl ~OwnedBuffer
  emit<_ast5333>(); // CXXMethodDecl operator=
  emit<_ast5335>(); // FunctionProtoType v8::OwnedBuffer &(const v8::OwnedBuffer &)
  emit<_ast5338>(); // CXXMethodDecl Serialize
  emit<_ast5339>(); // FunctionProtoType v8::OwnedBuffer ()
  emit<_ast5340>(); // PointerType v8::CompiledWasmModule *
  emit<_ast5341>(); // RecordType v8::CompiledWasmModule
  emit<_ast5342>(); // CXXMethodDecl GetWireBytesRef
  emit<_ast5343>(); // FunctionProtoType MemorySpan<const uint8_t> ()
  emit<_ast5345>(); // CXXConstructorDecl CompiledWasmModule
  emit<_ast5347>(); // FunctionProtoType void (const v8::CompiledWasmModule &)
  emit<_ast5348>(); // LValueReferenceType const v8::CompiledWasmModule &
  emit<_ast5349>(); // RecordType const v8::CompiledWasmModule
  emit<_ast5350>(); // CXXConstructorDecl CompiledWasmModule
  emit<_ast5352>(); // FunctionProtoType void (v8::CompiledWasmModule &&)
  emit<_ast5353>(); // RValueReferenceType v8::CompiledWasmModule &&
  emit<_ast5354>(); // CXXMethodDecl operator=
  emit<_ast5356>(); // FunctionProtoType v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
  emit<_ast5357>(); // LValueReferenceType v8::CompiledWasmModule &
  emit<_ast5358>(); // CXXDestructorDecl ~CompiledWasmModule
  emit<_ast5359>(); // FunctionProtoType void ()
  emit<_ast5363>(); // CXXConstructorDecl TransferrableModule
  emit<_ast5365>(); // FunctionProtoType void (v8::WasmModuleObject::TransferrableModule &&)
  emit<_ast5366>(); // RValueReferenceType v8::WasmModuleObject::TransferrableModule &&
  emit<_ast5367>(); // RecordType v8::WasmModuleObject::TransferrableModule
  emit<_ast5368>(); // PointerType v8::WasmModuleObject::TransferrableModule *
  emit<_ast5369>(); // CXXConstructorDecl TransferrableModule
  emit<_ast5371>(); // FunctionProtoType void (const v8::WasmModuleObject::TransferrableModule &)
  emit<_ast5372>(); // LValueReferenceType const v8::WasmModuleObject::TransferrableModule &
  emit<_ast5373>(); // RecordType const v8::WasmModuleObject::TransferrableModule
  emit<_ast5374>(); // CXXMethodDecl operator=
  emit<_ast5376>(); // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
  emit<_ast5377>(); // LValueReferenceType v8::WasmModuleObject::TransferrableModule &
  emit<_ast5378>(); // CXXMethodDecl operator=
  emit<_ast5380>(); // FunctionProtoType v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
  emit<_ast5381>(); // CXXDestructorDecl ~TransferrableModule
  emit<_ast5382>(); // FunctionProtoType void ()
  emit<_ast5383>(); // CXXMethodDecl GetTransferrableModule
  emit<_ast5384>(); // FunctionProtoType v8::WasmModuleObject::TransferrableModule ()
  emit<_ast5385>(); // PointerType v8::WasmModuleObject *
  emit<_ast5386>(); // RecordType v8::WasmModuleObject
  emit<_ast5387>(); // CXXMethodDecl FromTransferrableModule
  emit<_ast5390>(); // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
  emit<_ast5392>(); // CXXMethodDecl GetCompiledModule
  emit<_ast5393>(); // FunctionProtoType v8::CompiledWasmModule ()
  emit<_ast5394>(); // CXXMethodDecl DeserializeOrCompile
  emit<_ast5398>(); // FunctionProtoType MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
  emit<_ast5402>(); // CXXMethodDecl Cast
  emit<_ast5404>(); // FunctionProtoType v8::WasmModuleObject *(v8::Value *)
  emit<_ast5410>(); // CXXDestructorDecl ~Client
  emit<_ast5411>(); // FunctionProtoType void ()
  emit<_ast5412>(); // PointerType v8::WasmStreaming::Client *
  emit<_ast5413>(); // RecordType v8::WasmStreaming::Client
  emit<_ast5414>(); // CXXMethodDecl OnModuleCompiled
  emit<_ast5416>(); // FunctionProtoType void (v8::CompiledWasmModule)
  emit<_ast5417>(); // CXXMethodDecl operator=
  emit<_ast5419>(); // FunctionProtoType v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
  emit<_ast5420>(); // LValueReferenceType const v8::WasmStreaming::Client &
  emit<_ast5421>(); // RecordType const v8::WasmStreaming::Client
  emit<_ast5422>(); // LValueReferenceType v8::WasmStreaming::Client &
  emit<_ast5423>(); // CXXConstructorDecl WasmStreaming
  emit<_ast5425>(); // FunctionProtoType void (std::unique_ptr<WasmStreamingImpl>)
  emit<_ast5427>(); // PointerType v8::WasmStreaming *
  emit<_ast5428>(); // RecordType v8::WasmStreaming
  emit<_ast5429>(); // CXXDestructorDecl ~WasmStreaming
  emit<_ast5430>(); // FunctionProtoType void ()
  emit<_ast5431>(); // CXXMethodDecl OnBytesReceived
  emit<_ast5434>(); // FunctionProtoType void (const uint8_t *, size_t)
  emit<_ast5435>(); // CXXMethodDecl Finish
  emit<_ast5436>(); // CXXMethodDecl Abort
  emit<_ast5438>(); // FunctionProtoType void (MaybeLocal<v8::Value>)
  emit<_ast5440>(); // CXXMethodDecl SetCompiledModuleBytes
  emit<_ast5443>(); // FunctionProtoType bool (const uint8_t *, size_t)
  emit<_ast5444>(); // CXXMethodDecl SetClient
  emit<_ast5446>(); // FunctionProtoType void (std::shared_ptr<Client>)
  emit<_ast5448>(); // CXXMethodDecl Unpack
  emit<_ast5451>(); // FunctionProtoType std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
  emit<_ast5454>(); // CXXConstructorDecl WasmStreaming
  emit<_ast5456>(); // FunctionProtoType void (const v8::WasmStreaming &)
  emit<_ast5457>(); // LValueReferenceType const v8::WasmStreaming &
  emit<_ast5458>(); // RecordType const v8::WasmStreaming
  emit<_ast5461>(); // CXXConstructorDecl WasmModuleObjectBuilderStreaming
  emit<_ast5463>(); // PointerType v8::WasmModuleObjectBuilderStreaming *
  emit<_ast5464>(); // RecordType v8::WasmModuleObjectBuilderStreaming
  emit<_ast5465>(); // CXXMethodDecl OnBytesReceived
  emit<_ast5468>(); // CXXMethodDecl Finish
  emit<_ast5469>(); // CXXMethodDecl Abort
  emit<_ast5471>(); // FunctionProtoType void (MaybeLocal<v8::Value>)
  emit<_ast5473>(); // CXXMethodDecl GetPromise
  emit<_ast5474>(); // FunctionProtoType Local<v8::Promise> ()
  emit<_ast5476>(); // CXXDestructorDecl ~WasmModuleObjectBuilderStreaming
  emit<_ast5477>(); // FunctionProtoType void ()
  emit<_ast5484>(); // CXXDestructorDecl ~Allocator
  emit<_ast5485>(); // FunctionProtoType void ()
  emit<_ast5486>(); // PointerType v8::ArrayBuffer::Allocator *
  emit<_ast5487>(); // RecordType v8::ArrayBuffer::Allocator
  emit<_ast5488>(); // CXXMethodDecl Allocate
  emit<_ast5490>(); // FunctionProtoType void *(size_t)
  emit<_ast5491>(); // CXXMethodDecl AllocateUninitialized
  emit<_ast5493>(); // CXXMethodDecl Free
  emit<_ast5496>(); // FunctionProtoType void (void *, size_t)
  emit<_ast5500>(); // CXXMethodDecl NewDefaultAllocator
  emit<_ast5501>(); // FunctionProtoType v8::ArrayBuffer::Allocator *()
  emit<_ast5502>(); // CXXMethodDecl operator=
  emit<_ast5504>(); // FunctionProtoType v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
  emit<_ast5505>(); // LValueReferenceType const v8::ArrayBuffer::Allocator &
  emit<_ast5506>(); // RecordType const v8::ArrayBuffer::Allocator
  emit<_ast5507>(); // LValueReferenceType v8::ArrayBuffer::Allocator &
  emit<_ast5510>(); // TypeAliasDecl DeleterCallback
  emit<_ast5511>(); // PointerType void (*)(void *, size_t, void *)
  emit<_ast5512>(); // ParenType void (void *, size_t, void *)
  emit<_ast5513>(); // FunctionProtoType void (void *, size_t, void *)
  emit<_ast5514>(); // CXXConstructorDecl Contents
  emit<_ast5515>(); // PointerType v8::ArrayBuffer::Contents *
  emit<_ast5516>(); // RecordType v8::ArrayBuffer::Contents
  emit<_ast5517>(); // CXXMethodDecl AllocationBase
  emit<_ast5518>(); // FunctionProtoType void *() const
  emit<_ast5519>(); // PointerType const v8::ArrayBuffer::Contents *
  emit<_ast5520>(); // RecordType const v8::ArrayBuffer::Contents
  emit<_ast5521>(); // CXXMethodDecl AllocationLength
  emit<_ast5522>(); // CXXMethodDecl AllocationMode
  emit<_ast5523>(); // FunctionProtoType Allocator::AllocationMode () const
  emit<_ast5525>(); // CXXMethodDecl Data
  emit<_ast5526>(); // CXXMethodDecl ByteLength
  emit<_ast5527>(); // CXXMethodDecl Deleter
  emit<_ast5528>(); // FunctionProtoType v8::ArrayBuffer::Contents::DeleterCallback () const
  emit<_ast5529>(); // TypedefType v8::ArrayBuffer::Contents::DeleterCallback
  emit<_ast5530>(); // CXXMethodDecl DeleterData
  emit<_ast5531>(); // CXXMethodDecl ByteLength
  emit<_ast5532>(); // PointerType const v8::ArrayBuffer *
  emit<_ast5533>(); // RecordType const v8::ArrayBuffer
  emit<_ast5534>(); // RecordType v8::ArrayBuffer
  emit<_ast5535>(); // CXXMethodDecl New
  emit<_ast5538>(); // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
  emit<_ast5540>(); // CXXMethodDecl New
  emit<_ast5545>(); // FunctionProtoType Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
  emit<_ast5546>(); // EnumType v8::ArrayBufferCreationMode
  emit<_ast5548>(); // CXXMethodDecl IsExternal
  emit<_ast5549>(); // CXXMethodDecl IsDetachable
  emit<_ast5550>(); // CXXMethodDecl IsNeuterable
  emit<_ast5551>(); // CXXMethodDecl Detach
  emit<_ast5552>(); // PointerType v8::ArrayBuffer *
  emit<_ast5553>(); // CXXMethodDecl Neuter
  emit<_ast5554>(); // CXXMethodDecl Externalize
  emit<_ast5555>(); // FunctionProtoType v8::ArrayBuffer::Contents ()
  emit<_ast5556>(); // CXXMethodDecl GetContents
  emit<_ast5557>(); // CXXMethodDecl Cast
  emit<_ast5559>(); // FunctionProtoType v8::ArrayBuffer *(v8::Value *)
  emit<_ast5564>(); // CXXMethodDecl Buffer
  emit<_ast5565>(); // FunctionProtoType Local<v8::ArrayBuffer> ()
  emit<_ast5567>(); // PointerType v8::ArrayBufferView *
  emit<_ast5568>(); // RecordType v8::ArrayBufferView
  emit<_ast5569>(); // CXXMethodDecl ByteOffset
  emit<_ast5570>(); // FunctionProtoType size_t ()
  emit<_ast5571>(); // CXXMethodDecl ByteLength
  emit<_ast5572>(); // CXXMethodDecl CopyContents
  emit<_ast5575>(); // FunctionProtoType size_t (void *, size_t)
  emit<_ast5576>(); // CXXMethodDecl HasBuffer
  emit<_ast5577>(); // PointerType const v8::ArrayBufferView *
  emit<_ast5578>(); // RecordType const v8::ArrayBufferView
  emit<_ast5579>(); // CXXMethodDecl Cast
  emit<_ast5581>(); // FunctionProtoType v8::ArrayBufferView *(v8::Value *)
  emit<_ast5587>(); // CXXMethodDecl Length
  emit<_ast5588>(); // PointerType v8::TypedArray *
  emit<_ast5589>(); // RecordType v8::TypedArray
  emit<_ast5590>(); // CXXMethodDecl Cast
  emit<_ast5592>(); // FunctionProtoType v8::TypedArray *(v8::Value *)
  emit<_ast5595>(); // CXXMethodDecl New
  emit<_ast5599>(); // FunctionProtoType Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5602>(); // CXXMethodDecl New
  emit<_ast5606>(); // FunctionProtoType Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5609>(); // CXXMethodDecl Cast
  emit<_ast5611>(); // FunctionProtoType v8::Uint8Array *(v8::Value *)
  emit<_ast5612>(); // PointerType v8::Uint8Array *
  emit<_ast5613>(); // RecordType v8::Uint8Array
  emit<_ast5616>(); // CXXMethodDecl New
  emit<_ast5620>(); // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5623>(); // CXXMethodDecl New
  emit<_ast5627>(); // FunctionProtoType Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5630>(); // CXXMethodDecl Cast
  emit<_ast5632>(); // FunctionProtoType v8::Uint8ClampedArray *(v8::Value *)
  emit<_ast5633>(); // PointerType v8::Uint8ClampedArray *
  emit<_ast5634>(); // RecordType v8::Uint8ClampedArray
  emit<_ast5637>(); // CXXMethodDecl New
  emit<_ast5641>(); // FunctionProtoType Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5644>(); // CXXMethodDecl New
  emit<_ast5648>(); // FunctionProtoType Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5651>(); // CXXMethodDecl Cast
  emit<_ast5653>(); // FunctionProtoType v8::Int8Array *(v8::Value *)
  emit<_ast5654>(); // PointerType v8::Int8Array *
  emit<_ast5655>(); // RecordType v8::Int8Array
  emit<_ast5658>(); // CXXMethodDecl New
  emit<_ast5662>(); // FunctionProtoType Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5665>(); // CXXMethodDecl New
  emit<_ast5669>(); // FunctionProtoType Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5672>(); // CXXMethodDecl Cast
  emit<_ast5674>(); // FunctionProtoType v8::Uint16Array *(v8::Value *)
  emit<_ast5675>(); // PointerType v8::Uint16Array *
  emit<_ast5676>(); // RecordType v8::Uint16Array
  emit<_ast5679>(); // CXXMethodDecl New
  emit<_ast5683>(); // FunctionProtoType Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5686>(); // CXXMethodDecl New
  emit<_ast5690>(); // FunctionProtoType Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5693>(); // CXXMethodDecl Cast
  emit<_ast5695>(); // FunctionProtoType v8::Int16Array *(v8::Value *)
  emit<_ast5696>(); // PointerType v8::Int16Array *
  emit<_ast5697>(); // RecordType v8::Int16Array
  emit<_ast5700>(); // CXXMethodDecl New
  emit<_ast5704>(); // FunctionProtoType Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5707>(); // CXXMethodDecl New
  emit<_ast5711>(); // FunctionProtoType Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5714>(); // CXXMethodDecl Cast
  emit<_ast5716>(); // FunctionProtoType v8::Uint32Array *(v8::Value *)
  emit<_ast5717>(); // PointerType v8::Uint32Array *
  emit<_ast5718>(); // RecordType v8::Uint32Array
  emit<_ast5721>(); // CXXMethodDecl New
  emit<_ast5725>(); // FunctionProtoType Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5728>(); // CXXMethodDecl New
  emit<_ast5732>(); // FunctionProtoType Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5735>(); // CXXMethodDecl Cast
  emit<_ast5737>(); // FunctionProtoType v8::Int32Array *(v8::Value *)
  emit<_ast5738>(); // PointerType v8::Int32Array *
  emit<_ast5739>(); // RecordType v8::Int32Array
  emit<_ast5742>(); // CXXMethodDecl New
  emit<_ast5746>(); // FunctionProtoType Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5749>(); // CXXMethodDecl New
  emit<_ast5753>(); // FunctionProtoType Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5756>(); // CXXMethodDecl Cast
  emit<_ast5758>(); // FunctionProtoType v8::Float32Array *(v8::Value *)
  emit<_ast5759>(); // PointerType v8::Float32Array *
  emit<_ast5760>(); // RecordType v8::Float32Array
  emit<_ast5763>(); // CXXMethodDecl New
  emit<_ast5767>(); // FunctionProtoType Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5770>(); // CXXMethodDecl New
  emit<_ast5774>(); // FunctionProtoType Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5777>(); // CXXMethodDecl Cast
  emit<_ast5779>(); // FunctionProtoType v8::Float64Array *(v8::Value *)
  emit<_ast5780>(); // PointerType v8::Float64Array *
  emit<_ast5781>(); // RecordType v8::Float64Array
  emit<_ast5784>(); // CXXMethodDecl New
  emit<_ast5788>(); // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5791>(); // CXXMethodDecl New
  emit<_ast5795>(); // FunctionProtoType Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5798>(); // CXXMethodDecl Cast
  emit<_ast5800>(); // FunctionProtoType v8::BigInt64Array *(v8::Value *)
  emit<_ast5801>(); // PointerType v8::BigInt64Array *
  emit<_ast5802>(); // RecordType v8::BigInt64Array
  emit<_ast5805>(); // CXXMethodDecl New
  emit<_ast5809>(); // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5812>(); // CXXMethodDecl New
  emit<_ast5816>(); // FunctionProtoType Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5819>(); // CXXMethodDecl Cast
  emit<_ast5821>(); // FunctionProtoType v8::BigUint64Array *(v8::Value *)
  emit<_ast5822>(); // PointerType v8::BigUint64Array *
  emit<_ast5823>(); // RecordType v8::BigUint64Array
  emit<_ast5826>(); // CXXMethodDecl New
  emit<_ast5830>(); // FunctionProtoType Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
  emit<_ast5833>(); // CXXMethodDecl New
  emit<_ast5837>(); // FunctionProtoType Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
  emit<_ast5840>(); // CXXMethodDecl Cast
  emit<_ast5842>(); // FunctionProtoType v8::DataView *(v8::Value *)
  emit<_ast5843>(); // PointerType v8::DataView *
  emit<_ast5844>(); // RecordType v8::DataView
  emit<_ast5848>(); // TypeAliasDecl Allocator
  emit<_ast5850>(); // TypeAliasDecl DeleterCallback
  emit<_ast5851>(); // CXXConstructorDecl Contents
  emit<_ast5852>(); // PointerType v8::SharedArrayBuffer::Contents *
  emit<_ast5853>(); // RecordType v8::SharedArrayBuffer::Contents
  emit<_ast5854>(); // CXXMethodDecl AllocationBase
  emit<_ast5855>(); // PointerType const v8::SharedArrayBuffer::Contents *
  emit<_ast5856>(); // RecordType const v8::SharedArrayBuffer::Contents
  emit<_ast5857>(); // CXXMethodDecl AllocationLength
  emit<_ast5858>(); // CXXMethodDecl AllocationMode
  emit<_ast5859>(); // FunctionProtoType Allocator::AllocationMode () const
  emit<_ast5861>(); // CXXMethodDecl Data
  emit<_ast5862>(); // CXXMethodDecl ByteLength
  emit<_ast5863>(); // CXXMethodDecl Deleter
  emit<_ast5864>(); // FunctionProtoType v8::SharedArrayBuffer::Contents::DeleterCallback () const
  emit<_ast5865>(); // TypedefType v8::SharedArrayBuffer::Contents::DeleterCallback
  emit<_ast5866>(); // CXXMethodDecl DeleterData
  emit<_ast5867>(); // CXXMethodDecl ByteLength
  emit<_ast5868>(); // PointerType const v8::SharedArrayBuffer *
  emit<_ast5869>(); // RecordType const v8::SharedArrayBuffer
  emit<_ast5870>(); // RecordType v8::SharedArrayBuffer
  emit<_ast5871>(); // CXXMethodDecl New
  emit<_ast5874>(); // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
  emit<_ast5876>(); // CXXMethodDecl New
  emit<_ast5881>(); // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
  emit<_ast5883>(); // CXXMethodDecl New
  emit<_ast5887>(); // FunctionProtoType Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
  emit<_ast5888>(); // LValueReferenceType const SharedArrayBuffer::Contents &
  emit<_ast5889>(); // ElaboratedType const SharedArrayBuffer::Contents
  emit<_ast5892>(); // CXXMethodDecl IsExternal
  emit<_ast5893>(); // CXXMethodDecl Externalize
  emit<_ast5894>(); // FunctionProtoType v8::SharedArrayBuffer::Contents ()
  emit<_ast5895>(); // PointerType v8::SharedArrayBuffer *
  emit<_ast5896>(); // CXXMethodDecl GetContents
  emit<_ast5897>(); // CXXMethodDecl Cast
  emit<_ast5899>(); // FunctionProtoType v8::SharedArrayBuffer *(v8::Value *)
  emit<_ast5902>(); // CXXMethodDecl New
  emit<_ast5905>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, double)
  emit<_ast5908>(); // CXXMethodDecl ValueOf
  emit<_ast5909>(); // PointerType const v8::Date *
  emit<_ast5910>(); // RecordType const v8::Date
  emit<_ast5911>(); // RecordType v8::Date
  emit<_ast5912>(); // CXXMethodDecl Cast
  emit<_ast5914>(); // FunctionProtoType v8::Date *(v8::Value *)
  emit<_ast5915>(); // PointerType v8::Date *
  emit<_ast5917>(); // CXXMethodDecl New
  emit<_ast5920>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, double)
  emit<_ast5922>(); // CXXMethodDecl ValueOf
  emit<_ast5923>(); // PointerType const v8::NumberObject *
  emit<_ast5924>(); // RecordType const v8::NumberObject
  emit<_ast5925>(); // RecordType v8::NumberObject
  emit<_ast5926>(); // CXXMethodDecl Cast
  emit<_ast5928>(); // FunctionProtoType v8::NumberObject *(v8::Value *)
  emit<_ast5929>(); // PointerType v8::NumberObject *
  emit<_ast5931>(); // CXXMethodDecl New
  emit<_ast5934>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, int64_t)
  emit<_ast5936>(); // CXXMethodDecl ValueOf
  emit<_ast5937>(); // FunctionProtoType Local<v8::BigInt> () const
  emit<_ast5939>(); // PointerType const v8::BigIntObject *
  emit<_ast5940>(); // RecordType const v8::BigIntObject
  emit<_ast5941>(); // RecordType v8::BigIntObject
  emit<_ast5942>(); // CXXMethodDecl Cast
  emit<_ast5944>(); // FunctionProtoType v8::BigIntObject *(v8::Value *)
  emit<_ast5945>(); // PointerType v8::BigIntObject *
  emit<_ast5947>(); // CXXMethodDecl New
  emit<_ast5950>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, bool)
  emit<_ast5952>(); // CXXMethodDecl ValueOf
  emit<_ast5953>(); // PointerType const v8::BooleanObject *
  emit<_ast5954>(); // RecordType const v8::BooleanObject
  emit<_ast5955>(); // RecordType v8::BooleanObject
  emit<_ast5956>(); // CXXMethodDecl Cast
  emit<_ast5958>(); // FunctionProtoType v8::BooleanObject *(v8::Value *)
  emit<_ast5959>(); // PointerType v8::BooleanObject *
  emit<_ast5961>(); // CXXMethodDecl New
  emit<_ast5964>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::String>)
  emit<_ast5967>(); // CXXMethodDecl ValueOf
  emit<_ast5968>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast5970>(); // PointerType const v8::StringObject *
  emit<_ast5971>(); // RecordType const v8::StringObject
  emit<_ast5972>(); // RecordType v8::StringObject
  emit<_ast5973>(); // CXXMethodDecl Cast
  emit<_ast5975>(); // FunctionProtoType v8::StringObject *(v8::Value *)
  emit<_ast5976>(); // PointerType v8::StringObject *
  emit<_ast5978>(); // CXXMethodDecl New
  emit<_ast5981>(); // FunctionProtoType Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
  emit<_ast5984>(); // CXXMethodDecl ValueOf
  emit<_ast5985>(); // FunctionProtoType Local<v8::Symbol> () const
  emit<_ast5987>(); // PointerType const v8::SymbolObject *
  emit<_ast5988>(); // RecordType const v8::SymbolObject
  emit<_ast5989>(); // RecordType v8::SymbolObject
  emit<_ast5990>(); // CXXMethodDecl Cast
  emit<_ast5992>(); // FunctionProtoType v8::SymbolObject *(v8::Value *)
  emit<_ast5993>(); // PointerType v8::SymbolObject *
  emit<_ast6004>(); // CXXMethodDecl New
  emit<_ast6008>(); // FunctionProtoType MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
  emit<_ast6011>(); // EnumType v8::RegExp::Flags
  emit<_ast6013>(); // CXXMethodDecl GetSource
  emit<_ast6014>(); // FunctionProtoType Local<v8::String> () const
  emit<_ast6016>(); // PointerType const v8::RegExp *
  emit<_ast6017>(); // RecordType const v8::RegExp
  emit<_ast6018>(); // RecordType v8::RegExp
  emit<_ast6019>(); // CXXMethodDecl GetFlags
  emit<_ast6020>(); // FunctionProtoType v8::RegExp::Flags () const
  emit<_ast6021>(); // CXXMethodDecl Cast
  emit<_ast6023>(); // FunctionProtoType v8::RegExp *(v8::Value *)
  emit<_ast6024>(); // PointerType v8::RegExp *
  emit<_ast6026>(); // CXXMethodDecl New
  emit<_ast6029>(); // FunctionProtoType Local<v8::External> (v8::Isolate *, void *)
  emit<_ast6031>(); // CXXMethodDecl Cast
  emit<_ast6033>(); // FunctionProtoType v8::External *(v8::Value *)
  emit<_ast6034>(); // PointerType v8::External *
  emit<_ast6035>(); // RecordType v8::External
  emit<_ast6036>(); // CXXMethodDecl Value
  emit<_ast6037>(); // PointerType const v8::External *
  emit<_ast6038>(); // RecordType const v8::External
  emit<_ast6048>(); // CXXMethodDecl Set
  emit<_ast6052>(); // FunctionProtoType void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
  emit<_ast6055>(); // PointerType v8::Template *
  emit<_ast6056>(); // RecordType v8::Template
  emit<_ast6057>(); // CXXMethodDecl SetPrivate
  emit<_ast6061>(); // FunctionProtoType void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
  emit<_ast6064>(); // CXXMethodDecl Set
  emit<_ast6068>(); // FunctionProtoType void (v8::Isolate *, const char *, Local<v8::Data>)
  emit<_ast6070>(); // CXXMethodDecl SetAccessorProperty
  emit<_ast6076>(); // FunctionProtoType void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
  emit<_ast6080>(); // CXXMethodDecl SetNativeDataProperty
  emit<_ast6090>(); // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
  emit<_ast6092>(); // TypedefType v8::AccessorGetterCallback
  emit<_ast6093>(); // TypedefType v8::AccessorSetterCallback
  emit<_ast6096>(); // CXXMethodDecl SetNativeDataProperty
  emit<_ast6106>(); // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
  emit<_ast6110>(); // CXXMethodDecl SetLazyDataProperty
  emit<_ast6117>(); // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
  emit<_ast6120>(); // CXXMethodDecl SetIntrinsicDataProperty
  emit<_ast6124>(); // FunctionProtoType void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
  emit<_ast6126>(); // EnumType v8::Intrinsic
  emit<_ast6127>(); // TypedefDecl GenericNamedPropertyGetterCallback
  emit<_ast6128>(); // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6129>(); // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6130>(); // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6132>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6133>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6135>(); // TypedefDecl GenericNamedPropertySetterCallback
  emit<_ast6136>(); // PointerType void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6137>(); // ParenType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6138>(); // FunctionProtoType void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6141>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6142>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6144>(); // TypedefDecl GenericNamedPropertyQueryCallback
  emit<_ast6145>(); // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
  emit<_ast6146>(); // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
  emit<_ast6147>(); // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
  emit<_ast6149>(); // LValueReferenceType const PropertyCallbackInfo<v8::Integer> &
  emit<_ast6150>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Integer>
  emit<_ast6152>(); // TypedefDecl GenericNamedPropertyDeleterCallback
  emit<_ast6153>(); // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
  emit<_ast6154>(); // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
  emit<_ast6155>(); // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
  emit<_ast6157>(); // LValueReferenceType const PropertyCallbackInfo<v8::Boolean> &
  emit<_ast6158>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Boolean>
  emit<_ast6160>(); // TypedefDecl GenericNamedPropertyEnumeratorCallback
  emit<_ast6161>(); // PointerType void (*)(const PropertyCallbackInfo<v8::Array> &)
  emit<_ast6162>(); // ParenType void (const PropertyCallbackInfo<v8::Array> &)
  emit<_ast6163>(); // FunctionProtoType void (const PropertyCallbackInfo<v8::Array> &)
  emit<_ast6164>(); // LValueReferenceType const PropertyCallbackInfo<v8::Array> &
  emit<_ast6165>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Array>
  emit<_ast6167>(); // TypedefDecl GenericNamedPropertyDefinerCallback
  emit<_ast6168>(); // PointerType void (*)(Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6169>(); // ParenType void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6170>(); // FunctionProtoType void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6172>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6173>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6175>(); // TypedefDecl GenericNamedPropertyDescriptorCallback
  emit<_ast6176>(); // PointerType void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6177>(); // ParenType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6178>(); // FunctionProtoType void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6180>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6181>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6183>(); // TypedefDecl IndexedPropertyGetterCallback
  emit<_ast6184>(); // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6185>(); // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6186>(); // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6187>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6188>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6190>(); // TypedefDecl IndexedPropertySetterCallback
  emit<_ast6191>(); // PointerType void (*)(uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6192>(); // ParenType void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6193>(); // FunctionProtoType void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6195>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6196>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6198>(); // TypedefDecl IndexedPropertyQueryCallback
  emit<_ast6199>(); // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Integer> &)
  emit<_ast6200>(); // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
  emit<_ast6201>(); // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
  emit<_ast6202>(); // LValueReferenceType const PropertyCallbackInfo<v8::Integer> &
  emit<_ast6203>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Integer>
  emit<_ast6205>(); // TypedefDecl IndexedPropertyDeleterCallback
  emit<_ast6206>(); // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
  emit<_ast6207>(); // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
  emit<_ast6208>(); // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
  emit<_ast6209>(); // LValueReferenceType const PropertyCallbackInfo<v8::Boolean> &
  emit<_ast6210>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Boolean>
  emit<_ast6212>(); // TypedefDecl IndexedPropertyEnumeratorCallback
  emit<_ast6213>(); // PointerType void (*)(const PropertyCallbackInfo<v8::Array> &)
  emit<_ast6214>(); // ParenType void (const PropertyCallbackInfo<v8::Array> &)
  emit<_ast6215>(); // FunctionProtoType void (const PropertyCallbackInfo<v8::Array> &)
  emit<_ast6216>(); // LValueReferenceType const PropertyCallbackInfo<v8::Array> &
  emit<_ast6217>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Array>
  emit<_ast6219>(); // TypedefDecl IndexedPropertyDefinerCallback
  emit<_ast6220>(); // PointerType void (*)(uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6221>(); // ParenType void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6222>(); // FunctionProtoType void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6223>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6224>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6226>(); // TypedefDecl IndexedPropertyDescriptorCallback
  emit<_ast6227>(); // PointerType void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6228>(); // ParenType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6229>(); // FunctionProtoType void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
  emit<_ast6230>(); // LValueReferenceType const PropertyCallbackInfo<v8::Value> &
  emit<_ast6231>(); // TemplateSpecializationType const PropertyCallbackInfo<v8::Value>
  emit<_ast6239>(); // TypedefDecl AccessCheckCallback
  emit<_ast6240>(); // PointerType bool (*)(Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
  emit<_ast6241>(); // ParenType bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
  emit<_ast6242>(); // FunctionProtoType bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
  emit<_ast6247>(); // CXXMethodDecl New
  emit<_ast6255>(); // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
  emit<_ast6259>(); // CXXMethodDecl FromSnapshot
  emit<_ast6262>(); // FunctionProtoType MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
  emit<_ast6264>(); // CXXMethodDecl NewWithCache
  emit<_ast6272>(); // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
  emit<_ast6277>(); // CXXMethodDecl GetFunction
  emit<_ast6279>(); // FunctionProtoType MaybeLocal<v8::Function> (Local<v8::Context>)
  emit<_ast6282>(); // PointerType v8::FunctionTemplate *
  emit<_ast6283>(); // RecordType v8::FunctionTemplate
  emit<_ast6284>(); // CXXMethodDecl NewRemoteInstance
  emit<_ast6285>(); // FunctionProtoType MaybeLocal<v8::Object> ()
  emit<_ast6287>(); // CXXMethodDecl SetCallHandler
  emit<_ast6291>(); // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
  emit<_ast6293>(); // CXXMethodDecl SetLength
  emit<_ast6295>(); // CXXMethodDecl InstanceTemplate
  emit<_ast6296>(); // FunctionProtoType Local<v8::ObjectTemplate> ()
  emit<_ast6298>(); // CXXMethodDecl Inherit
  emit<_ast6300>(); // FunctionProtoType void (Local<v8::FunctionTemplate>)
  emit<_ast6302>(); // CXXMethodDecl PrototypeTemplate
  emit<_ast6303>(); // FunctionProtoType Local<v8::ObjectTemplate> ()
  emit<_ast6305>(); // CXXMethodDecl SetPrototypeProviderTemplate
  emit<_ast6307>(); // FunctionProtoType void (Local<v8::FunctionTemplate>)
  emit<_ast6309>(); // CXXMethodDecl SetClassName
  emit<_ast6311>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast6313>(); // CXXMethodDecl SetAcceptAnyReceiver
  emit<_ast6315>(); // CXXMethodDecl ReadOnlyPrototype
  emit<_ast6316>(); // CXXMethodDecl RemovePrototype
  emit<_ast6317>(); // CXXMethodDecl HasInstance
  emit<_ast6319>(); // FunctionProtoType bool (Local<v8::Value>)
  emit<_ast6321>(); // CXXMethodDecl Cast
  emit<_ast6323>(); // FunctionProtoType v8::FunctionTemplate *(v8::Data *)
  emit<_ast6332>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6342>(); // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6343>(); // TypedefType v8::GenericNamedPropertyGetterCallback
  emit<_ast6344>(); // TypedefType v8::GenericNamedPropertySetterCallback
  emit<_ast6345>(); // TypedefType v8::GenericNamedPropertyQueryCallback
  emit<_ast6346>(); // TypedefType v8::GenericNamedPropertyDeleterCallback
  emit<_ast6347>(); // TypedefType v8::GenericNamedPropertyEnumeratorCallback
  emit<_ast6348>(); // TypedefType v8::GenericNamedPropertyDefinerCallback
  emit<_ast6349>(); // TypedefType v8::GenericNamedPropertyDescriptorCallback
  emit<_ast6351>(); // EnumType v8::PropertyHandlerFlags
  emit<_ast6352>(); // PointerType v8::NamedPropertyHandlerConfiguration *
  emit<_ast6353>(); // RecordType v8::NamedPropertyHandlerConfiguration
  emit<_ast6354>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6362>(); // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6364>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6373>(); // FunctionProtoType void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6384>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6386>(); // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
  emit<_ast6387>(); // LValueReferenceType const v8::NamedPropertyHandlerConfiguration &
  emit<_ast6388>(); // RecordType const v8::NamedPropertyHandlerConfiguration
  emit<_ast6389>(); // CXXConstructorDecl NamedPropertyHandlerConfiguration
  emit<_ast6391>(); // FunctionProtoType void (v8::NamedPropertyHandlerConfiguration &&)
  emit<_ast6392>(); // RValueReferenceType v8::NamedPropertyHandlerConfiguration &&
  emit<_ast6395>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6405>(); // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6406>(); // TypedefType v8::IndexedPropertyGetterCallback
  emit<_ast6407>(); // TypedefType v8::IndexedPropertySetterCallback
  emit<_ast6408>(); // TypedefType v8::IndexedPropertyQueryCallback
  emit<_ast6409>(); // TypedefType v8::IndexedPropertyDeleterCallback
  emit<_ast6410>(); // TypedefType v8::IndexedPropertyEnumeratorCallback
  emit<_ast6411>(); // TypedefType v8::IndexedPropertyDefinerCallback
  emit<_ast6412>(); // TypedefType v8::IndexedPropertyDescriptorCallback
  emit<_ast6414>(); // PointerType v8::IndexedPropertyHandlerConfiguration *
  emit<_ast6415>(); // RecordType v8::IndexedPropertyHandlerConfiguration
  emit<_ast6416>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6424>(); // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6426>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6435>(); // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
  emit<_ast6446>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6448>(); // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
  emit<_ast6449>(); // LValueReferenceType const v8::IndexedPropertyHandlerConfiguration &
  emit<_ast6450>(); // RecordType const v8::IndexedPropertyHandlerConfiguration
  emit<_ast6451>(); // CXXConstructorDecl IndexedPropertyHandlerConfiguration
  emit<_ast6453>(); // FunctionProtoType void (v8::IndexedPropertyHandlerConfiguration &&)
  emit<_ast6454>(); // RValueReferenceType v8::IndexedPropertyHandlerConfiguration &&
  emit<_ast6455>(); // CXXDestructorDecl ~IndexedPropertyHandlerConfiguration
  emit<_ast6457>(); // CXXMethodDecl New
  emit<_ast6460>(); // FunctionProtoType Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
  emit<_ast6463>(); // CXXMethodDecl FromSnapshot
  emit<_ast6466>(); // FunctionProtoType MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
  emit<_ast6468>(); // CXXMethodDecl NewInstance
  emit<_ast6470>(); // FunctionProtoType MaybeLocal<v8::Object> (Local<v8::Context>)
  emit<_ast6473>(); // PointerType v8::ObjectTemplate *
  emit<_ast6474>(); // RecordType v8::ObjectTemplate
  emit<_ast6475>(); // CXXMethodDecl SetAccessor
  emit<_ast6485>(); // FunctionProtoType void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
  emit<_ast6489>(); // CXXMethodDecl SetAccessor
  emit<_ast6499>(); // FunctionProtoType void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
  emit<_ast6503>(); // CXXMethodDecl SetHandler
  emit<_ast6505>(); // FunctionProtoType void (const v8::NamedPropertyHandlerConfiguration &)
  emit<_ast6506>(); // CXXMethodDecl SetIndexedPropertyHandler
  emit<_ast6513>(); // FunctionProtoType void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
  emit<_ast6515>(); // CXXMethodDecl SetHandler
  emit<_ast6517>(); // FunctionProtoType void (const v8::IndexedPropertyHandlerConfiguration &)
  emit<_ast6518>(); // CXXMethodDecl SetCallAsFunctionHandler
  emit<_ast6521>(); // FunctionProtoType void (v8::FunctionCallback, Local<v8::Value>)
  emit<_ast6523>(); // CXXMethodDecl MarkAsUndetectable
  emit<_ast6524>(); // CXXMethodDecl SetAccessCheckCallback
  emit<_ast6527>(); // FunctionProtoType void (v8::AccessCheckCallback, Local<v8::Value>)
  emit<_ast6528>(); // TypedefType v8::AccessCheckCallback
  emit<_ast6530>(); // CXXMethodDecl SetAccessCheckCallbackAndHandler
  emit<_ast6535>(); // FunctionProtoType void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
  emit<_ast6537>(); // CXXMethodDecl InternalFieldCount
  emit<_ast6538>(); // CXXMethodDecl SetInternalFieldCount
  emit<_ast6540>(); // CXXMethodDecl IsImmutableProto
  emit<_ast6541>(); // CXXMethodDecl SetImmutableProto
  emit<_ast6542>(); // CXXMethodDecl Cast
  emit<_ast6544>(); // FunctionProtoType v8::ObjectTemplate *(v8::Data *)
  emit<_ast6546>(); // CXXMethodDecl New
  emit<_ast6549>(); // FunctionProtoType Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
  emit<_ast6552>(); // CXXMethodDecl Cast
  emit<_ast6554>(); // FunctionProtoType v8::Signature *(v8::Data *)
  emit<_ast6555>(); // PointerType v8::Signature *
  emit<_ast6556>(); // RecordType v8::Signature
  emit<_ast6558>(); // CXXMethodDecl New
  emit<_ast6561>(); // FunctionProtoType Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
  emit<_ast6564>(); // CXXMethodDecl Cast
  emit<_ast6566>(); // FunctionProtoType v8::AccessorSignature *(v8::Data *)
  emit<_ast6567>(); // PointerType v8::AccessorSignature *
  emit<_ast6568>(); // RecordType v8::AccessorSignature
  emit<_ast6571>(); // CXXConstructorDecl Extension
  emit<_ast6577>(); // FunctionProtoType void (const char *, const char *, int, const char **, int)
  emit<_ast6578>(); // PointerType const char **
  emit<_ast6579>(); // PointerType v8::Extension *
  emit<_ast6580>(); // RecordType v8::Extension
  emit<_ast6581>(); // CXXDestructorDecl ~Extension
  emit<_ast6582>(); // CXXMethodDecl GetNativeFunctionTemplate
  emit<_ast6585>(); // FunctionProtoType Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
  emit<_ast6588>(); // CXXMethodDecl name
  emit<_ast6589>(); // PointerType const v8::Extension *
  emit<_ast6590>(); // RecordType const v8::Extension
  emit<_ast6591>(); // CXXMethodDecl source_length
  emit<_ast6592>(); // CXXMethodDecl source
  emit<_ast6593>(); // FunctionProtoType const String::ExternalOneByteStringResource *() const
  emit<_ast6594>(); // PointerType const String::ExternalOneByteStringResource *
  emit<_ast6595>(); // ElaboratedType const String::ExternalOneByteStringResource
  emit<_ast6597>(); // CXXMethodDecl dependency_count
  emit<_ast6598>(); // CXXMethodDecl dependencies
  emit<_ast6599>(); // FunctionProtoType const char **() const
  emit<_ast6600>(); // CXXMethodDecl set_auto_enable
  emit<_ast6602>(); // CXXMethodDecl auto_enable
  emit<_ast6603>(); // CXXConstructorDecl Extension
  emit<_ast6605>(); // FunctionProtoType void (const v8::Extension &)
  emit<_ast6606>(); // LValueReferenceType const v8::Extension &
  emit<_ast6607>(); // CXXMethodDecl operator=
  emit<_ast6609>(); // FunctionDecl RegisterExtension
  emit<_ast6611>(); // FunctionProtoType void (std::unique_ptr<Extension>)
  emit<_ast6613>(); // FunctionDecl Undefined
  emit<_ast6615>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
  emit<_ast6618>(); // FunctionDecl Null
  emit<_ast6620>(); // FunctionProtoType Local<v8::Primitive> (v8::Isolate *)
  emit<_ast6623>(); // FunctionDecl True
  emit<_ast6625>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
  emit<_ast6628>(); // FunctionDecl False
  emit<_ast6630>(); // FunctionProtoType Local<v8::Boolean> (v8::Isolate *)
  emit<_ast6635>(); // CXXMethodDecl ConfigureDefaultsFromHeapSize
  emit<_ast6638>(); // FunctionProtoType void (size_t, size_t)
  emit<_ast6639>(); // PointerType v8::ResourceConstraints *
  emit<_ast6640>(); // RecordType v8::ResourceConstraints
  emit<_ast6641>(); // CXXMethodDecl ConfigureDefaults
  emit<_ast6644>(); // FunctionProtoType void (uint64_t, uint64_t)
  emit<_ast6645>(); // CXXMethodDecl stack_limit
  emit<_ast6646>(); // FunctionProtoType uint32_t *() const
  emit<_ast6647>(); // PointerType const v8::ResourceConstraints *
  emit<_ast6648>(); // RecordType const v8::ResourceConstraints
  emit<_ast6649>(); // CXXMethodDecl set_stack_limit
  emit<_ast6651>(); // FunctionProtoType void (uint32_t *)
  emit<_ast6652>(); // CXXMethodDecl code_range_size_in_bytes
  emit<_ast6653>(); // CXXMethodDecl set_code_range_size_in_bytes
  emit<_ast6655>(); // FunctionProtoType void (size_t)
  emit<_ast6656>(); // CXXMethodDecl max_old_generation_size_in_bytes
  emit<_ast6657>(); // CXXMethodDecl set_max_old_generation_size_in_bytes
  emit<_ast6659>(); // CXXMethodDecl max_young_generation_size_in_bytes
  emit<_ast6660>(); // CXXMethodDecl set_max_young_generation_size_in_bytes
  emit<_ast6662>(); // CXXMethodDecl initial_old_generation_size_in_bytes
  emit<_ast6663>(); // CXXMethodDecl set_initial_old_generation_size_in_bytes
  emit<_ast6665>(); // CXXMethodDecl initial_young_generation_size_in_bytes
  emit<_ast6666>(); // CXXMethodDecl set_initial_young_generation_size_in_bytes
  emit<_ast6668>(); // CXXMethodDecl code_range_size
  emit<_ast6669>(); // CXXMethodDecl set_code_range_size
  emit<_ast6671>(); // CXXMethodDecl max_semi_space_size_in_kb
  emit<_ast6672>(); // CXXMethodDecl set_max_semi_space_size_in_kb
  emit<_ast6674>(); // CXXMethodDecl max_old_space_size
  emit<_ast6675>(); // CXXMethodDecl set_max_old_space_size
  emit<_ast6677>(); // CXXMethodDecl max_zone_pool_size
  emit<_ast6678>(); // CXXMethodDecl set_max_zone_pool_size
  emit<_ast6680>(); // CXXConstructorDecl ResourceConstraints
  emit<_ast6681>(); // CXXConstructorDecl ResourceConstraints
  emit<_ast6683>(); // FunctionProtoType void (const v8::ResourceConstraints &)
  emit<_ast6684>(); // LValueReferenceType const v8::ResourceConstraints &
  emit<_ast6685>(); // CXXConstructorDecl ResourceConstraints
  emit<_ast6687>(); // FunctionProtoType void (v8::ResourceConstraints &&)
  emit<_ast6688>(); // RValueReferenceType v8::ResourceConstraints &&
  emit<_ast6689>(); // TypedefDecl FatalErrorCallback
  emit<_ast6690>(); // PointerType void (*)(const char *, const char *)
  emit<_ast6691>(); // ParenType void (const char *, const char *)
  emit<_ast6692>(); // FunctionProtoType void (const char *, const char *)
  emit<_ast6693>(); // TypedefDecl OOMErrorCallback
  emit<_ast6694>(); // PointerType void (*)(const char *, bool)
  emit<_ast6695>(); // ParenType void (const char *, bool)
  emit<_ast6696>(); // FunctionProtoType void (const char *, bool)
  emit<_ast6697>(); // TypedefDecl DcheckErrorCallback
  emit<_ast6698>(); // PointerType void (*)(const char *, int, const char *)
  emit<_ast6699>(); // ParenType void (const char *, int, const char *)
  emit<_ast6700>(); // FunctionProtoType void (const char *, int, const char *)
  emit<_ast6701>(); // TypedefDecl MessageCallback
  emit<_ast6702>(); // PointerType void (*)(Local<v8::Message>, Local<v8::Value>)
  emit<_ast6703>(); // ParenType void (Local<v8::Message>, Local<v8::Value>)
  emit<_ast6704>(); // FunctionProtoType void (Local<v8::Message>, Local<v8::Value>)
  emit<_ast6707>(); // TypedefDecl LogEventCallback
  emit<_ast6708>(); // PointerType void (*)(const char *, int)
  emit<_ast6709>(); // ParenType void (const char *, int)
  emit<_ast6710>(); // FunctionProtoType void (const char *, int)
  emit<_ast6713>(); // CXXMethodDecl RangeError
  emit<_ast6715>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6718>(); // CXXMethodDecl ReferenceError
  emit<_ast6720>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6723>(); // CXXMethodDecl SyntaxError
  emit<_ast6725>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6728>(); // CXXMethodDecl TypeError
  emit<_ast6730>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6733>(); // CXXMethodDecl Error
  emit<_ast6735>(); // FunctionProtoType Local<v8::Value> (Local<v8::String>)
  emit<_ast6738>(); // CXXMethodDecl CreateMessage
  emit<_ast6741>(); // FunctionProtoType Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
  emit<_ast6744>(); // CXXMethodDecl GetStackTrace
  emit<_ast6746>(); // FunctionProtoType Local<v8::StackTrace> (Local<v8::Value>)
  emit<_ast6749>(); // TypedefDecl CounterLookupCallback
  emit<_ast6750>(); // PointerType int *(*)(const char *)
  emit<_ast6751>(); // ParenType int *(const char *)
  emit<_ast6752>(); // FunctionProtoType int *(const char *)
  emit<_ast6753>(); // TypedefDecl CreateHistogramCallback
  emit<_ast6754>(); // PointerType void *(*)(const char *, int, int, size_t)
  emit<_ast6755>(); // ParenType void *(const char *, int, int, size_t)
  emit<_ast6756>(); // FunctionProtoType void *(const char *, int, int, size_t)
  emit<_ast6757>(); // TypedefDecl AddHistogramSampleCallback
  emit<_ast6758>(); // PointerType void (*)(void *, int)
  emit<_ast6759>(); // ParenType void (void *, int)
  emit<_ast6760>(); // FunctionProtoType void (void *, int)
  emit<_ast6761>(); // TypedefDecl BeforeCallEnteredCallback
  emit<_ast6762>(); // PointerType void (*)(v8::Isolate *)
  emit<_ast6763>(); // ParenType void (v8::Isolate *)
  emit<_ast6764>(); // TypedefDecl CallCompletedCallback
  emit<_ast6765>(); // TypedefDecl HostImportModuleDynamicallyCallback
  emit<_ast6766>(); // PointerType MaybeLocal<v8::Promise> (*)(Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
  emit<_ast6767>(); // ParenType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
  emit<_ast6768>(); // FunctionProtoType MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
  emit<_ast6773>(); // TypedefDecl HostInitializeImportMetaObjectCallback
  emit<_ast6774>(); // PointerType void (*)(Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
  emit<_ast6775>(); // ParenType void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
  emit<_ast6776>(); // FunctionProtoType void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
  emit<_ast6780>(); // TypedefDecl PrepareStackTraceCallback
  emit<_ast6781>(); // PointerType MaybeLocal<v8::Value> (*)(Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
  emit<_ast6782>(); // ParenType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
  emit<_ast6783>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
  emit<_ast6793>(); // TypedefDecl PromiseHook
  emit<_ast6794>(); // PointerType void (*)(v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
  emit<_ast6795>(); // ParenType void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
  emit<_ast6796>(); // FunctionProtoType void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
  emit<_ast6797>(); // EnumType v8::PromiseHookType
  emit<_ast6807>(); // CXXConstructorDecl PromiseRejectMessage
  emit<_ast6811>(); // FunctionProtoType void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
  emit<_ast6813>(); // EnumType v8::PromiseRejectEvent
  emit<_ast6815>(); // PointerType v8::PromiseRejectMessage *
  emit<_ast6816>(); // RecordType v8::PromiseRejectMessage
  emit<_ast6817>(); // CXXMethodDecl GetPromise
  emit<_ast6818>(); // FunctionProtoType Local<v8::Promise> () const
  emit<_ast6820>(); // PointerType const v8::PromiseRejectMessage *
  emit<_ast6821>(); // RecordType const v8::PromiseRejectMessage
  emit<_ast6822>(); // CXXMethodDecl GetEvent
  emit<_ast6823>(); // FunctionProtoType v8::PromiseRejectEvent () const
  emit<_ast6824>(); // CXXMethodDecl GetValue
  emit<_ast6825>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast6827>(); // TypedefDecl PromiseRejectCallback
  emit<_ast6828>(); // PointerType void (*)(v8::PromiseRejectMessage)
  emit<_ast6829>(); // ParenType void (v8::PromiseRejectMessage)
  emit<_ast6830>(); // FunctionProtoType void (v8::PromiseRejectMessage)
  emit<_ast6831>(); // TypedefDecl MicrotasksCompletedCallback
  emit<_ast6832>(); // TypedefDecl MicrotasksCompletedCallbackWithData
  emit<_ast6833>(); // PointerType void (*)(v8::Isolate *, void *)
  emit<_ast6834>(); // ParenType void (v8::Isolate *, void *)
  emit<_ast6835>(); // FunctionProtoType void (v8::Isolate *, void *)
  emit<_ast6836>(); // TypedefDecl MicrotaskCallback
  emit<_ast6837>(); // PointerType void (*)(void *)
  emit<_ast6838>(); // ParenType void (void *)
  emit<_ast6844>(); // CXXMethodDecl New
  emit<_ast6847>(); // FunctionProtoType std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
  emit<_ast6848>(); // EnumType v8::MicrotasksPolicy
  emit<_ast6850>(); // CXXDestructorDecl ~MicrotaskQueue
  emit<_ast6851>(); // FunctionProtoType void ()
  emit<_ast6852>(); // PointerType v8::MicrotaskQueue *
  emit<_ast6853>(); // RecordType v8::MicrotaskQueue
  emit<_ast6854>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast6857>(); // FunctionProtoType void (v8::Isolate *, Local<v8::Function>)
  emit<_ast6859>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast6863>(); // FunctionProtoType void (v8::Isolate *, v8::MicrotaskCallback, void *)
  emit<_ast6864>(); // PointerType v8::Isolate *
  emit<_ast6866>(); // TypedefType v8::MicrotaskCallback
  emit<_ast6867>(); // CXXMethodDecl AddMicrotasksCompletedCallback
  emit<_ast6870>(); // FunctionProtoType void (v8::MicrotasksCompletedCallbackWithData, void *)
  emit<_ast6871>(); // TypedefType v8::MicrotasksCompletedCallbackWithData
  emit<_ast6872>(); // CXXMethodDecl RemoveMicrotasksCompletedCallback
  emit<_ast6875>(); // CXXMethodDecl PerformCheckpoint
  emit<_ast6877>(); // CXXMethodDecl IsRunningMicrotasks
  emit<_ast6878>(); // PointerType const v8::MicrotaskQueue *
  emit<_ast6879>(); // RecordType const v8::MicrotaskQueue
  emit<_ast6880>(); // CXXMethodDecl GetMicrotasksScopeDepth
  emit<_ast6881>(); // CXXConstructorDecl MicrotaskQueue
  emit<_ast6883>(); // FunctionProtoType void (const v8::MicrotaskQueue &)
  emit<_ast6884>(); // LValueReferenceType const v8::MicrotaskQueue &
  emit<_ast6885>(); // CXXMethodDecl operator=
  emit<_ast6887>(); // FunctionProtoType v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
  emit<_ast6888>(); // LValueReferenceType v8::MicrotaskQueue &
  emit<_ast6894>(); // CXXConstructorDecl MicrotasksScope
  emit<_ast6897>(); // FunctionProtoType void (v8::Isolate *, v8::MicrotasksScope::Type)
  emit<_ast6898>(); // EnumType v8::MicrotasksScope::Type
  emit<_ast6899>(); // PointerType v8::MicrotasksScope *
  emit<_ast6900>(); // RecordType v8::MicrotasksScope
  emit<_ast6901>(); // CXXConstructorDecl MicrotasksScope
  emit<_ast6905>(); // FunctionProtoType void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
  emit<_ast6906>(); // CXXDestructorDecl ~MicrotasksScope
  emit<_ast6907>(); // FunctionProtoType void ()
  emit<_ast6908>(); // CXXMethodDecl PerformCheckpoint
  emit<_ast6910>(); // CXXMethodDecl GetCurrentDepth
  emit<_ast6912>(); // CXXMethodDecl IsRunningMicrotasks
  emit<_ast6914>(); // FunctionProtoType bool (v8::Isolate *)
  emit<_ast6915>(); // CXXConstructorDecl MicrotasksScope
  emit<_ast6917>(); // FunctionProtoType void (const v8::MicrotasksScope &)
  emit<_ast6918>(); // LValueReferenceType const v8::MicrotasksScope &
  emit<_ast6919>(); // RecordType const v8::MicrotasksScope
  emit<_ast6920>(); // CXXMethodDecl operator=
  emit<_ast6922>(); // FunctionProtoType v8::MicrotasksScope &(const v8::MicrotasksScope &)
  emit<_ast6923>(); // LValueReferenceType v8::MicrotasksScope &
  emit<_ast6924>(); // TypedefDecl FailedAccessCheckCallback
  emit<_ast6925>(); // PointerType void (*)(Local<v8::Object>, v8::AccessType, Local<v8::Value>)
  emit<_ast6926>(); // ParenType void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
  emit<_ast6927>(); // FunctionProtoType void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
  emit<_ast6929>(); // EnumType v8::AccessType
  emit<_ast6931>(); // TypedefDecl AllowCodeGenerationFromStringsCallback
  emit<_ast6932>(); // PointerType bool (*)(Local<v8::Context>, Local<v8::String>)
  emit<_ast6933>(); // ParenType bool (Local<v8::Context>, Local<v8::String>)
  emit<_ast6934>(); // FunctionProtoType bool (Local<v8::Context>, Local<v8::String>)
  emit<_ast6937>(); // TypedefDecl ExtensionCallback
  emit<_ast6938>(); // PointerType bool (*)(const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6939>(); // ParenType bool (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6940>(); // FunctionProtoType bool (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6941>(); // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
  emit<_ast6942>(); // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
  emit<_ast6944>(); // TypedefDecl AllowWasmCodeGenerationCallback
  emit<_ast6945>(); // PointerType bool (*)(Local<v8::Context>, Local<v8::String>)
  emit<_ast6946>(); // ParenType bool (Local<v8::Context>, Local<v8::String>)
  emit<_ast6947>(); // FunctionProtoType bool (Local<v8::Context>, Local<v8::String>)
  emit<_ast6950>(); // TypedefDecl ApiImplementationCallback
  emit<_ast6951>(); // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6952>(); // ParenType void (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6953>(); // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6954>(); // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
  emit<_ast6955>(); // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
  emit<_ast6957>(); // TypedefDecl WasmStreamingCallback
  emit<_ast6958>(); // PointerType void (*)(const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6959>(); // ParenType void (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6960>(); // FunctionProtoType void (const FunctionCallbackInfo<v8::Value> &)
  emit<_ast6961>(); // LValueReferenceType const FunctionCallbackInfo<v8::Value> &
  emit<_ast6962>(); // TemplateSpecializationType const FunctionCallbackInfo<v8::Value>
  emit<_ast6964>(); // TypedefDecl WasmThreadsEnabledCallback
  emit<_ast6965>(); // PointerType bool (*)(Local<v8::Context>)
  emit<_ast6966>(); // ParenType bool (Local<v8::Context>)
  emit<_ast6967>(); // FunctionProtoType bool (Local<v8::Context>)
  emit<_ast6983>(); // TypedefDecl GCCallback
  emit<_ast6984>(); // PointerType void (*)(v8::GCType, v8::GCCallbackFlags)
  emit<_ast6985>(); // ParenType void (v8::GCType, v8::GCCallbackFlags)
  emit<_ast6986>(); // FunctionProtoType void (v8::GCType, v8::GCCallbackFlags)
  emit<_ast6987>(); // EnumType v8::GCType
  emit<_ast6988>(); // EnumType v8::GCCallbackFlags
  emit<_ast6989>(); // TypedefDecl InterruptCallback
  emit<_ast6990>(); // TypedefDecl NearHeapLimitCallback
  emit<_ast6991>(); // PointerType size_t (*)(void *, size_t, size_t)
  emit<_ast6992>(); // ParenType size_t (void *, size_t, size_t)
  emit<_ast6993>(); // FunctionProtoType size_t (void *, size_t, size_t)
  emit<_ast6996>(); // CXXConstructorDecl HeapStatistics
  emit<_ast6997>(); // PointerType v8::HeapStatistics *
  emit<_ast6998>(); // RecordType v8::HeapStatistics
  emit<_ast6999>(); // CXXMethodDecl total_heap_size
  emit<_ast7000>(); // CXXMethodDecl total_heap_size_executable
  emit<_ast7001>(); // CXXMethodDecl total_physical_size
  emit<_ast7002>(); // CXXMethodDecl total_available_size
  emit<_ast7003>(); // CXXMethodDecl used_heap_size
  emit<_ast7004>(); // CXXMethodDecl heap_size_limit
  emit<_ast7005>(); // CXXMethodDecl malloced_memory
  emit<_ast7006>(); // CXXMethodDecl external_memory
  emit<_ast7007>(); // CXXMethodDecl peak_malloced_memory
  emit<_ast7008>(); // CXXMethodDecl number_of_native_contexts
  emit<_ast7009>(); // CXXMethodDecl number_of_detached_contexts
  emit<_ast7010>(); // CXXMethodDecl does_zap_garbage
  emit<_ast7013>(); // CXXConstructorDecl HeapSpaceStatistics
  emit<_ast7014>(); // PointerType v8::HeapSpaceStatistics *
  emit<_ast7015>(); // RecordType v8::HeapSpaceStatistics
  emit<_ast7016>(); // CXXMethodDecl space_name
  emit<_ast7017>(); // FunctionProtoType const char *()
  emit<_ast7018>(); // CXXMethodDecl space_size
  emit<_ast7019>(); // CXXMethodDecl space_used_size
  emit<_ast7020>(); // CXXMethodDecl space_available_size
  emit<_ast7021>(); // CXXMethodDecl physical_space_size
  emit<_ast7024>(); // CXXConstructorDecl HeapObjectStatistics
  emit<_ast7025>(); // PointerType v8::HeapObjectStatistics *
  emit<_ast7026>(); // RecordType v8::HeapObjectStatistics
  emit<_ast7027>(); // CXXMethodDecl object_type
  emit<_ast7028>(); // CXXMethodDecl object_sub_type
  emit<_ast7029>(); // CXXMethodDecl object_count
  emit<_ast7030>(); // CXXMethodDecl object_size
  emit<_ast7033>(); // CXXConstructorDecl HeapCodeStatistics
  emit<_ast7034>(); // PointerType v8::HeapCodeStatistics *
  emit<_ast7035>(); // RecordType v8::HeapCodeStatistics
  emit<_ast7036>(); // CXXMethodDecl code_and_metadata_size
  emit<_ast7037>(); // CXXMethodDecl bytecode_and_metadata_size
  emit<_ast7038>(); // CXXMethodDecl external_script_source_size
  emit<_ast7086>(); // TypedefDecl JitCodeEventHandler
  emit<_ast7087>(); // PointerType void (*)(const v8::JitCodeEvent *)
  emit<_ast7088>(); // ParenType void (const v8::JitCodeEvent *)
  emit<_ast7089>(); // FunctionProtoType void (const v8::JitCodeEvent *)
  emit<_ast7090>(); // PointerType const v8::JitCodeEvent *
  emit<_ast7091>(); // RecordType const v8::JitCodeEvent
  emit<_ast7092>(); // RecordType v8::JitCodeEvent
  emit<_ast7093>(); // TypedefDecl UnhandledExceptionCallback
  emit<_ast7094>(); // PointerType int (*)(_EXCEPTION_POINTERS *)
  emit<_ast7095>(); // ParenType int (_EXCEPTION_POINTERS *)
  emit<_ast7096>(); // FunctionProtoType int (_EXCEPTION_POINTERS *)
  emit<_ast7097>(); // PointerType _EXCEPTION_POINTERS *
  emit<_ast7098>(); // RecordType _EXCEPTION_POINTERS
  emit<_ast7102>(); // CXXDestructorDecl ~ExternalResourceVisitor
  emit<_ast7103>(); // FunctionProtoType void ()
  emit<_ast7104>(); // PointerType v8::ExternalResourceVisitor *
  emit<_ast7105>(); // RecordType v8::ExternalResourceVisitor
  emit<_ast7106>(); // CXXMethodDecl VisitExternalString
  emit<_ast7108>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast7110>(); // CXXMethodDecl operator=
  emit<_ast7112>(); // FunctionProtoType v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
  emit<_ast7113>(); // LValueReferenceType const v8::ExternalResourceVisitor &
  emit<_ast7114>(); // RecordType const v8::ExternalResourceVisitor
  emit<_ast7115>(); // LValueReferenceType v8::ExternalResourceVisitor &
  emit<_ast7118>(); // CXXDestructorDecl ~PersistentHandleVisitor
  emit<_ast7119>(); // FunctionProtoType void ()
  emit<_ast7120>(); // PointerType v8::PersistentHandleVisitor *
  emit<_ast7121>(); // RecordType v8::PersistentHandleVisitor
  emit<_ast7122>(); // CXXMethodDecl VisitPersistentHandle
  emit<_ast7125>(); // FunctionProtoType void (Persistent<v8::Value> *, uint16_t)
  emit<_ast7126>(); // PointerType Persistent<v8::Value> *
  emit<_ast7128>(); // CXXMethodDecl operator=
  emit<_ast7130>(); // FunctionProtoType v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
  emit<_ast7131>(); // LValueReferenceType const v8::PersistentHandleVisitor &
  emit<_ast7132>(); // RecordType const v8::PersistentHandleVisitor
  emit<_ast7133>(); // LValueReferenceType v8::PersistentHandleVisitor &
  emit<_ast7149>(); // CXXDestructorDecl ~TracedGlobalHandleVisitor
  emit<_ast7150>(); // FunctionProtoType void ()
  emit<_ast7151>(); // PointerType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
  emit<_ast7152>(); // RecordType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
  emit<_ast7153>(); // CXXMethodDecl VisitTracedGlobalHandle
  emit<_ast7155>(); // FunctionProtoType void (const TracedGlobal<v8::Value> &)
  emit<_ast7156>(); // LValueReferenceType const TracedGlobal<v8::Value> &
  emit<_ast7157>(); // TemplateSpecializationType const TracedGlobal<v8::Value>
  emit<_ast7159>(); // CXXMethodDecl operator=
  emit<_ast7161>(); // FunctionProtoType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
  emit<_ast7162>(); // LValueReferenceType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
  emit<_ast7163>(); // RecordType const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
  emit<_ast7164>(); // LValueReferenceType v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
  emit<_ast7169>(); // CXXDestructorDecl ~EmbedderHeapTracer
  emit<_ast7170>(); // FunctionProtoType void ()
  emit<_ast7171>(); // PointerType v8::EmbedderHeapTracer *
  emit<_ast7172>(); // RecordType v8::EmbedderHeapTracer
  emit<_ast7173>(); // CXXMethodDecl IterateTracedGlobalHandles
  emit<_ast7175>(); // FunctionProtoType void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
  emit<_ast7176>(); // CXXMethodDecl RegisterV8References
  emit<_ast7178>(); // FunctionProtoType void (const std::vector<std::pair<void *, void *> > &)
  emit<_ast7179>(); // LValueReferenceType const std::vector<std::pair<void *, void *> > &
  emit<_ast7180>(); // ElaboratedType const std::vector<std::pair<void *, void *> >
  emit<_ast7182>(); // CXXMethodDecl RegisterEmbedderReference
  emit<_ast7184>(); // FunctionProtoType void (const TracedGlobal<v8::Value> &)
  emit<_ast7185>(); // LValueReferenceType const TracedGlobal<v8::Value> &
  emit<_ast7186>(); // TemplateSpecializationType const TracedGlobal<v8::Value>
  emit<_ast7188>(); // CXXMethodDecl TracePrologue
  emit<_ast7189>(); // CXXMethodDecl TracePrologue
  emit<_ast7191>(); // FunctionProtoType void (v8::EmbedderHeapTracer::TraceFlags)
  emit<_ast7192>(); // EnumType v8::EmbedderHeapTracer::TraceFlags
  emit<_ast7193>(); // CXXMethodDecl AdvanceTracing
  emit<_ast7195>(); // FunctionProtoType bool (double)
  emit<_ast7196>(); // CXXMethodDecl IsTracingDone
  emit<_ast7197>(); // CXXMethodDecl TraceEpilogue
  emit<_ast7198>(); // CXXMethodDecl TraceEpilogue
  emit<_ast7200>(); // FunctionProtoType void (v8::EmbedderHeapTracer::TraceSummary *)
  emit<_ast7201>(); // PointerType v8::EmbedderHeapTracer::TraceSummary *
  emit<_ast7202>(); // RecordType v8::EmbedderHeapTracer::TraceSummary
  emit<_ast7203>(); // CXXMethodDecl EnterFinalPause
  emit<_ast7205>(); // FunctionProtoType void (v8::EmbedderHeapTracer::EmbedderStackState)
  emit<_ast7206>(); // EnumType v8::EmbedderHeapTracer::EmbedderStackState
  emit<_ast7207>(); // CXXMethodDecl FinalizeTracing
  emit<_ast7208>(); // CXXMethodDecl IsRootForNonTracingGC
  emit<_ast7210>(); // FunctionProtoType bool (const v8::TracedGlobal<v8::Value> &)
  emit<_ast7211>(); // LValueReferenceType const v8::TracedGlobal<v8::Value> &
  emit<_ast7212>(); // ElaboratedType const v8::TracedGlobal<v8::Value>
  emit<_ast7214>(); // CXXMethodDecl GarbageCollectionForTesting
  emit<_ast7216>(); // CXXMethodDecl IncreaseAllocatedSize
  emit<_ast7218>(); // CXXMethodDecl DecreaseAllocatedSize
  emit<_ast7220>(); // CXXMethodDecl isolate
  emit<_ast7221>(); // FunctionProtoType v8::Isolate *() const
  emit<_ast7222>(); // PointerType const v8::EmbedderHeapTracer *
  emit<_ast7223>(); // RecordType const v8::EmbedderHeapTracer
  emit<_ast7225>(); // CXXMethodDecl operator=
  emit<_ast7227>(); // FunctionProtoType v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
  emit<_ast7228>(); // LValueReferenceType const v8::EmbedderHeapTracer &
  emit<_ast7229>(); // LValueReferenceType v8::EmbedderHeapTracer &
  emit<_ast7232>(); // TypedefDecl CallbackFunction
  emit<_ast7233>(); // PointerType v8::StartupData (*)(Local<v8::Object>, int, void *)
  emit<_ast7234>(); // ParenType v8::StartupData (Local<v8::Object>, int, void *)
  emit<_ast7235>(); // FunctionProtoType v8::StartupData (Local<v8::Object>, int, void *)
  emit<_ast7237>(); // RecordType v8::StartupData
  emit<_ast7238>(); // CXXConstructorDecl SerializeInternalFieldsCallback
  emit<_ast7241>(); // FunctionProtoType void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
  emit<_ast7242>(); // TypedefType v8::SerializeInternalFieldsCallback::CallbackFunction
  emit<_ast7243>(); // PointerType v8::SerializeInternalFieldsCallback *
  emit<_ast7244>(); // RecordType v8::SerializeInternalFieldsCallback
  emit<_ast7247>(); // CXXConstructorDecl SerializeInternalFieldsCallback
  emit<_ast7249>(); // FunctionProtoType void (const v8::SerializeInternalFieldsCallback &)
  emit<_ast7250>(); // LValueReferenceType const v8::SerializeInternalFieldsCallback &
  emit<_ast7251>(); // RecordType const v8::SerializeInternalFieldsCallback
  emit<_ast7252>(); // CXXConstructorDecl SerializeInternalFieldsCallback
  emit<_ast7254>(); // FunctionProtoType void (v8::SerializeInternalFieldsCallback &&) noexcept
  emit<_ast7255>(); // RValueReferenceType v8::SerializeInternalFieldsCallback &&
  emit<_ast7256>(); // CXXDestructorDecl ~SerializeInternalFieldsCallback
  emit<_ast7257>(); // TypedefDecl SerializeEmbedderFieldsCallback
  emit<_ast7260>(); // TypedefDecl CallbackFunction
  emit<_ast7261>(); // PointerType void (*)(Local<v8::Object>, int, v8::StartupData, void *)
  emit<_ast7262>(); // ParenType void (Local<v8::Object>, int, v8::StartupData, void *)
  emit<_ast7263>(); // FunctionProtoType void (Local<v8::Object>, int, v8::StartupData, void *)
  emit<_ast7265>(); // CXXConstructorDecl DeserializeInternalFieldsCallback
  emit<_ast7268>(); // FunctionProtoType void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
  emit<_ast7269>(); // TypedefType v8::DeserializeInternalFieldsCallback::CallbackFunction
  emit<_ast7270>(); // PointerType v8::DeserializeInternalFieldsCallback *
  emit<_ast7271>(); // RecordType v8::DeserializeInternalFieldsCallback
  emit<_ast7274>(); // CXXConstructorDecl DeserializeInternalFieldsCallback
  emit<_ast7276>(); // FunctionProtoType void (const v8::DeserializeInternalFieldsCallback &)
  emit<_ast7277>(); // LValueReferenceType const v8::DeserializeInternalFieldsCallback &
  emit<_ast7278>(); // RecordType const v8::DeserializeInternalFieldsCallback
  emit<_ast7279>(); // CXXConstructorDecl DeserializeInternalFieldsCallback
  emit<_ast7281>(); // FunctionProtoType void (v8::DeserializeInternalFieldsCallback &&) noexcept
  emit<_ast7282>(); // RValueReferenceType v8::DeserializeInternalFieldsCallback &&
  emit<_ast7283>(); // CXXDestructorDecl ~DeserializeInternalFieldsCallback
  emit<_ast7284>(); // TypedefDecl DeserializeEmbedderFieldsCallback
  emit<_ast7288>(); // CXXConstructorDecl CreateParams
  emit<_ast7289>(); // PointerType v8::Isolate::CreateParams *
  emit<_ast7290>(); // RecordType v8::Isolate::CreateParams
  emit<_ast7303>(); // CXXConstructorDecl Scope
  emit<_ast7305>(); // PointerType v8::Isolate::Scope *
  emit<_ast7306>(); // RecordType v8::Isolate::Scope
  emit<_ast7307>(); // CXXDestructorDecl ~Scope
  emit<_ast7308>(); // CXXConstructorDecl Scope
  emit<_ast7310>(); // FunctionProtoType void (const v8::Isolate::Scope &)
  emit<_ast7311>(); // LValueReferenceType const v8::Isolate::Scope &
  emit<_ast7312>(); // RecordType const v8::Isolate::Scope
  emit<_ast7313>(); // CXXMethodDecl operator=
  emit<_ast7315>(); // FunctionProtoType v8::Isolate::Scope &(const v8::Isolate::Scope &)
  emit<_ast7316>(); // LValueReferenceType v8::Isolate::Scope &
  emit<_ast7323>(); // CXXConstructorDecl DisallowJavascriptExecutionScope
  emit<_ast7326>(); // FunctionProtoType void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
  emit<_ast7327>(); // EnumType v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
  emit<_ast7328>(); // PointerType v8::Isolate::DisallowJavascriptExecutionScope *
  emit<_ast7329>(); // RecordType v8::Isolate::DisallowJavascriptExecutionScope
  emit<_ast7330>(); // CXXDestructorDecl ~DisallowJavascriptExecutionScope
  emit<_ast7331>(); // FunctionProtoType void ()
  emit<_ast7332>(); // CXXConstructorDecl DisallowJavascriptExecutionScope
  emit<_ast7334>(); // FunctionProtoType void (const v8::Isolate::DisallowJavascriptExecutionScope &)
  emit<_ast7335>(); // LValueReferenceType const v8::Isolate::DisallowJavascriptExecutionScope &
  emit<_ast7336>(); // RecordType const v8::Isolate::DisallowJavascriptExecutionScope
  emit<_ast7337>(); // CXXMethodDecl operator=
  emit<_ast7339>(); // FunctionProtoType v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
  emit<_ast7340>(); // LValueReferenceType v8::Isolate::DisallowJavascriptExecutionScope &
  emit<_ast7343>(); // CXXConstructorDecl AllowJavascriptExecutionScope
  emit<_ast7345>(); // PointerType v8::Isolate::AllowJavascriptExecutionScope *
  emit<_ast7346>(); // RecordType v8::Isolate::AllowJavascriptExecutionScope
  emit<_ast7347>(); // CXXDestructorDecl ~AllowJavascriptExecutionScope
  emit<_ast7348>(); // FunctionProtoType void ()
  emit<_ast7349>(); // CXXConstructorDecl AllowJavascriptExecutionScope
  emit<_ast7351>(); // FunctionProtoType void (const v8::Isolate::AllowJavascriptExecutionScope &)
  emit<_ast7352>(); // LValueReferenceType const v8::Isolate::AllowJavascriptExecutionScope &
  emit<_ast7353>(); // RecordType const v8::Isolate::AllowJavascriptExecutionScope
  emit<_ast7354>(); // CXXMethodDecl operator=
  emit<_ast7356>(); // FunctionProtoType v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
  emit<_ast7357>(); // LValueReferenceType v8::Isolate::AllowJavascriptExecutionScope &
  emit<_ast7360>(); // CXXConstructorDecl SuppressMicrotaskExecutionScope
  emit<_ast7362>(); // PointerType v8::Isolate::SuppressMicrotaskExecutionScope *
  emit<_ast7363>(); // RecordType v8::Isolate::SuppressMicrotaskExecutionScope
  emit<_ast7364>(); // CXXConstructorDecl SuppressMicrotaskExecutionScope
  emit<_ast7366>(); // FunctionProtoType void (v8::MicrotaskQueue *)
  emit<_ast7367>(); // CXXDestructorDecl ~SuppressMicrotaskExecutionScope
  emit<_ast7368>(); // FunctionProtoType void ()
  emit<_ast7369>(); // CXXConstructorDecl SuppressMicrotaskExecutionScope
  emit<_ast7371>(); // FunctionProtoType void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
  emit<_ast7372>(); // LValueReferenceType const v8::Isolate::SuppressMicrotaskExecutionScope &
  emit<_ast7373>(); // RecordType const v8::Isolate::SuppressMicrotaskExecutionScope
  emit<_ast7374>(); // CXXMethodDecl operator=
  emit<_ast7376>(); // FunctionProtoType v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
  emit<_ast7377>(); // LValueReferenceType v8::Isolate::SuppressMicrotaskExecutionScope &
  emit<_ast7380>(); // CXXConstructorDecl SafeForTerminationScope
  emit<_ast7382>(); // FunctionProtoType void (v8::Isolate *)
  emit<_ast7383>(); // PointerType v8::Isolate::SafeForTerminationScope *
  emit<_ast7384>(); // RecordType v8::Isolate::SafeForTerminationScope
  emit<_ast7385>(); // CXXDestructorDecl ~SafeForTerminationScope
  emit<_ast7386>(); // FunctionProtoType void ()
  emit<_ast7387>(); // CXXConstructorDecl SafeForTerminationScope
  emit<_ast7389>(); // FunctionProtoType void (const v8::Isolate::SafeForTerminationScope &)
  emit<_ast7390>(); // LValueReferenceType const v8::Isolate::SafeForTerminationScope &
  emit<_ast7391>(); // RecordType const v8::Isolate::SafeForTerminationScope
  emit<_ast7392>(); // CXXMethodDecl operator=
  emit<_ast7394>(); // FunctionProtoType v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
  emit<_ast7395>(); // LValueReferenceType v8::Isolate::SafeForTerminationScope &
  emit<_ast7484>(); // TypedefDecl UseCounterCallback
  emit<_ast7485>(); // PointerType void (*)(v8::Isolate *, v8::Isolate::UseCounterFeature)
  emit<_ast7486>(); // ParenType void (v8::Isolate *, v8::Isolate::UseCounterFeature)
  emit<_ast7487>(); // FunctionProtoType void (v8::Isolate *, v8::Isolate::UseCounterFeature)
  emit<_ast7488>(); // EnumType v8::Isolate::UseCounterFeature
  emit<_ast7489>(); // CXXMethodDecl Allocate
  emit<_ast7490>(); // CXXMethodDecl Initialize
  emit<_ast7493>(); // FunctionProtoType void (v8::Isolate *, const v8::Isolate::CreateParams &)
  emit<_ast7494>(); // LValueReferenceType const v8::Isolate::CreateParams &
  emit<_ast7495>(); // RecordType const v8::Isolate::CreateParams
  emit<_ast7496>(); // CXXMethodDecl New
  emit<_ast7498>(); // FunctionProtoType v8::Isolate *(const v8::Isolate::CreateParams &)
  emit<_ast7499>(); // CXXMethodDecl GetCurrent
  emit<_ast7500>(); // TypedefDecl AbortOnUncaughtExceptionCallback
  emit<_ast7501>(); // PointerType bool (*)(v8::Isolate *)
  emit<_ast7502>(); // ParenType bool (v8::Isolate *)
  emit<_ast7503>(); // CXXMethodDecl SetAbortOnUncaughtExceptionCallback
  emit<_ast7505>(); // FunctionProtoType void (v8::Isolate::AbortOnUncaughtExceptionCallback)
  emit<_ast7506>(); // TypedefType v8::Isolate::AbortOnUncaughtExceptionCallback
  emit<_ast7507>(); // CXXMethodDecl SetHostImportModuleDynamicallyCallback
  emit<_ast7509>(); // FunctionProtoType void (v8::HostImportModuleDynamicallyCallback)
  emit<_ast7510>(); // TypedefType v8::HostImportModuleDynamicallyCallback
  emit<_ast7511>(); // CXXMethodDecl SetHostInitializeImportMetaObjectCallback
  emit<_ast7513>(); // FunctionProtoType void (v8::HostInitializeImportMetaObjectCallback)
  emit<_ast7514>(); // TypedefType v8::HostInitializeImportMetaObjectCallback
  emit<_ast7515>(); // CXXMethodDecl SetPrepareStackTraceCallback
  emit<_ast7517>(); // FunctionProtoType void (v8::PrepareStackTraceCallback)
  emit<_ast7518>(); // TypedefType v8::PrepareStackTraceCallback
  emit<_ast7519>(); // CXXMethodDecl MemoryPressureNotification
  emit<_ast7521>(); // FunctionProtoType void (v8::MemoryPressureLevel)
  emit<_ast7522>(); // EnumType v8::MemoryPressureLevel
  emit<_ast7523>(); // CXXMethodDecl Enter
  emit<_ast7524>(); // CXXMethodDecl Exit
  emit<_ast7525>(); // CXXMethodDecl Dispose
  emit<_ast7526>(); // CXXMethodDecl DumpAndResetStats
  emit<_ast7527>(); // CXXMethodDecl DiscardThreadSpecificMetadata
  emit<_ast7528>(); // CXXMethodDecl SetData
  emit<_ast7531>(); // FunctionProtoType void (uint32_t, void *)
  emit<_ast7532>(); // CXXMethodDecl GetData
  emit<_ast7534>(); // FunctionProtoType void *(uint32_t)
  emit<_ast7535>(); // CXXMethodDecl GetNumberOfDataSlots
  emit<_ast7538>(); // CXXMethodDecl GetDataFromSnapshotOnce
  emit<_ast7540>(); // FunctionProtoType MaybeLocal<T> (size_t)
  emit<_ast7542>(); // CXXMethodDecl GetHeapStatistics
  emit<_ast7544>(); // FunctionProtoType void (v8::HeapStatistics *)
  emit<_ast7545>(); // CXXMethodDecl NumberOfHeapSpaces
  emit<_ast7546>(); // CXXMethodDecl GetHeapSpaceStatistics
  emit<_ast7549>(); // FunctionProtoType bool (v8::HeapSpaceStatistics *, size_t)
  emit<_ast7550>(); // CXXMethodDecl NumberOfTrackedHeapObjectTypes
  emit<_ast7551>(); // CXXMethodDecl GetHeapObjectStatisticsAtLastGC
  emit<_ast7554>(); // FunctionProtoType bool (v8::HeapObjectStatistics *, size_t)
  emit<_ast7555>(); // CXXMethodDecl GetHeapCodeAndMetadataStatistics
  emit<_ast7557>(); // FunctionProtoType bool (v8::HeapCodeStatistics *)
  emit<_ast7558>(); // CXXMethodDecl GetStackSample
  emit<_ast7563>(); // FunctionProtoType void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
  emit<_ast7564>(); // LValueReferenceType const v8::RegisterState &
  emit<_ast7565>(); // RecordType const v8::RegisterState
  emit<_ast7566>(); // PointerType void **
  emit<_ast7567>(); // PointerType v8::SampleInfo *
  emit<_ast7568>(); // RecordType v8::SampleInfo
  emit<_ast7569>(); // CXXMethodDecl AdjustAmountOfExternalAllocatedMemory
  emit<_ast7571>(); // FunctionProtoType int64_t (int64_t)
  emit<_ast7572>(); // CXXMethodDecl NumberOfPhantomHandleResetsSinceLastCall
  emit<_ast7573>(); // CXXMethodDecl GetHeapProfiler
  emit<_ast7574>(); // FunctionProtoType v8::HeapProfiler *()
  emit<_ast7575>(); // PointerType v8::HeapProfiler *
  emit<_ast7576>(); // RecordType v8::HeapProfiler
  emit<_ast7577>(); // CXXMethodDecl SetIdle
  emit<_ast7579>(); // CXXMethodDecl GetArrayBufferAllocator
  emit<_ast7580>(); // FunctionProtoType ArrayBuffer::Allocator *()
  emit<_ast7581>(); // PointerType ArrayBuffer::Allocator *
  emit<_ast7583>(); // CXXMethodDecl InContext
  emit<_ast7584>(); // CXXMethodDecl GetCurrentContext
  emit<_ast7585>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7587>(); // CXXMethodDecl GetEnteredContext
  emit<_ast7588>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7590>(); // CXXMethodDecl GetEnteredOrMicrotaskContext
  emit<_ast7591>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7593>(); // CXXMethodDecl GetIncumbentContext
  emit<_ast7594>(); // FunctionProtoType Local<v8::Context> ()
  emit<_ast7596>(); // CXXMethodDecl ThrowException
  emit<_ast7598>(); // FunctionProtoType Local<v8::Value> (Local<v8::Value>)
  emit<_ast7601>(); // TypedefDecl GCCallback
  emit<_ast7602>(); // PointerType void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
  emit<_ast7603>(); // ParenType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
  emit<_ast7604>(); // FunctionProtoType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
  emit<_ast7605>(); // TypedefDecl GCCallbackWithData
  emit<_ast7606>(); // PointerType void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
  emit<_ast7607>(); // ParenType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
  emit<_ast7608>(); // FunctionProtoType void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
  emit<_ast7609>(); // CXXMethodDecl AddGCPrologueCallback
  emit<_ast7613>(); // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
  emit<_ast7614>(); // TypedefType v8::Isolate::GCCallbackWithData
  emit<_ast7615>(); // CXXMethodDecl AddGCPrologueCallback
  emit<_ast7618>(); // FunctionProtoType void (v8::Isolate::GCCallback, v8::GCType)
  emit<_ast7619>(); // TypedefType v8::Isolate::GCCallback
  emit<_ast7620>(); // CXXMethodDecl RemoveGCPrologueCallback
  emit<_ast7623>(); // FunctionProtoType void (v8::Isolate::GCCallbackWithData, void *)
  emit<_ast7624>(); // CXXMethodDecl RemoveGCPrologueCallback
  emit<_ast7626>(); // FunctionProtoType void (v8::Isolate::GCCallback)
  emit<_ast7627>(); // CXXMethodDecl SetEmbedderHeapTracer
  emit<_ast7629>(); // FunctionProtoType void (v8::EmbedderHeapTracer *)
  emit<_ast7630>(); // CXXMethodDecl GetEmbedderHeapTracer
  emit<_ast7631>(); // FunctionProtoType v8::EmbedderHeapTracer *()
  emit<_ast7641>(); // CXXMethodDecl Wake
  emit<_ast7642>(); // PointerType v8::Isolate::AtomicsWaitWakeHandle *
  emit<_ast7643>(); // RecordType v8::Isolate::AtomicsWaitWakeHandle
  emit<_ast7644>(); // TypedefDecl AtomicsWaitCallback
  emit<_ast7645>(); // PointerType void (*)(v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
  emit<_ast7646>(); // ParenType void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
  emit<_ast7647>(); // FunctionProtoType void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
  emit<_ast7648>(); // EnumType v8::Isolate::AtomicsWaitEvent
  emit<_ast7650>(); // CXXMethodDecl SetAtomicsWaitCallback
  emit<_ast7653>(); // FunctionProtoType void (v8::Isolate::AtomicsWaitCallback, void *)
  emit<_ast7654>(); // TypedefType v8::Isolate::AtomicsWaitCallback
  emit<_ast7655>(); // CXXMethodDecl AddGCEpilogueCallback
  emit<_ast7659>(); // CXXMethodDecl AddGCEpilogueCallback
  emit<_ast7662>(); // CXXMethodDecl RemoveGCEpilogueCallback
  emit<_ast7665>(); // CXXMethodDecl RemoveGCEpilogueCallback
  emit<_ast7667>(); // TypedefDecl GetExternallyAllocatedMemoryInBytesCallback
  emit<_ast7668>(); // PointerType size_t (*)()
  emit<_ast7669>(); // ParenType size_t ()
  emit<_ast7670>(); // CXXMethodDecl SetGetExternallyAllocatedMemoryInBytesCallback
  emit<_ast7672>(); // FunctionProtoType void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
  emit<_ast7673>(); // TypedefType v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
  emit<_ast7674>(); // CXXMethodDecl TerminateExecution
  emit<_ast7675>(); // CXXMethodDecl IsExecutionTerminating
  emit<_ast7676>(); // CXXMethodDecl CancelTerminateExecution
  emit<_ast7677>(); // CXXMethodDecl RequestInterrupt
  emit<_ast7680>(); // FunctionProtoType void (v8::InterruptCallback, void *)
  emit<_ast7681>(); // TypedefType v8::InterruptCallback
  emit<_ast7682>(); // CXXMethodDecl RequestGarbageCollectionForTesting
  emit<_ast7684>(); // FunctionProtoType void (v8::Isolate::GarbageCollectionType)
  emit<_ast7685>(); // EnumType v8::Isolate::GarbageCollectionType
  emit<_ast7686>(); // CXXMethodDecl SetEventLogger
  emit<_ast7688>(); // FunctionProtoType void (v8::LogEventCallback)
  emit<_ast7689>(); // TypedefType v8::LogEventCallback
  emit<_ast7690>(); // CXXMethodDecl AddBeforeCallEnteredCallback
  emit<_ast7692>(); // FunctionProtoType void (v8::BeforeCallEnteredCallback)
  emit<_ast7693>(); // TypedefType v8::BeforeCallEnteredCallback
  emit<_ast7694>(); // CXXMethodDecl RemoveBeforeCallEnteredCallback
  emit<_ast7696>(); // CXXMethodDecl AddCallCompletedCallback
  emit<_ast7698>(); // FunctionProtoType void (v8::CallCompletedCallback)
  emit<_ast7699>(); // TypedefType v8::CallCompletedCallback
  emit<_ast7700>(); // CXXMethodDecl RemoveCallCompletedCallback
  emit<_ast7702>(); // CXXMethodDecl SetPromiseHook
  emit<_ast7704>(); // FunctionProtoType void (v8::PromiseHook)
  emit<_ast7705>(); // TypedefType v8::PromiseHook
  emit<_ast7706>(); // CXXMethodDecl SetPromiseRejectCallback
  emit<_ast7708>(); // FunctionProtoType void (v8::PromiseRejectCallback)
  emit<_ast7709>(); // TypedefType v8::PromiseRejectCallback
  emit<_ast7710>(); // CXXMethodDecl RunMicrotasks
  emit<_ast7711>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast7713>(); // FunctionProtoType void (Local<v8::Function>)
  emit<_ast7715>(); // CXXMethodDecl EnqueueMicrotask
  emit<_ast7718>(); // FunctionProtoType void (v8::MicrotaskCallback, void *)
  emit<_ast7719>(); // CXXMethodDecl SetMicrotasksPolicy
  emit<_ast7721>(); // FunctionProtoType void (v8::MicrotasksPolicy)
  emit<_ast7722>(); // CXXMethodDecl GetMicrotasksPolicy
  emit<_ast7723>(); // FunctionProtoType v8::MicrotasksPolicy () const
  emit<_ast7724>(); // PointerType const v8::Isolate *
  emit<_ast7725>(); // RecordType const v8::Isolate
  emit<_ast7726>(); // CXXMethodDecl AddMicrotasksCompletedCallback
  emit<_ast7728>(); // FunctionProtoType void (v8::MicrotasksCompletedCallback)
  emit<_ast7729>(); // TypedefType v8::MicrotasksCompletedCallback
  emit<_ast7730>(); // CXXMethodDecl AddMicrotasksCompletedCallback
  emit<_ast7733>(); // CXXMethodDecl RemoveMicrotasksCompletedCallback
  emit<_ast7735>(); // CXXMethodDecl RemoveMicrotasksCompletedCallback
  emit<_ast7738>(); // CXXMethodDecl SetUseCounterCallback
  emit<_ast7740>(); // FunctionProtoType void (v8::Isolate::UseCounterCallback)
  emit<_ast7741>(); // TypedefType v8::Isolate::UseCounterCallback
  emit<_ast7742>(); // CXXMethodDecl SetCounterFunction
  emit<_ast7744>(); // FunctionProtoType void (v8::CounterLookupCallback)
  emit<_ast7745>(); // TypedefType v8::CounterLookupCallback
  emit<_ast7746>(); // CXXMethodDecl SetCreateHistogramFunction
  emit<_ast7748>(); // FunctionProtoType void (v8::CreateHistogramCallback)
  emit<_ast7749>(); // TypedefType v8::CreateHistogramCallback
  emit<_ast7750>(); // CXXMethodDecl SetAddHistogramSampleFunction
  emit<_ast7752>(); // FunctionProtoType void (v8::AddHistogramSampleCallback)
  emit<_ast7753>(); // TypedefType v8::AddHistogramSampleCallback
  emit<_ast7754>(); // CXXMethodDecl IdleNotificationDeadline
  emit<_ast7756>(); // CXXMethodDecl LowMemoryNotification
  emit<_ast7757>(); // CXXMethodDecl ContextDisposedNotification
  emit<_ast7759>(); // FunctionProtoType int (bool)
  emit<_ast7760>(); // CXXMethodDecl IsolateInForegroundNotification
  emit<_ast7761>(); // CXXMethodDecl IsolateInBackgroundNotification
  emit<_ast7762>(); // CXXMethodDecl EnableMemorySavingsMode
  emit<_ast7763>(); // CXXMethodDecl DisableMemorySavingsMode
  emit<_ast7764>(); // CXXMethodDecl SetRAILMode
  emit<_ast7766>(); // FunctionProtoType void (v8::RAILMode)
  emit<_ast7767>(); // EnumType v8::RAILMode
  emit<_ast7768>(); // BuiltinType unsigned int
  emit<_ast7769>(); // CXXMethodDecl IncreaseHeapLimitForDebugging
  emit<_ast7770>(); // CXXMethodDecl RestoreOriginalHeapLimit
  emit<_ast7771>(); // CXXMethodDecl IsHeapLimitIncreasedForDebugging
  emit<_ast7772>(); // CXXMethodDecl SetJitCodeEventHandler
  emit<_ast7775>(); // FunctionProtoType void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
  emit<_ast7776>(); // EnumType v8::JitCodeEventOptions
  emit<_ast7777>(); // TypedefType v8::JitCodeEventHandler
  emit<_ast7778>(); // CXXMethodDecl SetStackLimit
  emit<_ast7780>(); // FunctionProtoType void (uintptr_t)
  emit<_ast7781>(); // TypedefType uintptr_t
  emit<_ast7782>(); // CXXMethodDecl GetCodeRange
  emit<_ast7785>(); // FunctionProtoType void (void **, size_t *)
  emit<_ast7786>(); // CXXMethodDecl GetUnwindState
  emit<_ast7787>(); // FunctionProtoType v8::UnwindState ()
  emit<_ast7788>(); // RecordType v8::UnwindState
  emit<_ast7789>(); // CXXMethodDecl SetFatalErrorHandler
  emit<_ast7791>(); // FunctionProtoType void (v8::FatalErrorCallback)
  emit<_ast7792>(); // TypedefType v8::FatalErrorCallback
  emit<_ast7793>(); // CXXMethodDecl SetOOMErrorHandler
  emit<_ast7795>(); // FunctionProtoType void (v8::OOMErrorCallback)
  emit<_ast7796>(); // TypedefType v8::OOMErrorCallback
  emit<_ast7797>(); // CXXMethodDecl AddNearHeapLimitCallback
  emit<_ast7800>(); // FunctionProtoType void (v8::NearHeapLimitCallback, void *)
  emit<_ast7801>(); // TypedefType v8::NearHeapLimitCallback
  emit<_ast7802>(); // CXXMethodDecl RemoveNearHeapLimitCallback
  emit<_ast7805>(); // FunctionProtoType void (v8::NearHeapLimitCallback, size_t)
  emit<_ast7806>(); // CXXMethodDecl AutomaticallyRestoreInitialHeapLimit
  emit<_ast7808>(); // CXXMethodDecl SetAllowCodeGenerationFromStringsCallback
  emit<_ast7810>(); // FunctionProtoType void (v8::AllowCodeGenerationFromStringsCallback)
  emit<_ast7811>(); // TypedefType v8::AllowCodeGenerationFromStringsCallback
  emit<_ast7812>(); // CXXMethodDecl SetAllowWasmCodeGenerationCallback
  emit<_ast7814>(); // FunctionProtoType void (v8::AllowWasmCodeGenerationCallback)
  emit<_ast7815>(); // TypedefType v8::AllowWasmCodeGenerationCallback
  emit<_ast7816>(); // CXXMethodDecl SetWasmModuleCallback
  emit<_ast7818>(); // FunctionProtoType void (v8::ExtensionCallback)
  emit<_ast7819>(); // TypedefType v8::ExtensionCallback
  emit<_ast7820>(); // CXXMethodDecl SetWasmInstanceCallback
  emit<_ast7822>(); // CXXMethodDecl SetWasmStreamingCallback
  emit<_ast7824>(); // FunctionProtoType void (v8::WasmStreamingCallback)
  emit<_ast7825>(); // TypedefType v8::WasmStreamingCallback
  emit<_ast7826>(); // CXXMethodDecl SetWasmThreadsEnabledCallback
  emit<_ast7828>(); // FunctionProtoType void (v8::WasmThreadsEnabledCallback)
  emit<_ast7829>(); // TypedefType v8::WasmThreadsEnabledCallback
  emit<_ast7830>(); // CXXMethodDecl IsDead
  emit<_ast7831>(); // CXXMethodDecl AddMessageListener
  emit<_ast7834>(); // FunctionProtoType bool (v8::MessageCallback, Local<v8::Value>)
  emit<_ast7835>(); // TypedefType v8::MessageCallback
  emit<_ast7837>(); // CXXMethodDecl AddMessageListenerWithErrorLevel
  emit<_ast7841>(); // FunctionProtoType bool (v8::MessageCallback, int, Local<v8::Value>)
  emit<_ast7843>(); // CXXMethodDecl RemoveMessageListeners
  emit<_ast7845>(); // FunctionProtoType void (v8::MessageCallback)
  emit<_ast7846>(); // CXXMethodDecl SetFailedAccessCheckCallbackFunction
  emit<_ast7848>(); // FunctionProtoType void (v8::FailedAccessCheckCallback)
  emit<_ast7849>(); // TypedefType v8::FailedAccessCheckCallback
  emit<_ast7850>(); // CXXMethodDecl SetCaptureStackTraceForUncaughtExceptions
  emit<_ast7854>(); // FunctionProtoType void (bool, int, StackTrace::StackTraceOptions)
  emit<_ast7856>(); // CXXMethodDecl VisitExternalResources
  emit<_ast7858>(); // FunctionProtoType void (v8::ExternalResourceVisitor *)
  emit<_ast7859>(); // CXXMethodDecl VisitHandlesWithClassIds
  emit<_ast7861>(); // FunctionProtoType void (v8::PersistentHandleVisitor *)
  emit<_ast7862>(); // CXXMethodDecl VisitWeakHandles
  emit<_ast7864>(); // CXXMethodDecl IsInUse
  emit<_ast7865>(); // CXXMethodDecl SetAllowAtomicsWait
  emit<_ast7870>(); // CXXMethodDecl DateTimeConfigurationChangeNotification
  emit<_ast7872>(); // FunctionProtoType void (v8::Isolate::TimeZoneDetection)
  emit<_ast7873>(); // EnumType v8::Isolate::TimeZoneDetection
  emit<_ast7874>(); // CXXMethodDecl LocaleConfigurationChangeNotification
  emit<_ast7875>(); // CXXConstructorDecl Isolate
  emit<_ast7876>(); // CXXDestructorDecl ~Isolate
  emit<_ast7877>(); // FunctionProtoType void ()
  emit<_ast7878>(); // CXXConstructorDecl Isolate
  emit<_ast7880>(); // FunctionProtoType void (const v8::Isolate &)
  emit<_ast7881>(); // LValueReferenceType const v8::Isolate &
  emit<_ast7882>(); // CXXMethodDecl operator=
  emit<_ast7884>(); // FunctionProtoType v8::Isolate &(const v8::Isolate &)
  emit<_ast7885>(); // LValueReferenceType v8::Isolate &
  emit<_ast7886>(); // CXXMethodDecl operator new
  emit<_ast7888>(); // CXXMethodDecl operator new[]
  emit<_ast7890>(); // CXXMethodDecl operator delete
  emit<_ast7893>(); // FunctionProtoType void (void *, size_t) noexcept
  emit<_ast7894>(); // CXXMethodDecl operator delete[]
  emit<_ast7898>(); // CXXMethodDecl CanBeRehashed
  emit<_ast7899>(); // PointerType const v8::StartupData *
  emit<_ast7900>(); // RecordType const v8::StartupData
  emit<_ast7903>(); // TypedefDecl EntropySource
  emit<_ast7904>(); // PointerType bool (*)(unsigned char *, size_t)
  emit<_ast7905>(); // ParenType bool (unsigned char *, size_t)
  emit<_ast7906>(); // FunctionProtoType bool (unsigned char *, size_t)
  emit<_ast7907>(); // PointerType unsigned char *
  emit<_ast7908>(); // BuiltinType unsigned char
  emit<_ast7909>(); // TypedefDecl ReturnAddressLocationResolver
  emit<_ast7910>(); // PointerType uintptr_t (*)(uintptr_t)
  emit<_ast7911>(); // ParenType uintptr_t (uintptr_t)
  emit<_ast7912>(); // FunctionProtoType uintptr_t (uintptr_t)
  emit<_ast7915>(); // CXXMethodDecl SetNativesDataBlob
  emit<_ast7917>(); // FunctionProtoType void (v8::StartupData *)
  emit<_ast7918>(); // PointerType v8::StartupData *
  emit<_ast7919>(); // CXXMethodDecl SetSnapshotDataBlob
  emit<_ast7921>(); // CXXMethodDecl SetDcheckErrorHandler
  emit<_ast7923>(); // FunctionProtoType void (v8::DcheckErrorCallback)
  emit<_ast7924>(); // TypedefType v8::DcheckErrorCallback
  emit<_ast7925>(); // CXXMethodDecl SetFlagsFromString
  emit<_ast7927>(); // CXXMethodDecl SetFlagsFromString
  emit<_ast7930>(); // FunctionProtoType void (const char *, size_t)
  emit<_ast7931>(); // CXXMethodDecl SetFlagsFromString
  emit<_ast7934>(); // CXXMethodDecl SetFlagsFromCommandLine
  emit<_ast7938>(); // FunctionProtoType void (int *, char **, bool)
  emit<_ast7939>(); // PointerType char **
  emit<_ast7940>(); // CXXMethodDecl GetVersion
  emit<_ast7941>(); // CXXMethodDecl Initialize
  emit<_ast7942>(); // CXXMethodDecl SetEntropySource
  emit<_ast7944>(); // FunctionProtoType void (v8::EntropySource)
  emit<_ast7945>(); // TypedefType v8::EntropySource
  emit<_ast7946>(); // CXXMethodDecl SetReturnAddressLocationResolver
  emit<_ast7948>(); // FunctionProtoType void (v8::ReturnAddressLocationResolver)
  emit<_ast7949>(); // TypedefType v8::ReturnAddressLocationResolver
  emit<_ast7950>(); // CXXMethodDecl Dispose
  emit<_ast7951>(); // CXXMethodDecl InitializeICU
  emit<_ast7953>(); // FunctionProtoType bool (const char *)
  emit<_ast7954>(); // CXXMethodDecl InitializeICUDefaultLocation
  emit<_ast7957>(); // FunctionProtoType bool (const char *, const char *)
  emit<_ast7958>(); // CXXMethodDecl InitializeExternalStartupData
  emit<_ast7960>(); // CXXMethodDecl InitializeExternalStartupData
  emit<_ast7963>(); // CXXMethodDecl InitializePlatform
  emit<_ast7965>(); // FunctionProtoType void (v8::Platform *)
  emit<_ast7966>(); // PointerType v8::Platform *
  emit<_ast7967>(); // RecordType v8::Platform
  emit<_ast7968>(); // CXXMethodDecl ShutdownPlatform
  emit<_ast7969>(); // CXXMethodDecl EnableWebAssemblyTrapHandler
  emit<_ast7971>(); // FunctionProtoType bool (bool)
  emit<_ast7972>(); // CXXMethodDecl SetUnhandledExceptionCallback
  emit<_ast7974>(); // FunctionProtoType void (v8::UnhandledExceptionCallback)
  emit<_ast7975>(); // TypedefType v8::UnhandledExceptionCallback
  emit<_ast7981>(); // CXXConstructorDecl SnapshotCreator
  emit<_ast7985>(); // FunctionProtoType void (v8::Isolate *, const intptr_t *, v8::StartupData *)
  emit<_ast7986>(); // PointerType const intptr_t *
  emit<_ast7987>(); // TypedefType const intptr_t
  emit<_ast7988>(); // TypedefType intptr_t
  emit<_ast7989>(); // PointerType v8::SnapshotCreator *
  emit<_ast7990>(); // RecordType v8::SnapshotCreator
  emit<_ast7991>(); // CXXConstructorDecl SnapshotCreator
  emit<_ast7994>(); // FunctionProtoType void (const intptr_t *, v8::StartupData *)
  emit<_ast7995>(); // CXXDestructorDecl ~SnapshotCreator
  emit<_ast7996>(); // FunctionProtoType void ()
  emit<_ast7997>(); // CXXMethodDecl GetIsolate
  emit<_ast7998>(); // CXXMethodDecl SetDefaultContext
  emit<_ast8001>(); // FunctionProtoType void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
  emit<_ast8003>(); // CXXMethodDecl AddContext
  emit<_ast8006>(); // FunctionProtoType size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
  emit<_ast8008>(); // CXXMethodDecl AddTemplate
  emit<_ast8010>(); // FunctionProtoType size_t (Local<v8::Template>)
  emit<_ast8014>(); // CXXMethodDecl AddData
  emit<_ast8017>(); // FunctionProtoType size_t (Local<v8::Context>, Local<T>)
  emit<_ast8022>(); // CXXMethodDecl AddData
  emit<_ast8024>(); // FunctionProtoType size_t (Local<T>)
  emit<_ast8026>(); // CXXMethodDecl CreateBlob
  emit<_ast8028>(); // FunctionProtoType v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
  emit<_ast8029>(); // EnumType v8::SnapshotCreator::FunctionCodeHandling
  emit<_ast8030>(); // CXXConstructorDecl SnapshotCreator
  emit<_ast8032>(); // FunctionProtoType void (const v8::SnapshotCreator &)
  emit<_ast8033>(); // LValueReferenceType const v8::SnapshotCreator &
  emit<_ast8034>(); // RecordType const v8::SnapshotCreator
  emit<_ast8035>(); // CXXMethodDecl operator=
  emit<_ast8039>(); // CXXMethodDecl IsNothing
  emit<_ast8040>(); // PointerType const Maybe<T> *
  emit<_ast8041>(); // InjectedClassNameType const Maybe<T>
  emit<_ast8043>(); // CXXMethodDecl IsJust
  emit<_ast8044>(); // CXXMethodDecl ToChecked
  emit<_ast8045>(); // FunctionProtoType T () const
  emit<_ast8047>(); // CXXMethodDecl Check
  emit<_ast8048>(); // CXXMethodDecl To
  emit<_ast8050>(); // FunctionProtoType bool (T *) const
  emit<_ast8051>(); // PointerType T *
  emit<_ast8052>(); // CXXMethodDecl FromJust
  emit<_ast8053>(); // CXXMethodDecl FromMaybe
  emit<_ast8055>(); // FunctionProtoType T (const T &) const
  emit<_ast8056>(); // LValueReferenceType const T &
  emit<_ast8057>(); // TemplateTypeParmType const T
  emit<_ast8058>(); // CXXMethodDecl operator==
  emit<_ast8060>(); // FunctionProtoType bool (const Maybe<T> &) const
  emit<_ast8061>(); // LValueReferenceType const Maybe<T> &
  emit<_ast8062>(); // CXXMethodDecl operator!=
  emit<_ast8066>(); // FunctionDecl Nothing
  emit<_ast8067>(); // FunctionProtoType Maybe<T> ()
  emit<_ast8071>(); // FunctionDecl Just
  emit<_ast8073>(); // FunctionProtoType Maybe<T> (const T &)
  emit<_ast8074>(); // LValueReferenceType const T &
  emit<_ast8075>(); // TemplateTypeParmType const T
  emit<_ast8080>(); // CXXMethodDecl IsNothing
  emit<_ast8081>(); // PointerType const v8::Maybe<void> *
  emit<_ast8082>(); // RecordType const v8::Maybe<void>
  emit<_ast8083>(); // RecordType v8::Maybe<void>
  emit<_ast8084>(); // CXXMethodDecl IsJust
  emit<_ast8085>(); // CXXMethodDecl operator==
  emit<_ast8087>(); // FunctionProtoType bool (const v8::Maybe<void> &) const
  emit<_ast8088>(); // LValueReferenceType const v8::Maybe<void> &
  emit<_ast8089>(); // CXXMethodDecl operator!=
  emit<_ast8091>(); // CXXConstructorDecl Maybe
  emit<_ast8093>(); // FunctionProtoType void (const v8::Maybe<void> &)
  emit<_ast8094>(); // PointerType v8::Maybe<void> *
  emit<_ast8095>(); // CXXConstructorDecl Maybe
  emit<_ast8097>(); // FunctionProtoType void (v8::Maybe<void> &&) noexcept
  emit<_ast8098>(); // RValueReferenceType v8::Maybe<void> &&
  emit<_ast8099>(); // CXXDestructorDecl ~Maybe
  emit<_ast8100>(); // FunctionDecl JustVoid
  emit<_ast8101>(); // FunctionProtoType Maybe<void> ()
  emit<_ast8105>(); // CXXConstructorDecl TryCatch
  emit<_ast8107>(); // PointerType v8::TryCatch *
  emit<_ast8108>(); // RecordType v8::TryCatch
  emit<_ast8109>(); // CXXDestructorDecl ~TryCatch
  emit<_ast8110>(); // FunctionProtoType void ()
  emit<_ast8111>(); // CXXMethodDecl HasCaught
  emit<_ast8112>(); // PointerType const v8::TryCatch *
  emit<_ast8113>(); // RecordType const v8::TryCatch
  emit<_ast8114>(); // CXXMethodDecl CanContinue
  emit<_ast8115>(); // CXXMethodDecl HasTerminated
  emit<_ast8116>(); // CXXMethodDecl ReThrow
  emit<_ast8117>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast8119>(); // CXXMethodDecl Exception
  emit<_ast8120>(); // FunctionProtoType Local<v8::Value> () const
  emit<_ast8122>(); // CXXMethodDecl StackTrace
  emit<_ast8124>(); // FunctionProtoType MaybeLocal<v8::Value> (Local<v8::Context>) const
  emit<_ast8127>(); // CXXMethodDecl Message
  emit<_ast8128>(); // FunctionProtoType Local<v8::Message> () const
  emit<_ast8130>(); // CXXMethodDecl Reset
  emit<_ast8131>(); // CXXMethodDecl SetVerbose
  emit<_ast8133>(); // CXXMethodDecl IsVerbose
  emit<_ast8134>(); // CXXMethodDecl SetCaptureMessage
  emit<_ast8136>(); // CXXMethodDecl JSStackComparableAddress
  emit<_ast8138>(); // FunctionProtoType void *(v8::TryCatch *)
  emit<_ast8139>(); // CXXConstructorDecl TryCatch
  emit<_ast8141>(); // FunctionProtoType void (const v8::TryCatch &)
  emit<_ast8142>(); // LValueReferenceType const v8::TryCatch &
  emit<_ast8143>(); // CXXMethodDecl operator=
  emit<_ast8147>(); // CXXConstructorDecl ExtensionConfiguration
  emit<_ast8148>(); // PointerType v8::ExtensionConfiguration *
  emit<_ast8149>(); // RecordType v8::ExtensionConfiguration
  emit<_ast8150>(); // CXXConstructorDecl ExtensionConfiguration
  emit<_ast8153>(); // FunctionProtoType void (int, const char **)
  emit<_ast8155>(); // CXXMethodDecl begin
  emit<_ast8156>(); // PointerType const v8::ExtensionConfiguration *
  emit<_ast8157>(); // RecordType const v8::ExtensionConfiguration
  emit<_ast8158>(); // CXXMethodDecl end
  emit<_ast8160>(); // CXXMethodDecl Global
  emit<_ast8161>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast8163>(); // PointerType v8::Context *
  emit<_ast8164>(); // RecordType v8::Context
  emit<_ast8165>(); // CXXMethodDecl DetachGlobal
  emit<_ast8166>(); // CXXMethodDecl New
  emit<_ast8173>(); // FunctionProtoType Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
  emit<_ast8177>(); // CXXMethodDecl FromSnapshot
  emit<_ast8184>(); // FunctionProtoType MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
  emit<_ast8187>(); // CXXMethodDecl NewRemoteContext
  emit<_ast8191>(); // FunctionProtoType MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
  emit<_ast8195>(); // CXXMethodDecl SetSecurityToken
  emit<_ast8197>(); // FunctionProtoType void (Local<v8::Value>)
  emit<_ast8199>(); // CXXMethodDecl UseDefaultSecurityToken
  emit<_ast8200>(); // CXXMethodDecl GetSecurityToken
  emit<_ast8201>(); // FunctionProtoType Local<v8::Value> ()
  emit<_ast8203>(); // CXXMethodDecl Enter
  emit<_ast8204>(); // CXXMethodDecl Exit
  emit<_ast8205>(); // CXXMethodDecl GetIsolate
  emit<_ast8208>(); // CXXMethodDecl GetNumberOfEmbedderDataFields
  emit<_ast8209>(); // CXXMethodDecl GetEmbedderData
  emit<_ast8211>(); // FunctionProtoType Local<v8::Value> (int)
  emit<_ast8213>(); // CXXMethodDecl GetExtrasBindingObject
  emit<_ast8214>(); // FunctionProtoType Local<v8::Object> ()
  emit<_ast8216>(); // CXXMethodDecl SetEmbedderData
  emit<_ast8219>(); // FunctionProtoType void (int, Local<v8::Value>)
  emit<_ast8221>(); // CXXMethodDecl GetAlignedPointerFromEmbedderData
  emit<_ast8223>(); // CXXMethodDecl SetAlignedPointerInEmbedderData
  emit<_ast8226>(); // CXXMethodDecl AllowCodeGenerationFromStrings
  emit<_ast8228>(); // CXXMethodDecl IsCodeGenerationFromStringsAllowed
  emit<_ast8229>(); // CXXMethodDecl SetErrorMessageForCodeGenerationFromStrings
  emit<_ast8231>(); // FunctionProtoType void (Local<v8::String>)
  emit<_ast8235>(); // CXXMethodDecl GetDataFromSnapshotOnce
  emit<_ast8237>(); // FunctionProtoType MaybeLocal<T> (size_t)
  emit<_ast8239>(); // TypedefDecl AbortScriptExecutionCallback
  emit<_ast8240>(); // PointerType void (*)(v8::Isolate *, Local<v8::Context>)
  emit<_ast8241>(); // ParenType void (v8::Isolate *, Local<v8::Context>)
  emit<_ast8242>(); // FunctionProtoType void (v8::Isolate *, Local<v8::Context>)
  emit<_ast8244>(); // CXXMethodDecl SetAbortScriptExecution
  emit<_ast8246>(); // FunctionProtoType void (v8::Context::AbortScriptExecutionCallback)
  emit<_ast8247>(); // TypedefType v8::Context::AbortScriptExecutionCallback
  emit<_ast8250>(); // CXXConstructorDecl Scope
  emit<_ast8252>(); // FunctionProtoType void (Local<v8::Context>)
  emit<_ast8254>(); // PointerType v8::Context::Scope *
  emit<_ast8255>(); // RecordType v8::Context::Scope
  emit<_ast8256>(); // CXXDestructorDecl ~Scope
  emit<_ast8259>(); // CXXConstructorDecl BackupIncumbentScope
  emit<_ast8261>(); // FunctionProtoType void (Local<v8::Context>)
  emit<_ast8263>(); // PointerType v8::Context::BackupIncumbentScope *
  emit<_ast8264>(); // RecordType v8::Context::BackupIncumbentScope
  emit<_ast8265>(); // CXXDestructorDecl ~BackupIncumbentScope
  emit<_ast8266>(); // FunctionProtoType void ()
  emit<_ast8267>(); // CXXMethodDecl JSStackComparableAddress
  emit<_ast8268>(); // FunctionProtoType uintptr_t () const
  emit<_ast8269>(); // PointerType const v8::Context::BackupIncumbentScope *
  emit<_ast8270>(); // RecordType const v8::Context::BackupIncumbentScope
  emit<_ast8273>(); // CXXConstructorDecl Unlocker
  emit<_ast8275>(); // PointerType v8::Unlocker *
  emit<_ast8276>(); // RecordType v8::Unlocker
  emit<_ast8277>(); // CXXDestructorDecl ~Unlocker
  emit<_ast8278>(); // FunctionProtoType void ()
  emit<_ast8281>(); // CXXConstructorDecl Locker
  emit<_ast8283>(); // PointerType v8::Locker *
  emit<_ast8284>(); // RecordType v8::Locker
  emit<_ast8285>(); // CXXDestructorDecl ~Locker
  emit<_ast8286>(); // FunctionProtoType void ()
  emit<_ast8287>(); // CXXMethodDecl IsLocked
  emit<_ast8289>(); // CXXMethodDecl IsActive
  emit<_ast8290>(); // CXXConstructorDecl Locker
  emit<_ast8292>(); // FunctionProtoType void (const v8::Locker &)
  emit<_ast8293>(); // LValueReferenceType const v8::Locker &
  emit<_ast8294>(); // RecordType const v8::Locker
  emit<_ast8295>(); // CXXMethodDecl operator=
  emit<_ast8299>(); // CXXMethodDecl TryUnwindV8Frames
  emit<_ast8303>(); // FunctionProtoType bool (const v8::UnwindState &, v8::RegisterState *, const void *)
  emit<_ast8304>(); // LValueReferenceType const v8::UnwindState &
  emit<_ast8305>(); // RecordType const v8::UnwindState
  emit<_ast8306>(); // CXXMethodDecl PCIsInV8
  emit<_ast8309>(); // FunctionProtoType bool (const v8::UnwindState &, void *)
}// Done: 0
