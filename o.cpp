struct _s1 { static const char* value = "v8"; };
struct _s2 { static const char* value = "Context"; };
struct _s3 { static const char* value = "Data"; };
struct _s4 { static const char* value = "Isolate"; };
struct _s5 { static const char* value = "AccessorSignature"; };
struct _s6 { static const char* value = "Array"; };
struct _s7 { static const char* value = "ArrayBuffer"; };
struct _s8 { static const char* value = "BigInt"; };
struct _s9 { static const char* value = "BigIntObject"; };
struct _s10 { static const char* value = "Boolean"; };
struct _s11 { static const char* value = "BooleanObject"; };
struct _s12 { static const char* value = "Date"; };
struct _s13 { static const char* value = "External"; };
struct _s14 { static const char* value = "Function"; };
struct _s15 { static const char* value = "FunctionTemplate"; };
struct _s16 { static const char* value = "HeapProfiler"; };
struct _s17 { static const char* value = "ImplementationUtilities"; };
struct _s18 { static const char* value = "Int32"; };
struct _s19 { static const char* value = "Integer"; };
struct _s20 { static const char* value = "Maybe"; };
struct _s21 { static const char* value = "T"; };
struct _s22 { static const char* value = "MicrotaskQueue"; };
struct _s23 { static const char* value = "Name"; };
struct _s24 { static const char* value = "Number"; };
struct _s25 { static const char* value = "NumberObject"; };
struct _s26 { static const char* value = "Object"; };
struct _s27 { static const char* value = "ObjectOperationDescriptor"; };
struct _s28 { static const char* value = "ObjectTemplate"; };
struct _s29 { static const char* value = "Platform"; };
struct _s30 { static const char* value = "Primitive"; };
struct _s31 { static const char* value = "Promise"; };
struct _s32 { static const char* value = "PropertyDescriptor"; };
struct _s33 { static const char* value = "Proxy"; };
struct _s34 { static const char* value = "RawOperationDescriptor"; };
struct _s35 { static const char* value = "Script"; };
struct _s36 { static const char* value = "SharedArrayBuffer"; };
struct _s37 { static const char* value = "Signature"; };
struct _s38 { static const char* value = "StartupData"; };
struct _s39 { static const char* value = "StackFrame"; };
struct _s40 { static const char* value = "StackTrace"; };
struct _s41 { static const char* value = "String"; };
struct _s42 { static const char* value = "StringObject"; };
struct _s43 { static const char* value = "Symbol"; };
struct _s44 { static const char* value = "SymbolObject"; };
struct _s45 { static const char* value = "PrimitiveArray"; };
struct _s46 { static const char* value = "Private"; };
struct _s47 { static const char* value = "Uint32"; };
struct _s48 { static const char* value = "Utils"; };
struct _s49 { static const char* value = "Value"; };
struct _s50 { static const char* value = "WasmModuleObject"; };
struct _s51 { static const char* value = "Local"; };
struct _s52 { static const char* value = "S"; };
struct _s53 { static const char* value = "that"; };
struct _s54 { static const char* value = "IsEmpty"; };
struct _s55 { static const char* value = "Clear"; };
struct _s56 { static const char* value = "operator->"; };
struct _s57 { static const char* value = "operator*"; };
struct _s58 { static const char* value = "operator=="; };
struct _s59 { static const char* value = "operator!="; };
struct _s60 { static const char* value = "Cast"; };
struct _s61 { static const char* value = "As"; };
struct _s62 { static const char* value = "New"; };
struct _s63 { static const char* value = "isolate"; };
struct _s64 { static const char* value = "PersistentBase"; };
struct _s65 { static const char* value = "TracedGlobal"; };
struct _s66 { static const char* value = "~Local"; };
struct _s67 { static const char* value = "operator="; };
struct _s68 { static const char* value = "UnboundScript"; };
struct _s69 { static const char* value = "MaybeLocal"; };
struct _s70 { static const char* value = "ToLocal"; };
struct _s71 { static const char* value = "out"; };
struct _s72 { static const char* value = "ToLocalChecked"; };
struct _s73 { static const char* value = "FromMaybe"; };
struct _s74 { static const char* value = "default_value"; };
struct _s75 { static const char* value = "~MaybeLocal"; };
struct _s76 { static const char* value = "Eternal"; };
struct _s77 { static const char* value = "NonCopyablePersistentTraits"; };
struct _s78 { static const char* value = "Reset"; };
struct _s79 { static const char* value = "other"; };
struct _s80 { static const char* value = "Empty"; };
struct _s81 { static const char* value = "Get"; };
struct _s82 { static const char* value = "SetWeak"; };
struct _s83 { static const char* value = "P"; };
struct _s84 { static const char* value = "WeakCallbackType"; };
struct _s85 { static const char* value = "parameter"; };
struct _s86 { static const char* value = "callback"; };
struct _s87 { static const char* value = "type"; };
struct _s88 { static const char* value = "ClearWeak"; };
struct _s89 { static const char* value = "AnnotateStrongRetainer"; };
struct _s90 { static const char* value = "label"; };
struct _s91 { static const char* value = "IsWeak"; };
struct _s92 { static const char* value = "SetWrapperClassId"; };
struct _s93 { static const char* value = "class_id"; };
struct _s94 { static const char* value = "WrapperClassId"; };
struct _s95 { static const char* value = "Persistent"; };
struct _s96 { static const char* value = "M"; };
struct _s97 { static const char* value = "M2"; };
struct _s98 { static const char* value = "~Persistent"; };
struct _s99 { static const char* value = "Global"; };
struct _s100 { static const char* value = "~TracedGlobal"; };
struct _s101 { static const char* value = "rhs"; };
struct _s102 { static const char* value = "SetFinalizationCallback"; };
struct _s103 { static const char* value = "WeakCallbackInfo"; };
struct _s104 { static const char* value = "PersistentValueMap"; };
struct _s105 { static const char* value = "K"; };
struct _s106 { static const char* value = "V"; };
struct _s107 { static const char* value = "PersistentValueMapBase"; };
struct _s108 { static const char* value = "GlobalValueMap"; };
struct _s109 { static const char* value = "PersistentValueVector"; };
struct _s110 { static const char* value = "WeakCallbackObject"; };
struct _s111 { static const char* value = "FunctionCallbackInfo"; };
struct _s112 { static const char* value = "PropertyCallbackInfo"; };
struct _s113 { static const char* value = "CallHandlerHelper"; };
struct _s114 { static const char* value = "EscapableHandleScope"; };
struct _s115 { static const char* value = "ReturnValue"; };
struct _s116 { static const char* value = "debug"; };
struct _s117 { static const char* value = "ConsoleCallArguments"; };
struct _s118 { static const char* value = "Local<T>"; };
struct _s119 { static const char* value = "Handle"; };
struct _s120 { static const char* value = "MaybeLocal<T>"; };
struct _s121 { static const char* value = "Eternal<T>"; };
struct _s122 { static const char* value = "handle"; };
struct _s123 { static const char* value = "Set"; };
struct _s124 { static const char* value = "kInternalFieldsInWeakCallback"; };
struct _s125 { static const char* value = "kEmbedderFieldsInWeakCallback"; };
struct _s126 { static const char* value = "Callback"; };
struct _s127 { static const char* value = "WeakCallbackInfo<T>"; };
struct _s128 { static const char* value = "embedder_fields"; };
struct _s129 { static const char* value = "GetIsolate"; };
struct _s130 { static const char* value = "GetParameter"; };
struct _s131 { static const char* value = "GetInternalField"; };
struct _s132 { static const char* value = "index"; };
struct _s133 { static const char* value = "SetSecondPassCallback"; };
struct _s134 { static const char* value = "data"; };
struct _s135 { static const char* value = "kParameter"; };
struct _s136 { static const char* value = "kInternalFields"; };
struct _s137 { static const char* value = "kFinalizer"; };
struct _s138 { static const char* value = "PersistentBase<T>"; };
struct _s139 { static const char* value = "NonCopyablePersistent"; };
struct _s140 { static const char* value = "kResetInDestructor"; };
struct _s141 { static const char* value = "Copy"; };
struct _s142 { static const char* value = "source"; };
struct _s143 { static const char* value = "dest"; };
struct _s144 { static const char* value = "Uncompilable"; };
struct _s145 { static const char* value = "O"; };
struct _s146 { static const char* value = "CopyablePersistentTraits"; };
struct _s147 { static const char* value = "CopyablePersistent"; };
struct _s148 { static const char* value = "Persistent<T, M>"; };
struct _s149 { static const char* value = "~Persistent<T, M>"; };
struct _s150 { static const char* value = "Global<T>"; };
struct _s151 { static const char* value = "~Global<T>"; };
struct _s152 { static const char* value = "Pass"; };
struct _s153 { static const char* value = "MoveOnlyTypeForCPP03"; };
struct _s154 { static const char* value = "UniquePersistent"; };
struct _s155 { static const char* value = "TracedGlobal<T>"; };
struct _s156 { static const char* value = "~TracedGlobal<T>"; };
struct _s157 { static const char* value = "HandleScope"; };
struct _s158 { static const char* value = "~HandleScope"; };
struct _s159 { static const char* value = "NumberOfHandles"; };
struct _s160 { static const char* value = "Initialize"; };
struct _s161 { static const char* value = "CreateHandle"; };
struct _s162 { static const char* value = "value"; };
struct _s163 { static const char* value = "~EscapableHandleScope"; };
struct _s164 { static const char* value = "Escape"; };
struct _s165 { static const char* value = "EscapeMaybe"; };
struct _s166 { static const char* value = "SealHandleScope"; };
struct _s167 { static const char* value = "~SealHandleScope"; };
struct _s168 { static const char* value = "ScriptOrModule"; };
struct _s169 { static const char* value = "GetResourceName"; };
struct _s170 { static const char* value = "GetHostDefinedOptions"; };
struct _s171 { static const char* value = "length"; };
struct _s172 { static const char* value = "Length"; };
struct _s173 { static const char* value = "item"; };
struct _s174 { static const char* value = "ScriptOriginOptions"; };
struct _s175 { static const char* value = "is_shared_cross_origin"; };
struct _s176 { static const char* value = "is_opaque"; };
struct _s177 { static const char* value = "is_wasm"; };
struct _s178 { static const char* value = "is_module"; };
struct _s179 { static const char* value = "flags"; };
struct _s180 { static const char* value = "IsSharedCrossOrigin"; };
struct _s181 { static const char* value = "IsOpaque"; };
struct _s182 { static const char* value = "IsWasm"; };
struct _s183 { static const char* value = "IsModule"; };
struct _s184 { static const char* value = "Flags"; };
struct _s185 { static const char* value = "~ScriptOriginOptions"; };
struct _s186 { static const char* value = "ScriptOrigin"; };
struct _s187 { static const char* value = "resource_name"; };
struct _s188 { static const char* value = "resource_line_offset"; };
struct _s189 { static const char* value = "resource_column_offset"; };
struct _s190 { static const char* value = "resource_is_shared_cross_origin"; };
struct _s191 { static const char* value = "script_id"; };
struct _s192 { static const char* value = "source_map_url"; };
struct _s193 { static const char* value = "resource_is_opaque"; };
struct _s194 { static const char* value = "host_defined_options"; };
struct _s195 { static const char* value = "ResourceName"; };
struct _s196 { static const char* value = "ResourceLineOffset"; };
struct _s197 { static const char* value = "ResourceColumnOffset"; };
struct _s198 { static const char* value = "ScriptID"; };
struct _s199 { static const char* value = "SourceMapUrl"; };
struct _s200 { static const char* value = "HostDefinedOptions"; };
struct _s201 { static const char* value = "Options"; };
struct _s202 { static const char* value = "BindToCurrentContext"; };
struct _s203 { static const char* value = "GetId"; };
struct _s204 { static const char* value = "GetScriptName"; };
struct _s205 { static const char* value = "GetSourceURL"; };
struct _s206 { static const char* value = "GetSourceMappingURL"; };
struct _s207 { static const char* value = "GetLineNumber"; };
struct _s208 { static const char* value = "code_pos"; };
struct _s209 { static const char* value = "kNoScriptId"; };
struct _s210 { static const char* value = "UnboundModuleScript"; };
struct _s211 { static const char* value = "Location"; };
struct _s212 { static const char* value = "GetColumnNumber"; };
struct _s213 { static const char* value = "line_number"; };
struct _s214 { static const char* value = "column_number"; };
struct _s215 { static const char* value = "Module"; };
struct _s216 { static const char* value = "Status"; };
struct _s217 { static const char* value = "kUninstantiated"; };
struct _s218 { static const char* value = "kInstantiating"; };
struct _s219 { static const char* value = "kInstantiated"; };
struct _s220 { static const char* value = "kEvaluating"; };
struct _s221 { static const char* value = "kEvaluated"; };
struct _s222 { static const char* value = "kErrored"; };
struct _s223 { static const char* value = "GetStatus"; };
struct _s224 { static const char* value = "GetException"; };
struct _s225 { static const char* value = "GetModuleRequestsLength"; };
struct _s226 { static const char* value = "GetModuleRequest"; };
struct _s227 { static const char* value = "i"; };
struct _s228 { static const char* value = "GetModuleRequestLocation"; };
struct _s229 { static const char* value = "GetIdentityHash"; };
struct _s230 { static const char* value = "ResolveCallback"; };
struct _s231 { static const char* value = "InstantiateModule"; };
struct _s232 { static const char* value = "context"; };
struct _s233 { static const char* value = "Evaluate"; };
struct _s234 { static const char* value = "GetModuleNamespace"; };
struct _s235 { static const char* value = "GetUnboundModuleScript"; };
struct _s236 { static const char* value = "Compile"; };
struct _s237 { static const char* value = "origin"; };
struct _s238 { static const char* value = "Run"; };
struct _s239 { static const char* value = "GetUnboundScript"; };
struct _s240 { static const char* value = "ScriptCompiler"; };
struct _s241 { static const char* value = "CachedData"; };
struct _s242 { static const char* value = "BufferPolicy"; };
struct _s243 { static const char* value = "BufferNotOwned"; };
struct _s244 { static const char* value = "BufferOwned"; };
struct _s245 { static const char* value = "buffer_policy"; };
struct _s246 { static const char* value = "~CachedData"; };
struct _s247 { static const char* value = "rejected"; };
struct _s248 { static const char* value = "Source"; };
struct _s249 { static const char* value = "source_string"; };
struct _s250 { static const char* value = "cached_data"; };
struct _s251 { static const char* value = "~Source"; };
struct _s252 { static const char* value = "GetCachedData"; };
struct _s253 { static const char* value = "GetResourceOptions"; };
struct _s254 { static const char* value = "ExternalSourceStream"; };
struct _s255 { static const char* value = "~ExternalSourceStream"; };
struct _s256 { static const char* value = "GetMoreData"; };
struct _s257 { static const char* value = "src"; };
struct _s258 { static const char* value = "SetBookmark"; };
struct _s259 { static const char* value = "ResetToBookmark"; };
struct _s260 { static const char* value = "StreamedSource"; };
struct _s261 { static const char* value = "Encoding"; };
struct _s262 { static const char* value = "ONE_BYTE"; };
struct _s263 { static const char* value = "TWO_BYTE"; };
struct _s264 { static const char* value = "UTF8"; };
struct _s265 { static const char* value = "source_stream"; };
struct _s266 { static const char* value = "encoding"; };
struct _s267 { static const char* value = "unique_ptr"; };
struct _s268 { static const char* value = "~StreamedSource"; };
struct _s269 { static const char* value = "impl"; };
struct _s270 { static const char* value = "ScriptStreamingData"; };
struct _s271 { static const char* value = "ScriptStreamingTask"; };
struct _s272 { static const char* value = "CompileOptions"; };
struct _s273 { static const char* value = "kNoCompileOptions"; };
struct _s274 { static const char* value = "kConsumeCodeCache"; };
struct _s275 { static const char* value = "kEagerCompile"; };
struct _s276 { static const char* value = "NoCacheReason"; };
struct _s277 { static const char* value = "kNoCacheNoReason"; };
struct _s278 { static const char* value = "kNoCacheBecauseCachingDisabled"; };
struct _s279 { static const char* value = "kNoCacheBecauseNoResource"; };
struct _s280 { static const char* value = "kNoCacheBecauseInlineScript"; };
struct _s281 { static const char* value = "kNoCacheBecauseModule"; };
struct _s282 { static const char* value = "kNoCacheBecauseStreamingSource"; };
struct _s283 { static const char* value = "kNoCacheBecauseInspector"; };
struct _s284 { static const char* value = "kNoCacheBecauseScriptTooSmall"; };
struct _s285 { static const char* value = "kNoCacheBecauseCacheTooCold"; };
struct _s286 { static const char* value = "kNoCacheBecauseV8Extension"; };
struct _s287 { static const char* value = "kNoCacheBecauseExtensionModule"; };
struct _s288 { static const char* value = "kNoCacheBecausePacScript"; };
struct _s289 { static const char* value = "kNoCacheBecauseInDocumentWrite"; };
struct _s290 { static const char* value = "kNoCacheBecauseResourceWithNoCacheHandler"; };
struct _s291 { static const char* value = "kNoCacheBecauseDeferredProduceCodeCache"; };
struct _s292 { static const char* value = "CompileUnboundScript"; };
struct _s293 { static const char* value = "options"; };
struct _s294 { static const char* value = "no_cache_reason"; };
struct _s295 { static const char* value = "StartStreamingScript"; };
struct _s296 { static const char* value = "full_source_string"; };
struct _s297 { static const char* value = "CachedDataVersionTag"; };
struct _s298 { static const char* value = "CompileModule"; };
struct _s299 { static const char* value = "CompileFunctionInContext"; };
struct _s300 { static const char* value = "arguments_count"; };
struct _s301 { static const char* value = "arguments"; };
struct _s302 { static const char* value = "context_extension_count"; };
struct _s303 { static const char* value = "context_extensions"; };
struct _s304 { static const char* value = "CreateCodeCache"; };
struct _s305 { static const char* value = "unbound_script"; };
struct _s306 { static const char* value = "unbound_module_script"; };
struct _s307 { static const char* value = "CreateCodeCacheForFunction"; };
struct _s308 { static const char* value = "function"; };
struct _s309 { static const char* value = "Message"; };
struct _s310 { static const char* value = "GetSourceLine"; };
struct _s311 { static const char* value = "GetScriptOrigin"; };
struct _s312 { static const char* value = "GetScriptResourceName"; };
struct _s313 { static const char* value = "GetStackTrace"; };
struct _s314 { static const char* value = "GetStartPosition"; };
struct _s315 { static const char* value = "GetEndPosition"; };
struct _s316 { static const char* value = "ErrorLevel"; };
struct _s317 { static const char* value = "GetStartColumn"; };
struct _s318 { static const char* value = "GetEndColumn"; };
struct _s319 { static const char* value = "PrintCurrentStackTrace"; };
struct _s320 { static const char* value = "_iobuf"; };
struct _s321 { static const char* value = "kNoLineNumberInfo"; };
struct _s322 { static const char* value = "kNoColumnInfo"; };
struct _s323 { static const char* value = "kNoScriptIdInfo"; };
struct _s324 { static const char* value = "StackTraceOptions"; };
struct _s325 { static const char* value = "kLineNumber"; };
struct _s326 { static const char* value = "kColumnOffset"; };
struct _s327 { static const char* value = "kScriptName"; };
struct _s328 { static const char* value = "kFunctionName"; };
struct _s329 { static const char* value = "kIsEval"; };
struct _s330 { static const char* value = "kIsConstructor"; };
struct _s331 { static const char* value = "kScriptNameOrSourceURL"; };
struct _s332 { static const char* value = "kScriptId"; };
struct _s333 { static const char* value = "kExposeFramesAcrossSecurityOrigins"; };
struct _s334 { static const char* value = "kOverview"; };
struct _s335 { static const char* value = "kDetailed"; };
struct _s336 { static const char* value = "GetFrame"; };
struct _s337 { static const char* value = "GetFrameCount"; };
struct _s338 { static const char* value = "CurrentStackTrace"; };
struct _s339 { static const char* value = "frame_limit"; };
struct _s340 { static const char* value = "GetColumn"; };
struct _s341 { static const char* value = "GetScriptId"; };
struct _s342 { static const char* value = "GetScriptNameOrSourceURL"; };
struct _s343 { static const char* value = "GetFunctionName"; };
struct _s344 { static const char* value = "IsEval"; };
struct _s345 { static const char* value = "IsConstructor"; };
struct _s346 { static const char* value = "IsUserJavaScript"; };
struct _s347 { static const char* value = "StateTag"; };
struct _s348 { static const char* value = "JS"; };
struct _s349 { static const char* value = "GC"; };
struct _s350 { static const char* value = "PARSER"; };
struct _s351 { static const char* value = "BYTECODE_COMPILER"; };
struct _s352 { static const char* value = "COMPILER"; };
struct _s353 { static const char* value = "OTHER"; };
struct _s354 { static const char* value = "EXTERNAL"; };
struct _s355 { static const char* value = "IDLE"; };
struct _s356 { static const char* value = "RegisterState"; };
struct _s357 { static const char* value = "pc"; };
struct _s358 { static const char* value = "sp"; };
struct _s359 { static const char* value = "fp"; };
struct _s360 { static const char* value = "lr"; };
struct _s361 { static const char* value = "SampleInfo"; };
struct _s362 { static const char* value = "frames_count"; };
struct _s363 { static const char* value = "vm_state"; };
struct _s364 { static const char* value = "external_callback_entry"; };
struct _s365 { static const char* value = "MemoryRange"; };
struct _s366 { static const char* value = "start"; };
struct _s367 { static const char* value = "length_in_bytes"; };
struct _s368 { static const char* value = "JSEntryStub"; };
struct _s369 { static const char* value = "code"; };
struct _s370 { static const char* value = "UnwindState"; };
struct _s371 { static const char* value = "code_range"; };
struct _s372 { static const char* value = "embedded_code_range"; };
struct _s373 { static const char* value = "js_entry_stub"; };
struct _s374 { static const char* value = "JSON"; };
struct _s375 { static const char* value = "Parse"; };
struct _s376 { static const char* value = "json_string"; };
struct _s377 { static const char* value = "Stringify"; };
struct _s378 { static const char* value = "json_object"; };
struct _s379 { static const char* value = "gap"; };
struct _s380 { static const char* value = "ValueSerializer"; };
struct _s381 { static const char* value = "Delegate"; };
struct _s382 { static const char* value = "~Delegate"; };
struct _s383 { static const char* value = "ThrowDataCloneError"; };
struct _s384 { static const char* value = "message"; };
struct _s385 { static const char* value = "WriteHostObject"; };
struct _s386 { static const char* value = "object"; };
struct _s387 { static const char* value = "GetSharedArrayBufferId"; };
struct _s388 { static const char* value = "shared_array_buffer"; };
struct _s389 { static const char* value = "GetWasmModuleTransferId"; };
struct _s390 { static const char* value = "module"; };
struct _s391 { static const char* value = "ReallocateBufferMemory"; };
struct _s392 { static const char* value = "old_buffer"; };
struct _s393 { static const char* value = "size"; };
struct _s394 { static const char* value = "actual_size"; };
struct _s395 { static const char* value = "FreeBufferMemory"; };
struct _s396 { static const char* value = "buffer"; };
struct _s397 { static const char* value = "delegate"; };
struct _s398 { static const char* value = "~ValueSerializer"; };
struct _s399 { static const char* value = "WriteHeader"; };
struct _s400 { static const char* value = "WriteValue"; };
struct _s401 { static const char* value = "Release"; };
struct _s402 { static const char* value = "pair"; };
struct _s403 { static const char* value = "TransferArrayBuffer"; };
struct _s404 { static const char* value = "transfer_id"; };
struct _s405 { static const char* value = "array_buffer"; };
struct _s406 { static const char* value = "SetTreatArrayBufferViewsAsHostObjects"; };
struct _s407 { static const char* value = "mode"; };
struct _s408 { static const char* value = "WriteUint32"; };
struct _s409 { static const char* value = "WriteUint64"; };
struct _s410 { static const char* value = "WriteDouble"; };
struct _s411 { static const char* value = "WriteRawBytes"; };
struct _s412 { static const char* value = "ValueDeserializer"; };
struct _s413 { static const char* value = "ReadHostObject"; };
struct _s414 { static const char* value = "GetWasmModuleFromId"; };
struct _s415 { static const char* value = "GetSharedArrayBufferFromId"; };
struct _s416 { static const char* value = "clone_id"; };
struct _s417 { static const char* value = "~ValueDeserializer"; };
struct _s418 { static const char* value = "ReadHeader"; };
struct _s419 { static const char* value = "ReadValue"; };
struct _s420 { static const char* value = "TransferSharedArrayBuffer"; };
struct _s421 { static const char* value = "id"; };
struct _s422 { static const char* value = "SetSupportsLegacyWireFormat"; };
struct _s423 { static const char* value = "supports_legacy_wire_format"; };
struct _s424 { static const char* value = "SetExpectInlineWasm"; };
struct _s425 { static const char* value = "allow_inline_wasm"; };
struct _s426 { static const char* value = "GetWireFormatVersion"; };
struct _s427 { static const char* value = "ReadUint32"; };
struct _s428 { static const char* value = "ReadUint64"; };
struct _s429 { static const char* value = "ReadDouble"; };
struct _s430 { static const char* value = "ReadRawBytes"; };
struct _s431 { static const char* value = "IsUndefined"; };
struct _s432 { static const char* value = "IsNull"; };
struct _s433 { static const char* value = "IsNullOrUndefined"; };
struct _s434 { static const char* value = "IsTrue"; };
struct _s435 { static const char* value = "IsFalse"; };
struct _s436 { static const char* value = "IsName"; };
struct _s437 { static const char* value = "IsString"; };
struct _s438 { static const char* value = "IsSymbol"; };
struct _s439 { static const char* value = "IsFunction"; };
struct _s440 { static const char* value = "IsArray"; };
struct _s441 { static const char* value = "IsObject"; };
struct _s442 { static const char* value = "IsBigInt"; };
struct _s443 { static const char* value = "IsBoolean"; };
struct _s444 { static const char* value = "IsNumber"; };
struct _s445 { static const char* value = "IsExternal"; };
struct _s446 { static const char* value = "IsInt32"; };
struct _s447 { static const char* value = "IsUint32"; };
struct _s448 { static const char* value = "IsDate"; };
struct _s449 { static const char* value = "IsArgumentsObject"; };
struct _s450 { static const char* value = "IsBigIntObject"; };
struct _s451 { static const char* value = "IsBooleanObject"; };
struct _s452 { static const char* value = "IsNumberObject"; };
struct _s453 { static const char* value = "IsStringObject"; };
struct _s454 { static const char* value = "IsSymbolObject"; };
struct _s455 { static const char* value = "IsNativeError"; };
struct _s456 { static const char* value = "IsRegExp"; };
struct _s457 { static const char* value = "IsAsyncFunction"; };
struct _s458 { static const char* value = "IsGeneratorFunction"; };
struct _s459 { static const char* value = "IsGeneratorObject"; };
struct _s460 { static const char* value = "IsPromise"; };
struct _s461 { static const char* value = "IsMap"; };
struct _s462 { static const char* value = "IsSet"; };
struct _s463 { static const char* value = "IsMapIterator"; };
struct _s464 { static const char* value = "IsSetIterator"; };
struct _s465 { static const char* value = "IsWeakMap"; };
struct _s466 { static const char* value = "IsWeakSet"; };
struct _s467 { static const char* value = "IsArrayBuffer"; };
struct _s468 { static const char* value = "IsArrayBufferView"; };
struct _s469 { static const char* value = "IsTypedArray"; };
struct _s470 { static const char* value = "IsUint8Array"; };
struct _s471 { static const char* value = "IsUint8ClampedArray"; };
struct _s472 { static const char* value = "IsInt8Array"; };
struct _s473 { static const char* value = "IsUint16Array"; };
struct _s474 { static const char* value = "IsInt16Array"; };
struct _s475 { static const char* value = "IsUint32Array"; };
struct _s476 { static const char* value = "IsInt32Array"; };
struct _s477 { static const char* value = "IsFloat32Array"; };
struct _s478 { static const char* value = "IsFloat64Array"; };
struct _s479 { static const char* value = "IsBigInt64Array"; };
struct _s480 { static const char* value = "IsBigUint64Array"; };
struct _s481 { static const char* value = "IsDataView"; };
struct _s482 { static const char* value = "IsSharedArrayBuffer"; };
struct _s483 { static const char* value = "IsProxy"; };
struct _s484 { static const char* value = "IsWebAssemblyCompiledModule"; };
struct _s485 { static const char* value = "IsModuleNamespaceObject"; };
struct _s486 { static const char* value = "ToBigInt"; };
struct _s487 { static const char* value = "ToNumber"; };
struct _s488 { static const char* value = "ToString"; };
struct _s489 { static const char* value = "ToDetailString"; };
struct _s490 { static const char* value = "ToObject"; };
struct _s491 { static const char* value = "ToInteger"; };
struct _s492 { static const char* value = "ToUint32"; };
struct _s493 { static const char* value = "ToInt32"; };
struct _s494 { static const char* value = "ToBoolean"; };
struct _s495 { static const char* value = "ToArrayIndex"; };
struct _s496 { static const char* value = "BooleanValue"; };
struct _s497 { static const char* value = "NumberValue"; };
struct _s498 { static const char* value = "IntegerValue"; };
struct _s499 { static const char* value = "Uint32Value"; };
struct _s500 { static const char* value = "Int32Value"; };
struct _s501 { static const char* value = "Equals"; };
struct _s502 { static const char* value = "StrictEquals"; };
struct _s503 { static const char* value = "SameValue"; };
struct _s504 { static const char* value = "TypeOf"; };
struct _s505 { static const char* value = "InstanceOf"; };
struct _s506 { static const char* value = "obj"; };
struct _s507 { static const char* value = "NewStringType"; };
struct _s508 { static const char* value = "kNormal"; };
struct _s509 { static const char* value = "kInternalized"; };
struct _s510 { static const char* value = "kMaxLength"; };
struct _s511 { static const char* value = "UNKNOWN_ENCODING"; };
struct _s512 { static const char* value = "TWO_BYTE_ENCODING"; };
struct _s513 { static const char* value = "ONE_BYTE_ENCODING"; };
struct _s514 { static const char* value = "Utf8Length"; };
struct _s515 { static const char* value = "IsOneByte"; };
struct _s516 { static const char* value = "ContainsOnlyOneByte"; };
struct _s517 { static const char* value = "WriteOptions"; };
struct _s518 { static const char* value = "NO_OPTIONS"; };
struct _s519 { static const char* value = "HINT_MANY_WRITES_EXPECTED"; };
struct _s520 { static const char* value = "NO_NULL_TERMINATION"; };
struct _s521 { static const char* value = "PRESERVE_ONE_BYTE_NULL"; };
struct _s522 { static const char* value = "REPLACE_INVALID_UTF8"; };
struct _s523 { static const char* value = "Write"; };
struct _s524 { static const char* value = "WriteOneByte"; };
struct _s525 { static const char* value = "WriteUtf8"; };
struct _s526 { static const char* value = "nchars_ref"; };
struct _s527 { static const char* value = "IsExternalOneByte"; };
struct _s528 { static const char* value = "ExternalStringResourceBase"; };
struct _s529 { static const char* value = "~ExternalStringResourceBase"; };
struct _s530 { static const char* value = "IsCacheable"; };
struct _s531 { static const char* value = "Dispose"; };
struct _s532 { static const char* value = "Lock"; };
struct _s533 { static const char* value = "Unlock"; };
struct _s534 { static const char* value = "ExternalStringResource"; };
struct _s535 { static const char* value = "~ExternalStringResource"; };
struct _s536 { static const char* value = "ExternalOneByteStringResource"; };
struct _s537 { static const char* value = "~ExternalOneByteStringResource"; };
struct _s538 { static const char* value = "GetExternalStringResourceBase"; };
struct _s539 { static const char* value = "encoding_out"; };
struct _s540 { static const char* value = "GetExternalStringResource"; };
struct _s541 { static const char* value = "GetExternalOneByteStringResource"; };
struct _s542 { static const char* value = "NewFromUtf8"; };
struct _s543 { static const char* value = "NewFromOneByte"; };
struct _s544 { static const char* value = "NewFromTwoByte"; };
struct _s545 { static const char* value = "Concat"; };
struct _s546 { static const char* value = "left"; };
struct _s547 { static const char* value = "right"; };
struct _s548 { static const char* value = "NewExternalTwoByte"; };
struct _s549 { static const char* value = "resource"; };
struct _s550 { static const char* value = "MakeExternal"; };
struct _s551 { static const char* value = "NewExternalOneByte"; };
struct _s552 { static const char* value = "CanMakeExternal"; };
struct _s553 { static const char* value = "StringEquals"; };
struct _s554 { static const char* value = "str"; };
struct _s555 { static const char* value = "Utf8Value"; };
struct _s556 { static const char* value = "~Utf8Value"; };
struct _s557 { static const char* value = "~Value"; };
struct _s558 { static const char* value = "name"; };
struct _s559 { static const char* value = "For"; };
struct _s560 { static const char* value = "ForApi"; };
struct _s561 { static const char* value = "GetAsyncIterator"; };
struct _s562 { static const char* value = "GetHasInstance"; };
struct _s563 { static const char* value = "GetIsConcatSpreadable"; };
struct _s564 { static const char* value = "GetIterator"; };
struct _s565 { static const char* value = "GetMatch"; };
struct _s566 { static const char* value = "GetReplace"; };
struct _s567 { static const char* value = "GetSearch"; };
struct _s568 { static const char* value = "GetSplit"; };
struct _s569 { static const char* value = "GetToPrimitive"; };
struct _s570 { static const char* value = "GetToStringTag"; };
struct _s571 { static const char* value = "GetUnscopables"; };
struct _s572 { static const char* value = "NewFromUnsigned"; };
struct _s573 { static const char* value = "NewFromWords"; };
struct _s574 { static const char* value = "sign_bit"; };
struct _s575 { static const char* value = "word_count"; };
struct _s576 { static const char* value = "words"; };
struct _s577 { static const char* value = "Uint64Value"; };
struct _s578 { static const char* value = "lossless"; };
struct _s579 { static const char* value = "Int64Value"; };
struct _s580 { static const char* value = "WordCount"; };
struct _s581 { static const char* value = "ToWordsArray"; };
struct _s582 { static const char* value = "PropertyAttribute"; };
struct _s583 { static const char* value = "None"; };
struct _s584 { static const char* value = "ReadOnly"; };
struct _s585 { static const char* value = "DontEnum"; };
struct _s586 { static const char* value = "DontDelete"; };
struct _s587 { static const char* value = "AccessorGetterCallback"; };
struct _s588 { static const char* value = "AccessorNameGetterCallback"; };
struct _s589 { static const char* value = "AccessorSetterCallback"; };
struct _s590 { static const char* value = "AccessorNameSetterCallback"; };
struct _s591 { static const char* value = "AccessControl"; };
struct _s592 { static const char* value = "DEFAULT"; };
struct _s593 { static const char* value = "ALL_CAN_READ"; };
struct _s594 { static const char* value = "ALL_CAN_WRITE"; };
struct _s595 { static const char* value = "PROHIBITS_OVERWRITING"; };
struct _s596 { static const char* value = "PropertyFilter"; };
struct _s597 { static const char* value = "ALL_PROPERTIES"; };
struct _s598 { static const char* value = "ONLY_WRITABLE"; };
struct _s599 { static const char* value = "ONLY_ENUMERABLE"; };
struct _s600 { static const char* value = "ONLY_CONFIGURABLE"; };
struct _s601 { static const char* value = "SKIP_STRINGS"; };
struct _s602 { static const char* value = "SKIP_SYMBOLS"; };
struct _s603 { static const char* value = "SideEffectType"; };
struct _s604 { static const char* value = "kHasSideEffect"; };
struct _s605 { static const char* value = "kHasNoSideEffect"; };
struct _s606 { static const char* value = "kHasSideEffectToReceiver"; };
struct _s607 { static const char* value = "KeyCollectionMode"; };
struct _s608 { static const char* value = "kOwnOnly"; };
struct _s609 { static const char* value = "kIncludePrototypes"; };
struct _s610 { static const char* value = "IndexFilter"; };
struct _s611 { static const char* value = "kIncludeIndices"; };
struct _s612 { static const char* value = "kSkipIndices"; };
struct _s613 { static const char* value = "KeyConversionMode"; };
struct _s614 { static const char* value = "kConvertToString"; };
struct _s615 { static const char* value = "kKeepNumbers"; };
struct _s616 { static const char* value = "IntegrityLevel"; };
struct _s617 { static const char* value = "kFrozen"; };
struct _s618 { static const char* value = "kSealed"; };
struct _s619 { static const char* value = "key"; };
struct _s620 { static const char* value = "CreateDataProperty"; };
struct _s621 { static const char* value = "DefineOwnProperty"; };
struct _s622 { static const char* value = "attributes"; };
struct _s623 { static const char* value = "DefineProperty"; };
struct _s624 { static const char* value = "descriptor"; };
struct _s625 { static const char* value = "GetPropertyAttributes"; };
struct _s626 { static const char* value = "GetOwnPropertyDescriptor"; };
struct _s627 { static const char* value = "Has"; };
struct _s628 { static const char* value = "Delete"; };
struct _s629 { static const char* value = "SetAccessor"; };
struct _s630 { static const char* value = "getter"; };
struct _s631 { static const char* value = "setter"; };
struct _s632 { static const char* value = "settings"; };
struct _s633 { static const char* value = "attribute"; };
struct _s634 { static const char* value = "getter_side_effect_type"; };
struct _s635 { static const char* value = "setter_side_effect_type"; };
struct _s636 { static const char* value = "SetAccessorProperty"; };
struct _s637 { static const char* value = "SetNativeDataProperty"; };
struct _s638 { static const char* value = "SetLazyDataProperty"; };
struct _s639 { static const char* value = "HasPrivate"; };
struct _s640 { static const char* value = "SetPrivate"; };
struct _s641 { static const char* value = "DeletePrivate"; };
struct _s642 { static const char* value = "GetPrivate"; };
struct _s643 { static const char* value = "GetPropertyNames"; };
struct _s644 { static const char* value = "property_filter"; };
struct _s645 { static const char* value = "index_filter"; };
struct _s646 { static const char* value = "key_conversion"; };
struct _s647 { static const char* value = "GetOwnPropertyNames"; };
struct _s648 { static const char* value = "filter"; };
struct _s649 { static const char* value = "GetPrototype"; };
struct _s650 { static const char* value = "SetPrototype"; };
struct _s651 { static const char* value = "prototype"; };
struct _s652 { static const char* value = "FindInstanceInPrototypeChain"; };
struct _s653 { static const char* value = "tmpl"; };
struct _s654 { static const char* value = "ObjectProtoToString"; };
struct _s655 { static const char* value = "GetConstructorName"; };
struct _s656 { static const char* value = "SetIntegrityLevel"; };
struct _s657 { static const char* value = "level"; };
struct _s658 { static const char* value = "InternalFieldCount"; };
struct _s659 { static const char* value = "SetInternalField"; };
struct _s660 { static const char* value = "GetAlignedPointerFromInternalField"; };
struct _s661 { static const char* value = "SetAlignedPointerInInternalField"; };
struct _s662 { static const char* value = "SetAlignedPointerInInternalFields"; };
struct _s663 { static const char* value = "argc"; };
struct _s664 { static const char* value = "indices"; };
struct _s665 { static const char* value = "values"; };
struct _s666 { static const char* value = "HasOwnProperty"; };
struct _s667 { static const char* value = "HasRealNamedProperty"; };
struct _s668 { static const char* value = "HasRealIndexedProperty"; };
struct _s669 { static const char* value = "HasRealNamedCallbackProperty"; };
struct _s670 { static const char* value = "GetRealNamedPropertyInPrototypeChain"; };
struct _s671 { static const char* value = "GetRealNamedPropertyAttributesInPrototypeChain"; };
struct _s672 { static const char* value = "GetRealNamedProperty"; };
struct _s673 { static const char* value = "GetRealNamedPropertyAttributes"; };
struct _s674 { static const char* value = "HasNamedLookupInterceptor"; };
struct _s675 { static const char* value = "HasIndexedLookupInterceptor"; };
struct _s676 { static const char* value = "Clone"; };
struct _s677 { static const char* value = "CreationContext"; };
struct _s678 { static const char* value = "IsCallable"; };
struct _s679 { static const char* value = "CallAsFunction"; };
struct _s680 { static const char* value = "recv"; };
struct _s681 { static const char* value = "argv"; };
struct _s682 { static const char* value = "CallAsConstructor"; };
struct _s683 { static const char* value = "PreviewEntries"; };
struct _s684 { static const char* value = "is_key_value"; };
struct _s685 { static const char* value = "prototype_or_null"; };
struct _s686 { static const char* value = "names"; };
struct _s687 { static const char* value = "elements"; };
struct _s688 { static const char* value = "Map"; };
struct _s689 { static const char* value = "Size"; };
struct _s690 { static const char* value = "AsArray"; };
struct _s691 { static const char* value = "Add"; };
struct _s692 { static const char* value = "ReturnValue<T>"; };
struct _s693 { static const char* value = "SetNull"; };
struct _s694 { static const char* value = "SetUndefined"; };
struct _s695 { static const char* value = "SetEmptyString"; };
struct _s696 { static const char* value = "whatever"; };
struct _s697 { static const char* value = "operator[]"; };
struct _s698 { static const char* value = "This"; };
struct _s699 { static const char* value = "Holder"; };
struct _s700 { static const char* value = "NewTarget"; };
struct _s701 { static const char* value = "IsConstructCall"; };
struct _s702 { static const char* value = "GetReturnValue"; };
struct _s703 { static const char* value = "kArgsLength"; };
struct _s704 { static const char* value = "kHolderIndex"; };
struct _s705 { static const char* value = "kIsolateIndex"; };
struct _s706 { static const char* value = "kReturnValueDefaultValueIndex"; };
struct _s707 { static const char* value = "kReturnValueIndex"; };
struct _s708 { static const char* value = "kDataIndex"; };
struct _s709 { static const char* value = "kNewTargetIndex"; };
struct _s710 { static const char* value = "FunctionCallbackInfo<T>"; };
struct _s711 { static const char* value = "implicit_args"; };
struct _s712 { static const char* value = "implicit_args_"; };
struct _s713 { static const char* value = "values_"; };
struct _s714 { static const char* value = "length_"; };
struct _s715 { static const char* value = "ShouldThrowOnError"; };
struct _s716 { static const char* value = "kShouldThrowOnErrorIndex"; };
struct _s717 { static const char* value = "kThisIndex"; };
struct _s718 { static const char* value = "PropertyCallbackInfo<T>"; };
struct _s719 { static const char* value = "args"; };
struct _s720 { static const char* value = "args_"; };
struct _s721 { static const char* value = "FunctionCallback"; };
struct _s722 { static const char* value = "ConstructorBehavior"; };
struct _s723 { static const char* value = "kThrow"; };
struct _s724 { static const char* value = "kAllow"; };
struct _s725 { static const char* value = "behavior"; };
struct _s726 { static const char* value = "side_effect_type"; };
struct _s727 { static const char* value = "NewInstance"; };
struct _s728 { static const char* value = "NewInstanceWithSideEffectType"; };
struct _s729 { static const char* value = "Call"; };
struct _s730 { static const char* value = "SetName"; };
struct _s731 { static const char* value = "GetName"; };
struct _s732 { static const char* value = "GetInferredName"; };
struct _s733 { static const char* value = "GetDebugName"; };
struct _s734 { static const char* value = "GetDisplayName"; };
struct _s735 { static const char* value = "GetScriptLineNumber"; };
struct _s736 { static const char* value = "GetScriptColumnNumber"; };
struct _s737 { static const char* value = "ScriptId"; };
struct _s738 { static const char* value = "GetBoundFunction"; };
struct _s739 { static const char* value = "kLineOffsetNotFound"; };
struct _s740 { static const char* value = "PromiseState"; };
struct _s741 { static const char* value = "kPending"; };
struct _s742 { static const char* value = "kFulfilled"; };
struct _s743 { static const char* value = "kRejected"; };
struct _s744 { static const char* value = "Resolver"; };
struct _s745 { static const char* value = "GetPromise"; };
struct _s746 { static const char* value = "Resolve"; };
struct _s747 { static const char* value = "Reject"; };
struct _s748 { static const char* value = "Catch"; };
struct _s749 { static const char* value = "handler"; };
struct _s750 { static const char* value = "Then"; };
struct _s751 { static const char* value = "on_fulfilled"; };
struct _s752 { static const char* value = "on_rejected"; };
struct _s753 { static const char* value = "HasHandler"; };
struct _s754 { static const char* value = "Result"; };
struct _s755 { static const char* value = "State"; };
struct _s756 { static const char* value = "MarkAsHandled"; };
struct _s757 { static const char* value = "kEmbedderFieldCount"; };
struct _s758 { static const char* value = "writable"; };
struct _s759 { static const char* value = "get"; };
struct _s760 { static const char* value = "set"; };
struct _s761 { static const char* value = "~PropertyDescriptor"; };
struct _s762 { static const char* value = "has_value"; };
struct _s763 { static const char* value = "has_get"; };
struct _s764 { static const char* value = "has_set"; };
struct _s765 { static const char* value = "set_enumerable"; };
struct _s766 { static const char* value = "enumerable"; };
struct _s767 { static const char* value = "has_enumerable"; };
struct _s768 { static const char* value = "set_configurable"; };
struct _s769 { static const char* value = "configurable"; };
struct _s770 { static const char* value = "has_configurable"; };
struct _s771 { static const char* value = "has_writable"; };
struct _s772 { static const char* value = "PrivateData"; };
struct _s773 { static const char* value = "get_private"; };
struct _s774 { static const char* value = "GetTarget"; };
struct _s775 { static const char* value = "GetHandler"; };
struct _s776 { static const char* value = "IsRevoked"; };
struct _s777 { static const char* value = "Revoke"; };
struct _s778 { static const char* value = "local_target"; };
struct _s779 { static const char* value = "local_handler"; };
struct _s780 { static const char* value = "MemorySpan"; };
struct _s781 { static const char* value = "MemorySpan<T>"; };
struct _s782 { static const char* value = "OwnedBuffer"; };
struct _s783 { static const char* value = "~OwnedBuffer"; };
struct _s784 { static const char* value = "CompiledWasmModule"; };
struct _s785 { static const char* value = "Serialize"; };
struct _s786 { static const char* value = "GetWireBytesRef"; };
struct _s787 { static const char* value = "~CompiledWasmModule"; };
struct _s788 { static const char* value = "TransferrableModule"; };
struct _s789 { static const char* value = "~TransferrableModule"; };
struct _s790 { static const char* value = "GetTransferrableModule"; };
struct _s791 { static const char* value = "FromTransferrableModule"; };
struct _s792 { static const char* value = "GetCompiledModule"; };
struct _s793 { static const char* value = "DeserializeOrCompile"; };
struct _s794 { static const char* value = "serialized_module"; };
struct _s795 { static const char* value = "wire_bytes"; };
struct _s796 { static const char* value = "WasmStreaming"; };
struct _s797 { static const char* value = "WasmStreamingImpl"; };
struct _s798 { static const char* value = "Client"; };
struct _s799 { static const char* value = "~Client"; };
struct _s800 { static const char* value = "OnModuleCompiled"; };
struct _s801 { static const char* value = "compiled_module"; };
struct _s802 { static const char* value = "~WasmStreaming"; };
struct _s803 { static const char* value = "OnBytesReceived"; };
struct _s804 { static const char* value = "bytes"; };
struct _s805 { static const char* value = "Finish"; };
struct _s806 { static const char* value = "Abort"; };
struct _s807 { static const char* value = "exception"; };
struct _s808 { static const char* value = "SetCompiledModuleBytes"; };
struct _s809 { static const char* value = "SetClient"; };
struct _s810 { static const char* value = "shared_ptr"; };
struct _s811 { static const char* value = "client"; };
struct _s812 { static const char* value = "Unpack"; };
struct _s813 { static const char* value = "WasmModuleObjectBuilderStreaming"; };
struct _s814 { static const char* value = "~WasmModuleObjectBuilderStreaming"; };
struct _s815 { static const char* value = "ArrayBufferCreationMode"; };
struct _s816 { static const char* value = "kExternalized"; };
struct _s817 { static const char* value = "Allocator"; };
struct _s818 { static const char* value = "~Allocator"; };
struct _s819 { static const char* value = "Allocate"; };
struct _s820 { static const char* value = "AllocateUninitialized"; };
struct _s821 { static const char* value = "Free"; };
struct _s822 { static const char* value = "AllocationMode"; };
struct _s823 { static const char* value = "kReservation"; };
struct _s824 { static const char* value = "NewDefaultAllocator"; };
struct _s825 { static const char* value = "Contents"; };
struct _s826 { static const char* value = "DeleterCallback"; };
struct _s827 { static const char* value = "AllocationBase"; };
struct _s828 { static const char* value = "AllocationLength"; };
struct _s829 { static const char* value = "ByteLength"; };
struct _s830 { static const char* value = "Deleter"; };
struct _s831 { static const char* value = "DeleterData"; };
struct _s832 { static const char* value = "byte_length"; };
struct _s833 { static const char* value = "IsDetachable"; };
struct _s834 { static const char* value = "IsNeuterable"; };
struct _s835 { static const char* value = "Detach"; };
struct _s836 { static const char* value = "Neuter"; };
struct _s837 { static const char* value = "Externalize"; };
struct _s838 { static const char* value = "GetContents"; };
struct _s839 { static const char* value = "kInternalFieldCount"; };
struct _s840 { static const char* value = "ArrayBufferView"; };
struct _s841 { static const char* value = "Buffer"; };
struct _s842 { static const char* value = "ByteOffset"; };
struct _s843 { static const char* value = "CopyContents"; };
struct _s844 { static const char* value = "HasBuffer"; };
struct _s845 { static const char* value = "TypedArray"; };
struct _s846 { static const char* value = "Uint8Array"; };
struct _s847 { static const char* value = "byte_offset"; };
struct _s848 { static const char* value = "Uint8ClampedArray"; };
struct _s849 { static const char* value = "Int8Array"; };
struct _s850 { static const char* value = "Uint16Array"; };
struct _s851 { static const char* value = "Int16Array"; };
struct _s852 { static const char* value = "Uint32Array"; };
struct _s853 { static const char* value = "Int32Array"; };
struct _s854 { static const char* value = "Float32Array"; };
struct _s855 { static const char* value = "Float64Array"; };
struct _s856 { static const char* value = "BigInt64Array"; };
struct _s857 { static const char* value = "BigUint64Array"; };
struct _s858 { static const char* value = "DataView"; };
struct _s859 { static const char* value = "time"; };
struct _s860 { static const char* value = "ValueOf"; };
struct _s861 { static const char* value = "RegExp"; };
struct _s862 { static const char* value = "kNone"; };
struct _s863 { static const char* value = "kGlobal"; };
struct _s864 { static const char* value = "kIgnoreCase"; };
struct _s865 { static const char* value = "kMultiline"; };
struct _s866 { static const char* value = "kSticky"; };
struct _s867 { static const char* value = "kUnicode"; };
struct _s868 { static const char* value = "kDotAll"; };
struct _s869 { static const char* value = "pattern"; };
struct _s870 { static const char* value = "GetSource"; };
struct _s871 { static const char* value = "GetFlags"; };
struct _s872 { static const char* value = "Intrinsic"; };
struct _s873 { static const char* value = "kArrayProto_entries"; };
struct _s874 { static const char* value = "kArrayProto_forEach"; };
struct _s875 { static const char* value = "kArrayProto_keys"; };
struct _s876 { static const char* value = "kArrayProto_values"; };
struct _s877 { static const char* value = "kErrorPrototype"; };
struct _s878 { static const char* value = "kIteratorPrototype"; };
struct _s879 { static const char* value = "Template"; };
struct _s880 { static const char* value = "signature"; };
struct _s881 { static const char* value = "SetIntrinsicDataProperty"; };
struct _s882 { static const char* value = "intrinsic"; };
struct _s883 { static const char* value = "GenericNamedPropertyGetterCallback"; };
struct _s884 { static const char* value = "GenericNamedPropertySetterCallback"; };
struct _s885 { static const char* value = "GenericNamedPropertyQueryCallback"; };
struct _s886 { static const char* value = "GenericNamedPropertyDeleterCallback"; };
struct _s887 { static const char* value = "GenericNamedPropertyEnumeratorCallback"; };
struct _s888 { static const char* value = "GenericNamedPropertyDefinerCallback"; };
struct _s889 { static const char* value = "GenericNamedPropertyDescriptorCallback"; };
struct _s890 { static const char* value = "IndexedPropertyGetterCallback"; };
struct _s891 { static const char* value = "IndexedPropertySetterCallback"; };
struct _s892 { static const char* value = "IndexedPropertyQueryCallback"; };
struct _s893 { static const char* value = "IndexedPropertyDeleterCallback"; };
struct _s894 { static const char* value = "IndexedPropertyEnumeratorCallback"; };
struct _s895 { static const char* value = "IndexedPropertyDefinerCallback"; };
struct _s896 { static const char* value = "IndexedPropertyDescriptorCallback"; };
struct _s897 { static const char* value = "AccessType"; };
struct _s898 { static const char* value = "ACCESS_GET"; };
struct _s899 { static const char* value = "ACCESS_SET"; };
struct _s900 { static const char* value = "ACCESS_HAS"; };
struct _s901 { static const char* value = "ACCESS_DELETE"; };
struct _s902 { static const char* value = "ACCESS_KEYS"; };
struct _s903 { static const char* value = "AccessCheckCallback"; };
struct _s904 { static const char* value = "FromSnapshot"; };
struct _s905 { static const char* value = "NewWithCache"; };
struct _s906 { static const char* value = "cache_property"; };
struct _s907 { static const char* value = "GetFunction"; };
struct _s908 { static const char* value = "NewRemoteInstance"; };
struct _s909 { static const char* value = "SetCallHandler"; };
struct _s910 { static const char* value = "SetLength"; };
struct _s911 { static const char* value = "InstanceTemplate"; };
struct _s912 { static const char* value = "Inherit"; };
struct _s913 { static const char* value = "parent"; };
struct _s914 { static const char* value = "PrototypeTemplate"; };
struct _s915 { static const char* value = "SetPrototypeProviderTemplate"; };
struct _s916 { static const char* value = "prototype_provider"; };
struct _s917 { static const char* value = "SetClassName"; };
struct _s918 { static const char* value = "SetAcceptAnyReceiver"; };
struct _s919 { static const char* value = "ReadOnlyPrototype"; };
struct _s920 { static const char* value = "RemovePrototype"; };
struct _s921 { static const char* value = "HasInstance"; };
struct _s922 { static const char* value = "PropertyHandlerFlags"; };
struct _s923 { static const char* value = "kAllCanRead"; };
struct _s924 { static const char* value = "kNonMasking"; };
struct _s925 { static const char* value = "kOnlyInterceptStrings"; };
struct _s926 { static const char* value = "NamedPropertyHandlerConfiguration"; };
struct _s927 { static const char* value = "query"; };
struct _s928 { static const char* value = "deleter"; };
struct _s929 { static const char* value = "enumerator"; };
struct _s930 { static const char* value = "definer"; };
struct _s931 { static const char* value = "IndexedPropertyHandlerConfiguration"; };
struct _s932 { static const char* value = "~IndexedPropertyHandlerConfiguration"; };
struct _s933 { static const char* value = "constructor"; };
struct _s934 { static const char* value = "SetHandler"; };
struct _s935 { static const char* value = "configuration"; };
struct _s936 { static const char* value = "SetIndexedPropertyHandler"; };
struct _s937 { static const char* value = "SetCallAsFunctionHandler"; };
struct _s938 { static const char* value = "MarkAsUndetectable"; };
struct _s939 { static const char* value = "SetAccessCheckCallback"; };
struct _s940 { static const char* value = "SetAccessCheckCallbackAndHandler"; };
struct _s941 { static const char* value = "named_handler"; };
struct _s942 { static const char* value = "indexed_handler"; };
struct _s943 { static const char* value = "SetInternalFieldCount"; };
struct _s944 { static const char* value = "IsImmutableProto"; };
struct _s945 { static const char* value = "SetImmutableProto"; };
struct _s946 { static const char* value = "receiver"; };
struct _s947 { static const char* value = "Extension"; };
struct _s948 { static const char* value = "dep_count"; };
struct _s949 { static const char* value = "deps"; };
struct _s950 { static const char* value = "source_length"; };
struct _s951 { static const char* value = "~Extension"; };
struct _s952 { static const char* value = "GetNativeFunctionTemplate"; };
struct _s953 { static const char* value = "dependency_count"; };
struct _s954 { static const char* value = "dependencies"; };
struct _s955 { static const char* value = "set_auto_enable"; };
struct _s956 { static const char* value = "auto_enable"; };
struct _s957 { static const char* value = "RegisterExtension"; };
struct _s958 { static const char* value = "Undefined"; };
struct _s959 { static const char* value = "Null"; };
struct _s960 { static const char* value = "True"; };
struct _s961 { static const char* value = "False"; };
struct _s962 { static const char* value = "ResourceConstraints"; };
struct _s963 { static const char* value = "ConfigureDefaultsFromHeapSize"; };
struct _s964 { static const char* value = "initial_heap_size_in_bytes"; };
struct _s965 { static const char* value = "maximum_heap_size_in_bytes"; };
struct _s966 { static const char* value = "ConfigureDefaults"; };
struct _s967 { static const char* value = "physical_memory"; };
struct _s968 { static const char* value = "virtual_memory_limit"; };
struct _s969 { static const char* value = "stack_limit"; };
struct _s970 { static const char* value = "set_stack_limit"; };
struct _s971 { static const char* value = "code_range_size_in_bytes"; };
struct _s972 { static const char* value = "set_code_range_size_in_bytes"; };
struct _s973 { static const char* value = "limit"; };
struct _s974 { static const char* value = "max_old_generation_size_in_bytes"; };
struct _s975 { static const char* value = "set_max_old_generation_size_in_bytes"; };
struct _s976 { static const char* value = "max_young_generation_size_in_bytes"; };
struct _s977 { static const char* value = "set_max_young_generation_size_in_bytes"; };
struct _s978 { static const char* value = "initial_old_generation_size_in_bytes"; };
struct _s979 { static const char* value = "set_initial_old_generation_size_in_bytes"; };
struct _s980 { static const char* value = "initial_size"; };
struct _s981 { static const char* value = "initial_young_generation_size_in_bytes"; };
struct _s982 { static const char* value = "set_initial_young_generation_size_in_bytes"; };
struct _s983 { static const char* value = "code_range_size"; };
struct _s984 { static const char* value = "set_code_range_size"; };
struct _s985 { static const char* value = "limit_in_mb"; };
struct _s986 { static const char* value = "max_semi_space_size_in_kb"; };
struct _s987 { static const char* value = "set_max_semi_space_size_in_kb"; };
struct _s988 { static const char* value = "limit_in_kb"; };
struct _s989 { static const char* value = "max_old_space_size"; };
struct _s990 { static const char* value = "set_max_old_space_size"; };
struct _s991 { static const char* value = "max_zone_pool_size"; };
struct _s992 { static const char* value = "set_max_zone_pool_size"; };
struct _s993 { static const char* value = "FatalErrorCallback"; };
struct _s994 { static const char* value = "OOMErrorCallback"; };
struct _s995 { static const char* value = "DcheckErrorCallback"; };
struct _s996 { static const char* value = "MessageCallback"; };
struct _s997 { static const char* value = "LogEventCallback"; };
struct _s998 { static const char* value = "Exception"; };
struct _s999 { static const char* value = "RangeError"; };
struct _s1000 { static const char* value = "ReferenceError"; };
struct _s1001 { static const char* value = "SyntaxError"; };
struct _s1002 { static const char* value = "TypeError"; };
struct _s1003 { static const char* value = "Error"; };
struct _s1004 { static const char* value = "CreateMessage"; };
struct _s1005 { static const char* value = "CounterLookupCallback"; };
struct _s1006 { static const char* value = "CreateHistogramCallback"; };
struct _s1007 { static const char* value = "AddHistogramSampleCallback"; };
struct _s1008 { static const char* value = "BeforeCallEnteredCallback"; };
struct _s1009 { static const char* value = "CallCompletedCallback"; };
struct _s1010 { static const char* value = "HostImportModuleDynamicallyCallback"; };
struct _s1011 { static const char* value = "HostInitializeImportMetaObjectCallback"; };
struct _s1012 { static const char* value = "PrepareStackTraceCallback"; };
struct _s1013 { static const char* value = "PromiseHookType"; };
struct _s1014 { static const char* value = "kInit"; };
struct _s1015 { static const char* value = "kResolve"; };
struct _s1016 { static const char* value = "kBefore"; };
struct _s1017 { static const char* value = "kAfter"; };
struct _s1018 { static const char* value = "PromiseHook"; };
struct _s1019 { static const char* value = "PromiseRejectEvent"; };
struct _s1020 { static const char* value = "kPromiseRejectWithNoHandler"; };
struct _s1021 { static const char* value = "kPromiseHandlerAddedAfterReject"; };
struct _s1022 { static const char* value = "kPromiseRejectAfterResolved"; };
struct _s1023 { static const char* value = "kPromiseResolveAfterResolved"; };
struct _s1024 { static const char* value = "PromiseRejectMessage"; };
struct _s1025 { static const char* value = "promise"; };
struct _s1026 { static const char* value = "event"; };
struct _s1027 { static const char* value = "GetEvent"; };
struct _s1028 { static const char* value = "GetValue"; };
struct _s1029 { static const char* value = "PromiseRejectCallback"; };
struct _s1030 { static const char* value = "MicrotasksCompletedCallback"; };
struct _s1031 { static const char* value = "MicrotasksCompletedCallbackWithData"; };
struct _s1032 { static const char* value = "MicrotaskCallback"; };
struct _s1033 { static const char* value = "MicrotasksPolicy"; };
struct _s1034 { static const char* value = "kExplicit"; };
struct _s1035 { static const char* value = "kScoped"; };
struct _s1036 { static const char* value = "kAuto"; };
struct _s1037 { static const char* value = "policy"; };
struct _s1038 { static const char* value = "~MicrotaskQueue"; };
struct _s1039 { static const char* value = "EnqueueMicrotask"; };
struct _s1040 { static const char* value = "microtask"; };
struct _s1041 { static const char* value = "AddMicrotasksCompletedCallback"; };
struct _s1042 { static const char* value = "RemoveMicrotasksCompletedCallback"; };
struct _s1043 { static const char* value = "PerformCheckpoint"; };
struct _s1044 { static const char* value = "IsRunningMicrotasks"; };
struct _s1045 { static const char* value = "GetMicrotasksScopeDepth"; };
struct _s1046 { static const char* value = "MicrotasksScope"; };
struct _s1047 { static const char* value = "Type"; };
struct _s1048 { static const char* value = "kRunMicrotasks"; };
struct _s1049 { static const char* value = "kDoNotRunMicrotasks"; };
struct _s1050 { static const char* value = "microtask_queue"; };
struct _s1051 { static const char* value = "~MicrotasksScope"; };
struct _s1052 { static const char* value = "GetCurrentDepth"; };
struct _s1053 { static const char* value = "FailedAccessCheckCallback"; };
struct _s1054 { static const char* value = "AllowCodeGenerationFromStringsCallback"; };
struct _s1055 { static const char* value = "ExtensionCallback"; };
struct _s1056 { static const char* value = "AllowWasmCodeGenerationCallback"; };
struct _s1057 { static const char* value = "ApiImplementationCallback"; };
struct _s1058 { static const char* value = "WasmStreamingCallback"; };
struct _s1059 { static const char* value = "WasmThreadsEnabledCallback"; };
struct _s1060 { static const char* value = "GCType"; };
struct _s1061 { static const char* value = "kGCTypeScavenge"; };
struct _s1062 { static const char* value = "kGCTypeMarkSweepCompact"; };
struct _s1063 { static const char* value = "kGCTypeIncrementalMarking"; };
struct _s1064 { static const char* value = "kGCTypeProcessWeakCallbacks"; };
struct _s1065 { static const char* value = "kGCTypeAll"; };
struct _s1066 { static const char* value = "GCCallbackFlags"; };
struct _s1067 { static const char* value = "kNoGCCallbackFlags"; };
struct _s1068 { static const char* value = "kGCCallbackFlagConstructRetainedObjectInfos"; };
struct _s1069 { static const char* value = "kGCCallbackFlagForced"; };
struct _s1070 { static const char* value = "kGCCallbackFlagSynchronousPhantomCallbackProcessing"; };
struct _s1071 { static const char* value = "kGCCallbackFlagCollectAllAvailableGarbage"; };
struct _s1072 { static const char* value = "kGCCallbackFlagCollectAllExternalMemory"; };
struct _s1073 { static const char* value = "kGCCallbackScheduleIdleGarbageCollection"; };
struct _s1074 { static const char* value = "GCCallback"; };
struct _s1075 { static const char* value = "InterruptCallback"; };
struct _s1076 { static const char* value = "NearHeapLimitCallback"; };
struct _s1077 { static const char* value = "HeapStatistics"; };
struct _s1078 { static const char* value = "total_heap_size"; };
struct _s1079 { static const char* value = "total_heap_size_executable"; };
struct _s1080 { static const char* value = "total_physical_size"; };
struct _s1081 { static const char* value = "total_available_size"; };
struct _s1082 { static const char* value = "used_heap_size"; };
struct _s1083 { static const char* value = "heap_size_limit"; };
struct _s1084 { static const char* value = "malloced_memory"; };
struct _s1085 { static const char* value = "external_memory"; };
struct _s1086 { static const char* value = "peak_malloced_memory"; };
struct _s1087 { static const char* value = "number_of_native_contexts"; };
struct _s1088 { static const char* value = "number_of_detached_contexts"; };
struct _s1089 { static const char* value = "does_zap_garbage"; };
struct _s1090 { static const char* value = "HeapSpaceStatistics"; };
struct _s1091 { static const char* value = "space_name"; };
struct _s1092 { static const char* value = "space_size"; };
struct _s1093 { static const char* value = "space_used_size"; };
struct _s1094 { static const char* value = "space_available_size"; };
struct _s1095 { static const char* value = "physical_space_size"; };
struct _s1096 { static const char* value = "HeapObjectStatistics"; };
struct _s1097 { static const char* value = "object_type"; };
struct _s1098 { static const char* value = "object_sub_type"; };
struct _s1099 { static const char* value = "object_count"; };
struct _s1100 { static const char* value = "object_size"; };
struct _s1101 { static const char* value = "HeapCodeStatistics"; };
struct _s1102 { static const char* value = "code_and_metadata_size"; };
struct _s1103 { static const char* value = "bytecode_and_metadata_size"; };
struct _s1104 { static const char* value = "external_script_source_size"; };
struct _s1105 { static const char* value = "JitCodeEvent"; };
struct _s1106 { static const char* value = "EventType"; };
struct _s1107 { static const char* value = "CODE_ADDED"; };
struct _s1108 { static const char* value = "CODE_MOVED"; };
struct _s1109 { static const char* value = "CODE_REMOVED"; };
struct _s1110 { static const char* value = "CODE_ADD_LINE_POS_INFO"; };
struct _s1111 { static const char* value = "CODE_START_LINE_INFO_RECORDING"; };
struct _s1112 { static const char* value = "CODE_END_LINE_INFO_RECORDING"; };
struct _s1113 { static const char* value = "PositionType"; };
struct _s1114 { static const char* value = "POSITION"; };
struct _s1115 { static const char* value = "STATEMENT_POSITION"; };
struct _s1116 { static const char* value = "CodeType"; };
struct _s1117 { static const char* value = "BYTE_CODE"; };
struct _s1118 { static const char* value = "JIT_CODE"; };
struct _s1119 { static const char* value = "code_type"; };
struct _s1120 { static const char* value = "code_start"; };
struct _s1121 { static const char* value = "code_len"; };
struct _s1122 { static const char* value = "script"; };
struct _s1123 { static const char* value = "user_data"; };
struct _s1124 { static const char* value = "name_t"; };
struct _s1125 { static const char* value = "len"; };
struct _s1126 { static const char* value = "line_info_t"; };
struct _s1127 { static const char* value = "offset"; };
struct _s1128 { static const char* value = "pos"; };
struct _s1129 { static const char* value = "position_type"; };
struct _s1130 { static const char* value = "line_info"; };
struct _s1131 { static const char* value = "new_code_start"; };
struct _s1132 { static const char* value = "RAILMode"; };
struct _s1133 { static const char* value = "PERFORMANCE_RESPONSE"; };
struct _s1134 { static const char* value = "PERFORMANCE_ANIMATION"; };
struct _s1135 { static const char* value = "PERFORMANCE_IDLE"; };
struct _s1136 { static const char* value = "PERFORMANCE_LOAD"; };
struct _s1137 { static const char* value = "JitCodeEventOptions"; };
struct _s1138 { static const char* value = "kJitCodeEventDefault"; };
struct _s1139 { static const char* value = "kJitCodeEventEnumExisting"; };
struct _s1140 { static const char* value = "JitCodeEventHandler"; };
struct _s1141 { static const char* value = "UnhandledExceptionCallback"; };
struct _s1142 { static const char* value = "_EXCEPTION_POINTERS"; };
struct _s1143 { static const char* value = "ExternalResourceVisitor"; };
struct _s1144 { static const char* value = "~ExternalResourceVisitor"; };
struct _s1145 { static const char* value = "VisitExternalString"; };
struct _s1146 { static const char* value = "string"; };
struct _s1147 { static const char* value = "PersistentHandleVisitor"; };
struct _s1148 { static const char* value = "~PersistentHandleVisitor"; };
struct _s1149 { static const char* value = "VisitPersistentHandle"; };
struct _s1150 { static const char* value = "MemoryPressureLevel"; };
struct _s1151 { static const char* value = "kModerate"; };
struct _s1152 { static const char* value = "kCritical"; };
struct _s1153 { static const char* value = "EmbedderHeapTracer"; };
struct _s1154 { static const char* value = "TraceFlags"; };
struct _s1155 { static const char* value = "kNoFlags"; };
struct _s1156 { static const char* value = "kReduceMemory"; };
struct _s1157 { static const char* value = "EmbedderStackState"; };
struct _s1158 { static const char* value = "kUnknown"; };
struct _s1159 { static const char* value = "kNonEmpty"; };
struct _s1160 { static const char* value = "kEmpty"; };
struct _s1161 { static const char* value = "TracedGlobalHandleVisitor"; };
struct _s1162 { static const char* value = "~TracedGlobalHandleVisitor"; };
struct _s1163 { static const char* value = "VisitTracedGlobalHandle"; };
struct _s1164 { static const char* value = "TraceSummary"; };
struct _s1165 { static const char* value = "allocated_size"; };
struct _s1166 { static const char* value = "~EmbedderHeapTracer"; };
struct _s1167 { static const char* value = "IterateTracedGlobalHandles"; };
struct _s1168 { static const char* value = "visitor"; };
struct _s1169 { static const char* value = "RegisterV8References"; };
struct _s1170 { static const char* value = "vector"; };
struct _s1171 { static const char* value = "RegisterEmbedderReference"; };
struct _s1172 { static const char* value = "ref"; };
struct _s1173 { static const char* value = "TracePrologue"; };
struct _s1174 { static const char* value = "AdvanceTracing"; };
struct _s1175 { static const char* value = "deadline_in_ms"; };
struct _s1176 { static const char* value = "IsTracingDone"; };
struct _s1177 { static const char* value = "TraceEpilogue"; };
struct _s1178 { static const char* value = "trace_summary"; };
struct _s1179 { static const char* value = "EnterFinalPause"; };
struct _s1180 { static const char* value = "stack_state"; };
struct _s1181 { static const char* value = "FinalizeTracing"; };
struct _s1182 { static const char* value = "IsRootForNonTracingGC"; };
struct _s1183 { static const char* value = "GarbageCollectionForTesting"; };
struct _s1184 { static const char* value = "IncreaseAllocatedSize"; };
struct _s1185 { static const char* value = "DecreaseAllocatedSize"; };
struct _s1186 { static const char* value = "isolate_"; };
struct _s1187 { static const char* value = "SerializeInternalFieldsCallback"; };
struct _s1188 { static const char* value = "CallbackFunction"; };
struct _s1189 { static const char* value = "data_arg"; };
struct _s1190 { static const char* value = "~SerializeInternalFieldsCallback"; };
struct _s1191 { static const char* value = "SerializeEmbedderFieldsCallback"; };
struct _s1192 { static const char* value = "DeserializeInternalFieldsCallback"; };
struct _s1193 { static const char* value = "~DeserializeInternalFieldsCallback"; };
struct _s1194 { static const char* value = "DeserializeEmbedderFieldsCallback"; };
struct _s1195 { static const char* value = "CreateParams"; };
struct _s1196 { static const char* value = "code_event_handler"; };
struct _s1197 { static const char* value = "constraints"; };
struct _s1198 { static const char* value = "snapshot_blob"; };
struct _s1199 { static const char* value = "counter_lookup_callback"; };
struct _s1200 { static const char* value = "create_histogram_callback"; };
struct _s1201 { static const char* value = "add_histogram_sample_callback"; };
struct _s1202 { static const char* value = "array_buffer_allocator"; };
struct _s1203 { static const char* value = "external_references"; };
struct _s1204 { static const char* value = "allow_atomics_wait"; };
struct _s1205 { static const char* value = "only_terminate_in_safe_scope"; };
struct _s1206 { static const char* value = "Scope"; };
struct _s1207 { static const char* value = "~Scope"; };
struct _s1208 { static const char* value = "DisallowJavascriptExecutionScope"; };
struct _s1209 { static const char* value = "OnFailure"; };
struct _s1210 { static const char* value = "CRASH_ON_FAILURE"; };
struct _s1211 { static const char* value = "THROW_ON_FAILURE"; };
struct _s1212 { static const char* value = "DUMP_ON_FAILURE"; };
struct _s1213 { static const char* value = "on_failure"; };
struct _s1214 { static const char* value = "~DisallowJavascriptExecutionScope"; };
struct _s1215 { static const char* value = "AllowJavascriptExecutionScope"; };
struct _s1216 { static const char* value = "~AllowJavascriptExecutionScope"; };
struct _s1217 { static const char* value = "SuppressMicrotaskExecutionScope"; };
struct _s1218 { static const char* value = "~SuppressMicrotaskExecutionScope"; };
struct _s1219 { static const char* value = "SafeForTerminationScope"; };
struct _s1220 { static const char* value = "~SafeForTerminationScope"; };
struct _s1221 { static const char* value = "GarbageCollectionType"; };
struct _s1222 { static const char* value = "kFullGarbageCollection"; };
struct _s1223 { static const char* value = "kMinorGarbageCollection"; };
struct _s1224 { static const char* value = "UseCounterFeature"; };
struct _s1225 { static const char* value = "kUseAsm"; };
struct _s1226 { static const char* value = "kBreakIterator"; };
struct _s1227 { static const char* value = "kLegacyConst"; };
struct _s1228 { static const char* value = "kMarkDequeOverflow"; };
struct _s1229 { static const char* value = "kStoreBufferOverflow"; };
struct _s1230 { static const char* value = "kSlotsBufferOverflow"; };
struct _s1231 { static const char* value = "kObjectObserve"; };
struct _s1232 { static const char* value = "kForcedGC"; };
struct _s1233 { static const char* value = "kSloppyMode"; };
struct _s1234 { static const char* value = "kStrictMode"; };
struct _s1235 { static const char* value = "kStrongMode"; };
struct _s1236 { static const char* value = "kRegExpPrototypeStickyGetter"; };
struct _s1237 { static const char* value = "kRegExpPrototypeToString"; };
struct _s1238 { static const char* value = "kRegExpPrototypeUnicodeGetter"; };
struct _s1239 { static const char* value = "kIntlV8Parse"; };
struct _s1240 { static const char* value = "kIntlPattern"; };
struct _s1241 { static const char* value = "kIntlResolved"; };
struct _s1242 { static const char* value = "kPromiseChain"; };
struct _s1243 { static const char* value = "kPromiseAccept"; };
struct _s1244 { static const char* value = "kPromiseDefer"; };
struct _s1245 { static const char* value = "kHtmlCommentInExternalScript"; };
struct _s1246 { static const char* value = "kHtmlComment"; };
struct _s1247 { static const char* value = "kSloppyModeBlockScopedFunctionRedefinition"; };
struct _s1248 { static const char* value = "kForInInitializer"; };
struct _s1249 { static const char* value = "kArrayProtectorDirtied"; };
struct _s1250 { static const char* value = "kArraySpeciesModified"; };
struct _s1251 { static const char* value = "kArrayPrototypeConstructorModified"; };
struct _s1252 { static const char* value = "kArrayInstanceProtoModified"; };
struct _s1253 { static const char* value = "kArrayInstanceConstructorModified"; };
struct _s1254 { static const char* value = "kLegacyFunctionDeclaration"; };
struct _s1255 { static const char* value = "kRegExpPrototypeSourceGetter"; };
struct _s1256 { static const char* value = "kRegExpPrototypeOldFlagGetter"; };
struct _s1257 { static const char* value = "kDecimalWithLeadingZeroInStrictMode"; };
struct _s1258 { static const char* value = "kLegacyDateParser"; };
struct _s1259 { static const char* value = "kDefineGetterOrSetterWouldThrow"; };
struct _s1260 { static const char* value = "kFunctionConstructorReturnedUndefined"; };
struct _s1261 { static const char* value = "kAssigmentExpressionLHSIsCallInSloppy"; };
struct _s1262 { static const char* value = "kAssigmentExpressionLHSIsCallInStrict"; };
struct _s1263 { static const char* value = "kPromiseConstructorReturnedUndefined"; };
struct _s1264 { static const char* value = "kConstructorNonUndefinedPrimitiveReturn"; };
struct _s1265 { static const char* value = "kLabeledExpressionStatement"; };
struct _s1266 { static const char* value = "kLineOrParagraphSeparatorAsLineTerminator"; };
struct _s1267 { static const char* value = "kIndexAccessor"; };
struct _s1268 { static const char* value = "kErrorCaptureStackTrace"; };
struct _s1269 { static const char* value = "kErrorPrepareStackTrace"; };
struct _s1270 { static const char* value = "kErrorStackTraceLimit"; };
struct _s1271 { static const char* value = "kWebAssemblyInstantiation"; };
struct _s1272 { static const char* value = "kDeoptimizerDisableSpeculation"; };
struct _s1273 { static const char* value = "kArrayPrototypeSortJSArrayModifiedPrototype"; };
struct _s1274 { static const char* value = "kFunctionTokenOffsetTooLongForToString"; };
struct _s1275 { static const char* value = "kWasmSharedMemory"; };
struct _s1276 { static const char* value = "kWasmThreadOpcodes"; };
struct _s1277 { static const char* value = "kAtomicsNotify"; };
struct _s1278 { static const char* value = "kAtomicsWake"; };
struct _s1279 { static const char* value = "kCollator"; };
struct _s1280 { static const char* value = "kNumberFormat"; };
struct _s1281 { static const char* value = "kDateTimeFormat"; };
struct _s1282 { static const char* value = "kPluralRules"; };
struct _s1283 { static const char* value = "kRelativeTimeFormat"; };
struct _s1284 { static const char* value = "kLocale"; };
struct _s1285 { static const char* value = "kListFormat"; };
struct _s1286 { static const char* value = "kSegmenter"; };
struct _s1287 { static const char* value = "kStringLocaleCompare"; };
struct _s1288 { static const char* value = "kStringToLocaleUpperCase"; };
struct _s1289 { static const char* value = "kStringToLocaleLowerCase"; };
struct _s1290 { static const char* value = "kNumberToLocaleString"; };
struct _s1291 { static const char* value = "kDateToLocaleString"; };
struct _s1292 { static const char* value = "kDateToLocaleDateString"; };
struct _s1293 { static const char* value = "kDateToLocaleTimeString"; };
struct _s1294 { static const char* value = "kAttemptOverrideReadOnlyOnPrototypeSloppy"; };
struct _s1295 { static const char* value = "kAttemptOverrideReadOnlyOnPrototypeStrict"; };
struct _s1296 { static const char* value = "kOptimizedFunctionWithOneShotBytecode"; };
struct _s1297 { static const char* value = "kRegExpMatchIsTrueishOnNonJSRegExp"; };
struct _s1298 { static const char* value = "kRegExpMatchIsFalseishOnJSRegExp"; };
struct _s1299 { static const char* value = "kDateGetTimezoneOffset"; };
struct _s1300 { static const char* value = "kStringNormalize"; };
struct _s1301 { static const char* value = "kUseCounterFeatureCount"; };
struct _s1302 { static const char* value = "MessageErrorLevel"; };
struct _s1303 { static const char* value = "kMessageLog"; };
struct _s1304 { static const char* value = "kMessageDebug"; };
struct _s1305 { static const char* value = "kMessageInfo"; };
struct _s1306 { static const char* value = "kMessageError"; };
struct _s1307 { static const char* value = "kMessageWarning"; };
struct _s1308 { static const char* value = "kMessageAll"; };
struct _s1309 { static const char* value = "UseCounterCallback"; };
struct _s1310 { static const char* value = "params"; };
struct _s1311 { static const char* value = "GetCurrent"; };
struct _s1312 { static const char* value = "AbortOnUncaughtExceptionCallback"; };
struct _s1313 { static const char* value = "SetAbortOnUncaughtExceptionCallback"; };
struct _s1314 { static const char* value = "SetHostImportModuleDynamicallyCallback"; };
struct _s1315 { static const char* value = "SetHostInitializeImportMetaObjectCallback"; };
struct _s1316 { static const char* value = "SetPrepareStackTraceCallback"; };
struct _s1317 { static const char* value = "MemoryPressureNotification"; };
struct _s1318 { static const char* value = "Enter"; };
struct _s1319 { static const char* value = "Exit"; };
struct _s1320 { static const char* value = "DumpAndResetStats"; };
struct _s1321 { static const char* value = "DiscardThreadSpecificMetadata"; };
struct _s1322 { static const char* value = "SetData"; };
struct _s1323 { static const char* value = "slot"; };
struct _s1324 { static const char* value = "GetData"; };
struct _s1325 { static const char* value = "GetNumberOfDataSlots"; };
struct _s1326 { static const char* value = "GetDataFromSnapshotOnce"; };
struct _s1327 { static const char* value = "GetHeapStatistics"; };
struct _s1328 { static const char* value = "heap_statistics"; };
struct _s1329 { static const char* value = "NumberOfHeapSpaces"; };
struct _s1330 { static const char* value = "GetHeapSpaceStatistics"; };
struct _s1331 { static const char* value = "space_statistics"; };
struct _s1332 { static const char* value = "NumberOfTrackedHeapObjectTypes"; };
struct _s1333 { static const char* value = "GetHeapObjectStatisticsAtLastGC"; };
struct _s1334 { static const char* value = "object_statistics"; };
struct _s1335 { static const char* value = "type_index"; };
struct _s1336 { static const char* value = "GetHeapCodeAndMetadataStatistics"; };
struct _s1337 { static const char* value = "GetStackSample"; };
struct _s1338 { static const char* value = "state"; };
struct _s1339 { static const char* value = "frames"; };
struct _s1340 { static const char* value = "frames_limit"; };
struct _s1341 { static const char* value = "sample_info"; };
struct _s1342 { static const char* value = "AdjustAmountOfExternalAllocatedMemory"; };
struct _s1343 { static const char* value = "change_in_bytes"; };
struct _s1344 { static const char* value = "NumberOfPhantomHandleResetsSinceLastCall"; };
struct _s1345 { static const char* value = "GetHeapProfiler"; };
struct _s1346 { static const char* value = "SetIdle"; };
struct _s1347 { static const char* value = "is_idle"; };
struct _s1348 { static const char* value = "GetArrayBufferAllocator"; };
struct _s1349 { static const char* value = "InContext"; };
struct _s1350 { static const char* value = "GetCurrentContext"; };
struct _s1351 { static const char* value = "GetEnteredContext"; };
struct _s1352 { static const char* value = "GetEnteredOrMicrotaskContext"; };
struct _s1353 { static const char* value = "GetIncumbentContext"; };
struct _s1354 { static const char* value = "ThrowException"; };
struct _s1355 { static const char* value = "GCCallbackWithData"; };
struct _s1356 { static const char* value = "AddGCPrologueCallback"; };
struct _s1357 { static const char* value = "gc_type_filter"; };
struct _s1358 { static const char* value = "RemoveGCPrologueCallback"; };
struct _s1359 { static const char* value = "SetEmbedderHeapTracer"; };
struct _s1360 { static const char* value = "tracer"; };
struct _s1361 { static const char* value = "GetEmbedderHeapTracer"; };
struct _s1362 { static const char* value = "AtomicsWaitEvent"; };
struct _s1363 { static const char* value = "kStartWait"; };
struct _s1364 { static const char* value = "kWokenUp"; };
struct _s1365 { static const char* value = "kTimedOut"; };
struct _s1366 { static const char* value = "kTerminatedExecution"; };
struct _s1367 { static const char* value = "kAPIStopped"; };
struct _s1368 { static const char* value = "kNotEqual"; };
struct _s1369 { static const char* value = "AtomicsWaitWakeHandle"; };
struct _s1370 { static const char* value = "Wake"; };
struct _s1371 { static const char* value = "AtomicsWaitCallback"; };
struct _s1372 { static const char* value = "SetAtomicsWaitCallback"; };
struct _s1373 { static const char* value = "AddGCEpilogueCallback"; };
struct _s1374 { static const char* value = "RemoveGCEpilogueCallback"; };
struct _s1375 { static const char* value = "GetExternallyAllocatedMemoryInBytesCallback"; };
struct _s1376 { static const char* value = "SetGetExternallyAllocatedMemoryInBytesCallback"; };
struct _s1377 { static const char* value = "TerminateExecution"; };
struct _s1378 { static const char* value = "IsExecutionTerminating"; };
struct _s1379 { static const char* value = "CancelTerminateExecution"; };
struct _s1380 { static const char* value = "RequestInterrupt"; };
struct _s1381 { static const char* value = "RequestGarbageCollectionForTesting"; };
struct _s1382 { static const char* value = "SetEventLogger"; };
struct _s1383 { static const char* value = "AddBeforeCallEnteredCallback"; };
struct _s1384 { static const char* value = "RemoveBeforeCallEnteredCallback"; };
struct _s1385 { static const char* value = "AddCallCompletedCallback"; };
struct _s1386 { static const char* value = "RemoveCallCompletedCallback"; };
struct _s1387 { static const char* value = "SetPromiseHook"; };
struct _s1388 { static const char* value = "hook"; };
struct _s1389 { static const char* value = "SetPromiseRejectCallback"; };
struct _s1390 { static const char* value = "RunMicrotasks"; };
struct _s1391 { static const char* value = "SetMicrotasksPolicy"; };
struct _s1392 { static const char* value = "GetMicrotasksPolicy"; };
struct _s1393 { static const char* value = "SetUseCounterCallback"; };
struct _s1394 { static const char* value = "SetCounterFunction"; };
struct _s1395 { static const char* value = "SetCreateHistogramFunction"; };
struct _s1396 { static const char* value = "SetAddHistogramSampleFunction"; };
struct _s1397 { static const char* value = "IdleNotificationDeadline"; };
struct _s1398 { static const char* value = "deadline_in_seconds"; };
struct _s1399 { static const char* value = "LowMemoryNotification"; };
struct _s1400 { static const char* value = "ContextDisposedNotification"; };
struct _s1401 { static const char* value = "dependant_context"; };
struct _s1402 { static const char* value = "IsolateInForegroundNotification"; };
struct _s1403 { static const char* value = "IsolateInBackgroundNotification"; };
struct _s1404 { static const char* value = "EnableMemorySavingsMode"; };
struct _s1405 { static const char* value = "DisableMemorySavingsMode"; };
struct _s1406 { static const char* value = "SetRAILMode"; };
struct _s1407 { static const char* value = "rail_mode"; };
struct _s1408 { static const char* value = "IncreaseHeapLimitForDebugging"; };
struct _s1409 { static const char* value = "RestoreOriginalHeapLimit"; };
struct _s1410 { static const char* value = "IsHeapLimitIncreasedForDebugging"; };
struct _s1411 { static const char* value = "SetJitCodeEventHandler"; };
struct _s1412 { static const char* value = "event_handler"; };
struct _s1413 { static const char* value = "SetStackLimit"; };
struct _s1414 { static const char* value = "GetCodeRange"; };
struct _s1415 { static const char* value = "GetUnwindState"; };
struct _s1416 { static const char* value = "SetFatalErrorHandler"; };
struct _s1417 { static const char* value = "SetOOMErrorHandler"; };
struct _s1418 { static const char* value = "AddNearHeapLimitCallback"; };
struct _s1419 { static const char* value = "RemoveNearHeapLimitCallback"; };
struct _s1420 { static const char* value = "heap_limit"; };
struct _s1421 { static const char* value = "AutomaticallyRestoreInitialHeapLimit"; };
struct _s1422 { static const char* value = "threshold_percent"; };
struct _s1423 { static const char* value = "SetAllowCodeGenerationFromStringsCallback"; };
struct _s1424 { static const char* value = "SetAllowWasmCodeGenerationCallback"; };
struct _s1425 { static const char* value = "SetWasmModuleCallback"; };
struct _s1426 { static const char* value = "SetWasmInstanceCallback"; };
struct _s1427 { static const char* value = "SetWasmStreamingCallback"; };
struct _s1428 { static const char* value = "SetWasmThreadsEnabledCallback"; };
struct _s1429 { static const char* value = "IsDead"; };
struct _s1430 { static const char* value = "AddMessageListener"; };
struct _s1431 { static const char* value = "AddMessageListenerWithErrorLevel"; };
struct _s1432 { static const char* value = "message_levels"; };
struct _s1433 { static const char* value = "RemoveMessageListeners"; };
struct _s1434 { static const char* value = "SetFailedAccessCheckCallbackFunction"; };
struct _s1435 { static const char* value = "SetCaptureStackTraceForUncaughtExceptions"; };
struct _s1436 { static const char* value = "capture"; };
struct _s1437 { static const char* value = "VisitExternalResources"; };
struct _s1438 { static const char* value = "VisitHandlesWithClassIds"; };
struct _s1439 { static const char* value = "VisitWeakHandles"; };
struct _s1440 { static const char* value = "IsInUse"; };
struct _s1441 { static const char* value = "SetAllowAtomicsWait"; };
struct _s1442 { static const char* value = "allow"; };
struct _s1443 { static const char* value = "TimeZoneDetection"; };
struct _s1444 { static const char* value = "kSkip"; };
struct _s1445 { static const char* value = "kRedetect"; };
struct _s1446 { static const char* value = "DateTimeConfigurationChangeNotification"; };
struct _s1447 { static const char* value = "time_zone_detection"; };
struct _s1448 { static const char* value = "LocaleConfigurationChangeNotification"; };
struct _s1449 { static const char* value = "~Isolate"; };
struct _s1450 { static const char* value = "operator new"; };
struct _s1451 { static const char* value = "operator new[]"; };
struct _s1452 { static const char* value = "operator delete"; };
struct _s1453 { static const char* value = "operator delete[]"; };
struct _s1454 { static const char* value = "CanBeRehashed"; };
struct _s1455 { static const char* value = "raw_size"; };
struct _s1456 { static const char* value = "EntropySource"; };
struct _s1457 { static const char* value = "ReturnAddressLocationResolver"; };
struct _s1458 { static const char* value = "V8"; };
struct _s1459 { static const char* value = "SetNativesDataBlob"; };
struct _s1460 { static const char* value = "startup_blob"; };
struct _s1461 { static const char* value = "SetSnapshotDataBlob"; };
struct _s1462 { static const char* value = "SetDcheckErrorHandler"; };
struct _s1463 { static const char* value = "SetFlagsFromString"; };
struct _s1464 { static const char* value = "SetFlagsFromCommandLine"; };
struct _s1465 { static const char* value = "remove_flags"; };
struct _s1466 { static const char* value = "GetVersion"; };
struct _s1467 { static const char* value = "SetEntropySource"; };
struct _s1468 { static const char* value = "SetReturnAddressLocationResolver"; };
struct _s1469 { static const char* value = "return_address_resolver"; };
struct _s1470 { static const char* value = "InitializeICU"; };
struct _s1471 { static const char* value = "icu_data_file"; };
struct _s1472 { static const char* value = "InitializeICUDefaultLocation"; };
struct _s1473 { static const char* value = "exec_path"; };
struct _s1474 { static const char* value = "InitializeExternalStartupData"; };
struct _s1475 { static const char* value = "directory_path"; };
struct _s1476 { static const char* value = "natives_blob"; };
struct _s1477 { static const char* value = "InitializePlatform"; };
struct _s1478 { static const char* value = "platform"; };
struct _s1479 { static const char* value = "ShutdownPlatform"; };
struct _s1480 { static const char* value = "EnableWebAssemblyTrapHandler"; };
struct _s1481 { static const char* value = "use_v8_signal_handler"; };
struct _s1482 { static const char* value = "SetUnhandledExceptionCallback"; };
struct _s1483 { static const char* value = "unhandled_exception_callback"; };
struct _s1484 { static const char* value = "SnapshotCreator"; };
struct _s1485 { static const char* value = "FunctionCodeHandling"; };
struct _s1486 { static const char* value = "kClear"; };
struct _s1487 { static const char* value = "kKeep"; };
struct _s1488 { static const char* value = "existing_blob"; };
struct _s1489 { static const char* value = "~SnapshotCreator"; };
struct _s1490 { static const char* value = "SetDefaultContext"; };
struct _s1491 { static const char* value = "AddContext"; };
struct _s1492 { static const char* value = "AddTemplate"; };
struct _s1493 { static const char* value = "template_obj"; };
struct _s1494 { static const char* value = "AddData"; };
struct _s1495 { static const char* value = "CreateBlob"; };
struct _s1496 { static const char* value = "function_code_handling"; };
struct _s1497 { static const char* value = "IsNothing"; };
struct _s1498 { static const char* value = "IsJust"; };
struct _s1499 { static const char* value = "ToChecked"; };
struct _s1500 { static const char* value = "Check"; };
struct _s1501 { static const char* value = "To"; };
struct _s1502 { static const char* value = "FromJust"; };
struct _s1503 { static const char* value = "Nothing"; };
struct _s1504 { static const char* value = "Just"; };
struct _s1505 { static const char* value = "t"; };
struct _s1506 { static const char* value = "~Maybe"; };
struct _s1507 { static const char* value = "JustVoid"; };
struct _s1508 { static const char* value = "TryCatch"; };
struct _s1509 { static const char* value = "~TryCatch"; };
struct _s1510 { static const char* value = "HasCaught"; };
struct _s1511 { static const char* value = "CanContinue"; };
struct _s1512 { static const char* value = "HasTerminated"; };
struct _s1513 { static const char* value = "ReThrow"; };
struct _s1514 { static const char* value = "SetVerbose"; };
struct _s1515 { static const char* value = "IsVerbose"; };
struct _s1516 { static const char* value = "SetCaptureMessage"; };
struct _s1517 { static const char* value = "JSStackComparableAddress"; };
struct _s1518 { static const char* value = "ExtensionConfiguration"; };
struct _s1519 { static const char* value = "name_count"; };
struct _s1520 { static const char* value = "begin"; };
struct _s1521 { static const char* value = "end"; };
struct _s1522 { static const char* value = "DetachGlobal"; };
struct _s1523 { static const char* value = "extensions"; };
struct _s1524 { static const char* value = "global_template"; };
struct _s1525 { static const char* value = "global_object"; };
struct _s1526 { static const char* value = "internal_fields_deserializer"; };
struct _s1527 { static const char* value = "context_snapshot_index"; };
struct _s1528 { static const char* value = "embedder_fields_deserializer"; };
struct _s1529 { static const char* value = "NewRemoteContext"; };
struct _s1530 { static const char* value = "SetSecurityToken"; };
struct _s1531 { static const char* value = "token"; };
struct _s1532 { static const char* value = "UseDefaultSecurityToken"; };
struct _s1533 { static const char* value = "GetSecurityToken"; };
struct _s1534 { static const char* value = "EmbedderDataFields"; };
struct _s1535 { static const char* value = "kDebugIdIndex"; };
struct _s1536 { static const char* value = "GetNumberOfEmbedderDataFields"; };
struct _s1537 { static const char* value = "GetEmbedderData"; };
struct _s1538 { static const char* value = "GetExtrasBindingObject"; };
struct _s1539 { static const char* value = "SetEmbedderData"; };
struct _s1540 { static const char* value = "GetAlignedPointerFromEmbedderData"; };
struct _s1541 { static const char* value = "SetAlignedPointerInEmbedderData"; };
struct _s1542 { static const char* value = "AllowCodeGenerationFromStrings"; };
struct _s1543 { static const char* value = "IsCodeGenerationFromStringsAllowed"; };
struct _s1544 { static const char* value = "SetErrorMessageForCodeGenerationFromStrings"; };
struct _s1545 { static const char* value = "AbortScriptExecutionCallback"; };
struct _s1546 { static const char* value = "SetAbortScriptExecution"; };
struct _s1547 { static const char* value = "BackupIncumbentScope"; };
struct _s1548 { static const char* value = "backup_incumbent_context"; };
struct _s1549 { static const char* value = "~BackupIncumbentScope"; };
struct _s1550 { static const char* value = "Unlocker"; };
struct _s1551 { static const char* value = "~Unlocker"; };
struct _s1552 { static const char* value = "Locker"; };
struct _s1553 { static const char* value = "~Locker"; };
struct _s1554 { static const char* value = "IsLocked"; };
struct _s1555 { static const char* value = "IsActive"; };
struct _s1556 { static const char* value = "Unwinder"; };
struct _s1557 { static const char* value = "TryUnwindV8Frames"; };
struct _s1558 { static const char* value = "unwind_state"; };
struct _s1559 { static const char* value = "register_state"; };
struct _s1560 { static const char* value = "stack_base"; };
struct _s1561 { static const char* value = "PCIsInV8"; };
struct _ty1;  // Record v8::Context
struct _ty2;  // Record v8::Data
struct _ty3;  // Record v8::Isolate
struct _ty4;  // Record v8::AccessorSignature
struct _ty5;  // Record v8::Array
struct _ty6;  // Record v8::ArrayBuffer
struct _ty7;  // Record v8::BigInt
struct _ty8;  // Record v8::BigIntObject
struct _ty9;  // Record v8::Boolean
struct _ty10;  // Record v8::BooleanObject
struct _ty11;  // Record v8::Date
struct _ty12;  // Record v8::External
struct _ty13;  // Record v8::Function
struct _ty14;  // Record v8::FunctionTemplate
struct _ty15;  // Record v8::HeapProfiler
struct _ty16;  // Record v8::ImplementationUtilities
struct _ty17;  // Record v8::Int32
struct _ty18;  // Record v8::Integer
struct _ty19;  // TemplateTypeParm T
struct _ty20;  // InjectedClassName Maybe<T>
struct _ty21;  // Record v8::Maybe<bool>
struct _ty22;  // Record v8::Maybe<int>
struct _ty23;  // Record v8::Maybe<unsigned int>
struct _ty24;  // Record v8::Maybe<double>
struct _ty25;  // Record v8::Maybe<long long>
struct _ty26;  // Record v8::Maybe<v8::PropertyAttribute>
struct _ty27;  // Record v8::MicrotaskQueue
struct _ty28;  // Record v8::Name
struct _ty29;  // Record v8::Number
struct _ty30;  // Record v8::NumberObject
struct _ty31;  // Record v8::Object
struct _ty32;  // Record v8::ObjectOperationDescriptor
struct _ty33;  // Record v8::ObjectTemplate
struct _ty34;  // Record v8::Platform
struct _ty35;  // Record v8::Primitive
struct _ty36;  // Record v8::Promise
struct _ty37;  // Record v8::PropertyDescriptor
struct _ty38;  // Record v8::Proxy
struct _ty39;  // Record v8::RawOperationDescriptor
struct _ty40;  // Record v8::Script
struct _ty41;  // Record v8::SharedArrayBuffer
struct _ty42;  // Record v8::Signature
struct _ty43;  // Record v8::StartupData
struct _ty44;  // Record v8::StackFrame
struct _ty45;  // Record v8::StackTrace
struct _ty46;  // Record v8::String
struct _ty47;  // Record v8::StringObject
struct _ty48;  // Record v8::Symbol
struct _ty49;  // Record v8::SymbolObject
struct _ty50;  // Record v8::PrimitiveArray
struct _ty51;  // Record v8::Private
struct _ty52;  // Record v8::Uint32
struct _ty53;  // Record v8::Utils
struct _ty54;  // Record v8::Value
struct _ty55;  // Record v8::WasmModuleObject
struct _ty56;  // TemplateTypeParm T
struct _ty57;  // InjectedClassName Local<T>
struct _ty58;  // Record v8::Local<v8::Primitive>
struct _ty59;  // FunctionProto void ()
struct _ty60;  // Builtin void
struct _ty61;  // Pointer v8::Local<v8::Primitive> *
struct _ty62;  // TemplateTypeParm S
struct _ty63;  // FunctionProto void (Local<S>)
struct _ty64;  // TemplateSpecialization Local<S>
struct _ty65;  // FunctionProto void (Local<v8::Primitive>)
struct _ty66;  // TemplateSpecialization Local<v8::Primitive>
struct _ty67;  // FunctionProto bool () const
struct _ty68;  // Builtin bool
struct _ty69;  // Pointer const v8::Local<v8::Primitive> *
struct _ty70;  // FunctionProto v8::Primitive *() const
struct _ty71;  // Pointer v8::Primitive *
struct _ty72;  // SubstTemplateTypeParm v8::Primitive
struct _ty73;  // TemplateTypeParm S
struct _ty74;  // FunctionProto bool (const Local<S> &) const
struct _ty75;  // LValueReference const Local<S> &
struct _ty76;  // TemplateSpecialization Local<S>
struct _ty77;  // TemplateTypeParm S
struct _ty78;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty79;  // LValueReference const PersistentBase<S> &
struct _ty80;  // TemplateSpecialization PersistentBase<S>
struct _ty81;  // TemplateTypeParm S
struct _ty82;  // FunctionProto bool (const Local<S> &) const
struct _ty83;  // LValueReference const Local<S> &
struct _ty84;  // TemplateSpecialization Local<S>
struct _ty85;  // TemplateTypeParm S
struct _ty86;  // FunctionProto bool (const Persistent<S> &) const
struct _ty87;  // LValueReference const Persistent<S> &
struct _ty88;  // TemplateSpecialization Persistent<S>
struct _ty89;  // TemplateTypeParm S
struct _ty90;  // FunctionProto Local<v8::Primitive> (Local<S>)
struct _ty91;  // TemplateSpecialization Local<v8::Primitive>
struct _ty92;  // TemplateSpecialization Local<S>
struct _ty93;  // TemplateTypeParm S
struct _ty94;  // FunctionProto Local<S> () const
struct _ty95;  // TemplateSpecialization Local<S>
struct _ty96;  // FunctionProto Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
struct _ty97;  // TemplateSpecialization Local<v8::Primitive>
struct _ty98;  // Pointer v8::Isolate *
struct _ty99;  // TemplateSpecialization Local<v8::Primitive>
struct _ty100;  // FunctionProto Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
struct _ty101;  // TemplateSpecialization Local<v8::Primitive>
struct _ty102;  // LValueReference const PersistentBase<v8::Primitive> &
struct _ty103;  // TemplateSpecialization PersistentBase<v8::Primitive>
struct _ty104;  // Record v8::PersistentBase<v8::Primitive>
struct _ty105;  // FunctionProto Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
struct _ty106;  // TemplateSpecialization Local<v8::Primitive>
struct _ty107;  // LValueReference const TracedGlobal<v8::Primitive> &
struct _ty108;  // TemplateSpecialization TracedGlobal<v8::Primitive>
struct _ty109;  // Record v8::TracedGlobal<v8::Primitive>
struct _ty110;  // FunctionProto void (const v8::Local<v8::Primitive> &)
struct _ty111;  // LValueReference const v8::Local<v8::Primitive> &
struct _ty112;  // FunctionProto void (v8::Local<v8::Primitive> &&) noexcept
struct _ty113;  // RValueReference v8::Local<v8::Primitive> &&
struct _ty114;  // FunctionProto void () noexcept
struct _ty115;  // Record v8::Local<v8::Boolean>
struct _ty116;  // Pointer v8::Local<v8::Boolean> *
struct _ty117;  // TemplateTypeParm S
struct _ty118;  // FunctionProto void (Local<S>)
struct _ty119;  // TemplateSpecialization Local<S>
struct _ty120;  // FunctionProto void (Local<v8::Boolean>)
struct _ty121;  // TemplateSpecialization Local<v8::Boolean>
struct _ty122;  // Pointer const v8::Local<v8::Boolean> *
struct _ty123;  // FunctionProto v8::Boolean *() const
struct _ty124;  // Pointer v8::Boolean *
struct _ty125;  // SubstTemplateTypeParm v8::Boolean
struct _ty126;  // TemplateTypeParm S
struct _ty127;  // FunctionProto bool (const Local<S> &) const
struct _ty128;  // LValueReference const Local<S> &
struct _ty129;  // TemplateSpecialization Local<S>
struct _ty130;  // TemplateTypeParm S
struct _ty131;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty132;  // LValueReference const PersistentBase<S> &
struct _ty133;  // TemplateSpecialization PersistentBase<S>
struct _ty134;  // TemplateTypeParm S
struct _ty135;  // FunctionProto bool (const Local<S> &) const
struct _ty136;  // LValueReference const Local<S> &
struct _ty137;  // TemplateSpecialization Local<S>
struct _ty138;  // TemplateTypeParm S
struct _ty139;  // FunctionProto bool (const Persistent<S> &) const
struct _ty140;  // LValueReference const Persistent<S> &
struct _ty141;  // TemplateSpecialization Persistent<S>
struct _ty142;  // TemplateTypeParm S
struct _ty143;  // FunctionProto Local<v8::Boolean> (Local<S>)
struct _ty144;  // TemplateSpecialization Local<v8::Boolean>
struct _ty145;  // TemplateSpecialization Local<S>
struct _ty146;  // TemplateTypeParm S
struct _ty147;  // FunctionProto Local<S> () const
struct _ty148;  // TemplateSpecialization Local<S>
struct _ty149;  // FunctionProto Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _ty150;  // TemplateSpecialization Local<v8::Boolean>
struct _ty151;  // TemplateSpecialization Local<v8::Boolean>
struct _ty152;  // FunctionProto Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
struct _ty153;  // TemplateSpecialization Local<v8::Boolean>
struct _ty154;  // LValueReference const PersistentBase<v8::Boolean> &
struct _ty155;  // TemplateSpecialization PersistentBase<v8::Boolean>
struct _ty156;  // Record v8::PersistentBase<v8::Boolean>
struct _ty157;  // FunctionProto Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
struct _ty158;  // TemplateSpecialization Local<v8::Boolean>
struct _ty159;  // LValueReference const TracedGlobal<v8::Boolean> &
struct _ty160;  // TemplateSpecialization TracedGlobal<v8::Boolean>
struct _ty161;  // Record v8::TracedGlobal<v8::Boolean>
struct _ty162;  // FunctionProto void (const v8::Local<v8::Boolean> &)
struct _ty163;  // LValueReference const v8::Local<v8::Boolean> &
struct _ty164;  // FunctionProto void (v8::Local<v8::Boolean> &&) noexcept
struct _ty165;  // RValueReference v8::Local<v8::Boolean> &&
struct _ty166;  // Record v8::Local<v8::Value>
struct _ty167;  // Pointer v8::Local<v8::Value> *
struct _ty168;  // TemplateTypeParm S
struct _ty169;  // FunctionProto void (Local<S>)
struct _ty170;  // TemplateSpecialization Local<S>
struct _ty171;  // FunctionProto void (Local<v8::Value>)
struct _ty172;  // TemplateSpecialization Local<v8::Value>
struct _ty173;  // Pointer const v8::Local<v8::Value> *
struct _ty174;  // FunctionProto v8::Value *() const
struct _ty175;  // Pointer v8::Value *
struct _ty176;  // SubstTemplateTypeParm v8::Value
struct _ty177;  // TemplateTypeParm S
struct _ty178;  // FunctionProto bool (const Local<S> &) const
struct _ty179;  // LValueReference const Local<S> &
struct _ty180;  // TemplateSpecialization Local<S>
struct _ty181;  // TemplateTypeParm S
struct _ty182;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty183;  // LValueReference const PersistentBase<S> &
struct _ty184;  // TemplateSpecialization PersistentBase<S>
struct _ty185;  // TemplateTypeParm S
struct _ty186;  // FunctionProto bool (const Local<S> &) const
struct _ty187;  // LValueReference const Local<S> &
struct _ty188;  // TemplateSpecialization Local<S>
struct _ty189;  // TemplateTypeParm S
struct _ty190;  // FunctionProto bool (const Persistent<S> &) const
struct _ty191;  // LValueReference const Persistent<S> &
struct _ty192;  // TemplateSpecialization Persistent<S>
struct _ty193;  // TemplateTypeParm S
struct _ty194;  // FunctionProto Local<v8::Value> (Local<S>)
struct _ty195;  // TemplateSpecialization Local<v8::Value>
struct _ty196;  // TemplateSpecialization Local<S>
struct _ty197;  // TemplateTypeParm S
struct _ty198;  // FunctionProto Local<S> () const
struct _ty199;  // TemplateSpecialization Local<S>
struct _ty200;  // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _ty201;  // TemplateSpecialization Local<v8::Value>
struct _ty202;  // TemplateSpecialization Local<v8::Value>
struct _ty203;  // FunctionProto Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
struct _ty204;  // TemplateSpecialization Local<v8::Value>
struct _ty205;  // LValueReference const PersistentBase<v8::Value> &
struct _ty206;  // TemplateSpecialization PersistentBase<v8::Value>
struct _ty207;  // Record v8::PersistentBase<v8::Value>
struct _ty208;  // FunctionProto Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
struct _ty209;  // TemplateSpecialization Local<v8::Value>
struct _ty210;  // LValueReference const TracedGlobal<v8::Value> &
struct _ty211;  // TemplateSpecialization TracedGlobal<v8::Value>
struct _ty212;  // Record v8::TracedGlobal<v8::Value>
struct _ty213;  // FunctionProto void (const v8::Local<v8::Value> &) noexcept
struct _ty214;  // LValueReference const v8::Local<v8::Value> &
struct _ty215;  // FunctionProto void (v8::Local<v8::Value> &&) noexcept
struct _ty216;  // RValueReference v8::Local<v8::Value> &&
struct _ty217;  // FunctionProto v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _ty218;  // LValueReference v8::Local<v8::Value> &
struct _ty219;  // FunctionProto v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _ty220;  // Record v8::Local<v8::PrimitiveArray>
struct _ty221;  // Pointer v8::Local<v8::PrimitiveArray> *
struct _ty222;  // TemplateTypeParm S
struct _ty223;  // FunctionProto void (Local<S>)
struct _ty224;  // TemplateSpecialization Local<S>
struct _ty225;  // FunctionProto void (Local<v8::PrimitiveArray>)
struct _ty226;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty227;  // Pointer const v8::Local<v8::PrimitiveArray> *
struct _ty228;  // FunctionProto v8::PrimitiveArray *() const
struct _ty229;  // Pointer v8::PrimitiveArray *
struct _ty230;  // SubstTemplateTypeParm v8::PrimitiveArray
struct _ty231;  // TemplateTypeParm S
struct _ty232;  // FunctionProto bool (const Local<S> &) const
struct _ty233;  // LValueReference const Local<S> &
struct _ty234;  // TemplateSpecialization Local<S>
struct _ty235;  // TemplateTypeParm S
struct _ty236;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty237;  // LValueReference const PersistentBase<S> &
struct _ty238;  // TemplateSpecialization PersistentBase<S>
struct _ty239;  // TemplateTypeParm S
struct _ty240;  // FunctionProto bool (const Local<S> &) const
struct _ty241;  // LValueReference const Local<S> &
struct _ty242;  // TemplateSpecialization Local<S>
struct _ty243;  // TemplateTypeParm S
struct _ty244;  // FunctionProto bool (const Persistent<S> &) const
struct _ty245;  // LValueReference const Persistent<S> &
struct _ty246;  // TemplateSpecialization Persistent<S>
struct _ty247;  // TemplateTypeParm S
struct _ty248;  // FunctionProto Local<v8::PrimitiveArray> (Local<S>)
struct _ty249;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty250;  // TemplateSpecialization Local<S>
struct _ty251;  // TemplateTypeParm S
struct _ty252;  // FunctionProto Local<S> () const
struct _ty253;  // TemplateSpecialization Local<S>
struct _ty254;  // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
struct _ty255;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty256;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty257;  // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
struct _ty258;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty259;  // LValueReference const PersistentBase<v8::PrimitiveArray> &
struct _ty260;  // TemplateSpecialization PersistentBase<v8::PrimitiveArray>
struct _ty261;  // Record v8::PersistentBase<v8::PrimitiveArray>
struct _ty262;  // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
struct _ty263;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty264;  // LValueReference const TracedGlobal<v8::PrimitiveArray> &
struct _ty265;  // TemplateSpecialization TracedGlobal<v8::PrimitiveArray>
struct _ty266;  // Record v8::TracedGlobal<v8::PrimitiveArray>
struct _ty267;  // FunctionProto void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _ty268;  // LValueReference const v8::Local<v8::PrimitiveArray> &
struct _ty269;  // FunctionProto void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _ty270;  // RValueReference v8::Local<v8::PrimitiveArray> &&
struct _ty271;  // FunctionProto v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
struct _ty272;  // LValueReference v8::Local<v8::PrimitiveArray> &
struct _ty273;  // FunctionProto v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
struct _ty274;  // Record v8::Local<v8::Integer>
struct _ty275;  // Pointer v8::Local<v8::Integer> *
struct _ty276;  // TemplateTypeParm S
struct _ty277;  // FunctionProto void (Local<S>)
struct _ty278;  // TemplateSpecialization Local<S>
struct _ty279;  // FunctionProto void (Local<v8::Integer>)
struct _ty280;  // TemplateSpecialization Local<v8::Integer>
struct _ty281;  // Pointer const v8::Local<v8::Integer> *
struct _ty282;  // FunctionProto v8::Integer *() const
struct _ty283;  // Pointer v8::Integer *
struct _ty284;  // SubstTemplateTypeParm v8::Integer
struct _ty285;  // TemplateTypeParm S
struct _ty286;  // FunctionProto bool (const Local<S> &) const
struct _ty287;  // LValueReference const Local<S> &
struct _ty288;  // TemplateSpecialization Local<S>
struct _ty289;  // TemplateTypeParm S
struct _ty290;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty291;  // LValueReference const PersistentBase<S> &
struct _ty292;  // TemplateSpecialization PersistentBase<S>
struct _ty293;  // TemplateTypeParm S
struct _ty294;  // FunctionProto bool (const Local<S> &) const
struct _ty295;  // LValueReference const Local<S> &
struct _ty296;  // TemplateSpecialization Local<S>
struct _ty297;  // TemplateTypeParm S
struct _ty298;  // FunctionProto bool (const Persistent<S> &) const
struct _ty299;  // LValueReference const Persistent<S> &
struct _ty300;  // TemplateSpecialization Persistent<S>
struct _ty301;  // TemplateTypeParm S
struct _ty302;  // FunctionProto Local<v8::Integer> (Local<S>)
struct _ty303;  // TemplateSpecialization Local<v8::Integer>
struct _ty304;  // TemplateSpecialization Local<S>
struct _ty305;  // TemplateTypeParm S
struct _ty306;  // FunctionProto Local<S> () const
struct _ty307;  // TemplateSpecialization Local<S>
struct _ty308;  // FunctionProto Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _ty309;  // TemplateSpecialization Local<v8::Integer>
struct _ty310;  // TemplateSpecialization Local<v8::Integer>
struct _ty311;  // FunctionProto Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
struct _ty312;  // TemplateSpecialization Local<v8::Integer>
struct _ty313;  // LValueReference const PersistentBase<v8::Integer> &
struct _ty314;  // TemplateSpecialization PersistentBase<v8::Integer>
struct _ty315;  // Record v8::PersistentBase<v8::Integer>
struct _ty316;  // FunctionProto Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
struct _ty317;  // TemplateSpecialization Local<v8::Integer>
struct _ty318;  // LValueReference const TracedGlobal<v8::Integer> &
struct _ty319;  // TemplateSpecialization TracedGlobal<v8::Integer>
struct _ty320;  // Record v8::TracedGlobal<v8::Integer>
struct _ty321;  // FunctionProto void (const v8::Local<v8::Integer> &) noexcept
struct _ty322;  // LValueReference const v8::Local<v8::Integer> &
struct _ty323;  // FunctionProto void (v8::Local<v8::Integer> &&) noexcept
struct _ty324;  // RValueReference v8::Local<v8::Integer> &&
struct _ty325;  // FunctionProto v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _ty326;  // LValueReference v8::Local<v8::Integer> &
struct _ty327;  // FunctionProto v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _ty328;  // Record v8::Local<v8::Script>
struct _ty329;  // Record v8::Local<v8::String>
struct _ty330;  // Pointer v8::Local<v8::String> *
struct _ty331;  // TemplateTypeParm S
struct _ty332;  // FunctionProto void (Local<S>)
struct _ty333;  // TemplateSpecialization Local<S>
struct _ty334;  // FunctionProto void (Local<v8::String>)
struct _ty335;  // TemplateSpecialization Local<v8::String>
struct _ty336;  // Pointer const v8::Local<v8::String> *
struct _ty337;  // FunctionProto v8::String *() const
struct _ty338;  // Pointer v8::String *
struct _ty339;  // SubstTemplateTypeParm v8::String
struct _ty340;  // TemplateTypeParm S
struct _ty341;  // FunctionProto bool (const Local<S> &) const
struct _ty342;  // LValueReference const Local<S> &
struct _ty343;  // TemplateSpecialization Local<S>
struct _ty344;  // TemplateTypeParm S
struct _ty345;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty346;  // LValueReference const PersistentBase<S> &
struct _ty347;  // TemplateSpecialization PersistentBase<S>
struct _ty348;  // TemplateTypeParm S
struct _ty349;  // FunctionProto bool (const Local<S> &) const
struct _ty350;  // LValueReference const Local<S> &
struct _ty351;  // TemplateSpecialization Local<S>
struct _ty352;  // TemplateTypeParm S
struct _ty353;  // FunctionProto bool (const Persistent<S> &) const
struct _ty354;  // LValueReference const Persistent<S> &
struct _ty355;  // TemplateSpecialization Persistent<S>
struct _ty356;  // TemplateTypeParm S
struct _ty357;  // FunctionProto Local<v8::String> (Local<S>)
struct _ty358;  // TemplateSpecialization Local<v8::String>
struct _ty359;  // TemplateSpecialization Local<S>
struct _ty360;  // TemplateTypeParm S
struct _ty361;  // FunctionProto Local<S> () const
struct _ty362;  // TemplateSpecialization Local<S>
struct _ty363;  // FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _ty364;  // TemplateSpecialization Local<v8::String>
struct _ty365;  // TemplateSpecialization Local<v8::String>
struct _ty366;  // FunctionProto Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
struct _ty367;  // TemplateSpecialization Local<v8::String>
struct _ty368;  // LValueReference const PersistentBase<v8::String> &
struct _ty369;  // TemplateSpecialization PersistentBase<v8::String>
struct _ty370;  // Record v8::PersistentBase<v8::String>
struct _ty371;  // FunctionProto Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
struct _ty372;  // TemplateSpecialization Local<v8::String>
struct _ty373;  // LValueReference const TracedGlobal<v8::String> &
struct _ty374;  // TemplateSpecialization TracedGlobal<v8::String>
struct _ty375;  // Record v8::TracedGlobal<v8::String>
struct _ty376;  // FunctionProto void (const v8::Local<v8::String> &) noexcept
struct _ty377;  // LValueReference const v8::Local<v8::String> &
struct _ty378;  // FunctionProto void (v8::Local<v8::String> &&) noexcept
struct _ty379;  // RValueReference v8::Local<v8::String> &&
struct _ty380;  // FunctionProto v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _ty381;  // LValueReference v8::Local<v8::String> &
struct _ty382;  // FunctionProto v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _ty383;  // Record v8::Local<v8::Context>
struct _ty384;  // Pointer v8::Local<v8::Context> *
struct _ty385;  // TemplateTypeParm S
struct _ty386;  // FunctionProto void (Local<S>)
struct _ty387;  // TemplateSpecialization Local<S>
struct _ty388;  // FunctionProto void (Local<v8::Context>)
struct _ty389;  // TemplateSpecialization Local<v8::Context>
struct _ty390;  // Pointer const v8::Local<v8::Context> *
struct _ty391;  // FunctionProto v8::Context *() const
struct _ty392;  // Pointer v8::Context *
struct _ty393;  // SubstTemplateTypeParm v8::Context
struct _ty394;  // TemplateTypeParm S
struct _ty395;  // FunctionProto bool (const Local<S> &) const
struct _ty396;  // LValueReference const Local<S> &
struct _ty397;  // TemplateSpecialization Local<S>
struct _ty398;  // TemplateTypeParm S
struct _ty399;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty400;  // LValueReference const PersistentBase<S> &
struct _ty401;  // TemplateSpecialization PersistentBase<S>
struct _ty402;  // TemplateTypeParm S
struct _ty403;  // FunctionProto bool (const Local<S> &) const
struct _ty404;  // LValueReference const Local<S> &
struct _ty405;  // TemplateSpecialization Local<S>
struct _ty406;  // TemplateTypeParm S
struct _ty407;  // FunctionProto bool (const Persistent<S> &) const
struct _ty408;  // LValueReference const Persistent<S> &
struct _ty409;  // TemplateSpecialization Persistent<S>
struct _ty410;  // TemplateTypeParm S
struct _ty411;  // FunctionProto Local<v8::Context> (Local<S>)
struct _ty412;  // TemplateSpecialization Local<v8::Context>
struct _ty413;  // TemplateSpecialization Local<S>
struct _ty414;  // TemplateTypeParm S
struct _ty415;  // FunctionProto Local<S> () const
struct _ty416;  // TemplateSpecialization Local<S>
struct _ty417;  // FunctionProto Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _ty418;  // TemplateSpecialization Local<v8::Context>
struct _ty419;  // TemplateSpecialization Local<v8::Context>
struct _ty420;  // FunctionProto Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
struct _ty421;  // TemplateSpecialization Local<v8::Context>
struct _ty422;  // LValueReference const PersistentBase<v8::Context> &
struct _ty423;  // TemplateSpecialization PersistentBase<v8::Context>
struct _ty424;  // Record v8::PersistentBase<v8::Context>
struct _ty425;  // FunctionProto Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
struct _ty426;  // TemplateSpecialization Local<v8::Context>
struct _ty427;  // LValueReference const TracedGlobal<v8::Context> &
struct _ty428;  // TemplateSpecialization TracedGlobal<v8::Context>
struct _ty429;  // Record v8::TracedGlobal<v8::Context>
struct _ty430;  // FunctionProto void (const v8::Local<v8::Context> &) noexcept
struct _ty431;  // LValueReference const v8::Local<v8::Context> &
struct _ty432;  // FunctionProto void (v8::Local<v8::Context> &&) noexcept
struct _ty433;  // RValueReference v8::Local<v8::Context> &&
struct _ty434;  // Record v8::Local<v8::Module>
struct _ty435;  // Record v8::Local<v8::UnboundModuleScript>
struct _ty436;  // Record v8::Local<v8::UnboundScript>
struct _ty437;  // Pointer v8::Local<v8::UnboundScript> *
struct _ty438;  // TemplateTypeParm S
struct _ty439;  // FunctionProto void (Local<S>)
struct _ty440;  // TemplateSpecialization Local<S>
struct _ty441;  // Pointer const v8::Local<v8::UnboundScript> *
struct _ty442;  // FunctionProto v8::UnboundScript *() const
struct _ty443;  // Pointer v8::UnboundScript *
struct _ty444;  // SubstTemplateTypeParm v8::UnboundScript
struct _ty445;  // Record v8::UnboundScript
struct _ty446;  // TemplateTypeParm S
struct _ty447;  // FunctionProto bool (const Local<S> &) const
struct _ty448;  // LValueReference const Local<S> &
struct _ty449;  // TemplateSpecialization Local<S>
struct _ty450;  // TemplateTypeParm S
struct _ty451;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty452;  // LValueReference const PersistentBase<S> &
struct _ty453;  // TemplateSpecialization PersistentBase<S>
struct _ty454;  // TemplateTypeParm S
struct _ty455;  // FunctionProto bool (const Local<S> &) const
struct _ty456;  // LValueReference const Local<S> &
struct _ty457;  // TemplateSpecialization Local<S>
struct _ty458;  // TemplateTypeParm S
struct _ty459;  // FunctionProto bool (const Persistent<S> &) const
struct _ty460;  // LValueReference const Persistent<S> &
struct _ty461;  // TemplateSpecialization Persistent<S>
struct _ty462;  // TemplateTypeParm S
struct _ty463;  // FunctionProto Local<v8::UnboundScript> (Local<S>)
struct _ty464;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty465;  // TemplateSpecialization Local<S>
struct _ty466;  // TemplateTypeParm S
struct _ty467;  // FunctionProto Local<S> () const
struct _ty468;  // TemplateSpecialization Local<S>
struct _ty469;  // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
struct _ty470;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty471;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty472;  // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
struct _ty473;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty474;  // LValueReference const PersistentBase<v8::UnboundScript> &
struct _ty475;  // TemplateSpecialization PersistentBase<v8::UnboundScript>
struct _ty476;  // Record v8::PersistentBase<v8::UnboundScript>
struct _ty477;  // FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
struct _ty478;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty479;  // LValueReference const TracedGlobal<v8::UnboundScript> &
struct _ty480;  // TemplateSpecialization TracedGlobal<v8::UnboundScript>
struct _ty481;  // Record v8::TracedGlobal<v8::UnboundScript>
struct _ty482;  // Record v8::Local<v8::Object>
struct _ty483;  // Record v8::Local<v8::Function>
struct _ty484;  // Pointer v8::Local<v8::Function> *
struct _ty485;  // TemplateTypeParm S
struct _ty486;  // FunctionProto void (Local<S>)
struct _ty487;  // TemplateSpecialization Local<S>
struct _ty488;  // FunctionProto void (Local<v8::Function>)
struct _ty489;  // TemplateSpecialization Local<v8::Function>
struct _ty490;  // Pointer const v8::Local<v8::Function> *
struct _ty491;  // FunctionProto v8::Function *() const
struct _ty492;  // Pointer v8::Function *
struct _ty493;  // SubstTemplateTypeParm v8::Function
struct _ty494;  // TemplateTypeParm S
struct _ty495;  // FunctionProto bool (const Local<S> &) const
struct _ty496;  // LValueReference const Local<S> &
struct _ty497;  // TemplateSpecialization Local<S>
struct _ty498;  // TemplateTypeParm S
struct _ty499;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty500;  // LValueReference const PersistentBase<S> &
struct _ty501;  // TemplateSpecialization PersistentBase<S>
struct _ty502;  // TemplateTypeParm S
struct _ty503;  // FunctionProto bool (const Local<S> &) const
struct _ty504;  // LValueReference const Local<S> &
struct _ty505;  // TemplateSpecialization Local<S>
struct _ty506;  // TemplateTypeParm S
struct _ty507;  // FunctionProto bool (const Persistent<S> &) const
struct _ty508;  // LValueReference const Persistent<S> &
struct _ty509;  // TemplateSpecialization Persistent<S>
struct _ty510;  // TemplateTypeParm S
struct _ty511;  // FunctionProto Local<v8::Function> (Local<S>)
struct _ty512;  // TemplateSpecialization Local<v8::Function>
struct _ty513;  // TemplateSpecialization Local<S>
struct _ty514;  // TemplateTypeParm S
struct _ty515;  // FunctionProto Local<S> () const
struct _ty516;  // TemplateSpecialization Local<S>
struct _ty517;  // FunctionProto Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _ty518;  // TemplateSpecialization Local<v8::Function>
struct _ty519;  // TemplateSpecialization Local<v8::Function>
struct _ty520;  // FunctionProto Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
struct _ty521;  // TemplateSpecialization Local<v8::Function>
struct _ty522;  // LValueReference const PersistentBase<v8::Function> &
struct _ty523;  // TemplateSpecialization PersistentBase<v8::Function>
struct _ty524;  // Record v8::PersistentBase<v8::Function>
struct _ty525;  // FunctionProto Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
struct _ty526;  // TemplateSpecialization Local<v8::Function>
struct _ty527;  // LValueReference const TracedGlobal<v8::Function> &
struct _ty528;  // TemplateSpecialization TracedGlobal<v8::Function>
struct _ty529;  // Record v8::TracedGlobal<v8::Function>
struct _ty530;  // FunctionProto void (const v8::Local<v8::Function> &)
struct _ty531;  // LValueReference const v8::Local<v8::Function> &
struct _ty532;  // FunctionProto void (v8::Local<v8::Function> &&) noexcept
struct _ty533;  // RValueReference v8::Local<v8::Function> &&
struct _ty534;  // Record v8::Local<v8::StackTrace>
struct _ty535;  // Record v8::Local<v8::StackFrame>
struct _ty536;  // Record v8::Local<v8::SharedArrayBuffer>
struct _ty537;  // Record v8::Local<v8::WasmModuleObject>
struct _ty538;  // Record v8::Local<v8::ArrayBuffer>
struct _ty539;  // Record v8::Local<v8::Symbol>
struct _ty540;  // Record v8::Local<v8::Private>
struct _ty541;  // Record v8::Local<v8::Number>
struct _ty542;  // Record v8::Local<v8::BigInt>
struct _ty543;  // Record v8::Local<v8::Name>
struct _ty544;  // Pointer v8::Local<v8::Name> *
struct _ty545;  // TemplateTypeParm S
struct _ty546;  // FunctionProto void (Local<S>)
struct _ty547;  // TemplateSpecialization Local<S>
struct _ty548;  // FunctionProto void (Local<v8::String>)
struct _ty549;  // TemplateSpecialization Local<v8::String>
struct _ty550;  // FunctionProto void (Local<v8::Name>)
struct _ty551;  // TemplateSpecialization Local<v8::Name>
struct _ty552;  // Pointer const v8::Local<v8::Name> *
struct _ty553;  // FunctionProto v8::Name *() const
struct _ty554;  // Pointer v8::Name *
struct _ty555;  // SubstTemplateTypeParm v8::Name
struct _ty556;  // TemplateTypeParm S
struct _ty557;  // FunctionProto bool (const Local<S> &) const
struct _ty558;  // LValueReference const Local<S> &
struct _ty559;  // TemplateSpecialization Local<S>
struct _ty560;  // TemplateTypeParm S
struct _ty561;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty562;  // LValueReference const PersistentBase<S> &
struct _ty563;  // TemplateSpecialization PersistentBase<S>
struct _ty564;  // TemplateTypeParm S
struct _ty565;  // FunctionProto bool (const Local<S> &) const
struct _ty566;  // LValueReference const Local<S> &
struct _ty567;  // TemplateSpecialization Local<S>
struct _ty568;  // TemplateTypeParm S
struct _ty569;  // FunctionProto bool (const Persistent<S> &) const
struct _ty570;  // LValueReference const Persistent<S> &
struct _ty571;  // TemplateSpecialization Persistent<S>
struct _ty572;  // TemplateTypeParm S
struct _ty573;  // FunctionProto Local<v8::Name> (Local<S>)
struct _ty574;  // TemplateSpecialization Local<v8::Name>
struct _ty575;  // TemplateSpecialization Local<S>
struct _ty576;  // TemplateTypeParm S
struct _ty577;  // FunctionProto Local<S> () const
struct _ty578;  // TemplateSpecialization Local<S>
struct _ty579;  // FunctionProto Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _ty580;  // TemplateSpecialization Local<v8::Name>
struct _ty581;  // TemplateSpecialization Local<v8::Name>
struct _ty582;  // FunctionProto Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
struct _ty583;  // TemplateSpecialization Local<v8::Name>
struct _ty584;  // LValueReference const PersistentBase<v8::Name> &
struct _ty585;  // TemplateSpecialization PersistentBase<v8::Name>
struct _ty586;  // Record v8::PersistentBase<v8::Name>
struct _ty587;  // FunctionProto Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
struct _ty588;  // TemplateSpecialization Local<v8::Name>
struct _ty589;  // LValueReference const TracedGlobal<v8::Name> &
struct _ty590;  // TemplateSpecialization TracedGlobal<v8::Name>
struct _ty591;  // Record v8::TracedGlobal<v8::Name>
struct _ty592;  // FunctionProto void (const v8::Local<v8::Name> &)
struct _ty593;  // LValueReference const v8::Local<v8::Name> &
struct _ty594;  // FunctionProto void (v8::Local<v8::Name> &&) noexcept
struct _ty595;  // RValueReference v8::Local<v8::Name> &&
struct _ty596;  // Record v8::Local<v8::FunctionTemplate>
struct _ty597;  // Pointer v8::Local<v8::FunctionTemplate> *
struct _ty598;  // TemplateTypeParm S
struct _ty599;  // FunctionProto void (Local<S>)
struct _ty600;  // TemplateSpecialization Local<S>
struct _ty601;  // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ty602;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty603;  // Pointer const v8::Local<v8::FunctionTemplate> *
struct _ty604;  // FunctionProto v8::FunctionTemplate *() const
struct _ty605;  // Pointer v8::FunctionTemplate *
struct _ty606;  // SubstTemplateTypeParm v8::FunctionTemplate
struct _ty607;  // TemplateTypeParm S
struct _ty608;  // FunctionProto bool (const Local<S> &) const
struct _ty609;  // LValueReference const Local<S> &
struct _ty610;  // TemplateSpecialization Local<S>
struct _ty611;  // TemplateTypeParm S
struct _ty612;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty613;  // LValueReference const PersistentBase<S> &
struct _ty614;  // TemplateSpecialization PersistentBase<S>
struct _ty615;  // TemplateTypeParm S
struct _ty616;  // FunctionProto bool (const Local<S> &) const
struct _ty617;  // LValueReference const Local<S> &
struct _ty618;  // TemplateSpecialization Local<S>
struct _ty619;  // TemplateTypeParm S
struct _ty620;  // FunctionProto bool (const Persistent<S> &) const
struct _ty621;  // LValueReference const Persistent<S> &
struct _ty622;  // TemplateSpecialization Persistent<S>
struct _ty623;  // TemplateTypeParm S
struct _ty624;  // FunctionProto Local<v8::FunctionTemplate> (Local<S>)
struct _ty625;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty626;  // TemplateSpecialization Local<S>
struct _ty627;  // TemplateTypeParm S
struct _ty628;  // FunctionProto Local<S> () const
struct _ty629;  // TemplateSpecialization Local<S>
struct _ty630;  // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ty631;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty632;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty633;  // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
struct _ty634;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty635;  // LValueReference const PersistentBase<v8::FunctionTemplate> &
struct _ty636;  // TemplateSpecialization PersistentBase<v8::FunctionTemplate>
struct _ty637;  // Record v8::PersistentBase<v8::FunctionTemplate>
struct _ty638;  // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
struct _ty639;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty640;  // LValueReference const TracedGlobal<v8::FunctionTemplate> &
struct _ty641;  // TemplateSpecialization TracedGlobal<v8::FunctionTemplate>
struct _ty642;  // Record v8::TracedGlobal<v8::FunctionTemplate>
struct _ty643;  // FunctionProto void (const v8::Local<v8::FunctionTemplate> &)
struct _ty644;  // LValueReference const v8::Local<v8::FunctionTemplate> &
struct _ty645;  // FunctionProto void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _ty646;  // RValueReference v8::Local<v8::FunctionTemplate> &&
struct _ty647;  // Record v8::Local<v8::Array>
struct _ty648;  // Record v8::Local<v8::Map>
struct _ty649;  // Record v8::Local<v8::Set>
struct _ty650;  // Record v8::Local<v8::Promise>
struct _ty651;  // Pointer v8::Local<v8::Promise> *
struct _ty652;  // TemplateTypeParm S
struct _ty653;  // FunctionProto void (Local<S>)
struct _ty654;  // TemplateSpecialization Local<S>
struct _ty655;  // FunctionProto void (Local<v8::Promise>)
struct _ty656;  // TemplateSpecialization Local<v8::Promise>
struct _ty657;  // Pointer const v8::Local<v8::Promise> *
struct _ty658;  // FunctionProto v8::Promise *() const
struct _ty659;  // Pointer v8::Promise *
struct _ty660;  // SubstTemplateTypeParm v8::Promise
struct _ty661;  // TemplateTypeParm S
struct _ty662;  // FunctionProto bool (const Local<S> &) const
struct _ty663;  // LValueReference const Local<S> &
struct _ty664;  // TemplateSpecialization Local<S>
struct _ty665;  // TemplateTypeParm S
struct _ty666;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty667;  // LValueReference const PersistentBase<S> &
struct _ty668;  // TemplateSpecialization PersistentBase<S>
struct _ty669;  // TemplateTypeParm S
struct _ty670;  // FunctionProto bool (const Local<S> &) const
struct _ty671;  // LValueReference const Local<S> &
struct _ty672;  // TemplateSpecialization Local<S>
struct _ty673;  // TemplateTypeParm S
struct _ty674;  // FunctionProto bool (const Persistent<S> &) const
struct _ty675;  // LValueReference const Persistent<S> &
struct _ty676;  // TemplateSpecialization Persistent<S>
struct _ty677;  // TemplateTypeParm S
struct _ty678;  // FunctionProto Local<v8::Promise> (Local<S>)
struct _ty679;  // TemplateSpecialization Local<v8::Promise>
struct _ty680;  // TemplateSpecialization Local<S>
struct _ty681;  // TemplateTypeParm S
struct _ty682;  // FunctionProto Local<S> () const
struct _ty683;  // TemplateSpecialization Local<S>
struct _ty684;  // FunctionProto Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _ty685;  // TemplateSpecialization Local<v8::Promise>
struct _ty686;  // TemplateSpecialization Local<v8::Promise>
struct _ty687;  // FunctionProto Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
struct _ty688;  // TemplateSpecialization Local<v8::Promise>
struct _ty689;  // LValueReference const PersistentBase<v8::Promise> &
struct _ty690;  // TemplateSpecialization PersistentBase<v8::Promise>
struct _ty691;  // Record v8::PersistentBase<v8::Promise>
struct _ty692;  // FunctionProto Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
struct _ty693;  // TemplateSpecialization Local<v8::Promise>
struct _ty694;  // LValueReference const TracedGlobal<v8::Promise> &
struct _ty695;  // TemplateSpecialization TracedGlobal<v8::Promise>
struct _ty696;  // Record v8::TracedGlobal<v8::Promise>
struct _ty697;  // FunctionProto void (const v8::Local<v8::Promise> &) noexcept
struct _ty698;  // LValueReference const v8::Local<v8::Promise> &
struct _ty699;  // FunctionProto void (v8::Local<v8::Promise> &&)
struct _ty700;  // RValueReference v8::Local<v8::Promise> &&
struct _ty701;  // Record v8::Local<v8::Uint8Array>
struct _ty702;  // Record v8::Local<v8::Uint8ClampedArray>
struct _ty703;  // Record v8::Local<v8::Int8Array>
struct _ty704;  // Record v8::Local<v8::Uint16Array>
struct _ty705;  // Record v8::Local<v8::Int16Array>
struct _ty706;  // Record v8::Local<v8::Uint32Array>
struct _ty707;  // Record v8::Local<v8::Int32Array>
struct _ty708;  // Record v8::Local<v8::Float32Array>
struct _ty709;  // Record v8::Local<v8::Float64Array>
struct _ty710;  // Record v8::Local<v8::BigInt64Array>
struct _ty711;  // Record v8::Local<v8::BigUint64Array>
struct _ty712;  // Record v8::Local<v8::DataView>
struct _ty713;  // Record v8::Local<v8::External>
struct _ty714;  // Record v8::Local<v8::Data>
struct _ty715;  // Pointer v8::Local<v8::Data> *
struct _ty716;  // TemplateTypeParm S
struct _ty717;  // FunctionProto void (Local<S>)
struct _ty718;  // TemplateSpecialization Local<S>
struct _ty719;  // FunctionProto void (Local<v8::Data>)
struct _ty720;  // TemplateSpecialization Local<v8::Data>
struct _ty721;  // Pointer const v8::Local<v8::Data> *
struct _ty722;  // FunctionProto v8::Data *() const
struct _ty723;  // Pointer v8::Data *
struct _ty724;  // SubstTemplateTypeParm v8::Data
struct _ty725;  // TemplateTypeParm S
struct _ty726;  // FunctionProto bool (const Local<S> &) const
struct _ty727;  // LValueReference const Local<S> &
struct _ty728;  // TemplateSpecialization Local<S>
struct _ty729;  // TemplateTypeParm S
struct _ty730;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty731;  // LValueReference const PersistentBase<S> &
struct _ty732;  // TemplateSpecialization PersistentBase<S>
struct _ty733;  // TemplateTypeParm S
struct _ty734;  // FunctionProto bool (const Local<S> &) const
struct _ty735;  // LValueReference const Local<S> &
struct _ty736;  // TemplateSpecialization Local<S>
struct _ty737;  // TemplateTypeParm S
struct _ty738;  // FunctionProto bool (const Persistent<S> &) const
struct _ty739;  // LValueReference const Persistent<S> &
struct _ty740;  // TemplateSpecialization Persistent<S>
struct _ty741;  // TemplateTypeParm S
struct _ty742;  // FunctionProto Local<v8::Data> (Local<S>)
struct _ty743;  // TemplateSpecialization Local<v8::Data>
struct _ty744;  // TemplateSpecialization Local<S>
struct _ty745;  // TemplateTypeParm S
struct _ty746;  // FunctionProto Local<S> () const
struct _ty747;  // TemplateSpecialization Local<S>
struct _ty748;  // FunctionProto Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _ty749;  // TemplateSpecialization Local<v8::Data>
struct _ty750;  // TemplateSpecialization Local<v8::Data>
struct _ty751;  // FunctionProto Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
struct _ty752;  // TemplateSpecialization Local<v8::Data>
struct _ty753;  // LValueReference const PersistentBase<v8::Data> &
struct _ty754;  // TemplateSpecialization PersistentBase<v8::Data>
struct _ty755;  // Record v8::PersistentBase<v8::Data>
struct _ty756;  // FunctionProto Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
struct _ty757;  // TemplateSpecialization Local<v8::Data>
struct _ty758;  // LValueReference const TracedGlobal<v8::Data> &
struct _ty759;  // TemplateSpecialization TracedGlobal<v8::Data>
struct _ty760;  // Record v8::TracedGlobal<v8::Data>
struct _ty761;  // FunctionProto void (const v8::Local<v8::Data> &) noexcept
struct _ty762;  // LValueReference const v8::Local<v8::Data> &
struct _ty763;  // FunctionProto void (v8::Local<v8::Data> &&)
struct _ty764;  // RValueReference v8::Local<v8::Data> &&
struct _ty765;  // Record v8::Local<v8::AccessorSignature>
struct _ty766;  // Pointer v8::Local<v8::AccessorSignature> *
struct _ty767;  // TemplateTypeParm S
struct _ty768;  // FunctionProto void (Local<S>)
struct _ty769;  // TemplateSpecialization Local<S>
struct _ty770;  // FunctionProto void (Local<v8::AccessorSignature>)
struct _ty771;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty772;  // Pointer const v8::Local<v8::AccessorSignature> *
struct _ty773;  // FunctionProto v8::AccessorSignature *() const
struct _ty774;  // Pointer v8::AccessorSignature *
struct _ty775;  // SubstTemplateTypeParm v8::AccessorSignature
struct _ty776;  // TemplateTypeParm S
struct _ty777;  // FunctionProto bool (const Local<S> &) const
struct _ty778;  // LValueReference const Local<S> &
struct _ty779;  // TemplateSpecialization Local<S>
struct _ty780;  // TemplateTypeParm S
struct _ty781;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty782;  // LValueReference const PersistentBase<S> &
struct _ty783;  // TemplateSpecialization PersistentBase<S>
struct _ty784;  // TemplateTypeParm S
struct _ty785;  // FunctionProto bool (const Local<S> &) const
struct _ty786;  // LValueReference const Local<S> &
struct _ty787;  // TemplateSpecialization Local<S>
struct _ty788;  // TemplateTypeParm S
struct _ty789;  // FunctionProto bool (const Persistent<S> &) const
struct _ty790;  // LValueReference const Persistent<S> &
struct _ty791;  // TemplateSpecialization Persistent<S>
struct _ty792;  // TemplateTypeParm S
struct _ty793;  // FunctionProto Local<v8::AccessorSignature> (Local<S>)
struct _ty794;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty795;  // TemplateSpecialization Local<S>
struct _ty796;  // TemplateTypeParm S
struct _ty797;  // FunctionProto Local<S> () const
struct _ty798;  // TemplateSpecialization Local<S>
struct _ty799;  // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
struct _ty800;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty801;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty802;  // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
struct _ty803;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty804;  // LValueReference const PersistentBase<v8::AccessorSignature> &
struct _ty805;  // TemplateSpecialization PersistentBase<v8::AccessorSignature>
struct _ty806;  // Record v8::PersistentBase<v8::AccessorSignature>
struct _ty807;  // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
struct _ty808;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty809;  // LValueReference const TracedGlobal<v8::AccessorSignature> &
struct _ty810;  // TemplateSpecialization TracedGlobal<v8::AccessorSignature>
struct _ty811;  // Record v8::TracedGlobal<v8::AccessorSignature>
struct _ty812;  // FunctionProto void (const v8::Local<v8::AccessorSignature> &)
struct _ty813;  // LValueReference const v8::Local<v8::AccessorSignature> &
struct _ty814;  // FunctionProto void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _ty815;  // RValueReference v8::Local<v8::AccessorSignature> &&
struct _ty816;  // Record v8::Local<v8::Signature>
struct _ty817;  // Pointer v8::Local<v8::Signature> *
struct _ty818;  // TemplateTypeParm S
struct _ty819;  // FunctionProto void (Local<S>)
struct _ty820;  // TemplateSpecialization Local<S>
struct _ty821;  // FunctionProto void (Local<v8::Signature>)
struct _ty822;  // TemplateSpecialization Local<v8::Signature>
struct _ty823;  // Pointer const v8::Local<v8::Signature> *
struct _ty824;  // FunctionProto v8::Signature *() const
struct _ty825;  // Pointer v8::Signature *
struct _ty826;  // SubstTemplateTypeParm v8::Signature
struct _ty827;  // TemplateTypeParm S
struct _ty828;  // FunctionProto bool (const Local<S> &) const
struct _ty829;  // LValueReference const Local<S> &
struct _ty830;  // TemplateSpecialization Local<S>
struct _ty831;  // TemplateTypeParm S
struct _ty832;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty833;  // LValueReference const PersistentBase<S> &
struct _ty834;  // TemplateSpecialization PersistentBase<S>
struct _ty835;  // TemplateTypeParm S
struct _ty836;  // FunctionProto bool (const Local<S> &) const
struct _ty837;  // LValueReference const Local<S> &
struct _ty838;  // TemplateSpecialization Local<S>
struct _ty839;  // TemplateTypeParm S
struct _ty840;  // FunctionProto bool (const Persistent<S> &) const
struct _ty841;  // LValueReference const Persistent<S> &
struct _ty842;  // TemplateSpecialization Persistent<S>
struct _ty843;  // TemplateTypeParm S
struct _ty844;  // FunctionProto Local<v8::Signature> (Local<S>)
struct _ty845;  // TemplateSpecialization Local<v8::Signature>
struct _ty846;  // TemplateSpecialization Local<S>
struct _ty847;  // TemplateTypeParm S
struct _ty848;  // FunctionProto Local<S> () const
struct _ty849;  // TemplateSpecialization Local<S>
struct _ty850;  // FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
struct _ty851;  // TemplateSpecialization Local<v8::Signature>
struct _ty852;  // TemplateSpecialization Local<v8::Signature>
struct _ty853;  // FunctionProto Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
struct _ty854;  // TemplateSpecialization Local<v8::Signature>
struct _ty855;  // LValueReference const PersistentBase<v8::Signature> &
struct _ty856;  // TemplateSpecialization PersistentBase<v8::Signature>
struct _ty857;  // Record v8::PersistentBase<v8::Signature>
struct _ty858;  // FunctionProto Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
struct _ty859;  // TemplateSpecialization Local<v8::Signature>
struct _ty860;  // LValueReference const TracedGlobal<v8::Signature> &
struct _ty861;  // TemplateSpecialization TracedGlobal<v8::Signature>
struct _ty862;  // Record v8::TracedGlobal<v8::Signature>
struct _ty863;  // FunctionProto void (const v8::Local<v8::Signature> &)
struct _ty864;  // LValueReference const v8::Local<v8::Signature> &
struct _ty865;  // FunctionProto void (v8::Local<v8::Signature> &&) noexcept
struct _ty866;  // RValueReference v8::Local<v8::Signature> &&
struct _ty867;  // Record v8::Local<v8::ObjectTemplate>
struct _ty868;  // Record v8::Local<v8::Message>
struct _ty869;  // Record v8::Local<v8::ScriptOrModule>
struct _ty870;  // Record v8::Local<v8::Template>
struct _ty871;  // TemplateTypeParm T
struct _ty872;  // InjectedClassName MaybeLocal<T>
struct _ty873;  // Record v8::MaybeLocal<v8::Module>
struct _ty874;  // Record v8::MaybeLocal<v8::Value>
struct _ty875;  // Pointer v8::MaybeLocal<v8::Value> *
struct _ty876;  // TemplateTypeParm S
struct _ty877;  // FunctionProto void (Local<S>)
struct _ty878;  // TemplateSpecialization Local<S>
struct _ty879;  // Pointer const v8::MaybeLocal<v8::Value> *
struct _ty880;  // TemplateTypeParm S
struct _ty881;  // FunctionProto bool (Local<S> *) const
struct _ty882;  // Pointer Local<S> *
struct _ty883;  // TemplateSpecialization Local<S>
struct _ty884;  // FunctionProto Local<v8::Value> ()
struct _ty885;  // TemplateSpecialization Local<v8::Value>
struct _ty886;  // TemplateTypeParm S
struct _ty887;  // FunctionProto Local<S> (Local<S>) const
struct _ty888;  // TemplateSpecialization Local<S>
struct _ty889;  // TemplateSpecialization Local<S>
struct _ty890;  // FunctionProto void (const v8::MaybeLocal<v8::Value> &)
struct _ty891;  // LValueReference const v8::MaybeLocal<v8::Value> &
struct _ty892;  // FunctionProto void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _ty893;  // RValueReference v8::MaybeLocal<v8::Value> &&
struct _ty894;  // Record v8::MaybeLocal<v8::Script>
struct _ty895;  // Record v8::MaybeLocal<v8::UnboundScript>
struct _ty896;  // Record v8::MaybeLocal<v8::Function>
struct _ty897;  // Record v8::MaybeLocal<v8::String>
struct _ty898;  // Pointer v8::MaybeLocal<v8::String> *
struct _ty899;  // TemplateTypeParm S
struct _ty900;  // FunctionProto void (Local<S>)
struct _ty901;  // TemplateSpecialization Local<S>
struct _ty902;  // Pointer const v8::MaybeLocal<v8::String> *
struct _ty903;  // TemplateTypeParm S
struct _ty904;  // FunctionProto bool (Local<S> *) const
struct _ty905;  // Pointer Local<S> *
struct _ty906;  // TemplateSpecialization Local<S>
struct _ty907;  // FunctionProto Local<v8::String> ()
struct _ty908;  // TemplateSpecialization Local<v8::String>
struct _ty909;  // TemplateTypeParm S
struct _ty910;  // FunctionProto Local<S> (Local<S>) const
struct _ty911;  // TemplateSpecialization Local<S>
struct _ty912;  // TemplateSpecialization Local<S>
struct _ty913;  // Record v8::MaybeLocal<v8::Object>
struct _ty914;  // Pointer v8::MaybeLocal<v8::Object> *
struct _ty915;  // TemplateTypeParm S
struct _ty916;  // FunctionProto void (Local<S>)
struct _ty917;  // TemplateSpecialization Local<S>
struct _ty918;  // Pointer const v8::MaybeLocal<v8::Object> *
struct _ty919;  // TemplateTypeParm S
struct _ty920;  // FunctionProto bool (Local<S> *) const
struct _ty921;  // Pointer Local<S> *
struct _ty922;  // TemplateSpecialization Local<S>
struct _ty923;  // FunctionProto Local<v8::Object> ()
struct _ty924;  // TemplateSpecialization Local<v8::Object>
struct _ty925;  // TemplateTypeParm S
struct _ty926;  // FunctionProto Local<S> (Local<S>) const
struct _ty927;  // TemplateSpecialization Local<S>
struct _ty928;  // TemplateSpecialization Local<S>
struct _ty929;  // FunctionProto void (const v8::MaybeLocal<v8::Object> &)
struct _ty930;  // LValueReference const v8::MaybeLocal<v8::Object> &
struct _ty931;  // FunctionProto void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _ty932;  // RValueReference v8::MaybeLocal<v8::Object> &&
struct _ty933;  // Record v8::MaybeLocal<v8::WasmModuleObject>
struct _ty934;  // Record v8::MaybeLocal<v8::SharedArrayBuffer>
struct _ty935;  // Record v8::MaybeLocal<v8::BigInt>
struct _ty936;  // Record v8::MaybeLocal<v8::Number>
struct _ty937;  // Record v8::MaybeLocal<v8::Integer>
struct _ty938;  // Record v8::MaybeLocal<v8::Uint32>
struct _ty939;  // Record v8::MaybeLocal<v8::Int32>
struct _ty940;  // Record v8::MaybeLocal<v8::Array>
struct _ty941;  // Record v8::MaybeLocal<v8::Map>
struct _ty942;  // Record v8::MaybeLocal<v8::Set>
struct _ty943;  // Record v8::MaybeLocal<v8::Promise::Resolver>
struct _ty944;  // Record v8::MaybeLocal<v8::Promise>
struct _ty945;  // Record v8::MaybeLocal<v8::Proxy>
struct _ty946;  // Record v8::MaybeLocal<v8::RegExp>
struct _ty947;  // Record v8::MaybeLocal<v8::FunctionTemplate>
struct _ty948;  // Record v8::MaybeLocal<v8::ObjectTemplate>
struct _ty949;  // Pointer v8::MaybeLocal<v8::ObjectTemplate> *
struct _ty950;  // TemplateTypeParm S
struct _ty951;  // FunctionProto void (Local<S>)
struct _ty952;  // TemplateSpecialization Local<S>
struct _ty953;  // Pointer const v8::MaybeLocal<v8::ObjectTemplate> *
struct _ty954;  // TemplateTypeParm S
struct _ty955;  // FunctionProto bool (Local<S> *) const
struct _ty956;  // Pointer Local<S> *
struct _ty957;  // TemplateSpecialization Local<S>
struct _ty958;  // FunctionProto Local<v8::ObjectTemplate> ()
struct _ty959;  // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ty960;  // TemplateTypeParm S
struct _ty961;  // FunctionProto Local<S> (Local<S>) const
struct _ty962;  // TemplateSpecialization Local<S>
struct _ty963;  // TemplateSpecialization Local<S>
struct _ty964;  // FunctionProto void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _ty965;  // LValueReference const v8::MaybeLocal<v8::ObjectTemplate> &
struct _ty966;  // FunctionProto void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _ty967;  // RValueReference v8::MaybeLocal<v8::ObjectTemplate> &&
struct _ty968;  // Record v8::MaybeLocal<v8::Context>
struct _ty969;  // TemplateTypeParm T
struct _ty970;  // InjectedClassName Eternal<T>
struct _ty971;  // TemplateTypeParm T
struct _ty972;  // InjectedClassName NonCopyablePersistentTraits<T>
struct _ty973;  // Record v8::NonCopyablePersistentTraits<v8::Promise>
struct _ty974;  // Record v8::NonCopyablePersistentTraits<v8::Value>
struct _ty975;  // TemplateTypeParm T
struct _ty976;  // InjectedClassName PersistentBase<T>
struct _ty977;  // Record v8::PersistentBase<v8::Object>
struct _ty978;  // Pointer v8::PersistentBase<v8::Object> *
struct _ty979;  // TemplateTypeParm S
struct _ty980;  // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ty981;  // LValueReference const Local<S> &
struct _ty982;  // TemplateSpecialization Local<S>
struct _ty983;  // TemplateTypeParm S
struct _ty984;  // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ty985;  // LValueReference const PersistentBase<S> &
struct _ty986;  // TemplateSpecialization PersistentBase<S>
struct _ty987;  // Pointer const v8::PersistentBase<v8::Object> *
struct _ty988;  // FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _ty989;  // TemplateSpecialization Local<v8::Object>
struct _ty990;  // TemplateTypeParm S
struct _ty991;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty992;  // LValueReference const PersistentBase<S> &
struct _ty993;  // TemplateSpecialization PersistentBase<S>
struct _ty994;  // TemplateTypeParm S
struct _ty995;  // FunctionProto bool (const Local<S> &) const
struct _ty996;  // LValueReference const Local<S> &
struct _ty997;  // TemplateSpecialization Local<S>
struct _ty998;  // TemplateTypeParm S
struct _ty999;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty1000;  // LValueReference const PersistentBase<S> &
struct _ty1001;  // TemplateSpecialization PersistentBase<S>
struct _ty1002;  // TemplateTypeParm S
struct _ty1003;  // FunctionProto bool (const Local<S> &) const
struct _ty1004;  // LValueReference const Local<S> &
struct _ty1005;  // TemplateSpecialization Local<S>
struct _ty1006;  // TemplateTypeParm P
struct _ty1007;  // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ty1008;  // Pointer P *
struct _ty1009;  // DependentName typename WeakCallbackInfo<P>::Callback
struct _ty1010;  // Enum v8::WeakCallbackType
struct _ty1011;  // TemplateTypeParm P
struct _ty1012;  // FunctionProto P *()
struct _ty1013;  // Pointer P *
struct _ty1014;  // FunctionProto void (const char *)
struct _ty1015;  // Pointer const char *
struct _ty1016;  // Builtin char
struct _ty1017;  // FunctionProto void (uint16_t)
struct _ty1018;  // Typedef uint16_t
struct _ty1019;  // Builtin unsigned short
struct _ty1020;  // FunctionProto uint16_t () const
struct _ty1021;  // FunctionProto void (const v8::PersistentBase<v8::Object> &)
struct _ty1022;  // LValueReference const v8::PersistentBase<v8::Object> &
struct _ty1023;  // Pointer v8::PersistentBase<v8::Promise> *
struct _ty1024;  // TemplateTypeParm S
struct _ty1025;  // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ty1026;  // LValueReference const Local<S> &
struct _ty1027;  // TemplateSpecialization Local<S>
struct _ty1028;  // TemplateTypeParm S
struct _ty1029;  // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ty1030;  // LValueReference const PersistentBase<S> &
struct _ty1031;  // TemplateSpecialization PersistentBase<S>
struct _ty1032;  // Pointer const v8::PersistentBase<v8::Promise> *
struct _ty1033;  // FunctionProto Local<v8::Promise> (v8::Isolate *) const
struct _ty1034;  // TemplateSpecialization Local<v8::Promise>
struct _ty1035;  // TemplateTypeParm S
struct _ty1036;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty1037;  // LValueReference const PersistentBase<S> &
struct _ty1038;  // TemplateSpecialization PersistentBase<S>
struct _ty1039;  // TemplateTypeParm S
struct _ty1040;  // FunctionProto bool (const Local<S> &) const
struct _ty1041;  // LValueReference const Local<S> &
struct _ty1042;  // TemplateSpecialization Local<S>
struct _ty1043;  // TemplateTypeParm S
struct _ty1044;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty1045;  // LValueReference const PersistentBase<S> &
struct _ty1046;  // TemplateSpecialization PersistentBase<S>
struct _ty1047;  // TemplateTypeParm S
struct _ty1048;  // FunctionProto bool (const Local<S> &) const
struct _ty1049;  // LValueReference const Local<S> &
struct _ty1050;  // TemplateSpecialization Local<S>
struct _ty1051;  // TemplateTypeParm P
struct _ty1052;  // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ty1053;  // Pointer P *
struct _ty1054;  // DependentName typename WeakCallbackInfo<P>::Callback
struct _ty1055;  // TemplateTypeParm P
struct _ty1056;  // FunctionProto P *()
struct _ty1057;  // Pointer P *
struct _ty1058;  // FunctionProto void (const v8::PersistentBase<v8::Promise> &)
struct _ty1059;  // LValueReference const v8::PersistentBase<v8::Promise> &
struct _ty1060;  // TemplateTypeParm T
struct _ty1061;  // TemplateTypeParm M
struct _ty1062;  // InjectedClassName Persistent<T, M>
struct _ty1063;  // Record v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ty1064;  // Pointer v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ty1065;  // TemplateTypeParm S
struct _ty1066;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1067;  // TemplateSpecialization Local<S>
struct _ty1068;  // TemplateTypeParm S
struct _ty1069;  // TemplateTypeParm M2
struct _ty1070;  // FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _ty1071;  // LValueReference const Persistent<S, M2> &
struct _ty1072;  // TemplateSpecialization Persistent<S, M2>
struct _ty1073;  // FunctionProto void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ty1074;  // LValueReference const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ty1075;  // TemplateTypeParm S
struct _ty1076;  // TemplateTypeParm M2
struct _ty1077;  // FunctionProto void (const Persistent<S, M2> &)
struct _ty1078;  // LValueReference const Persistent<S, M2> &
struct _ty1079;  // TemplateSpecialization Persistent<S, M2>
struct _ty1080;  // FunctionProto void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ty1081;  // LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ty1082;  // TemplateSpecialization Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ty1083;  // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ty1084;  // LValueReference v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ty1085;  // TemplateTypeParm S
struct _ty1086;  // TemplateTypeParm M2
struct _ty1087;  // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _ty1088;  // LValueReference const Persistent<S, M2> &
struct _ty1089;  // TemplateSpecialization Persistent<S, M2>
struct _ty1090;  // FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _ty1091;  // LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _ty1092;  // TemplateSpecialization Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _ty1093;  // FunctionProto void ()
struct _ty1094;  // TemplateTypeParm S
struct _ty1095;  // FunctionProto Persistent<v8::Promise> &(const Persistent<S> &)
struct _ty1096;  // LValueReference Persistent<v8::Promise> &
struct _ty1097;  // TemplateSpecialization Persistent<v8::Promise>
struct _ty1098;  // Record v8::Persistent<v8::Promise, v8::NonCopyablePersistentTraits<v8::Promise> >
struct _ty1099;  // LValueReference const Persistent<S> &
struct _ty1100;  // TemplateSpecialization Persistent<S>
struct _ty1101;  // TemplateTypeParm S
struct _ty1102;  // FunctionProto Persistent<S> &() const
struct _ty1103;  // LValueReference Persistent<S> &
struct _ty1104;  // TemplateSpecialization Persistent<S>
struct _ty1105;  // Pointer const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _ty1106;  // Record v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >
struct _ty1107;  // TemplateTypeParm T
struct _ty1108;  // InjectedClassName Global<T>
struct _ty1109;  // TemplateTypeParm T
struct _ty1110;  // InjectedClassName TracedGlobal<T>
struct _ty1111;  // Record v8::TracedGlobal<v8::Object>
struct _ty1112;  // FunctionProto void ()
struct _ty1113;  // Pointer v8::TracedGlobal<v8::Object> *
struct _ty1114;  // FunctionProto void ()
struct _ty1115;  // TemplateTypeParm S
struct _ty1116;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1117;  // TemplateSpecialization Local<S>
struct _ty1118;  // FunctionProto void (v8::TracedGlobal<v8::Object> &&)
struct _ty1119;  // RValueReference v8::TracedGlobal<v8::Object> &&
struct _ty1120;  // TemplateTypeParm S
struct _ty1121;  // FunctionProto v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _ty1122;  // LValueReference v8::TracedGlobal<v8::Object> &
struct _ty1123;  // RValueReference TracedGlobal<S> &&
struct _ty1124;  // TemplateSpecialization TracedGlobal<S>
struct _ty1125;  // FunctionProto void (const v8::TracedGlobal<v8::Object> &)
struct _ty1126;  // LValueReference const v8::TracedGlobal<v8::Object> &
struct _ty1127;  // Pointer const v8::TracedGlobal<v8::Object> *
struct _ty1128;  // TemplateTypeParm S
struct _ty1129;  // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ty1130;  // LValueReference const Local<S> &
struct _ty1131;  // TemplateSpecialization Local<S>
struct _ty1132;  // FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _ty1133;  // TemplateSpecialization Local<v8::Object>
struct _ty1134;  // TemplateTypeParm S
struct _ty1135;  // FunctionProto TracedGlobal<S> &() const
struct _ty1136;  // LValueReference TracedGlobal<S> &
struct _ty1137;  // TemplateSpecialization TracedGlobal<S>
struct _ty1138;  // TemplateTypeParm S
struct _ty1139;  // FunctionProto bool (const TracedGlobal<S> &) const
struct _ty1140;  // LValueReference const TracedGlobal<S> &
struct _ty1141;  // TemplateSpecialization TracedGlobal<S>
struct _ty1142;  // TemplateTypeParm S
struct _ty1143;  // FunctionProto bool (const Local<S> &) const
struct _ty1144;  // LValueReference const Local<S> &
struct _ty1145;  // TemplateSpecialization Local<S>
struct _ty1146;  // TemplateTypeParm S
struct _ty1147;  // FunctionProto bool (const TracedGlobal<S> &) const
struct _ty1148;  // LValueReference const TracedGlobal<S> &
struct _ty1149;  // TemplateSpecialization TracedGlobal<S>
struct _ty1150;  // TemplateTypeParm S
struct _ty1151;  // FunctionProto bool (const Local<S> &) const
struct _ty1152;  // LValueReference const Local<S> &
struct _ty1153;  // TemplateSpecialization Local<S>
struct _ty1154;  // FunctionProto void (void *, WeakCallbackInfo<void>::Callback)
struct _ty1155;  // Pointer void *
struct _ty1156;  // Elaborated WeakCallbackInfo<void>::Callback
struct _ty1157;  // Paren void (const WeakCallbackInfo<void> &)
struct _ty1158;  // LValueReference const WeakCallbackInfo<void> &
struct _ty1159;  // TemplateSpecialization WeakCallbackInfo<void>
struct _ty1160;  // Record v8::WeakCallbackInfo<void>
struct _ty1161;  // FunctionProto void (const WeakCallbackInfo<void> &)
struct _ty1162;  // Typedef v8::WeakCallbackInfo<void>::Callback
struct _ty1163;  // Pointer void (*)(const WeakCallbackInfo<void> &)
struct _ty1164;  // TemplateTypeParm K
struct _ty1165;  // TemplateTypeParm V
struct _ty1166;  // TemplateTypeParm T
struct _ty1167;  // InjectedClassName PersistentValueMap<K, V, T>
struct _ty1168;  // TemplateTypeParm K
struct _ty1169;  // TemplateTypeParm V
struct _ty1170;  // TemplateTypeParm T
struct _ty1171;  // InjectedClassName PersistentValueMapBase<K, V, T>
struct _ty1172;  // TemplateTypeParm K
struct _ty1173;  // TemplateTypeParm V
struct _ty1174;  // TemplateTypeParm T
struct _ty1175;  // InjectedClassName GlobalValueMap<K, V, T>
struct _ty1176;  // TemplateTypeParm V
struct _ty1177;  // TemplateTypeParm T
struct _ty1178;  // InjectedClassName PersistentValueVector<V, T>
struct _ty1179;  // TemplateTypeParm T
struct _ty1180;  // TemplateTypeParm P
struct _ty1181;  // InjectedClassName WeakCallbackObject<T, P>
struct _ty1182;  // TemplateTypeParm T
struct _ty1183;  // InjectedClassName FunctionCallbackInfo<T>
struct _ty1184;  // Record v8::FunctionCallbackInfo<v8::Value>
struct _ty1185;  // TemplateTypeParm T
struct _ty1186;  // InjectedClassName PropertyCallbackInfo<T>
struct _ty1187;  // Record v8::PropertyCallbackInfo<v8::Value>
struct _ty1188;  // Record v8::PropertyCallbackInfo<void>
struct _ty1189;  // Record v8::PropertyCallbackInfo<v8::Integer>
struct _ty1190;  // Record v8::PropertyCallbackInfo<v8::Boolean>
struct _ty1191;  // Record v8::PropertyCallbackInfo<v8::Array>
struct _ty1192;  // Record v8::CallHandlerHelper
struct _ty1193;  // Record v8::EscapableHandleScope
struct _ty1194;  // TemplateTypeParm T
struct _ty1195;  // InjectedClassName ReturnValue<T>
struct _ty1196;  // Record v8::debug::ConsoleCallArguments
struct _ty1197;  // TemplateTypeParm T
struct _ty1198;  // Pointer Local<T> *
struct _ty1199;  // TemplateTypeParm S
struct _ty1200;  // FunctionProto void (Local<S>)
struct _ty1201;  // TemplateSpecialization Local<S>
struct _ty1202;  // Pointer const Local<T> *
struct _ty1203;  // FunctionProto T *() const
struct _ty1204;  // Pointer T *
struct _ty1205;  // TemplateTypeParm S
struct _ty1206;  // FunctionProto bool (const Local<S> &) const
struct _ty1207;  // LValueReference const Local<S> &
struct _ty1208;  // TemplateSpecialization Local<S>
struct _ty1209;  // TemplateTypeParm S
struct _ty1210;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty1211;  // LValueReference const PersistentBase<S> &
struct _ty1212;  // TemplateSpecialization PersistentBase<S>
struct _ty1213;  // TemplateTypeParm S
struct _ty1214;  // FunctionProto bool (const Local<S> &) const
struct _ty1215;  // LValueReference const Local<S> &
struct _ty1216;  // TemplateSpecialization Local<S>
struct _ty1217;  // TemplateTypeParm S
struct _ty1218;  // FunctionProto bool (const Persistent<S> &) const
struct _ty1219;  // LValueReference const Persistent<S> &
struct _ty1220;  // TemplateSpecialization Persistent<S>
struct _ty1221;  // TemplateTypeParm S
struct _ty1222;  // FunctionProto Local<T> (Local<S>)
struct _ty1223;  // TemplateSpecialization Local<T>
struct _ty1224;  // TemplateSpecialization Local<S>
struct _ty1225;  // TemplateTypeParm S
struct _ty1226;  // FunctionProto Local<S> () const
struct _ty1227;  // TemplateSpecialization Local<S>
struct _ty1228;  // FunctionProto Local<T> (v8::Isolate *, Local<T>)
struct _ty1229;  // TemplateSpecialization Local<T>
struct _ty1230;  // TemplateSpecialization Local<T>
struct _ty1231;  // FunctionProto Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _ty1232;  // TemplateSpecialization Local<T>
struct _ty1233;  // LValueReference const PersistentBase<T> &
struct _ty1234;  // TemplateSpecialization PersistentBase<T>
struct _ty1235;  // FunctionProto Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _ty1236;  // TemplateSpecialization Local<T>
struct _ty1237;  // LValueReference const TracedGlobal<T> &
struct _ty1238;  // TemplateSpecialization TracedGlobal<T>
struct _ty1239;  // Typedef v8::Handle
struct _ty1240;  // TemplateSpecialization Local<T>
struct _ty1241;  // TemplateTypeParm T
struct _ty1242;  // TemplateTypeParm T
struct _ty1243;  // Pointer MaybeLocal<T> *
struct _ty1244;  // TemplateTypeParm S
struct _ty1245;  // FunctionProto void (Local<S>)
struct _ty1246;  // TemplateSpecialization Local<S>
struct _ty1247;  // Pointer const MaybeLocal<T> *
struct _ty1248;  // TemplateTypeParm S
struct _ty1249;  // FunctionProto bool (Local<S> *) const
struct _ty1250;  // Pointer Local<S> *
struct _ty1251;  // TemplateSpecialization Local<S>
struct _ty1252;  // FunctionProto Local<T> ()
struct _ty1253;  // TemplateSpecialization Local<T>
struct _ty1254;  // TemplateTypeParm S
struct _ty1255;  // FunctionProto Local<S> (Local<S>) const
struct _ty1256;  // TemplateSpecialization Local<S>
struct _ty1257;  // TemplateSpecialization Local<S>
struct _ty1258;  // TemplateTypeParm T
struct _ty1259;  // Pointer Eternal<T> *
struct _ty1260;  // TemplateTypeParm S
struct _ty1261;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1262;  // TemplateSpecialization Local<S>
struct _ty1263;  // FunctionProto Local<T> (v8::Isolate *) const
struct _ty1264;  // TemplateSpecialization Local<T>
struct _ty1265;  // Pointer const Eternal<T> *
struct _ty1266;  // TemplateTypeParm S
struct _ty1267;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1268;  // TemplateSpecialization Local<S>
struct _ty1269;  // Builtin int
struct _ty1270;  // TemplateTypeParm T
struct _ty1271;  // InjectedClassName WeakCallbackInfo<T>
struct _ty1272;  // Typedef v8::WeakCallbackInfo::Callback
struct _ty1273;  // Paren void (const WeakCallbackInfo<T> &)
struct _ty1274;  // LValueReference const WeakCallbackInfo<T> &
struct _ty1275;  // TemplateSpecialization WeakCallbackInfo<T>
struct _ty1276;  // FunctionProto void (const WeakCallbackInfo<T> &)
struct _ty1277;  // Pointer void (*)(const WeakCallbackInfo<T> &)
struct _ty1278;  // FunctionProto void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
struct _ty1279;  // Pointer T *
struct _ty1280;  // Decayed void **
struct _ty1281;  // Pointer void **
struct _ty1282;  // Pointer v8::WeakCallbackInfo::Callback *
struct _ty1283;  // Pointer WeakCallbackInfo<T> *
struct _ty1284;  // FunctionProto v8::Isolate *() const
struct _ty1285;  // Pointer const WeakCallbackInfo<T> *
struct _ty1286;  // FunctionProto T *() const
struct _ty1287;  // FunctionProto void *(int) const
struct _ty1288;  // FunctionProto void (v8::WeakCallbackInfo::Callback) const
struct _ty1289;  // FunctionProto void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
struct _ty1290;  // Pointer void *
struct _ty1291;  // SubstTemplateTypeParm void
struct _ty1292;  // Pointer v8::WeakCallbackInfo<void>::Callback *
struct _ty1293;  // Pointer v8::WeakCallbackInfo<void> *
struct _ty1294;  // Pointer const v8::WeakCallbackInfo<void> *
struct _ty1295;  // FunctionProto void *() const
struct _ty1296;  // FunctionProto void (v8::WeakCallbackInfo<void>::Callback) const
struct _ty1297;  // TemplateTypeParm T
struct _ty1298;  // Pointer PersistentBase<T> *
struct _ty1299;  // TemplateTypeParm S
struct _ty1300;  // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ty1301;  // LValueReference const Local<S> &
struct _ty1302;  // TemplateSpecialization Local<S>
struct _ty1303;  // TemplateTypeParm S
struct _ty1304;  // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ty1305;  // LValueReference const PersistentBase<S> &
struct _ty1306;  // TemplateSpecialization PersistentBase<S>
struct _ty1307;  // Pointer const PersistentBase<T> *
struct _ty1308;  // FunctionProto Local<T> (v8::Isolate *) const
struct _ty1309;  // TemplateSpecialization Local<T>
struct _ty1310;  // TemplateTypeParm S
struct _ty1311;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty1312;  // LValueReference const PersistentBase<S> &
struct _ty1313;  // TemplateSpecialization PersistentBase<S>
struct _ty1314;  // TemplateTypeParm S
struct _ty1315;  // FunctionProto bool (const Local<S> &) const
struct _ty1316;  // LValueReference const Local<S> &
struct _ty1317;  // TemplateSpecialization Local<S>
struct _ty1318;  // TemplateTypeParm S
struct _ty1319;  // FunctionProto bool (const PersistentBase<S> &) const
struct _ty1320;  // LValueReference const PersistentBase<S> &
struct _ty1321;  // TemplateSpecialization PersistentBase<S>
struct _ty1322;  // TemplateTypeParm S
struct _ty1323;  // FunctionProto bool (const Local<S> &) const
struct _ty1324;  // LValueReference const Local<S> &
struct _ty1325;  // TemplateSpecialization Local<S>
struct _ty1326;  // TemplateTypeParm P
struct _ty1327;  // FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _ty1328;  // Pointer P *
struct _ty1329;  // DependentName typename WeakCallbackInfo<P>::Callback
struct _ty1330;  // TemplateTypeParm P
struct _ty1331;  // FunctionProto P *()
struct _ty1332;  // Pointer P *
struct _ty1333;  // FunctionProto void (const PersistentBase<T> &)
struct _ty1334;  // LValueReference const PersistentBase<T> &
struct _ty1335;  // TemplateTypeParm T
struct _ty1336;  // Typedef v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _ty1337;  // TemplateSpecialization Persistent<T, NonCopyablePersistentTraits<T> >
struct _ty1338;  // TemplateTypeParm S
struct _ty1339;  // TemplateTypeParm M
struct _ty1340;  // FunctionProto void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _ty1341;  // LValueReference const Persistent<S, M> &
struct _ty1342;  // TemplateSpecialization Persistent<S, M>
struct _ty1343;  // Pointer v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _ty1344;  // TemplateTypeParm O
struct _ty1345;  // TemplateTypeParm T
struct _ty1346;  // InjectedClassName CopyablePersistentTraits<T>
struct _ty1347;  // Typedef v8::CopyablePersistentTraits::CopyablePersistent
struct _ty1348;  // TemplateSpecialization Persistent<T, CopyablePersistentTraits<T> >
struct _ty1349;  // TemplateTypeParm S
struct _ty1350;  // TemplateTypeParm M
struct _ty1351;  // FunctionProto void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
struct _ty1352;  // LValueReference const Persistent<S, M> &
struct _ty1353;  // TemplateSpecialization Persistent<S, M>
struct _ty1354;  // Pointer v8::CopyablePersistentTraits::CopyablePersistent *
struct _ty1355;  // Record v8::CopyablePersistentTraits<v8::Promise>
struct _ty1356;  // TemplateTypeParm T
struct _ty1357;  // TemplateTypeParm M
struct _ty1358;  // Pointer Persistent<T, M> *
struct _ty1359;  // TemplateTypeParm S
struct _ty1360;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1361;  // TemplateSpecialization Local<S>
struct _ty1362;  // TemplateTypeParm S
struct _ty1363;  // TemplateTypeParm M2
struct _ty1364;  // FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _ty1365;  // LValueReference const Persistent<S, M2> &
struct _ty1366;  // TemplateSpecialization Persistent<S, M2>
struct _ty1367;  // FunctionProto void (const Persistent<T, M> &)
struct _ty1368;  // LValueReference const Persistent<T, M> &
struct _ty1369;  // TemplateTypeParm S
struct _ty1370;  // TemplateTypeParm M2
struct _ty1371;  // FunctionProto void (const Persistent<S, M2> &)
struct _ty1372;  // LValueReference const Persistent<S, M2> &
struct _ty1373;  // TemplateSpecialization Persistent<S, M2>
struct _ty1374;  // FunctionProto Persistent<T, M> &(const Persistent<T, M> &)
struct _ty1375;  // LValueReference Persistent<T, M> &
struct _ty1376;  // TemplateTypeParm S
struct _ty1377;  // TemplateTypeParm M2
struct _ty1378;  // FunctionProto Persistent<T, M> &(const Persistent<S, M2> &)
struct _ty1379;  // LValueReference const Persistent<S, M2> &
struct _ty1380;  // TemplateSpecialization Persistent<S, M2>
struct _ty1381;  // TemplateTypeParm S
struct _ty1382;  // FunctionProto Persistent<T> &(const Persistent<S> &)
struct _ty1383;  // LValueReference Persistent<T> &
struct _ty1384;  // TemplateSpecialization Persistent<T>
struct _ty1385;  // LValueReference const Persistent<S> &
struct _ty1386;  // TemplateSpecialization Persistent<S>
struct _ty1387;  // TemplateTypeParm S
struct _ty1388;  // FunctionProto Persistent<S> &() const
struct _ty1389;  // LValueReference Persistent<S> &
struct _ty1390;  // TemplateSpecialization Persistent<S>
struct _ty1391;  // Pointer const Persistent<T, M> *
struct _ty1392;  // TemplateTypeParm T
struct _ty1393;  // Pointer Global<T> *
struct _ty1394;  // TemplateTypeParm S
struct _ty1395;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1396;  // TemplateSpecialization Local<S>
struct _ty1397;  // TemplateTypeParm S
struct _ty1398;  // FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _ty1399;  // LValueReference const PersistentBase<S> &
struct _ty1400;  // TemplateSpecialization PersistentBase<S>
struct _ty1401;  // FunctionProto void (Global<T> &&)
struct _ty1402;  // RValueReference Global<T> &&
struct _ty1403;  // TemplateTypeParm S
struct _ty1404;  // FunctionProto Global<T> &(Global<S> &&)
struct _ty1405;  // LValueReference Global<T> &
struct _ty1406;  // RValueReference Global<S> &&
struct _ty1407;  // TemplateSpecialization Global<S>
struct _ty1408;  // FunctionProto Global<T> ()
struct _ty1409;  // Typedef v8::Global::MoveOnlyTypeForCPP03
struct _ty1410;  // FunctionProto void (const Global<T> &)
struct _ty1411;  // LValueReference const Global<T> &
struct _ty1412;  // Typedef v8::UniquePersistent
struct _ty1413;  // TemplateSpecialization Global<T>
struct _ty1414;  // TemplateTypeParm T
struct _ty1415;  // TemplateTypeParm T
struct _ty1416;  // Pointer TracedGlobal<T> *
struct _ty1417;  // TemplateTypeParm S
struct _ty1418;  // FunctionProto void (v8::Isolate *, Local<S>)
struct _ty1419;  // TemplateSpecialization Local<S>
struct _ty1420;  // FunctionProto void (TracedGlobal<T> &&)
struct _ty1421;  // RValueReference TracedGlobal<T> &&
struct _ty1422;  // TemplateTypeParm S
struct _ty1423;  // FunctionProto TracedGlobal<T> &(TracedGlobal<S> &&)
struct _ty1424;  // LValueReference TracedGlobal<T> &
struct _ty1425;  // RValueReference TracedGlobal<S> &&
struct _ty1426;  // TemplateSpecialization TracedGlobal<S>
struct _ty1427;  // FunctionProto void (const TracedGlobal<T> &)
struct _ty1428;  // LValueReference const TracedGlobal<T> &
struct _ty1429;  // Pointer const TracedGlobal<T> *
struct _ty1430;  // TemplateTypeParm S
struct _ty1431;  // FunctionProto void (v8::Isolate *, const Local<S> &)
struct _ty1432;  // LValueReference const Local<S> &
struct _ty1433;  // TemplateSpecialization Local<S>
struct _ty1434;  // FunctionProto Local<T> (v8::Isolate *) const
struct _ty1435;  // TemplateSpecialization Local<T>
struct _ty1436;  // TemplateTypeParm S
struct _ty1437;  // FunctionProto TracedGlobal<S> &() const
struct _ty1438;  // LValueReference TracedGlobal<S> &
struct _ty1439;  // TemplateSpecialization TracedGlobal<S>
struct _ty1440;  // TemplateTypeParm S
struct _ty1441;  // FunctionProto bool (const TracedGlobal<S> &) const
struct _ty1442;  // LValueReference const TracedGlobal<S> &
struct _ty1443;  // TemplateSpecialization TracedGlobal<S>
struct _ty1444;  // TemplateTypeParm S
struct _ty1445;  // FunctionProto bool (const Local<S> &) const
struct _ty1446;  // LValueReference const Local<S> &
struct _ty1447;  // TemplateSpecialization Local<S>
struct _ty1448;  // TemplateTypeParm S
struct _ty1449;  // FunctionProto bool (const TracedGlobal<S> &) const
struct _ty1450;  // LValueReference const TracedGlobal<S> &
struct _ty1451;  // TemplateSpecialization TracedGlobal<S>
struct _ty1452;  // TemplateTypeParm S
struct _ty1453;  // FunctionProto bool (const Local<S> &) const
struct _ty1454;  // LValueReference const Local<S> &
struct _ty1455;  // TemplateSpecialization Local<S>
struct _ty1456;  // Record v8::HandleScope
struct _ty1457;  // FunctionProto void (v8::Isolate *)
struct _ty1458;  // Pointer v8::HandleScope *
struct _ty1459;  // FunctionProto void ()
struct _ty1460;  // FunctionProto int (v8::Isolate *)
struct _ty1461;  // Pointer const v8::HandleScope *
struct _ty1462;  // FunctionProto void (const v8::HandleScope &)
struct _ty1463;  // LValueReference const v8::HandleScope &
struct _ty1464;  // FunctionProto void ()
struct _ty1465;  // FunctionProto internal::Address *(internal::Isolate *, internal::Address)
struct _ty1466;  // Pointer internal::Address *
struct _ty1467;  // Elaborated internal::Address
struct _ty1468;  // Typedef v8::internal::Address
struct _ty1469;  // Typedef uintptr_t
struct _ty1470;  // Builtin unsigned long long
struct _ty1471;  // Pointer internal::Isolate *
struct _ty1472;  // Elaborated internal::Isolate
struct _ty1473;  // Record v8::internal::Isolate
struct _ty1474;  // Pointer v8::EscapableHandleScope *
struct _ty1475;  // FunctionProto void ()
struct _ty1476;  // TemplateTypeParm T
struct _ty1477;  // FunctionProto Local<T> (Local<T>)
struct _ty1478;  // TemplateSpecialization Local<T>
struct _ty1479;  // TemplateSpecialization Local<T>
struct _ty1480;  // TemplateTypeParm T
struct _ty1481;  // FunctionProto MaybeLocal<T> (MaybeLocal<T>)
struct _ty1482;  // TemplateSpecialization MaybeLocal<T>
struct _ty1483;  // TemplateSpecialization MaybeLocal<T>
struct _ty1484;  // FunctionProto void (const v8::EscapableHandleScope &)
struct _ty1485;  // LValueReference const v8::EscapableHandleScope &
struct _ty1486;  // Record v8::SealHandleScope
struct _ty1487;  // Pointer v8::SealHandleScope *
struct _ty1488;  // FunctionProto void ()
struct _ty1489;  // FunctionProto void (const v8::SealHandleScope &)
struct _ty1490;  // LValueReference const v8::SealHandleScope &
struct _ty1491;  // Record v8::ScriptOrModule
struct _ty1492;  // FunctionProto Local<v8::Value> ()
struct _ty1493;  // TemplateSpecialization Local<v8::Value>
struct _ty1494;  // Pointer v8::ScriptOrModule *
struct _ty1495;  // FunctionProto Local<v8::PrimitiveArray> ()
struct _ty1496;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty1497;  // FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _ty1498;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty1499;  // FunctionProto int () const
struct _ty1500;  // Pointer const v8::PrimitiveArray *
struct _ty1501;  // FunctionProto void (v8::Isolate *, int, Local<v8::Primitive>)
struct _ty1502;  // TemplateSpecialization Local<v8::Primitive>
struct _ty1503;  // Pointer v8::PrimitiveArray *
struct _ty1504;  // FunctionProto Local<v8::Primitive> (v8::Isolate *, int)
struct _ty1505;  // TemplateSpecialization Local<v8::Primitive>
struct _ty1506;  // Record v8::ScriptOriginOptions
struct _ty1507;  // FunctionProto void (bool, bool, bool, bool)
struct _ty1508;  // Pointer v8::ScriptOriginOptions *
struct _ty1509;  // FunctionProto void (int)
struct _ty1510;  // Pointer const v8::ScriptOriginOptions *
struct _ty1511;  // FunctionProto void (const v8::ScriptOriginOptions &) noexcept
struct _ty1512;  // LValueReference const v8::ScriptOriginOptions &
struct _ty1513;  // FunctionProto void (v8::ScriptOriginOptions &&) noexcept
struct _ty1514;  // RValueReference v8::ScriptOriginOptions &&
struct _ty1515;  // FunctionProto v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
struct _ty1516;  // LValueReference v8::ScriptOriginOptions &
struct _ty1517;  // FunctionProto v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _ty1518;  // Record v8::ScriptOrigin
struct _ty1519;  // FunctionProto void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _ty1520;  // TemplateSpecialization Local<v8::Value>
struct _ty1521;  // TemplateSpecialization Local<v8::Integer>
struct _ty1522;  // TemplateSpecialization Local<v8::Integer>
struct _ty1523;  // TemplateSpecialization Local<v8::Boolean>
struct _ty1524;  // TemplateSpecialization Local<v8::Integer>
struct _ty1525;  // TemplateSpecialization Local<v8::Value>
struct _ty1526;  // TemplateSpecialization Local<v8::Boolean>
struct _ty1527;  // TemplateSpecialization Local<v8::Boolean>
struct _ty1528;  // TemplateSpecialization Local<v8::Boolean>
struct _ty1529;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty1530;  // Pointer v8::ScriptOrigin *
struct _ty1531;  // FunctionProto Local<v8::Value> () const
struct _ty1532;  // TemplateSpecialization Local<v8::Value>
struct _ty1533;  // Pointer const v8::ScriptOrigin *
struct _ty1534;  // FunctionProto Local<v8::Integer> () const
struct _ty1535;  // TemplateSpecialization Local<v8::Integer>
struct _ty1536;  // FunctionProto Local<v8::Integer> () const
struct _ty1537;  // TemplateSpecialization Local<v8::Integer>
struct _ty1538;  // FunctionProto Local<v8::Integer> () const
struct _ty1539;  // TemplateSpecialization Local<v8::Integer>
struct _ty1540;  // FunctionProto Local<v8::Value> () const
struct _ty1541;  // TemplateSpecialization Local<v8::Value>
struct _ty1542;  // FunctionProto Local<v8::PrimitiveArray> () const
struct _ty1543;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty1544;  // FunctionProto v8::ScriptOriginOptions () const
struct _ty1545;  // FunctionProto void (const v8::ScriptOrigin &)
struct _ty1546;  // LValueReference const v8::ScriptOrigin &
struct _ty1547;  // FunctionProto v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _ty1548;  // LValueReference v8::ScriptOrigin &
struct _ty1549;  // RValueReference v8::ScriptOrigin &&
struct _ty1550;  // FunctionProto void (v8::ScriptOrigin &&)
struct _ty1551;  // FunctionProto Local<v8::Script> ()
struct _ty1552;  // TemplateSpecialization Local<v8::Script>
struct _ty1553;  // Pointer v8::UnboundScript *
struct _ty1554;  // FunctionProto int ()
struct _ty1555;  // FunctionProto Local<v8::Value> ()
struct _ty1556;  // TemplateSpecialization Local<v8::Value>
struct _ty1557;  // FunctionProto Local<v8::Value> ()
struct _ty1558;  // TemplateSpecialization Local<v8::Value>
struct _ty1559;  // FunctionProto Local<v8::Value> ()
struct _ty1560;  // TemplateSpecialization Local<v8::Value>
struct _ty1561;  // FunctionProto int (int)
struct _ty1562;  // Record v8::UnboundModuleScript
struct _ty1563;  // Record v8::Location
struct _ty1564;  // Pointer v8::Location *
struct _ty1565;  // FunctionProto void (int, int)
struct _ty1566;  // Record v8::Module
struct _ty1567;  // Enum v8::Module::Status
struct _ty1568;  // FunctionProto v8::Module::Status () const
struct _ty1569;  // Pointer const v8::Module *
struct _ty1570;  // FunctionProto Local<v8::Value> () const
struct _ty1571;  // TemplateSpecialization Local<v8::Value>
struct _ty1572;  // FunctionProto Local<v8::String> (int) const
struct _ty1573;  // TemplateSpecialization Local<v8::String>
struct _ty1574;  // FunctionProto v8::Location (int) const
struct _ty1575;  // Typedef v8::Module::ResolveCallback
struct _ty1576;  // Paren MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ty1577;  // TemplateSpecialization MaybeLocal<v8::Module>
struct _ty1578;  // TemplateSpecialization Local<v8::Context>
struct _ty1579;  // TemplateSpecialization Local<v8::String>
struct _ty1580;  // TemplateSpecialization Local<v8::Module>
struct _ty1581;  // FunctionProto MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ty1582;  // Pointer MaybeLocal<v8::Module> (*)(Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _ty1583;  // FunctionProto Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
struct _ty1584;  // TemplateSpecialization Maybe<bool>
struct _ty1585;  // TemplateSpecialization Local<v8::Context>
struct _ty1586;  // Pointer v8::Module *
struct _ty1587;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ty1588;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty1589;  // TemplateSpecialization Local<v8::Context>
struct _ty1590;  // FunctionProto Local<v8::Value> ()
struct _ty1591;  // TemplateSpecialization Local<v8::Value>
struct _ty1592;  // FunctionProto Local<v8::UnboundModuleScript> ()
struct _ty1593;  // TemplateSpecialization Local<v8::UnboundModuleScript>
struct _ty1594;  // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _ty1595;  // TemplateSpecialization MaybeLocal<v8::Script>
struct _ty1596;  // TemplateSpecialization Local<v8::Context>
struct _ty1597;  // TemplateSpecialization Local<v8::String>
struct _ty1598;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ty1599;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty1600;  // TemplateSpecialization Local<v8::Context>
struct _ty1601;  // Pointer v8::Script *
struct _ty1602;  // FunctionProto Local<v8::UnboundScript> ()
struct _ty1603;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty1604;  // Record v8::ScriptCompiler
struct _ty1605;  // Record v8::ScriptCompiler::CachedData
struct _ty1606;  // Enum v8::ScriptCompiler::CachedData::BufferPolicy
struct _ty1607;  // Pointer v8::ScriptCompiler::CachedData *
struct _ty1608;  // FunctionProto void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
struct _ty1609;  // Pointer const uint8_t *
struct _ty1610;  // Typedef uint8_t
struct _ty1611;  // Builtin unsigned char
struct _ty1612;  // FunctionProto void (const v8::ScriptCompiler::CachedData &)
struct _ty1613;  // LValueReference const v8::ScriptCompiler::CachedData &
struct _ty1614;  // FunctionProto v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
struct _ty1615;  // LValueReference v8::ScriptCompiler::CachedData &
struct _ty1616;  // Record v8::ScriptCompiler::Source
struct _ty1617;  // FunctionProto void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _ty1618;  // TemplateSpecialization Local<v8::String>
struct _ty1619;  // Pointer v8::ScriptCompiler::Source *
struct _ty1620;  // FunctionProto void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
struct _ty1621;  // TemplateSpecialization Local<v8::String>
struct _ty1622;  // FunctionProto const v8::ScriptCompiler::CachedData *() const
struct _ty1623;  // Pointer const v8::ScriptCompiler::CachedData *
struct _ty1624;  // Pointer const v8::ScriptCompiler::Source *
struct _ty1625;  // FunctionProto const v8::ScriptOriginOptions &() const
struct _ty1626;  // FunctionProto void (const v8::ScriptCompiler::Source &)
struct _ty1627;  // LValueReference const v8::ScriptCompiler::Source &
struct _ty1628;  // FunctionProto v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
struct _ty1629;  // LValueReference v8::ScriptCompiler::Source &
struct _ty1630;  // Record v8::ScriptCompiler::ExternalSourceStream
struct _ty1631;  // FunctionProto void ()
struct _ty1632;  // Pointer v8::ScriptCompiler::ExternalSourceStream *
struct _ty1633;  // FunctionProto size_t (const uint8_t **)
struct _ty1634;  // Typedef size_t
struct _ty1635;  // Pointer const uint8_t **
struct _ty1636;  // FunctionProto bool ()
struct _ty1637;  // FunctionProto v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _ty1638;  // LValueReference v8::ScriptCompiler::ExternalSourceStream &
struct _ty1639;  // LValueReference const v8::ScriptCompiler::ExternalSourceStream &
struct _ty1640;  // Record v8::ScriptCompiler::StreamedSource
struct _ty1641;  // Enum v8::ScriptCompiler::StreamedSource::Encoding
struct _ty1642;  // FunctionProto void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ty1643;  // Pointer v8::ScriptCompiler::StreamedSource *
struct _ty1644;  // FunctionProto void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
struct _ty1645;  // Elaborated std::unique_ptr<ExternalSourceStream>
struct _ty1646;  // TemplateSpecialization unique_ptr<v8::ScriptCompiler::ExternalSourceStream>
struct _ty1647;  // Record std::unique_ptr<v8::ScriptCompiler::ExternalSourceStream, std::default_delete<v8::ScriptCompiler::ExternalSourceStream> >
struct _ty1648;  // FunctionProto void ()
struct _ty1649;  // FunctionProto internal::ScriptStreamingData *() const
struct _ty1650;  // Pointer internal::ScriptStreamingData *
struct _ty1651;  // Elaborated internal::ScriptStreamingData
struct _ty1652;  // Record v8::internal::ScriptStreamingData
struct _ty1653;  // Pointer const v8::ScriptCompiler::StreamedSource *
struct _ty1654;  // FunctionProto void (const v8::ScriptCompiler::StreamedSource &)
struct _ty1655;  // LValueReference const v8::ScriptCompiler::StreamedSource &
struct _ty1656;  // FunctionProto v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
struct _ty1657;  // LValueReference v8::ScriptCompiler::StreamedSource &
struct _ty1658;  // Record v8::ScriptCompiler::ScriptStreamingTask
struct _ty1659;  // Pointer v8::ScriptCompiler::ScriptStreamingTask *
struct _ty1660;  // Enum v8::ScriptCompiler::CompileOptions
struct _ty1661;  // Enum v8::ScriptCompiler::NoCacheReason
struct _ty1662;  // FunctionProto MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ty1663;  // TemplateSpecialization MaybeLocal<v8::UnboundScript>
struct _ty1664;  // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ty1665;  // TemplateSpecialization MaybeLocal<v8::Script>
struct _ty1666;  // TemplateSpecialization Local<v8::Context>
struct _ty1667;  // FunctionProto v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _ty1668;  // FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
struct _ty1669;  // TemplateSpecialization MaybeLocal<v8::Script>
struct _ty1670;  // TemplateSpecialization Local<v8::Context>
struct _ty1671;  // TemplateSpecialization Local<v8::String>
struct _ty1672;  // FunctionProto uint32_t ()
struct _ty1673;  // Typedef uint32_t
struct _ty1674;  // Builtin unsigned int
struct _ty1675;  // FunctionProto MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ty1676;  // TemplateSpecialization MaybeLocal<v8::Module>
struct _ty1677;  // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _ty1678;  // TemplateSpecialization MaybeLocal<v8::Function>
struct _ty1679;  // TemplateSpecialization Local<v8::Context>
struct _ty1680;  // Decayed Local<v8::String> *
struct _ty1681;  // TemplateSpecialization Local<v8::String>
struct _ty1682;  // Pointer Local<v8::String> *
struct _ty1683;  // Decayed Local<v8::Object> *
struct _ty1684;  // TemplateSpecialization Local<v8::Object>
struct _ty1685;  // Pointer Local<v8::Object> *
struct _ty1686;  // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
struct _ty1687;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty1688;  // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
struct _ty1689;  // TemplateSpecialization Local<v8::UnboundModuleScript>
struct _ty1690;  // FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _ty1691;  // TemplateSpecialization Local<v8::Function>
struct _ty1692;  // Record v8::Message
struct _ty1693;  // FunctionProto Local<v8::String> () const
struct _ty1694;  // TemplateSpecialization Local<v8::String>
struct _ty1695;  // Pointer const v8::Message *
struct _ty1696;  // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ty1697;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1698;  // TemplateSpecialization Local<v8::Context>
struct _ty1699;  // FunctionProto v8::ScriptOrigin () const
struct _ty1700;  // FunctionProto Local<v8::Value> () const
struct _ty1701;  // TemplateSpecialization Local<v8::Value>
struct _ty1702;  // FunctionProto Local<v8::StackTrace> () const
struct _ty1703;  // TemplateSpecialization Local<v8::StackTrace>
struct _ty1704;  // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ty1705;  // TemplateSpecialization Maybe<int>
struct _ty1706;  // TemplateSpecialization Local<v8::Context>
struct _ty1707;  // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ty1708;  // TemplateSpecialization Maybe<int>
struct _ty1709;  // TemplateSpecialization Local<v8::Context>
struct _ty1710;  // FunctionProto Maybe<int> (Local<v8::Context>) const
struct _ty1711;  // TemplateSpecialization Maybe<int>
struct _ty1712;  // TemplateSpecialization Local<v8::Context>
struct _ty1713;  // FunctionProto void (v8::Isolate *, FILE *)
struct _ty1714;  // Pointer FILE *
struct _ty1715;  // Typedef FILE
struct _ty1716;  // Elaborated struct _iobuf
struct _ty1717;  // Record _iobuf
struct _ty1718;  // Enum v8::StackTrace::StackTraceOptions
struct _ty1719;  // FunctionProto Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _ty1720;  // TemplateSpecialization Local<v8::StackFrame>
struct _ty1721;  // Pointer const v8::StackTrace *
struct _ty1722;  // FunctionProto Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
struct _ty1723;  // TemplateSpecialization Local<v8::StackTrace>
struct _ty1724;  // Pointer const v8::StackFrame *
struct _ty1725;  // FunctionProto Local<v8::String> () const
struct _ty1726;  // TemplateSpecialization Local<v8::String>
struct _ty1727;  // FunctionProto Local<v8::String> () const
struct _ty1728;  // TemplateSpecialization Local<v8::String>
struct _ty1729;  // FunctionProto Local<v8::String> () const
struct _ty1730;  // TemplateSpecialization Local<v8::String>
struct _ty1731;  // Enum v8::StateTag
struct _ty1732;  // Record v8::RegisterState
struct _ty1733;  // Pointer v8::RegisterState *
struct _ty1734;  // Record v8::SampleInfo
struct _ty1735;  // Record v8::MemoryRange
struct _ty1736;  // Pointer const void *
struct _ty1737;  // Record v8::JSEntryStub
struct _ty1738;  // Record v8::UnwindState
struct _ty1739;  // Record v8::JSON
struct _ty1740;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
struct _ty1741;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty1742;  // TemplateSpecialization Local<v8::Context>
struct _ty1743;  // TemplateSpecialization Local<v8::String>
struct _ty1744;  // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _ty1745;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1746;  // TemplateSpecialization Local<v8::Context>
struct _ty1747;  // TemplateSpecialization Local<v8::Value>
struct _ty1748;  // TemplateSpecialization Local<v8::String>
struct _ty1749;  // Record v8::ValueSerializer
struct _ty1750;  // Record v8::ValueSerializer::Delegate
struct _ty1751;  // FunctionProto void ()
struct _ty1752;  // Pointer v8::ValueSerializer::Delegate *
struct _ty1753;  // FunctionProto void (Local<v8::String>)
struct _ty1754;  // TemplateSpecialization Local<v8::String>
struct _ty1755;  // FunctionProto Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _ty1756;  // TemplateSpecialization Maybe<bool>
struct _ty1757;  // TemplateSpecialization Local<v8::Object>
struct _ty1758;  // FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
struct _ty1759;  // TemplateSpecialization Maybe<uint32_t>
struct _ty1760;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty1761;  // FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
struct _ty1762;  // TemplateSpecialization Maybe<uint32_t>
struct _ty1763;  // TemplateSpecialization Local<v8::WasmModuleObject>
struct _ty1764;  // FunctionProto void *(void *, size_t, size_t *)
struct _ty1765;  // Pointer size_t *
struct _ty1766;  // FunctionProto void (void *)
struct _ty1767;  // FunctionProto v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
struct _ty1768;  // LValueReference v8::ValueSerializer::Delegate &
struct _ty1769;  // LValueReference const v8::ValueSerializer::Delegate &
struct _ty1770;  // Pointer v8::ValueSerializer *
struct _ty1771;  // FunctionProto void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _ty1772;  // FunctionProto void ()
struct _ty1773;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty1774;  // TemplateSpecialization Maybe<bool>
struct _ty1775;  // TemplateSpecialization Local<v8::Context>
struct _ty1776;  // TemplateSpecialization Local<v8::Value>
struct _ty1777;  // FunctionProto std::pair<uint8_t *, size_t> ()
struct _ty1778;  // Elaborated std::pair<uint8_t *, size_t>
struct _ty1779;  // TemplateSpecialization pair<uint8_t *, size_t>
struct _ty1780;  // Record std::pair<unsigned char *, unsigned long long>
struct _ty1781;  // FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _ty1782;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty1783;  // FunctionProto void (bool)
struct _ty1784;  // FunctionProto void (uint32_t)
struct _ty1785;  // FunctionProto void (uint64_t)
struct _ty1786;  // Typedef uint64_t
struct _ty1787;  // FunctionProto void (double)
struct _ty1788;  // Builtin double
struct _ty1789;  // FunctionProto void (const void *, size_t)
struct _ty1790;  // FunctionProto void (const v8::ValueSerializer &)
struct _ty1791;  // LValueReference const v8::ValueSerializer &
struct _ty1792;  // Record v8::ValueDeserializer
struct _ty1793;  // Record v8::ValueDeserializer::Delegate
struct _ty1794;  // FunctionProto void ()
struct _ty1795;  // Pointer v8::ValueDeserializer::Delegate *
struct _ty1796;  // FunctionProto MaybeLocal<v8::Object> (v8::Isolate *)
struct _ty1797;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty1798;  // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
struct _ty1799;  // TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _ty1800;  // FunctionProto MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
struct _ty1801;  // TemplateSpecialization MaybeLocal<v8::SharedArrayBuffer>
struct _ty1802;  // FunctionProto v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
struct _ty1803;  // LValueReference v8::ValueDeserializer::Delegate &
struct _ty1804;  // LValueReference const v8::ValueDeserializer::Delegate &
struct _ty1805;  // FunctionProto void (v8::Isolate *, const uint8_t *, size_t)
struct _ty1806;  // Pointer v8::ValueDeserializer *
struct _ty1807;  // FunctionProto void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
struct _ty1808;  // FunctionProto void ()
struct _ty1809;  // FunctionProto Maybe<bool> (Local<v8::Context>)
struct _ty1810;  // TemplateSpecialization Maybe<bool>
struct _ty1811;  // TemplateSpecialization Local<v8::Context>
struct _ty1812;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _ty1813;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty1814;  // TemplateSpecialization Local<v8::Context>
struct _ty1815;  // FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _ty1816;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty1817;  // FunctionProto void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _ty1818;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty1819;  // FunctionProto uint32_t () const
struct _ty1820;  // Pointer const v8::ValueDeserializer *
struct _ty1821;  // FunctionProto bool (uint32_t *)
struct _ty1822;  // Pointer uint32_t *
struct _ty1823;  // FunctionProto bool (uint64_t *)
struct _ty1824;  // Pointer uint64_t *
struct _ty1825;  // FunctionProto bool (double *)
struct _ty1826;  // Pointer double *
struct _ty1827;  // FunctionProto bool (size_t, const void **)
struct _ty1828;  // Pointer const void **
struct _ty1829;  // FunctionProto void (const v8::ValueDeserializer &)
struct _ty1830;  // LValueReference const v8::ValueDeserializer &
struct _ty1831;  // Pointer const v8::Value *
struct _ty1832;  // FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _ty1833;  // TemplateSpecialization MaybeLocal<v8::BigInt>
struct _ty1834;  // TemplateSpecialization Local<v8::Context>
struct _ty1835;  // FunctionProto MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _ty1836;  // TemplateSpecialization MaybeLocal<v8::Number>
struct _ty1837;  // TemplateSpecialization Local<v8::Context>
struct _ty1838;  // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ty1839;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1840;  // TemplateSpecialization Local<v8::Context>
struct _ty1841;  // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _ty1842;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1843;  // TemplateSpecialization Local<v8::Context>
struct _ty1844;  // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ty1845;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty1846;  // TemplateSpecialization Local<v8::Context>
struct _ty1847;  // FunctionProto MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _ty1848;  // TemplateSpecialization MaybeLocal<v8::Integer>
struct _ty1849;  // TemplateSpecialization Local<v8::Context>
struct _ty1850;  // FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ty1851;  // TemplateSpecialization MaybeLocal<v8::Uint32>
struct _ty1852;  // TemplateSpecialization Local<v8::Context>
struct _ty1853;  // FunctionProto MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _ty1854;  // TemplateSpecialization MaybeLocal<v8::Int32>
struct _ty1855;  // TemplateSpecialization Local<v8::Context>
struct _ty1856;  // FunctionProto Local<v8::Boolean> (v8::Isolate *) const
struct _ty1857;  // TemplateSpecialization Local<v8::Boolean>
struct _ty1858;  // FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _ty1859;  // TemplateSpecialization MaybeLocal<v8::Uint32>
struct _ty1860;  // TemplateSpecialization Local<v8::Context>
struct _ty1861;  // FunctionProto bool (v8::Isolate *) const
struct _ty1862;  // FunctionProto Maybe<double> (Local<v8::Context>) const
struct _ty1863;  // TemplateSpecialization Maybe<double>
struct _ty1864;  // TemplateSpecialization Local<v8::Context>
struct _ty1865;  // FunctionProto Maybe<int64_t> (Local<v8::Context>) const
struct _ty1866;  // TemplateSpecialization Maybe<int64_t>
struct _ty1867;  // TemplateSpecialization Local<v8::Context>
struct _ty1868;  // FunctionProto Maybe<uint32_t> (Local<v8::Context>) const
struct _ty1869;  // TemplateSpecialization Maybe<uint32_t>
struct _ty1870;  // TemplateSpecialization Local<v8::Context>
struct _ty1871;  // FunctionProto Maybe<int32_t> (Local<v8::Context>) const
struct _ty1872;  // TemplateSpecialization Maybe<int32_t>
struct _ty1873;  // TemplateSpecialization Local<v8::Context>
struct _ty1874;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _ty1875;  // TemplateSpecialization Maybe<bool>
struct _ty1876;  // TemplateSpecialization Local<v8::Context>
struct _ty1877;  // TemplateSpecialization Local<v8::Value>
struct _ty1878;  // FunctionProto bool (Local<v8::Value>) const
struct _ty1879;  // TemplateSpecialization Local<v8::Value>
struct _ty1880;  // FunctionProto bool (Local<v8::Value>) const
struct _ty1881;  // TemplateSpecialization Local<v8::Value>
struct _ty1882;  // TemplateTypeParm T
struct _ty1883;  // FunctionProto v8::Value *(T *)
struct _ty1884;  // Pointer v8::Value *
struct _ty1885;  // Pointer T *
struct _ty1886;  // FunctionProto Local<v8::String> (v8::Isolate *)
struct _ty1887;  // TemplateSpecialization Local<v8::String>
struct _ty1888;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _ty1889;  // TemplateSpecialization Maybe<bool>
struct _ty1890;  // TemplateSpecialization Local<v8::Context>
struct _ty1891;  // TemplateSpecialization Local<v8::Object>
struct _ty1892;  // Pointer const v8::Boolean *
struct _ty1893;  // FunctionProto v8::Boolean *(v8::Value *)
struct _ty1894;  // Pointer v8::Boolean *
struct _ty1895;  // Pointer v8::Value *
struct _ty1896;  // Elaborated v8::Value
struct _ty1897;  // FunctionProto Local<v8::Boolean> (v8::Isolate *, bool)
struct _ty1898;  // TemplateSpecialization Local<v8::Boolean>
struct _ty1899;  // Pointer v8::Name *
struct _ty1900;  // FunctionProto v8::Name *(v8::Value *)
struct _ty1901;  // Enum v8::NewStringType
struct _ty1902;  // Enum v8::String::Encoding
struct _ty1903;  // Pointer const v8::String *
struct _ty1904;  // FunctionProto int (v8::Isolate *) const
struct _ty1905;  // Enum v8::String::WriteOptions
struct _ty1906;  // FunctionProto int (v8::Isolate *, uint16_t *, int, int, int) const
struct _ty1907;  // Pointer uint16_t *
struct _ty1908;  // FunctionProto int (v8::Isolate *, uint8_t *, int, int, int) const
struct _ty1909;  // Pointer uint8_t *
struct _ty1910;  // FunctionProto int (v8::Isolate *, char *, int, int *, int) const
struct _ty1911;  // Pointer char *
struct _ty1912;  // Pointer int *
struct _ty1913;  // FunctionProto Local<v8::String> (v8::Isolate *)
struct _ty1914;  // TemplateSpecialization Local<v8::String>
struct _ty1915;  // Record v8::String::ExternalStringResourceBase
struct _ty1916;  // Pointer v8::String::ExternalStringResourceBase *
struct _ty1917;  // Pointer const v8::String::ExternalStringResourceBase *
struct _ty1918;  // FunctionProto void (const v8::String::ExternalStringResourceBase &)
struct _ty1919;  // LValueReference const v8::String::ExternalStringResourceBase &
struct _ty1920;  // FunctionProto void ()
struct _ty1921;  // FunctionProto void () const
struct _ty1922;  // Record v8::String::ExternalStringResource
struct _ty1923;  // Pointer v8::String::ExternalStringResource *
struct _ty1924;  // FunctionProto const uint16_t *() const
struct _ty1925;  // Pointer const uint16_t *
struct _ty1926;  // Pointer const v8::String::ExternalStringResource *
struct _ty1927;  // FunctionProto size_t () const
struct _ty1928;  // FunctionProto void ()
struct _ty1929;  // FunctionProto void (const v8::String::ExternalStringResource &)
struct _ty1930;  // LValueReference const v8::String::ExternalStringResource &
struct _ty1931;  // FunctionProto v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
struct _ty1932;  // LValueReference v8::String::ExternalStringResource &
struct _ty1933;  // Record v8::String::ExternalOneByteStringResource
struct _ty1934;  // Pointer v8::String::ExternalOneByteStringResource *
struct _ty1935;  // FunctionProto const char *() const
struct _ty1936;  // Pointer const v8::String::ExternalOneByteStringResource *
struct _ty1937;  // FunctionProto void ()
struct _ty1938;  // FunctionProto void (const v8::String::ExternalOneByteStringResource &)
struct _ty1939;  // LValueReference const v8::String::ExternalOneByteStringResource &
struct _ty1940;  // FunctionProto v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
struct _ty1941;  // LValueReference v8::String::ExternalOneByteStringResource &
struct _ty1942;  // FunctionProto v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
struct _ty1943;  // Pointer v8::String::Encoding *
struct _ty1944;  // FunctionProto v8::String::ExternalStringResource *() const
struct _ty1945;  // FunctionProto const v8::String::ExternalOneByteStringResource *() const
struct _ty1946;  // FunctionProto v8::String *(v8::Value *)
struct _ty1947;  // Pointer v8::String *
struct _ty1948;  // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
struct _ty1949;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1950;  // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
struct _ty1951;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1952;  // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
struct _ty1953;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1954;  // FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
struct _ty1955;  // TemplateSpecialization Local<v8::String>
struct _ty1956;  // TemplateSpecialization Local<v8::String>
struct _ty1957;  // TemplateSpecialization Local<v8::String>
struct _ty1958;  // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
struct _ty1959;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1960;  // FunctionProto bool (v8::String::ExternalStringResource *)
struct _ty1961;  // FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
struct _ty1962;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty1963;  // FunctionProto bool (v8::String::ExternalOneByteStringResource *)
struct _ty1964;  // FunctionProto bool (Local<v8::String>)
struct _ty1965;  // TemplateSpecialization Local<v8::String>
struct _ty1966;  // Record v8::String::Utf8Value
struct _ty1967;  // FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _ty1968;  // TemplateSpecialization Local<v8::Value>
struct _ty1969;  // Pointer v8::String::Utf8Value *
struct _ty1970;  // FunctionProto void ()
struct _ty1971;  // FunctionProto char *()
struct _ty1972;  // Pointer const v8::String::Utf8Value *
struct _ty1973;  // FunctionProto void (const v8::String::Utf8Value &)
struct _ty1974;  // LValueReference const v8::String::Utf8Value &
struct _ty1975;  // Record v8::String::Value
struct _ty1976;  // FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _ty1977;  // TemplateSpecialization Local<v8::Value>
struct _ty1978;  // Pointer v8::String::Value *
struct _ty1979;  // FunctionProto void ()
struct _ty1980;  // FunctionProto uint16_t *()
struct _ty1981;  // Pointer const v8::String::Value *
struct _ty1982;  // FunctionProto void (const v8::String::Value &)
struct _ty1983;  // LValueReference const v8::String::Value &
struct _ty1984;  // FunctionProto Local<v8::Value> () const
struct _ty1985;  // TemplateSpecialization Local<v8::Value>
struct _ty1986;  // Pointer const v8::Symbol *
struct _ty1987;  // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ty1988;  // TemplateSpecialization Local<v8::Symbol>
struct _ty1989;  // TemplateSpecialization Local<v8::String>
struct _ty1990;  // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ty1991;  // TemplateSpecialization Local<v8::Symbol>
struct _ty1992;  // TemplateSpecialization Local<v8::String>
struct _ty1993;  // FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _ty1994;  // TemplateSpecialization Local<v8::Symbol>
struct _ty1995;  // TemplateSpecialization Local<v8::String>
struct _ty1996;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty1997;  // TemplateSpecialization Local<v8::Symbol>
struct _ty1998;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty1999;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2000;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2001;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2002;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2003;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2004;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2005;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2006;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2007;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2008;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2009;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2010;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2011;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2012;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2013;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2014;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2015;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2016;  // FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _ty2017;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2018;  // FunctionProto v8::Symbol *(v8::Value *)
struct _ty2019;  // Pointer v8::Symbol *
struct _ty2020;  // FunctionProto Local<v8::Value> () const
struct _ty2021;  // TemplateSpecialization Local<v8::Value>
struct _ty2022;  // Pointer const v8::Private *
struct _ty2023;  // FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ty2024;  // TemplateSpecialization Local<v8::Private>
struct _ty2025;  // TemplateSpecialization Local<v8::String>
struct _ty2026;  // FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _ty2027;  // TemplateSpecialization Local<v8::Private>
struct _ty2028;  // TemplateSpecialization Local<v8::String>
struct _ty2029;  // FunctionProto v8::Private *(v8::Data *)
struct _ty2030;  // Pointer v8::Private *
struct _ty2031;  // Pointer v8::Data *
struct _ty2032;  // FunctionProto double () const
struct _ty2033;  // Pointer const v8::Number *
struct _ty2034;  // FunctionProto Local<v8::Number> (v8::Isolate *, double)
struct _ty2035;  // TemplateSpecialization Local<v8::Number>
struct _ty2036;  // FunctionProto v8::Number *(v8::Value *)
struct _ty2037;  // Pointer v8::Number *
struct _ty2038;  // FunctionProto Local<v8::Integer> (v8::Isolate *, int32_t)
struct _ty2039;  // TemplateSpecialization Local<v8::Integer>
struct _ty2040;  // Typedef int32_t
struct _ty2041;  // FunctionProto Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _ty2042;  // TemplateSpecialization Local<v8::Integer>
struct _ty2043;  // FunctionProto int64_t () const
struct _ty2044;  // Typedef int64_t
struct _ty2045;  // Builtin long long
struct _ty2046;  // Pointer const v8::Integer *
struct _ty2047;  // FunctionProto v8::Integer *(v8::Value *)
struct _ty2048;  // Pointer v8::Integer *
struct _ty2049;  // FunctionProto int32_t () const
struct _ty2050;  // Pointer const v8::Int32 *
struct _ty2051;  // FunctionProto v8::Int32 *(v8::Value *)
struct _ty2052;  // Pointer v8::Int32 *
struct _ty2053;  // Pointer const v8::Uint32 *
struct _ty2054;  // FunctionProto v8::Uint32 *(v8::Value *)
struct _ty2055;  // Pointer v8::Uint32 *
struct _ty2056;  // FunctionProto Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _ty2057;  // TemplateSpecialization Local<v8::BigInt>
struct _ty2058;  // FunctionProto Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _ty2059;  // TemplateSpecialization Local<v8::BigInt>
struct _ty2060;  // FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
struct _ty2061;  // TemplateSpecialization MaybeLocal<v8::BigInt>
struct _ty2062;  // TemplateSpecialization Local<v8::Context>
struct _ty2063;  // Pointer const uint64_t *
struct _ty2064;  // FunctionProto uint64_t (bool *) const
struct _ty2065;  // Pointer bool *
struct _ty2066;  // Pointer const v8::BigInt *
struct _ty2067;  // FunctionProto int64_t (bool *) const
struct _ty2068;  // FunctionProto void (int *, int *, uint64_t *) const
struct _ty2069;  // FunctionProto v8::BigInt *(v8::Value *)
struct _ty2070;  // Pointer v8::BigInt *
struct _ty2071;  // Enum v8::PropertyAttribute
struct _ty2072;  // Typedef v8::AccessorGetterCallback
struct _ty2073;  // Paren void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2074;  // TemplateSpecialization Local<v8::String>
struct _ty2075;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2076;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2077;  // FunctionProto void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2078;  // Pointer void (*)(Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2079;  // Typedef v8::AccessorNameGetterCallback
struct _ty2080;  // Paren void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2081;  // TemplateSpecialization Local<v8::Name>
struct _ty2082;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2083;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2084;  // FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2085;  // Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2086;  // Typedef v8::AccessorSetterCallback
struct _ty2087;  // Paren void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ty2088;  // TemplateSpecialization Local<v8::String>
struct _ty2089;  // TemplateSpecialization Local<v8::Value>
struct _ty2090;  // LValueReference const PropertyCallbackInfo<void> &
struct _ty2091;  // TemplateSpecialization PropertyCallbackInfo<void>
struct _ty2092;  // FunctionProto void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ty2093;  // Pointer void (*)(Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ty2094;  // Typedef v8::AccessorNameSetterCallback
struct _ty2095;  // Paren void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ty2096;  // TemplateSpecialization Local<v8::Name>
struct _ty2097;  // TemplateSpecialization Local<v8::Value>
struct _ty2098;  // LValueReference const PropertyCallbackInfo<void> &
struct _ty2099;  // TemplateSpecialization PropertyCallbackInfo<void>
struct _ty2100;  // FunctionProto void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ty2101;  // Pointer void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _ty2102;  // Enum v8::AccessControl
struct _ty2103;  // Enum v8::PropertyFilter
struct _ty2104;  // Enum v8::SideEffectType
struct _ty2105;  // Enum v8::KeyCollectionMode
struct _ty2106;  // Enum v8::IndexFilter
struct _ty2107;  // Enum v8::KeyConversionMode
struct _ty2108;  // Enum v8::IntegrityLevel
struct _ty2109;  // FunctionProto bool (Local<v8::Value>, Local<v8::Value>)
struct _ty2110;  // TemplateSpecialization Local<v8::Value>
struct _ty2111;  // TemplateSpecialization Local<v8::Value>
struct _ty2112;  // Pointer v8::Object *
struct _ty2113;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ty2114;  // TemplateSpecialization Maybe<bool>
struct _ty2115;  // TemplateSpecialization Local<v8::Context>
struct _ty2116;  // TemplateSpecialization Local<v8::Value>
struct _ty2117;  // TemplateSpecialization Local<v8::Value>
struct _ty2118;  // FunctionProto bool (uint32_t, Local<v8::Value>)
struct _ty2119;  // TemplateSpecialization Local<v8::Value>
struct _ty2120;  // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ty2121;  // TemplateSpecialization Maybe<bool>
struct _ty2122;  // TemplateSpecialization Local<v8::Context>
struct _ty2123;  // TemplateSpecialization Local<v8::Value>
struct _ty2124;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
struct _ty2125;  // TemplateSpecialization Maybe<bool>
struct _ty2126;  // TemplateSpecialization Local<v8::Context>
struct _ty2127;  // TemplateSpecialization Local<v8::Name>
struct _ty2128;  // TemplateSpecialization Local<v8::Value>
struct _ty2129;  // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _ty2130;  // TemplateSpecialization Maybe<bool>
struct _ty2131;  // TemplateSpecialization Local<v8::Context>
struct _ty2132;  // TemplateSpecialization Local<v8::Value>
struct _ty2133;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _ty2134;  // TemplateSpecialization Maybe<bool>
struct _ty2135;  // TemplateSpecialization Local<v8::Context>
struct _ty2136;  // TemplateSpecialization Local<v8::Name>
struct _ty2137;  // TemplateSpecialization Local<v8::Value>
struct _ty2138;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
struct _ty2139;  // TemplateSpecialization Maybe<bool>
struct _ty2140;  // TemplateSpecialization Local<v8::Context>
struct _ty2141;  // TemplateSpecialization Local<v8::Name>
struct _ty2142;  // LValueReference v8::PropertyDescriptor &
struct _ty2143;  // FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _ty2144;  // TemplateSpecialization Local<v8::Value>
struct _ty2145;  // TemplateSpecialization Local<v8::Value>
struct _ty2146;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ty2147;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2148;  // TemplateSpecialization Local<v8::Context>
struct _ty2149;  // TemplateSpecialization Local<v8::Value>
struct _ty2150;  // FunctionProto Local<v8::Value> (uint32_t)
struct _ty2151;  // TemplateSpecialization Local<v8::Value>
struct _ty2152;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _ty2153;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2154;  // TemplateSpecialization Local<v8::Context>
struct _ty2155;  // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
struct _ty2156;  // TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _ty2157;  // TemplateSpecialization Local<v8::Context>
struct _ty2158;  // TemplateSpecialization Local<v8::Value>
struct _ty2159;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ty2160;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2161;  // TemplateSpecialization Local<v8::Context>
struct _ty2162;  // TemplateSpecialization Local<v8::Name>
struct _ty2163;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2164;  // TemplateSpecialization Maybe<bool>
struct _ty2165;  // TemplateSpecialization Local<v8::Context>
struct _ty2166;  // TemplateSpecialization Local<v8::Value>
struct _ty2167;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2168;  // TemplateSpecialization Maybe<bool>
struct _ty2169;  // TemplateSpecialization Local<v8::Context>
struct _ty2170;  // TemplateSpecialization Local<v8::Value>
struct _ty2171;  // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ty2172;  // TemplateSpecialization Maybe<bool>
struct _ty2173;  // TemplateSpecialization Local<v8::Context>
struct _ty2174;  // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ty2175;  // TemplateSpecialization Maybe<bool>
struct _ty2176;  // TemplateSpecialization Local<v8::Context>
struct _ty2177;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ty2178;  // TemplateSpecialization Maybe<bool>
struct _ty2179;  // TemplateSpecialization Local<v8::Context>
struct _ty2180;  // TemplateSpecialization Local<v8::Name>
struct _ty2181;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2182;  // FunctionProto void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _ty2183;  // TemplateSpecialization Local<v8::Name>
struct _ty2184;  // TemplateSpecialization Local<v8::Function>
struct _ty2185;  // TemplateSpecialization Local<v8::Function>
struct _ty2186;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ty2187;  // TemplateSpecialization Maybe<bool>
struct _ty2188;  // TemplateSpecialization Local<v8::Context>
struct _ty2189;  // TemplateSpecialization Local<v8::Name>
struct _ty2190;  // TemplateSpecialization Local<v8::Value>
struct _ty2191;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ty2192;  // TemplateSpecialization Maybe<bool>
struct _ty2193;  // TemplateSpecialization Local<v8::Context>
struct _ty2194;  // TemplateSpecialization Local<v8::Name>
struct _ty2195;  // TemplateSpecialization Local<v8::Value>
struct _ty2196;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ty2197;  // TemplateSpecialization Maybe<bool>
struct _ty2198;  // TemplateSpecialization Local<v8::Context>
struct _ty2199;  // TemplateSpecialization Local<v8::Private>
struct _ty2200;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
struct _ty2201;  // TemplateSpecialization Maybe<bool>
struct _ty2202;  // TemplateSpecialization Local<v8::Context>
struct _ty2203;  // TemplateSpecialization Local<v8::Private>
struct _ty2204;  // TemplateSpecialization Local<v8::Value>
struct _ty2205;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _ty2206;  // TemplateSpecialization Maybe<bool>
struct _ty2207;  // TemplateSpecialization Local<v8::Context>
struct _ty2208;  // TemplateSpecialization Local<v8::Private>
struct _ty2209;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
struct _ty2210;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2211;  // TemplateSpecialization Local<v8::Context>
struct _ty2212;  // TemplateSpecialization Local<v8::Private>
struct _ty2213;  // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ty2214;  // TemplateSpecialization MaybeLocal<v8::Array>
struct _ty2215;  // TemplateSpecialization Local<v8::Context>
struct _ty2216;  // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
struct _ty2217;  // TemplateSpecialization MaybeLocal<v8::Array>
struct _ty2218;  // TemplateSpecialization Local<v8::Context>
struct _ty2219;  // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _ty2220;  // TemplateSpecialization MaybeLocal<v8::Array>
struct _ty2221;  // TemplateSpecialization Local<v8::Context>
struct _ty2222;  // FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
struct _ty2223;  // TemplateSpecialization MaybeLocal<v8::Array>
struct _ty2224;  // TemplateSpecialization Local<v8::Context>
struct _ty2225;  // FunctionProto Local<v8::Value> ()
struct _ty2226;  // TemplateSpecialization Local<v8::Value>
struct _ty2227;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2228;  // TemplateSpecialization Maybe<bool>
struct _ty2229;  // TemplateSpecialization Local<v8::Context>
struct _ty2230;  // TemplateSpecialization Local<v8::Value>
struct _ty2231;  // FunctionProto Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _ty2232;  // TemplateSpecialization Local<v8::Object>
struct _ty2233;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty2234;  // FunctionProto MaybeLocal<v8::String> (Local<v8::Context>)
struct _ty2235;  // TemplateSpecialization MaybeLocal<v8::String>
struct _ty2236;  // TemplateSpecialization Local<v8::Context>
struct _ty2237;  // FunctionProto Local<v8::String> ()
struct _ty2238;  // TemplateSpecialization Local<v8::String>
struct _ty2239;  // FunctionProto Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _ty2240;  // TemplateSpecialization Maybe<bool>
struct _ty2241;  // TemplateSpecialization Local<v8::Context>
struct _ty2242;  // FunctionProto int (const PersistentBase<v8::Object> &)
struct _ty2243;  // LValueReference const PersistentBase<v8::Object> &
struct _ty2244;  // TemplateSpecialization PersistentBase<v8::Object>
struct _ty2245;  // FunctionProto int (const TracedGlobal<v8::Object> &)
struct _ty2246;  // LValueReference const TracedGlobal<v8::Object> &
struct _ty2247;  // TemplateSpecialization TracedGlobal<v8::Object>
struct _ty2248;  // FunctionProto Local<v8::Value> (int)
struct _ty2249;  // TemplateSpecialization Local<v8::Value>
struct _ty2250;  // FunctionProto void (int, Local<v8::Value>)
struct _ty2251;  // TemplateSpecialization Local<v8::Value>
struct _ty2252;  // FunctionProto void *(int)
struct _ty2253;  // FunctionProto void *(const PersistentBase<v8::Object> &, int)
struct _ty2254;  // LValueReference const PersistentBase<v8::Object> &
struct _ty2255;  // TemplateSpecialization PersistentBase<v8::Object>
struct _ty2256;  // FunctionProto void *(const TracedGlobal<v8::Object> &, int)
struct _ty2257;  // LValueReference const TracedGlobal<v8::Object> &
struct _ty2258;  // TemplateSpecialization TracedGlobal<v8::Object>
struct _ty2259;  // FunctionProto void (int, void *)
struct _ty2260;  // FunctionProto void (int, int *, void **)
struct _ty2261;  // Decayed int *
struct _ty2262;  // Decayed void **
struct _ty2263;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ty2264;  // TemplateSpecialization Maybe<bool>
struct _ty2265;  // TemplateSpecialization Local<v8::Context>
struct _ty2266;  // TemplateSpecialization Local<v8::Name>
struct _ty2267;  // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ty2268;  // TemplateSpecialization Maybe<bool>
struct _ty2269;  // TemplateSpecialization Local<v8::Context>
struct _ty2270;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ty2271;  // TemplateSpecialization Maybe<bool>
struct _ty2272;  // TemplateSpecialization Local<v8::Context>
struct _ty2273;  // TemplateSpecialization Local<v8::Name>
struct _ty2274;  // FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _ty2275;  // TemplateSpecialization Maybe<bool>
struct _ty2276;  // TemplateSpecialization Local<v8::Context>
struct _ty2277;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _ty2278;  // TemplateSpecialization Maybe<bool>
struct _ty2279;  // TemplateSpecialization Local<v8::Context>
struct _ty2280;  // TemplateSpecialization Local<v8::Name>
struct _ty2281;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ty2282;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2283;  // TemplateSpecialization Local<v8::Context>
struct _ty2284;  // TemplateSpecialization Local<v8::Name>
struct _ty2285;  // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ty2286;  // TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _ty2287;  // TemplateSpecialization Local<v8::Context>
struct _ty2288;  // TemplateSpecialization Local<v8::Name>
struct _ty2289;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _ty2290;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2291;  // TemplateSpecialization Local<v8::Context>
struct _ty2292;  // TemplateSpecialization Local<v8::Name>
struct _ty2293;  // FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _ty2294;  // TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _ty2295;  // TemplateSpecialization Local<v8::Context>
struct _ty2296;  // TemplateSpecialization Local<v8::Name>
struct _ty2297;  // FunctionProto Local<v8::Object> ()
struct _ty2298;  // TemplateSpecialization Local<v8::Object>
struct _ty2299;  // FunctionProto Local<v8::Context> ()
struct _ty2300;  // TemplateSpecialization Local<v8::Context>
struct _ty2301;  // FunctionProto Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _ty2302;  // TemplateSpecialization Local<v8::Context>
struct _ty2303;  // LValueReference const PersistentBase<v8::Object> &
struct _ty2304;  // TemplateSpecialization PersistentBase<v8::Object>
struct _ty2305;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ty2306;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2307;  // TemplateSpecialization Local<v8::Context>
struct _ty2308;  // TemplateSpecialization Local<v8::Value>
struct _ty2309;  // Decayed Local<v8::Value> *
struct _ty2310;  // TemplateSpecialization Local<v8::Value>
struct _ty2311;  // Pointer Local<v8::Value> *
struct _ty2312;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
struct _ty2313;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2314;  // TemplateSpecialization Local<v8::Context>
struct _ty2315;  // Decayed Local<v8::Value> *
struct _ty2316;  // TemplateSpecialization Local<v8::Value>
struct _ty2317;  // Pointer Local<v8::Value> *
struct _ty2318;  // FunctionProto v8::Isolate *()
struct _ty2319;  // FunctionProto MaybeLocal<v8::Array> (bool *)
struct _ty2320;  // TemplateSpecialization MaybeLocal<v8::Array>
struct _ty2321;  // FunctionProto Local<v8::Object> (v8::Isolate *)
struct _ty2322;  // TemplateSpecialization Local<v8::Object>
struct _ty2323;  // FunctionProto Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _ty2324;  // TemplateSpecialization Local<v8::Object>
struct _ty2325;  // TemplateSpecialization Local<v8::Value>
struct _ty2326;  // Pointer Local<v8::Name> *
struct _ty2327;  // TemplateSpecialization Local<v8::Name>
struct _ty2328;  // Pointer Local<v8::Value> *
struct _ty2329;  // TemplateSpecialization Local<v8::Value>
struct _ty2330;  // FunctionProto v8::Object *(v8::Value *)
struct _ty2331;  // Pointer const v8::Array *
struct _ty2332;  // FunctionProto Local<v8::Array> (v8::Isolate *, int)
struct _ty2333;  // TemplateSpecialization Local<v8::Array>
struct _ty2334;  // FunctionProto Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
struct _ty2335;  // TemplateSpecialization Local<v8::Array>
struct _ty2336;  // Pointer Local<v8::Value> *
struct _ty2337;  // TemplateSpecialization Local<v8::Value>
struct _ty2338;  // FunctionProto v8::Array *(v8::Value *)
struct _ty2339;  // Pointer v8::Array *
struct _ty2340;  // Record v8::Map
struct _ty2341;  // Pointer const v8::Map *
struct _ty2342;  // Pointer v8::Map *
struct _ty2343;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _ty2344;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2345;  // TemplateSpecialization Local<v8::Context>
struct _ty2346;  // TemplateSpecialization Local<v8::Value>
struct _ty2347;  // FunctionProto MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _ty2348;  // TemplateSpecialization MaybeLocal<v8::Map>
struct _ty2349;  // TemplateSpecialization Local<v8::Context>
struct _ty2350;  // TemplateSpecialization Local<v8::Value>
struct _ty2351;  // TemplateSpecialization Local<v8::Value>
struct _ty2352;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2353;  // TemplateSpecialization Maybe<bool>
struct _ty2354;  // TemplateSpecialization Local<v8::Context>
struct _ty2355;  // TemplateSpecialization Local<v8::Value>
struct _ty2356;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2357;  // TemplateSpecialization Maybe<bool>
struct _ty2358;  // TemplateSpecialization Local<v8::Context>
struct _ty2359;  // TemplateSpecialization Local<v8::Value>
struct _ty2360;  // FunctionProto Local<v8::Array> () const
struct _ty2361;  // TemplateSpecialization Local<v8::Array>
struct _ty2362;  // FunctionProto Local<v8::Map> (v8::Isolate *)
struct _ty2363;  // TemplateSpecialization Local<v8::Map>
struct _ty2364;  // FunctionProto v8::Map *(v8::Value *)
struct _ty2365;  // Record v8::Set
struct _ty2366;  // Pointer const v8::Set *
struct _ty2367;  // Pointer v8::Set *
struct _ty2368;  // FunctionProto MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
struct _ty2369;  // TemplateSpecialization MaybeLocal<v8::Set>
struct _ty2370;  // TemplateSpecialization Local<v8::Context>
struct _ty2371;  // TemplateSpecialization Local<v8::Value>
struct _ty2372;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2373;  // TemplateSpecialization Maybe<bool>
struct _ty2374;  // TemplateSpecialization Local<v8::Context>
struct _ty2375;  // TemplateSpecialization Local<v8::Value>
struct _ty2376;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2377;  // TemplateSpecialization Maybe<bool>
struct _ty2378;  // TemplateSpecialization Local<v8::Context>
struct _ty2379;  // TemplateSpecialization Local<v8::Value>
struct _ty2380;  // FunctionProto Local<v8::Array> () const
struct _ty2381;  // TemplateSpecialization Local<v8::Array>
struct _ty2382;  // FunctionProto Local<v8::Set> (v8::Isolate *)
struct _ty2383;  // TemplateSpecialization Local<v8::Set>
struct _ty2384;  // FunctionProto v8::Set *(v8::Value *)
struct _ty2385;  // TemplateTypeParm T
struct _ty2386;  // TemplateTypeParm S
struct _ty2387;  // FunctionProto void (const ReturnValue<S> &)
struct _ty2388;  // LValueReference const ReturnValue<S> &
struct _ty2389;  // TemplateSpecialization ReturnValue<S>
struct _ty2390;  // Pointer ReturnValue<T> *
struct _ty2391;  // TemplateTypeParm S
struct _ty2392;  // FunctionProto void (const Global<S> &)
struct _ty2393;  // LValueReference const Global<S> &
struct _ty2394;  // TemplateSpecialization Global<S>
struct _ty2395;  // TemplateTypeParm S
struct _ty2396;  // FunctionProto void (const TracedGlobal<S> &)
struct _ty2397;  // LValueReference const TracedGlobal<S> &
struct _ty2398;  // TemplateSpecialization TracedGlobal<S>
struct _ty2399;  // TemplateTypeParm S
struct _ty2400;  // FunctionProto void (const Local<S>)
struct _ty2401;  // TemplateSpecialization Local<S>
struct _ty2402;  // FunctionProto void (int32_t)
struct _ty2403;  // Pointer const ReturnValue<T> *
struct _ty2404;  // TemplateTypeParm S
struct _ty2405;  // FunctionProto void (S *)
struct _ty2406;  // Pointer S *
struct _ty2407;  // FunctionProto Local<v8::Value> () const
struct _ty2408;  // TemplateSpecialization Local<v8::Value>
struct _ty2409;  // TemplateTypeParm T
struct _ty2410;  // Pointer const FunctionCallbackInfo<T> *
struct _ty2411;  // FunctionProto Local<v8::Value> (int) const
struct _ty2412;  // TemplateSpecialization Local<v8::Value>
struct _ty2413;  // FunctionProto Local<v8::Object> () const
struct _ty2414;  // TemplateSpecialization Local<v8::Object>
struct _ty2415;  // FunctionProto Local<v8::Object> () const
struct _ty2416;  // TemplateSpecialization Local<v8::Object>
struct _ty2417;  // FunctionProto Local<v8::Value> () const
struct _ty2418;  // TemplateSpecialization Local<v8::Value>
struct _ty2419;  // FunctionProto Local<v8::Value> () const
struct _ty2420;  // TemplateSpecialization Local<v8::Value>
struct _ty2421;  // FunctionProto ReturnValue<T> () const
struct _ty2422;  // TemplateSpecialization ReturnValue<T>
struct _ty2423;  // FunctionProto void (internal::Address *, internal::Address *, int)
struct _ty2424;  // Pointer FunctionCallbackInfo<T> *
struct _ty2425;  // TemplateTypeParm T
struct _ty2426;  // Pointer const PropertyCallbackInfo<T> *
struct _ty2427;  // FunctionProto Local<v8::Value> () const
struct _ty2428;  // TemplateSpecialization Local<v8::Value>
struct _ty2429;  // FunctionProto Local<v8::Object> () const
struct _ty2430;  // TemplateSpecialization Local<v8::Object>
struct _ty2431;  // FunctionProto Local<v8::Object> () const
struct _ty2432;  // TemplateSpecialization Local<v8::Object>
struct _ty2433;  // FunctionProto ReturnValue<T> () const
struct _ty2434;  // TemplateSpecialization ReturnValue<T>
struct _ty2435;  // FunctionProto void (internal::Address *)
struct _ty2436;  // Pointer PropertyCallbackInfo<T> *
struct _ty2437;  // Typedef v8::FunctionCallback
struct _ty2438;  // Paren void (const FunctionCallbackInfo<v8::Value> &)
struct _ty2439;  // LValueReference const FunctionCallbackInfo<v8::Value> &
struct _ty2440;  // TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _ty2441;  // FunctionProto void (const FunctionCallbackInfo<v8::Value> &)
struct _ty2442;  // Pointer void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ty2443;  // Enum v8::ConstructorBehavior
struct _ty2444;  // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ty2445;  // TemplateSpecialization MaybeLocal<v8::Function>
struct _ty2446;  // TemplateSpecialization Local<v8::Context>
struct _ty2447;  // TemplateSpecialization Local<v8::Value>
struct _ty2448;  // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
struct _ty2449;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty2450;  // TemplateSpecialization Local<v8::Context>
struct _ty2451;  // Decayed Local<v8::Value> *
struct _ty2452;  // TemplateSpecialization Local<v8::Value>
struct _ty2453;  // Pointer Local<v8::Value> *
struct _ty2454;  // Pointer const v8::Function *
struct _ty2455;  // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _ty2456;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty2457;  // TemplateSpecialization Local<v8::Context>
struct _ty2458;  // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
struct _ty2459;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty2460;  // TemplateSpecialization Local<v8::Context>
struct _ty2461;  // Decayed Local<v8::Value> *
struct _ty2462;  // TemplateSpecialization Local<v8::Value>
struct _ty2463;  // Pointer Local<v8::Value> *
struct _ty2464;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _ty2465;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2466;  // TemplateSpecialization Local<v8::Context>
struct _ty2467;  // TemplateSpecialization Local<v8::Value>
struct _ty2468;  // Decayed Local<v8::Value> *
struct _ty2469;  // TemplateSpecialization Local<v8::Value>
struct _ty2470;  // Pointer Local<v8::Value> *
struct _ty2471;  // Pointer v8::Function *
struct _ty2472;  // FunctionProto void (Local<v8::String>)
struct _ty2473;  // TemplateSpecialization Local<v8::String>
struct _ty2474;  // FunctionProto Local<v8::Value> () const
struct _ty2475;  // TemplateSpecialization Local<v8::Value>
struct _ty2476;  // FunctionProto Local<v8::Value> () const
struct _ty2477;  // TemplateSpecialization Local<v8::Value>
struct _ty2478;  // FunctionProto Local<v8::Value> () const
struct _ty2479;  // TemplateSpecialization Local<v8::Value>
struct _ty2480;  // FunctionProto Local<v8::Value> () const
struct _ty2481;  // TemplateSpecialization Local<v8::Value>
struct _ty2482;  // FunctionProto Local<v8::Value> () const
struct _ty2483;  // TemplateSpecialization Local<v8::Value>
struct _ty2484;  // FunctionProto v8::Function *(v8::Value *)
struct _ty2485;  // Enum v8::Promise::PromiseState
struct _ty2486;  // Record v8::Promise::Resolver
struct _ty2487;  // FunctionProto MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _ty2488;  // TemplateSpecialization MaybeLocal<v8::Promise::Resolver>
struct _ty2489;  // TemplateSpecialization Local<v8::Context>
struct _ty2490;  // FunctionProto Local<v8::Promise> ()
struct _ty2491;  // TemplateSpecialization Local<v8::Promise>
struct _ty2492;  // Pointer v8::Promise::Resolver *
struct _ty2493;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2494;  // TemplateSpecialization Maybe<bool>
struct _ty2495;  // TemplateSpecialization Local<v8::Context>
struct _ty2496;  // TemplateSpecialization Local<v8::Value>
struct _ty2497;  // FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _ty2498;  // TemplateSpecialization Maybe<bool>
struct _ty2499;  // TemplateSpecialization Local<v8::Context>
struct _ty2500;  // TemplateSpecialization Local<v8::Value>
struct _ty2501;  // FunctionProto v8::Promise::Resolver *(v8::Value *)
struct _ty2502;  // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ty2503;  // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ty2504;  // TemplateSpecialization Local<v8::Context>
struct _ty2505;  // TemplateSpecialization Local<v8::Function>
struct _ty2506;  // Pointer v8::Promise *
struct _ty2507;  // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _ty2508;  // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ty2509;  // TemplateSpecialization Local<v8::Context>
struct _ty2510;  // TemplateSpecialization Local<v8::Function>
struct _ty2511;  // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
struct _ty2512;  // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ty2513;  // TemplateSpecialization Local<v8::Context>
struct _ty2514;  // TemplateSpecialization Local<v8::Function>
struct _ty2515;  // TemplateSpecialization Local<v8::Function>
struct _ty2516;  // FunctionProto Local<v8::Value> ()
struct _ty2517;  // TemplateSpecialization Local<v8::Value>
struct _ty2518;  // FunctionProto v8::Promise::PromiseState ()
struct _ty2519;  // FunctionProto v8::Promise *(v8::Value *)
struct _ty2520;  // Pointer v8::PropertyDescriptor *
struct _ty2521;  // FunctionProto void (Local<v8::Value>)
struct _ty2522;  // TemplateSpecialization Local<v8::Value>
struct _ty2523;  // FunctionProto void (Local<v8::Value>, bool)
struct _ty2524;  // TemplateSpecialization Local<v8::Value>
struct _ty2525;  // FunctionProto void (Local<v8::Value>, Local<v8::Value>)
struct _ty2526;  // TemplateSpecialization Local<v8::Value>
struct _ty2527;  // TemplateSpecialization Local<v8::Value>
struct _ty2528;  // FunctionProto void ()
struct _ty2529;  // FunctionProto Local<v8::Value> () const
struct _ty2530;  // TemplateSpecialization Local<v8::Value>
struct _ty2531;  // Pointer const v8::PropertyDescriptor *
struct _ty2532;  // FunctionProto Local<v8::Value> () const
struct _ty2533;  // TemplateSpecialization Local<v8::Value>
struct _ty2534;  // FunctionProto Local<v8::Value> () const
struct _ty2535;  // TemplateSpecialization Local<v8::Value>
struct _ty2536;  // Record v8::PropertyDescriptor::PrivateData
struct _ty2537;  // FunctionProto v8::PropertyDescriptor::PrivateData *() const
struct _ty2538;  // Pointer v8::PropertyDescriptor::PrivateData *
struct _ty2539;  // FunctionProto void (const v8::PropertyDescriptor &)
struct _ty2540;  // LValueReference const v8::PropertyDescriptor &
struct _ty2541;  // FunctionProto Local<v8::Value> ()
struct _ty2542;  // TemplateSpecialization Local<v8::Value>
struct _ty2543;  // Pointer v8::Proxy *
struct _ty2544;  // FunctionProto Local<v8::Value> ()
struct _ty2545;  // TemplateSpecialization Local<v8::Value>
struct _ty2546;  // FunctionProto MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
struct _ty2547;  // TemplateSpecialization MaybeLocal<v8::Proxy>
struct _ty2548;  // TemplateSpecialization Local<v8::Context>
struct _ty2549;  // TemplateSpecialization Local<v8::Object>
struct _ty2550;  // TemplateSpecialization Local<v8::Object>
struct _ty2551;  // FunctionProto v8::Proxy *(v8::Value *)
struct _ty2552;  // TemplateTypeParm T
struct _ty2553;  // InjectedClassName MemorySpan<T>
struct _ty2554;  // Pointer MemorySpan<T> *
struct _ty2555;  // FunctionProto void (T *, size_t)
struct _ty2556;  // Pointer T *
struct _ty2557;  // FunctionProto T *() const
struct _ty2558;  // Pointer const MemorySpan<T> *
struct _ty2559;  // Record v8::MemorySpan<const unsigned char>
struct _ty2560;  // FunctionProto void ()
struct _ty2561;  // Pointer v8::MemorySpan<const unsigned char> *
struct _ty2562;  // FunctionProto void (const unsigned char *, size_t)
struct _ty2563;  // Pointer const unsigned char *
struct _ty2564;  // SubstTemplateTypeParm const unsigned char
struct _ty2565;  // FunctionProto const unsigned char *() const
struct _ty2566;  // Pointer const v8::MemorySpan<const unsigned char> *
struct _ty2567;  // FunctionProto void (const v8::MemorySpan<const unsigned char> &)
struct _ty2568;  // LValueReference const v8::MemorySpan<const unsigned char> &
struct _ty2569;  // FunctionProto void (v8::MemorySpan<const unsigned char> &&)
struct _ty2570;  // RValueReference v8::MemorySpan<const unsigned char> &&
struct _ty2571;  // Record v8::OwnedBuffer
struct _ty2572;  // Elaborated std::unique_ptr<const uint8_t []>
struct _ty2573;  // TemplateSpecialization unique_ptr<const uint8_t []>
struct _ty2574;  // Record std::unique_ptr<unsigned char const[], std::default_delete<unsigned char const[]> >
struct _ty2575;  // FunctionProto void (std::unique_ptr<const uint8_t []>, size_t)
struct _ty2576;  // Elaborated std::unique_ptr<const uint8_t []>
struct _ty2577;  // TemplateSpecialization unique_ptr<const uint8_t []>
struct _ty2578;  // Pointer v8::OwnedBuffer *
struct _ty2579;  // FunctionProto void ()
struct _ty2580;  // FunctionProto void (const v8::OwnedBuffer &)
struct _ty2581;  // LValueReference const v8::OwnedBuffer &
struct _ty2582;  // FunctionProto void (v8::OwnedBuffer &&) noexcept
struct _ty2583;  // RValueReference v8::OwnedBuffer &&
struct _ty2584;  // FunctionProto v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _ty2585;  // LValueReference v8::OwnedBuffer &
struct _ty2586;  // FunctionProto v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _ty2587;  // Record v8::CompiledWasmModule
struct _ty2588;  // FunctionProto v8::OwnedBuffer ()
struct _ty2589;  // Pointer v8::CompiledWasmModule *
struct _ty2590;  // FunctionProto MemorySpan<const uint8_t> ()
struct _ty2591;  // TemplateSpecialization MemorySpan<const uint8_t>
struct _ty2592;  // FunctionProto void (const v8::CompiledWasmModule &)
struct _ty2593;  // LValueReference const v8::CompiledWasmModule &
struct _ty2594;  // FunctionProto void (v8::CompiledWasmModule &&)
struct _ty2595;  // RValueReference v8::CompiledWasmModule &&
struct _ty2596;  // FunctionProto v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _ty2597;  // LValueReference v8::CompiledWasmModule &
struct _ty2598;  // FunctionProto void ()
struct _ty2599;  // Record v8::WasmModuleObject::TransferrableModule
struct _ty2600;  // FunctionProto void (v8::WasmModuleObject::TransferrableModule &&)
struct _ty2601;  // RValueReference v8::WasmModuleObject::TransferrableModule &&
struct _ty2602;  // Pointer v8::WasmModuleObject::TransferrableModule *
struct _ty2603;  // FunctionProto void (const v8::WasmModuleObject::TransferrableModule &)
struct _ty2604;  // LValueReference const v8::WasmModuleObject::TransferrableModule &
struct _ty2605;  // FunctionProto v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
struct _ty2606;  // LValueReference v8::WasmModuleObject::TransferrableModule &
struct _ty2607;  // FunctionProto v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
struct _ty2608;  // FunctionProto void ()
struct _ty2609;  // FunctionProto v8::WasmModuleObject::TransferrableModule ()
struct _ty2610;  // Pointer v8::WasmModuleObject *
struct _ty2611;  // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
struct _ty2612;  // TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _ty2613;  // FunctionProto v8::CompiledWasmModule ()
struct _ty2614;  // FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _ty2615;  // TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _ty2616;  // TemplateSpecialization MemorySpan<const uint8_t>
struct _ty2617;  // TemplateSpecialization MemorySpan<const uint8_t>
struct _ty2618;  // FunctionProto v8::WasmModuleObject *(v8::Value *)
struct _ty2619;  // Record v8::WasmStreaming
struct _ty2620;  // Record v8::WasmStreaming::WasmStreamingImpl
struct _ty2621;  // Record v8::WasmStreaming::Client
struct _ty2622;  // FunctionProto void ()
struct _ty2623;  // Pointer v8::WasmStreaming::Client *
struct _ty2624;  // FunctionProto void (v8::CompiledWasmModule)
struct _ty2625;  // FunctionProto v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
struct _ty2626;  // LValueReference v8::WasmStreaming::Client &
struct _ty2627;  // LValueReference const v8::WasmStreaming::Client &
struct _ty2628;  // FunctionProto void (std::unique_ptr<WasmStreamingImpl>)
struct _ty2629;  // Elaborated std::unique_ptr<WasmStreamingImpl>
struct _ty2630;  // TemplateSpecialization unique_ptr<v8::WasmStreaming::WasmStreamingImpl>
struct _ty2631;  // Record std::unique_ptr<v8::WasmStreaming::WasmStreamingImpl, std::default_delete<v8::WasmStreaming::WasmStreamingImpl> >
struct _ty2632;  // Pointer v8::WasmStreaming *
struct _ty2633;  // FunctionProto void ()
struct _ty2634;  // FunctionProto void (const uint8_t *, size_t)
struct _ty2635;  // FunctionProto void (MaybeLocal<v8::Value>)
struct _ty2636;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2637;  // FunctionProto bool (const uint8_t *, size_t)
struct _ty2638;  // FunctionProto void (std::shared_ptr<Client>)
struct _ty2639;  // Elaborated std::shared_ptr<Client>
struct _ty2640;  // TemplateSpecialization shared_ptr<v8::WasmStreaming::Client>
struct _ty2641;  // Record std::shared_ptr<v8::WasmStreaming::Client>
struct _ty2642;  // FunctionProto std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
struct _ty2643;  // Elaborated std::shared_ptr<WasmStreaming>
struct _ty2644;  // TemplateSpecialization shared_ptr<v8::WasmStreaming>
struct _ty2645;  // Record std::shared_ptr<v8::WasmStreaming>
struct _ty2646;  // TemplateSpecialization Local<v8::Value>
struct _ty2647;  // FunctionProto void (const v8::WasmStreaming &)
struct _ty2648;  // LValueReference const v8::WasmStreaming &
struct _ty2649;  // Record v8::WasmModuleObjectBuilderStreaming
struct _ty2650;  // Pointer v8::WasmModuleObjectBuilderStreaming *
struct _ty2651;  // FunctionProto void (MaybeLocal<v8::Value>)
struct _ty2652;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2653;  // FunctionProto Local<v8::Promise> ()
struct _ty2654;  // TemplateSpecialization Local<v8::Promise>
struct _ty2655;  // FunctionProto void ()
struct _ty2656;  // Enum v8::ArrayBufferCreationMode
struct _ty2657;  // Record v8::ArrayBuffer::Allocator
struct _ty2658;  // FunctionProto void ()
struct _ty2659;  // Pointer v8::ArrayBuffer::Allocator *
struct _ty2660;  // FunctionProto void *(size_t)
struct _ty2661;  // FunctionProto void (void *, size_t)
struct _ty2662;  // Enum v8::ArrayBuffer::Allocator::AllocationMode
struct _ty2663;  // FunctionProto v8::ArrayBuffer::Allocator *()
struct _ty2664;  // FunctionProto v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
struct _ty2665;  // LValueReference v8::ArrayBuffer::Allocator &
struct _ty2666;  // LValueReference const v8::ArrayBuffer::Allocator &
struct _ty2667;  // Record v8::ArrayBuffer::Contents
struct _ty2668;  // Typedef v8::ArrayBuffer::Contents::DeleterCallback
struct _ty2669;  // Paren void (void *, size_t, void *)
struct _ty2670;  // FunctionProto void (void *, size_t, void *)
struct _ty2671;  // Pointer void (*)(void *, size_t, void *)
struct _ty2672;  // Pointer v8::ArrayBuffer::Contents *
struct _ty2673;  // FunctionProto void *() const
struct _ty2674;  // Pointer const v8::ArrayBuffer::Contents *
struct _ty2675;  // FunctionProto Allocator::AllocationMode () const
struct _ty2676;  // Elaborated Allocator::AllocationMode
struct _ty2677;  // FunctionProto v8::ArrayBuffer::Contents::DeleterCallback () const
struct _ty2678;  // Pointer const v8::ArrayBuffer *
struct _ty2679;  // FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _ty2680;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2681;  // FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ty2682;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2683;  // Pointer v8::ArrayBuffer *
struct _ty2684;  // FunctionProto v8::ArrayBuffer::Contents ()
struct _ty2685;  // FunctionProto v8::ArrayBuffer *(v8::Value *)
struct _ty2686;  // Record v8::ArrayBufferView
struct _ty2687;  // FunctionProto Local<v8::ArrayBuffer> ()
struct _ty2688;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2689;  // Pointer v8::ArrayBufferView *
struct _ty2690;  // FunctionProto size_t ()
struct _ty2691;  // FunctionProto size_t (void *, size_t)
struct _ty2692;  // Pointer const v8::ArrayBufferView *
struct _ty2693;  // FunctionProto v8::ArrayBufferView *(v8::Value *)
struct _ty2694;  // Record v8::TypedArray
struct _ty2695;  // Pointer v8::TypedArray *
struct _ty2696;  // FunctionProto v8::TypedArray *(v8::Value *)
struct _ty2697;  // Record v8::Uint8Array
struct _ty2698;  // FunctionProto Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2699;  // TemplateSpecialization Local<v8::Uint8Array>
struct _ty2700;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2701;  // FunctionProto Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2702;  // TemplateSpecialization Local<v8::Uint8Array>
struct _ty2703;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2704;  // FunctionProto v8::Uint8Array *(v8::Value *)
struct _ty2705;  // Pointer v8::Uint8Array *
struct _ty2706;  // Record v8::Uint8ClampedArray
struct _ty2707;  // FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2708;  // TemplateSpecialization Local<v8::Uint8ClampedArray>
struct _ty2709;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2710;  // FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2711;  // TemplateSpecialization Local<v8::Uint8ClampedArray>
struct _ty2712;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2713;  // FunctionProto v8::Uint8ClampedArray *(v8::Value *)
struct _ty2714;  // Pointer v8::Uint8ClampedArray *
struct _ty2715;  // Record v8::Int8Array
struct _ty2716;  // FunctionProto Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2717;  // TemplateSpecialization Local<v8::Int8Array>
struct _ty2718;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2719;  // FunctionProto Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2720;  // TemplateSpecialization Local<v8::Int8Array>
struct _ty2721;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2722;  // FunctionProto v8::Int8Array *(v8::Value *)
struct _ty2723;  // Pointer v8::Int8Array *
struct _ty2724;  // Record v8::Uint16Array
struct _ty2725;  // FunctionProto Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2726;  // TemplateSpecialization Local<v8::Uint16Array>
struct _ty2727;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2728;  // FunctionProto Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2729;  // TemplateSpecialization Local<v8::Uint16Array>
struct _ty2730;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2731;  // FunctionProto v8::Uint16Array *(v8::Value *)
struct _ty2732;  // Pointer v8::Uint16Array *
struct _ty2733;  // Record v8::Int16Array
struct _ty2734;  // FunctionProto Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2735;  // TemplateSpecialization Local<v8::Int16Array>
struct _ty2736;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2737;  // FunctionProto Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2738;  // TemplateSpecialization Local<v8::Int16Array>
struct _ty2739;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2740;  // FunctionProto v8::Int16Array *(v8::Value *)
struct _ty2741;  // Pointer v8::Int16Array *
struct _ty2742;  // Record v8::Uint32Array
struct _ty2743;  // FunctionProto Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2744;  // TemplateSpecialization Local<v8::Uint32Array>
struct _ty2745;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2746;  // FunctionProto Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2747;  // TemplateSpecialization Local<v8::Uint32Array>
struct _ty2748;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2749;  // FunctionProto v8::Uint32Array *(v8::Value *)
struct _ty2750;  // Pointer v8::Uint32Array *
struct _ty2751;  // Record v8::Int32Array
struct _ty2752;  // FunctionProto Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2753;  // TemplateSpecialization Local<v8::Int32Array>
struct _ty2754;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2755;  // FunctionProto Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2756;  // TemplateSpecialization Local<v8::Int32Array>
struct _ty2757;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2758;  // FunctionProto v8::Int32Array *(v8::Value *)
struct _ty2759;  // Pointer v8::Int32Array *
struct _ty2760;  // Record v8::Float32Array
struct _ty2761;  // FunctionProto Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2762;  // TemplateSpecialization Local<v8::Float32Array>
struct _ty2763;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2764;  // FunctionProto Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2765;  // TemplateSpecialization Local<v8::Float32Array>
struct _ty2766;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2767;  // FunctionProto v8::Float32Array *(v8::Value *)
struct _ty2768;  // Pointer v8::Float32Array *
struct _ty2769;  // Record v8::Float64Array
struct _ty2770;  // FunctionProto Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2771;  // TemplateSpecialization Local<v8::Float64Array>
struct _ty2772;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2773;  // FunctionProto Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2774;  // TemplateSpecialization Local<v8::Float64Array>
struct _ty2775;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2776;  // FunctionProto v8::Float64Array *(v8::Value *)
struct _ty2777;  // Pointer v8::Float64Array *
struct _ty2778;  // Record v8::BigInt64Array
struct _ty2779;  // FunctionProto Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2780;  // TemplateSpecialization Local<v8::BigInt64Array>
struct _ty2781;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2782;  // FunctionProto Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2783;  // TemplateSpecialization Local<v8::BigInt64Array>
struct _ty2784;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2785;  // FunctionProto v8::BigInt64Array *(v8::Value *)
struct _ty2786;  // Pointer v8::BigInt64Array *
struct _ty2787;  // Record v8::BigUint64Array
struct _ty2788;  // FunctionProto Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2789;  // TemplateSpecialization Local<v8::BigUint64Array>
struct _ty2790;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2791;  // FunctionProto Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2792;  // TemplateSpecialization Local<v8::BigUint64Array>
struct _ty2793;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2794;  // FunctionProto v8::BigUint64Array *(v8::Value *)
struct _ty2795;  // Pointer v8::BigUint64Array *
struct _ty2796;  // Record v8::DataView
struct _ty2797;  // FunctionProto Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _ty2798;  // TemplateSpecialization Local<v8::DataView>
struct _ty2799;  // TemplateSpecialization Local<v8::ArrayBuffer>
struct _ty2800;  // FunctionProto Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _ty2801;  // TemplateSpecialization Local<v8::DataView>
struct _ty2802;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2803;  // FunctionProto v8::DataView *(v8::Value *)
struct _ty2804;  // Pointer v8::DataView *
struct _ty2805;  // Record v8::SharedArrayBuffer::Contents
struct _ty2806;  // Typedef v8::SharedArrayBuffer::Contents::Allocator
struct _ty2807;  // Elaborated v8::ArrayBuffer::Allocator
struct _ty2808;  // Typedef v8::SharedArrayBuffer::Contents::DeleterCallback
struct _ty2809;  // Pointer v8::SharedArrayBuffer::Contents *
struct _ty2810;  // Pointer const v8::SharedArrayBuffer::Contents *
struct _ty2811;  // FunctionProto Allocator::AllocationMode () const
struct _ty2812;  // Elaborated Allocator::AllocationMode
struct _ty2813;  // FunctionProto v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _ty2814;  // Pointer const v8::SharedArrayBuffer *
struct _ty2815;  // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _ty2816;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2817;  // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _ty2818;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2819;  // FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _ty2820;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty2821;  // LValueReference const SharedArrayBuffer::Contents &
struct _ty2822;  // Elaborated SharedArrayBuffer::Contents
struct _ty2823;  // FunctionProto v8::SharedArrayBuffer::Contents ()
struct _ty2824;  // Pointer v8::SharedArrayBuffer *
struct _ty2825;  // FunctionProto v8::SharedArrayBuffer *(v8::Value *)
struct _ty2826;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _ty2827;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty2828;  // TemplateSpecialization Local<v8::Context>
struct _ty2829;  // Pointer const v8::Date *
struct _ty2830;  // FunctionProto v8::Date *(v8::Value *)
struct _ty2831;  // Pointer v8::Date *
struct _ty2832;  // FunctionProto Local<v8::Value> (v8::Isolate *, double)
struct _ty2833;  // TemplateSpecialization Local<v8::Value>
struct _ty2834;  // Pointer const v8::NumberObject *
struct _ty2835;  // FunctionProto v8::NumberObject *(v8::Value *)
struct _ty2836;  // Pointer v8::NumberObject *
struct _ty2837;  // FunctionProto Local<v8::Value> (v8::Isolate *, int64_t)
struct _ty2838;  // TemplateSpecialization Local<v8::Value>
struct _ty2839;  // FunctionProto Local<v8::BigInt> () const
struct _ty2840;  // TemplateSpecialization Local<v8::BigInt>
struct _ty2841;  // Pointer const v8::BigIntObject *
struct _ty2842;  // FunctionProto v8::BigIntObject *(v8::Value *)
struct _ty2843;  // Pointer v8::BigIntObject *
struct _ty2844;  // FunctionProto Local<v8::Value> (v8::Isolate *, bool)
struct _ty2845;  // TemplateSpecialization Local<v8::Value>
struct _ty2846;  // Pointer const v8::BooleanObject *
struct _ty2847;  // FunctionProto v8::BooleanObject *(v8::Value *)
struct _ty2848;  // Pointer v8::BooleanObject *
struct _ty2849;  // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _ty2850;  // TemplateSpecialization Local<v8::Value>
struct _ty2851;  // TemplateSpecialization Local<v8::String>
struct _ty2852;  // FunctionProto Local<v8::String> () const
struct _ty2853;  // TemplateSpecialization Local<v8::String>
struct _ty2854;  // Pointer const v8::StringObject *
struct _ty2855;  // FunctionProto v8::StringObject *(v8::Value *)
struct _ty2856;  // Pointer v8::StringObject *
struct _ty2857;  // FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _ty2858;  // TemplateSpecialization Local<v8::Value>
struct _ty2859;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2860;  // FunctionProto Local<v8::Symbol> () const
struct _ty2861;  // TemplateSpecialization Local<v8::Symbol>
struct _ty2862;  // Pointer const v8::SymbolObject *
struct _ty2863;  // FunctionProto v8::SymbolObject *(v8::Value *)
struct _ty2864;  // Pointer v8::SymbolObject *
struct _ty2865;  // Record v8::RegExp
struct _ty2866;  // Enum v8::RegExp::Flags
struct _ty2867;  // FunctionProto MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _ty2868;  // TemplateSpecialization MaybeLocal<v8::RegExp>
struct _ty2869;  // TemplateSpecialization Local<v8::Context>
struct _ty2870;  // TemplateSpecialization Local<v8::String>
struct _ty2871;  // FunctionProto Local<v8::String> () const
struct _ty2872;  // TemplateSpecialization Local<v8::String>
struct _ty2873;  // Pointer const v8::RegExp *
struct _ty2874;  // FunctionProto v8::RegExp::Flags () const
struct _ty2875;  // FunctionProto v8::RegExp *(v8::Value *)
struct _ty2876;  // Pointer v8::RegExp *
struct _ty2877;  // FunctionProto Local<v8::External> (v8::Isolate *, void *)
struct _ty2878;  // TemplateSpecialization Local<v8::External>
struct _ty2879;  // FunctionProto v8::External *(v8::Value *)
struct _ty2880;  // Pointer v8::External *
struct _ty2881;  // Pointer const v8::External *
struct _ty2882;  // Enum v8::Intrinsic
struct _ty2883;  // Record v8::Template
struct _ty2884;  // FunctionProto void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
struct _ty2885;  // TemplateSpecialization Local<v8::Name>
struct _ty2886;  // TemplateSpecialization Local<v8::Data>
struct _ty2887;  // Pointer v8::Template *
struct _ty2888;  // FunctionProto void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
struct _ty2889;  // TemplateSpecialization Local<v8::Private>
struct _ty2890;  // TemplateSpecialization Local<v8::Data>
struct _ty2891;  // FunctionProto void (v8::Isolate *, const char *, Local<v8::Data>)
struct _ty2892;  // TemplateSpecialization Local<v8::Data>
struct _ty2893;  // FunctionProto void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _ty2894;  // TemplateSpecialization Local<v8::Name>
struct _ty2895;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty2896;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty2897;  // FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ty2898;  // TemplateSpecialization Local<v8::String>
struct _ty2899;  // TemplateSpecialization Local<v8::Value>
struct _ty2900;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty2901;  // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _ty2902;  // TemplateSpecialization Local<v8::Name>
struct _ty2903;  // TemplateSpecialization Local<v8::Value>
struct _ty2904;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty2905;  // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _ty2906;  // TemplateSpecialization Local<v8::Name>
struct _ty2907;  // TemplateSpecialization Local<v8::Value>
struct _ty2908;  // FunctionProto void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
struct _ty2909;  // TemplateSpecialization Local<v8::Name>
struct _ty2910;  // Typedef v8::GenericNamedPropertyGetterCallback
struct _ty2911;  // Paren void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2912;  // TemplateSpecialization Local<v8::Name>
struct _ty2913;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2914;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2915;  // FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2916;  // Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2917;  // Typedef v8::GenericNamedPropertySetterCallback
struct _ty2918;  // Paren void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2919;  // TemplateSpecialization Local<v8::Name>
struct _ty2920;  // TemplateSpecialization Local<v8::Value>
struct _ty2921;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2922;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2923;  // FunctionProto void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2924;  // Pointer void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2925;  // Typedef v8::GenericNamedPropertyQueryCallback
struct _ty2926;  // Paren void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ty2927;  // TemplateSpecialization Local<v8::Name>
struct _ty2928;  // LValueReference const PropertyCallbackInfo<v8::Integer> &
struct _ty2929;  // TemplateSpecialization PropertyCallbackInfo<v8::Integer>
struct _ty2930;  // FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ty2931;  // Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _ty2932;  // Typedef v8::GenericNamedPropertyDeleterCallback
struct _ty2933;  // Paren void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ty2934;  // TemplateSpecialization Local<v8::Name>
struct _ty2935;  // LValueReference const PropertyCallbackInfo<v8::Boolean> &
struct _ty2936;  // TemplateSpecialization PropertyCallbackInfo<v8::Boolean>
struct _ty2937;  // FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ty2938;  // Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _ty2939;  // Typedef v8::GenericNamedPropertyEnumeratorCallback
struct _ty2940;  // Paren void (const PropertyCallbackInfo<v8::Array> &)
struct _ty2941;  // LValueReference const PropertyCallbackInfo<v8::Array> &
struct _ty2942;  // TemplateSpecialization PropertyCallbackInfo<v8::Array>
struct _ty2943;  // FunctionProto void (const PropertyCallbackInfo<v8::Array> &)
struct _ty2944;  // Pointer void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _ty2945;  // Typedef v8::GenericNamedPropertyDefinerCallback
struct _ty2946;  // Paren void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ty2947;  // TemplateSpecialization Local<v8::Name>
struct _ty2948;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2949;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2950;  // FunctionProto void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ty2951;  // Pointer void (*)(Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ty2952;  // Typedef v8::GenericNamedPropertyDescriptorCallback
struct _ty2953;  // Paren void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2954;  // TemplateSpecialization Local<v8::Name>
struct _ty2955;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2956;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2957;  // FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2958;  // Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2959;  // Typedef v8::IndexedPropertyGetterCallback
struct _ty2960;  // Paren void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ty2961;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2962;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2963;  // FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ty2964;  // Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ty2965;  // Typedef v8::IndexedPropertySetterCallback
struct _ty2966;  // Paren void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2967;  // TemplateSpecialization Local<v8::Value>
struct _ty2968;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2969;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2970;  // FunctionProto void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2971;  // Pointer void (*)(uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _ty2972;  // Typedef v8::IndexedPropertyQueryCallback
struct _ty2973;  // Paren void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ty2974;  // LValueReference const PropertyCallbackInfo<v8::Integer> &
struct _ty2975;  // TemplateSpecialization PropertyCallbackInfo<v8::Integer>
struct _ty2976;  // FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ty2977;  // Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _ty2978;  // Typedef v8::IndexedPropertyDeleterCallback
struct _ty2979;  // Paren void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ty2980;  // LValueReference const PropertyCallbackInfo<v8::Boolean> &
struct _ty2981;  // TemplateSpecialization PropertyCallbackInfo<v8::Boolean>
struct _ty2982;  // FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ty2983;  // Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _ty2984;  // Typedef v8::IndexedPropertyEnumeratorCallback
struct _ty2985;  // Paren void (const PropertyCallbackInfo<v8::Array> &)
struct _ty2986;  // LValueReference const PropertyCallbackInfo<v8::Array> &
struct _ty2987;  // TemplateSpecialization PropertyCallbackInfo<v8::Array>
struct _ty2988;  // FunctionProto void (const PropertyCallbackInfo<v8::Array> &)
struct _ty2989;  // Pointer void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _ty2990;  // Typedef v8::IndexedPropertyDefinerCallback
struct _ty2991;  // Paren void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ty2992;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2993;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty2994;  // FunctionProto void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ty2995;  // Pointer void (*)(uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _ty2996;  // Typedef v8::IndexedPropertyDescriptorCallback
struct _ty2997;  // Paren void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ty2998;  // LValueReference const PropertyCallbackInfo<v8::Value> &
struct _ty2999;  // TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _ty3000;  // FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ty3001;  // Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _ty3002;  // Enum v8::AccessType
struct _ty3003;  // Typedef v8::AccessCheckCallback
struct _ty3004;  // Paren bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ty3005;  // TemplateSpecialization Local<v8::Context>
struct _ty3006;  // TemplateSpecialization Local<v8::Object>
struct _ty3007;  // TemplateSpecialization Local<v8::Value>
struct _ty3008;  // FunctionProto bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ty3009;  // Pointer bool (*)(Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _ty3010;  // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _ty3011;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3012;  // TemplateSpecialization Local<v8::Value>
struct _ty3013;  // TemplateSpecialization Local<v8::Signature>
struct _ty3014;  // FunctionProto MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _ty3015;  // TemplateSpecialization MaybeLocal<v8::FunctionTemplate>
struct _ty3016;  // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
struct _ty3017;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3018;  // TemplateSpecialization Local<v8::Private>
struct _ty3019;  // TemplateSpecialization Local<v8::Value>
struct _ty3020;  // TemplateSpecialization Local<v8::Signature>
struct _ty3021;  // FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>)
struct _ty3022;  // TemplateSpecialization MaybeLocal<v8::Function>
struct _ty3023;  // TemplateSpecialization Local<v8::Context>
struct _ty3024;  // Pointer v8::FunctionTemplate *
struct _ty3025;  // FunctionProto MaybeLocal<v8::Object> ()
struct _ty3026;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty3027;  // FunctionProto void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
struct _ty3028;  // TemplateSpecialization Local<v8::Value>
struct _ty3029;  // FunctionProto Local<v8::ObjectTemplate> ()
struct _ty3030;  // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ty3031;  // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ty3032;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3033;  // FunctionProto Local<v8::ObjectTemplate> ()
struct _ty3034;  // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ty3035;  // FunctionProto void (Local<v8::FunctionTemplate>)
struct _ty3036;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3037;  // FunctionProto void (Local<v8::String>)
struct _ty3038;  // TemplateSpecialization Local<v8::String>
struct _ty3039;  // FunctionProto bool (Local<v8::Value>)
struct _ty3040;  // TemplateSpecialization Local<v8::Value>
struct _ty3041;  // FunctionProto v8::FunctionTemplate *(v8::Data *)
struct _ty3042;  // Enum v8::PropertyHandlerFlags
struct _ty3043;  // Record v8::NamedPropertyHandlerConfiguration
struct _ty3044;  // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ty3045;  // TemplateSpecialization Local<v8::Value>
struct _ty3046;  // Pointer v8::NamedPropertyHandlerConfiguration *
struct _ty3047;  // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ty3048;  // TemplateSpecialization Local<v8::Value>
struct _ty3049;  // FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ty3050;  // TemplateSpecialization Local<v8::Value>
struct _ty3051;  // TemplateSpecialization Local<v8::Value>
struct _ty3052;  // FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _ty3053;  // LValueReference const v8::NamedPropertyHandlerConfiguration &
struct _ty3054;  // FunctionProto void (v8::NamedPropertyHandlerConfiguration &&)
struct _ty3055;  // RValueReference v8::NamedPropertyHandlerConfiguration &&
struct _ty3056;  // Record v8::IndexedPropertyHandlerConfiguration
struct _ty3057;  // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ty3058;  // TemplateSpecialization Local<v8::Value>
struct _ty3059;  // Pointer v8::IndexedPropertyHandlerConfiguration *
struct _ty3060;  // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ty3061;  // TemplateSpecialization Local<v8::Value>
struct _ty3062;  // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _ty3063;  // TemplateSpecialization Local<v8::Value>
struct _ty3064;  // TemplateSpecialization Local<v8::Value>
struct _ty3065;  // FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ty3066;  // LValueReference const v8::IndexedPropertyHandlerConfiguration &
struct _ty3067;  // FunctionProto void (v8::IndexedPropertyHandlerConfiguration &&)
struct _ty3068;  // RValueReference v8::IndexedPropertyHandlerConfiguration &&
struct _ty3069;  // FunctionProto Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ty3070;  // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ty3071;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3072;  // FunctionProto MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _ty3073;  // TemplateSpecialization MaybeLocal<v8::ObjectTemplate>
struct _ty3074;  // FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>)
struct _ty3075;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty3076;  // TemplateSpecialization Local<v8::Context>
struct _ty3077;  // Pointer v8::ObjectTemplate *
struct _ty3078;  // FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ty3079;  // TemplateSpecialization Local<v8::String>
struct _ty3080;  // TemplateSpecialization Local<v8::Value>
struct _ty3081;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty3082;  // FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _ty3083;  // TemplateSpecialization Local<v8::Name>
struct _ty3084;  // TemplateSpecialization Local<v8::Value>
struct _ty3085;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty3086;  // FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _ty3087;  // FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _ty3088;  // TemplateSpecialization Local<v8::Value>
struct _ty3089;  // FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _ty3090;  // FunctionProto void (v8::FunctionCallback, Local<v8::Value>)
struct _ty3091;  // TemplateSpecialization Local<v8::Value>
struct _ty3092;  // FunctionProto void (v8::AccessCheckCallback, Local<v8::Value>)
struct _ty3093;  // TemplateSpecialization Local<v8::Value>
struct _ty3094;  // FunctionProto void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _ty3095;  // TemplateSpecialization Local<v8::Value>
struct _ty3096;  // FunctionProto v8::ObjectTemplate *(v8::Data *)
struct _ty3097;  // FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ty3098;  // TemplateSpecialization Local<v8::Signature>
struct _ty3099;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3100;  // FunctionProto v8::Signature *(v8::Data *)
struct _ty3101;  // Pointer v8::Signature *
struct _ty3102;  // FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _ty3103;  // TemplateSpecialization Local<v8::AccessorSignature>
struct _ty3104;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3105;  // FunctionProto v8::AccessorSignature *(v8::Data *)
struct _ty3106;  // Pointer v8::AccessorSignature *
struct _ty3107;  // Record v8::Extension
struct _ty3108;  // FunctionProto void (const char *, const char *, int, const char **, int)
struct _ty3109;  // Pointer const char **
struct _ty3110;  // Pointer v8::Extension *
struct _ty3111;  // FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
struct _ty3112;  // TemplateSpecialization Local<v8::FunctionTemplate>
struct _ty3113;  // TemplateSpecialization Local<v8::String>
struct _ty3114;  // Pointer const v8::Extension *
struct _ty3115;  // FunctionProto const String::ExternalOneByteStringResource *() const
struct _ty3116;  // Pointer const String::ExternalOneByteStringResource *
struct _ty3117;  // Elaborated String::ExternalOneByteStringResource
struct _ty3118;  // FunctionProto const char **() const
struct _ty3119;  // FunctionProto void (const v8::Extension &)
struct _ty3120;  // LValueReference const v8::Extension &
struct _ty3121;  // FunctionProto void (std::unique_ptr<Extension>)
struct _ty3122;  // Elaborated std::unique_ptr<Extension>
struct _ty3123;  // TemplateSpecialization unique_ptr<v8::Extension>
struct _ty3124;  // Record std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >
struct _ty3125;  // FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _ty3126;  // TemplateSpecialization Local<v8::Primitive>
struct _ty3127;  // FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _ty3128;  // TemplateSpecialization Local<v8::Primitive>
struct _ty3129;  // FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _ty3130;  // TemplateSpecialization Local<v8::Boolean>
struct _ty3131;  // FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _ty3132;  // TemplateSpecialization Local<v8::Boolean>
struct _ty3133;  // Record v8::ResourceConstraints
struct _ty3134;  // FunctionProto void (size_t, size_t)
struct _ty3135;  // Pointer v8::ResourceConstraints *
struct _ty3136;  // FunctionProto void (uint64_t, uint64_t)
struct _ty3137;  // FunctionProto uint32_t *() const
struct _ty3138;  // Pointer const v8::ResourceConstraints *
struct _ty3139;  // FunctionProto void (uint32_t *)
struct _ty3140;  // FunctionProto void (size_t)
struct _ty3141;  // FunctionProto void (const v8::ResourceConstraints &)
struct _ty3142;  // LValueReference const v8::ResourceConstraints &
struct _ty3143;  // FunctionProto void (v8::ResourceConstraints &&)
struct _ty3144;  // RValueReference v8::ResourceConstraints &&
struct _ty3145;  // Typedef v8::FatalErrorCallback
struct _ty3146;  // Paren void (const char *, const char *)
struct _ty3147;  // FunctionProto void (const char *, const char *)
struct _ty3148;  // Pointer void (*)(const char *, const char *)
struct _ty3149;  // Typedef v8::OOMErrorCallback
struct _ty3150;  // Paren void (const char *, bool)
struct _ty3151;  // FunctionProto void (const char *, bool)
struct _ty3152;  // Pointer void (*)(const char *, bool)
struct _ty3153;  // Typedef v8::DcheckErrorCallback
struct _ty3154;  // Paren void (const char *, int, const char *)
struct _ty3155;  // FunctionProto void (const char *, int, const char *)
struct _ty3156;  // Pointer void (*)(const char *, int, const char *)
struct _ty3157;  // Typedef v8::MessageCallback
struct _ty3158;  // Paren void (Local<v8::Message>, Local<v8::Value>)
struct _ty3159;  // TemplateSpecialization Local<v8::Message>
struct _ty3160;  // TemplateSpecialization Local<v8::Value>
struct _ty3161;  // FunctionProto void (Local<v8::Message>, Local<v8::Value>)
struct _ty3162;  // Pointer void (*)(Local<v8::Message>, Local<v8::Value>)
struct _ty3163;  // Typedef v8::LogEventCallback
struct _ty3164;  // Paren void (const char *, int)
struct _ty3165;  // FunctionProto void (const char *, int)
struct _ty3166;  // Pointer void (*)(const char *, int)
struct _ty3167;  // Record v8::Exception
struct _ty3168;  // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ty3169;  // TemplateSpecialization Local<v8::Value>
struct _ty3170;  // TemplateSpecialization Local<v8::String>
struct _ty3171;  // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ty3172;  // TemplateSpecialization Local<v8::Value>
struct _ty3173;  // TemplateSpecialization Local<v8::String>
struct _ty3174;  // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ty3175;  // TemplateSpecialization Local<v8::Value>
struct _ty3176;  // TemplateSpecialization Local<v8::String>
struct _ty3177;  // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ty3178;  // TemplateSpecialization Local<v8::Value>
struct _ty3179;  // TemplateSpecialization Local<v8::String>
struct _ty3180;  // FunctionProto Local<v8::Value> (Local<v8::String>)
struct _ty3181;  // TemplateSpecialization Local<v8::Value>
struct _ty3182;  // TemplateSpecialization Local<v8::String>
struct _ty3183;  // FunctionProto Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _ty3184;  // TemplateSpecialization Local<v8::Message>
struct _ty3185;  // TemplateSpecialization Local<v8::Value>
struct _ty3186;  // FunctionProto Local<v8::StackTrace> (Local<v8::Value>)
struct _ty3187;  // TemplateSpecialization Local<v8::StackTrace>
struct _ty3188;  // TemplateSpecialization Local<v8::Value>
struct _ty3189;  // Typedef v8::CounterLookupCallback
struct _ty3190;  // Paren int *(const char *)
struct _ty3191;  // FunctionProto int *(const char *)
struct _ty3192;  // Pointer int *(*)(const char *)
struct _ty3193;  // Typedef v8::CreateHistogramCallback
struct _ty3194;  // Paren void *(const char *, int, int, size_t)
struct _ty3195;  // FunctionProto void *(const char *, int, int, size_t)
struct _ty3196;  // Pointer void *(*)(const char *, int, int, size_t)
struct _ty3197;  // Typedef v8::AddHistogramSampleCallback
struct _ty3198;  // Paren void (void *, int)
struct _ty3199;  // FunctionProto void (void *, int)
struct _ty3200;  // Pointer void (*)(void *, int)
struct _ty3201;  // Typedef v8::BeforeCallEnteredCallback
struct _ty3202;  // Paren void (v8::Isolate *)
struct _ty3203;  // Pointer void (*)(v8::Isolate *)
struct _ty3204;  // Typedef v8::CallCompletedCallback
struct _ty3205;  // Typedef v8::HostImportModuleDynamicallyCallback
struct _ty3206;  // Paren MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ty3207;  // TemplateSpecialization MaybeLocal<v8::Promise>
struct _ty3208;  // TemplateSpecialization Local<v8::Context>
struct _ty3209;  // TemplateSpecialization Local<v8::ScriptOrModule>
struct _ty3210;  // TemplateSpecialization Local<v8::String>
struct _ty3211;  // FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ty3212;  // Pointer MaybeLocal<v8::Promise> (*)(Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _ty3213;  // Typedef v8::HostInitializeImportMetaObjectCallback
struct _ty3214;  // Paren void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ty3215;  // TemplateSpecialization Local<v8::Context>
struct _ty3216;  // TemplateSpecialization Local<v8::Module>
struct _ty3217;  // TemplateSpecialization Local<v8::Object>
struct _ty3218;  // FunctionProto void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ty3219;  // Pointer void (*)(Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _ty3220;  // Typedef v8::PrepareStackTraceCallback
struct _ty3221;  // Paren MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ty3222;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty3223;  // TemplateSpecialization Local<v8::Context>
struct _ty3224;  // TemplateSpecialization Local<v8::Value>
struct _ty3225;  // TemplateSpecialization Local<v8::Array>
struct _ty3226;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ty3227;  // Pointer MaybeLocal<v8::Value> (*)(Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _ty3228;  // Enum v8::PromiseHookType
struct _ty3229;  // Typedef v8::PromiseHook
struct _ty3230;  // Paren void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ty3231;  // TemplateSpecialization Local<v8::Promise>
struct _ty3232;  // TemplateSpecialization Local<v8::Value>
struct _ty3233;  // FunctionProto void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ty3234;  // Pointer void (*)(v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _ty3235;  // Enum v8::PromiseRejectEvent
struct _ty3236;  // Record v8::PromiseRejectMessage
struct _ty3237;  // FunctionProto void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
struct _ty3238;  // TemplateSpecialization Local<v8::Promise>
struct _ty3239;  // TemplateSpecialization Local<v8::Value>
struct _ty3240;  // Pointer v8::PromiseRejectMessage *
struct _ty3241;  // FunctionProto Local<v8::Promise> () const
struct _ty3242;  // TemplateSpecialization Local<v8::Promise>
struct _ty3243;  // Pointer const v8::PromiseRejectMessage *
struct _ty3244;  // FunctionProto v8::PromiseRejectEvent () const
struct _ty3245;  // FunctionProto Local<v8::Value> () const
struct _ty3246;  // TemplateSpecialization Local<v8::Value>
struct _ty3247;  // Typedef v8::PromiseRejectCallback
struct _ty3248;  // Paren void (v8::PromiseRejectMessage)
struct _ty3249;  // FunctionProto void (v8::PromiseRejectMessage)
struct _ty3250;  // Pointer void (*)(v8::PromiseRejectMessage)
struct _ty3251;  // Typedef v8::MicrotasksCompletedCallback
struct _ty3252;  // Typedef v8::MicrotasksCompletedCallbackWithData
struct _ty3253;  // Paren void (v8::Isolate *, void *)
struct _ty3254;  // FunctionProto void (v8::Isolate *, void *)
struct _ty3255;  // Pointer void (*)(v8::Isolate *, void *)
struct _ty3256;  // Typedef v8::MicrotaskCallback
struct _ty3257;  // Paren void (void *)
struct _ty3258;  // Pointer void (*)(void *)
struct _ty3259;  // Enum v8::MicrotasksPolicy
struct _ty3260;  // FunctionProto std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
struct _ty3261;  // Elaborated std::unique_ptr<MicrotaskQueue>
struct _ty3262;  // TemplateSpecialization unique_ptr<v8::MicrotaskQueue>
struct _ty3263;  // Record std::unique_ptr<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >
struct _ty3264;  // FunctionProto void ()
struct _ty3265;  // Pointer v8::MicrotaskQueue *
struct _ty3266;  // FunctionProto void (v8::Isolate *, Local<v8::Function>)
struct _ty3267;  // TemplateSpecialization Local<v8::Function>
struct _ty3268;  // FunctionProto void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _ty3269;  // Pointer v8::Isolate *
struct _ty3270;  // Elaborated v8::Isolate
struct _ty3271;  // FunctionProto void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _ty3272;  // Pointer const v8::MicrotaskQueue *
struct _ty3273;  // FunctionProto void (const v8::MicrotaskQueue &)
struct _ty3274;  // LValueReference const v8::MicrotaskQueue &
struct _ty3275;  // FunctionProto v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _ty3276;  // LValueReference v8::MicrotaskQueue &
struct _ty3277;  // Record v8::MicrotasksScope
struct _ty3278;  // Enum v8::MicrotasksScope::Type
struct _ty3279;  // FunctionProto void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _ty3280;  // Pointer v8::MicrotasksScope *
struct _ty3281;  // FunctionProto void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
struct _ty3282;  // FunctionProto void ()
struct _ty3283;  // FunctionProto bool (v8::Isolate *)
struct _ty3284;  // FunctionProto void (const v8::MicrotasksScope &)
struct _ty3285;  // LValueReference const v8::MicrotasksScope &
struct _ty3286;  // FunctionProto v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _ty3287;  // LValueReference v8::MicrotasksScope &
struct _ty3288;  // Typedef v8::FailedAccessCheckCallback
struct _ty3289;  // Paren void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ty3290;  // TemplateSpecialization Local<v8::Object>
struct _ty3291;  // TemplateSpecialization Local<v8::Value>
struct _ty3292;  // FunctionProto void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ty3293;  // Pointer void (*)(Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _ty3294;  // Typedef v8::AllowCodeGenerationFromStringsCallback
struct _ty3295;  // Paren bool (Local<v8::Context>, Local<v8::String>)
struct _ty3296;  // TemplateSpecialization Local<v8::Context>
struct _ty3297;  // TemplateSpecialization Local<v8::String>
struct _ty3298;  // FunctionProto bool (Local<v8::Context>, Local<v8::String>)
struct _ty3299;  // Pointer bool (*)(Local<v8::Context>, Local<v8::String>)
struct _ty3300;  // Typedef v8::ExtensionCallback
struct _ty3301;  // Paren bool (const FunctionCallbackInfo<v8::Value> &)
struct _ty3302;  // LValueReference const FunctionCallbackInfo<v8::Value> &
struct _ty3303;  // TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _ty3304;  // FunctionProto bool (const FunctionCallbackInfo<v8::Value> &)
struct _ty3305;  // Pointer bool (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ty3306;  // Typedef v8::AllowWasmCodeGenerationCallback
struct _ty3307;  // Paren bool (Local<v8::Context>, Local<v8::String>)
struct _ty3308;  // TemplateSpecialization Local<v8::Context>
struct _ty3309;  // TemplateSpecialization Local<v8::String>
struct _ty3310;  // FunctionProto bool (Local<v8::Context>, Local<v8::String>)
struct _ty3311;  // Pointer bool (*)(Local<v8::Context>, Local<v8::String>)
struct _ty3312;  // Typedef v8::ApiImplementationCallback
struct _ty3313;  // Paren void (const FunctionCallbackInfo<v8::Value> &)
struct _ty3314;  // LValueReference const FunctionCallbackInfo<v8::Value> &
struct _ty3315;  // TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _ty3316;  // FunctionProto void (const FunctionCallbackInfo<v8::Value> &)
struct _ty3317;  // Pointer void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ty3318;  // Typedef v8::WasmStreamingCallback
struct _ty3319;  // Paren void (const FunctionCallbackInfo<v8::Value> &)
struct _ty3320;  // LValueReference const FunctionCallbackInfo<v8::Value> &
struct _ty3321;  // TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _ty3322;  // FunctionProto void (const FunctionCallbackInfo<v8::Value> &)
struct _ty3323;  // Pointer void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _ty3324;  // Typedef v8::WasmThreadsEnabledCallback
struct _ty3325;  // Paren bool (Local<v8::Context>)
struct _ty3326;  // TemplateSpecialization Local<v8::Context>
struct _ty3327;  // FunctionProto bool (Local<v8::Context>)
struct _ty3328;  // Pointer bool (*)(Local<v8::Context>)
struct _ty3329;  // Enum v8::GCType
struct _ty3330;  // Enum v8::GCCallbackFlags
struct _ty3331;  // Typedef v8::GCCallback
struct _ty3332;  // Paren void (v8::GCType, v8::GCCallbackFlags)
struct _ty3333;  // FunctionProto void (v8::GCType, v8::GCCallbackFlags)
struct _ty3334;  // Pointer void (*)(v8::GCType, v8::GCCallbackFlags)
struct _ty3335;  // Typedef v8::InterruptCallback
struct _ty3336;  // Typedef v8::NearHeapLimitCallback
struct _ty3337;  // Paren size_t (void *, size_t, size_t)
struct _ty3338;  // FunctionProto size_t (void *, size_t, size_t)
struct _ty3339;  // Pointer size_t (*)(void *, size_t, size_t)
struct _ty3340;  // Record v8::HeapStatistics
struct _ty3341;  // Pointer v8::HeapStatistics *
struct _ty3342;  // Record v8::HeapSpaceStatistics
struct _ty3343;  // Pointer v8::HeapSpaceStatistics *
struct _ty3344;  // FunctionProto const char *()
struct _ty3345;  // Record v8::HeapObjectStatistics
struct _ty3346;  // Pointer v8::HeapObjectStatistics *
struct _ty3347;  // Record v8::HeapCodeStatistics
struct _ty3348;  // Pointer v8::HeapCodeStatistics *
struct _ty3349;  // Record v8::JitCodeEvent
struct _ty3350;  // Enum v8::JitCodeEvent::EventType
struct _ty3351;  // Enum v8::JitCodeEvent::PositionType
struct _ty3352;  // Enum v8::JitCodeEvent::CodeType
struct _ty3353;  // TemplateSpecialization Local<v8::UnboundScript>
struct _ty3354;  // Record v8::JitCodeEvent::name_t
struct _ty3355;  // Record v8::JitCodeEvent::line_info_t
struct _ty3356;  // Record v8::JitCodeEvent::(anonymous union at D:\gen8/v8/include/v8.h:7072:3)
struct _ty3357;  // Elaborated struct name_t
struct _ty3358;  // Elaborated struct line_info_t
struct _ty3359;  // Enum v8::RAILMode
struct _ty3360;  // Enum v8::JitCodeEventOptions
struct _ty3361;  // Typedef v8::JitCodeEventHandler
struct _ty3362;  // Paren void (const v8::JitCodeEvent *)
struct _ty3363;  // Pointer const v8::JitCodeEvent *
struct _ty3364;  // FunctionProto void (const v8::JitCodeEvent *)
struct _ty3365;  // Pointer void (*)(const v8::JitCodeEvent *)
struct _ty3366;  // Typedef v8::UnhandledExceptionCallback
struct _ty3367;  // Paren int (_EXCEPTION_POINTERS *)
struct _ty3368;  // Pointer _EXCEPTION_POINTERS *
struct _ty3369;  // Record _EXCEPTION_POINTERS
struct _ty3370;  // FunctionProto int (_EXCEPTION_POINTERS *)
struct _ty3371;  // Pointer int (*)(_EXCEPTION_POINTERS *)
struct _ty3372;  // Record v8::ExternalResourceVisitor
struct _ty3373;  // FunctionProto void ()
struct _ty3374;  // Pointer v8::ExternalResourceVisitor *
struct _ty3375;  // FunctionProto void (Local<v8::String>)
struct _ty3376;  // TemplateSpecialization Local<v8::String>
struct _ty3377;  // FunctionProto v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
struct _ty3378;  // LValueReference v8::ExternalResourceVisitor &
struct _ty3379;  // LValueReference const v8::ExternalResourceVisitor &
struct _ty3380;  // Record v8::PersistentHandleVisitor
struct _ty3381;  // FunctionProto void ()
struct _ty3382;  // Pointer v8::PersistentHandleVisitor *
struct _ty3383;  // FunctionProto void (Persistent<v8::Value> *, uint16_t)
struct _ty3384;  // Pointer Persistent<v8::Value> *
struct _ty3385;  // TemplateSpecialization Persistent<v8::Value>
struct _ty3386;  // FunctionProto v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
struct _ty3387;  // LValueReference v8::PersistentHandleVisitor &
struct _ty3388;  // LValueReference const v8::PersistentHandleVisitor &
struct _ty3389;  // Enum v8::MemoryPressureLevel
struct _ty3390;  // Record v8::EmbedderHeapTracer
struct _ty3391;  // Enum v8::EmbedderHeapTracer::TraceFlags
struct _ty3392;  // Enum v8::EmbedderHeapTracer::EmbedderStackState
struct _ty3393;  // Record v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _ty3394;  // FunctionProto void ()
struct _ty3395;  // Pointer v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _ty3396;  // FunctionProto void (const TracedGlobal<v8::Value> &)
struct _ty3397;  // LValueReference const TracedGlobal<v8::Value> &
struct _ty3398;  // TemplateSpecialization TracedGlobal<v8::Value>
struct _ty3399;  // FunctionProto v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _ty3400;  // LValueReference v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ty3401;  // LValueReference const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _ty3402;  // Record v8::EmbedderHeapTracer::TraceSummary
struct _ty3403;  // FunctionProto void ()
struct _ty3404;  // Pointer v8::EmbedderHeapTracer *
struct _ty3405;  // FunctionProto void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _ty3406;  // FunctionProto void (const std::vector<std::pair<void *, void *> > &)
struct _ty3407;  // LValueReference const std::vector<std::pair<void *, void *> > &
struct _ty3408;  // Elaborated std::vector<std::pair<void *, void *> >
struct _ty3409;  // TemplateSpecialization vector<std::pair<void *, void *> >
struct _ty3410;  // Record std::vector<std::pair<void *, void *>, std::allocator<std::pair<void *, void *> > >
struct _ty3411;  // FunctionProto void (const TracedGlobal<v8::Value> &)
struct _ty3412;  // LValueReference const TracedGlobal<v8::Value> &
struct _ty3413;  // TemplateSpecialization TracedGlobal<v8::Value>
struct _ty3414;  // FunctionProto void (v8::EmbedderHeapTracer::TraceFlags)
struct _ty3415;  // FunctionProto bool (double)
struct _ty3416;  // FunctionProto void (v8::EmbedderHeapTracer::TraceSummary *)
struct _ty3417;  // Pointer v8::EmbedderHeapTracer::TraceSummary *
struct _ty3418;  // FunctionProto void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _ty3419;  // FunctionProto bool (const v8::TracedGlobal<v8::Value> &)
struct _ty3420;  // LValueReference const v8::TracedGlobal<v8::Value> &
struct _ty3421;  // Elaborated v8::TracedGlobal<v8::Value>
struct _ty3422;  // TemplateSpecialization TracedGlobal<v8::Value>
struct _ty3423;  // FunctionProto v8::Isolate *() const
struct _ty3424;  // Pointer const v8::EmbedderHeapTracer *
struct _ty3425;  // FunctionProto v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _ty3426;  // LValueReference v8::EmbedderHeapTracer &
struct _ty3427;  // LValueReference const v8::EmbedderHeapTracer &
struct _ty3428;  // Record v8::SerializeInternalFieldsCallback
struct _ty3429;  // Typedef v8::SerializeInternalFieldsCallback::CallbackFunction
struct _ty3430;  // Paren v8::StartupData (Local<v8::Object>, int, void *)
struct _ty3431;  // TemplateSpecialization Local<v8::Object>
struct _ty3432;  // FunctionProto v8::StartupData (Local<v8::Object>, int, void *)
struct _ty3433;  // Pointer v8::StartupData (*)(Local<v8::Object>, int, void *)
struct _ty3434;  // FunctionProto void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _ty3435;  // Pointer v8::SerializeInternalFieldsCallback *
struct _ty3436;  // FunctionProto void (const v8::SerializeInternalFieldsCallback &)
struct _ty3437;  // LValueReference const v8::SerializeInternalFieldsCallback &
struct _ty3438;  // FunctionProto void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _ty3439;  // RValueReference v8::SerializeInternalFieldsCallback &&
struct _ty3440;  // Typedef v8::SerializeEmbedderFieldsCallback
struct _ty3441;  // Record v8::DeserializeInternalFieldsCallback
struct _ty3442;  // Typedef v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _ty3443;  // Paren void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ty3444;  // TemplateSpecialization Local<v8::Object>
struct _ty3445;  // FunctionProto void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ty3446;  // Pointer void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _ty3447;  // FunctionProto void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _ty3448;  // Pointer v8::DeserializeInternalFieldsCallback *
struct _ty3449;  // Pointer void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _ty3450;  // Paren void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ty3451;  // TemplateSpecialization Local<v8::Object>
struct _ty3452;  // FunctionProto void (Local<v8::Object>, int, v8::StartupData, void *)
struct _ty3453;  // FunctionProto void (const v8::DeserializeInternalFieldsCallback &)
struct _ty3454;  // LValueReference const v8::DeserializeInternalFieldsCallback &
struct _ty3455;  // FunctionProto void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _ty3456;  // RValueReference v8::DeserializeInternalFieldsCallback &&
struct _ty3457;  // Typedef v8::DeserializeEmbedderFieldsCallback
struct _ty3458;  // Record v8::Isolate::CreateParams
struct _ty3459;  // Pointer v8::Isolate::CreateParams *
struct _ty3460;  // Pointer v8::StartupData *
struct _ty3461;  // Pointer ArrayBuffer::Allocator *
struct _ty3462;  // Elaborated ArrayBuffer::Allocator
struct _ty3463;  // Pointer const intptr_t *
struct _ty3464;  // Typedef intptr_t
struct _ty3465;  // Record v8::Isolate::Scope
struct _ty3466;  // Pointer v8::Isolate::Scope *
struct _ty3467;  // FunctionProto void (const v8::Isolate::Scope &)
struct _ty3468;  // LValueReference const v8::Isolate::Scope &
struct _ty3469;  // FunctionProto v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _ty3470;  // LValueReference v8::Isolate::Scope &
struct _ty3471;  // Record v8::Isolate::DisallowJavascriptExecutionScope
struct _ty3472;  // Enum v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _ty3473;  // FunctionProto void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _ty3474;  // Pointer v8::Isolate::DisallowJavascriptExecutionScope *
struct _ty3475;  // FunctionProto void ()
struct _ty3476;  // FunctionProto void (const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ty3477;  // LValueReference const v8::Isolate::DisallowJavascriptExecutionScope &
struct _ty3478;  // FunctionProto v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _ty3479;  // LValueReference v8::Isolate::DisallowJavascriptExecutionScope &
struct _ty3480;  // Record v8::Isolate::AllowJavascriptExecutionScope
struct _ty3481;  // Pointer v8::Isolate::AllowJavascriptExecutionScope *
struct _ty3482;  // FunctionProto void ()
struct _ty3483;  // FunctionProto void (const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ty3484;  // LValueReference const v8::Isolate::AllowJavascriptExecutionScope &
struct _ty3485;  // FunctionProto v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _ty3486;  // LValueReference v8::Isolate::AllowJavascriptExecutionScope &
struct _ty3487;  // Record v8::Isolate::SuppressMicrotaskExecutionScope
struct _ty3488;  // Pointer v8::Isolate::SuppressMicrotaskExecutionScope *
struct _ty3489;  // FunctionProto void (v8::MicrotaskQueue *)
struct _ty3490;  // FunctionProto void ()
struct _ty3491;  // FunctionProto void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ty3492;  // LValueReference const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ty3493;  // FunctionProto v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _ty3494;  // LValueReference v8::Isolate::SuppressMicrotaskExecutionScope &
struct _ty3495;  // Record v8::Isolate::SafeForTerminationScope
struct _ty3496;  // FunctionProto void (v8::Isolate *)
struct _ty3497;  // Pointer v8::Isolate::SafeForTerminationScope *
struct _ty3498;  // FunctionProto void ()
struct _ty3499;  // FunctionProto void (const v8::Isolate::SafeForTerminationScope &)
struct _ty3500;  // LValueReference const v8::Isolate::SafeForTerminationScope &
struct _ty3501;  // FunctionProto v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
struct _ty3502;  // LValueReference v8::Isolate::SafeForTerminationScope &
struct _ty3503;  // Enum v8::Isolate::GarbageCollectionType
struct _ty3504;  // Enum v8::Isolate::UseCounterFeature
struct _ty3505;  // Enum v8::Isolate::MessageErrorLevel
struct _ty3506;  // Typedef v8::Isolate::UseCounterCallback
struct _ty3507;  // Paren void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ty3508;  // FunctionProto void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ty3509;  // Pointer void (*)(v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _ty3510;  // FunctionProto void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _ty3511;  // LValueReference const v8::Isolate::CreateParams &
struct _ty3512;  // FunctionProto v8::Isolate *(const v8::Isolate::CreateParams &)
struct _ty3513;  // Typedef v8::Isolate::AbortOnUncaughtExceptionCallback
struct _ty3514;  // Paren bool (v8::Isolate *)
struct _ty3515;  // Pointer bool (*)(v8::Isolate *)
struct _ty3516;  // FunctionProto void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _ty3517;  // FunctionProto void (v8::HostImportModuleDynamicallyCallback)
struct _ty3518;  // FunctionProto void (v8::HostInitializeImportMetaObjectCallback)
struct _ty3519;  // FunctionProto void (v8::PrepareStackTraceCallback)
struct _ty3520;  // FunctionProto void (v8::MemoryPressureLevel)
struct _ty3521;  // FunctionProto void (uint32_t, void *)
struct _ty3522;  // FunctionProto void *(uint32_t)
struct _ty3523;  // TemplateTypeParm T
struct _ty3524;  // FunctionProto MaybeLocal<T> (size_t)
struct _ty3525;  // TemplateSpecialization MaybeLocal<T>
struct _ty3526;  // FunctionProto void (v8::HeapStatistics *)
struct _ty3527;  // FunctionProto bool (v8::HeapSpaceStatistics *, size_t)
struct _ty3528;  // FunctionProto bool (v8::HeapObjectStatistics *, size_t)
struct _ty3529;  // FunctionProto bool (v8::HeapCodeStatistics *)
struct _ty3530;  // FunctionProto void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
struct _ty3531;  // LValueReference const v8::RegisterState &
struct _ty3532;  // Pointer v8::SampleInfo *
struct _ty3533;  // FunctionProto int64_t (int64_t)
struct _ty3534;  // FunctionProto v8::HeapProfiler *()
struct _ty3535;  // Pointer v8::HeapProfiler *
struct _ty3536;  // FunctionProto ArrayBuffer::Allocator *()
struct _ty3537;  // FunctionProto Local<v8::Context> ()
struct _ty3538;  // TemplateSpecialization Local<v8::Context>
struct _ty3539;  // FunctionProto Local<v8::Context> ()
struct _ty3540;  // TemplateSpecialization Local<v8::Context>
struct _ty3541;  // FunctionProto Local<v8::Context> ()
struct _ty3542;  // TemplateSpecialization Local<v8::Context>
struct _ty3543;  // FunctionProto Local<v8::Context> ()
struct _ty3544;  // TemplateSpecialization Local<v8::Context>
struct _ty3545;  // FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _ty3546;  // TemplateSpecialization Local<v8::Value>
struct _ty3547;  // TemplateSpecialization Local<v8::Value>
struct _ty3548;  // Typedef v8::Isolate::GCCallback
struct _ty3549;  // Paren void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ty3550;  // FunctionProto void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ty3551;  // Pointer void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _ty3552;  // Typedef v8::Isolate::GCCallbackWithData
struct _ty3553;  // Paren void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ty3554;  // FunctionProto void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ty3555;  // Pointer void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _ty3556;  // FunctionProto void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
struct _ty3557;  // FunctionProto void (v8::Isolate::GCCallback, v8::GCType)
struct _ty3558;  // FunctionProto void (v8::Isolate::GCCallbackWithData, void *)
struct _ty3559;  // FunctionProto void (v8::Isolate::GCCallback)
struct _ty3560;  // FunctionProto void (v8::EmbedderHeapTracer *)
struct _ty3561;  // FunctionProto v8::EmbedderHeapTracer *()
struct _ty3562;  // Enum v8::Isolate::AtomicsWaitEvent
struct _ty3563;  // Record v8::Isolate::AtomicsWaitWakeHandle
struct _ty3564;  // Pointer v8::Isolate::AtomicsWaitWakeHandle *
struct _ty3565;  // Typedef v8::Isolate::AtomicsWaitCallback
struct _ty3566;  // Paren void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ty3567;  // TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _ty3568;  // FunctionProto void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ty3569;  // Pointer void (*)(v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _ty3570;  // FunctionProto void (v8::Isolate::AtomicsWaitCallback, void *)
struct _ty3571;  // Typedef v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _ty3572;  // Paren size_t ()
struct _ty3573;  // Pointer size_t (*)()
struct _ty3574;  // FunctionProto void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _ty3575;  // FunctionProto void (v8::InterruptCallback, void *)
struct _ty3576;  // FunctionProto void (v8::Isolate::GarbageCollectionType)
struct _ty3577;  // FunctionProto void (v8::LogEventCallback)
struct _ty3578;  // FunctionProto void (v8::BeforeCallEnteredCallback)
struct _ty3579;  // FunctionProto void (v8::CallCompletedCallback)
struct _ty3580;  // FunctionProto void (v8::PromiseHook)
struct _ty3581;  // FunctionProto void (v8::PromiseRejectCallback)
struct _ty3582;  // FunctionProto void (Local<v8::Function>)
struct _ty3583;  // TemplateSpecialization Local<v8::Function>
struct _ty3584;  // FunctionProto void (v8::MicrotaskCallback, void *)
struct _ty3585;  // FunctionProto void (v8::MicrotasksPolicy)
struct _ty3586;  // FunctionProto v8::MicrotasksPolicy () const
struct _ty3587;  // Pointer const v8::Isolate *
struct _ty3588;  // FunctionProto void (v8::MicrotasksCompletedCallback)
struct _ty3589;  // FunctionProto void (v8::Isolate::UseCounterCallback)
struct _ty3590;  // FunctionProto void (v8::CounterLookupCallback)
struct _ty3591;  // FunctionProto void (v8::CreateHistogramCallback)
struct _ty3592;  // FunctionProto void (v8::AddHistogramSampleCallback)
struct _ty3593;  // FunctionProto int (bool)
struct _ty3594;  // FunctionProto void (v8::RAILMode)
struct _ty3595;  // FunctionProto void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _ty3596;  // FunctionProto void (uintptr_t)
struct _ty3597;  // FunctionProto void (void **, size_t *)
struct _ty3598;  // FunctionProto v8::UnwindState ()
struct _ty3599;  // FunctionProto void (v8::FatalErrorCallback)
struct _ty3600;  // FunctionProto void (v8::OOMErrorCallback)
struct _ty3601;  // FunctionProto void (v8::NearHeapLimitCallback, void *)
struct _ty3602;  // FunctionProto void (v8::NearHeapLimitCallback, size_t)
struct _ty3603;  // FunctionProto void (v8::AllowCodeGenerationFromStringsCallback)
struct _ty3604;  // FunctionProto void (v8::AllowWasmCodeGenerationCallback)
struct _ty3605;  // FunctionProto void (v8::ExtensionCallback)
struct _ty3606;  // FunctionProto void (v8::WasmStreamingCallback)
struct _ty3607;  // FunctionProto void (v8::WasmThreadsEnabledCallback)
struct _ty3608;  // FunctionProto bool (v8::MessageCallback, Local<v8::Value>)
struct _ty3609;  // TemplateSpecialization Local<v8::Value>
struct _ty3610;  // FunctionProto bool (v8::MessageCallback, int, Local<v8::Value>)
struct _ty3611;  // TemplateSpecialization Local<v8::Value>
struct _ty3612;  // FunctionProto void (v8::MessageCallback)
struct _ty3613;  // FunctionProto void (v8::FailedAccessCheckCallback)
struct _ty3614;  // FunctionProto void (bool, int, StackTrace::StackTraceOptions)
struct _ty3615;  // Elaborated StackTrace::StackTraceOptions
struct _ty3616;  // FunctionProto void (v8::ExternalResourceVisitor *)
struct _ty3617;  // FunctionProto void (v8::PersistentHandleVisitor *)
struct _ty3618;  // Enum v8::Isolate::TimeZoneDetection
struct _ty3619;  // FunctionProto void (v8::Isolate::TimeZoneDetection)
struct _ty3620;  // FunctionProto void ()
struct _ty3621;  // FunctionProto void (const v8::Isolate &)
struct _ty3622;  // LValueReference const v8::Isolate &
struct _ty3623;  // FunctionProto v8::Isolate &(const v8::Isolate &)
struct _ty3624;  // LValueReference v8::Isolate &
struct _ty3625;  // FunctionProto void (void *, size_t) noexcept
struct _ty3626;  // Pointer const v8::StartupData *
struct _ty3627;  // Typedef v8::EntropySource
struct _ty3628;  // Paren bool (unsigned char *, size_t)
struct _ty3629;  // Pointer unsigned char *
struct _ty3630;  // FunctionProto bool (unsigned char *, size_t)
struct _ty3631;  // Pointer bool (*)(unsigned char *, size_t)
struct _ty3632;  // Typedef v8::ReturnAddressLocationResolver
struct _ty3633;  // Paren uintptr_t (uintptr_t)
struct _ty3634;  // FunctionProto uintptr_t (uintptr_t)
struct _ty3635;  // Pointer uintptr_t (*)(uintptr_t)
struct _ty3636;  // Record v8::V8
struct _ty3637;  // FunctionProto void (v8::StartupData *)
struct _ty3638;  // FunctionProto void (v8::DcheckErrorCallback)
struct _ty3639;  // FunctionProto void (const char *, size_t)
struct _ty3640;  // FunctionProto void (int *, char **, bool)
struct _ty3641;  // Pointer char **
struct _ty3642;  // FunctionProto void (v8::EntropySource)
struct _ty3643;  // FunctionProto void (v8::ReturnAddressLocationResolver)
struct _ty3644;  // FunctionProto bool (const char *)
struct _ty3645;  // FunctionProto bool (const char *, const char *)
struct _ty3646;  // FunctionProto void (v8::Platform *)
struct _ty3647;  // Pointer v8::Platform *
struct _ty3648;  // FunctionProto bool (bool)
struct _ty3649;  // FunctionProto void (v8::UnhandledExceptionCallback)
struct _ty3650;  // Record v8::SnapshotCreator
struct _ty3651;  // Enum v8::SnapshotCreator::FunctionCodeHandling
struct _ty3652;  // FunctionProto void (v8::Isolate *, const intptr_t *, v8::StartupData *)
struct _ty3653;  // Pointer v8::SnapshotCreator *
struct _ty3654;  // FunctionProto void (const intptr_t *, v8::StartupData *)
struct _ty3655;  // FunctionProto void ()
struct _ty3656;  // FunctionProto void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ty3657;  // TemplateSpecialization Local<v8::Context>
struct _ty3658;  // FunctionProto size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _ty3659;  // TemplateSpecialization Local<v8::Context>
struct _ty3660;  // FunctionProto size_t (Local<v8::Template>)
struct _ty3661;  // TemplateSpecialization Local<v8::Template>
struct _ty3662;  // TemplateTypeParm T
struct _ty3663;  // FunctionProto size_t (Local<v8::Context>, Local<T>)
struct _ty3664;  // TemplateSpecialization Local<v8::Context>
struct _ty3665;  // TemplateSpecialization Local<T>
struct _ty3666;  // TemplateTypeParm T
struct _ty3667;  // FunctionProto size_t (Local<T>)
struct _ty3668;  // TemplateSpecialization Local<T>
struct _ty3669;  // FunctionProto v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
struct _ty3670;  // FunctionProto void (const v8::SnapshotCreator &)
struct _ty3671;  // LValueReference const v8::SnapshotCreator &
struct _ty3672;  // TemplateTypeParm T
struct _ty3673;  // Pointer const Maybe<T> *
struct _ty3674;  // FunctionProto T () const
struct _ty3675;  // FunctionProto bool (T *) const
struct _ty3676;  // Pointer T *
struct _ty3677;  // FunctionProto T (const T &) const
struct _ty3678;  // LValueReference const T &
struct _ty3679;  // FunctionProto bool (const Maybe<T> &) const
struct _ty3680;  // LValueReference const Maybe<T> &
struct _ty3681;  // TemplateTypeParm T
struct _ty3682;  // FunctionProto Maybe<T> ()
struct _ty3683;  // TemplateSpecialization Maybe<T>
struct _ty3684;  // TemplateTypeParm T
struct _ty3685;  // FunctionProto Maybe<T> (const T &)
struct _ty3686;  // TemplateSpecialization Maybe<T>
struct _ty3687;  // LValueReference const T &
struct _ty3688;  // Record v8::Maybe<void>
struct _ty3689;  // Pointer const v8::Maybe<void> *
struct _ty3690;  // FunctionProto bool (const v8::Maybe<void> &) const
struct _ty3691;  // LValueReference const v8::Maybe<void> &
struct _ty3692;  // FunctionProto void (const v8::Maybe<void> &)
struct _ty3693;  // Pointer v8::Maybe<void> *
struct _ty3694;  // FunctionProto void (v8::Maybe<void> &&) noexcept
struct _ty3695;  // RValueReference v8::Maybe<void> &&
struct _ty3696;  // FunctionProto Maybe<void> ()
struct _ty3697;  // TemplateSpecialization Maybe<void>
struct _ty3698;  // Record v8::TryCatch
struct _ty3699;  // Pointer v8::TryCatch *
struct _ty3700;  // FunctionProto void ()
struct _ty3701;  // Pointer const v8::TryCatch *
struct _ty3702;  // FunctionProto Local<v8::Value> ()
struct _ty3703;  // TemplateSpecialization Local<v8::Value>
struct _ty3704;  // FunctionProto Local<v8::Value> () const
struct _ty3705;  // TemplateSpecialization Local<v8::Value>
struct _ty3706;  // FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _ty3707;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty3708;  // TemplateSpecialization Local<v8::Context>
struct _ty3709;  // FunctionProto Local<v8::Message> () const
struct _ty3710;  // TemplateSpecialization Local<v8::Message>
struct _ty3711;  // FunctionProto void *(v8::TryCatch *)
struct _ty3712;  // FunctionProto void (const v8::TryCatch &)
struct _ty3713;  // LValueReference const v8::TryCatch &
struct _ty3714;  // Record v8::ExtensionConfiguration
struct _ty3715;  // Pointer v8::ExtensionConfiguration *
struct _ty3716;  // FunctionProto void (int, const char **)
struct _ty3717;  // Decayed const char **
struct _ty3718;  // Pointer const v8::ExtensionConfiguration *
struct _ty3719;  // FunctionProto Local<v8::Object> ()
struct _ty3720;  // TemplateSpecialization Local<v8::Object>
struct _ty3721;  // Pointer v8::Context *
struct _ty3722;  // FunctionProto Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _ty3723;  // TemplateSpecialization Local<v8::Context>
struct _ty3724;  // TemplateSpecialization MaybeLocal<v8::ObjectTemplate>
struct _ty3725;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty3726;  // FunctionProto MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _ty3727;  // TemplateSpecialization MaybeLocal<v8::Context>
struct _ty3728;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty3729;  // FunctionProto MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _ty3730;  // TemplateSpecialization MaybeLocal<v8::Object>
struct _ty3731;  // TemplateSpecialization Local<v8::ObjectTemplate>
struct _ty3732;  // TemplateSpecialization MaybeLocal<v8::Value>
struct _ty3733;  // FunctionProto void (Local<v8::Value>)
struct _ty3734;  // TemplateSpecialization Local<v8::Value>
struct _ty3735;  // FunctionProto Local<v8::Value> ()
struct _ty3736;  // TemplateSpecialization Local<v8::Value>
struct _ty3737;  // Enum v8::Context::EmbedderDataFields
struct _ty3738;  // FunctionProto Local<v8::Value> (int)
struct _ty3739;  // TemplateSpecialization Local<v8::Value>
struct _ty3740;  // FunctionProto Local<v8::Object> ()
struct _ty3741;  // TemplateSpecialization Local<v8::Object>
struct _ty3742;  // FunctionProto void (int, Local<v8::Value>)
struct _ty3743;  // TemplateSpecialization Local<v8::Value>
struct _ty3744;  // FunctionProto void (Local<v8::String>)
struct _ty3745;  // TemplateSpecialization Local<v8::String>
struct _ty3746;  // TemplateTypeParm T
struct _ty3747;  // FunctionProto MaybeLocal<T> (size_t)
struct _ty3748;  // TemplateSpecialization MaybeLocal<T>
struct _ty3749;  // Typedef v8::Context::AbortScriptExecutionCallback
struct _ty3750;  // Paren void (v8::Isolate *, Local<v8::Context>)
struct _ty3751;  // TemplateSpecialization Local<v8::Context>
struct _ty3752;  // FunctionProto void (v8::Isolate *, Local<v8::Context>)
struct _ty3753;  // Pointer void (*)(v8::Isolate *, Local<v8::Context>)
struct _ty3754;  // FunctionProto void (v8::Context::AbortScriptExecutionCallback)
struct _ty3755;  // Record v8::Context::Scope
struct _ty3756;  // FunctionProto void (Local<v8::Context>)
struct _ty3757;  // TemplateSpecialization Local<v8::Context>
struct _ty3758;  // Pointer v8::Context::Scope *
struct _ty3759;  // Record v8::Context::BackupIncumbentScope
struct _ty3760;  // FunctionProto void (Local<v8::Context>)
struct _ty3761;  // TemplateSpecialization Local<v8::Context>
struct _ty3762;  // Pointer v8::Context::BackupIncumbentScope *
struct _ty3763;  // FunctionProto void ()
struct _ty3764;  // FunctionProto uintptr_t () const
struct _ty3765;  // Pointer const v8::Context::BackupIncumbentScope *
struct _ty3766;  // Record v8::Unlocker
struct _ty3767;  // Pointer v8::Unlocker *
struct _ty3768;  // FunctionProto void ()
struct _ty3769;  // Record v8::Locker
struct _ty3770;  // Pointer v8::Locker *
struct _ty3771;  // FunctionProto void ()
struct _ty3772;  // FunctionProto void (const v8::Locker &)
struct _ty3773;  // LValueReference const v8::Locker &
struct _ty3774;  // Record v8::Unwinder
struct _ty3775;  // FunctionProto bool (const v8::UnwindState &, v8::RegisterState *, const void *)
struct _ty3776;  // LValueReference const v8::UnwindState &
struct _ty3777;  // FunctionProto bool (const v8::UnwindState &, void *)
struct _ty3778;  // TemplateSpecialization Local<T>
struct _ty3779;  // LValueReference const PersistentBase<T> &
struct _ty3780;  // TemplateSpecialization PersistentBase<T>
struct _ty3781;  // LValueReference const TracedGlobal<T> &
struct _ty3782;  // TemplateSpecialization TracedGlobal<T>
struct _ty3783;  // TemplateTypeParm S
struct _ty3784;  // TemplateSpecialization Local<S>
struct _ty3785;  // TemplateTypeParm S
struct _ty3786;  // LValueReference const Local<S> &
struct _ty3787;  // TemplateSpecialization Local<S>
struct _ty3788;  // TemplateTypeParm S
struct _ty3789;  // LValueReference const PersistentBase<S> &
struct _ty3790;  // TemplateSpecialization PersistentBase<S>
struct _ty3791;  // TemplateTypeParm P
struct _ty3792;  // Pointer P *
struct _ty3793;  // DependentName typename WeakCallbackInfo<P>::Callback
struct _ty3794;  // TemplateTypeParm P
struct _ty3795;  // TemplateTypeParm S
struct _ty3796;  // RValueReference Global<S> &&
struct _ty3797;  // TemplateSpecialization Global<S>
struct _ty3798;  // TemplateTypeParm S
struct _ty3799;  // LValueReference const Local<S> &
struct _ty3800;  // TemplateSpecialization Local<S>
struct _ty3801;  // TemplateTypeParm S
struct _ty3802;  // RValueReference TracedGlobal<S> &&
struct _ty3803;  // TemplateSpecialization TracedGlobal<S>
struct _ty3804;  // Elaborated typename WeakCallbackInfo<void>::Callback
struct _ty3805;  // TemplateTypeParm S
struct _ty3806;  // LValueReference const Global<S> &
struct _ty3807;  // TemplateSpecialization Global<S>
struct _ty3808;  // TemplateTypeParm S
struct _ty3809;  // LValueReference const TracedGlobal<S> &
struct _ty3810;  // TemplateSpecialization TracedGlobal<S>
struct _ty3811;  // TemplateTypeParm S
struct _ty3812;  // TemplateSpecialization Local<S>
struct _ty3813;  // TemplateTypeParm S
struct _ty3814;  // Pointer S *
struct _ty3815;  // TemplateSpecialization Local<v8::Value>
struct _ty3816;  // TemplateSpecialization Local<v8::Integer>
struct _ty3817;  // TemplateSpecialization Local<v8::Integer>
struct _ty3818;  // TemplateSpecialization Local<v8::Boolean>
struct _ty3819;  // TemplateSpecialization Local<v8::Integer>
struct _ty3820;  // TemplateSpecialization Local<v8::Value>
struct _ty3821;  // TemplateSpecialization Local<v8::Boolean>
struct _ty3822;  // TemplateSpecialization Local<v8::Boolean>
struct _ty3823;  // TemplateSpecialization Local<v8::Boolean>
struct _ty3824;  // TemplateSpecialization Local<v8::PrimitiveArray>
struct _ty3825;  // TemplateSpecialization Local<v8::String>
struct _ty3826;  // TemplateSpecialization Local<v8::String>
struct _ty3827;  // TemplateSpecialization Local<v8::Data>
struct _ty3828;  // Pointer String::Encoding *
struct _ty3829;  // Elaborated String::Encoding
struct _ty3830;  // TemplateTypeParm T
struct _ty3831;  // Pointer T *
struct _ty3832;  // TemplateTypeParm T
struct _ty3833;  // TemplateTypeParm T
struct _ty3834;  // TemplateTypeParm T
struct _ty3835;  // TemplateSpecialization Local<v8::Context>
struct _ty3836;  // TemplateSpecialization Local<T>
struct _ty3837;  // TemplateTypeParm T
struct _ty3838;  // TemplateSpecialization Local<T>
struct _qty1;  // mut Record v8::Context
struct _qty2;  // mut Record v8::Data
struct _qty3;  // mut Record v8::Isolate
struct _qty4;  // mut Record v8::AccessorSignature
struct _qty5;  // mut Record v8::Array
struct _qty6;  // mut Record v8::ArrayBuffer
struct _qty7;  // mut Record v8::BigInt
struct _qty8;  // mut Record v8::BigIntObject
struct _qty9;  // mut Record v8::Boolean
struct _qty10;  // mut Record v8::BooleanObject
struct _qty11;  // mut Record v8::Date
struct _qty12;  // mut Record v8::External
struct _qty13;  // mut Record v8::Function
struct _qty14;  // mut Record v8::FunctionTemplate
struct _qty15;  // mut Record v8::HeapProfiler
struct _qty16;  // mut Record v8::ImplementationUtilities
struct _qty17;  // mut Record v8::Int32
struct _qty18;  // mut Record v8::Integer
struct _qty19;  // mut TemplateTypeParm T
struct _qty20;  // mut InjectedClassName Maybe<T>
struct _qty21;  // mut Record v8::Maybe<bool>
struct _qty22;  // mut Record v8::Maybe<int>
struct _qty23;  // mut Record v8::Maybe<unsigned int>
struct _qty24;  // mut Record v8::Maybe<double>
struct _qty25;  // mut Record v8::Maybe<long long>
struct _qty26;  // mut Record v8::Maybe<v8::PropertyAttribute>
struct _qty27;  // mut Record v8::MicrotaskQueue
struct _qty28;  // mut Record v8::Name
struct _qty29;  // mut Record v8::Number
struct _qty30;  // mut Record v8::NumberObject
struct _qty31;  // mut Record v8::Object
struct _qty32;  // mut Record v8::ObjectOperationDescriptor
struct _qty33;  // mut Record v8::ObjectTemplate
struct _qty34;  // mut Record v8::Platform
struct _qty35;  // mut Record v8::Primitive
struct _qty36;  // mut Record v8::Promise
struct _qty37;  // mut Record v8::PropertyDescriptor
struct _qty38;  // mut Record v8::Proxy
struct _qty39;  // mut Record v8::RawOperationDescriptor
struct _qty40;  // mut Record v8::Script
struct _qty41;  // mut Record v8::SharedArrayBuffer
struct _qty42;  // mut Record v8::Signature
struct _qty43;  // mut Record v8::StartupData
struct _qty44;  // mut Record v8::StackFrame
struct _qty45;  // mut Record v8::StackTrace
struct _qty46;  // mut Record v8::String
struct _qty47;  // mut Record v8::StringObject
struct _qty48;  // mut Record v8::Symbol
struct _qty49;  // mut Record v8::SymbolObject
struct _qty50;  // mut Record v8::PrimitiveArray
struct _qty51;  // mut Record v8::Private
struct _qty52;  // mut Record v8::Uint32
struct _qty53;  // mut Record v8::Utils
struct _qty54;  // mut Record v8::Value
struct _qty55;  // mut Record v8::WasmModuleObject
struct _qty56;  // mut TemplateTypeParm T
struct _qty57;  // mut InjectedClassName Local<T>
struct _qty58;  // mut Record v8::Local<v8::Primitive>
struct _qty59;  // mut FunctionProto void ()
struct _qty60;  // mut Builtin void
struct _qty61;  // mut Pointer v8::Local<v8::Primitive> *
struct _qty62;  // mut TemplateTypeParm S
struct _qty63;  // mut FunctionProto void (Local<S>)
struct _qty64;  // mut TemplateSpecialization Local<S>
struct _qty65;  // mut FunctionProto void (Local<v8::Primitive>)
struct _qty66;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty67;  // mut FunctionProto bool () const
struct _qty68;  // mut Builtin bool
struct _qty69;  // mut Pointer const v8::Local<v8::Primitive> *
struct _qty70;  // mut FunctionProto v8::Primitive *() const
struct _qty71;  // mut Pointer v8::Primitive *
struct _qty72;  // mut TemplateTypeParm S
struct _qty73;  // mut FunctionProto bool (const Local<S> &) const
struct _qty74;  // mut LValueReference const Local<S> &
struct _qty75;  // const TemplateSpecialization Local<S>
struct _qty76;  // mut TemplateSpecialization Local<S>
struct _qty77;  // mut TemplateTypeParm S
struct _qty78;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty79;  // mut LValueReference const PersistentBase<S> &
struct _qty80;  // const TemplateSpecialization PersistentBase<S>
struct _qty81;  // mut TemplateSpecialization PersistentBase<S>
struct _qty82;  // mut TemplateTypeParm S
struct _qty83;  // mut FunctionProto bool (const Local<S> &) const
struct _qty84;  // mut LValueReference const Local<S> &
struct _qty85;  // const TemplateSpecialization Local<S>
struct _qty86;  // mut TemplateSpecialization Local<S>
struct _qty87;  // mut TemplateTypeParm S
struct _qty88;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty89;  // mut LValueReference const Persistent<S> &
struct _qty90;  // const TemplateSpecialization Persistent<S>
struct _qty91;  // mut TemplateSpecialization Persistent<S>
struct _qty92;  // mut TemplateTypeParm S
struct _qty93;  // mut FunctionProto Local<v8::Primitive> (Local<S>)
struct _qty94;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty95;  // mut TemplateSpecialization Local<S>
struct _qty96;  // mut TemplateTypeParm S
struct _qty97;  // mut FunctionProto Local<S> () const
struct _qty98;  // mut TemplateSpecialization Local<S>
struct _qty99;  // mut FunctionProto Local<v8::Primitive> (v8::Isolate *, Local<v8::Primitive>)
struct _qty100;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty101;  // mut Pointer v8::Isolate *
struct _qty102;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty103;  // mut FunctionProto Local<v8::Primitive> (v8::Isolate *, const PersistentBase<v8::Primitive> &)
struct _qty104;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty105;  // mut LValueReference const PersistentBase<v8::Primitive> &
struct _qty106;  // const TemplateSpecialization PersistentBase<v8::Primitive>
struct _qty107;  // mut Record v8::PersistentBase<v8::Primitive>
struct _qty108;  // mut FunctionProto Local<v8::Primitive> (v8::Isolate *, const TracedGlobal<v8::Primitive> &)
struct _qty109;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty110;  // mut LValueReference const TracedGlobal<v8::Primitive> &
struct _qty111;  // const TemplateSpecialization TracedGlobal<v8::Primitive>
struct _qty112;  // mut Record v8::TracedGlobal<v8::Primitive>
struct _qty113;  // mut FunctionProto void (const v8::Local<v8::Primitive> &)
struct _qty114;  // mut LValueReference const v8::Local<v8::Primitive> &
struct _qty115;  // const Record v8::Local<v8::Primitive>
struct _qty116;  // mut FunctionProto void (v8::Local<v8::Primitive> &&) noexcept
struct _qty117;  // mut RValueReference v8::Local<v8::Primitive> &&
struct _qty118;  // mut FunctionProto void () noexcept
struct _qty119;  // mut Record v8::Local<v8::Boolean>
struct _qty120;  // mut Pointer v8::Local<v8::Boolean> *
struct _qty121;  // mut TemplateTypeParm S
struct _qty122;  // mut FunctionProto void (Local<S>)
struct _qty123;  // mut TemplateSpecialization Local<S>
struct _qty124;  // mut FunctionProto void (Local<v8::Boolean>)
struct _qty125;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty126;  // mut Pointer const v8::Local<v8::Boolean> *
struct _qty127;  // mut FunctionProto v8::Boolean *() const
struct _qty128;  // mut Pointer v8::Boolean *
struct _qty129;  // mut TemplateTypeParm S
struct _qty130;  // mut FunctionProto bool (const Local<S> &) const
struct _qty131;  // mut LValueReference const Local<S> &
struct _qty132;  // const TemplateSpecialization Local<S>
struct _qty133;  // mut TemplateSpecialization Local<S>
struct _qty134;  // mut TemplateTypeParm S
struct _qty135;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty136;  // mut LValueReference const PersistentBase<S> &
struct _qty137;  // const TemplateSpecialization PersistentBase<S>
struct _qty138;  // mut TemplateSpecialization PersistentBase<S>
struct _qty139;  // mut TemplateTypeParm S
struct _qty140;  // mut FunctionProto bool (const Local<S> &) const
struct _qty141;  // mut LValueReference const Local<S> &
struct _qty142;  // const TemplateSpecialization Local<S>
struct _qty143;  // mut TemplateSpecialization Local<S>
struct _qty144;  // mut TemplateTypeParm S
struct _qty145;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty146;  // mut LValueReference const Persistent<S> &
struct _qty147;  // const TemplateSpecialization Persistent<S>
struct _qty148;  // mut TemplateSpecialization Persistent<S>
struct _qty149;  // mut TemplateTypeParm S
struct _qty150;  // mut FunctionProto Local<v8::Boolean> (Local<S>)
struct _qty151;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty152;  // mut TemplateSpecialization Local<S>
struct _qty153;  // mut TemplateTypeParm S
struct _qty154;  // mut FunctionProto Local<S> () const
struct _qty155;  // mut TemplateSpecialization Local<S>
struct _qty156;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *, Local<v8::Boolean>)
struct _qty157;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty158;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty159;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *, const PersistentBase<v8::Boolean> &)
struct _qty160;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty161;  // mut LValueReference const PersistentBase<v8::Boolean> &
struct _qty162;  // const TemplateSpecialization PersistentBase<v8::Boolean>
struct _qty163;  // mut Record v8::PersistentBase<v8::Boolean>
struct _qty164;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *, const TracedGlobal<v8::Boolean> &)
struct _qty165;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty166;  // mut LValueReference const TracedGlobal<v8::Boolean> &
struct _qty167;  // const TemplateSpecialization TracedGlobal<v8::Boolean>
struct _qty168;  // mut Record v8::TracedGlobal<v8::Boolean>
struct _qty169;  // mut FunctionProto void (const v8::Local<v8::Boolean> &)
struct _qty170;  // mut LValueReference const v8::Local<v8::Boolean> &
struct _qty171;  // const Record v8::Local<v8::Boolean>
struct _qty172;  // mut FunctionProto void (v8::Local<v8::Boolean> &&) noexcept
struct _qty173;  // mut RValueReference v8::Local<v8::Boolean> &&
struct _qty174;  // mut Record v8::Local<v8::Value>
struct _qty175;  // mut Pointer v8::Local<v8::Value> *
struct _qty176;  // mut TemplateTypeParm S
struct _qty177;  // mut FunctionProto void (Local<S>)
struct _qty178;  // mut TemplateSpecialization Local<S>
struct _qty179;  // mut FunctionProto void (Local<v8::Value>)
struct _qty180;  // mut TemplateSpecialization Local<v8::Value>
struct _qty181;  // mut Pointer const v8::Local<v8::Value> *
struct _qty182;  // mut FunctionProto v8::Value *() const
struct _qty183;  // mut Pointer v8::Value *
struct _qty184;  // mut TemplateTypeParm S
struct _qty185;  // mut FunctionProto bool (const Local<S> &) const
struct _qty186;  // mut LValueReference const Local<S> &
struct _qty187;  // const TemplateSpecialization Local<S>
struct _qty188;  // mut TemplateSpecialization Local<S>
struct _qty189;  // mut TemplateTypeParm S
struct _qty190;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty191;  // mut LValueReference const PersistentBase<S> &
struct _qty192;  // const TemplateSpecialization PersistentBase<S>
struct _qty193;  // mut TemplateSpecialization PersistentBase<S>
struct _qty194;  // mut TemplateTypeParm S
struct _qty195;  // mut FunctionProto bool (const Local<S> &) const
struct _qty196;  // mut LValueReference const Local<S> &
struct _qty197;  // const TemplateSpecialization Local<S>
struct _qty198;  // mut TemplateSpecialization Local<S>
struct _qty199;  // mut TemplateTypeParm S
struct _qty200;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty201;  // mut LValueReference const Persistent<S> &
struct _qty202;  // const TemplateSpecialization Persistent<S>
struct _qty203;  // mut TemplateSpecialization Persistent<S>
struct _qty204;  // mut TemplateTypeParm S
struct _qty205;  // mut FunctionProto Local<v8::Value> (Local<S>)
struct _qty206;  // mut TemplateSpecialization Local<v8::Value>
struct _qty207;  // mut TemplateSpecialization Local<S>
struct _qty208;  // mut TemplateTypeParm S
struct _qty209;  // mut FunctionProto Local<S> () const
struct _qty210;  // mut TemplateSpecialization Local<S>
struct _qty211;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Value>)
struct _qty212;  // mut TemplateSpecialization Local<v8::Value>
struct _qty213;  // mut TemplateSpecialization Local<v8::Value>
struct _qty214;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, const PersistentBase<v8::Value> &)
struct _qty215;  // mut TemplateSpecialization Local<v8::Value>
struct _qty216;  // mut LValueReference const PersistentBase<v8::Value> &
struct _qty217;  // const TemplateSpecialization PersistentBase<v8::Value>
struct _qty218;  // mut Record v8::PersistentBase<v8::Value>
struct _qty219;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, const TracedGlobal<v8::Value> &)
struct _qty220;  // mut TemplateSpecialization Local<v8::Value>
struct _qty221;  // mut LValueReference const TracedGlobal<v8::Value> &
struct _qty222;  // const TemplateSpecialization TracedGlobal<v8::Value>
struct _qty223;  // mut Record v8::TracedGlobal<v8::Value>
struct _qty224;  // mut FunctionProto void (const v8::Local<v8::Value> &) noexcept
struct _qty225;  // mut LValueReference const v8::Local<v8::Value> &
struct _qty226;  // const Record v8::Local<v8::Value>
struct _qty227;  // mut FunctionProto void (v8::Local<v8::Value> &&) noexcept
struct _qty228;  // mut RValueReference v8::Local<v8::Value> &&
struct _qty229;  // mut FunctionProto v8::Local<v8::Value> &(const v8::Local<v8::Value> &)
struct _qty230;  // mut LValueReference v8::Local<v8::Value> &
struct _qty231;  // mut FunctionProto v8::Local<v8::Value> &(v8::Local<v8::Value> &&)
struct _qty232;  // mut Record v8::Local<v8::PrimitiveArray>
struct _qty233;  // mut Pointer v8::Local<v8::PrimitiveArray> *
struct _qty234;  // mut TemplateTypeParm S
struct _qty235;  // mut FunctionProto void (Local<S>)
struct _qty236;  // mut TemplateSpecialization Local<S>
struct _qty237;  // mut FunctionProto void (Local<v8::PrimitiveArray>)
struct _qty238;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty239;  // mut Pointer const v8::Local<v8::PrimitiveArray> *
struct _qty240;  // mut FunctionProto v8::PrimitiveArray *() const
struct _qty241;  // mut Pointer v8::PrimitiveArray *
struct _qty242;  // mut TemplateTypeParm S
struct _qty243;  // mut FunctionProto bool (const Local<S> &) const
struct _qty244;  // mut LValueReference const Local<S> &
struct _qty245;  // const TemplateSpecialization Local<S>
struct _qty246;  // mut TemplateSpecialization Local<S>
struct _qty247;  // mut TemplateTypeParm S
struct _qty248;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty249;  // mut LValueReference const PersistentBase<S> &
struct _qty250;  // const TemplateSpecialization PersistentBase<S>
struct _qty251;  // mut TemplateSpecialization PersistentBase<S>
struct _qty252;  // mut TemplateTypeParm S
struct _qty253;  // mut FunctionProto bool (const Local<S> &) const
struct _qty254;  // mut LValueReference const Local<S> &
struct _qty255;  // const TemplateSpecialization Local<S>
struct _qty256;  // mut TemplateSpecialization Local<S>
struct _qty257;  // mut TemplateTypeParm S
struct _qty258;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty259;  // mut LValueReference const Persistent<S> &
struct _qty260;  // const TemplateSpecialization Persistent<S>
struct _qty261;  // mut TemplateSpecialization Persistent<S>
struct _qty262;  // mut TemplateTypeParm S
struct _qty263;  // mut FunctionProto Local<v8::PrimitiveArray> (Local<S>)
struct _qty264;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty265;  // mut TemplateSpecialization Local<S>
struct _qty266;  // mut TemplateTypeParm S
struct _qty267;  // mut FunctionProto Local<S> () const
struct _qty268;  // mut TemplateSpecialization Local<S>
struct _qty269;  // mut FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, Local<v8::PrimitiveArray>)
struct _qty270;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty271;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty272;  // mut FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const PersistentBase<v8::PrimitiveArray> &)
struct _qty273;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty274;  // mut LValueReference const PersistentBase<v8::PrimitiveArray> &
struct _qty275;  // const TemplateSpecialization PersistentBase<v8::PrimitiveArray>
struct _qty276;  // mut Record v8::PersistentBase<v8::PrimitiveArray>
struct _qty277;  // mut FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, const TracedGlobal<v8::PrimitiveArray> &)
struct _qty278;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty279;  // mut LValueReference const TracedGlobal<v8::PrimitiveArray> &
struct _qty280;  // const TemplateSpecialization TracedGlobal<v8::PrimitiveArray>
struct _qty281;  // mut Record v8::TracedGlobal<v8::PrimitiveArray>
struct _qty282;  // mut FunctionProto void (const v8::Local<v8::PrimitiveArray> &) noexcept
struct _qty283;  // mut LValueReference const v8::Local<v8::PrimitiveArray> &
struct _qty284;  // const Record v8::Local<v8::PrimitiveArray>
struct _qty285;  // mut FunctionProto void (v8::Local<v8::PrimitiveArray> &&) noexcept
struct _qty286;  // mut RValueReference v8::Local<v8::PrimitiveArray> &&
struct _qty287;  // mut FunctionProto v8::Local<v8::PrimitiveArray> &(const v8::Local<v8::PrimitiveArray> &)
struct _qty288;  // mut LValueReference v8::Local<v8::PrimitiveArray> &
struct _qty289;  // mut FunctionProto v8::Local<v8::PrimitiveArray> &(v8::Local<v8::PrimitiveArray> &&)
struct _qty290;  // mut Record v8::Local<v8::Integer>
struct _qty291;  // mut Pointer v8::Local<v8::Integer> *
struct _qty292;  // mut TemplateTypeParm S
struct _qty293;  // mut FunctionProto void (Local<S>)
struct _qty294;  // mut TemplateSpecialization Local<S>
struct _qty295;  // mut FunctionProto void (Local<v8::Integer>)
struct _qty296;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty297;  // mut Pointer const v8::Local<v8::Integer> *
struct _qty298;  // mut FunctionProto v8::Integer *() const
struct _qty299;  // mut Pointer v8::Integer *
struct _qty300;  // mut TemplateTypeParm S
struct _qty301;  // mut FunctionProto bool (const Local<S> &) const
struct _qty302;  // mut LValueReference const Local<S> &
struct _qty303;  // const TemplateSpecialization Local<S>
struct _qty304;  // mut TemplateSpecialization Local<S>
struct _qty305;  // mut TemplateTypeParm S
struct _qty306;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty307;  // mut LValueReference const PersistentBase<S> &
struct _qty308;  // const TemplateSpecialization PersistentBase<S>
struct _qty309;  // mut TemplateSpecialization PersistentBase<S>
struct _qty310;  // mut TemplateTypeParm S
struct _qty311;  // mut FunctionProto bool (const Local<S> &) const
struct _qty312;  // mut LValueReference const Local<S> &
struct _qty313;  // const TemplateSpecialization Local<S>
struct _qty314;  // mut TemplateSpecialization Local<S>
struct _qty315;  // mut TemplateTypeParm S
struct _qty316;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty317;  // mut LValueReference const Persistent<S> &
struct _qty318;  // const TemplateSpecialization Persistent<S>
struct _qty319;  // mut TemplateSpecialization Persistent<S>
struct _qty320;  // mut TemplateTypeParm S
struct _qty321;  // mut FunctionProto Local<v8::Integer> (Local<S>)
struct _qty322;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty323;  // mut TemplateSpecialization Local<S>
struct _qty324;  // mut TemplateTypeParm S
struct _qty325;  // mut FunctionProto Local<S> () const
struct _qty326;  // mut TemplateSpecialization Local<S>
struct _qty327;  // mut FunctionProto Local<v8::Integer> (v8::Isolate *, Local<v8::Integer>)
struct _qty328;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty329;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty330;  // mut FunctionProto Local<v8::Integer> (v8::Isolate *, const PersistentBase<v8::Integer> &)
struct _qty331;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty332;  // mut LValueReference const PersistentBase<v8::Integer> &
struct _qty333;  // const TemplateSpecialization PersistentBase<v8::Integer>
struct _qty334;  // mut Record v8::PersistentBase<v8::Integer>
struct _qty335;  // mut FunctionProto Local<v8::Integer> (v8::Isolate *, const TracedGlobal<v8::Integer> &)
struct _qty336;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty337;  // mut LValueReference const TracedGlobal<v8::Integer> &
struct _qty338;  // const TemplateSpecialization TracedGlobal<v8::Integer>
struct _qty339;  // mut Record v8::TracedGlobal<v8::Integer>
struct _qty340;  // mut FunctionProto void (const v8::Local<v8::Integer> &) noexcept
struct _qty341;  // mut LValueReference const v8::Local<v8::Integer> &
struct _qty342;  // const Record v8::Local<v8::Integer>
struct _qty343;  // mut FunctionProto void (v8::Local<v8::Integer> &&) noexcept
struct _qty344;  // mut RValueReference v8::Local<v8::Integer> &&
struct _qty345;  // mut FunctionProto v8::Local<v8::Integer> &(const v8::Local<v8::Integer> &)
struct _qty346;  // mut LValueReference v8::Local<v8::Integer> &
struct _qty347;  // mut FunctionProto v8::Local<v8::Integer> &(v8::Local<v8::Integer> &&)
struct _qty348;  // mut Record v8::Local<v8::Script>
struct _qty349;  // mut Record v8::Local<v8::String>
struct _qty350;  // mut Pointer v8::Local<v8::String> *
struct _qty351;  // mut TemplateTypeParm S
struct _qty352;  // mut FunctionProto void (Local<S>)
struct _qty353;  // mut TemplateSpecialization Local<S>
struct _qty354;  // mut FunctionProto void (Local<v8::String>)
struct _qty355;  // mut TemplateSpecialization Local<v8::String>
struct _qty356;  // mut Pointer const v8::Local<v8::String> *
struct _qty357;  // mut FunctionProto v8::String *() const
struct _qty358;  // mut Pointer v8::String *
struct _qty359;  // mut TemplateTypeParm S
struct _qty360;  // mut FunctionProto bool (const Local<S> &) const
struct _qty361;  // mut LValueReference const Local<S> &
struct _qty362;  // const TemplateSpecialization Local<S>
struct _qty363;  // mut TemplateSpecialization Local<S>
struct _qty364;  // mut TemplateTypeParm S
struct _qty365;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty366;  // mut LValueReference const PersistentBase<S> &
struct _qty367;  // const TemplateSpecialization PersistentBase<S>
struct _qty368;  // mut TemplateSpecialization PersistentBase<S>
struct _qty369;  // mut TemplateTypeParm S
struct _qty370;  // mut FunctionProto bool (const Local<S> &) const
struct _qty371;  // mut LValueReference const Local<S> &
struct _qty372;  // const TemplateSpecialization Local<S>
struct _qty373;  // mut TemplateSpecialization Local<S>
struct _qty374;  // mut TemplateTypeParm S
struct _qty375;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty376;  // mut LValueReference const Persistent<S> &
struct _qty377;  // const TemplateSpecialization Persistent<S>
struct _qty378;  // mut TemplateSpecialization Persistent<S>
struct _qty379;  // mut TemplateTypeParm S
struct _qty380;  // mut FunctionProto Local<v8::String> (Local<S>)
struct _qty381;  // mut TemplateSpecialization Local<v8::String>
struct _qty382;  // mut TemplateSpecialization Local<S>
struct _qty383;  // mut TemplateTypeParm S
struct _qty384;  // mut FunctionProto Local<S> () const
struct _qty385;  // mut TemplateSpecialization Local<S>
struct _qty386;  // mut FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>)
struct _qty387;  // mut TemplateSpecialization Local<v8::String>
struct _qty388;  // mut TemplateSpecialization Local<v8::String>
struct _qty389;  // mut FunctionProto Local<v8::String> (v8::Isolate *, const PersistentBase<v8::String> &)
struct _qty390;  // mut TemplateSpecialization Local<v8::String>
struct _qty391;  // mut LValueReference const PersistentBase<v8::String> &
struct _qty392;  // const TemplateSpecialization PersistentBase<v8::String>
struct _qty393;  // mut Record v8::PersistentBase<v8::String>
struct _qty394;  // mut FunctionProto Local<v8::String> (v8::Isolate *, const TracedGlobal<v8::String> &)
struct _qty395;  // mut TemplateSpecialization Local<v8::String>
struct _qty396;  // mut LValueReference const TracedGlobal<v8::String> &
struct _qty397;  // const TemplateSpecialization TracedGlobal<v8::String>
struct _qty398;  // mut Record v8::TracedGlobal<v8::String>
struct _qty399;  // mut FunctionProto void (const v8::Local<v8::String> &) noexcept
struct _qty400;  // mut LValueReference const v8::Local<v8::String> &
struct _qty401;  // const Record v8::Local<v8::String>
struct _qty402;  // mut FunctionProto void (v8::Local<v8::String> &&) noexcept
struct _qty403;  // mut RValueReference v8::Local<v8::String> &&
struct _qty404;  // mut FunctionProto v8::Local<v8::String> &(const v8::Local<v8::String> &)
struct _qty405;  // mut LValueReference v8::Local<v8::String> &
struct _qty406;  // mut FunctionProto v8::Local<v8::String> &(v8::Local<v8::String> &&)
struct _qty407;  // mut Record v8::Local<v8::Context>
struct _qty408;  // mut Pointer v8::Local<v8::Context> *
struct _qty409;  // mut TemplateTypeParm S
struct _qty410;  // mut FunctionProto void (Local<S>)
struct _qty411;  // mut TemplateSpecialization Local<S>
struct _qty412;  // mut FunctionProto void (Local<v8::Context>)
struct _qty413;  // mut TemplateSpecialization Local<v8::Context>
struct _qty414;  // mut Pointer const v8::Local<v8::Context> *
struct _qty415;  // mut FunctionProto v8::Context *() const
struct _qty416;  // mut Pointer v8::Context *
struct _qty417;  // mut TemplateTypeParm S
struct _qty418;  // mut FunctionProto bool (const Local<S> &) const
struct _qty419;  // mut LValueReference const Local<S> &
struct _qty420;  // const TemplateSpecialization Local<S>
struct _qty421;  // mut TemplateSpecialization Local<S>
struct _qty422;  // mut TemplateTypeParm S
struct _qty423;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty424;  // mut LValueReference const PersistentBase<S> &
struct _qty425;  // const TemplateSpecialization PersistentBase<S>
struct _qty426;  // mut TemplateSpecialization PersistentBase<S>
struct _qty427;  // mut TemplateTypeParm S
struct _qty428;  // mut FunctionProto bool (const Local<S> &) const
struct _qty429;  // mut LValueReference const Local<S> &
struct _qty430;  // const TemplateSpecialization Local<S>
struct _qty431;  // mut TemplateSpecialization Local<S>
struct _qty432;  // mut TemplateTypeParm S
struct _qty433;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty434;  // mut LValueReference const Persistent<S> &
struct _qty435;  // const TemplateSpecialization Persistent<S>
struct _qty436;  // mut TemplateSpecialization Persistent<S>
struct _qty437;  // mut TemplateTypeParm S
struct _qty438;  // mut FunctionProto Local<v8::Context> (Local<S>)
struct _qty439;  // mut TemplateSpecialization Local<v8::Context>
struct _qty440;  // mut TemplateSpecialization Local<S>
struct _qty441;  // mut TemplateTypeParm S
struct _qty442;  // mut FunctionProto Local<S> () const
struct _qty443;  // mut TemplateSpecialization Local<S>
struct _qty444;  // mut FunctionProto Local<v8::Context> (v8::Isolate *, Local<v8::Context>)
struct _qty445;  // mut TemplateSpecialization Local<v8::Context>
struct _qty446;  // mut TemplateSpecialization Local<v8::Context>
struct _qty447;  // mut FunctionProto Local<v8::Context> (v8::Isolate *, const PersistentBase<v8::Context> &)
struct _qty448;  // mut TemplateSpecialization Local<v8::Context>
struct _qty449;  // mut LValueReference const PersistentBase<v8::Context> &
struct _qty450;  // const TemplateSpecialization PersistentBase<v8::Context>
struct _qty451;  // mut Record v8::PersistentBase<v8::Context>
struct _qty452;  // mut FunctionProto Local<v8::Context> (v8::Isolate *, const TracedGlobal<v8::Context> &)
struct _qty453;  // mut TemplateSpecialization Local<v8::Context>
struct _qty454;  // mut LValueReference const TracedGlobal<v8::Context> &
struct _qty455;  // const TemplateSpecialization TracedGlobal<v8::Context>
struct _qty456;  // mut Record v8::TracedGlobal<v8::Context>
struct _qty457;  // mut FunctionProto void (const v8::Local<v8::Context> &) noexcept
struct _qty458;  // mut LValueReference const v8::Local<v8::Context> &
struct _qty459;  // const Record v8::Local<v8::Context>
struct _qty460;  // mut FunctionProto void (v8::Local<v8::Context> &&) noexcept
struct _qty461;  // mut RValueReference v8::Local<v8::Context> &&
struct _qty462;  // mut Record v8::Local<v8::Module>
struct _qty463;  // mut Record v8::Local<v8::UnboundModuleScript>
struct _qty464;  // mut Record v8::Local<v8::UnboundScript>
struct _qty465;  // mut Pointer v8::Local<v8::UnboundScript> *
struct _qty466;  // mut TemplateTypeParm S
struct _qty467;  // mut FunctionProto void (Local<S>)
struct _qty468;  // mut TemplateSpecialization Local<S>
struct _qty469;  // mut Pointer const v8::Local<v8::UnboundScript> *
struct _qty470;  // mut FunctionProto v8::UnboundScript *() const
struct _qty471;  // mut Pointer v8::UnboundScript *
struct _qty472;  // mut Record v8::UnboundScript
struct _qty473;  // mut TemplateTypeParm S
struct _qty474;  // mut FunctionProto bool (const Local<S> &) const
struct _qty475;  // mut LValueReference const Local<S> &
struct _qty476;  // const TemplateSpecialization Local<S>
struct _qty477;  // mut TemplateSpecialization Local<S>
struct _qty478;  // mut TemplateTypeParm S
struct _qty479;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty480;  // mut LValueReference const PersistentBase<S> &
struct _qty481;  // const TemplateSpecialization PersistentBase<S>
struct _qty482;  // mut TemplateSpecialization PersistentBase<S>
struct _qty483;  // mut TemplateTypeParm S
struct _qty484;  // mut FunctionProto bool (const Local<S> &) const
struct _qty485;  // mut LValueReference const Local<S> &
struct _qty486;  // const TemplateSpecialization Local<S>
struct _qty487;  // mut TemplateSpecialization Local<S>
struct _qty488;  // mut TemplateTypeParm S
struct _qty489;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty490;  // mut LValueReference const Persistent<S> &
struct _qty491;  // const TemplateSpecialization Persistent<S>
struct _qty492;  // mut TemplateSpecialization Persistent<S>
struct _qty493;  // mut TemplateTypeParm S
struct _qty494;  // mut FunctionProto Local<v8::UnboundScript> (Local<S>)
struct _qty495;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty496;  // mut TemplateSpecialization Local<S>
struct _qty497;  // mut TemplateTypeParm S
struct _qty498;  // mut FunctionProto Local<S> () const
struct _qty499;  // mut TemplateSpecialization Local<S>
struct _qty500;  // mut FunctionProto Local<v8::UnboundScript> (v8::Isolate *, Local<v8::UnboundScript>)
struct _qty501;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty502;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty503;  // mut FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const PersistentBase<v8::UnboundScript> &)
struct _qty504;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty505;  // mut LValueReference const PersistentBase<v8::UnboundScript> &
struct _qty506;  // const TemplateSpecialization PersistentBase<v8::UnboundScript>
struct _qty507;  // mut Record v8::PersistentBase<v8::UnboundScript>
struct _qty508;  // mut FunctionProto Local<v8::UnboundScript> (v8::Isolate *, const TracedGlobal<v8::UnboundScript> &)
struct _qty509;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty510;  // mut LValueReference const TracedGlobal<v8::UnboundScript> &
struct _qty511;  // const TemplateSpecialization TracedGlobal<v8::UnboundScript>
struct _qty512;  // mut Record v8::TracedGlobal<v8::UnboundScript>
struct _qty513;  // mut Record v8::Local<v8::Object>
struct _qty514;  // mut Record v8::Local<v8::Function>
struct _qty515;  // mut Pointer v8::Local<v8::Function> *
struct _qty516;  // mut TemplateTypeParm S
struct _qty517;  // mut FunctionProto void (Local<S>)
struct _qty518;  // mut TemplateSpecialization Local<S>
struct _qty519;  // mut FunctionProto void (Local<v8::Function>)
struct _qty520;  // mut TemplateSpecialization Local<v8::Function>
struct _qty521;  // mut Pointer const v8::Local<v8::Function> *
struct _qty522;  // mut FunctionProto v8::Function *() const
struct _qty523;  // mut Pointer v8::Function *
struct _qty524;  // mut TemplateTypeParm S
struct _qty525;  // mut FunctionProto bool (const Local<S> &) const
struct _qty526;  // mut LValueReference const Local<S> &
struct _qty527;  // const TemplateSpecialization Local<S>
struct _qty528;  // mut TemplateSpecialization Local<S>
struct _qty529;  // mut TemplateTypeParm S
struct _qty530;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty531;  // mut LValueReference const PersistentBase<S> &
struct _qty532;  // const TemplateSpecialization PersistentBase<S>
struct _qty533;  // mut TemplateSpecialization PersistentBase<S>
struct _qty534;  // mut TemplateTypeParm S
struct _qty535;  // mut FunctionProto bool (const Local<S> &) const
struct _qty536;  // mut LValueReference const Local<S> &
struct _qty537;  // const TemplateSpecialization Local<S>
struct _qty538;  // mut TemplateSpecialization Local<S>
struct _qty539;  // mut TemplateTypeParm S
struct _qty540;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty541;  // mut LValueReference const Persistent<S> &
struct _qty542;  // const TemplateSpecialization Persistent<S>
struct _qty543;  // mut TemplateSpecialization Persistent<S>
struct _qty544;  // mut TemplateTypeParm S
struct _qty545;  // mut FunctionProto Local<v8::Function> (Local<S>)
struct _qty546;  // mut TemplateSpecialization Local<v8::Function>
struct _qty547;  // mut TemplateSpecialization Local<S>
struct _qty548;  // mut TemplateTypeParm S
struct _qty549;  // mut FunctionProto Local<S> () const
struct _qty550;  // mut TemplateSpecialization Local<S>
struct _qty551;  // mut FunctionProto Local<v8::Function> (v8::Isolate *, Local<v8::Function>)
struct _qty552;  // mut TemplateSpecialization Local<v8::Function>
struct _qty553;  // mut TemplateSpecialization Local<v8::Function>
struct _qty554;  // mut FunctionProto Local<v8::Function> (v8::Isolate *, const PersistentBase<v8::Function> &)
struct _qty555;  // mut TemplateSpecialization Local<v8::Function>
struct _qty556;  // mut LValueReference const PersistentBase<v8::Function> &
struct _qty557;  // const TemplateSpecialization PersistentBase<v8::Function>
struct _qty558;  // mut Record v8::PersistentBase<v8::Function>
struct _qty559;  // mut FunctionProto Local<v8::Function> (v8::Isolate *, const TracedGlobal<v8::Function> &)
struct _qty560;  // mut TemplateSpecialization Local<v8::Function>
struct _qty561;  // mut LValueReference const TracedGlobal<v8::Function> &
struct _qty562;  // const TemplateSpecialization TracedGlobal<v8::Function>
struct _qty563;  // mut Record v8::TracedGlobal<v8::Function>
struct _qty564;  // mut FunctionProto void (const v8::Local<v8::Function> &)
struct _qty565;  // mut LValueReference const v8::Local<v8::Function> &
struct _qty566;  // const Record v8::Local<v8::Function>
struct _qty567;  // mut FunctionProto void (v8::Local<v8::Function> &&) noexcept
struct _qty568;  // mut RValueReference v8::Local<v8::Function> &&
struct _qty569;  // mut Record v8::Local<v8::StackTrace>
struct _qty570;  // mut Record v8::Local<v8::StackFrame>
struct _qty571;  // mut Record v8::Local<v8::SharedArrayBuffer>
struct _qty572;  // mut Record v8::Local<v8::WasmModuleObject>
struct _qty573;  // mut Record v8::Local<v8::ArrayBuffer>
struct _qty574;  // mut Record v8::Local<v8::Symbol>
struct _qty575;  // mut Record v8::Local<v8::Private>
struct _qty576;  // mut Record v8::Local<v8::Number>
struct _qty577;  // mut Record v8::Local<v8::BigInt>
struct _qty578;  // mut Record v8::Local<v8::Name>
struct _qty579;  // mut Pointer v8::Local<v8::Name> *
struct _qty580;  // mut TemplateTypeParm S
struct _qty581;  // mut FunctionProto void (Local<S>)
struct _qty582;  // mut TemplateSpecialization Local<S>
struct _qty583;  // mut FunctionProto void (Local<v8::String>)
struct _qty584;  // mut TemplateSpecialization Local<v8::String>
struct _qty585;  // mut FunctionProto void (Local<v8::Name>)
struct _qty586;  // mut TemplateSpecialization Local<v8::Name>
struct _qty587;  // mut Pointer const v8::Local<v8::Name> *
struct _qty588;  // mut FunctionProto v8::Name *() const
struct _qty589;  // mut Pointer v8::Name *
struct _qty590;  // mut TemplateTypeParm S
struct _qty591;  // mut FunctionProto bool (const Local<S> &) const
struct _qty592;  // mut LValueReference const Local<S> &
struct _qty593;  // const TemplateSpecialization Local<S>
struct _qty594;  // mut TemplateSpecialization Local<S>
struct _qty595;  // mut TemplateTypeParm S
struct _qty596;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty597;  // mut LValueReference const PersistentBase<S> &
struct _qty598;  // const TemplateSpecialization PersistentBase<S>
struct _qty599;  // mut TemplateSpecialization PersistentBase<S>
struct _qty600;  // mut TemplateTypeParm S
struct _qty601;  // mut FunctionProto bool (const Local<S> &) const
struct _qty602;  // mut LValueReference const Local<S> &
struct _qty603;  // const TemplateSpecialization Local<S>
struct _qty604;  // mut TemplateSpecialization Local<S>
struct _qty605;  // mut TemplateTypeParm S
struct _qty606;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty607;  // mut LValueReference const Persistent<S> &
struct _qty608;  // const TemplateSpecialization Persistent<S>
struct _qty609;  // mut TemplateSpecialization Persistent<S>
struct _qty610;  // mut TemplateTypeParm S
struct _qty611;  // mut FunctionProto Local<v8::Name> (Local<S>)
struct _qty612;  // mut TemplateSpecialization Local<v8::Name>
struct _qty613;  // mut TemplateSpecialization Local<S>
struct _qty614;  // mut TemplateTypeParm S
struct _qty615;  // mut FunctionProto Local<S> () const
struct _qty616;  // mut TemplateSpecialization Local<S>
struct _qty617;  // mut FunctionProto Local<v8::Name> (v8::Isolate *, Local<v8::Name>)
struct _qty618;  // mut TemplateSpecialization Local<v8::Name>
struct _qty619;  // mut TemplateSpecialization Local<v8::Name>
struct _qty620;  // mut FunctionProto Local<v8::Name> (v8::Isolate *, const PersistentBase<v8::Name> &)
struct _qty621;  // mut TemplateSpecialization Local<v8::Name>
struct _qty622;  // mut LValueReference const PersistentBase<v8::Name> &
struct _qty623;  // const TemplateSpecialization PersistentBase<v8::Name>
struct _qty624;  // mut Record v8::PersistentBase<v8::Name>
struct _qty625;  // mut FunctionProto Local<v8::Name> (v8::Isolate *, const TracedGlobal<v8::Name> &)
struct _qty626;  // mut TemplateSpecialization Local<v8::Name>
struct _qty627;  // mut LValueReference const TracedGlobal<v8::Name> &
struct _qty628;  // const TemplateSpecialization TracedGlobal<v8::Name>
struct _qty629;  // mut Record v8::TracedGlobal<v8::Name>
struct _qty630;  // mut FunctionProto void (const v8::Local<v8::Name> &)
struct _qty631;  // mut LValueReference const v8::Local<v8::Name> &
struct _qty632;  // const Record v8::Local<v8::Name>
struct _qty633;  // mut FunctionProto void (v8::Local<v8::Name> &&) noexcept
struct _qty634;  // mut RValueReference v8::Local<v8::Name> &&
struct _qty635;  // mut Record v8::Local<v8::FunctionTemplate>
struct _qty636;  // mut Pointer v8::Local<v8::FunctionTemplate> *
struct _qty637;  // mut TemplateTypeParm S
struct _qty638;  // mut FunctionProto void (Local<S>)
struct _qty639;  // mut TemplateSpecialization Local<S>
struct _qty640;  // mut FunctionProto void (Local<v8::FunctionTemplate>)
struct _qty641;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty642;  // mut Pointer const v8::Local<v8::FunctionTemplate> *
struct _qty643;  // mut FunctionProto v8::FunctionTemplate *() const
struct _qty644;  // mut Pointer v8::FunctionTemplate *
struct _qty645;  // mut TemplateTypeParm S
struct _qty646;  // mut FunctionProto bool (const Local<S> &) const
struct _qty647;  // mut LValueReference const Local<S> &
struct _qty648;  // const TemplateSpecialization Local<S>
struct _qty649;  // mut TemplateSpecialization Local<S>
struct _qty650;  // mut TemplateTypeParm S
struct _qty651;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty652;  // mut LValueReference const PersistentBase<S> &
struct _qty653;  // const TemplateSpecialization PersistentBase<S>
struct _qty654;  // mut TemplateSpecialization PersistentBase<S>
struct _qty655;  // mut TemplateTypeParm S
struct _qty656;  // mut FunctionProto bool (const Local<S> &) const
struct _qty657;  // mut LValueReference const Local<S> &
struct _qty658;  // const TemplateSpecialization Local<S>
struct _qty659;  // mut TemplateSpecialization Local<S>
struct _qty660;  // mut TemplateTypeParm S
struct _qty661;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty662;  // mut LValueReference const Persistent<S> &
struct _qty663;  // const TemplateSpecialization Persistent<S>
struct _qty664;  // mut TemplateSpecialization Persistent<S>
struct _qty665;  // mut TemplateTypeParm S
struct _qty666;  // mut FunctionProto Local<v8::FunctionTemplate> (Local<S>)
struct _qty667;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty668;  // mut TemplateSpecialization Local<S>
struct _qty669;  // mut TemplateTypeParm S
struct _qty670;  // mut FunctionProto Local<S> () const
struct _qty671;  // mut TemplateSpecialization Local<S>
struct _qty672;  // mut FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _qty673;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty674;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty675;  // mut FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const PersistentBase<v8::FunctionTemplate> &)
struct _qty676;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty677;  // mut LValueReference const PersistentBase<v8::FunctionTemplate> &
struct _qty678;  // const TemplateSpecialization PersistentBase<v8::FunctionTemplate>
struct _qty679;  // mut Record v8::PersistentBase<v8::FunctionTemplate>
struct _qty680;  // mut FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, const TracedGlobal<v8::FunctionTemplate> &)
struct _qty681;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty682;  // mut LValueReference const TracedGlobal<v8::FunctionTemplate> &
struct _qty683;  // const TemplateSpecialization TracedGlobal<v8::FunctionTemplate>
struct _qty684;  // mut Record v8::TracedGlobal<v8::FunctionTemplate>
struct _qty685;  // mut FunctionProto void (const v8::Local<v8::FunctionTemplate> &)
struct _qty686;  // mut LValueReference const v8::Local<v8::FunctionTemplate> &
struct _qty687;  // const Record v8::Local<v8::FunctionTemplate>
struct _qty688;  // mut FunctionProto void (v8::Local<v8::FunctionTemplate> &&) noexcept
struct _qty689;  // mut RValueReference v8::Local<v8::FunctionTemplate> &&
struct _qty690;  // mut Record v8::Local<v8::Array>
struct _qty691;  // mut Record v8::Local<v8::Map>
struct _qty692;  // mut Record v8::Local<v8::Set>
struct _qty693;  // mut Record v8::Local<v8::Promise>
struct _qty694;  // mut Pointer v8::Local<v8::Promise> *
struct _qty695;  // mut TemplateTypeParm S
struct _qty696;  // mut FunctionProto void (Local<S>)
struct _qty697;  // mut TemplateSpecialization Local<S>
struct _qty698;  // mut FunctionProto void (Local<v8::Promise>)
struct _qty699;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty700;  // mut Pointer const v8::Local<v8::Promise> *
struct _qty701;  // mut FunctionProto v8::Promise *() const
struct _qty702;  // mut Pointer v8::Promise *
struct _qty703;  // mut TemplateTypeParm S
struct _qty704;  // mut FunctionProto bool (const Local<S> &) const
struct _qty705;  // mut LValueReference const Local<S> &
struct _qty706;  // const TemplateSpecialization Local<S>
struct _qty707;  // mut TemplateSpecialization Local<S>
struct _qty708;  // mut TemplateTypeParm S
struct _qty709;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty710;  // mut LValueReference const PersistentBase<S> &
struct _qty711;  // const TemplateSpecialization PersistentBase<S>
struct _qty712;  // mut TemplateSpecialization PersistentBase<S>
struct _qty713;  // mut TemplateTypeParm S
struct _qty714;  // mut FunctionProto bool (const Local<S> &) const
struct _qty715;  // mut LValueReference const Local<S> &
struct _qty716;  // const TemplateSpecialization Local<S>
struct _qty717;  // mut TemplateSpecialization Local<S>
struct _qty718;  // mut TemplateTypeParm S
struct _qty719;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty720;  // mut LValueReference const Persistent<S> &
struct _qty721;  // const TemplateSpecialization Persistent<S>
struct _qty722;  // mut TemplateSpecialization Persistent<S>
struct _qty723;  // mut TemplateTypeParm S
struct _qty724;  // mut FunctionProto Local<v8::Promise> (Local<S>)
struct _qty725;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty726;  // mut TemplateSpecialization Local<S>
struct _qty727;  // mut TemplateTypeParm S
struct _qty728;  // mut FunctionProto Local<S> () const
struct _qty729;  // mut TemplateSpecialization Local<S>
struct _qty730;  // mut FunctionProto Local<v8::Promise> (v8::Isolate *, Local<v8::Promise>)
struct _qty731;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty732;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty733;  // mut FunctionProto Local<v8::Promise> (v8::Isolate *, const PersistentBase<v8::Promise> &)
struct _qty734;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty735;  // mut LValueReference const PersistentBase<v8::Promise> &
struct _qty736;  // const TemplateSpecialization PersistentBase<v8::Promise>
struct _qty737;  // mut Record v8::PersistentBase<v8::Promise>
struct _qty738;  // mut FunctionProto Local<v8::Promise> (v8::Isolate *, const TracedGlobal<v8::Promise> &)
struct _qty739;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty740;  // mut LValueReference const TracedGlobal<v8::Promise> &
struct _qty741;  // const TemplateSpecialization TracedGlobal<v8::Promise>
struct _qty742;  // mut Record v8::TracedGlobal<v8::Promise>
struct _qty743;  // mut FunctionProto void (const v8::Local<v8::Promise> &) noexcept
struct _qty744;  // mut LValueReference const v8::Local<v8::Promise> &
struct _qty745;  // const Record v8::Local<v8::Promise>
struct _qty746;  // mut FunctionProto void (v8::Local<v8::Promise> &&)
struct _qty747;  // mut RValueReference v8::Local<v8::Promise> &&
struct _qty748;  // mut Record v8::Local<v8::Uint8Array>
struct _qty749;  // mut Record v8::Local<v8::Uint8ClampedArray>
struct _qty750;  // mut Record v8::Local<v8::Int8Array>
struct _qty751;  // mut Record v8::Local<v8::Uint16Array>
struct _qty752;  // mut Record v8::Local<v8::Int16Array>
struct _qty753;  // mut Record v8::Local<v8::Uint32Array>
struct _qty754;  // mut Record v8::Local<v8::Int32Array>
struct _qty755;  // mut Record v8::Local<v8::Float32Array>
struct _qty756;  // mut Record v8::Local<v8::Float64Array>
struct _qty757;  // mut Record v8::Local<v8::BigInt64Array>
struct _qty758;  // mut Record v8::Local<v8::BigUint64Array>
struct _qty759;  // mut Record v8::Local<v8::DataView>
struct _qty760;  // mut Record v8::Local<v8::External>
struct _qty761;  // mut Record v8::Local<v8::Data>
struct _qty762;  // mut Pointer v8::Local<v8::Data> *
struct _qty763;  // mut TemplateTypeParm S
struct _qty764;  // mut FunctionProto void (Local<S>)
struct _qty765;  // mut TemplateSpecialization Local<S>
struct _qty766;  // mut FunctionProto void (Local<v8::Data>)
struct _qty767;  // mut TemplateSpecialization Local<v8::Data>
struct _qty768;  // mut Pointer const v8::Local<v8::Data> *
struct _qty769;  // mut FunctionProto v8::Data *() const
struct _qty770;  // mut Pointer v8::Data *
struct _qty771;  // mut TemplateTypeParm S
struct _qty772;  // mut FunctionProto bool (const Local<S> &) const
struct _qty773;  // mut LValueReference const Local<S> &
struct _qty774;  // const TemplateSpecialization Local<S>
struct _qty775;  // mut TemplateSpecialization Local<S>
struct _qty776;  // mut TemplateTypeParm S
struct _qty777;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty778;  // mut LValueReference const PersistentBase<S> &
struct _qty779;  // const TemplateSpecialization PersistentBase<S>
struct _qty780;  // mut TemplateSpecialization PersistentBase<S>
struct _qty781;  // mut TemplateTypeParm S
struct _qty782;  // mut FunctionProto bool (const Local<S> &) const
struct _qty783;  // mut LValueReference const Local<S> &
struct _qty784;  // const TemplateSpecialization Local<S>
struct _qty785;  // mut TemplateSpecialization Local<S>
struct _qty786;  // mut TemplateTypeParm S
struct _qty787;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty788;  // mut LValueReference const Persistent<S> &
struct _qty789;  // const TemplateSpecialization Persistent<S>
struct _qty790;  // mut TemplateSpecialization Persistent<S>
struct _qty791;  // mut TemplateTypeParm S
struct _qty792;  // mut FunctionProto Local<v8::Data> (Local<S>)
struct _qty793;  // mut TemplateSpecialization Local<v8::Data>
struct _qty794;  // mut TemplateSpecialization Local<S>
struct _qty795;  // mut TemplateTypeParm S
struct _qty796;  // mut FunctionProto Local<S> () const
struct _qty797;  // mut TemplateSpecialization Local<S>
struct _qty798;  // mut FunctionProto Local<v8::Data> (v8::Isolate *, Local<v8::Data>)
struct _qty799;  // mut TemplateSpecialization Local<v8::Data>
struct _qty800;  // mut TemplateSpecialization Local<v8::Data>
struct _qty801;  // mut FunctionProto Local<v8::Data> (v8::Isolate *, const PersistentBase<v8::Data> &)
struct _qty802;  // mut TemplateSpecialization Local<v8::Data>
struct _qty803;  // mut LValueReference const PersistentBase<v8::Data> &
struct _qty804;  // const TemplateSpecialization PersistentBase<v8::Data>
struct _qty805;  // mut Record v8::PersistentBase<v8::Data>
struct _qty806;  // mut FunctionProto Local<v8::Data> (v8::Isolate *, const TracedGlobal<v8::Data> &)
struct _qty807;  // mut TemplateSpecialization Local<v8::Data>
struct _qty808;  // mut LValueReference const TracedGlobal<v8::Data> &
struct _qty809;  // const TemplateSpecialization TracedGlobal<v8::Data>
struct _qty810;  // mut Record v8::TracedGlobal<v8::Data>
struct _qty811;  // mut FunctionProto void (const v8::Local<v8::Data> &) noexcept
struct _qty812;  // mut LValueReference const v8::Local<v8::Data> &
struct _qty813;  // const Record v8::Local<v8::Data>
struct _qty814;  // mut FunctionProto void (v8::Local<v8::Data> &&)
struct _qty815;  // mut RValueReference v8::Local<v8::Data> &&
struct _qty816;  // mut Record v8::Local<v8::AccessorSignature>
struct _qty817;  // mut Pointer v8::Local<v8::AccessorSignature> *
struct _qty818;  // mut TemplateTypeParm S
struct _qty819;  // mut FunctionProto void (Local<S>)
struct _qty820;  // mut TemplateSpecialization Local<S>
struct _qty821;  // mut FunctionProto void (Local<v8::AccessorSignature>)
struct _qty822;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty823;  // mut Pointer const v8::Local<v8::AccessorSignature> *
struct _qty824;  // mut FunctionProto v8::AccessorSignature *() const
struct _qty825;  // mut Pointer v8::AccessorSignature *
struct _qty826;  // mut TemplateTypeParm S
struct _qty827;  // mut FunctionProto bool (const Local<S> &) const
struct _qty828;  // mut LValueReference const Local<S> &
struct _qty829;  // const TemplateSpecialization Local<S>
struct _qty830;  // mut TemplateSpecialization Local<S>
struct _qty831;  // mut TemplateTypeParm S
struct _qty832;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty833;  // mut LValueReference const PersistentBase<S> &
struct _qty834;  // const TemplateSpecialization PersistentBase<S>
struct _qty835;  // mut TemplateSpecialization PersistentBase<S>
struct _qty836;  // mut TemplateTypeParm S
struct _qty837;  // mut FunctionProto bool (const Local<S> &) const
struct _qty838;  // mut LValueReference const Local<S> &
struct _qty839;  // const TemplateSpecialization Local<S>
struct _qty840;  // mut TemplateSpecialization Local<S>
struct _qty841;  // mut TemplateTypeParm S
struct _qty842;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty843;  // mut LValueReference const Persistent<S> &
struct _qty844;  // const TemplateSpecialization Persistent<S>
struct _qty845;  // mut TemplateSpecialization Persistent<S>
struct _qty846;  // mut TemplateTypeParm S
struct _qty847;  // mut FunctionProto Local<v8::AccessorSignature> (Local<S>)
struct _qty848;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty849;  // mut TemplateSpecialization Local<S>
struct _qty850;  // mut TemplateTypeParm S
struct _qty851;  // mut FunctionProto Local<S> () const
struct _qty852;  // mut TemplateSpecialization Local<S>
struct _qty853;  // mut FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::AccessorSignature>)
struct _qty854;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty855;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty856;  // mut FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const PersistentBase<v8::AccessorSignature> &)
struct _qty857;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty858;  // mut LValueReference const PersistentBase<v8::AccessorSignature> &
struct _qty859;  // const TemplateSpecialization PersistentBase<v8::AccessorSignature>
struct _qty860;  // mut Record v8::PersistentBase<v8::AccessorSignature>
struct _qty861;  // mut FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, const TracedGlobal<v8::AccessorSignature> &)
struct _qty862;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty863;  // mut LValueReference const TracedGlobal<v8::AccessorSignature> &
struct _qty864;  // const TemplateSpecialization TracedGlobal<v8::AccessorSignature>
struct _qty865;  // mut Record v8::TracedGlobal<v8::AccessorSignature>
struct _qty866;  // mut FunctionProto void (const v8::Local<v8::AccessorSignature> &)
struct _qty867;  // mut LValueReference const v8::Local<v8::AccessorSignature> &
struct _qty868;  // const Record v8::Local<v8::AccessorSignature>
struct _qty869;  // mut FunctionProto void (v8::Local<v8::AccessorSignature> &&) noexcept
struct _qty870;  // mut RValueReference v8::Local<v8::AccessorSignature> &&
struct _qty871;  // mut Record v8::Local<v8::Signature>
struct _qty872;  // mut Pointer v8::Local<v8::Signature> *
struct _qty873;  // mut TemplateTypeParm S
struct _qty874;  // mut FunctionProto void (Local<S>)
struct _qty875;  // mut TemplateSpecialization Local<S>
struct _qty876;  // mut FunctionProto void (Local<v8::Signature>)
struct _qty877;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty878;  // mut Pointer const v8::Local<v8::Signature> *
struct _qty879;  // mut FunctionProto v8::Signature *() const
struct _qty880;  // mut Pointer v8::Signature *
struct _qty881;  // mut TemplateTypeParm S
struct _qty882;  // mut FunctionProto bool (const Local<S> &) const
struct _qty883;  // mut LValueReference const Local<S> &
struct _qty884;  // const TemplateSpecialization Local<S>
struct _qty885;  // mut TemplateSpecialization Local<S>
struct _qty886;  // mut TemplateTypeParm S
struct _qty887;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty888;  // mut LValueReference const PersistentBase<S> &
struct _qty889;  // const TemplateSpecialization PersistentBase<S>
struct _qty890;  // mut TemplateSpecialization PersistentBase<S>
struct _qty891;  // mut TemplateTypeParm S
struct _qty892;  // mut FunctionProto bool (const Local<S> &) const
struct _qty893;  // mut LValueReference const Local<S> &
struct _qty894;  // const TemplateSpecialization Local<S>
struct _qty895;  // mut TemplateSpecialization Local<S>
struct _qty896;  // mut TemplateTypeParm S
struct _qty897;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty898;  // mut LValueReference const Persistent<S> &
struct _qty899;  // const TemplateSpecialization Persistent<S>
struct _qty900;  // mut TemplateSpecialization Persistent<S>
struct _qty901;  // mut TemplateTypeParm S
struct _qty902;  // mut FunctionProto Local<v8::Signature> (Local<S>)
struct _qty903;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty904;  // mut TemplateSpecialization Local<S>
struct _qty905;  // mut TemplateTypeParm S
struct _qty906;  // mut FunctionProto Local<S> () const
struct _qty907;  // mut TemplateSpecialization Local<S>
struct _qty908;  // mut FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::Signature>)
struct _qty909;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty910;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty911;  // mut FunctionProto Local<v8::Signature> (v8::Isolate *, const PersistentBase<v8::Signature> &)
struct _qty912;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty913;  // mut LValueReference const PersistentBase<v8::Signature> &
struct _qty914;  // const TemplateSpecialization PersistentBase<v8::Signature>
struct _qty915;  // mut Record v8::PersistentBase<v8::Signature>
struct _qty916;  // mut FunctionProto Local<v8::Signature> (v8::Isolate *, const TracedGlobal<v8::Signature> &)
struct _qty917;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty918;  // mut LValueReference const TracedGlobal<v8::Signature> &
struct _qty919;  // const TemplateSpecialization TracedGlobal<v8::Signature>
struct _qty920;  // mut Record v8::TracedGlobal<v8::Signature>
struct _qty921;  // mut FunctionProto void (const v8::Local<v8::Signature> &)
struct _qty922;  // mut LValueReference const v8::Local<v8::Signature> &
struct _qty923;  // const Record v8::Local<v8::Signature>
struct _qty924;  // mut FunctionProto void (v8::Local<v8::Signature> &&) noexcept
struct _qty925;  // mut RValueReference v8::Local<v8::Signature> &&
struct _qty926;  // mut Record v8::Local<v8::ObjectTemplate>
struct _qty927;  // mut Record v8::Local<v8::Message>
struct _qty928;  // mut Record v8::Local<v8::ScriptOrModule>
struct _qty929;  // mut Record v8::Local<v8::Template>
struct _qty930;  // mut TemplateTypeParm T
struct _qty931;  // mut InjectedClassName MaybeLocal<T>
struct _qty932;  // mut Record v8::MaybeLocal<v8::Module>
struct _qty933;  // mut Record v8::MaybeLocal<v8::Value>
struct _qty934;  // mut Pointer v8::MaybeLocal<v8::Value> *
struct _qty935;  // mut TemplateTypeParm S
struct _qty936;  // mut FunctionProto void (Local<S>)
struct _qty937;  // mut TemplateSpecialization Local<S>
struct _qty938;  // mut Pointer const v8::MaybeLocal<v8::Value> *
struct _qty939;  // mut TemplateTypeParm S
struct _qty940;  // mut FunctionProto bool (Local<S> *) const
struct _qty941;  // mut Pointer Local<S> *
struct _qty942;  // mut TemplateSpecialization Local<S>
struct _qty943;  // mut FunctionProto Local<v8::Value> ()
struct _qty944;  // mut TemplateSpecialization Local<v8::Value>
struct _qty945;  // mut TemplateTypeParm S
struct _qty946;  // mut FunctionProto Local<S> (Local<S>) const
struct _qty947;  // mut TemplateSpecialization Local<S>
struct _qty948;  // mut TemplateSpecialization Local<S>
struct _qty949;  // mut FunctionProto void (const v8::MaybeLocal<v8::Value> &)
struct _qty950;  // mut LValueReference const v8::MaybeLocal<v8::Value> &
struct _qty951;  // const Record v8::MaybeLocal<v8::Value>
struct _qty952;  // mut FunctionProto void (v8::MaybeLocal<v8::Value> &&) noexcept
struct _qty953;  // mut RValueReference v8::MaybeLocal<v8::Value> &&
struct _qty954;  // mut Record v8::MaybeLocal<v8::Script>
struct _qty955;  // mut Record v8::MaybeLocal<v8::UnboundScript>
struct _qty956;  // mut Record v8::MaybeLocal<v8::Function>
struct _qty957;  // mut Record v8::MaybeLocal<v8::String>
struct _qty958;  // mut Pointer v8::MaybeLocal<v8::String> *
struct _qty959;  // mut TemplateTypeParm S
struct _qty960;  // mut FunctionProto void (Local<S>)
struct _qty961;  // mut TemplateSpecialization Local<S>
struct _qty962;  // mut Pointer const v8::MaybeLocal<v8::String> *
struct _qty963;  // mut TemplateTypeParm S
struct _qty964;  // mut FunctionProto bool (Local<S> *) const
struct _qty965;  // mut Pointer Local<S> *
struct _qty966;  // mut TemplateSpecialization Local<S>
struct _qty967;  // mut FunctionProto Local<v8::String> ()
struct _qty968;  // mut TemplateSpecialization Local<v8::String>
struct _qty969;  // mut TemplateTypeParm S
struct _qty970;  // mut FunctionProto Local<S> (Local<S>) const
struct _qty971;  // mut TemplateSpecialization Local<S>
struct _qty972;  // mut TemplateSpecialization Local<S>
struct _qty973;  // mut Record v8::MaybeLocal<v8::Object>
struct _qty974;  // mut Pointer v8::MaybeLocal<v8::Object> *
struct _qty975;  // mut TemplateTypeParm S
struct _qty976;  // mut FunctionProto void (Local<S>)
struct _qty977;  // mut TemplateSpecialization Local<S>
struct _qty978;  // mut Pointer const v8::MaybeLocal<v8::Object> *
struct _qty979;  // mut TemplateTypeParm S
struct _qty980;  // mut FunctionProto bool (Local<S> *) const
struct _qty981;  // mut Pointer Local<S> *
struct _qty982;  // mut TemplateSpecialization Local<S>
struct _qty983;  // mut FunctionProto Local<v8::Object> ()
struct _qty984;  // mut TemplateSpecialization Local<v8::Object>
struct _qty985;  // mut TemplateTypeParm S
struct _qty986;  // mut FunctionProto Local<S> (Local<S>) const
struct _qty987;  // mut TemplateSpecialization Local<S>
struct _qty988;  // mut TemplateSpecialization Local<S>
struct _qty989;  // mut FunctionProto void (const v8::MaybeLocal<v8::Object> &)
struct _qty990;  // mut LValueReference const v8::MaybeLocal<v8::Object> &
struct _qty991;  // const Record v8::MaybeLocal<v8::Object>
struct _qty992;  // mut FunctionProto void (v8::MaybeLocal<v8::Object> &&) noexcept
struct _qty993;  // mut RValueReference v8::MaybeLocal<v8::Object> &&
struct _qty994;  // mut Record v8::MaybeLocal<v8::WasmModuleObject>
struct _qty995;  // mut Record v8::MaybeLocal<v8::SharedArrayBuffer>
struct _qty996;  // mut Record v8::MaybeLocal<v8::BigInt>
struct _qty997;  // mut Record v8::MaybeLocal<v8::Number>
struct _qty998;  // mut Record v8::MaybeLocal<v8::Integer>
struct _qty999;  // mut Record v8::MaybeLocal<v8::Uint32>
struct _qty1000;  // mut Record v8::MaybeLocal<v8::Int32>
struct _qty1001;  // mut Record v8::MaybeLocal<v8::Array>
struct _qty1002;  // mut Record v8::MaybeLocal<v8::Map>
struct _qty1003;  // mut Record v8::MaybeLocal<v8::Set>
struct _qty1004;  // mut Record v8::MaybeLocal<v8::Promise::Resolver>
struct _qty1005;  // mut Record v8::MaybeLocal<v8::Promise>
struct _qty1006;  // mut Record v8::MaybeLocal<v8::Proxy>
struct _qty1007;  // mut Record v8::MaybeLocal<v8::RegExp>
struct _qty1008;  // mut Record v8::MaybeLocal<v8::FunctionTemplate>
struct _qty1009;  // mut Record v8::MaybeLocal<v8::ObjectTemplate>
struct _qty1010;  // mut Pointer v8::MaybeLocal<v8::ObjectTemplate> *
struct _qty1011;  // mut TemplateTypeParm S
struct _qty1012;  // mut FunctionProto void (Local<S>)
struct _qty1013;  // mut TemplateSpecialization Local<S>
struct _qty1014;  // mut Pointer const v8::MaybeLocal<v8::ObjectTemplate> *
struct _qty1015;  // mut TemplateTypeParm S
struct _qty1016;  // mut FunctionProto bool (Local<S> *) const
struct _qty1017;  // mut Pointer Local<S> *
struct _qty1018;  // mut TemplateSpecialization Local<S>
struct _qty1019;  // mut FunctionProto Local<v8::ObjectTemplate> ()
struct _qty1020;  // mut TemplateSpecialization Local<v8::ObjectTemplate>
struct _qty1021;  // mut TemplateTypeParm S
struct _qty1022;  // mut FunctionProto Local<S> (Local<S>) const
struct _qty1023;  // mut TemplateSpecialization Local<S>
struct _qty1024;  // mut TemplateSpecialization Local<S>
struct _qty1025;  // mut FunctionProto void (const v8::MaybeLocal<v8::ObjectTemplate> &)
struct _qty1026;  // mut LValueReference const v8::MaybeLocal<v8::ObjectTemplate> &
struct _qty1027;  // const Record v8::MaybeLocal<v8::ObjectTemplate>
struct _qty1028;  // mut FunctionProto void (v8::MaybeLocal<v8::ObjectTemplate> &&) noexcept
struct _qty1029;  // mut RValueReference v8::MaybeLocal<v8::ObjectTemplate> &&
struct _qty1030;  // mut Record v8::MaybeLocal<v8::Context>
struct _qty1031;  // mut TemplateTypeParm T
struct _qty1032;  // mut InjectedClassName Eternal<T>
struct _qty1033;  // mut TemplateTypeParm T
struct _qty1034;  // mut InjectedClassName NonCopyablePersistentTraits<T>
struct _qty1035;  // mut Record v8::NonCopyablePersistentTraits<v8::Promise>
struct _qty1036;  // mut Record v8::NonCopyablePersistentTraits<v8::Value>
struct _qty1037;  // mut TemplateTypeParm T
struct _qty1038;  // mut InjectedClassName PersistentBase<T>
struct _qty1039;  // mut Record v8::PersistentBase<v8::Object>
struct _qty1040;  // mut Pointer v8::PersistentBase<v8::Object> *
struct _qty1041;  // mut TemplateTypeParm S
struct _qty1042;  // mut FunctionProto void (v8::Isolate *, const Local<S> &)
struct _qty1043;  // mut LValueReference const Local<S> &
struct _qty1044;  // const TemplateSpecialization Local<S>
struct _qty1045;  // mut TemplateSpecialization Local<S>
struct _qty1046;  // mut TemplateTypeParm S
struct _qty1047;  // mut FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _qty1048;  // mut LValueReference const PersistentBase<S> &
struct _qty1049;  // const TemplateSpecialization PersistentBase<S>
struct _qty1050;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1051;  // mut Pointer const v8::PersistentBase<v8::Object> *
struct _qty1052;  // mut FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _qty1053;  // mut TemplateSpecialization Local<v8::Object>
struct _qty1054;  // mut TemplateTypeParm S
struct _qty1055;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1056;  // mut LValueReference const PersistentBase<S> &
struct _qty1057;  // const TemplateSpecialization PersistentBase<S>
struct _qty1058;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1059;  // mut TemplateTypeParm S
struct _qty1060;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1061;  // mut LValueReference const Local<S> &
struct _qty1062;  // const TemplateSpecialization Local<S>
struct _qty1063;  // mut TemplateSpecialization Local<S>
struct _qty1064;  // mut TemplateTypeParm S
struct _qty1065;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1066;  // mut LValueReference const PersistentBase<S> &
struct _qty1067;  // const TemplateSpecialization PersistentBase<S>
struct _qty1068;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1069;  // mut TemplateTypeParm S
struct _qty1070;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1071;  // mut LValueReference const Local<S> &
struct _qty1072;  // const TemplateSpecialization Local<S>
struct _qty1073;  // mut TemplateSpecialization Local<S>
struct _qty1074;  // mut TemplateTypeParm P
struct _qty1075;  // mut FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _qty1076;  // mut Pointer P *
struct _qty1077;  // mut DependentName typename WeakCallbackInfo<P>::Callback
struct _qty1078;  // mut Enum v8::WeakCallbackType
struct _qty1079;  // mut TemplateTypeParm P
struct _qty1080;  // mut FunctionProto P *()
struct _qty1081;  // mut Pointer P *
struct _qty1082;  // mut FunctionProto void (const char *)
struct _qty1083;  // mut Pointer const char *
struct _qty1084;  // mut Builtin char
struct _qty1085;  // mut FunctionProto void (uint16_t)
struct _qty1086;  // mut Typedef uint16_t
struct _qty1087;  // mut Builtin unsigned short
struct _qty1088;  // mut FunctionProto uint16_t () const
struct _qty1089;  // mut FunctionProto void (const v8::PersistentBase<v8::Object> &)
struct _qty1090;  // mut LValueReference const v8::PersistentBase<v8::Object> &
struct _qty1091;  // const Record v8::PersistentBase<v8::Object>
struct _qty1092;  // mut Pointer v8::PersistentBase<v8::Promise> *
struct _qty1093;  // mut TemplateTypeParm S
struct _qty1094;  // mut FunctionProto void (v8::Isolate *, const Local<S> &)
struct _qty1095;  // mut LValueReference const Local<S> &
struct _qty1096;  // const TemplateSpecialization Local<S>
struct _qty1097;  // mut TemplateSpecialization Local<S>
struct _qty1098;  // mut TemplateTypeParm S
struct _qty1099;  // mut FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _qty1100;  // mut LValueReference const PersistentBase<S> &
struct _qty1101;  // const TemplateSpecialization PersistentBase<S>
struct _qty1102;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1103;  // mut Pointer const v8::PersistentBase<v8::Promise> *
struct _qty1104;  // mut FunctionProto Local<v8::Promise> (v8::Isolate *) const
struct _qty1105;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty1106;  // mut TemplateTypeParm S
struct _qty1107;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1108;  // mut LValueReference const PersistentBase<S> &
struct _qty1109;  // const TemplateSpecialization PersistentBase<S>
struct _qty1110;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1111;  // mut TemplateTypeParm S
struct _qty1112;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1113;  // mut LValueReference const Local<S> &
struct _qty1114;  // const TemplateSpecialization Local<S>
struct _qty1115;  // mut TemplateSpecialization Local<S>
struct _qty1116;  // mut TemplateTypeParm S
struct _qty1117;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1118;  // mut LValueReference const PersistentBase<S> &
struct _qty1119;  // const TemplateSpecialization PersistentBase<S>
struct _qty1120;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1121;  // mut TemplateTypeParm S
struct _qty1122;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1123;  // mut LValueReference const Local<S> &
struct _qty1124;  // const TemplateSpecialization Local<S>
struct _qty1125;  // mut TemplateSpecialization Local<S>
struct _qty1126;  // mut TemplateTypeParm P
struct _qty1127;  // mut FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _qty1128;  // mut Pointer P *
struct _qty1129;  // mut DependentName typename WeakCallbackInfo<P>::Callback
struct _qty1130;  // mut TemplateTypeParm P
struct _qty1131;  // mut FunctionProto P *()
struct _qty1132;  // mut Pointer P *
struct _qty1133;  // mut FunctionProto void (const v8::PersistentBase<v8::Promise> &)
struct _qty1134;  // mut LValueReference const v8::PersistentBase<v8::Promise> &
struct _qty1135;  // const Record v8::PersistentBase<v8::Promise>
struct _qty1136;  // mut TemplateTypeParm T
struct _qty1137;  // mut TemplateTypeParm M
struct _qty1138;  // mut InjectedClassName Persistent<T, M>
struct _qty1139;  // mut Record v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _qty1140;  // mut Pointer v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _qty1141;  // mut TemplateTypeParm S
struct _qty1142;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1143;  // mut TemplateSpecialization Local<S>
struct _qty1144;  // mut TemplateTypeParm S
struct _qty1145;  // mut TemplateTypeParm M2
struct _qty1146;  // mut FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _qty1147;  // mut LValueReference const Persistent<S, M2> &
struct _qty1148;  // const TemplateSpecialization Persistent<S, M2>
struct _qty1149;  // mut TemplateSpecialization Persistent<S, M2>
struct _qty1150;  // mut FunctionProto void (const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _qty1151;  // mut LValueReference const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _qty1152;  // const Record v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _qty1153;  // mut TemplateTypeParm S
struct _qty1154;  // mut TemplateTypeParm M2
struct _qty1155;  // mut FunctionProto void (const Persistent<S, M2> &)
struct _qty1156;  // mut LValueReference const Persistent<S, M2> &
struct _qty1157;  // const TemplateSpecialization Persistent<S, M2>
struct _qty1158;  // mut TemplateSpecialization Persistent<S, M2>
struct _qty1159;  // mut FunctionProto void (const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _qty1160;  // mut LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _qty1161;  // const TemplateSpecialization Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _qty1162;  // mut FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _qty1163;  // mut LValueReference v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _qty1164;  // mut TemplateTypeParm S
struct _qty1165;  // mut TemplateTypeParm M2
struct _qty1166;  // mut FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<S, M2> &)
struct _qty1167;  // mut LValueReference const Persistent<S, M2> &
struct _qty1168;  // const TemplateSpecialization Persistent<S, M2>
struct _qty1169;  // mut TemplateSpecialization Persistent<S, M2>
struct _qty1170;  // mut FunctionProto v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &(const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &)
struct _qty1171;  // mut LValueReference const Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > &
struct _qty1172;  // const TemplateSpecialization Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> >
struct _qty1173;  // mut FunctionProto void ()
struct _qty1174;  // mut TemplateTypeParm S
struct _qty1175;  // mut FunctionProto Persistent<v8::Promise> &(const Persistent<S> &)
struct _qty1176;  // mut LValueReference Persistent<v8::Promise> &
struct _qty1177;  // mut TemplateSpecialization Persistent<v8::Promise>
struct _qty1178;  // mut Record v8::Persistent<v8::Promise, v8::NonCopyablePersistentTraits<v8::Promise> >
struct _qty1179;  // mut LValueReference const Persistent<S> &
struct _qty1180;  // const TemplateSpecialization Persistent<S>
struct _qty1181;  // mut TemplateSpecialization Persistent<S>
struct _qty1182;  // mut TemplateTypeParm S
struct _qty1183;  // mut FunctionProto Persistent<S> &() const
struct _qty1184;  // mut LValueReference Persistent<S> &
struct _qty1185;  // mut TemplateSpecialization Persistent<S>
struct _qty1186;  // mut Pointer const v8::Persistent<v8::Promise, v8::CopyablePersistentTraits<v8::Promise> > *
struct _qty1187;  // mut Record v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >
struct _qty1188;  // mut TemplateTypeParm T
struct _qty1189;  // mut InjectedClassName Global<T>
struct _qty1190;  // mut TemplateTypeParm T
struct _qty1191;  // mut InjectedClassName TracedGlobal<T>
struct _qty1192;  // mut Record v8::TracedGlobal<v8::Object>
struct _qty1193;  // mut FunctionProto void ()
struct _qty1194;  // mut Pointer v8::TracedGlobal<v8::Object> *
struct _qty1195;  // mut FunctionProto void ()
struct _qty1196;  // mut TemplateTypeParm S
struct _qty1197;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1198;  // mut TemplateSpecialization Local<S>
struct _qty1199;  // mut FunctionProto void (v8::TracedGlobal<v8::Object> &&)
struct _qty1200;  // mut RValueReference v8::TracedGlobal<v8::Object> &&
struct _qty1201;  // mut TemplateTypeParm S
struct _qty1202;  // mut FunctionProto v8::TracedGlobal<v8::Object> &(TracedGlobal<S> &&)
struct _qty1203;  // mut LValueReference v8::TracedGlobal<v8::Object> &
struct _qty1204;  // mut RValueReference TracedGlobal<S> &&
struct _qty1205;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1206;  // mut FunctionProto void (const v8::TracedGlobal<v8::Object> &)
struct _qty1207;  // mut LValueReference const v8::TracedGlobal<v8::Object> &
struct _qty1208;  // const Record v8::TracedGlobal<v8::Object>
struct _qty1209;  // mut Pointer const v8::TracedGlobal<v8::Object> *
struct _qty1210;  // mut TemplateTypeParm S
struct _qty1211;  // mut FunctionProto void (v8::Isolate *, const Local<S> &)
struct _qty1212;  // mut LValueReference const Local<S> &
struct _qty1213;  // const TemplateSpecialization Local<S>
struct _qty1214;  // mut TemplateSpecialization Local<S>
struct _qty1215;  // mut FunctionProto Local<v8::Object> (v8::Isolate *) const
struct _qty1216;  // mut TemplateSpecialization Local<v8::Object>
struct _qty1217;  // mut TemplateTypeParm S
struct _qty1218;  // mut FunctionProto TracedGlobal<S> &() const
struct _qty1219;  // mut LValueReference TracedGlobal<S> &
struct _qty1220;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1221;  // mut TemplateTypeParm S
struct _qty1222;  // mut FunctionProto bool (const TracedGlobal<S> &) const
struct _qty1223;  // mut LValueReference const TracedGlobal<S> &
struct _qty1224;  // const TemplateSpecialization TracedGlobal<S>
struct _qty1225;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1226;  // mut TemplateTypeParm S
struct _qty1227;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1228;  // mut LValueReference const Local<S> &
struct _qty1229;  // const TemplateSpecialization Local<S>
struct _qty1230;  // mut TemplateSpecialization Local<S>
struct _qty1231;  // mut TemplateTypeParm S
struct _qty1232;  // mut FunctionProto bool (const TracedGlobal<S> &) const
struct _qty1233;  // mut LValueReference const TracedGlobal<S> &
struct _qty1234;  // const TemplateSpecialization TracedGlobal<S>
struct _qty1235;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1236;  // mut TemplateTypeParm S
struct _qty1237;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1238;  // mut LValueReference const Local<S> &
struct _qty1239;  // const TemplateSpecialization Local<S>
struct _qty1240;  // mut TemplateSpecialization Local<S>
struct _qty1241;  // mut FunctionProto void (void *, WeakCallbackInfo<void>::Callback)
struct _qty1242;  // mut Pointer void *
struct _qty1243;  // mut Elaborated WeakCallbackInfo<void>::Callback
struct _qty1244;  // mut LValueReference const WeakCallbackInfo<void> &
struct _qty1245;  // const TemplateSpecialization WeakCallbackInfo<void>
struct _qty1246;  // mut Record v8::WeakCallbackInfo<void>
struct _qty1247;  // mut FunctionProto void (const WeakCallbackInfo<void> &)
struct _qty1248;  // mut Typedef v8::WeakCallbackInfo<void>::Callback
struct _qty1249;  // mut Pointer void (*)(const WeakCallbackInfo<void> &)
struct _qty1250;  // mut TemplateTypeParm K
struct _qty1251;  // mut TemplateTypeParm V
struct _qty1252;  // mut TemplateTypeParm T
struct _qty1253;  // mut InjectedClassName PersistentValueMap<K, V, T>
struct _qty1254;  // mut TemplateTypeParm K
struct _qty1255;  // mut TemplateTypeParm V
struct _qty1256;  // mut TemplateTypeParm T
struct _qty1257;  // mut InjectedClassName PersistentValueMapBase<K, V, T>
struct _qty1258;  // mut TemplateTypeParm K
struct _qty1259;  // mut TemplateTypeParm V
struct _qty1260;  // mut TemplateTypeParm T
struct _qty1261;  // mut InjectedClassName GlobalValueMap<K, V, T>
struct _qty1262;  // mut TemplateTypeParm V
struct _qty1263;  // mut TemplateTypeParm T
struct _qty1264;  // mut InjectedClassName PersistentValueVector<V, T>
struct _qty1265;  // mut TemplateTypeParm T
struct _qty1266;  // mut TemplateTypeParm P
struct _qty1267;  // mut InjectedClassName WeakCallbackObject<T, P>
struct _qty1268;  // mut TemplateTypeParm T
struct _qty1269;  // mut InjectedClassName FunctionCallbackInfo<T>
struct _qty1270;  // mut Record v8::FunctionCallbackInfo<v8::Value>
struct _qty1271;  // mut TemplateTypeParm T
struct _qty1272;  // mut InjectedClassName PropertyCallbackInfo<T>
struct _qty1273;  // mut Record v8::PropertyCallbackInfo<v8::Value>
struct _qty1274;  // mut Record v8::PropertyCallbackInfo<void>
struct _qty1275;  // mut Record v8::PropertyCallbackInfo<v8::Integer>
struct _qty1276;  // mut Record v8::PropertyCallbackInfo<v8::Boolean>
struct _qty1277;  // mut Record v8::PropertyCallbackInfo<v8::Array>
struct _qty1278;  // mut Record v8::CallHandlerHelper
struct _qty1279;  // mut Record v8::EscapableHandleScope
struct _qty1280;  // mut TemplateTypeParm T
struct _qty1281;  // mut InjectedClassName ReturnValue<T>
struct _qty1282;  // mut Record v8::debug::ConsoleCallArguments
struct _qty1283;  // mut TemplateTypeParm T
struct _qty1284;  // mut Pointer Local<T> *
struct _qty1285;  // mut TemplateTypeParm S
struct _qty1286;  // mut FunctionProto void (Local<S>)
struct _qty1287;  // mut TemplateSpecialization Local<S>
struct _qty1288;  // mut Pointer const Local<T> *
struct _qty1289;  // mut FunctionProto T *() const
struct _qty1290;  // mut Pointer T *
struct _qty1291;  // mut TemplateTypeParm S
struct _qty1292;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1293;  // mut LValueReference const Local<S> &
struct _qty1294;  // const TemplateSpecialization Local<S>
struct _qty1295;  // mut TemplateSpecialization Local<S>
struct _qty1296;  // mut TemplateTypeParm S
struct _qty1297;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1298;  // mut LValueReference const PersistentBase<S> &
struct _qty1299;  // const TemplateSpecialization PersistentBase<S>
struct _qty1300;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1301;  // mut TemplateTypeParm S
struct _qty1302;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1303;  // mut LValueReference const Local<S> &
struct _qty1304;  // const TemplateSpecialization Local<S>
struct _qty1305;  // mut TemplateSpecialization Local<S>
struct _qty1306;  // mut TemplateTypeParm S
struct _qty1307;  // mut FunctionProto bool (const Persistent<S> &) const
struct _qty1308;  // mut LValueReference const Persistent<S> &
struct _qty1309;  // const TemplateSpecialization Persistent<S>
struct _qty1310;  // mut TemplateSpecialization Persistent<S>
struct _qty1311;  // mut TemplateTypeParm S
struct _qty1312;  // mut FunctionProto Local<T> (Local<S>)
struct _qty1313;  // mut TemplateSpecialization Local<T>
struct _qty1314;  // mut TemplateSpecialization Local<S>
struct _qty1315;  // mut TemplateTypeParm S
struct _qty1316;  // mut FunctionProto Local<S> () const
struct _qty1317;  // mut TemplateSpecialization Local<S>
struct _qty1318;  // mut FunctionProto Local<T> (v8::Isolate *, Local<T>)
struct _qty1319;  // mut TemplateSpecialization Local<T>
struct _qty1320;  // mut TemplateSpecialization Local<T>
struct _qty1321;  // mut FunctionProto Local<T> (v8::Isolate *, const PersistentBase<T> &)
struct _qty1322;  // mut TemplateSpecialization Local<T>
struct _qty1323;  // mut LValueReference const PersistentBase<T> &
struct _qty1324;  // const TemplateSpecialization PersistentBase<T>
struct _qty1325;  // mut TemplateSpecialization PersistentBase<T>
struct _qty1326;  // mut FunctionProto Local<T> (v8::Isolate *, const TracedGlobal<T> &)
struct _qty1327;  // mut TemplateSpecialization Local<T>
struct _qty1328;  // mut LValueReference const TracedGlobal<T> &
struct _qty1329;  // const TemplateSpecialization TracedGlobal<T>
struct _qty1330;  // mut TemplateSpecialization TracedGlobal<T>
struct _qty1331;  // mut Typedef v8::Handle
struct _qty1332;  // mut TemplateSpecialization Local<T>
struct _qty1333;  // mut TemplateTypeParm T
struct _qty1334;  // mut TemplateTypeParm T
struct _qty1335;  // mut Pointer MaybeLocal<T> *
struct _qty1336;  // mut TemplateTypeParm S
struct _qty1337;  // mut FunctionProto void (Local<S>)
struct _qty1338;  // mut TemplateSpecialization Local<S>
struct _qty1339;  // mut Pointer const MaybeLocal<T> *
struct _qty1340;  // mut TemplateTypeParm S
struct _qty1341;  // mut FunctionProto bool (Local<S> *) const
struct _qty1342;  // mut Pointer Local<S> *
struct _qty1343;  // mut TemplateSpecialization Local<S>
struct _qty1344;  // mut FunctionProto Local<T> ()
struct _qty1345;  // mut TemplateSpecialization Local<T>
struct _qty1346;  // mut TemplateTypeParm S
struct _qty1347;  // mut FunctionProto Local<S> (Local<S>) const
struct _qty1348;  // mut TemplateSpecialization Local<S>
struct _qty1349;  // mut TemplateSpecialization Local<S>
struct _qty1350;  // mut TemplateTypeParm T
struct _qty1351;  // mut Pointer Eternal<T> *
struct _qty1352;  // mut TemplateTypeParm S
struct _qty1353;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1354;  // mut TemplateSpecialization Local<S>
struct _qty1355;  // mut FunctionProto Local<T> (v8::Isolate *) const
struct _qty1356;  // mut TemplateSpecialization Local<T>
struct _qty1357;  // mut Pointer const Eternal<T> *
struct _qty1358;  // mut TemplateTypeParm S
struct _qty1359;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1360;  // mut TemplateSpecialization Local<S>
struct _qty1361;  // const Builtin int
struct _qty1362;  // mut Builtin int
struct _qty1363;  // mut TemplateTypeParm T
struct _qty1364;  // mut InjectedClassName WeakCallbackInfo<T>
struct _qty1365;  // mut Typedef v8::WeakCallbackInfo::Callback
struct _qty1366;  // mut LValueReference const WeakCallbackInfo<T> &
struct _qty1367;  // const TemplateSpecialization WeakCallbackInfo<T>
struct _qty1368;  // mut FunctionProto void (const WeakCallbackInfo<T> &)
struct _qty1369;  // mut Pointer void (*)(const WeakCallbackInfo<T> &)
struct _qty1370;  // mut FunctionProto void (v8::Isolate *, T *, void **, v8::WeakCallbackInfo::Callback *)
struct _qty1371;  // mut Pointer T *
struct _qty1372;  // mut Decayed void **
struct _qty1373;  // mut Pointer void **
struct _qty1374;  // mut Pointer v8::WeakCallbackInfo::Callback *
struct _qty1375;  // mut Pointer WeakCallbackInfo<T> *
struct _qty1376;  // mut FunctionProto v8::Isolate *() const
struct _qty1377;  // mut Pointer const WeakCallbackInfo<T> *
struct _qty1378;  // mut FunctionProto T *() const
struct _qty1379;  // mut FunctionProto void *(int) const
struct _qty1380;  // mut FunctionProto void (v8::WeakCallbackInfo::Callback) const
struct _qty1381;  // mut FunctionProto void (v8::Isolate *, void *, void **, v8::WeakCallbackInfo<void>::Callback *)
struct _qty1382;  // mut Pointer void *
struct _qty1383;  // mut Pointer v8::WeakCallbackInfo<void>::Callback *
struct _qty1384;  // mut Pointer v8::WeakCallbackInfo<void> *
struct _qty1385;  // mut Pointer const v8::WeakCallbackInfo<void> *
struct _qty1386;  // mut FunctionProto void *() const
struct _qty1387;  // mut FunctionProto void (v8::WeakCallbackInfo<void>::Callback) const
struct _qty1388;  // mut TemplateTypeParm T
struct _qty1389;  // mut Pointer PersistentBase<T> *
struct _qty1390;  // mut TemplateTypeParm S
struct _qty1391;  // mut FunctionProto void (v8::Isolate *, const Local<S> &)
struct _qty1392;  // mut LValueReference const Local<S> &
struct _qty1393;  // const TemplateSpecialization Local<S>
struct _qty1394;  // mut TemplateSpecialization Local<S>
struct _qty1395;  // mut TemplateTypeParm S
struct _qty1396;  // mut FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _qty1397;  // mut LValueReference const PersistentBase<S> &
struct _qty1398;  // const TemplateSpecialization PersistentBase<S>
struct _qty1399;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1400;  // mut Pointer const PersistentBase<T> *
struct _qty1401;  // mut FunctionProto Local<T> (v8::Isolate *) const
struct _qty1402;  // mut TemplateSpecialization Local<T>
struct _qty1403;  // mut TemplateTypeParm S
struct _qty1404;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1405;  // mut LValueReference const PersistentBase<S> &
struct _qty1406;  // const TemplateSpecialization PersistentBase<S>
struct _qty1407;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1408;  // mut TemplateTypeParm S
struct _qty1409;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1410;  // mut LValueReference const Local<S> &
struct _qty1411;  // const TemplateSpecialization Local<S>
struct _qty1412;  // mut TemplateSpecialization Local<S>
struct _qty1413;  // mut TemplateTypeParm S
struct _qty1414;  // mut FunctionProto bool (const PersistentBase<S> &) const
struct _qty1415;  // mut LValueReference const PersistentBase<S> &
struct _qty1416;  // const TemplateSpecialization PersistentBase<S>
struct _qty1417;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1418;  // mut TemplateTypeParm S
struct _qty1419;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1420;  // mut LValueReference const Local<S> &
struct _qty1421;  // const TemplateSpecialization Local<S>
struct _qty1422;  // mut TemplateSpecialization Local<S>
struct _qty1423;  // mut TemplateTypeParm P
struct _qty1424;  // mut FunctionProto void (P *, typename WeakCallbackInfo<P>::Callback, v8::WeakCallbackType)
struct _qty1425;  // mut Pointer P *
struct _qty1426;  // mut DependentName typename WeakCallbackInfo<P>::Callback
struct _qty1427;  // mut TemplateTypeParm P
struct _qty1428;  // mut FunctionProto P *()
struct _qty1429;  // mut Pointer P *
struct _qty1430;  // mut FunctionProto void (const PersistentBase<T> &)
struct _qty1431;  // mut LValueReference const PersistentBase<T> &
struct _qty1432;  // const InjectedClassName PersistentBase<T>
struct _qty1433;  // mut TemplateTypeParm T
struct _qty1434;  // mut Typedef v8::NonCopyablePersistentTraits::NonCopyablePersistent
struct _qty1435;  // mut TemplateSpecialization Persistent<T, NonCopyablePersistentTraits<T> >
struct _qty1436;  // const Builtin bool
struct _qty1437;  // mut TemplateTypeParm S
struct _qty1438;  // mut TemplateTypeParm M
struct _qty1439;  // mut FunctionProto void (const Persistent<S, M> &, v8::NonCopyablePersistentTraits::NonCopyablePersistent *)
struct _qty1440;  // mut LValueReference const Persistent<S, M> &
struct _qty1441;  // const TemplateSpecialization Persistent<S, M>
struct _qty1442;  // mut TemplateSpecialization Persistent<S, M>
struct _qty1443;  // mut Pointer v8::NonCopyablePersistentTraits::NonCopyablePersistent *
struct _qty1444;  // mut TemplateTypeParm O
struct _qty1445;  // mut TemplateTypeParm T
struct _qty1446;  // mut InjectedClassName CopyablePersistentTraits<T>
struct _qty1447;  // mut Typedef v8::CopyablePersistentTraits::CopyablePersistent
struct _qty1448;  // mut TemplateSpecialization Persistent<T, CopyablePersistentTraits<T> >
struct _qty1449;  // mut TemplateTypeParm S
struct _qty1450;  // mut TemplateTypeParm M
struct _qty1451;  // mut FunctionProto void (const Persistent<S, M> &, v8::CopyablePersistentTraits::CopyablePersistent *)
struct _qty1452;  // mut LValueReference const Persistent<S, M> &
struct _qty1453;  // const TemplateSpecialization Persistent<S, M>
struct _qty1454;  // mut TemplateSpecialization Persistent<S, M>
struct _qty1455;  // mut Pointer v8::CopyablePersistentTraits::CopyablePersistent *
struct _qty1456;  // mut Record v8::CopyablePersistentTraits<v8::Promise>
struct _qty1457;  // mut TemplateTypeParm T
struct _qty1458;  // mut TemplateTypeParm M
struct _qty1459;  // mut Pointer Persistent<T, M> *
struct _qty1460;  // mut TemplateTypeParm S
struct _qty1461;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1462;  // mut TemplateSpecialization Local<S>
struct _qty1463;  // mut TemplateTypeParm S
struct _qty1464;  // mut TemplateTypeParm M2
struct _qty1465;  // mut FunctionProto void (v8::Isolate *, const Persistent<S, M2> &)
struct _qty1466;  // mut LValueReference const Persistent<S, M2> &
struct _qty1467;  // const TemplateSpecialization Persistent<S, M2>
struct _qty1468;  // mut TemplateSpecialization Persistent<S, M2>
struct _qty1469;  // mut FunctionProto void (const Persistent<T, M> &)
struct _qty1470;  // mut LValueReference const Persistent<T, M> &
struct _qty1471;  // const InjectedClassName Persistent<T, M>
struct _qty1472;  // mut TemplateTypeParm S
struct _qty1473;  // mut TemplateTypeParm M2
struct _qty1474;  // mut FunctionProto void (const Persistent<S, M2> &)
struct _qty1475;  // mut LValueReference const Persistent<S, M2> &
struct _qty1476;  // const TemplateSpecialization Persistent<S, M2>
struct _qty1477;  // mut TemplateSpecialization Persistent<S, M2>
struct _qty1478;  // mut FunctionProto Persistent<T, M> &(const Persistent<T, M> &)
struct _qty1479;  // mut LValueReference Persistent<T, M> &
struct _qty1480;  // mut TemplateTypeParm S
struct _qty1481;  // mut TemplateTypeParm M2
struct _qty1482;  // mut FunctionProto Persistent<T, M> &(const Persistent<S, M2> &)
struct _qty1483;  // mut LValueReference const Persistent<S, M2> &
struct _qty1484;  // const TemplateSpecialization Persistent<S, M2>
struct _qty1485;  // mut TemplateSpecialization Persistent<S, M2>
struct _qty1486;  // mut TemplateTypeParm S
struct _qty1487;  // mut FunctionProto Persistent<T> &(const Persistent<S> &)
struct _qty1488;  // mut LValueReference Persistent<T> &
struct _qty1489;  // mut TemplateSpecialization Persistent<T>
struct _qty1490;  // mut LValueReference const Persistent<S> &
struct _qty1491;  // const TemplateSpecialization Persistent<S>
struct _qty1492;  // mut TemplateSpecialization Persistent<S>
struct _qty1493;  // mut TemplateTypeParm S
struct _qty1494;  // mut FunctionProto Persistent<S> &() const
struct _qty1495;  // mut LValueReference Persistent<S> &
struct _qty1496;  // mut TemplateSpecialization Persistent<S>
struct _qty1497;  // mut Pointer const Persistent<T, M> *
struct _qty1498;  // mut TemplateTypeParm T
struct _qty1499;  // mut Pointer Global<T> *
struct _qty1500;  // mut TemplateTypeParm S
struct _qty1501;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1502;  // mut TemplateSpecialization Local<S>
struct _qty1503;  // mut TemplateTypeParm S
struct _qty1504;  // mut FunctionProto void (v8::Isolate *, const PersistentBase<S> &)
struct _qty1505;  // mut LValueReference const PersistentBase<S> &
struct _qty1506;  // const TemplateSpecialization PersistentBase<S>
struct _qty1507;  // mut TemplateSpecialization PersistentBase<S>
struct _qty1508;  // mut FunctionProto void (Global<T> &&)
struct _qty1509;  // mut RValueReference Global<T> &&
struct _qty1510;  // mut TemplateTypeParm S
struct _qty1511;  // mut FunctionProto Global<T> &(Global<S> &&)
struct _qty1512;  // mut LValueReference Global<T> &
struct _qty1513;  // mut RValueReference Global<S> &&
struct _qty1514;  // mut TemplateSpecialization Global<S>
struct _qty1515;  // mut FunctionProto Global<T> ()
struct _qty1516;  // mut Typedef v8::Global::MoveOnlyTypeForCPP03
struct _qty1517;  // mut FunctionProto void (const Global<T> &)
struct _qty1518;  // mut LValueReference const Global<T> &
struct _qty1519;  // const InjectedClassName Global<T>
struct _qty1520;  // mut Typedef v8::UniquePersistent
struct _qty1521;  // mut TemplateSpecialization Global<T>
struct _qty1522;  // mut TemplateTypeParm T
struct _qty1523;  // mut TemplateTypeParm T
struct _qty1524;  // mut Pointer TracedGlobal<T> *
struct _qty1525;  // mut TemplateTypeParm S
struct _qty1526;  // mut FunctionProto void (v8::Isolate *, Local<S>)
struct _qty1527;  // mut TemplateSpecialization Local<S>
struct _qty1528;  // mut FunctionProto void (TracedGlobal<T> &&)
struct _qty1529;  // mut RValueReference TracedGlobal<T> &&
struct _qty1530;  // mut TemplateTypeParm S
struct _qty1531;  // mut FunctionProto TracedGlobal<T> &(TracedGlobal<S> &&)
struct _qty1532;  // mut LValueReference TracedGlobal<T> &
struct _qty1533;  // mut RValueReference TracedGlobal<S> &&
struct _qty1534;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1535;  // mut FunctionProto void (const TracedGlobal<T> &)
struct _qty1536;  // mut LValueReference const TracedGlobal<T> &
struct _qty1537;  // const InjectedClassName TracedGlobal<T>
struct _qty1538;  // mut Pointer const TracedGlobal<T> *
struct _qty1539;  // mut TemplateTypeParm S
struct _qty1540;  // mut FunctionProto void (v8::Isolate *, const Local<S> &)
struct _qty1541;  // mut LValueReference const Local<S> &
struct _qty1542;  // const TemplateSpecialization Local<S>
struct _qty1543;  // mut TemplateSpecialization Local<S>
struct _qty1544;  // mut FunctionProto Local<T> (v8::Isolate *) const
struct _qty1545;  // mut TemplateSpecialization Local<T>
struct _qty1546;  // mut TemplateTypeParm S
struct _qty1547;  // mut FunctionProto TracedGlobal<S> &() const
struct _qty1548;  // mut LValueReference TracedGlobal<S> &
struct _qty1549;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1550;  // mut TemplateTypeParm S
struct _qty1551;  // mut FunctionProto bool (const TracedGlobal<S> &) const
struct _qty1552;  // mut LValueReference const TracedGlobal<S> &
struct _qty1553;  // const TemplateSpecialization TracedGlobal<S>
struct _qty1554;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1555;  // mut TemplateTypeParm S
struct _qty1556;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1557;  // mut LValueReference const Local<S> &
struct _qty1558;  // const TemplateSpecialization Local<S>
struct _qty1559;  // mut TemplateSpecialization Local<S>
struct _qty1560;  // mut TemplateTypeParm S
struct _qty1561;  // mut FunctionProto bool (const TracedGlobal<S> &) const
struct _qty1562;  // mut LValueReference const TracedGlobal<S> &
struct _qty1563;  // const TemplateSpecialization TracedGlobal<S>
struct _qty1564;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty1565;  // mut TemplateTypeParm S
struct _qty1566;  // mut FunctionProto bool (const Local<S> &) const
struct _qty1567;  // mut LValueReference const Local<S> &
struct _qty1568;  // const TemplateSpecialization Local<S>
struct _qty1569;  // mut TemplateSpecialization Local<S>
struct _qty1570;  // mut Record v8::HandleScope
struct _qty1571;  // mut FunctionProto void (v8::Isolate *)
struct _qty1572;  // mut Pointer v8::HandleScope *
struct _qty1573;  // mut FunctionProto void ()
struct _qty1574;  // mut FunctionProto int (v8::Isolate *)
struct _qty1575;  // mut Pointer const v8::HandleScope *
struct _qty1576;  // mut FunctionProto void (const v8::HandleScope &)
struct _qty1577;  // mut LValueReference const v8::HandleScope &
struct _qty1578;  // const Record v8::HandleScope
struct _qty1579;  // mut FunctionProto void ()
struct _qty1580;  // mut FunctionProto internal::Address *(internal::Isolate *, internal::Address)
struct _qty1581;  // mut Pointer internal::Address *
struct _qty1582;  // mut Typedef v8::internal::Address
struct _qty1583;  // mut Typedef uintptr_t
struct _qty1584;  // mut Builtin unsigned long long
struct _qty1585;  // mut Pointer internal::Isolate *
struct _qty1586;  // mut Record v8::internal::Isolate
struct _qty1587;  // mut Elaborated internal::Address
struct _qty1588;  // mut Pointer v8::EscapableHandleScope *
struct _qty1589;  // mut FunctionProto void ()
struct _qty1590;  // mut TemplateTypeParm T
struct _qty1591;  // mut FunctionProto Local<T> (Local<T>)
struct _qty1592;  // mut TemplateSpecialization Local<T>
struct _qty1593;  // mut TemplateSpecialization Local<T>
struct _qty1594;  // mut TemplateTypeParm T
struct _qty1595;  // mut FunctionProto MaybeLocal<T> (MaybeLocal<T>)
struct _qty1596;  // mut TemplateSpecialization MaybeLocal<T>
struct _qty1597;  // mut TemplateSpecialization MaybeLocal<T>
struct _qty1598;  // mut FunctionProto void (const v8::EscapableHandleScope &)
struct _qty1599;  // mut LValueReference const v8::EscapableHandleScope &
struct _qty1600;  // const Record v8::EscapableHandleScope
struct _qty1601;  // mut Record v8::SealHandleScope
struct _qty1602;  // mut Pointer v8::SealHandleScope *
struct _qty1603;  // mut FunctionProto void ()
struct _qty1604;  // mut FunctionProto void (const v8::SealHandleScope &)
struct _qty1605;  // mut LValueReference const v8::SealHandleScope &
struct _qty1606;  // const Record v8::SealHandleScope
struct _qty1607;  // mut Record v8::ScriptOrModule
struct _qty1608;  // mut FunctionProto Local<v8::Value> ()
struct _qty1609;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1610;  // mut Pointer v8::ScriptOrModule *
struct _qty1611;  // mut FunctionProto Local<v8::PrimitiveArray> ()
struct _qty1612;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty1613;  // mut FunctionProto Local<v8::PrimitiveArray> (v8::Isolate *, int)
struct _qty1614;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty1615;  // mut FunctionProto int () const
struct _qty1616;  // mut Pointer const v8::PrimitiveArray *
struct _qty1617;  // mut FunctionProto void (v8::Isolate *, int, Local<v8::Primitive>)
struct _qty1618;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty1619;  // mut Pointer v8::PrimitiveArray *
struct _qty1620;  // mut FunctionProto Local<v8::Primitive> (v8::Isolate *, int)
struct _qty1621;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty1622;  // mut Record v8::ScriptOriginOptions
struct _qty1623;  // mut FunctionProto void (bool, bool, bool, bool)
struct _qty1624;  // mut Pointer v8::ScriptOriginOptions *
struct _qty1625;  // mut FunctionProto void (int)
struct _qty1626;  // mut Pointer const v8::ScriptOriginOptions *
struct _qty1627;  // mut FunctionProto void (const v8::ScriptOriginOptions &) noexcept
struct _qty1628;  // mut LValueReference const v8::ScriptOriginOptions &
struct _qty1629;  // const Record v8::ScriptOriginOptions
struct _qty1630;  // mut FunctionProto void (v8::ScriptOriginOptions &&) noexcept
struct _qty1631;  // mut RValueReference v8::ScriptOriginOptions &&
struct _qty1632;  // mut FunctionProto v8::ScriptOriginOptions &(const v8::ScriptOriginOptions &)
struct _qty1633;  // mut LValueReference v8::ScriptOriginOptions &
struct _qty1634;  // mut FunctionProto v8::ScriptOriginOptions &(v8::ScriptOriginOptions &&)
struct _qty1635;  // mut Record v8::ScriptOrigin
struct _qty1636;  // mut FunctionProto void (Local<v8::Value>, Local<v8::Integer>, Local<v8::Integer>, Local<v8::Boolean>, Local<v8::Integer>, Local<v8::Value>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::Boolean>, Local<v8::PrimitiveArray>)
struct _qty1637;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1638;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty1639;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty1640;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty1641;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty1642;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1643;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty1644;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty1645;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty1646;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty1647;  // mut Pointer v8::ScriptOrigin *
struct _qty1648;  // mut FunctionProto Local<v8::Value> () const
struct _qty1649;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1650;  // mut Pointer const v8::ScriptOrigin *
struct _qty1651;  // mut FunctionProto Local<v8::Integer> () const
struct _qty1652;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty1653;  // mut FunctionProto Local<v8::Integer> () const
struct _qty1654;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty1655;  // mut FunctionProto Local<v8::Integer> () const
struct _qty1656;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty1657;  // mut FunctionProto Local<v8::Value> () const
struct _qty1658;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1659;  // mut FunctionProto Local<v8::PrimitiveArray> () const
struct _qty1660;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty1661;  // mut FunctionProto v8::ScriptOriginOptions () const
struct _qty1662;  // mut FunctionProto void (const v8::ScriptOrigin &)
struct _qty1663;  // mut LValueReference const v8::ScriptOrigin &
struct _qty1664;  // const Record v8::ScriptOrigin
struct _qty1665;  // mut FunctionProto v8::ScriptOrigin &(v8::ScriptOrigin &&)
struct _qty1666;  // mut LValueReference v8::ScriptOrigin &
struct _qty1667;  // mut RValueReference v8::ScriptOrigin &&
struct _qty1668;  // mut FunctionProto void (v8::ScriptOrigin &&)
struct _qty1669;  // mut FunctionProto Local<v8::Script> ()
struct _qty1670;  // mut TemplateSpecialization Local<v8::Script>
struct _qty1671;  // mut Pointer v8::UnboundScript *
struct _qty1672;  // mut FunctionProto int ()
struct _qty1673;  // mut FunctionProto Local<v8::Value> ()
struct _qty1674;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1675;  // mut FunctionProto Local<v8::Value> ()
struct _qty1676;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1677;  // mut FunctionProto Local<v8::Value> ()
struct _qty1678;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1679;  // mut FunctionProto int (int)
struct _qty1680;  // mut Record v8::UnboundModuleScript
struct _qty1681;  // mut Record v8::Location
struct _qty1682;  // mut Pointer v8::Location *
struct _qty1683;  // mut FunctionProto void (int, int)
struct _qty1684;  // mut Record v8::Module
struct _qty1685;  // mut Enum v8::Module::Status
struct _qty1686;  // mut FunctionProto v8::Module::Status () const
struct _qty1687;  // mut Pointer const v8::Module *
struct _qty1688;  // mut FunctionProto Local<v8::Value> () const
struct _qty1689;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1690;  // mut FunctionProto Local<v8::String> (int) const
struct _qty1691;  // mut TemplateSpecialization Local<v8::String>
struct _qty1692;  // mut FunctionProto v8::Location (int) const
struct _qty1693;  // mut Typedef v8::Module::ResolveCallback
struct _qty1694;  // mut TemplateSpecialization MaybeLocal<v8::Module>
struct _qty1695;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1696;  // mut TemplateSpecialization Local<v8::String>
struct _qty1697;  // mut TemplateSpecialization Local<v8::Module>
struct _qty1698;  // mut FunctionProto MaybeLocal<v8::Module> (Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _qty1699;  // mut Pointer MaybeLocal<v8::Module> (*)(Local<v8::Context>, Local<v8::String>, Local<v8::Module>)
struct _qty1700;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, v8::Module::ResolveCallback)
struct _qty1701;  // mut TemplateSpecialization Maybe<bool>
struct _qty1702;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1703;  // mut Pointer v8::Module *
struct _qty1704;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _qty1705;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty1706;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1707;  // mut FunctionProto Local<v8::Value> ()
struct _qty1708;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1709;  // mut FunctionProto Local<v8::UnboundModuleScript> ()
struct _qty1710;  // mut TemplateSpecialization Local<v8::UnboundModuleScript>
struct _qty1711;  // mut FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, Local<v8::String>, v8::ScriptOrigin *)
struct _qty1712;  // mut TemplateSpecialization MaybeLocal<v8::Script>
struct _qty1713;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1714;  // mut TemplateSpecialization Local<v8::String>
struct _qty1715;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _qty1716;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty1717;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1718;  // mut Pointer v8::Script *
struct _qty1719;  // mut FunctionProto Local<v8::UnboundScript> ()
struct _qty1720;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty1721;  // mut Record v8::ScriptCompiler
struct _qty1722;  // mut Record v8::ScriptCompiler::CachedData
struct _qty1723;  // mut Enum v8::ScriptCompiler::CachedData::BufferPolicy
struct _qty1724;  // mut Pointer v8::ScriptCompiler::CachedData *
struct _qty1725;  // mut FunctionProto void (const uint8_t *, int, v8::ScriptCompiler::CachedData::BufferPolicy)
struct _qty1726;  // mut Pointer const uint8_t *
struct _qty1727;  // mut Builtin unsigned char
struct _qty1728;  // mut FunctionProto void (const v8::ScriptCompiler::CachedData &)
struct _qty1729;  // mut LValueReference const v8::ScriptCompiler::CachedData &
struct _qty1730;  // const Record v8::ScriptCompiler::CachedData
struct _qty1731;  // mut FunctionProto v8::ScriptCompiler::CachedData &(const v8::ScriptCompiler::CachedData &)
struct _qty1732;  // mut LValueReference v8::ScriptCompiler::CachedData &
struct _qty1733;  // mut Record v8::ScriptCompiler::Source
struct _qty1734;  // mut FunctionProto void (Local<v8::String>, const v8::ScriptOrigin &, v8::ScriptCompiler::CachedData *)
struct _qty1735;  // mut TemplateSpecialization Local<v8::String>
struct _qty1736;  // mut Pointer v8::ScriptCompiler::Source *
struct _qty1737;  // mut FunctionProto void (Local<v8::String>, v8::ScriptCompiler::CachedData *)
struct _qty1738;  // mut TemplateSpecialization Local<v8::String>
struct _qty1739;  // mut FunctionProto const v8::ScriptCompiler::CachedData *() const
struct _qty1740;  // mut Pointer const v8::ScriptCompiler::CachedData *
struct _qty1741;  // mut Pointer const v8::ScriptCompiler::Source *
struct _qty1742;  // mut FunctionProto const v8::ScriptOriginOptions &() const
struct _qty1743;  // mut FunctionProto void (const v8::ScriptCompiler::Source &)
struct _qty1744;  // mut LValueReference const v8::ScriptCompiler::Source &
struct _qty1745;  // const Record v8::ScriptCompiler::Source
struct _qty1746;  // mut FunctionProto v8::ScriptCompiler::Source &(const v8::ScriptCompiler::Source &)
struct _qty1747;  // mut LValueReference v8::ScriptCompiler::Source &
struct _qty1748;  // mut Record v8::ScriptCompiler::ExternalSourceStream
struct _qty1749;  // mut FunctionProto void ()
struct _qty1750;  // mut Pointer v8::ScriptCompiler::ExternalSourceStream *
struct _qty1751;  // mut FunctionProto size_t (const uint8_t **)
struct _qty1752;  // mut Typedef size_t
struct _qty1753;  // mut Pointer const uint8_t **
struct _qty1754;  // mut FunctionProto bool ()
struct _qty1755;  // mut FunctionProto v8::ScriptCompiler::ExternalSourceStream &(const v8::ScriptCompiler::ExternalSourceStream &)
struct _qty1756;  // mut LValueReference v8::ScriptCompiler::ExternalSourceStream &
struct _qty1757;  // mut LValueReference const v8::ScriptCompiler::ExternalSourceStream &
struct _qty1758;  // const Record v8::ScriptCompiler::ExternalSourceStream
struct _qty1759;  // mut Record v8::ScriptCompiler::StreamedSource
struct _qty1760;  // mut Enum v8::ScriptCompiler::StreamedSource::Encoding
struct _qty1761;  // mut FunctionProto void (v8::ScriptCompiler::ExternalSourceStream *, v8::ScriptCompiler::StreamedSource::Encoding)
struct _qty1762;  // mut Pointer v8::ScriptCompiler::StreamedSource *
struct _qty1763;  // mut FunctionProto void (std::unique_ptr<ExternalSourceStream>, v8::ScriptCompiler::StreamedSource::Encoding)
struct _qty1764;  // mut Elaborated std::unique_ptr<ExternalSourceStream>
struct _qty1765;  // mut TemplateSpecialization unique_ptr<v8::ScriptCompiler::ExternalSourceStream>
struct _qty1766;  // mut Record std::unique_ptr<v8::ScriptCompiler::ExternalSourceStream, std::default_delete<v8::ScriptCompiler::ExternalSourceStream> >
struct _qty1767;  // mut FunctionProto void ()
struct _qty1768;  // mut FunctionProto internal::ScriptStreamingData *() const
struct _qty1769;  // mut Pointer internal::ScriptStreamingData *
struct _qty1770;  // mut Record v8::internal::ScriptStreamingData
struct _qty1771;  // mut Pointer const v8::ScriptCompiler::StreamedSource *
struct _qty1772;  // mut FunctionProto void (const v8::ScriptCompiler::StreamedSource &)
struct _qty1773;  // mut LValueReference const v8::ScriptCompiler::StreamedSource &
struct _qty1774;  // const Record v8::ScriptCompiler::StreamedSource
struct _qty1775;  // mut FunctionProto v8::ScriptCompiler::StreamedSource &(const v8::ScriptCompiler::StreamedSource &)
struct _qty1776;  // mut LValueReference v8::ScriptCompiler::StreamedSource &
struct _qty1777;  // mut Record v8::ScriptCompiler::ScriptStreamingTask
struct _qty1778;  // mut Pointer v8::ScriptCompiler::ScriptStreamingTask *
struct _qty1779;  // mut Enum v8::ScriptCompiler::CompileOptions
struct _qty1780;  // mut Enum v8::ScriptCompiler::NoCacheReason
struct _qty1781;  // mut FunctionProto MaybeLocal<v8::UnboundScript> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _qty1782;  // mut TemplateSpecialization MaybeLocal<v8::UnboundScript>
struct _qty1783;  // mut FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _qty1784;  // mut TemplateSpecialization MaybeLocal<v8::Script>
struct _qty1785;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1786;  // mut FunctionProto v8::ScriptCompiler::ScriptStreamingTask *(v8::Isolate *, v8::ScriptCompiler::StreamedSource *, v8::ScriptCompiler::CompileOptions)
struct _qty1787;  // mut FunctionProto MaybeLocal<v8::Script> (Local<v8::Context>, v8::ScriptCompiler::StreamedSource *, Local<v8::String>, const v8::ScriptOrigin &)
struct _qty1788;  // mut TemplateSpecialization MaybeLocal<v8::Script>
struct _qty1789;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1790;  // mut TemplateSpecialization Local<v8::String>
struct _qty1791;  // mut FunctionProto uint32_t ()
struct _qty1792;  // mut Typedef uint32_t
struct _qty1793;  // mut Builtin unsigned int
struct _qty1794;  // mut FunctionProto MaybeLocal<v8::Module> (v8::Isolate *, v8::ScriptCompiler::Source *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _qty1795;  // mut TemplateSpecialization MaybeLocal<v8::Module>
struct _qty1796;  // mut FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::ScriptCompiler::Source *, size_t, Local<v8::String> *, size_t, Local<v8::Object> *, v8::ScriptCompiler::CompileOptions, v8::ScriptCompiler::NoCacheReason)
struct _qty1797;  // mut TemplateSpecialization MaybeLocal<v8::Function>
struct _qty1798;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1799;  // mut Decayed Local<v8::String> *
struct _qty1800;  // mut Pointer Local<v8::String> *
struct _qty1801;  // mut Decayed Local<v8::Object> *
struct _qty1802;  // mut Pointer Local<v8::Object> *
struct _qty1803;  // mut FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundScript>)
struct _qty1804;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty1805;  // mut FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::UnboundModuleScript>)
struct _qty1806;  // mut TemplateSpecialization Local<v8::UnboundModuleScript>
struct _qty1807;  // mut FunctionProto v8::ScriptCompiler::CachedData *(Local<v8::Function>)
struct _qty1808;  // mut TemplateSpecialization Local<v8::Function>
struct _qty1809;  // mut Record v8::Message
struct _qty1810;  // mut FunctionProto Local<v8::String> () const
struct _qty1811;  // mut TemplateSpecialization Local<v8::String>
struct _qty1812;  // mut Pointer const v8::Message *
struct _qty1813;  // mut FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _qty1814;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty1815;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1816;  // mut FunctionProto v8::ScriptOrigin () const
struct _qty1817;  // mut FunctionProto Local<v8::Value> () const
struct _qty1818;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1819;  // mut FunctionProto Local<v8::StackTrace> () const
struct _qty1820;  // mut TemplateSpecialization Local<v8::StackTrace>
struct _qty1821;  // mut FunctionProto Maybe<int> (Local<v8::Context>) const
struct _qty1822;  // mut TemplateSpecialization Maybe<int>
struct _qty1823;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1824;  // mut FunctionProto Maybe<int> (Local<v8::Context>) const
struct _qty1825;  // mut TemplateSpecialization Maybe<int>
struct _qty1826;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1827;  // mut FunctionProto Maybe<int> (Local<v8::Context>) const
struct _qty1828;  // mut TemplateSpecialization Maybe<int>
struct _qty1829;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1830;  // mut FunctionProto void (v8::Isolate *, FILE *)
struct _qty1831;  // mut Pointer FILE *
struct _qty1832;  // mut Elaborated struct _iobuf
struct _qty1833;  // mut Record _iobuf
struct _qty1834;  // mut Enum v8::StackTrace::StackTraceOptions
struct _qty1835;  // mut FunctionProto Local<v8::StackFrame> (v8::Isolate *, uint32_t) const
struct _qty1836;  // mut TemplateSpecialization Local<v8::StackFrame>
struct _qty1837;  // mut Pointer const v8::StackTrace *
struct _qty1838;  // mut FunctionProto Local<v8::StackTrace> (v8::Isolate *, int, v8::StackTrace::StackTraceOptions)
struct _qty1839;  // mut TemplateSpecialization Local<v8::StackTrace>
struct _qty1840;  // mut Pointer const v8::StackFrame *
struct _qty1841;  // mut FunctionProto Local<v8::String> () const
struct _qty1842;  // mut TemplateSpecialization Local<v8::String>
struct _qty1843;  // mut FunctionProto Local<v8::String> () const
struct _qty1844;  // mut TemplateSpecialization Local<v8::String>
struct _qty1845;  // mut FunctionProto Local<v8::String> () const
struct _qty1846;  // mut TemplateSpecialization Local<v8::String>
struct _qty1847;  // mut Enum v8::StateTag
struct _qty1848;  // mut Record v8::RegisterState
struct _qty1849;  // mut Pointer v8::RegisterState *
struct _qty1850;  // mut Record v8::SampleInfo
struct _qty1851;  // mut Record v8::MemoryRange
struct _qty1852;  // mut Pointer const void *
struct _qty1853;  // mut Record v8::JSEntryStub
struct _qty1854;  // mut Record v8::UnwindState
struct _qty1855;  // mut Record v8::JSON
struct _qty1856;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::String>)
struct _qty1857;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty1858;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1859;  // mut TemplateSpecialization Local<v8::String>
struct _qty1860;  // mut FunctionProto MaybeLocal<v8::String> (Local<v8::Context>, Local<v8::Value>, Local<v8::String>)
struct _qty1861;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty1862;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1863;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1864;  // mut TemplateSpecialization Local<v8::String>
struct _qty1865;  // mut Record v8::ValueSerializer
struct _qty1866;  // mut Record v8::ValueSerializer::Delegate
struct _qty1867;  // mut FunctionProto void ()
struct _qty1868;  // mut Pointer v8::ValueSerializer::Delegate *
struct _qty1869;  // mut FunctionProto void (Local<v8::String>)
struct _qty1870;  // mut TemplateSpecialization Local<v8::String>
struct _qty1871;  // mut FunctionProto Maybe<bool> (v8::Isolate *, Local<v8::Object>)
struct _qty1872;  // mut TemplateSpecialization Maybe<bool>
struct _qty1873;  // mut TemplateSpecialization Local<v8::Object>
struct _qty1874;  // mut FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::SharedArrayBuffer>)
struct _qty1875;  // mut TemplateSpecialization Maybe<uint32_t>
struct _qty1876;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty1877;  // mut FunctionProto Maybe<uint32_t> (v8::Isolate *, Local<v8::WasmModuleObject>)
struct _qty1878;  // mut TemplateSpecialization Maybe<uint32_t>
struct _qty1879;  // mut TemplateSpecialization Local<v8::WasmModuleObject>
struct _qty1880;  // mut FunctionProto void *(void *, size_t, size_t *)
struct _qty1881;  // mut Pointer size_t *
struct _qty1882;  // mut FunctionProto void (void *)
struct _qty1883;  // mut FunctionProto v8::ValueSerializer::Delegate &(const v8::ValueSerializer::Delegate &)
struct _qty1884;  // mut LValueReference v8::ValueSerializer::Delegate &
struct _qty1885;  // mut LValueReference const v8::ValueSerializer::Delegate &
struct _qty1886;  // const Record v8::ValueSerializer::Delegate
struct _qty1887;  // mut Pointer v8::ValueSerializer *
struct _qty1888;  // mut FunctionProto void (v8::Isolate *, v8::ValueSerializer::Delegate *)
struct _qty1889;  // mut FunctionProto void ()
struct _qty1890;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty1891;  // mut TemplateSpecialization Maybe<bool>
struct _qty1892;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1893;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1894;  // mut FunctionProto std::pair<uint8_t *, size_t> ()
struct _qty1895;  // mut Elaborated std::pair<uint8_t *, size_t>
struct _qty1896;  // mut TemplateSpecialization pair<uint8_t *, size_t>
struct _qty1897;  // mut Record std::pair<unsigned char *, unsigned long long>
struct _qty1898;  // mut FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _qty1899;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty1900;  // mut FunctionProto void (bool)
struct _qty1901;  // mut FunctionProto void (uint32_t)
struct _qty1902;  // mut FunctionProto void (uint64_t)
struct _qty1903;  // mut Typedef uint64_t
struct _qty1904;  // mut FunctionProto void (double)
struct _qty1905;  // mut Builtin double
struct _qty1906;  // mut FunctionProto void (const void *, size_t)
struct _qty1907;  // mut FunctionProto void (const v8::ValueSerializer &)
struct _qty1908;  // mut LValueReference const v8::ValueSerializer &
struct _qty1909;  // const Record v8::ValueSerializer
struct _qty1910;  // mut Record v8::ValueDeserializer
struct _qty1911;  // mut Record v8::ValueDeserializer::Delegate
struct _qty1912;  // mut FunctionProto void ()
struct _qty1913;  // mut Pointer v8::ValueDeserializer::Delegate *
struct _qty1914;  // mut FunctionProto MaybeLocal<v8::Object> (v8::Isolate *)
struct _qty1915;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty1916;  // mut FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, uint32_t)
struct _qty1917;  // mut TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _qty1918;  // mut FunctionProto MaybeLocal<v8::SharedArrayBuffer> (v8::Isolate *, uint32_t)
struct _qty1919;  // mut TemplateSpecialization MaybeLocal<v8::SharedArrayBuffer>
struct _qty1920;  // mut FunctionProto v8::ValueDeserializer::Delegate &(const v8::ValueDeserializer::Delegate &)
struct _qty1921;  // mut LValueReference v8::ValueDeserializer::Delegate &
struct _qty1922;  // mut LValueReference const v8::ValueDeserializer::Delegate &
struct _qty1923;  // const Record v8::ValueDeserializer::Delegate
struct _qty1924;  // mut FunctionProto void (v8::Isolate *, const uint8_t *, size_t)
struct _qty1925;  // mut Pointer v8::ValueDeserializer *
struct _qty1926;  // mut FunctionProto void (v8::Isolate *, const uint8_t *, size_t, v8::ValueDeserializer::Delegate *)
struct _qty1927;  // mut FunctionProto void ()
struct _qty1928;  // mut FunctionProto Maybe<bool> (Local<v8::Context>)
struct _qty1929;  // mut TemplateSpecialization Maybe<bool>
struct _qty1930;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1931;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>)
struct _qty1932;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty1933;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1934;  // mut FunctionProto void (uint32_t, Local<v8::ArrayBuffer>)
struct _qty1935;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty1936;  // mut FunctionProto void (uint32_t, Local<v8::SharedArrayBuffer>)
struct _qty1937;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty1938;  // mut FunctionProto uint32_t () const
struct _qty1939;  // mut Pointer const v8::ValueDeserializer *
struct _qty1940;  // mut FunctionProto bool (uint32_t *)
struct _qty1941;  // mut Pointer uint32_t *
struct _qty1942;  // mut FunctionProto bool (uint64_t *)
struct _qty1943;  // mut Pointer uint64_t *
struct _qty1944;  // mut FunctionProto bool (double *)
struct _qty1945;  // mut Pointer double *
struct _qty1946;  // mut FunctionProto bool (size_t, const void **)
struct _qty1947;  // mut Pointer const void **
struct _qty1948;  // mut FunctionProto void (const v8::ValueDeserializer &)
struct _qty1949;  // mut LValueReference const v8::ValueDeserializer &
struct _qty1950;  // const Record v8::ValueDeserializer
struct _qty1951;  // mut Pointer const v8::Value *
struct _qty1952;  // mut FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>) const
struct _qty1953;  // mut TemplateSpecialization MaybeLocal<v8::BigInt>
struct _qty1954;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1955;  // mut FunctionProto MaybeLocal<v8::Number> (Local<v8::Context>) const
struct _qty1956;  // mut TemplateSpecialization MaybeLocal<v8::Number>
struct _qty1957;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1958;  // mut FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _qty1959;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty1960;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1961;  // mut FunctionProto MaybeLocal<v8::String> (Local<v8::Context>) const
struct _qty1962;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty1963;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1964;  // mut FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _qty1965;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty1966;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1967;  // mut FunctionProto MaybeLocal<v8::Integer> (Local<v8::Context>) const
struct _qty1968;  // mut TemplateSpecialization MaybeLocal<v8::Integer>
struct _qty1969;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1970;  // mut FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _qty1971;  // mut TemplateSpecialization MaybeLocal<v8::Uint32>
struct _qty1972;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1973;  // mut FunctionProto MaybeLocal<v8::Int32> (Local<v8::Context>) const
struct _qty1974;  // mut TemplateSpecialization MaybeLocal<v8::Int32>
struct _qty1975;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1976;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *) const
struct _qty1977;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty1978;  // mut FunctionProto MaybeLocal<v8::Uint32> (Local<v8::Context>) const
struct _qty1979;  // mut TemplateSpecialization MaybeLocal<v8::Uint32>
struct _qty1980;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1981;  // mut FunctionProto bool (v8::Isolate *) const
struct _qty1982;  // mut FunctionProto Maybe<double> (Local<v8::Context>) const
struct _qty1983;  // mut TemplateSpecialization Maybe<double>
struct _qty1984;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1985;  // mut FunctionProto Maybe<int64_t> (Local<v8::Context>) const
struct _qty1986;  // mut TemplateSpecialization Maybe<int64_t>
struct _qty1987;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1988;  // mut FunctionProto Maybe<uint32_t> (Local<v8::Context>) const
struct _qty1989;  // mut TemplateSpecialization Maybe<uint32_t>
struct _qty1990;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1991;  // mut FunctionProto Maybe<int32_t> (Local<v8::Context>) const
struct _qty1992;  // mut TemplateSpecialization Maybe<int32_t>
struct _qty1993;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1994;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>) const
struct _qty1995;  // mut TemplateSpecialization Maybe<bool>
struct _qty1996;  // mut TemplateSpecialization Local<v8::Context>
struct _qty1997;  // mut TemplateSpecialization Local<v8::Value>
struct _qty1998;  // mut FunctionProto bool (Local<v8::Value>) const
struct _qty1999;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2000;  // mut FunctionProto bool (Local<v8::Value>) const
struct _qty2001;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2002;  // mut TemplateTypeParm T
struct _qty2003;  // mut FunctionProto v8::Value *(T *)
struct _qty2004;  // mut Pointer v8::Value *
struct _qty2005;  // mut Pointer T *
struct _qty2006;  // mut FunctionProto Local<v8::String> (v8::Isolate *)
struct _qty2007;  // mut TemplateSpecialization Local<v8::String>
struct _qty2008;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Object>)
struct _qty2009;  // mut TemplateSpecialization Maybe<bool>
struct _qty2010;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2011;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2012;  // mut Pointer const v8::Boolean *
struct _qty2013;  // mut FunctionProto v8::Boolean *(v8::Value *)
struct _qty2014;  // mut Pointer v8::Boolean *
struct _qty2015;  // mut Pointer v8::Value *
struct _qty2016;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *, bool)
struct _qty2017;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty2018;  // mut Pointer v8::Name *
struct _qty2019;  // mut FunctionProto v8::Name *(v8::Value *)
struct _qty2020;  // mut Enum v8::NewStringType
struct _qty2021;  // mut Enum v8::String::Encoding
struct _qty2022;  // mut Pointer const v8::String *
struct _qty2023;  // mut FunctionProto int (v8::Isolate *) const
struct _qty2024;  // mut Enum v8::String::WriteOptions
struct _qty2025;  // mut FunctionProto int (v8::Isolate *, uint16_t *, int, int, int) const
struct _qty2026;  // mut Pointer uint16_t *
struct _qty2027;  // mut FunctionProto int (v8::Isolate *, uint8_t *, int, int, int) const
struct _qty2028;  // mut Pointer uint8_t *
struct _qty2029;  // mut FunctionProto int (v8::Isolate *, char *, int, int *, int) const
struct _qty2030;  // mut Pointer char *
struct _qty2031;  // mut Pointer int *
struct _qty2032;  // mut FunctionProto Local<v8::String> (v8::Isolate *)
struct _qty2033;  // mut TemplateSpecialization Local<v8::String>
struct _qty2034;  // mut Record v8::String::ExternalStringResourceBase
struct _qty2035;  // mut Pointer v8::String::ExternalStringResourceBase *
struct _qty2036;  // mut Pointer const v8::String::ExternalStringResourceBase *
struct _qty2037;  // mut FunctionProto void (const v8::String::ExternalStringResourceBase &)
struct _qty2038;  // mut LValueReference const v8::String::ExternalStringResourceBase &
struct _qty2039;  // const Record v8::String::ExternalStringResourceBase
struct _qty2040;  // mut FunctionProto void ()
struct _qty2041;  // mut FunctionProto void () const
struct _qty2042;  // mut Record v8::String::ExternalStringResource
struct _qty2043;  // mut Pointer v8::String::ExternalStringResource *
struct _qty2044;  // mut FunctionProto const uint16_t *() const
struct _qty2045;  // mut Pointer const uint16_t *
struct _qty2046;  // mut Pointer const v8::String::ExternalStringResource *
struct _qty2047;  // mut FunctionProto size_t () const
struct _qty2048;  // mut FunctionProto void ()
struct _qty2049;  // mut FunctionProto void (const v8::String::ExternalStringResource &)
struct _qty2050;  // mut LValueReference const v8::String::ExternalStringResource &
struct _qty2051;  // const Record v8::String::ExternalStringResource
struct _qty2052;  // mut FunctionProto v8::String::ExternalStringResource &(const v8::String::ExternalStringResource &)
struct _qty2053;  // mut LValueReference v8::String::ExternalStringResource &
struct _qty2054;  // mut Record v8::String::ExternalOneByteStringResource
struct _qty2055;  // mut Pointer v8::String::ExternalOneByteStringResource *
struct _qty2056;  // mut FunctionProto const char *() const
struct _qty2057;  // mut Pointer const v8::String::ExternalOneByteStringResource *
struct _qty2058;  // mut FunctionProto void ()
struct _qty2059;  // mut FunctionProto void (const v8::String::ExternalOneByteStringResource &)
struct _qty2060;  // mut LValueReference const v8::String::ExternalOneByteStringResource &
struct _qty2061;  // const Record v8::String::ExternalOneByteStringResource
struct _qty2062;  // mut FunctionProto v8::String::ExternalOneByteStringResource &(const v8::String::ExternalOneByteStringResource &)
struct _qty2063;  // mut LValueReference v8::String::ExternalOneByteStringResource &
struct _qty2064;  // mut FunctionProto v8::String::ExternalStringResourceBase *(v8::String::Encoding *) const
struct _qty2065;  // mut Pointer v8::String::Encoding *
struct _qty2066;  // mut FunctionProto v8::String::ExternalStringResource *() const
struct _qty2067;  // mut FunctionProto const v8::String::ExternalOneByteStringResource *() const
struct _qty2068;  // mut FunctionProto v8::String *(v8::Value *)
struct _qty2069;  // mut Pointer v8::String *
struct _qty2070;  // mut FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const char *, v8::NewStringType, int)
struct _qty2071;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty2072;  // mut FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint8_t *, v8::NewStringType, int)
struct _qty2073;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty2074;  // mut FunctionProto MaybeLocal<v8::String> (v8::Isolate *, const uint16_t *, v8::NewStringType, int)
struct _qty2075;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty2076;  // mut FunctionProto Local<v8::String> (v8::Isolate *, Local<v8::String>, Local<v8::String>)
struct _qty2077;  // mut TemplateSpecialization Local<v8::String>
struct _qty2078;  // mut TemplateSpecialization Local<v8::String>
struct _qty2079;  // mut TemplateSpecialization Local<v8::String>
struct _qty2080;  // mut FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalStringResource *)
struct _qty2081;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty2082;  // mut FunctionProto bool (v8::String::ExternalStringResource *)
struct _qty2083;  // mut FunctionProto MaybeLocal<v8::String> (v8::Isolate *, v8::String::ExternalOneByteStringResource *)
struct _qty2084;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty2085;  // mut FunctionProto bool (v8::String::ExternalOneByteStringResource *)
struct _qty2086;  // mut FunctionProto bool (Local<v8::String>)
struct _qty2087;  // mut TemplateSpecialization Local<v8::String>
struct _qty2088;  // mut Record v8::String::Utf8Value
struct _qty2089;  // mut FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _qty2090;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2091;  // mut Pointer v8::String::Utf8Value *
struct _qty2092;  // mut FunctionProto void ()
struct _qty2093;  // mut FunctionProto char *()
struct _qty2094;  // mut Pointer const v8::String::Utf8Value *
struct _qty2095;  // mut FunctionProto void (const v8::String::Utf8Value &)
struct _qty2096;  // mut LValueReference const v8::String::Utf8Value &
struct _qty2097;  // const Record v8::String::Utf8Value
struct _qty2098;  // mut Record v8::String::Value
struct _qty2099;  // mut FunctionProto void (v8::Isolate *, Local<v8::Value>)
struct _qty2100;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2101;  // mut Pointer v8::String::Value *
struct _qty2102;  // mut FunctionProto void ()
struct _qty2103;  // mut FunctionProto uint16_t *()
struct _qty2104;  // mut Pointer const v8::String::Value *
struct _qty2105;  // mut FunctionProto void (const v8::String::Value &)
struct _qty2106;  // mut LValueReference const v8::String::Value &
struct _qty2107;  // const Record v8::String::Value
struct _qty2108;  // mut FunctionProto Local<v8::Value> () const
struct _qty2109;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2110;  // mut Pointer const v8::Symbol *
struct _qty2111;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _qty2112;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2113;  // mut TemplateSpecialization Local<v8::String>
struct _qty2114;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _qty2115;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2116;  // mut TemplateSpecialization Local<v8::String>
struct _qty2117;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *, Local<v8::String>)
struct _qty2118;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2119;  // mut TemplateSpecialization Local<v8::String>
struct _qty2120;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2121;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2122;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2123;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2124;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2125;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2126;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2127;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2128;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2129;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2130;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2131;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2132;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2133;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2134;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2135;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2136;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2137;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2138;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2139;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2140;  // mut FunctionProto Local<v8::Symbol> (v8::Isolate *)
struct _qty2141;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2142;  // mut FunctionProto v8::Symbol *(v8::Value *)
struct _qty2143;  // mut Pointer v8::Symbol *
struct _qty2144;  // mut FunctionProto Local<v8::Value> () const
struct _qty2145;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2146;  // mut Pointer const v8::Private *
struct _qty2147;  // mut FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _qty2148;  // mut TemplateSpecialization Local<v8::Private>
struct _qty2149;  // mut TemplateSpecialization Local<v8::String>
struct _qty2150;  // mut FunctionProto Local<v8::Private> (v8::Isolate *, Local<v8::String>)
struct _qty2151;  // mut TemplateSpecialization Local<v8::Private>
struct _qty2152;  // mut TemplateSpecialization Local<v8::String>
struct _qty2153;  // mut FunctionProto v8::Private *(v8::Data *)
struct _qty2154;  // mut Pointer v8::Private *
struct _qty2155;  // mut Pointer v8::Data *
struct _qty2156;  // mut FunctionProto double () const
struct _qty2157;  // mut Pointer const v8::Number *
struct _qty2158;  // mut FunctionProto Local<v8::Number> (v8::Isolate *, double)
struct _qty2159;  // mut TemplateSpecialization Local<v8::Number>
struct _qty2160;  // mut FunctionProto v8::Number *(v8::Value *)
struct _qty2161;  // mut Pointer v8::Number *
struct _qty2162;  // mut FunctionProto Local<v8::Integer> (v8::Isolate *, int32_t)
struct _qty2163;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty2164;  // mut Typedef int32_t
struct _qty2165;  // mut FunctionProto Local<v8::Integer> (v8::Isolate *, uint32_t)
struct _qty2166;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty2167;  // mut FunctionProto int64_t () const
struct _qty2168;  // mut Typedef int64_t
struct _qty2169;  // mut Builtin long long
struct _qty2170;  // mut Pointer const v8::Integer *
struct _qty2171;  // mut FunctionProto v8::Integer *(v8::Value *)
struct _qty2172;  // mut Pointer v8::Integer *
struct _qty2173;  // mut FunctionProto int32_t () const
struct _qty2174;  // mut Pointer const v8::Int32 *
struct _qty2175;  // mut FunctionProto v8::Int32 *(v8::Value *)
struct _qty2176;  // mut Pointer v8::Int32 *
struct _qty2177;  // mut Pointer const v8::Uint32 *
struct _qty2178;  // mut FunctionProto v8::Uint32 *(v8::Value *)
struct _qty2179;  // mut Pointer v8::Uint32 *
struct _qty2180;  // mut FunctionProto Local<v8::BigInt> (v8::Isolate *, int64_t)
struct _qty2181;  // mut TemplateSpecialization Local<v8::BigInt>
struct _qty2182;  // mut FunctionProto Local<v8::BigInt> (v8::Isolate *, uint64_t)
struct _qty2183;  // mut TemplateSpecialization Local<v8::BigInt>
struct _qty2184;  // mut FunctionProto MaybeLocal<v8::BigInt> (Local<v8::Context>, int, int, const uint64_t *)
struct _qty2185;  // mut TemplateSpecialization MaybeLocal<v8::BigInt>
struct _qty2186;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2187;  // mut Pointer const uint64_t *
struct _qty2188;  // mut FunctionProto uint64_t (bool *) const
struct _qty2189;  // mut Pointer bool *
struct _qty2190;  // mut Pointer const v8::BigInt *
struct _qty2191;  // mut FunctionProto int64_t (bool *) const
struct _qty2192;  // mut FunctionProto void (int *, int *, uint64_t *) const
struct _qty2193;  // mut FunctionProto v8::BigInt *(v8::Value *)
struct _qty2194;  // mut Pointer v8::BigInt *
struct _qty2195;  // mut Enum v8::PropertyAttribute
struct _qty2196;  // mut Typedef v8::AccessorGetterCallback
struct _qty2197;  // mut TemplateSpecialization Local<v8::String>
struct _qty2198;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty2199;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty2200;  // mut FunctionProto void (Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _qty2201;  // mut Pointer void (*)(Local<v8::String>, const PropertyCallbackInfo<v8::Value> &)
struct _qty2202;  // mut Typedef v8::AccessorNameGetterCallback
struct _qty2203;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2204;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty2205;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty2206;  // mut FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _qty2207;  // mut Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _qty2208;  // mut Typedef v8::AccessorSetterCallback
struct _qty2209;  // mut TemplateSpecialization Local<v8::String>
struct _qty2210;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2211;  // mut LValueReference const PropertyCallbackInfo<void> &
struct _qty2212;  // const TemplateSpecialization PropertyCallbackInfo<void>
struct _qty2213;  // mut FunctionProto void (Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _qty2214;  // mut Pointer void (*)(Local<v8::String>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _qty2215;  // mut Typedef v8::AccessorNameSetterCallback
struct _qty2216;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2217;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2218;  // mut LValueReference const PropertyCallbackInfo<void> &
struct _qty2219;  // const TemplateSpecialization PropertyCallbackInfo<void>
struct _qty2220;  // mut FunctionProto void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _qty2221;  // mut Pointer void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<void> &)
struct _qty2222;  // mut Enum v8::AccessControl
struct _qty2223;  // mut Enum v8::PropertyFilter
struct _qty2224;  // mut Enum v8::SideEffectType
struct _qty2225;  // mut Enum v8::KeyCollectionMode
struct _qty2226;  // mut Enum v8::IndexFilter
struct _qty2227;  // mut Enum v8::KeyConversionMode
struct _qty2228;  // mut Enum v8::IntegrityLevel
struct _qty2229;  // mut FunctionProto bool (Local<v8::Value>, Local<v8::Value>)
struct _qty2230;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2231;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2232;  // mut Pointer v8::Object *
struct _qty2233;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _qty2234;  // mut TemplateSpecialization Maybe<bool>
struct _qty2235;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2236;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2237;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2238;  // mut FunctionProto bool (uint32_t, Local<v8::Value>)
struct _qty2239;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2240;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _qty2241;  // mut TemplateSpecialization Maybe<bool>
struct _qty2242;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2243;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2244;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>)
struct _qty2245;  // mut TemplateSpecialization Maybe<bool>
struct _qty2246;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2247;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2248;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2249;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t, Local<v8::Value>)
struct _qty2250;  // mut TemplateSpecialization Maybe<bool>
struct _qty2251;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2252;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2253;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, Local<v8::Value>, v8::PropertyAttribute)
struct _qty2254;  // mut TemplateSpecialization Maybe<bool>
struct _qty2255;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2256;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2257;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2258;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::PropertyDescriptor &)
struct _qty2259;  // mut TemplateSpecialization Maybe<bool>
struct _qty2260;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2261;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2262;  // mut LValueReference v8::PropertyDescriptor &
struct _qty2263;  // mut FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _qty2264;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2265;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2266;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _qty2267;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2268;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2269;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2270;  // mut FunctionProto Local<v8::Value> (uint32_t)
struct _qty2271;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2272;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, uint32_t)
struct _qty2273;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2274;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2275;  // mut FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Value>)
struct _qty2276;  // mut TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _qty2277;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2278;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2279;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _qty2280;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2281;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2282;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2283;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2284;  // mut TemplateSpecialization Maybe<bool>
struct _qty2285;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2286;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2287;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2288;  // mut TemplateSpecialization Maybe<bool>
struct _qty2289;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2290;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2291;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _qty2292;  // mut TemplateSpecialization Maybe<bool>
struct _qty2293;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2294;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _qty2295;  // mut TemplateSpecialization Maybe<bool>
struct _qty2296;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2297;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, MaybeLocal<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _qty2298;  // mut TemplateSpecialization Maybe<bool>
struct _qty2299;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2300;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2301;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2302;  // mut FunctionProto void (Local<v8::Name>, Local<v8::Function>, Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)
struct _qty2303;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2304;  // mut TemplateSpecialization Local<v8::Function>
struct _qty2305;  // mut TemplateSpecialization Local<v8::Function>
struct _qty2306;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _qty2307;  // mut TemplateSpecialization Maybe<bool>
struct _qty2308;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2309;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2310;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2311;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _qty2312;  // mut TemplateSpecialization Maybe<bool>
struct _qty2313;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2314;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2315;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2316;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _qty2317;  // mut TemplateSpecialization Maybe<bool>
struct _qty2318;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2319;  // mut TemplateSpecialization Local<v8::Private>
struct _qty2320;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>, Local<v8::Value>)
struct _qty2321;  // mut TemplateSpecialization Maybe<bool>
struct _qty2322;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2323;  // mut TemplateSpecialization Local<v8::Private>
struct _qty2324;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2325;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Private>)
struct _qty2326;  // mut TemplateSpecialization Maybe<bool>
struct _qty2327;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2328;  // mut TemplateSpecialization Local<v8::Private>
struct _qty2329;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Private>)
struct _qty2330;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2331;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2332;  // mut TemplateSpecialization Local<v8::Private>
struct _qty2333;  // mut FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _qty2334;  // mut TemplateSpecialization MaybeLocal<v8::Array>
struct _qty2335;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2336;  // mut FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::KeyCollectionMode, v8::PropertyFilter, v8::IndexFilter, v8::KeyConversionMode)
struct _qty2337;  // mut TemplateSpecialization MaybeLocal<v8::Array>
struct _qty2338;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2339;  // mut FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>)
struct _qty2340;  // mut TemplateSpecialization MaybeLocal<v8::Array>
struct _qty2341;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2342;  // mut FunctionProto MaybeLocal<v8::Array> (Local<v8::Context>, v8::PropertyFilter, v8::KeyConversionMode)
struct _qty2343;  // mut TemplateSpecialization MaybeLocal<v8::Array>
struct _qty2344;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2345;  // mut FunctionProto Local<v8::Value> ()
struct _qty2346;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2347;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2348;  // mut TemplateSpecialization Maybe<bool>
struct _qty2349;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2350;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2351;  // mut FunctionProto Local<v8::Object> (Local<v8::FunctionTemplate>)
struct _qty2352;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2353;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty2354;  // mut FunctionProto MaybeLocal<v8::String> (Local<v8::Context>)
struct _qty2355;  // mut TemplateSpecialization MaybeLocal<v8::String>
struct _qty2356;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2357;  // mut FunctionProto Local<v8::String> ()
struct _qty2358;  // mut TemplateSpecialization Local<v8::String>
struct _qty2359;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, v8::IntegrityLevel)
struct _qty2360;  // mut TemplateSpecialization Maybe<bool>
struct _qty2361;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2362;  // mut FunctionProto int (const PersistentBase<v8::Object> &)
struct _qty2363;  // mut LValueReference const PersistentBase<v8::Object> &
struct _qty2364;  // const TemplateSpecialization PersistentBase<v8::Object>
struct _qty2365;  // mut FunctionProto int (const TracedGlobal<v8::Object> &)
struct _qty2366;  // mut LValueReference const TracedGlobal<v8::Object> &
struct _qty2367;  // const TemplateSpecialization TracedGlobal<v8::Object>
struct _qty2368;  // mut FunctionProto Local<v8::Value> (int)
struct _qty2369;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2370;  // mut FunctionProto void (int, Local<v8::Value>)
struct _qty2371;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2372;  // mut FunctionProto void *(int)
struct _qty2373;  // mut FunctionProto void *(const PersistentBase<v8::Object> &, int)
struct _qty2374;  // mut LValueReference const PersistentBase<v8::Object> &
struct _qty2375;  // const TemplateSpecialization PersistentBase<v8::Object>
struct _qty2376;  // mut FunctionProto void *(const TracedGlobal<v8::Object> &, int)
struct _qty2377;  // mut LValueReference const TracedGlobal<v8::Object> &
struct _qty2378;  // const TemplateSpecialization TracedGlobal<v8::Object>
struct _qty2379;  // mut FunctionProto void (int, void *)
struct _qty2380;  // mut FunctionProto void (int, int *, void **)
struct _qty2381;  // mut Decayed int *
struct _qty2382;  // mut Decayed void **
struct _qty2383;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _qty2384;  // mut TemplateSpecialization Maybe<bool>
struct _qty2385;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2386;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2387;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _qty2388;  // mut TemplateSpecialization Maybe<bool>
struct _qty2389;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2390;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _qty2391;  // mut TemplateSpecialization Maybe<bool>
struct _qty2392;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2393;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2394;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, uint32_t)
struct _qty2395;  // mut TemplateSpecialization Maybe<bool>
struct _qty2396;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2397;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Name>)
struct _qty2398;  // mut TemplateSpecialization Maybe<bool>
struct _qty2399;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2400;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2401;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _qty2402;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2403;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2404;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2405;  // mut FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _qty2406;  // mut TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _qty2407;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2408;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2409;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Name>)
struct _qty2410;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2411;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2412;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2413;  // mut FunctionProto Maybe<v8::PropertyAttribute> (Local<v8::Context>, Local<v8::Name>)
struct _qty2414;  // mut TemplateSpecialization Maybe<v8::PropertyAttribute>
struct _qty2415;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2416;  // mut TemplateSpecialization Local<v8::Name>
struct _qty2417;  // mut FunctionProto Local<v8::Object> ()
struct _qty2418;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2419;  // mut FunctionProto Local<v8::Context> ()
struct _qty2420;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2421;  // mut FunctionProto Local<v8::Context> (const PersistentBase<v8::Object> &)
struct _qty2422;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2423;  // mut LValueReference const PersistentBase<v8::Object> &
struct _qty2424;  // const TemplateSpecialization PersistentBase<v8::Object>
struct _qty2425;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _qty2426;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2427;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2428;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2429;  // mut Decayed Local<v8::Value> *
struct _qty2430;  // mut Pointer Local<v8::Value> *
struct _qty2431;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, int, Local<v8::Value> *)
struct _qty2432;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2433;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2434;  // mut Decayed Local<v8::Value> *
struct _qty2435;  // mut Pointer Local<v8::Value> *
struct _qty2436;  // mut FunctionProto v8::Isolate *()
struct _qty2437;  // mut FunctionProto MaybeLocal<v8::Array> (bool *)
struct _qty2438;  // mut TemplateSpecialization MaybeLocal<v8::Array>
struct _qty2439;  // mut FunctionProto Local<v8::Object> (v8::Isolate *)
struct _qty2440;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2441;  // mut FunctionProto Local<v8::Object> (v8::Isolate *, Local<v8::Value>, Local<v8::Name> *, Local<v8::Value> *, size_t)
struct _qty2442;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2443;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2444;  // mut Pointer Local<v8::Name> *
struct _qty2445;  // mut Pointer Local<v8::Value> *
struct _qty2446;  // mut FunctionProto v8::Object *(v8::Value *)
struct _qty2447;  // mut Pointer const v8::Array *
struct _qty2448;  // mut FunctionProto Local<v8::Array> (v8::Isolate *, int)
struct _qty2449;  // mut TemplateSpecialization Local<v8::Array>
struct _qty2450;  // mut FunctionProto Local<v8::Array> (v8::Isolate *, Local<v8::Value> *, size_t)
struct _qty2451;  // mut TemplateSpecialization Local<v8::Array>
struct _qty2452;  // mut Pointer Local<v8::Value> *
struct _qty2453;  // mut FunctionProto v8::Array *(v8::Value *)
struct _qty2454;  // mut Pointer v8::Array *
struct _qty2455;  // mut Record v8::Map
struct _qty2456;  // mut Pointer const v8::Map *
struct _qty2457;  // mut Pointer v8::Map *
struct _qty2458;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>)
struct _qty2459;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2460;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2461;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2462;  // mut FunctionProto MaybeLocal<v8::Map> (Local<v8::Context>, Local<v8::Value>, Local<v8::Value>)
struct _qty2463;  // mut TemplateSpecialization MaybeLocal<v8::Map>
struct _qty2464;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2465;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2466;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2467;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2468;  // mut TemplateSpecialization Maybe<bool>
struct _qty2469;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2470;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2471;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2472;  // mut TemplateSpecialization Maybe<bool>
struct _qty2473;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2474;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2475;  // mut FunctionProto Local<v8::Array> () const
struct _qty2476;  // mut TemplateSpecialization Local<v8::Array>
struct _qty2477;  // mut FunctionProto Local<v8::Map> (v8::Isolate *)
struct _qty2478;  // mut TemplateSpecialization Local<v8::Map>
struct _qty2479;  // mut FunctionProto v8::Map *(v8::Value *)
struct _qty2480;  // mut Record v8::Set
struct _qty2481;  // mut Pointer const v8::Set *
struct _qty2482;  // mut Pointer v8::Set *
struct _qty2483;  // mut FunctionProto MaybeLocal<v8::Set> (Local<v8::Context>, Local<v8::Value>)
struct _qty2484;  // mut TemplateSpecialization MaybeLocal<v8::Set>
struct _qty2485;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2486;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2487;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2488;  // mut TemplateSpecialization Maybe<bool>
struct _qty2489;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2490;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2491;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2492;  // mut TemplateSpecialization Maybe<bool>
struct _qty2493;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2494;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2495;  // mut FunctionProto Local<v8::Array> () const
struct _qty2496;  // mut TemplateSpecialization Local<v8::Array>
struct _qty2497;  // mut FunctionProto Local<v8::Set> (v8::Isolate *)
struct _qty2498;  // mut TemplateSpecialization Local<v8::Set>
struct _qty2499;  // mut FunctionProto v8::Set *(v8::Value *)
struct _qty2500;  // mut TemplateTypeParm T
struct _qty2501;  // mut TemplateTypeParm S
struct _qty2502;  // mut FunctionProto void (const ReturnValue<S> &)
struct _qty2503;  // mut LValueReference const ReturnValue<S> &
struct _qty2504;  // const TemplateSpecialization ReturnValue<S>
struct _qty2505;  // mut TemplateSpecialization ReturnValue<S>
struct _qty2506;  // mut Pointer ReturnValue<T> *
struct _qty2507;  // mut TemplateTypeParm S
struct _qty2508;  // mut FunctionProto void (const Global<S> &)
struct _qty2509;  // mut LValueReference const Global<S> &
struct _qty2510;  // const TemplateSpecialization Global<S>
struct _qty2511;  // mut TemplateSpecialization Global<S>
struct _qty2512;  // mut TemplateTypeParm S
struct _qty2513;  // mut FunctionProto void (const TracedGlobal<S> &)
struct _qty2514;  // mut LValueReference const TracedGlobal<S> &
struct _qty2515;  // const TemplateSpecialization TracedGlobal<S>
struct _qty2516;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty2517;  // mut TemplateTypeParm S
struct _qty2518;  // mut FunctionProto void (const Local<S>)
struct _qty2519;  // const TemplateSpecialization Local<S>
struct _qty2520;  // mut TemplateSpecialization Local<S>
struct _qty2521;  // mut FunctionProto void (int32_t)
struct _qty2522;  // mut Pointer const ReturnValue<T> *
struct _qty2523;  // mut TemplateTypeParm S
struct _qty2524;  // mut FunctionProto void (S *)
struct _qty2525;  // mut Pointer S *
struct _qty2526;  // mut FunctionProto Local<v8::Value> () const
struct _qty2527;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2528;  // mut TemplateTypeParm T
struct _qty2529;  // mut Pointer const FunctionCallbackInfo<T> *
struct _qty2530;  // mut FunctionProto Local<v8::Value> (int) const
struct _qty2531;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2532;  // mut FunctionProto Local<v8::Object> () const
struct _qty2533;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2534;  // mut FunctionProto Local<v8::Object> () const
struct _qty2535;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2536;  // mut FunctionProto Local<v8::Value> () const
struct _qty2537;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2538;  // mut FunctionProto Local<v8::Value> () const
struct _qty2539;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2540;  // mut FunctionProto ReturnValue<T> () const
struct _qty2541;  // mut TemplateSpecialization ReturnValue<T>
struct _qty2542;  // mut FunctionProto void (internal::Address *, internal::Address *, int)
struct _qty2543;  // mut Pointer FunctionCallbackInfo<T> *
struct _qty2544;  // mut TemplateTypeParm T
struct _qty2545;  // mut Pointer const PropertyCallbackInfo<T> *
struct _qty2546;  // mut FunctionProto Local<v8::Value> () const
struct _qty2547;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2548;  // mut FunctionProto Local<v8::Object> () const
struct _qty2549;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2550;  // mut FunctionProto Local<v8::Object> () const
struct _qty2551;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2552;  // mut FunctionProto ReturnValue<T> () const
struct _qty2553;  // mut TemplateSpecialization ReturnValue<T>
struct _qty2554;  // mut FunctionProto void (internal::Address *)
struct _qty2555;  // mut Pointer PropertyCallbackInfo<T> *
struct _qty2556;  // mut Typedef v8::FunctionCallback
struct _qty2557;  // mut LValueReference const FunctionCallbackInfo<v8::Value> &
struct _qty2558;  // const TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _qty2559;  // mut FunctionProto void (const FunctionCallbackInfo<v8::Value> &)
struct _qty2560;  // mut Pointer void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _qty2561;  // mut Enum v8::ConstructorBehavior
struct _qty2562;  // mut FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>, v8::FunctionCallback, Local<v8::Value>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _qty2563;  // mut TemplateSpecialization MaybeLocal<v8::Function>
struct _qty2564;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2565;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2566;  // mut FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *) const
struct _qty2567;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty2568;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2569;  // mut Decayed Local<v8::Value> *
struct _qty2570;  // mut Pointer Local<v8::Value> *
struct _qty2571;  // mut Pointer const v8::Function *
struct _qty2572;  // mut FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>) const
struct _qty2573;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty2574;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2575;  // mut FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>, int, Local<v8::Value> *, v8::SideEffectType) const
struct _qty2576;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty2577;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2578;  // mut Decayed Local<v8::Value> *
struct _qty2579;  // mut Pointer Local<v8::Value> *
struct _qty2580;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, int, Local<v8::Value> *)
struct _qty2581;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2582;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2583;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2584;  // mut Decayed Local<v8::Value> *
struct _qty2585;  // mut Pointer Local<v8::Value> *
struct _qty2586;  // mut Pointer v8::Function *
struct _qty2587;  // mut FunctionProto void (Local<v8::String>)
struct _qty2588;  // mut TemplateSpecialization Local<v8::String>
struct _qty2589;  // mut FunctionProto Local<v8::Value> () const
struct _qty2590;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2591;  // mut FunctionProto Local<v8::Value> () const
struct _qty2592;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2593;  // mut FunctionProto Local<v8::Value> () const
struct _qty2594;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2595;  // mut FunctionProto Local<v8::Value> () const
struct _qty2596;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2597;  // mut FunctionProto Local<v8::Value> () const
struct _qty2598;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2599;  // mut FunctionProto v8::Function *(v8::Value *)
struct _qty2600;  // mut Enum v8::Promise::PromiseState
struct _qty2601;  // mut Record v8::Promise::Resolver
struct _qty2602;  // mut FunctionProto MaybeLocal<v8::Promise::Resolver> (Local<v8::Context>)
struct _qty2603;  // mut TemplateSpecialization MaybeLocal<v8::Promise::Resolver>
struct _qty2604;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2605;  // mut FunctionProto Local<v8::Promise> ()
struct _qty2606;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty2607;  // mut Pointer v8::Promise::Resolver *
struct _qty2608;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2609;  // mut TemplateSpecialization Maybe<bool>
struct _qty2610;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2611;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2612;  // mut FunctionProto Maybe<bool> (Local<v8::Context>, Local<v8::Value>)
struct _qty2613;  // mut TemplateSpecialization Maybe<bool>
struct _qty2614;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2615;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2616;  // mut FunctionProto v8::Promise::Resolver *(v8::Value *)
struct _qty2617;  // mut FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _qty2618;  // mut TemplateSpecialization MaybeLocal<v8::Promise>
struct _qty2619;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2620;  // mut TemplateSpecialization Local<v8::Function>
struct _qty2621;  // mut Pointer v8::Promise *
struct _qty2622;  // mut FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>)
struct _qty2623;  // mut TemplateSpecialization MaybeLocal<v8::Promise>
struct _qty2624;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2625;  // mut TemplateSpecialization Local<v8::Function>
struct _qty2626;  // mut FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::Function>, Local<v8::Function>)
struct _qty2627;  // mut TemplateSpecialization MaybeLocal<v8::Promise>
struct _qty2628;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2629;  // mut TemplateSpecialization Local<v8::Function>
struct _qty2630;  // mut TemplateSpecialization Local<v8::Function>
struct _qty2631;  // mut FunctionProto Local<v8::Value> ()
struct _qty2632;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2633;  // mut FunctionProto v8::Promise::PromiseState ()
struct _qty2634;  // mut FunctionProto v8::Promise *(v8::Value *)
struct _qty2635;  // mut Pointer v8::PropertyDescriptor *
struct _qty2636;  // mut FunctionProto void (Local<v8::Value>)
struct _qty2637;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2638;  // mut FunctionProto void (Local<v8::Value>, bool)
struct _qty2639;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2640;  // mut FunctionProto void (Local<v8::Value>, Local<v8::Value>)
struct _qty2641;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2642;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2643;  // mut FunctionProto void ()
struct _qty2644;  // mut FunctionProto Local<v8::Value> () const
struct _qty2645;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2646;  // mut Pointer const v8::PropertyDescriptor *
struct _qty2647;  // mut FunctionProto Local<v8::Value> () const
struct _qty2648;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2649;  // mut FunctionProto Local<v8::Value> () const
struct _qty2650;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2651;  // mut Record v8::PropertyDescriptor::PrivateData
struct _qty2652;  // mut FunctionProto v8::PropertyDescriptor::PrivateData *() const
struct _qty2653;  // mut Pointer v8::PropertyDescriptor::PrivateData *
struct _qty2654;  // mut FunctionProto void (const v8::PropertyDescriptor &)
struct _qty2655;  // mut LValueReference const v8::PropertyDescriptor &
struct _qty2656;  // const Record v8::PropertyDescriptor
struct _qty2657;  // mut FunctionProto Local<v8::Value> ()
struct _qty2658;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2659;  // mut Pointer v8::Proxy *
struct _qty2660;  // mut FunctionProto Local<v8::Value> ()
struct _qty2661;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2662;  // mut FunctionProto MaybeLocal<v8::Proxy> (Local<v8::Context>, Local<v8::Object>, Local<v8::Object>)
struct _qty2663;  // mut TemplateSpecialization MaybeLocal<v8::Proxy>
struct _qty2664;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2665;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2666;  // mut TemplateSpecialization Local<v8::Object>
struct _qty2667;  // mut FunctionProto v8::Proxy *(v8::Value *)
struct _qty2668;  // mut TemplateTypeParm T
struct _qty2669;  // mut InjectedClassName MemorySpan<T>
struct _qty2670;  // mut Pointer MemorySpan<T> *
struct _qty2671;  // mut FunctionProto void (T *, size_t)
struct _qty2672;  // mut Pointer T *
struct _qty2673;  // mut FunctionProto T *() const
struct _qty2674;  // mut Pointer const MemorySpan<T> *
struct _qty2675;  // mut Record v8::MemorySpan<const unsigned char>
struct _qty2676;  // mut FunctionProto void ()
struct _qty2677;  // mut Pointer v8::MemorySpan<const unsigned char> *
struct _qty2678;  // mut FunctionProto void (const unsigned char *, size_t)
struct _qty2679;  // mut Pointer const unsigned char *
struct _qty2680;  // const Builtin unsigned char
struct _qty2681;  // mut FunctionProto const unsigned char *() const
struct _qty2682;  // mut Pointer const v8::MemorySpan<const unsigned char> *
struct _qty2683;  // mut FunctionProto void (const v8::MemorySpan<const unsigned char> &)
struct _qty2684;  // mut LValueReference const v8::MemorySpan<const unsigned char> &
struct _qty2685;  // const Record v8::MemorySpan<const unsigned char>
struct _qty2686;  // mut FunctionProto void (v8::MemorySpan<const unsigned char> &&)
struct _qty2687;  // mut RValueReference v8::MemorySpan<const unsigned char> &&
struct _qty2688;  // mut Record v8::OwnedBuffer
struct _qty2689;  // mut Elaborated std::unique_ptr<const uint8_t []>
struct _qty2690;  // mut TemplateSpecialization unique_ptr<const uint8_t []>
struct _qty2691;  // mut Record std::unique_ptr<unsigned char const[], std::default_delete<unsigned char const[]> >
struct _qty2692;  // mut FunctionProto void (std::unique_ptr<const uint8_t []>, size_t)
struct _qty2693;  // mut Elaborated std::unique_ptr<const uint8_t []>
struct _qty2694;  // mut TemplateSpecialization unique_ptr<const uint8_t []>
struct _qty2695;  // mut Pointer v8::OwnedBuffer *
struct _qty2696;  // mut FunctionProto void ()
struct _qty2697;  // mut FunctionProto void (const v8::OwnedBuffer &)
struct _qty2698;  // mut LValueReference const v8::OwnedBuffer &
struct _qty2699;  // const Record v8::OwnedBuffer
struct _qty2700;  // mut FunctionProto void (v8::OwnedBuffer &&) noexcept
struct _qty2701;  // mut RValueReference v8::OwnedBuffer &&
struct _qty2702;  // mut FunctionProto v8::OwnedBuffer &(v8::OwnedBuffer &&)
struct _qty2703;  // mut LValueReference v8::OwnedBuffer &
struct _qty2704;  // mut FunctionProto v8::OwnedBuffer &(const v8::OwnedBuffer &)
struct _qty2705;  // mut Record v8::CompiledWasmModule
struct _qty2706;  // mut FunctionProto v8::OwnedBuffer ()
struct _qty2707;  // mut Pointer v8::CompiledWasmModule *
struct _qty2708;  // mut FunctionProto MemorySpan<const uint8_t> ()
struct _qty2709;  // mut TemplateSpecialization MemorySpan<const uint8_t>
struct _qty2710;  // mut FunctionProto void (const v8::CompiledWasmModule &)
struct _qty2711;  // mut LValueReference const v8::CompiledWasmModule &
struct _qty2712;  // const Record v8::CompiledWasmModule
struct _qty2713;  // mut FunctionProto void (v8::CompiledWasmModule &&)
struct _qty2714;  // mut RValueReference v8::CompiledWasmModule &&
struct _qty2715;  // mut FunctionProto v8::CompiledWasmModule &(v8::CompiledWasmModule &&)
struct _qty2716;  // mut LValueReference v8::CompiledWasmModule &
struct _qty2717;  // mut FunctionProto void ()
struct _qty2718;  // mut Record v8::WasmModuleObject::TransferrableModule
struct _qty2719;  // mut FunctionProto void (v8::WasmModuleObject::TransferrableModule &&)
struct _qty2720;  // mut RValueReference v8::WasmModuleObject::TransferrableModule &&
struct _qty2721;  // mut Pointer v8::WasmModuleObject::TransferrableModule *
struct _qty2722;  // mut FunctionProto void (const v8::WasmModuleObject::TransferrableModule &)
struct _qty2723;  // mut LValueReference const v8::WasmModuleObject::TransferrableModule &
struct _qty2724;  // const Record v8::WasmModuleObject::TransferrableModule
struct _qty2725;  // mut FunctionProto v8::WasmModuleObject::TransferrableModule &(v8::WasmModuleObject::TransferrableModule &&)
struct _qty2726;  // mut LValueReference v8::WasmModuleObject::TransferrableModule &
struct _qty2727;  // mut FunctionProto v8::WasmModuleObject::TransferrableModule &(const v8::WasmModuleObject::TransferrableModule &)
struct _qty2728;  // mut FunctionProto void ()
struct _qty2729;  // mut FunctionProto v8::WasmModuleObject::TransferrableModule ()
struct _qty2730;  // mut Pointer v8::WasmModuleObject *
struct _qty2731;  // mut FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, const v8::WasmModuleObject::TransferrableModule &)
struct _qty2732;  // mut TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _qty2733;  // mut FunctionProto v8::CompiledWasmModule ()
struct _qty2734;  // mut FunctionProto MaybeLocal<v8::WasmModuleObject> (v8::Isolate *, MemorySpan<const uint8_t>, MemorySpan<const uint8_t>)
struct _qty2735;  // mut TemplateSpecialization MaybeLocal<v8::WasmModuleObject>
struct _qty2736;  // mut TemplateSpecialization MemorySpan<const uint8_t>
struct _qty2737;  // mut TemplateSpecialization MemorySpan<const uint8_t>
struct _qty2738;  // mut FunctionProto v8::WasmModuleObject *(v8::Value *)
struct _qty2739;  // mut Record v8::WasmStreaming
struct _qty2740;  // mut Record v8::WasmStreaming::WasmStreamingImpl
struct _qty2741;  // mut Record v8::WasmStreaming::Client
struct _qty2742;  // mut FunctionProto void ()
struct _qty2743;  // mut Pointer v8::WasmStreaming::Client *
struct _qty2744;  // mut FunctionProto void (v8::CompiledWasmModule)
struct _qty2745;  // mut FunctionProto v8::WasmStreaming::Client &(const v8::WasmStreaming::Client &)
struct _qty2746;  // mut LValueReference v8::WasmStreaming::Client &
struct _qty2747;  // mut LValueReference const v8::WasmStreaming::Client &
struct _qty2748;  // const Record v8::WasmStreaming::Client
struct _qty2749;  // mut FunctionProto void (std::unique_ptr<WasmStreamingImpl>)
struct _qty2750;  // mut Elaborated std::unique_ptr<WasmStreamingImpl>
struct _qty2751;  // mut TemplateSpecialization unique_ptr<v8::WasmStreaming::WasmStreamingImpl>
struct _qty2752;  // mut Record std::unique_ptr<v8::WasmStreaming::WasmStreamingImpl, std::default_delete<v8::WasmStreaming::WasmStreamingImpl> >
struct _qty2753;  // mut Pointer v8::WasmStreaming *
struct _qty2754;  // mut FunctionProto void ()
struct _qty2755;  // mut FunctionProto void (const uint8_t *, size_t)
struct _qty2756;  // mut FunctionProto void (MaybeLocal<v8::Value>)
struct _qty2757;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2758;  // mut FunctionProto bool (const uint8_t *, size_t)
struct _qty2759;  // mut FunctionProto void (std::shared_ptr<Client>)
struct _qty2760;  // mut Elaborated std::shared_ptr<Client>
struct _qty2761;  // mut TemplateSpecialization shared_ptr<v8::WasmStreaming::Client>
struct _qty2762;  // mut Record std::shared_ptr<v8::WasmStreaming::Client>
struct _qty2763;  // mut FunctionProto std::shared_ptr<WasmStreaming> (v8::Isolate *, Local<v8::Value>)
struct _qty2764;  // mut Elaborated std::shared_ptr<WasmStreaming>
struct _qty2765;  // mut TemplateSpecialization shared_ptr<v8::WasmStreaming>
struct _qty2766;  // mut Record std::shared_ptr<v8::WasmStreaming>
struct _qty2767;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2768;  // mut FunctionProto void (const v8::WasmStreaming &)
struct _qty2769;  // mut LValueReference const v8::WasmStreaming &
struct _qty2770;  // const Record v8::WasmStreaming
struct _qty2771;  // mut Record v8::WasmModuleObjectBuilderStreaming
struct _qty2772;  // mut Pointer v8::WasmModuleObjectBuilderStreaming *
struct _qty2773;  // mut FunctionProto void (MaybeLocal<v8::Value>)
struct _qty2774;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2775;  // mut FunctionProto Local<v8::Promise> ()
struct _qty2776;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty2777;  // mut FunctionProto void ()
struct _qty2778;  // mut Enum v8::ArrayBufferCreationMode
struct _qty2779;  // mut Record v8::ArrayBuffer::Allocator
struct _qty2780;  // mut FunctionProto void ()
struct _qty2781;  // mut Pointer v8::ArrayBuffer::Allocator *
struct _qty2782;  // mut FunctionProto void *(size_t)
struct _qty2783;  // mut FunctionProto void (void *, size_t)
struct _qty2784;  // mut Enum v8::ArrayBuffer::Allocator::AllocationMode
struct _qty2785;  // mut FunctionProto v8::ArrayBuffer::Allocator *()
struct _qty2786;  // mut FunctionProto v8::ArrayBuffer::Allocator &(const v8::ArrayBuffer::Allocator &)
struct _qty2787;  // mut LValueReference v8::ArrayBuffer::Allocator &
struct _qty2788;  // mut LValueReference const v8::ArrayBuffer::Allocator &
struct _qty2789;  // const Record v8::ArrayBuffer::Allocator
struct _qty2790;  // mut Record v8::ArrayBuffer::Contents
struct _qty2791;  // mut Typedef v8::ArrayBuffer::Contents::DeleterCallback
struct _qty2792;  // mut FunctionProto void (void *, size_t, void *)
struct _qty2793;  // mut Pointer void (*)(void *, size_t, void *)
struct _qty2794;  // mut Pointer v8::ArrayBuffer::Contents *
struct _qty2795;  // mut FunctionProto void *() const
struct _qty2796;  // mut Pointer const v8::ArrayBuffer::Contents *
struct _qty2797;  // mut FunctionProto Allocator::AllocationMode () const
struct _qty2798;  // mut Elaborated Allocator::AllocationMode
struct _qty2799;  // mut FunctionProto v8::ArrayBuffer::Contents::DeleterCallback () const
struct _qty2800;  // mut Pointer const v8::ArrayBuffer *
struct _qty2801;  // mut FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, size_t)
struct _qty2802;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2803;  // mut FunctionProto Local<v8::ArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _qty2804;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2805;  // mut Pointer v8::ArrayBuffer *
struct _qty2806;  // mut FunctionProto v8::ArrayBuffer::Contents ()
struct _qty2807;  // mut FunctionProto v8::ArrayBuffer *(v8::Value *)
struct _qty2808;  // mut Record v8::ArrayBufferView
struct _qty2809;  // mut FunctionProto Local<v8::ArrayBuffer> ()
struct _qty2810;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2811;  // mut Pointer v8::ArrayBufferView *
struct _qty2812;  // mut FunctionProto size_t ()
struct _qty2813;  // mut FunctionProto size_t (void *, size_t)
struct _qty2814;  // mut Pointer const v8::ArrayBufferView *
struct _qty2815;  // mut FunctionProto v8::ArrayBufferView *(v8::Value *)
struct _qty2816;  // mut Record v8::TypedArray
struct _qty2817;  // const Typedef size_t
struct _qty2818;  // mut Pointer v8::TypedArray *
struct _qty2819;  // mut FunctionProto v8::TypedArray *(v8::Value *)
struct _qty2820;  // mut Record v8::Uint8Array
struct _qty2821;  // mut FunctionProto Local<v8::Uint8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2822;  // mut TemplateSpecialization Local<v8::Uint8Array>
struct _qty2823;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2824;  // mut FunctionProto Local<v8::Uint8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2825;  // mut TemplateSpecialization Local<v8::Uint8Array>
struct _qty2826;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2827;  // mut FunctionProto v8::Uint8Array *(v8::Value *)
struct _qty2828;  // mut Pointer v8::Uint8Array *
struct _qty2829;  // mut Record v8::Uint8ClampedArray
struct _qty2830;  // mut FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2831;  // mut TemplateSpecialization Local<v8::Uint8ClampedArray>
struct _qty2832;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2833;  // mut FunctionProto Local<v8::Uint8ClampedArray> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2834;  // mut TemplateSpecialization Local<v8::Uint8ClampedArray>
struct _qty2835;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2836;  // mut FunctionProto v8::Uint8ClampedArray *(v8::Value *)
struct _qty2837;  // mut Pointer v8::Uint8ClampedArray *
struct _qty2838;  // mut Record v8::Int8Array
struct _qty2839;  // mut FunctionProto Local<v8::Int8Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2840;  // mut TemplateSpecialization Local<v8::Int8Array>
struct _qty2841;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2842;  // mut FunctionProto Local<v8::Int8Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2843;  // mut TemplateSpecialization Local<v8::Int8Array>
struct _qty2844;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2845;  // mut FunctionProto v8::Int8Array *(v8::Value *)
struct _qty2846;  // mut Pointer v8::Int8Array *
struct _qty2847;  // mut Record v8::Uint16Array
struct _qty2848;  // mut FunctionProto Local<v8::Uint16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2849;  // mut TemplateSpecialization Local<v8::Uint16Array>
struct _qty2850;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2851;  // mut FunctionProto Local<v8::Uint16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2852;  // mut TemplateSpecialization Local<v8::Uint16Array>
struct _qty2853;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2854;  // mut FunctionProto v8::Uint16Array *(v8::Value *)
struct _qty2855;  // mut Pointer v8::Uint16Array *
struct _qty2856;  // mut Record v8::Int16Array
struct _qty2857;  // mut FunctionProto Local<v8::Int16Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2858;  // mut TemplateSpecialization Local<v8::Int16Array>
struct _qty2859;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2860;  // mut FunctionProto Local<v8::Int16Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2861;  // mut TemplateSpecialization Local<v8::Int16Array>
struct _qty2862;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2863;  // mut FunctionProto v8::Int16Array *(v8::Value *)
struct _qty2864;  // mut Pointer v8::Int16Array *
struct _qty2865;  // mut Record v8::Uint32Array
struct _qty2866;  // mut FunctionProto Local<v8::Uint32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2867;  // mut TemplateSpecialization Local<v8::Uint32Array>
struct _qty2868;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2869;  // mut FunctionProto Local<v8::Uint32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2870;  // mut TemplateSpecialization Local<v8::Uint32Array>
struct _qty2871;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2872;  // mut FunctionProto v8::Uint32Array *(v8::Value *)
struct _qty2873;  // mut Pointer v8::Uint32Array *
struct _qty2874;  // mut Record v8::Int32Array
struct _qty2875;  // mut FunctionProto Local<v8::Int32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2876;  // mut TemplateSpecialization Local<v8::Int32Array>
struct _qty2877;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2878;  // mut FunctionProto Local<v8::Int32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2879;  // mut TemplateSpecialization Local<v8::Int32Array>
struct _qty2880;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2881;  // mut FunctionProto v8::Int32Array *(v8::Value *)
struct _qty2882;  // mut Pointer v8::Int32Array *
struct _qty2883;  // mut Record v8::Float32Array
struct _qty2884;  // mut FunctionProto Local<v8::Float32Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2885;  // mut TemplateSpecialization Local<v8::Float32Array>
struct _qty2886;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2887;  // mut FunctionProto Local<v8::Float32Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2888;  // mut TemplateSpecialization Local<v8::Float32Array>
struct _qty2889;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2890;  // mut FunctionProto v8::Float32Array *(v8::Value *)
struct _qty2891;  // mut Pointer v8::Float32Array *
struct _qty2892;  // mut Record v8::Float64Array
struct _qty2893;  // mut FunctionProto Local<v8::Float64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2894;  // mut TemplateSpecialization Local<v8::Float64Array>
struct _qty2895;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2896;  // mut FunctionProto Local<v8::Float64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2897;  // mut TemplateSpecialization Local<v8::Float64Array>
struct _qty2898;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2899;  // mut FunctionProto v8::Float64Array *(v8::Value *)
struct _qty2900;  // mut Pointer v8::Float64Array *
struct _qty2901;  // mut Record v8::BigInt64Array
struct _qty2902;  // mut FunctionProto Local<v8::BigInt64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2903;  // mut TemplateSpecialization Local<v8::BigInt64Array>
struct _qty2904;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2905;  // mut FunctionProto Local<v8::BigInt64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2906;  // mut TemplateSpecialization Local<v8::BigInt64Array>
struct _qty2907;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2908;  // mut FunctionProto v8::BigInt64Array *(v8::Value *)
struct _qty2909;  // mut Pointer v8::BigInt64Array *
struct _qty2910;  // mut Record v8::BigUint64Array
struct _qty2911;  // mut FunctionProto Local<v8::BigUint64Array> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2912;  // mut TemplateSpecialization Local<v8::BigUint64Array>
struct _qty2913;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2914;  // mut FunctionProto Local<v8::BigUint64Array> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2915;  // mut TemplateSpecialization Local<v8::BigUint64Array>
struct _qty2916;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2917;  // mut FunctionProto v8::BigUint64Array *(v8::Value *)
struct _qty2918;  // mut Pointer v8::BigUint64Array *
struct _qty2919;  // mut Record v8::DataView
struct _qty2920;  // mut FunctionProto Local<v8::DataView> (Local<v8::ArrayBuffer>, size_t, size_t)
struct _qty2921;  // mut TemplateSpecialization Local<v8::DataView>
struct _qty2922;  // mut TemplateSpecialization Local<v8::ArrayBuffer>
struct _qty2923;  // mut FunctionProto Local<v8::DataView> (Local<v8::SharedArrayBuffer>, size_t, size_t)
struct _qty2924;  // mut TemplateSpecialization Local<v8::DataView>
struct _qty2925;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2926;  // mut FunctionProto v8::DataView *(v8::Value *)
struct _qty2927;  // mut Pointer v8::DataView *
struct _qty2928;  // mut Record v8::SharedArrayBuffer::Contents
struct _qty2929;  // mut Typedef v8::SharedArrayBuffer::Contents::Allocator
struct _qty2930;  // mut Elaborated v8::ArrayBuffer::Allocator
struct _qty2931;  // mut Typedef v8::SharedArrayBuffer::Contents::DeleterCallback
struct _qty2932;  // mut Pointer v8::SharedArrayBuffer::Contents *
struct _qty2933;  // mut Pointer const v8::SharedArrayBuffer::Contents *
struct _qty2934;  // mut FunctionProto Allocator::AllocationMode () const
struct _qty2935;  // mut Elaborated Allocator::AllocationMode
struct _qty2936;  // mut FunctionProto v8::SharedArrayBuffer::Contents::DeleterCallback () const
struct _qty2937;  // mut Pointer const v8::SharedArrayBuffer *
struct _qty2938;  // mut FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, size_t)
struct _qty2939;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2940;  // mut FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, void *, size_t, v8::ArrayBufferCreationMode)
struct _qty2941;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2942;  // mut FunctionProto Local<v8::SharedArrayBuffer> (v8::Isolate *, const SharedArrayBuffer::Contents &, v8::ArrayBufferCreationMode)
struct _qty2943;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty2944;  // mut LValueReference const SharedArrayBuffer::Contents &
struct _qty2945;  // const Elaborated SharedArrayBuffer::Contents
struct _qty2946;  // mut FunctionProto v8::SharedArrayBuffer::Contents ()
struct _qty2947;  // mut Pointer v8::SharedArrayBuffer *
struct _qty2948;  // mut FunctionProto v8::SharedArrayBuffer *(v8::Value *)
struct _qty2949;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, double)
struct _qty2950;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty2951;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2952;  // mut Pointer const v8::Date *
struct _qty2953;  // mut FunctionProto v8::Date *(v8::Value *)
struct _qty2954;  // mut Pointer v8::Date *
struct _qty2955;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, double)
struct _qty2956;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2957;  // mut Pointer const v8::NumberObject *
struct _qty2958;  // mut FunctionProto v8::NumberObject *(v8::Value *)
struct _qty2959;  // mut Pointer v8::NumberObject *
struct _qty2960;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, int64_t)
struct _qty2961;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2962;  // mut FunctionProto Local<v8::BigInt> () const
struct _qty2963;  // mut TemplateSpecialization Local<v8::BigInt>
struct _qty2964;  // mut Pointer const v8::BigIntObject *
struct _qty2965;  // mut FunctionProto v8::BigIntObject *(v8::Value *)
struct _qty2966;  // mut Pointer v8::BigIntObject *
struct _qty2967;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, bool)
struct _qty2968;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2969;  // mut Pointer const v8::BooleanObject *
struct _qty2970;  // mut FunctionProto v8::BooleanObject *(v8::Value *)
struct _qty2971;  // mut Pointer v8::BooleanObject *
struct _qty2972;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::String>)
struct _qty2973;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2974;  // mut TemplateSpecialization Local<v8::String>
struct _qty2975;  // mut FunctionProto Local<v8::String> () const
struct _qty2976;  // mut TemplateSpecialization Local<v8::String>
struct _qty2977;  // mut Pointer const v8::StringObject *
struct _qty2978;  // mut FunctionProto v8::StringObject *(v8::Value *)
struct _qty2979;  // mut Pointer v8::StringObject *
struct _qty2980;  // mut FunctionProto Local<v8::Value> (v8::Isolate *, Local<v8::Symbol>)
struct _qty2981;  // mut TemplateSpecialization Local<v8::Value>
struct _qty2982;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2983;  // mut FunctionProto Local<v8::Symbol> () const
struct _qty2984;  // mut TemplateSpecialization Local<v8::Symbol>
struct _qty2985;  // mut Pointer const v8::SymbolObject *
struct _qty2986;  // mut FunctionProto v8::SymbolObject *(v8::Value *)
struct _qty2987;  // mut Pointer v8::SymbolObject *
struct _qty2988;  // mut Record v8::RegExp
struct _qty2989;  // mut Enum v8::RegExp::Flags
struct _qty2990;  // mut FunctionProto MaybeLocal<v8::RegExp> (Local<v8::Context>, Local<v8::String>, v8::RegExp::Flags)
struct _qty2991;  // mut TemplateSpecialization MaybeLocal<v8::RegExp>
struct _qty2992;  // mut TemplateSpecialization Local<v8::Context>
struct _qty2993;  // mut TemplateSpecialization Local<v8::String>
struct _qty2994;  // mut FunctionProto Local<v8::String> () const
struct _qty2995;  // mut TemplateSpecialization Local<v8::String>
struct _qty2996;  // mut Pointer const v8::RegExp *
struct _qty2997;  // mut FunctionProto v8::RegExp::Flags () const
struct _qty2998;  // mut FunctionProto v8::RegExp *(v8::Value *)
struct _qty2999;  // mut Pointer v8::RegExp *
struct _qty3000;  // mut FunctionProto Local<v8::External> (v8::Isolate *, void *)
struct _qty3001;  // mut TemplateSpecialization Local<v8::External>
struct _qty3002;  // mut FunctionProto v8::External *(v8::Value *)
struct _qty3003;  // mut Pointer v8::External *
struct _qty3004;  // mut Pointer const v8::External *
struct _qty3005;  // mut Enum v8::Intrinsic
struct _qty3006;  // mut Record v8::Template
struct _qty3007;  // mut FunctionProto void (Local<v8::Name>, Local<v8::Data>, v8::PropertyAttribute)
struct _qty3008;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3009;  // mut TemplateSpecialization Local<v8::Data>
struct _qty3010;  // mut Pointer v8::Template *
struct _qty3011;  // mut FunctionProto void (Local<v8::Private>, Local<v8::Data>, v8::PropertyAttribute)
struct _qty3012;  // mut TemplateSpecialization Local<v8::Private>
struct _qty3013;  // mut TemplateSpecialization Local<v8::Data>
struct _qty3014;  // mut FunctionProto void (v8::Isolate *, const char *, Local<v8::Data>)
struct _qty3015;  // mut TemplateSpecialization Local<v8::Data>
struct _qty3016;  // mut FunctionProto void (Local<v8::Name>, Local<v8::FunctionTemplate>, Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)
struct _qty3017;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3018;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3019;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3020;  // mut FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _qty3021;  // mut TemplateSpecialization Local<v8::String>
struct _qty3022;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3023;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty3024;  // mut FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)
struct _qty3025;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3026;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3027;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty3028;  // mut FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)
struct _qty3029;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3030;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3031;  // mut FunctionProto void (Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)
struct _qty3032;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3033;  // mut Typedef v8::GenericNamedPropertyGetterCallback
struct _qty3034;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3035;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3036;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3037;  // mut FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3038;  // mut Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3039;  // mut Typedef v8::GenericNamedPropertySetterCallback
struct _qty3040;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3041;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3042;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3043;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3044;  // mut FunctionProto void (Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3045;  // mut Pointer void (*)(Local<v8::Name>, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3046;  // mut Typedef v8::GenericNamedPropertyQueryCallback
struct _qty3047;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3048;  // mut LValueReference const PropertyCallbackInfo<v8::Integer> &
struct _qty3049;  // const TemplateSpecialization PropertyCallbackInfo<v8::Integer>
struct _qty3050;  // mut FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _qty3051;  // mut Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Integer> &)
struct _qty3052;  // mut Typedef v8::GenericNamedPropertyDeleterCallback
struct _qty3053;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3054;  // mut LValueReference const PropertyCallbackInfo<v8::Boolean> &
struct _qty3055;  // const TemplateSpecialization PropertyCallbackInfo<v8::Boolean>
struct _qty3056;  // mut FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _qty3057;  // mut Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Boolean> &)
struct _qty3058;  // mut Typedef v8::GenericNamedPropertyEnumeratorCallback
struct _qty3059;  // mut LValueReference const PropertyCallbackInfo<v8::Array> &
struct _qty3060;  // const TemplateSpecialization PropertyCallbackInfo<v8::Array>
struct _qty3061;  // mut FunctionProto void (const PropertyCallbackInfo<v8::Array> &)
struct _qty3062;  // mut Pointer void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _qty3063;  // mut Typedef v8::GenericNamedPropertyDefinerCallback
struct _qty3064;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3065;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3066;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3067;  // mut FunctionProto void (Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _qty3068;  // mut Pointer void (*)(Local<v8::Name>, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _qty3069;  // mut Typedef v8::GenericNamedPropertyDescriptorCallback
struct _qty3070;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3071;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3072;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3073;  // mut FunctionProto void (Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3074;  // mut Pointer void (*)(Local<v8::Name>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3075;  // mut Typedef v8::IndexedPropertyGetterCallback
struct _qty3076;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3077;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3078;  // mut FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _qty3079;  // mut Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _qty3080;  // mut Typedef v8::IndexedPropertySetterCallback
struct _qty3081;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3082;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3083;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3084;  // mut FunctionProto void (uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3085;  // mut Pointer void (*)(uint32_t, Local<v8::Value>, const PropertyCallbackInfo<v8::Value> &)
struct _qty3086;  // mut Typedef v8::IndexedPropertyQueryCallback
struct _qty3087;  // mut LValueReference const PropertyCallbackInfo<v8::Integer> &
struct _qty3088;  // const TemplateSpecialization PropertyCallbackInfo<v8::Integer>
struct _qty3089;  // mut FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _qty3090;  // mut Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Integer> &)
struct _qty3091;  // mut Typedef v8::IndexedPropertyDeleterCallback
struct _qty3092;  // mut LValueReference const PropertyCallbackInfo<v8::Boolean> &
struct _qty3093;  // const TemplateSpecialization PropertyCallbackInfo<v8::Boolean>
struct _qty3094;  // mut FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _qty3095;  // mut Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Boolean> &)
struct _qty3096;  // mut Typedef v8::IndexedPropertyEnumeratorCallback
struct _qty3097;  // mut LValueReference const PropertyCallbackInfo<v8::Array> &
struct _qty3098;  // const TemplateSpecialization PropertyCallbackInfo<v8::Array>
struct _qty3099;  // mut FunctionProto void (const PropertyCallbackInfo<v8::Array> &)
struct _qty3100;  // mut Pointer void (*)(const PropertyCallbackInfo<v8::Array> &)
struct _qty3101;  // mut Typedef v8::IndexedPropertyDefinerCallback
struct _qty3102;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3103;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3104;  // mut FunctionProto void (uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _qty3105;  // mut Pointer void (*)(uint32_t, const v8::PropertyDescriptor &, const PropertyCallbackInfo<v8::Value> &)
struct _qty3106;  // mut Typedef v8::IndexedPropertyDescriptorCallback
struct _qty3107;  // mut LValueReference const PropertyCallbackInfo<v8::Value> &
struct _qty3108;  // const TemplateSpecialization PropertyCallbackInfo<v8::Value>
struct _qty3109;  // mut FunctionProto void (uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _qty3110;  // mut Pointer void (*)(uint32_t, const PropertyCallbackInfo<v8::Value> &)
struct _qty3111;  // mut Enum v8::AccessType
struct _qty3112;  // mut Typedef v8::AccessCheckCallback
struct _qty3113;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3114;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3115;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3116;  // mut FunctionProto bool (Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _qty3117;  // mut Pointer bool (*)(Local<v8::Context>, Local<v8::Object>, Local<v8::Value>)
struct _qty3118;  // mut FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Value>, Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType)
struct _qty3119;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3120;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3121;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty3122;  // mut FunctionProto MaybeLocal<v8::FunctionTemplate> (v8::Isolate *, size_t)
struct _qty3123;  // mut TemplateSpecialization MaybeLocal<v8::FunctionTemplate>
struct _qty3124;  // mut FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, v8::FunctionCallback, Local<v8::Private>, Local<v8::Value>, Local<v8::Signature>, int, v8::SideEffectType)
struct _qty3125;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3126;  // mut TemplateSpecialization Local<v8::Private>
struct _qty3127;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3128;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty3129;  // mut FunctionProto MaybeLocal<v8::Function> (Local<v8::Context>)
struct _qty3130;  // mut TemplateSpecialization MaybeLocal<v8::Function>
struct _qty3131;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3132;  // mut Pointer v8::FunctionTemplate *
struct _qty3133;  // mut FunctionProto MaybeLocal<v8::Object> ()
struct _qty3134;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty3135;  // mut FunctionProto void (v8::FunctionCallback, Local<v8::Value>, v8::SideEffectType)
struct _qty3136;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3137;  // mut FunctionProto Local<v8::ObjectTemplate> ()
struct _qty3138;  // mut TemplateSpecialization Local<v8::ObjectTemplate>
struct _qty3139;  // mut FunctionProto void (Local<v8::FunctionTemplate>)
struct _qty3140;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3141;  // mut FunctionProto Local<v8::ObjectTemplate> ()
struct _qty3142;  // mut TemplateSpecialization Local<v8::ObjectTemplate>
struct _qty3143;  // mut FunctionProto void (Local<v8::FunctionTemplate>)
struct _qty3144;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3145;  // mut FunctionProto void (Local<v8::String>)
struct _qty3146;  // mut TemplateSpecialization Local<v8::String>
struct _qty3147;  // mut FunctionProto bool (Local<v8::Value>)
struct _qty3148;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3149;  // mut FunctionProto v8::FunctionTemplate *(v8::Data *)
struct _qty3150;  // mut Enum v8::PropertyHandlerFlags
struct _qty3151;  // mut Record v8::NamedPropertyHandlerConfiguration
struct _qty3152;  // mut FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, v8::GenericNamedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _qty3153;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3154;  // mut Pointer v8::NamedPropertyHandlerConfiguration *
struct _qty3155;  // mut FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyQueryCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _qty3156;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3157;  // mut FunctionProto void (v8::GenericNamedPropertyGetterCallback, v8::GenericNamedPropertySetterCallback, v8::GenericNamedPropertyDescriptorCallback, v8::GenericNamedPropertyDeleterCallback, v8::GenericNamedPropertyEnumeratorCallback, v8::GenericNamedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _qty3158;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3159;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3160;  // mut FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _qty3161;  // mut LValueReference const v8::NamedPropertyHandlerConfiguration &
struct _qty3162;  // const Record v8::NamedPropertyHandlerConfiguration
struct _qty3163;  // mut FunctionProto void (v8::NamedPropertyHandlerConfiguration &&)
struct _qty3164;  // mut RValueReference v8::NamedPropertyHandlerConfiguration &&
struct _qty3165;  // mut Record v8::IndexedPropertyHandlerConfiguration
struct _qty3166;  // mut FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, v8::IndexedPropertyDescriptorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _qty3167;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3168;  // mut Pointer v8::IndexedPropertyHandlerConfiguration *
struct _qty3169;  // mut FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _qty3170;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3171;  // mut FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyDescriptorCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, v8::IndexedPropertyDefinerCallback, Local<v8::Value>, v8::PropertyHandlerFlags)
struct _qty3172;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3173;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3174;  // mut FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _qty3175;  // mut LValueReference const v8::IndexedPropertyHandlerConfiguration &
struct _qty3176;  // const Record v8::IndexedPropertyHandlerConfiguration
struct _qty3177;  // mut FunctionProto void (v8::IndexedPropertyHandlerConfiguration &&)
struct _qty3178;  // mut RValueReference v8::IndexedPropertyHandlerConfiguration &&
struct _qty3179;  // mut FunctionProto Local<v8::ObjectTemplate> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _qty3180;  // mut TemplateSpecialization Local<v8::ObjectTemplate>
struct _qty3181;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3182;  // mut FunctionProto MaybeLocal<v8::ObjectTemplate> (v8::Isolate *, size_t)
struct _qty3183;  // mut TemplateSpecialization MaybeLocal<v8::ObjectTemplate>
struct _qty3184;  // mut FunctionProto MaybeLocal<v8::Object> (Local<v8::Context>)
struct _qty3185;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty3186;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3187;  // mut Pointer v8::ObjectTemplate *
struct _qty3188;  // mut FunctionProto void (Local<v8::String>, v8::AccessorGetterCallback, v8::AccessorSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _qty3189;  // mut TemplateSpecialization Local<v8::String>
struct _qty3190;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3191;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty3192;  // mut FunctionProto void (Local<v8::Name>, v8::AccessorNameGetterCallback, v8::AccessorNameSetterCallback, Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)
struct _qty3193;  // mut TemplateSpecialization Local<v8::Name>
struct _qty3194;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3195;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty3196;  // mut FunctionProto void (const v8::NamedPropertyHandlerConfiguration &)
struct _qty3197;  // mut FunctionProto void (v8::IndexedPropertyGetterCallback, v8::IndexedPropertySetterCallback, v8::IndexedPropertyQueryCallback, v8::IndexedPropertyDeleterCallback, v8::IndexedPropertyEnumeratorCallback, Local<v8::Value>)
struct _qty3198;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3199;  // mut FunctionProto void (const v8::IndexedPropertyHandlerConfiguration &)
struct _qty3200;  // mut FunctionProto void (v8::FunctionCallback, Local<v8::Value>)
struct _qty3201;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3202;  // mut FunctionProto void (v8::AccessCheckCallback, Local<v8::Value>)
struct _qty3203;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3204;  // mut FunctionProto void (v8::AccessCheckCallback, const v8::NamedPropertyHandlerConfiguration &, const v8::IndexedPropertyHandlerConfiguration &, Local<v8::Value>)
struct _qty3205;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3206;  // mut FunctionProto v8::ObjectTemplate *(v8::Data *)
struct _qty3207;  // mut FunctionProto Local<v8::Signature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _qty3208;  // mut TemplateSpecialization Local<v8::Signature>
struct _qty3209;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3210;  // mut FunctionProto v8::Signature *(v8::Data *)
struct _qty3211;  // mut Pointer v8::Signature *
struct _qty3212;  // mut FunctionProto Local<v8::AccessorSignature> (v8::Isolate *, Local<v8::FunctionTemplate>)
struct _qty3213;  // mut TemplateSpecialization Local<v8::AccessorSignature>
struct _qty3214;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3215;  // mut FunctionProto v8::AccessorSignature *(v8::Data *)
struct _qty3216;  // mut Pointer v8::AccessorSignature *
struct _qty3217;  // mut Record v8::Extension
struct _qty3218;  // mut FunctionProto void (const char *, const char *, int, const char **, int)
struct _qty3219;  // mut Pointer const char **
struct _qty3220;  // mut Pointer v8::Extension *
struct _qty3221;  // mut FunctionProto Local<v8::FunctionTemplate> (v8::Isolate *, Local<v8::String>)
struct _qty3222;  // mut TemplateSpecialization Local<v8::FunctionTemplate>
struct _qty3223;  // mut TemplateSpecialization Local<v8::String>
struct _qty3224;  // mut Pointer const v8::Extension *
struct _qty3225;  // mut FunctionProto const String::ExternalOneByteStringResource *() const
struct _qty3226;  // mut Pointer const String::ExternalOneByteStringResource *
struct _qty3227;  // mut FunctionProto const char **() const
struct _qty3228;  // mut FunctionProto void (const v8::Extension &)
struct _qty3229;  // mut LValueReference const v8::Extension &
struct _qty3230;  // const Record v8::Extension
struct _qty3231;  // mut FunctionProto void (std::unique_ptr<Extension>)
struct _qty3232;  // mut Elaborated std::unique_ptr<Extension>
struct _qty3233;  // mut TemplateSpecialization unique_ptr<v8::Extension>
struct _qty3234;  // mut Record std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >
struct _qty3235;  // mut FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _qty3236;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty3237;  // mut FunctionProto Local<v8::Primitive> (v8::Isolate *)
struct _qty3238;  // mut TemplateSpecialization Local<v8::Primitive>
struct _qty3239;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _qty3240;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty3241;  // mut FunctionProto Local<v8::Boolean> (v8::Isolate *)
struct _qty3242;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty3243;  // mut Record v8::ResourceConstraints
struct _qty3244;  // mut FunctionProto void (size_t, size_t)
struct _qty3245;  // mut Pointer v8::ResourceConstraints *
struct _qty3246;  // mut FunctionProto void (uint64_t, uint64_t)
struct _qty3247;  // mut FunctionProto uint32_t *() const
struct _qty3248;  // mut Pointer const v8::ResourceConstraints *
struct _qty3249;  // mut FunctionProto void (uint32_t *)
struct _qty3250;  // mut FunctionProto void (size_t)
struct _qty3251;  // mut FunctionProto void (const v8::ResourceConstraints &)
struct _qty3252;  // mut LValueReference const v8::ResourceConstraints &
struct _qty3253;  // const Record v8::ResourceConstraints
struct _qty3254;  // mut FunctionProto void (v8::ResourceConstraints &&)
struct _qty3255;  // mut RValueReference v8::ResourceConstraints &&
struct _qty3256;  // mut Typedef v8::FatalErrorCallback
struct _qty3257;  // mut FunctionProto void (const char *, const char *)
struct _qty3258;  // mut Pointer void (*)(const char *, const char *)
struct _qty3259;  // mut Typedef v8::OOMErrorCallback
struct _qty3260;  // mut FunctionProto void (const char *, bool)
struct _qty3261;  // mut Pointer void (*)(const char *, bool)
struct _qty3262;  // mut Typedef v8::DcheckErrorCallback
struct _qty3263;  // mut FunctionProto void (const char *, int, const char *)
struct _qty3264;  // mut Pointer void (*)(const char *, int, const char *)
struct _qty3265;  // mut Typedef v8::MessageCallback
struct _qty3266;  // mut TemplateSpecialization Local<v8::Message>
struct _qty3267;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3268;  // mut FunctionProto void (Local<v8::Message>, Local<v8::Value>)
struct _qty3269;  // mut Pointer void (*)(Local<v8::Message>, Local<v8::Value>)
struct _qty3270;  // mut Typedef v8::LogEventCallback
struct _qty3271;  // mut FunctionProto void (const char *, int)
struct _qty3272;  // mut Pointer void (*)(const char *, int)
struct _qty3273;  // mut Record v8::Exception
struct _qty3274;  // mut FunctionProto Local<v8::Value> (Local<v8::String>)
struct _qty3275;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3276;  // mut TemplateSpecialization Local<v8::String>
struct _qty3277;  // mut FunctionProto Local<v8::Value> (Local<v8::String>)
struct _qty3278;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3279;  // mut TemplateSpecialization Local<v8::String>
struct _qty3280;  // mut FunctionProto Local<v8::Value> (Local<v8::String>)
struct _qty3281;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3282;  // mut TemplateSpecialization Local<v8::String>
struct _qty3283;  // mut FunctionProto Local<v8::Value> (Local<v8::String>)
struct _qty3284;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3285;  // mut TemplateSpecialization Local<v8::String>
struct _qty3286;  // mut FunctionProto Local<v8::Value> (Local<v8::String>)
struct _qty3287;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3288;  // mut TemplateSpecialization Local<v8::String>
struct _qty3289;  // mut FunctionProto Local<v8::Message> (v8::Isolate *, Local<v8::Value>)
struct _qty3290;  // mut TemplateSpecialization Local<v8::Message>
struct _qty3291;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3292;  // mut FunctionProto Local<v8::StackTrace> (Local<v8::Value>)
struct _qty3293;  // mut TemplateSpecialization Local<v8::StackTrace>
struct _qty3294;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3295;  // mut Typedef v8::CounterLookupCallback
struct _qty3296;  // mut FunctionProto int *(const char *)
struct _qty3297;  // mut Pointer int *(*)(const char *)
struct _qty3298;  // mut Typedef v8::CreateHistogramCallback
struct _qty3299;  // mut FunctionProto void *(const char *, int, int, size_t)
struct _qty3300;  // mut Pointer void *(*)(const char *, int, int, size_t)
struct _qty3301;  // mut Typedef v8::AddHistogramSampleCallback
struct _qty3302;  // mut FunctionProto void (void *, int)
struct _qty3303;  // mut Pointer void (*)(void *, int)
struct _qty3304;  // mut Typedef v8::BeforeCallEnteredCallback
struct _qty3305;  // mut Pointer void (*)(v8::Isolate *)
struct _qty3306;  // mut Typedef v8::CallCompletedCallback
struct _qty3307;  // mut Typedef v8::HostImportModuleDynamicallyCallback
struct _qty3308;  // mut TemplateSpecialization MaybeLocal<v8::Promise>
struct _qty3309;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3310;  // mut TemplateSpecialization Local<v8::ScriptOrModule>
struct _qty3311;  // mut TemplateSpecialization Local<v8::String>
struct _qty3312;  // mut FunctionProto MaybeLocal<v8::Promise> (Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _qty3313;  // mut Pointer MaybeLocal<v8::Promise> (*)(Local<v8::Context>, Local<v8::ScriptOrModule>, Local<v8::String>)
struct _qty3314;  // mut Typedef v8::HostInitializeImportMetaObjectCallback
struct _qty3315;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3316;  // mut TemplateSpecialization Local<v8::Module>
struct _qty3317;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3318;  // mut FunctionProto void (Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _qty3319;  // mut Pointer void (*)(Local<v8::Context>, Local<v8::Module>, Local<v8::Object>)
struct _qty3320;  // mut Typedef v8::PrepareStackTraceCallback
struct _qty3321;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty3322;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3323;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3324;  // mut TemplateSpecialization Local<v8::Array>
struct _qty3325;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _qty3326;  // mut Pointer MaybeLocal<v8::Value> (*)(Local<v8::Context>, Local<v8::Value>, Local<v8::Array>)
struct _qty3327;  // mut Enum v8::PromiseHookType
struct _qty3328;  // mut Typedef v8::PromiseHook
struct _qty3329;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty3330;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3331;  // mut FunctionProto void (v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _qty3332;  // mut Pointer void (*)(v8::PromiseHookType, Local<v8::Promise>, Local<v8::Value>)
struct _qty3333;  // mut Enum v8::PromiseRejectEvent
struct _qty3334;  // mut Record v8::PromiseRejectMessage
struct _qty3335;  // mut FunctionProto void (Local<v8::Promise>, v8::PromiseRejectEvent, Local<v8::Value>)
struct _qty3336;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty3337;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3338;  // mut Pointer v8::PromiseRejectMessage *
struct _qty3339;  // mut FunctionProto Local<v8::Promise> () const
struct _qty3340;  // mut TemplateSpecialization Local<v8::Promise>
struct _qty3341;  // mut Pointer const v8::PromiseRejectMessage *
struct _qty3342;  // mut FunctionProto v8::PromiseRejectEvent () const
struct _qty3343;  // mut FunctionProto Local<v8::Value> () const
struct _qty3344;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3345;  // mut Typedef v8::PromiseRejectCallback
struct _qty3346;  // mut FunctionProto void (v8::PromiseRejectMessage)
struct _qty3347;  // mut Pointer void (*)(v8::PromiseRejectMessage)
struct _qty3348;  // mut Typedef v8::MicrotasksCompletedCallback
struct _qty3349;  // mut Typedef v8::MicrotasksCompletedCallbackWithData
struct _qty3350;  // mut FunctionProto void (v8::Isolate *, void *)
struct _qty3351;  // mut Pointer void (*)(v8::Isolate *, void *)
struct _qty3352;  // mut Typedef v8::MicrotaskCallback
struct _qty3353;  // mut Pointer void (*)(void *)
struct _qty3354;  // mut Enum v8::MicrotasksPolicy
struct _qty3355;  // mut FunctionProto std::unique_ptr<MicrotaskQueue> (v8::Isolate *, v8::MicrotasksPolicy)
struct _qty3356;  // mut Elaborated std::unique_ptr<MicrotaskQueue>
struct _qty3357;  // mut TemplateSpecialization unique_ptr<v8::MicrotaskQueue>
struct _qty3358;  // mut Record std::unique_ptr<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >
struct _qty3359;  // mut FunctionProto void ()
struct _qty3360;  // mut Pointer v8::MicrotaskQueue *
struct _qty3361;  // mut FunctionProto void (v8::Isolate *, Local<v8::Function>)
struct _qty3362;  // mut TemplateSpecialization Local<v8::Function>
struct _qty3363;  // mut FunctionProto void (v8::Isolate *, v8::MicrotaskCallback, void *)
struct _qty3364;  // mut Pointer v8::Isolate *
struct _qty3365;  // mut FunctionProto void (v8::MicrotasksCompletedCallbackWithData, void *)
struct _qty3366;  // mut Pointer const v8::MicrotaskQueue *
struct _qty3367;  // mut FunctionProto void (const v8::MicrotaskQueue &)
struct _qty3368;  // mut LValueReference const v8::MicrotaskQueue &
struct _qty3369;  // const Record v8::MicrotaskQueue
struct _qty3370;  // mut FunctionProto v8::MicrotaskQueue &(const v8::MicrotaskQueue &)
struct _qty3371;  // mut LValueReference v8::MicrotaskQueue &
struct _qty3372;  // mut Record v8::MicrotasksScope
struct _qty3373;  // mut Enum v8::MicrotasksScope::Type
struct _qty3374;  // mut FunctionProto void (v8::Isolate *, v8::MicrotasksScope::Type)
struct _qty3375;  // mut Pointer v8::MicrotasksScope *
struct _qty3376;  // mut FunctionProto void (v8::Isolate *, v8::MicrotaskQueue *, v8::MicrotasksScope::Type)
struct _qty3377;  // mut FunctionProto void ()
struct _qty3378;  // mut FunctionProto bool (v8::Isolate *)
struct _qty3379;  // mut FunctionProto void (const v8::MicrotasksScope &)
struct _qty3380;  // mut LValueReference const v8::MicrotasksScope &
struct _qty3381;  // const Record v8::MicrotasksScope
struct _qty3382;  // mut FunctionProto v8::MicrotasksScope &(const v8::MicrotasksScope &)
struct _qty3383;  // mut LValueReference v8::MicrotasksScope &
struct _qty3384;  // mut Typedef v8::FailedAccessCheckCallback
struct _qty3385;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3386;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3387;  // mut FunctionProto void (Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _qty3388;  // mut Pointer void (*)(Local<v8::Object>, v8::AccessType, Local<v8::Value>)
struct _qty3389;  // mut Typedef v8::AllowCodeGenerationFromStringsCallback
struct _qty3390;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3391;  // mut TemplateSpecialization Local<v8::String>
struct _qty3392;  // mut FunctionProto bool (Local<v8::Context>, Local<v8::String>)
struct _qty3393;  // mut Pointer bool (*)(Local<v8::Context>, Local<v8::String>)
struct _qty3394;  // mut Typedef v8::ExtensionCallback
struct _qty3395;  // mut LValueReference const FunctionCallbackInfo<v8::Value> &
struct _qty3396;  // const TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _qty3397;  // mut FunctionProto bool (const FunctionCallbackInfo<v8::Value> &)
struct _qty3398;  // mut Pointer bool (*)(const FunctionCallbackInfo<v8::Value> &)
struct _qty3399;  // mut Typedef v8::AllowWasmCodeGenerationCallback
struct _qty3400;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3401;  // mut TemplateSpecialization Local<v8::String>
struct _qty3402;  // mut FunctionProto bool (Local<v8::Context>, Local<v8::String>)
struct _qty3403;  // mut Pointer bool (*)(Local<v8::Context>, Local<v8::String>)
struct _qty3404;  // mut Typedef v8::ApiImplementationCallback
struct _qty3405;  // mut LValueReference const FunctionCallbackInfo<v8::Value> &
struct _qty3406;  // const TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _qty3407;  // mut FunctionProto void (const FunctionCallbackInfo<v8::Value> &)
struct _qty3408;  // mut Pointer void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _qty3409;  // mut Typedef v8::WasmStreamingCallback
struct _qty3410;  // mut LValueReference const FunctionCallbackInfo<v8::Value> &
struct _qty3411;  // const TemplateSpecialization FunctionCallbackInfo<v8::Value>
struct _qty3412;  // mut FunctionProto void (const FunctionCallbackInfo<v8::Value> &)
struct _qty3413;  // mut Pointer void (*)(const FunctionCallbackInfo<v8::Value> &)
struct _qty3414;  // mut Typedef v8::WasmThreadsEnabledCallback
struct _qty3415;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3416;  // mut FunctionProto bool (Local<v8::Context>)
struct _qty3417;  // mut Pointer bool (*)(Local<v8::Context>)
struct _qty3418;  // mut Enum v8::GCType
struct _qty3419;  // mut Enum v8::GCCallbackFlags
struct _qty3420;  // mut Typedef v8::GCCallback
struct _qty3421;  // mut FunctionProto void (v8::GCType, v8::GCCallbackFlags)
struct _qty3422;  // mut Pointer void (*)(v8::GCType, v8::GCCallbackFlags)
struct _qty3423;  // mut Typedef v8::InterruptCallback
struct _qty3424;  // mut Typedef v8::NearHeapLimitCallback
struct _qty3425;  // mut FunctionProto size_t (void *, size_t, size_t)
struct _qty3426;  // mut Pointer size_t (*)(void *, size_t, size_t)
struct _qty3427;  // mut Record v8::HeapStatistics
struct _qty3428;  // mut Pointer v8::HeapStatistics *
struct _qty3429;  // mut Record v8::HeapSpaceStatistics
struct _qty3430;  // mut Pointer v8::HeapSpaceStatistics *
struct _qty3431;  // mut FunctionProto const char *()
struct _qty3432;  // mut Record v8::HeapObjectStatistics
struct _qty3433;  // mut Pointer v8::HeapObjectStatistics *
struct _qty3434;  // mut Record v8::HeapCodeStatistics
struct _qty3435;  // mut Pointer v8::HeapCodeStatistics *
struct _qty3436;  // mut Record v8::JitCodeEvent
struct _qty3437;  // mut Enum v8::JitCodeEvent::EventType
struct _qty3438;  // mut Enum v8::JitCodeEvent::PositionType
struct _qty3439;  // mut Enum v8::JitCodeEvent::CodeType
struct _qty3440;  // mut TemplateSpecialization Local<v8::UnboundScript>
struct _qty3441;  // mut Record v8::JitCodeEvent::name_t
struct _qty3442;  // mut Record v8::JitCodeEvent::line_info_t
struct _qty3443;  // mut Record v8::JitCodeEvent::(anonymous union at D:\gen8/v8/include/v8.h:7072:3)
struct _qty3444;  // mut Elaborated struct name_t
struct _qty3445;  // mut Elaborated struct line_info_t
struct _qty3446;  // mut Enum v8::RAILMode
struct _qty3447;  // mut Enum v8::JitCodeEventOptions
struct _qty3448;  // mut Typedef v8::JitCodeEventHandler
struct _qty3449;  // mut Pointer const v8::JitCodeEvent *
struct _qty3450;  // mut FunctionProto void (const v8::JitCodeEvent *)
struct _qty3451;  // mut Pointer void (*)(const v8::JitCodeEvent *)
struct _qty3452;  // mut Typedef v8::UnhandledExceptionCallback
struct _qty3453;  // mut Pointer _EXCEPTION_POINTERS *
struct _qty3454;  // mut Record _EXCEPTION_POINTERS
struct _qty3455;  // mut FunctionProto int (_EXCEPTION_POINTERS *)
struct _qty3456;  // mut Pointer int (*)(_EXCEPTION_POINTERS *)
struct _qty3457;  // mut Record v8::ExternalResourceVisitor
struct _qty3458;  // mut FunctionProto void ()
struct _qty3459;  // mut Pointer v8::ExternalResourceVisitor *
struct _qty3460;  // mut FunctionProto void (Local<v8::String>)
struct _qty3461;  // mut TemplateSpecialization Local<v8::String>
struct _qty3462;  // mut FunctionProto v8::ExternalResourceVisitor &(const v8::ExternalResourceVisitor &)
struct _qty3463;  // mut LValueReference v8::ExternalResourceVisitor &
struct _qty3464;  // mut LValueReference const v8::ExternalResourceVisitor &
struct _qty3465;  // const Record v8::ExternalResourceVisitor
struct _qty3466;  // mut Record v8::PersistentHandleVisitor
struct _qty3467;  // mut FunctionProto void ()
struct _qty3468;  // mut Pointer v8::PersistentHandleVisitor *
struct _qty3469;  // mut FunctionProto void (Persistent<v8::Value> *, uint16_t)
struct _qty3470;  // mut Pointer Persistent<v8::Value> *
struct _qty3471;  // mut FunctionProto v8::PersistentHandleVisitor &(const v8::PersistentHandleVisitor &)
struct _qty3472;  // mut LValueReference v8::PersistentHandleVisitor &
struct _qty3473;  // mut LValueReference const v8::PersistentHandleVisitor &
struct _qty3474;  // const Record v8::PersistentHandleVisitor
struct _qty3475;  // mut Enum v8::MemoryPressureLevel
struct _qty3476;  // mut Record v8::EmbedderHeapTracer
struct _qty3477;  // mut Enum v8::EmbedderHeapTracer::TraceFlags
struct _qty3478;  // mut Enum v8::EmbedderHeapTracer::EmbedderStackState
struct _qty3479;  // mut Record v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _qty3480;  // mut FunctionProto void ()
struct _qty3481;  // mut Pointer v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *
struct _qty3482;  // mut FunctionProto void (const TracedGlobal<v8::Value> &)
struct _qty3483;  // mut LValueReference const TracedGlobal<v8::Value> &
struct _qty3484;  // const TemplateSpecialization TracedGlobal<v8::Value>
struct _qty3485;  // mut FunctionProto v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &(const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &)
struct _qty3486;  // mut LValueReference v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _qty3487;  // mut LValueReference const v8::EmbedderHeapTracer::TracedGlobalHandleVisitor &
struct _qty3488;  // const Record v8::EmbedderHeapTracer::TracedGlobalHandleVisitor
struct _qty3489;  // mut Record v8::EmbedderHeapTracer::TraceSummary
struct _qty3490;  // mut FunctionProto void ()
struct _qty3491;  // mut Pointer v8::EmbedderHeapTracer *
struct _qty3492;  // mut FunctionProto void (v8::EmbedderHeapTracer::TracedGlobalHandleVisitor *)
struct _qty3493;  // mut FunctionProto void (const std::vector<std::pair<void *, void *> > &)
struct _qty3494;  // mut LValueReference const std::vector<std::pair<void *, void *> > &
struct _qty3495;  // const Elaborated std::vector<std::pair<void *, void *> >
struct _qty3496;  // mut TemplateSpecialization vector<std::pair<void *, void *> >
struct _qty3497;  // mut Record std::vector<std::pair<void *, void *>, std::allocator<std::pair<void *, void *> > >
struct _qty3498;  // mut FunctionProto void (const TracedGlobal<v8::Value> &)
struct _qty3499;  // mut LValueReference const TracedGlobal<v8::Value> &
struct _qty3500;  // const TemplateSpecialization TracedGlobal<v8::Value>
struct _qty3501;  // mut FunctionProto void (v8::EmbedderHeapTracer::TraceFlags)
struct _qty3502;  // mut FunctionProto bool (double)
struct _qty3503;  // mut FunctionProto void (v8::EmbedderHeapTracer::TraceSummary *)
struct _qty3504;  // mut Pointer v8::EmbedderHeapTracer::TraceSummary *
struct _qty3505;  // mut FunctionProto void (v8::EmbedderHeapTracer::EmbedderStackState)
struct _qty3506;  // mut FunctionProto bool (const v8::TracedGlobal<v8::Value> &)
struct _qty3507;  // mut LValueReference const v8::TracedGlobal<v8::Value> &
struct _qty3508;  // const Elaborated v8::TracedGlobal<v8::Value>
struct _qty3509;  // mut TemplateSpecialization TracedGlobal<v8::Value>
struct _qty3510;  // mut FunctionProto v8::Isolate *() const
struct _qty3511;  // mut Pointer const v8::EmbedderHeapTracer *
struct _qty3512;  // mut FunctionProto v8::EmbedderHeapTracer &(const v8::EmbedderHeapTracer &)
struct _qty3513;  // mut LValueReference v8::EmbedderHeapTracer &
struct _qty3514;  // mut LValueReference const v8::EmbedderHeapTracer &
struct _qty3515;  // const Record v8::EmbedderHeapTracer
struct _qty3516;  // mut Record v8::SerializeInternalFieldsCallback
struct _qty3517;  // mut Typedef v8::SerializeInternalFieldsCallback::CallbackFunction
struct _qty3518;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3519;  // mut FunctionProto v8::StartupData (Local<v8::Object>, int, void *)
struct _qty3520;  // mut Pointer v8::StartupData (*)(Local<v8::Object>, int, void *)
struct _qty3521;  // mut FunctionProto void (v8::SerializeInternalFieldsCallback::CallbackFunction, void *)
struct _qty3522;  // mut Pointer v8::SerializeInternalFieldsCallback *
struct _qty3523;  // mut FunctionProto void (const v8::SerializeInternalFieldsCallback &)
struct _qty3524;  // mut LValueReference const v8::SerializeInternalFieldsCallback &
struct _qty3525;  // const Record v8::SerializeInternalFieldsCallback
struct _qty3526;  // mut FunctionProto void (v8::SerializeInternalFieldsCallback &&) noexcept
struct _qty3527;  // mut RValueReference v8::SerializeInternalFieldsCallback &&
struct _qty3528;  // mut Typedef v8::SerializeEmbedderFieldsCallback
struct _qty3529;  // mut Record v8::DeserializeInternalFieldsCallback
struct _qty3530;  // mut Typedef v8::DeserializeInternalFieldsCallback::CallbackFunction
struct _qty3531;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3532;  // mut FunctionProto void (Local<v8::Object>, int, v8::StartupData, void *)
struct _qty3533;  // mut Pointer void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _qty3534;  // mut FunctionProto void (v8::DeserializeInternalFieldsCallback::CallbackFunction, void *)
struct _qty3535;  // mut Pointer v8::DeserializeInternalFieldsCallback *
struct _qty3536;  // mut Pointer void (*)(Local<v8::Object>, int, v8::StartupData, void *)
struct _qty3537;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3538;  // mut FunctionProto void (Local<v8::Object>, int, v8::StartupData, void *)
struct _qty3539;  // mut FunctionProto void (const v8::DeserializeInternalFieldsCallback &)
struct _qty3540;  // mut LValueReference const v8::DeserializeInternalFieldsCallback &
struct _qty3541;  // const Record v8::DeserializeInternalFieldsCallback
struct _qty3542;  // mut FunctionProto void (v8::DeserializeInternalFieldsCallback &&) noexcept
struct _qty3543;  // mut RValueReference v8::DeserializeInternalFieldsCallback &&
struct _qty3544;  // mut Typedef v8::DeserializeEmbedderFieldsCallback
struct _qty3545;  // mut Record v8::Isolate::CreateParams
struct _qty3546;  // mut Pointer v8::Isolate::CreateParams *
struct _qty3547;  // mut Pointer v8::StartupData *
struct _qty3548;  // mut Pointer ArrayBuffer::Allocator *
struct _qty3549;  // mut Pointer const intptr_t *
struct _qty3550;  // mut Record v8::Isolate::Scope
struct _qty3551;  // mut Pointer v8::Isolate::Scope *
struct _qty3552;  // mut FunctionProto void (const v8::Isolate::Scope &)
struct _qty3553;  // mut LValueReference const v8::Isolate::Scope &
struct _qty3554;  // const Record v8::Isolate::Scope
struct _qty3555;  // mut FunctionProto v8::Isolate::Scope &(const v8::Isolate::Scope &)
struct _qty3556;  // mut LValueReference v8::Isolate::Scope &
struct _qty3557;  // mut Record v8::Isolate::DisallowJavascriptExecutionScope
struct _qty3558;  // mut Enum v8::Isolate::DisallowJavascriptExecutionScope::OnFailure
struct _qty3559;  // mut FunctionProto void (v8::Isolate *, v8::Isolate::DisallowJavascriptExecutionScope::OnFailure)
struct _qty3560;  // mut Pointer v8::Isolate::DisallowJavascriptExecutionScope *
struct _qty3561;  // mut FunctionProto void ()
struct _qty3562;  // mut FunctionProto void (const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _qty3563;  // mut LValueReference const v8::Isolate::DisallowJavascriptExecutionScope &
struct _qty3564;  // const Record v8::Isolate::DisallowJavascriptExecutionScope
struct _qty3565;  // mut FunctionProto v8::Isolate::DisallowJavascriptExecutionScope &(const v8::Isolate::DisallowJavascriptExecutionScope &)
struct _qty3566;  // mut LValueReference v8::Isolate::DisallowJavascriptExecutionScope &
struct _qty3567;  // mut Record v8::Isolate::AllowJavascriptExecutionScope
struct _qty3568;  // mut Pointer v8::Isolate::AllowJavascriptExecutionScope *
struct _qty3569;  // mut FunctionProto void ()
struct _qty3570;  // mut FunctionProto void (const v8::Isolate::AllowJavascriptExecutionScope &)
struct _qty3571;  // mut LValueReference const v8::Isolate::AllowJavascriptExecutionScope &
struct _qty3572;  // const Record v8::Isolate::AllowJavascriptExecutionScope
struct _qty3573;  // mut FunctionProto v8::Isolate::AllowJavascriptExecutionScope &(const v8::Isolate::AllowJavascriptExecutionScope &)
struct _qty3574;  // mut LValueReference v8::Isolate::AllowJavascriptExecutionScope &
struct _qty3575;  // mut Record v8::Isolate::SuppressMicrotaskExecutionScope
struct _qty3576;  // mut Pointer v8::Isolate::SuppressMicrotaskExecutionScope *
struct _qty3577;  // mut FunctionProto void (v8::MicrotaskQueue *)
struct _qty3578;  // mut FunctionProto void ()
struct _qty3579;  // mut FunctionProto void (const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _qty3580;  // mut LValueReference const v8::Isolate::SuppressMicrotaskExecutionScope &
struct _qty3581;  // const Record v8::Isolate::SuppressMicrotaskExecutionScope
struct _qty3582;  // mut FunctionProto v8::Isolate::SuppressMicrotaskExecutionScope &(const v8::Isolate::SuppressMicrotaskExecutionScope &)
struct _qty3583;  // mut LValueReference v8::Isolate::SuppressMicrotaskExecutionScope &
struct _qty3584;  // mut Record v8::Isolate::SafeForTerminationScope
struct _qty3585;  // mut FunctionProto void (v8::Isolate *)
struct _qty3586;  // mut Pointer v8::Isolate::SafeForTerminationScope *
struct _qty3587;  // mut FunctionProto void ()
struct _qty3588;  // mut FunctionProto void (const v8::Isolate::SafeForTerminationScope &)
struct _qty3589;  // mut LValueReference const v8::Isolate::SafeForTerminationScope &
struct _qty3590;  // const Record v8::Isolate::SafeForTerminationScope
struct _qty3591;  // mut FunctionProto v8::Isolate::SafeForTerminationScope &(const v8::Isolate::SafeForTerminationScope &)
struct _qty3592;  // mut LValueReference v8::Isolate::SafeForTerminationScope &
struct _qty3593;  // mut Enum v8::Isolate::GarbageCollectionType
struct _qty3594;  // mut Enum v8::Isolate::UseCounterFeature
struct _qty3595;  // mut Enum v8::Isolate::MessageErrorLevel
struct _qty3596;  // mut Typedef v8::Isolate::UseCounterCallback
struct _qty3597;  // mut FunctionProto void (v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _qty3598;  // mut Pointer void (*)(v8::Isolate *, v8::Isolate::UseCounterFeature)
struct _qty3599;  // mut FunctionProto void (v8::Isolate *, const v8::Isolate::CreateParams &)
struct _qty3600;  // mut LValueReference const v8::Isolate::CreateParams &
struct _qty3601;  // const Record v8::Isolate::CreateParams
struct _qty3602;  // mut FunctionProto v8::Isolate *(const v8::Isolate::CreateParams &)
struct _qty3603;  // mut Typedef v8::Isolate::AbortOnUncaughtExceptionCallback
struct _qty3604;  // mut Pointer bool (*)(v8::Isolate *)
struct _qty3605;  // mut FunctionProto void (v8::Isolate::AbortOnUncaughtExceptionCallback)
struct _qty3606;  // mut FunctionProto void (v8::HostImportModuleDynamicallyCallback)
struct _qty3607;  // mut FunctionProto void (v8::HostInitializeImportMetaObjectCallback)
struct _qty3608;  // mut FunctionProto void (v8::PrepareStackTraceCallback)
struct _qty3609;  // mut FunctionProto void (v8::MemoryPressureLevel)
struct _qty3610;  // mut FunctionProto void (uint32_t, void *)
struct _qty3611;  // mut FunctionProto void *(uint32_t)
struct _qty3612;  // mut TemplateTypeParm T
struct _qty3613;  // mut FunctionProto MaybeLocal<T> (size_t)
struct _qty3614;  // mut TemplateSpecialization MaybeLocal<T>
struct _qty3615;  // mut FunctionProto void (v8::HeapStatistics *)
struct _qty3616;  // mut FunctionProto bool (v8::HeapSpaceStatistics *, size_t)
struct _qty3617;  // mut FunctionProto bool (v8::HeapObjectStatistics *, size_t)
struct _qty3618;  // mut FunctionProto bool (v8::HeapCodeStatistics *)
struct _qty3619;  // mut FunctionProto void (const v8::RegisterState &, void **, size_t, v8::SampleInfo *)
struct _qty3620;  // mut LValueReference const v8::RegisterState &
struct _qty3621;  // const Record v8::RegisterState
struct _qty3622;  // mut Pointer v8::SampleInfo *
struct _qty3623;  // mut FunctionProto int64_t (int64_t)
struct _qty3624;  // mut FunctionProto v8::HeapProfiler *()
struct _qty3625;  // mut Pointer v8::HeapProfiler *
struct _qty3626;  // mut FunctionProto ArrayBuffer::Allocator *()
struct _qty3627;  // mut FunctionProto Local<v8::Context> ()
struct _qty3628;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3629;  // mut FunctionProto Local<v8::Context> ()
struct _qty3630;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3631;  // mut FunctionProto Local<v8::Context> ()
struct _qty3632;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3633;  // mut FunctionProto Local<v8::Context> ()
struct _qty3634;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3635;  // mut FunctionProto Local<v8::Value> (Local<v8::Value>)
struct _qty3636;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3637;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3638;  // mut Typedef v8::Isolate::GCCallback
struct _qty3639;  // mut FunctionProto void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _qty3640;  // mut Pointer void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags)
struct _qty3641;  // mut Typedef v8::Isolate::GCCallbackWithData
struct _qty3642;  // mut FunctionProto void (v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _qty3643;  // mut Pointer void (*)(v8::Isolate *, v8::GCType, v8::GCCallbackFlags, void *)
struct _qty3644;  // mut FunctionProto void (v8::Isolate::GCCallbackWithData, void *, v8::GCType)
struct _qty3645;  // mut FunctionProto void (v8::Isolate::GCCallback, v8::GCType)
struct _qty3646;  // mut FunctionProto void (v8::Isolate::GCCallbackWithData, void *)
struct _qty3647;  // mut FunctionProto void (v8::Isolate::GCCallback)
struct _qty3648;  // mut FunctionProto void (v8::EmbedderHeapTracer *)
struct _qty3649;  // mut FunctionProto v8::EmbedderHeapTracer *()
struct _qty3650;  // mut Enum v8::Isolate::AtomicsWaitEvent
struct _qty3651;  // mut Record v8::Isolate::AtomicsWaitWakeHandle
struct _qty3652;  // mut Pointer v8::Isolate::AtomicsWaitWakeHandle *
struct _qty3653;  // mut Typedef v8::Isolate::AtomicsWaitCallback
struct _qty3654;  // mut TemplateSpecialization Local<v8::SharedArrayBuffer>
struct _qty3655;  // mut FunctionProto void (v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _qty3656;  // mut Pointer void (*)(v8::Isolate::AtomicsWaitEvent, Local<v8::SharedArrayBuffer>, size_t, int64_t, double, v8::Isolate::AtomicsWaitWakeHandle *, void *)
struct _qty3657;  // mut FunctionProto void (v8::Isolate::AtomicsWaitCallback, void *)
struct _qty3658;  // mut Typedef v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback
struct _qty3659;  // mut Pointer size_t (*)()
struct _qty3660;  // mut FunctionProto void (v8::Isolate::GetExternallyAllocatedMemoryInBytesCallback)
struct _qty3661;  // mut FunctionProto void (v8::InterruptCallback, void *)
struct _qty3662;  // mut FunctionProto void (v8::Isolate::GarbageCollectionType)
struct _qty3663;  // mut FunctionProto void (v8::LogEventCallback)
struct _qty3664;  // mut FunctionProto void (v8::BeforeCallEnteredCallback)
struct _qty3665;  // mut FunctionProto void (v8::CallCompletedCallback)
struct _qty3666;  // mut FunctionProto void (v8::PromiseHook)
struct _qty3667;  // mut FunctionProto void (v8::PromiseRejectCallback)
struct _qty3668;  // mut FunctionProto void (Local<v8::Function>)
struct _qty3669;  // mut TemplateSpecialization Local<v8::Function>
struct _qty3670;  // mut FunctionProto void (v8::MicrotaskCallback, void *)
struct _qty3671;  // mut FunctionProto void (v8::MicrotasksPolicy)
struct _qty3672;  // mut FunctionProto v8::MicrotasksPolicy () const
struct _qty3673;  // mut Pointer const v8::Isolate *
struct _qty3674;  // mut FunctionProto void (v8::MicrotasksCompletedCallback)
struct _qty3675;  // mut FunctionProto void (v8::Isolate::UseCounterCallback)
struct _qty3676;  // mut FunctionProto void (v8::CounterLookupCallback)
struct _qty3677;  // mut FunctionProto void (v8::CreateHistogramCallback)
struct _qty3678;  // mut FunctionProto void (v8::AddHistogramSampleCallback)
struct _qty3679;  // mut FunctionProto int (bool)
struct _qty3680;  // mut FunctionProto void (v8::RAILMode)
struct _qty3681;  // mut FunctionProto void (v8::JitCodeEventOptions, v8::JitCodeEventHandler)
struct _qty3682;  // mut FunctionProto void (uintptr_t)
struct _qty3683;  // mut FunctionProto void (void **, size_t *)
struct _qty3684;  // mut FunctionProto v8::UnwindState ()
struct _qty3685;  // mut FunctionProto void (v8::FatalErrorCallback)
struct _qty3686;  // mut FunctionProto void (v8::OOMErrorCallback)
struct _qty3687;  // mut FunctionProto void (v8::NearHeapLimitCallback, void *)
struct _qty3688;  // mut FunctionProto void (v8::NearHeapLimitCallback, size_t)
struct _qty3689;  // mut FunctionProto void (v8::AllowCodeGenerationFromStringsCallback)
struct _qty3690;  // mut FunctionProto void (v8::AllowWasmCodeGenerationCallback)
struct _qty3691;  // mut FunctionProto void (v8::ExtensionCallback)
struct _qty3692;  // mut FunctionProto void (v8::WasmStreamingCallback)
struct _qty3693;  // mut FunctionProto void (v8::WasmThreadsEnabledCallback)
struct _qty3694;  // mut FunctionProto bool (v8::MessageCallback, Local<v8::Value>)
struct _qty3695;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3696;  // mut FunctionProto bool (v8::MessageCallback, int, Local<v8::Value>)
struct _qty3697;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3698;  // mut FunctionProto void (v8::MessageCallback)
struct _qty3699;  // mut FunctionProto void (v8::FailedAccessCheckCallback)
struct _qty3700;  // mut FunctionProto void (bool, int, StackTrace::StackTraceOptions)
struct _qty3701;  // mut Elaborated StackTrace::StackTraceOptions
struct _qty3702;  // mut FunctionProto void (v8::ExternalResourceVisitor *)
struct _qty3703;  // mut FunctionProto void (v8::PersistentHandleVisitor *)
struct _qty3704;  // mut Enum v8::Isolate::TimeZoneDetection
struct _qty3705;  // mut FunctionProto void (v8::Isolate::TimeZoneDetection)
struct _qty3706;  // mut FunctionProto void ()
struct _qty3707;  // mut FunctionProto void (const v8::Isolate &)
struct _qty3708;  // mut LValueReference const v8::Isolate &
struct _qty3709;  // const Record v8::Isolate
struct _qty3710;  // mut FunctionProto v8::Isolate &(const v8::Isolate &)
struct _qty3711;  // mut LValueReference v8::Isolate &
struct _qty3712;  // mut FunctionProto void (void *, size_t) noexcept
struct _qty3713;  // mut Pointer const v8::StartupData *
struct _qty3714;  // mut Typedef v8::EntropySource
struct _qty3715;  // mut Pointer unsigned char *
struct _qty3716;  // mut FunctionProto bool (unsigned char *, size_t)
struct _qty3717;  // mut Pointer bool (*)(unsigned char *, size_t)
struct _qty3718;  // mut Typedef v8::ReturnAddressLocationResolver
struct _qty3719;  // mut FunctionProto uintptr_t (uintptr_t)
struct _qty3720;  // mut Pointer uintptr_t (*)(uintptr_t)
struct _qty3721;  // mut Record v8::V8
struct _qty3722;  // mut FunctionProto void (v8::StartupData *)
struct _qty3723;  // mut FunctionProto void (v8::DcheckErrorCallback)
struct _qty3724;  // mut FunctionProto void (const char *, size_t)
struct _qty3725;  // mut FunctionProto void (int *, char **, bool)
struct _qty3726;  // mut Pointer char **
struct _qty3727;  // mut FunctionProto void (v8::EntropySource)
struct _qty3728;  // mut FunctionProto void (v8::ReturnAddressLocationResolver)
struct _qty3729;  // mut FunctionProto bool (const char *)
struct _qty3730;  // mut FunctionProto bool (const char *, const char *)
struct _qty3731;  // mut FunctionProto void (v8::Platform *)
struct _qty3732;  // mut Pointer v8::Platform *
struct _qty3733;  // mut FunctionProto bool (bool)
struct _qty3734;  // mut FunctionProto void (v8::UnhandledExceptionCallback)
struct _qty3735;  // mut Record v8::SnapshotCreator
struct _qty3736;  // mut Enum v8::SnapshotCreator::FunctionCodeHandling
struct _qty3737;  // mut FunctionProto void (v8::Isolate *, const intptr_t *, v8::StartupData *)
struct _qty3738;  // mut Pointer v8::SnapshotCreator *
struct _qty3739;  // mut FunctionProto void (const intptr_t *, v8::StartupData *)
struct _qty3740;  // mut FunctionProto void ()
struct _qty3741;  // mut FunctionProto void (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _qty3742;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3743;  // mut FunctionProto size_t (Local<v8::Context>, v8::SerializeInternalFieldsCallback)
struct _qty3744;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3745;  // mut FunctionProto size_t (Local<v8::Template>)
struct _qty3746;  // mut TemplateSpecialization Local<v8::Template>
struct _qty3747;  // mut TemplateTypeParm T
struct _qty3748;  // mut FunctionProto size_t (Local<v8::Context>, Local<T>)
struct _qty3749;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3750;  // mut TemplateSpecialization Local<T>
struct _qty3751;  // mut TemplateTypeParm T
struct _qty3752;  // mut FunctionProto size_t (Local<T>)
struct _qty3753;  // mut TemplateSpecialization Local<T>
struct _qty3754;  // mut FunctionProto v8::StartupData (v8::SnapshotCreator::FunctionCodeHandling)
struct _qty3755;  // mut FunctionProto void (const v8::SnapshotCreator &)
struct _qty3756;  // mut LValueReference const v8::SnapshotCreator &
struct _qty3757;  // const Record v8::SnapshotCreator
struct _qty3758;  // mut TemplateTypeParm T
struct _qty3759;  // mut Pointer const Maybe<T> *
struct _qty3760;  // mut FunctionProto T () const
struct _qty3761;  // mut FunctionProto bool (T *) const
struct _qty3762;  // mut Pointer T *
struct _qty3763;  // mut FunctionProto T (const T &) const
struct _qty3764;  // mut LValueReference const T &
struct _qty3765;  // const TemplateTypeParm T
struct _qty3766;  // mut FunctionProto bool (const Maybe<T> &) const
struct _qty3767;  // mut LValueReference const Maybe<T> &
struct _qty3768;  // const InjectedClassName Maybe<T>
struct _qty3769;  // mut TemplateTypeParm T
struct _qty3770;  // mut FunctionProto Maybe<T> ()
struct _qty3771;  // mut TemplateSpecialization Maybe<T>
struct _qty3772;  // mut TemplateTypeParm T
struct _qty3773;  // mut FunctionProto Maybe<T> (const T &)
struct _qty3774;  // mut TemplateSpecialization Maybe<T>
struct _qty3775;  // mut LValueReference const T &
struct _qty3776;  // const TemplateTypeParm T
struct _qty3777;  // mut Record v8::Maybe<void>
struct _qty3778;  // mut Pointer const v8::Maybe<void> *
struct _qty3779;  // mut FunctionProto bool (const v8::Maybe<void> &) const
struct _qty3780;  // mut LValueReference const v8::Maybe<void> &
struct _qty3781;  // const Record v8::Maybe<void>
struct _qty3782;  // mut FunctionProto void (const v8::Maybe<void> &)
struct _qty3783;  // mut Pointer v8::Maybe<void> *
struct _qty3784;  // mut FunctionProto void (v8::Maybe<void> &&) noexcept
struct _qty3785;  // mut RValueReference v8::Maybe<void> &&
struct _qty3786;  // mut FunctionProto Maybe<void> ()
struct _qty3787;  // mut TemplateSpecialization Maybe<void>
struct _qty3788;  // mut Record v8::TryCatch
struct _qty3789;  // mut Pointer v8::TryCatch *
struct _qty3790;  // mut FunctionProto void ()
struct _qty3791;  // mut Pointer const v8::TryCatch *
struct _qty3792;  // mut FunctionProto Local<v8::Value> ()
struct _qty3793;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3794;  // mut FunctionProto Local<v8::Value> () const
struct _qty3795;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3796;  // mut FunctionProto MaybeLocal<v8::Value> (Local<v8::Context>) const
struct _qty3797;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty3798;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3799;  // mut FunctionProto Local<v8::Message> () const
struct _qty3800;  // mut TemplateSpecialization Local<v8::Message>
struct _qty3801;  // mut FunctionProto void *(v8::TryCatch *)
struct _qty3802;  // mut FunctionProto void (const v8::TryCatch &)
struct _qty3803;  // mut LValueReference const v8::TryCatch &
struct _qty3804;  // const Record v8::TryCatch
struct _qty3805;  // mut Record v8::ExtensionConfiguration
struct _qty3806;  // mut Pointer v8::ExtensionConfiguration *
struct _qty3807;  // mut FunctionProto void (int, const char **)
struct _qty3808;  // mut Decayed const char **
struct _qty3809;  // mut Pointer const v8::ExtensionConfiguration *
struct _qty3810;  // mut FunctionProto Local<v8::Object> ()
struct _qty3811;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3812;  // mut Pointer v8::Context *
struct _qty3813;  // mut FunctionProto Local<v8::Context> (v8::Isolate *, v8::ExtensionConfiguration *, MaybeLocal<v8::ObjectTemplate>, MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue *)
struct _qty3814;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3815;  // mut TemplateSpecialization MaybeLocal<v8::ObjectTemplate>
struct _qty3816;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty3817;  // mut FunctionProto MaybeLocal<v8::Context> (v8::Isolate *, size_t, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration *, MaybeLocal<v8::Value>, v8::MicrotaskQueue *)
struct _qty3818;  // mut TemplateSpecialization MaybeLocal<v8::Context>
struct _qty3819;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty3820;  // mut FunctionProto MaybeLocal<v8::Object> (v8::Isolate *, Local<v8::ObjectTemplate>, MaybeLocal<v8::Value>)
struct _qty3821;  // mut TemplateSpecialization MaybeLocal<v8::Object>
struct _qty3822;  // mut TemplateSpecialization Local<v8::ObjectTemplate>
struct _qty3823;  // mut TemplateSpecialization MaybeLocal<v8::Value>
struct _qty3824;  // mut FunctionProto void (Local<v8::Value>)
struct _qty3825;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3826;  // mut FunctionProto Local<v8::Value> ()
struct _qty3827;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3828;  // mut Enum v8::Context::EmbedderDataFields
struct _qty3829;  // mut FunctionProto Local<v8::Value> (int)
struct _qty3830;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3831;  // mut FunctionProto Local<v8::Object> ()
struct _qty3832;  // mut TemplateSpecialization Local<v8::Object>
struct _qty3833;  // mut FunctionProto void (int, Local<v8::Value>)
struct _qty3834;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3835;  // mut FunctionProto void (Local<v8::String>)
struct _qty3836;  // mut TemplateSpecialization Local<v8::String>
struct _qty3837;  // mut TemplateTypeParm T
struct _qty3838;  // mut FunctionProto MaybeLocal<T> (size_t)
struct _qty3839;  // mut TemplateSpecialization MaybeLocal<T>
struct _qty3840;  // mut Typedef v8::Context::AbortScriptExecutionCallback
struct _qty3841;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3842;  // mut FunctionProto void (v8::Isolate *, Local<v8::Context>)
struct _qty3843;  // mut Pointer void (*)(v8::Isolate *, Local<v8::Context>)
struct _qty3844;  // mut FunctionProto void (v8::Context::AbortScriptExecutionCallback)
struct _qty3845;  // mut Record v8::Context::Scope
struct _qty3846;  // mut FunctionProto void (Local<v8::Context>)
struct _qty3847;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3848;  // mut Pointer v8::Context::Scope *
struct _qty3849;  // mut Record v8::Context::BackupIncumbentScope
struct _qty3850;  // mut FunctionProto void (Local<v8::Context>)
struct _qty3851;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3852;  // mut Pointer v8::Context::BackupIncumbentScope *
struct _qty3853;  // mut FunctionProto void ()
struct _qty3854;  // mut FunctionProto uintptr_t () const
struct _qty3855;  // mut Pointer const v8::Context::BackupIncumbentScope *
struct _qty3856;  // mut Record v8::Unlocker
struct _qty3857;  // mut Pointer v8::Unlocker *
struct _qty3858;  // mut FunctionProto void ()
struct _qty3859;  // mut Record v8::Locker
struct _qty3860;  // mut Pointer v8::Locker *
struct _qty3861;  // mut FunctionProto void ()
struct _qty3862;  // mut FunctionProto void (const v8::Locker &)
struct _qty3863;  // mut LValueReference const v8::Locker &
struct _qty3864;  // const Record v8::Locker
struct _qty3865;  // mut Record v8::Unwinder
struct _qty3866;  // mut FunctionProto bool (const v8::UnwindState &, v8::RegisterState *, const void *)
struct _qty3867;  // mut LValueReference const v8::UnwindState &
struct _qty3868;  // const Record v8::UnwindState
struct _qty3869;  // mut FunctionProto bool (const v8::UnwindState &, void *)
struct _qty3870;  // mut TemplateSpecialization Local<T>
struct _qty3871;  // mut LValueReference const PersistentBase<T> &
struct _qty3872;  // const TemplateSpecialization PersistentBase<T>
struct _qty3873;  // mut TemplateSpecialization PersistentBase<T>
struct _qty3874;  // mut LValueReference const TracedGlobal<T> &
struct _qty3875;  // const TemplateSpecialization TracedGlobal<T>
struct _qty3876;  // mut TemplateSpecialization TracedGlobal<T>
struct _qty3877;  // mut TemplateTypeParm S
struct _qty3878;  // mut TemplateSpecialization Local<S>
struct _qty3879;  // mut TemplateTypeParm S
struct _qty3880;  // mut LValueReference const Local<S> &
struct _qty3881;  // const TemplateSpecialization Local<S>
struct _qty3882;  // mut TemplateSpecialization Local<S>
struct _qty3883;  // mut TemplateTypeParm S
struct _qty3884;  // mut LValueReference const PersistentBase<S> &
struct _qty3885;  // const TemplateSpecialization PersistentBase<S>
struct _qty3886;  // mut TemplateSpecialization PersistentBase<S>
struct _qty3887;  // mut TemplateTypeParm P
struct _qty3888;  // mut Pointer P *
struct _qty3889;  // mut DependentName typename WeakCallbackInfo<P>::Callback
struct _qty3890;  // mut TemplateTypeParm P
struct _qty3891;  // mut TemplateTypeParm S
struct _qty3892;  // mut RValueReference Global<S> &&
struct _qty3893;  // mut TemplateSpecialization Global<S>
struct _qty3894;  // mut TemplateTypeParm S
struct _qty3895;  // mut LValueReference const Local<S> &
struct _qty3896;  // const TemplateSpecialization Local<S>
struct _qty3897;  // mut TemplateSpecialization Local<S>
struct _qty3898;  // mut TemplateTypeParm S
struct _qty3899;  // mut RValueReference TracedGlobal<S> &&
struct _qty3900;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty3901;  // mut Elaborated typename WeakCallbackInfo<void>::Callback
struct _qty3902;  // mut TemplateTypeParm S
struct _qty3903;  // mut LValueReference const Global<S> &
struct _qty3904;  // const TemplateSpecialization Global<S>
struct _qty3905;  // mut TemplateSpecialization Global<S>
struct _qty3906;  // mut TemplateTypeParm S
struct _qty3907;  // mut LValueReference const TracedGlobal<S> &
struct _qty3908;  // const TemplateSpecialization TracedGlobal<S>
struct _qty3909;  // mut TemplateSpecialization TracedGlobal<S>
struct _qty3910;  // mut TemplateTypeParm S
struct _qty3911;  // const TemplateSpecialization Local<S>
struct _qty3912;  // mut TemplateSpecialization Local<S>
struct _qty3913;  // mut TemplateTypeParm S
struct _qty3914;  // mut Pointer S *
struct _qty3915;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3916;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty3917;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty3918;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty3919;  // mut TemplateSpecialization Local<v8::Integer>
struct _qty3920;  // mut TemplateSpecialization Local<v8::Value>
struct _qty3921;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty3922;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty3923;  // mut TemplateSpecialization Local<v8::Boolean>
struct _qty3924;  // mut TemplateSpecialization Local<v8::PrimitiveArray>
struct _qty3925;  // mut TemplateSpecialization Local<v8::String>
struct _qty3926;  // mut TemplateSpecialization Local<v8::String>
struct _qty3927;  // mut TemplateSpecialization Local<v8::Data>
struct _qty3928;  // mut Pointer String::Encoding *
struct _qty3929;  // mut TemplateTypeParm T
struct _qty3930;  // mut Pointer T *
struct _qty3931;  // mut TemplateTypeParm T
struct _qty3932;  // mut TemplateTypeParm T
struct _qty3933;  // mut TemplateTypeParm T
struct _qty3934;  // mut TemplateSpecialization Local<v8::Context>
struct _qty3935;  // mut TemplateSpecialization Local<T>
struct _qty3936;  // mut TemplateTypeParm T
struct _qty3937;  // mut TemplateSpecialization Local<T>
struct _d1; // Namespace v8
struct _d2; // CXXRecord Context
struct _d3; // CXXRecord Data
struct _d4; // CXXRecord Isolate
struct _d5; // CXXRecord AccessorSignature
struct _d6; // CXXRecord Array
struct _d7; // CXXRecord ArrayBuffer
struct _d8; // CXXRecord BigInt
struct _d9; // CXXRecord BigIntObject
struct _d10; // CXXRecord Boolean
struct _d11; // CXXRecord BooleanObject
struct _d12; // CXXRecord Date
struct _d13; // CXXRecord External
struct _d14; // CXXRecord Function
struct _d15; // CXXRecord FunctionTemplate
struct _d16; // CXXRecord HeapProfiler
struct _d17; // CXXRecord ImplementationUtilities
struct _d18; // CXXRecord Int32
struct _d19; // CXXRecord Integer
struct _d20; // ClassTemplate Maybe
struct _d21; // TemplateTypeParm T
struct _d22; // CXXRecord Maybe
struct _d23; // ClassTemplateSpecialization Maybe
struct _d24; // ClassTemplateSpecialization Maybe
struct _d25; // ClassTemplateSpecialization Maybe
struct _d26; // ClassTemplateSpecialization Maybe
struct _d27; // ClassTemplateSpecialization Maybe
struct _d28; // ClassTemplateSpecialization Maybe
struct _d29; // CXXRecord MicrotaskQueue
struct _d30; // CXXRecord Name
struct _d31; // CXXRecord Number
struct _d32; // CXXRecord NumberObject
struct _d33; // CXXRecord Object
struct _d34; // CXXRecord ObjectOperationDescriptor
struct _d35; // CXXRecord ObjectTemplate
struct _d36; // CXXRecord Platform
struct _d37; // CXXRecord Primitive
struct _d38; // CXXRecord Promise
struct _d39; // CXXRecord PropertyDescriptor
struct _d40; // CXXRecord Proxy
struct _d41; // CXXRecord RawOperationDescriptor
struct _d42; // CXXRecord Script
struct _d43; // CXXRecord SharedArrayBuffer
struct _d44; // CXXRecord Signature
struct _d45; // CXXRecord StartupData
struct _d46; // CXXRecord StackFrame
struct _d47; // CXXRecord StackTrace
struct _d48; // CXXRecord String
struct _d49; // CXXRecord StringObject
struct _d50; // CXXRecord Symbol
struct _d51; // CXXRecord SymbolObject
struct _d52; // CXXRecord PrimitiveArray
struct _d53; // CXXRecord Private
struct _d54; // CXXRecord Uint32
struct _d55; // CXXRecord Utils
struct _d56; // CXXRecord Value
struct _d57; // CXXRecord WasmModuleObject
struct _d58; // ClassTemplate Local
struct _d59; // TemplateTypeParm T
struct _d60; // CXXRecord Local
struct _d61; // ClassTemplateSpecialization Local
struct _d62; // CXXConstructor Local
struct _d63; // FunctionTemplate Local
struct _d64; // TemplateTypeParm S
struct _d65; // CXXConstructor Local
struct _d66; // ParmVar that
struct _d67; // CXXConstructor Local
struct _d68; // ParmVar that
struct _d69; // CXXMethod IsEmpty
struct _d70; // CXXMethod Clear
struct _d71; // CXXMethod operator->
struct _d72; // CXXMethod operator*
struct _d73; // FunctionTemplate operator==
struct _d74; // TemplateTypeParm S
struct _d75; // CXXMethod operator==
struct _d76; // ParmVar that
struct _d77; // FunctionTemplate operator==
struct _d78; // TemplateTypeParm S
struct _d79; // CXXMethod operator==
struct _d80; // ParmVar that
struct _d81; // FunctionTemplate operator!=
struct _d82; // TemplateTypeParm S
struct _d83; // CXXMethod operator!=
struct _d84; // ParmVar that
struct _d85; // FunctionTemplate operator!=
struct _d86; // TemplateTypeParm S
struct _d87; // CXXMethod operator!=
struct _d88; // ParmVar that
struct _d89; // FunctionTemplate Cast
struct _d90; // TemplateTypeParm S
struct _d91; // CXXMethod Cast
struct _d92; // ParmVar that
struct _d93; // FunctionTemplate As
struct _d94; // TemplateTypeParm S
struct _d95; // CXXMethod As
struct _d96; // CXXMethod New
struct _d97; // ParmVar isolate
struct _d98; // ParmVar that
struct _d99; // CXXMethod New
struct _d100; // ClassTemplateSpecialization PersistentBase
struct _d101; // ParmVar isolate
struct _d102; // ParmVar that
struct _d103; // CXXMethod New
struct _d104; // ClassTemplateSpecialization TracedGlobal
struct _d105; // ParmVar isolate
struct _d106; // ParmVar that
struct _d107; // CXXConstructor Local
struct _d108; // ParmVar 
struct _d109; // CXXConstructor Local
struct _d110; // ParmVar 
struct _d111; // CXXDestructor ~Local
struct _d112; // ClassTemplateSpecialization Local
struct _d113; // CXXConstructor Local
struct _d114; // FunctionTemplate Local
struct _d115; // TemplateTypeParm S
struct _d116; // CXXConstructor Local
struct _d117; // ParmVar that
struct _d118; // CXXConstructor Local
struct _d119; // ParmVar that
struct _d120; // CXXMethod IsEmpty
struct _d121; // CXXMethod Clear
struct _d122; // CXXMethod operator->
struct _d123; // CXXMethod operator*
struct _d124; // FunctionTemplate operator==
struct _d125; // TemplateTypeParm S
struct _d126; // CXXMethod operator==
struct _d127; // ParmVar that
struct _d128; // FunctionTemplate operator==
struct _d129; // TemplateTypeParm S
struct _d130; // CXXMethod operator==
struct _d131; // ParmVar that
struct _d132; // FunctionTemplate operator!=
struct _d133; // TemplateTypeParm S
struct _d134; // CXXMethod operator!=
struct _d135; // ParmVar that
struct _d136; // FunctionTemplate operator!=
struct _d137; // TemplateTypeParm S
struct _d138; // CXXMethod operator!=
struct _d139; // ParmVar that
struct _d140; // FunctionTemplate Cast
struct _d141; // TemplateTypeParm S
struct _d142; // CXXMethod Cast
struct _d143; // ParmVar that
struct _d144; // FunctionTemplate As
struct _d145; // TemplateTypeParm S
struct _d146; // CXXMethod As
struct _d147; // CXXMethod New
struct _d148; // ParmVar isolate
struct _d149; // ParmVar that
struct _d150; // CXXMethod New
struct _d151; // ClassTemplateSpecialization PersistentBase
struct _d152; // ParmVar isolate
struct _d153; // ParmVar that
struct _d154; // CXXMethod New
struct _d155; // ClassTemplateSpecialization TracedGlobal
struct _d156; // ParmVar isolate
struct _d157; // ParmVar that
struct _d158; // CXXConstructor Local
struct _d159; // ParmVar 
struct _d160; // CXXConstructor Local
struct _d161; // ParmVar 
struct _d162; // CXXDestructor ~Local
struct _d163; // ClassTemplateSpecialization Local
struct _d164; // CXXConstructor Local
struct _d165; // FunctionTemplate Local
struct _d166; // TemplateTypeParm S
struct _d167; // CXXConstructor Local
struct _d168; // ParmVar that
struct _d169; // CXXConstructor Local
struct _d170; // ParmVar that
struct _d171; // CXXMethod IsEmpty
struct _d172; // CXXMethod Clear
struct _d173; // CXXMethod operator->
struct _d174; // CXXMethod operator*
struct _d175; // FunctionTemplate operator==
struct _d176; // TemplateTypeParm S
struct _d177; // CXXMethod operator==
struct _d178; // ParmVar that
struct _d179; // FunctionTemplate operator==
struct _d180; // TemplateTypeParm S
struct _d181; // CXXMethod operator==
struct _d182; // ParmVar that
struct _d183; // FunctionTemplate operator!=
struct _d184; // TemplateTypeParm S
struct _d185; // CXXMethod operator!=
struct _d186; // ParmVar that
struct _d187; // FunctionTemplate operator!=
struct _d188; // TemplateTypeParm S
struct _d189; // CXXMethod operator!=
struct _d190; // ParmVar that
struct _d191; // FunctionTemplate Cast
struct _d192; // TemplateTypeParm S
struct _d193; // CXXMethod Cast
struct _d194; // ParmVar that
struct _d195; // FunctionTemplate As
struct _d196; // TemplateTypeParm S
struct _d197; // CXXMethod As
struct _d198; // CXXMethod New
struct _d199; // ParmVar isolate
struct _d200; // ParmVar that
struct _d201; // CXXMethod New
struct _d202; // ClassTemplateSpecialization PersistentBase
struct _d203; // ParmVar isolate
struct _d204; // ParmVar that
struct _d205; // CXXMethod New
struct _d206; // ClassTemplateSpecialization TracedGlobal
struct _d207; // ParmVar isolate
struct _d208; // ParmVar that
struct _d209; // CXXConstructor Local
struct _d210; // ParmVar 
struct _d211; // CXXConstructor Local
struct _d212; // ParmVar 
struct _d213; // CXXDestructor ~Local
struct _d214; // CXXMethod operator=
struct _d215; // ParmVar 
struct _d216; // CXXMethod operator=
struct _d217; // ParmVar 
struct _d218; // ClassTemplateSpecialization Local
struct _d219; // CXXConstructor Local
struct _d220; // FunctionTemplate Local
struct _d221; // TemplateTypeParm S
struct _d222; // CXXConstructor Local
struct _d223; // ParmVar that
struct _d224; // CXXConstructor Local
struct _d225; // ParmVar that
struct _d226; // CXXMethod IsEmpty
struct _d227; // CXXMethod Clear
struct _d228; // CXXMethod operator->
struct _d229; // CXXMethod operator*
struct _d230; // FunctionTemplate operator==
struct _d231; // TemplateTypeParm S
struct _d232; // CXXMethod operator==
struct _d233; // ParmVar that
struct _d234; // FunctionTemplate operator==
struct _d235; // TemplateTypeParm S
struct _d236; // CXXMethod operator==
struct _d237; // ParmVar that
struct _d238; // FunctionTemplate operator!=
struct _d239; // TemplateTypeParm S
struct _d240; // CXXMethod operator!=
struct _d241; // ParmVar that
struct _d242; // FunctionTemplate operator!=
struct _d243; // TemplateTypeParm S
struct _d244; // CXXMethod operator!=
struct _d245; // ParmVar that
struct _d246; // FunctionTemplate Cast
struct _d247; // TemplateTypeParm S
struct _d248; // CXXMethod Cast
struct _d249; // ParmVar that
struct _d250; // FunctionTemplate As
struct _d251; // TemplateTypeParm S
struct _d252; // CXXMethod As
struct _d253; // CXXMethod New
struct _d254; // ParmVar isolate
struct _d255; // ParmVar that
struct _d256; // CXXMethod New
struct _d257; // ClassTemplateSpecialization PersistentBase
struct _d258; // ParmVar isolate
struct _d259; // ParmVar that
struct _d260; // CXXMethod New
struct _d261; // ClassTemplateSpecialization TracedGlobal
struct _d262; // ParmVar isolate
struct _d263; // ParmVar that
struct _d264; // CXXConstructor Local
struct _d265; // ParmVar 
struct _d266; // CXXConstructor Local
struct _d267; // ParmVar 
struct _d268; // CXXDestructor ~Local
struct _d269; // CXXMethod operator=
struct _d270; // ParmVar 
struct _d271; // CXXMethod operator=
struct _d272; // ParmVar 
struct _d273; // ClassTemplateSpecialization Local
struct _d274; // CXXConstructor Local
struct _d275; // FunctionTemplate Local
struct _d276; // TemplateTypeParm S
struct _d277; // CXXConstructor Local
struct _d278; // ParmVar that
struct _d279; // CXXConstructor Local
struct _d280; // ParmVar that
struct _d281; // CXXMethod IsEmpty
struct _d282; // CXXMethod Clear
struct _d283; // CXXMethod operator->
struct _d284; // CXXMethod operator*
struct _d285; // FunctionTemplate operator==
struct _d286; // TemplateTypeParm S
struct _d287; // CXXMethod operator==
struct _d288; // ParmVar that
struct _d289; // FunctionTemplate operator==
struct _d290; // TemplateTypeParm S
struct _d291; // CXXMethod operator==
struct _d292; // ParmVar that
struct _d293; // FunctionTemplate operator!=
struct _d294; // TemplateTypeParm S
struct _d295; // CXXMethod operator!=
struct _d296; // ParmVar that
struct _d297; // FunctionTemplate operator!=
struct _d298; // TemplateTypeParm S
struct _d299; // CXXMethod operator!=
struct _d300; // ParmVar that
struct _d301; // FunctionTemplate Cast
struct _d302; // TemplateTypeParm S
struct _d303; // CXXMethod Cast
struct _d304; // ParmVar that
struct _d305; // FunctionTemplate As
struct _d306; // TemplateTypeParm S
struct _d307; // CXXMethod As
struct _d308; // CXXMethod New
struct _d309; // ParmVar isolate
struct _d310; // ParmVar that
struct _d311; // CXXMethod New
struct _d312; // ClassTemplateSpecialization PersistentBase
struct _d313; // ParmVar isolate
struct _d314; // ParmVar that
struct _d315; // CXXMethod New
struct _d316; // ClassTemplateSpecialization TracedGlobal
struct _d317; // ParmVar isolate
struct _d318; // ParmVar that
struct _d319; // CXXConstructor Local
struct _d320; // ParmVar 
struct _d321; // CXXConstructor Local
struct _d322; // ParmVar 
struct _d323; // CXXDestructor ~Local
struct _d324; // CXXMethod operator=
struct _d325; // ParmVar 
struct _d326; // CXXMethod operator=
struct _d327; // ParmVar 
struct _d328; // ClassTemplateSpecialization Local
struct _d329; // ClassTemplateSpecialization Local
struct _d330; // CXXConstructor Local
struct _d331; // FunctionTemplate Local
struct _d332; // TemplateTypeParm S
struct _d333; // CXXConstructor Local
struct _d334; // ParmVar that
struct _d335; // CXXConstructor Local
struct _d336; // ParmVar that
struct _d337; // CXXMethod IsEmpty
struct _d338; // CXXMethod Clear
struct _d339; // CXXMethod operator->
struct _d340; // CXXMethod operator*
struct _d341; // FunctionTemplate operator==
struct _d342; // TemplateTypeParm S
struct _d343; // CXXMethod operator==
struct _d344; // ParmVar that
struct _d345; // FunctionTemplate operator==
struct _d346; // TemplateTypeParm S
struct _d347; // CXXMethod operator==
struct _d348; // ParmVar that
struct _d349; // FunctionTemplate operator!=
struct _d350; // TemplateTypeParm S
struct _d351; // CXXMethod operator!=
struct _d352; // ParmVar that
struct _d353; // FunctionTemplate operator!=
struct _d354; // TemplateTypeParm S
struct _d355; // CXXMethod operator!=
struct _d356; // ParmVar that
struct _d357; // FunctionTemplate Cast
struct _d358; // TemplateTypeParm S
struct _d359; // CXXMethod Cast
struct _d360; // ParmVar that
struct _d361; // FunctionTemplate As
struct _d362; // TemplateTypeParm S
struct _d363; // CXXMethod As
struct _d364; // CXXMethod New
struct _d365; // ParmVar isolate
struct _d366; // ParmVar that
struct _d367; // CXXMethod New
struct _d368; // ClassTemplateSpecialization PersistentBase
struct _d369; // ParmVar isolate
struct _d370; // ParmVar that
struct _d371; // CXXMethod New
struct _d372; // ClassTemplateSpecialization TracedGlobal
struct _d373; // ParmVar isolate
struct _d374; // ParmVar that
struct _d375; // CXXConstructor Local
struct _d376; // ParmVar 
struct _d377; // CXXConstructor Local
struct _d378; // ParmVar 
struct _d379; // CXXMethod operator=
struct _d380; // ParmVar 
struct _d381; // CXXMethod operator=
struct _d382; // ParmVar 
struct _d383; // CXXDestructor ~Local
struct _d384; // ClassTemplateSpecialization Local
struct _d385; // CXXConstructor Local
struct _d386; // FunctionTemplate Local
struct _d387; // TemplateTypeParm S
struct _d388; // CXXConstructor Local
struct _d389; // ParmVar that
struct _d390; // CXXConstructor Local
struct _d391; // ParmVar that
struct _d392; // CXXMethod IsEmpty
struct _d393; // CXXMethod Clear
struct _d394; // CXXMethod operator->
struct _d395; // CXXMethod operator*
struct _d396; // FunctionTemplate operator==
struct _d397; // TemplateTypeParm S
struct _d398; // CXXMethod operator==
struct _d399; // ParmVar that
struct _d400; // FunctionTemplate operator==
struct _d401; // TemplateTypeParm S
struct _d402; // CXXMethod operator==
struct _d403; // ParmVar that
struct _d404; // FunctionTemplate operator!=
struct _d405; // TemplateTypeParm S
struct _d406; // CXXMethod operator!=
struct _d407; // ParmVar that
struct _d408; // FunctionTemplate operator!=
struct _d409; // TemplateTypeParm S
struct _d410; // CXXMethod operator!=
struct _d411; // ParmVar that
struct _d412; // FunctionTemplate Cast
struct _d413; // TemplateTypeParm S
struct _d414; // CXXMethod Cast
struct _d415; // ParmVar that
struct _d416; // FunctionTemplate As
struct _d417; // TemplateTypeParm S
struct _d418; // CXXMethod As
struct _d419; // CXXMethod New
struct _d420; // ParmVar isolate
struct _d421; // ParmVar that
struct _d422; // CXXMethod New
struct _d423; // ClassTemplateSpecialization PersistentBase
struct _d424; // ParmVar isolate
struct _d425; // ParmVar that
struct _d426; // CXXMethod New
struct _d427; // ClassTemplateSpecialization TracedGlobal
struct _d428; // ParmVar isolate
struct _d429; // ParmVar that
struct _d430; // CXXDestructor ~Local
struct _d431; // CXXConstructor Local
struct _d432; // ParmVar 
struct _d433; // CXXConstructor Local
struct _d434; // ParmVar 
struct _d435; // ClassTemplateSpecialization Local
struct _d436; // ClassTemplateSpecialization Local
struct _d437; // ClassTemplateSpecialization Local
struct _d438; // CXXConstructor Local
struct _d439; // FunctionTemplate Local
struct _d440; // TemplateTypeParm S
struct _d441; // CXXConstructor Local
struct _d442; // ParmVar that
struct _d443; // CXXMethod IsEmpty
struct _d444; // CXXMethod Clear
struct _d445; // CXXMethod operator->
struct _d446; // CXXRecord UnboundScript
struct _d447; // CXXMethod operator*
struct _d448; // FunctionTemplate operator==
struct _d449; // TemplateTypeParm S
struct _d450; // CXXMethod operator==
struct _d451; // ParmVar that
struct _d452; // FunctionTemplate operator==
struct _d453; // TemplateTypeParm S
struct _d454; // CXXMethod operator==
struct _d455; // ParmVar that
struct _d456; // FunctionTemplate operator!=
struct _d457; // TemplateTypeParm S
struct _d458; // CXXMethod operator!=
struct _d459; // ParmVar that
struct _d460; // FunctionTemplate operator!=
struct _d461; // TemplateTypeParm S
struct _d462; // CXXMethod operator!=
struct _d463; // ParmVar that
struct _d464; // FunctionTemplate Cast
struct _d465; // TemplateTypeParm S
struct _d466; // CXXMethod Cast
struct _d467; // ParmVar that
struct _d468; // FunctionTemplate As
struct _d469; // TemplateTypeParm S
struct _d470; // CXXMethod As
struct _d471; // CXXMethod New
struct _d472; // ParmVar isolate
struct _d473; // ParmVar that
struct _d474; // CXXMethod New
struct _d475; // ClassTemplateSpecialization PersistentBase
struct _d476; // ParmVar isolate
struct _d477; // ParmVar that
struct _d478; // CXXMethod New
struct _d479; // ClassTemplateSpecialization TracedGlobal
struct _d480; // ParmVar isolate
struct _d481; // ParmVar that
struct _d482; // ClassTemplateSpecialization Local
struct _d483; // ClassTemplateSpecialization Local
struct _d484; // CXXConstructor Local
struct _d485; // FunctionTemplate Local
struct _d486; // TemplateTypeParm S
struct _d487; // CXXConstructor Local
struct _d488; // ParmVar that
struct _d489; // CXXConstructor Local
struct _d490; // ParmVar that
struct _d491; // CXXMethod IsEmpty
struct _d492; // CXXMethod Clear
struct _d493; // CXXMethod operator->
struct _d494; // CXXMethod operator*
struct _d495; // FunctionTemplate operator==
struct _d496; // TemplateTypeParm S
struct _d497; // CXXMethod operator==
struct _d498; // ParmVar that
struct _d499; // FunctionTemplate operator==
struct _d500; // TemplateTypeParm S
struct _d501; // CXXMethod operator==
struct _d502; // ParmVar that
struct _d503; // FunctionTemplate operator!=
struct _d504; // TemplateTypeParm S
struct _d505; // CXXMethod operator!=
struct _d506; // ParmVar that
struct _d507; // FunctionTemplate operator!=
struct _d508; // TemplateTypeParm S
struct _d509; // CXXMethod operator!=
struct _d510; // ParmVar that
struct _d511; // FunctionTemplate Cast
struct _d512; // TemplateTypeParm S
struct _d513; // CXXMethod Cast
struct _d514; // ParmVar that
struct _d515; // FunctionTemplate As
struct _d516; // TemplateTypeParm S
struct _d517; // CXXMethod As
struct _d518; // CXXMethod New
struct _d519; // ParmVar isolate
struct _d520; // ParmVar that
struct _d521; // CXXMethod New
struct _d522; // ClassTemplateSpecialization PersistentBase
struct _d523; // ParmVar isolate
struct _d524; // ParmVar that
struct _d525; // CXXMethod New
struct _d526; // ClassTemplateSpecialization TracedGlobal
struct _d527; // ParmVar isolate
struct _d528; // ParmVar that
struct _d529; // CXXConstructor Local
struct _d530; // ParmVar 
struct _d531; // CXXConstructor Local
struct _d532; // ParmVar 
struct _d533; // CXXDestructor ~Local
struct _d534; // ClassTemplateSpecialization Local
struct _d535; // ClassTemplateSpecialization Local
struct _d536; // ClassTemplateSpecialization Local
struct _d537; // ClassTemplateSpecialization Local
struct _d538; // ClassTemplateSpecialization Local
struct _d539; // ClassTemplateSpecialization Local
struct _d540; // ClassTemplateSpecialization Local
struct _d541; // ClassTemplateSpecialization Local
struct _d542; // ClassTemplateSpecialization Local
struct _d543; // ClassTemplateSpecialization Local
struct _d544; // CXXConstructor Local
struct _d545; // FunctionTemplate Local
struct _d546; // TemplateTypeParm S
struct _d547; // CXXConstructor Local
struct _d548; // ParmVar that
struct _d549; // CXXConstructor Local
struct _d550; // ParmVar that
struct _d551; // CXXConstructor Local
struct _d552; // ParmVar that
struct _d553; // CXXMethod IsEmpty
struct _d554; // CXXMethod Clear
struct _d555; // CXXMethod operator->
struct _d556; // CXXMethod operator*
struct _d557; // FunctionTemplate operator==
struct _d558; // TemplateTypeParm S
struct _d559; // CXXMethod operator==
struct _d560; // ParmVar that
struct _d561; // FunctionTemplate operator==
struct _d562; // TemplateTypeParm S
struct _d563; // CXXMethod operator==
struct _d564; // ParmVar that
struct _d565; // FunctionTemplate operator!=
struct _d566; // TemplateTypeParm S
struct _d567; // CXXMethod operator!=
struct _d568; // ParmVar that
struct _d569; // FunctionTemplate operator!=
struct _d570; // TemplateTypeParm S
struct _d571; // CXXMethod operator!=
struct _d572; // ParmVar that
struct _d573; // FunctionTemplate Cast
struct _d574; // TemplateTypeParm S
struct _d575; // CXXMethod Cast
struct _d576; // ParmVar that
struct _d577; // FunctionTemplate As
struct _d578; // TemplateTypeParm S
struct _d579; // CXXMethod As
struct _d580; // CXXMethod New
struct _d581; // ParmVar isolate
struct _d582; // ParmVar that
struct _d583; // CXXMethod New
struct _d584; // ClassTemplateSpecialization PersistentBase
struct _d585; // ParmVar isolate
struct _d586; // ParmVar that
struct _d587; // CXXMethod New
struct _d588; // ClassTemplateSpecialization TracedGlobal
struct _d589; // ParmVar isolate
struct _d590; // ParmVar that
struct _d591; // CXXConstructor Local
struct _d592; // ParmVar 
struct _d593; // CXXConstructor Local
struct _d594; // ParmVar 
struct _d595; // CXXDestructor ~Local
struct _d596; // ClassTemplateSpecialization Local
struct _d597; // CXXConstructor Local
struct _d598; // FunctionTemplate Local
struct _d599; // TemplateTypeParm S
struct _d600; // CXXConstructor Local
struct _d601; // ParmVar that
struct _d602; // CXXConstructor Local
struct _d603; // ParmVar that
struct _d604; // CXXMethod IsEmpty
struct _d605; // CXXMethod Clear
struct _d606; // CXXMethod operator->
struct _d607; // CXXMethod operator*
struct _d608; // FunctionTemplate operator==
struct _d609; // TemplateTypeParm S
struct _d610; // CXXMethod operator==
struct _d611; // ParmVar that
struct _d612; // FunctionTemplate operator==
struct _d613; // TemplateTypeParm S
struct _d614; // CXXMethod operator==
struct _d615; // ParmVar that
struct _d616; // FunctionTemplate operator!=
struct _d617; // TemplateTypeParm S
struct _d618; // CXXMethod operator!=
struct _d619; // ParmVar that
struct _d620; // FunctionTemplate operator!=
struct _d621; // TemplateTypeParm S
struct _d622; // CXXMethod operator!=
struct _d623; // ParmVar that
struct _d624; // FunctionTemplate Cast
struct _d625; // TemplateTypeParm S
struct _d626; // CXXMethod Cast
struct _d627; // ParmVar that
struct _d628; // FunctionTemplate As
struct _d629; // TemplateTypeParm S
struct _d630; // CXXMethod As
struct _d631; // CXXMethod New
struct _d632; // ParmVar isolate
struct _d633; // ParmVar that
struct _d634; // CXXMethod New
struct _d635; // ClassTemplateSpecialization PersistentBase
struct _d636; // ParmVar isolate
struct _d637; // ParmVar that
struct _d638; // CXXMethod New
struct _d639; // ClassTemplateSpecialization TracedGlobal
struct _d640; // ParmVar isolate
struct _d641; // ParmVar that
struct _d642; // CXXConstructor Local
struct _d643; // ParmVar 
struct _d644; // CXXConstructor Local
struct _d645; // ParmVar 
struct _d646; // CXXDestructor ~Local
struct _d647; // ClassTemplateSpecialization Local
struct _d648; // ClassTemplateSpecialization Local
struct _d649; // ClassTemplateSpecialization Local
struct _d650; // ClassTemplateSpecialization Local
struct _d651; // CXXConstructor Local
struct _d652; // FunctionTemplate Local
struct _d653; // TemplateTypeParm S
struct _d654; // CXXConstructor Local
struct _d655; // ParmVar that
struct _d656; // CXXConstructor Local
struct _d657; // ParmVar that
struct _d658; // CXXMethod IsEmpty
struct _d659; // CXXMethod Clear
struct _d660; // CXXMethod operator->
struct _d661; // CXXMethod operator*
struct _d662; // FunctionTemplate operator==
struct _d663; // TemplateTypeParm S
struct _d664; // CXXMethod operator==
struct _d665; // ParmVar that
struct _d666; // FunctionTemplate operator==
struct _d667; // TemplateTypeParm S
struct _d668; // CXXMethod operator==
struct _d669; // ParmVar that
struct _d670; // FunctionTemplate operator!=
struct _d671; // TemplateTypeParm S
struct _d672; // CXXMethod operator!=
struct _d673; // ParmVar that
struct _d674; // FunctionTemplate operator!=
struct _d675; // TemplateTypeParm S
struct _d676; // CXXMethod operator!=
struct _d677; // ParmVar that
struct _d678; // FunctionTemplate Cast
struct _d679; // TemplateTypeParm S
struct _d680; // CXXMethod Cast
struct _d681; // ParmVar that
struct _d682; // FunctionTemplate As
struct _d683; // TemplateTypeParm S
struct _d684; // CXXMethod As
struct _d685; // CXXMethod New
struct _d686; // ParmVar isolate
struct _d687; // ParmVar that
struct _d688; // CXXMethod New
struct _d689; // ClassTemplateSpecialization PersistentBase
struct _d690; // ParmVar isolate
struct _d691; // ParmVar that
struct _d692; // CXXMethod New
struct _d693; // ClassTemplateSpecialization TracedGlobal
struct _d694; // ParmVar isolate
struct _d695; // ParmVar that
struct _d696; // CXXConstructor Local
struct _d697; // ParmVar 
struct _d698; // CXXConstructor Local
struct _d699; // ParmVar 
struct _d700; // ClassTemplateSpecialization Local
struct _d701; // ClassTemplateSpecialization Local
struct _d702; // ClassTemplateSpecialization Local
struct _d703; // ClassTemplateSpecialization Local
struct _d704; // ClassTemplateSpecialization Local
struct _d705; // ClassTemplateSpecialization Local
struct _d706; // ClassTemplateSpecialization Local
struct _d707; // ClassTemplateSpecialization Local
struct _d708; // ClassTemplateSpecialization Local
struct _d709; // ClassTemplateSpecialization Local
struct _d710; // ClassTemplateSpecialization Local
struct _d711; // ClassTemplateSpecialization Local
struct _d712; // ClassTemplateSpecialization Local
struct _d713; // ClassTemplateSpecialization Local
struct _d714; // CXXConstructor Local
struct _d715; // FunctionTemplate Local
struct _d716; // TemplateTypeParm S
struct _d717; // CXXConstructor Local
struct _d718; // ParmVar that
struct _d719; // CXXConstructor Local
struct _d720; // ParmVar that
struct _d721; // CXXMethod IsEmpty
struct _d722; // CXXMethod Clear
struct _d723; // CXXMethod operator->
struct _d724; // CXXMethod operator*
struct _d725; // FunctionTemplate operator==
struct _d726; // TemplateTypeParm S
struct _d727; // CXXMethod operator==
struct _d728; // ParmVar that
struct _d729; // FunctionTemplate operator==
struct _d730; // TemplateTypeParm S
struct _d731; // CXXMethod operator==
struct _d732; // ParmVar that
struct _d733; // FunctionTemplate operator!=
struct _d734; // TemplateTypeParm S
struct _d735; // CXXMethod operator!=
struct _d736; // ParmVar that
struct _d737; // FunctionTemplate operator!=
struct _d738; // TemplateTypeParm S
struct _d739; // CXXMethod operator!=
struct _d740; // ParmVar that
struct _d741; // FunctionTemplate Cast
struct _d742; // TemplateTypeParm S
struct _d743; // CXXMethod Cast
struct _d744; // ParmVar that
struct _d745; // FunctionTemplate As
struct _d746; // TemplateTypeParm S
struct _d747; // CXXMethod As
struct _d748; // CXXMethod New
struct _d749; // ParmVar isolate
struct _d750; // ParmVar that
struct _d751; // CXXMethod New
struct _d752; // ClassTemplateSpecialization PersistentBase
struct _d753; // ParmVar isolate
struct _d754; // ParmVar that
struct _d755; // CXXMethod New
struct _d756; // ClassTemplateSpecialization TracedGlobal
struct _d757; // ParmVar isolate
struct _d758; // ParmVar that
struct _d759; // CXXConstructor Local
struct _d760; // ParmVar 
struct _d761; // CXXConstructor Local
struct _d762; // ParmVar 
struct _d763; // CXXDestructor ~Local
struct _d764; // ClassTemplateSpecialization Local
struct _d765; // CXXConstructor Local
struct _d766; // FunctionTemplate Local
struct _d767; // TemplateTypeParm S
struct _d768; // CXXConstructor Local
struct _d769; // ParmVar that
struct _d770; // CXXConstructor Local
struct _d771; // ParmVar that
struct _d772; // CXXMethod IsEmpty
struct _d773; // CXXMethod Clear
struct _d774; // CXXMethod operator->
struct _d775; // CXXMethod operator*
struct _d776; // FunctionTemplate operator==
struct _d777; // TemplateTypeParm S
struct _d778; // CXXMethod operator==
struct _d779; // ParmVar that
struct _d780; // FunctionTemplate operator==
struct _d781; // TemplateTypeParm S
struct _d782; // CXXMethod operator==
struct _d783; // ParmVar that
struct _d784; // FunctionTemplate operator!=
struct _d785; // TemplateTypeParm S
struct _d786; // CXXMethod operator!=
struct _d787; // ParmVar that
struct _d788; // FunctionTemplate operator!=
struct _d789; // TemplateTypeParm S
struct _d790; // CXXMethod operator!=
struct _d791; // ParmVar that
struct _d792; // FunctionTemplate Cast
struct _d793; // TemplateTypeParm S
struct _d794; // CXXMethod Cast
struct _d795; // ParmVar that
struct _d796; // FunctionTemplate As
struct _d797; // TemplateTypeParm S
struct _d798; // CXXMethod As
struct _d799; // CXXMethod New
struct _d800; // ParmVar isolate
struct _d801; // ParmVar that
struct _d802; // CXXMethod New
struct _d803; // ClassTemplateSpecialization PersistentBase
struct _d804; // ParmVar isolate
struct _d805; // ParmVar that
struct _d806; // CXXMethod New
struct _d807; // ClassTemplateSpecialization TracedGlobal
struct _d808; // ParmVar isolate
struct _d809; // ParmVar that
struct _d810; // CXXConstructor Local
struct _d811; // ParmVar 
struct _d812; // CXXConstructor Local
struct _d813; // ParmVar 
struct _d814; // CXXDestructor ~Local
struct _d815; // ClassTemplateSpecialization Local
struct _d816; // CXXConstructor Local
struct _d817; // FunctionTemplate Local
struct _d818; // TemplateTypeParm S
struct _d819; // CXXConstructor Local
struct _d820; // ParmVar that
struct _d821; // CXXConstructor Local
struct _d822; // ParmVar that
struct _d823; // CXXMethod IsEmpty
struct _d824; // CXXMethod Clear
struct _d825; // CXXMethod operator->
struct _d826; // CXXMethod operator*
struct _d827; // FunctionTemplate operator==
struct _d828; // TemplateTypeParm S
struct _d829; // CXXMethod operator==
struct _d830; // ParmVar that
struct _d831; // FunctionTemplate operator==
struct _d832; // TemplateTypeParm S
struct _d833; // CXXMethod operator==
struct _d834; // ParmVar that
struct _d835; // FunctionTemplate operator!=
struct _d836; // TemplateTypeParm S
struct _d837; // CXXMethod operator!=
struct _d838; // ParmVar that
struct _d839; // FunctionTemplate operator!=
struct _d840; // TemplateTypeParm S
struct _d841; // CXXMethod operator!=
struct _d842; // ParmVar that
struct _d843; // FunctionTemplate Cast
struct _d844; // TemplateTypeParm S
struct _d845; // CXXMethod Cast
struct _d846; // ParmVar that
struct _d847; // FunctionTemplate As
struct _d848; // TemplateTypeParm S
struct _d849; // CXXMethod As
struct _d850; // CXXMethod New
struct _d851; // ParmVar isolate
struct _d852; // ParmVar that
struct _d853; // CXXMethod New
struct _d854; // ClassTemplateSpecialization PersistentBase
struct _d855; // ParmVar isolate
struct _d856; // ParmVar that
struct _d857; // CXXMethod New
struct _d858; // ClassTemplateSpecialization TracedGlobal
struct _d859; // ParmVar isolate
struct _d860; // ParmVar that
struct _d861; // CXXConstructor Local
struct _d862; // ParmVar 
struct _d863; // CXXConstructor Local
struct _d864; // ParmVar 
struct _d865; // CXXDestructor ~Local
struct _d866; // ClassTemplateSpecialization Local
struct _d867; // ClassTemplateSpecialization Local
struct _d868; // ClassTemplateSpecialization Local
struct _d869; // ClassTemplateSpecialization Local
struct _d870; // ClassTemplate MaybeLocal
struct _d871; // TemplateTypeParm T
struct _d872; // CXXRecord MaybeLocal
struct _d873; // ClassTemplateSpecialization MaybeLocal
struct _d874; // ClassTemplateSpecialization MaybeLocal
struct _d875; // CXXConstructor MaybeLocal
struct _d876; // FunctionTemplate MaybeLocal
struct _d877; // TemplateTypeParm S
struct _d878; // CXXConstructor MaybeLocal
struct _d879; // ParmVar that
struct _d880; // CXXMethod IsEmpty
struct _d881; // FunctionTemplate ToLocal
struct _d882; // TemplateTypeParm S
struct _d883; // CXXMethod ToLocal
struct _d884; // ParmVar out
struct _d885; // CXXMethod ToLocalChecked
struct _d886; // FunctionTemplate FromMaybe
struct _d887; // TemplateTypeParm S
struct _d888; // CXXMethod FromMaybe
struct _d889; // ParmVar default_value
struct _d890; // CXXConstructor MaybeLocal
struct _d891; // ParmVar 
struct _d892; // CXXConstructor MaybeLocal
struct _d893; // ParmVar 
struct _d894; // CXXDestructor ~MaybeLocal
struct _d895; // ClassTemplateSpecialization MaybeLocal
struct _d896; // ClassTemplateSpecialization MaybeLocal
struct _d897; // ClassTemplateSpecialization MaybeLocal
struct _d898; // ClassTemplateSpecialization MaybeLocal
struct _d899; // CXXConstructor MaybeLocal
struct _d900; // FunctionTemplate MaybeLocal
struct _d901; // TemplateTypeParm S
struct _d902; // CXXConstructor MaybeLocal
struct _d903; // ParmVar that
struct _d904; // CXXMethod IsEmpty
struct _d905; // FunctionTemplate ToLocal
struct _d906; // TemplateTypeParm S
struct _d907; // CXXMethod ToLocal
struct _d908; // ParmVar out
struct _d909; // CXXMethod ToLocalChecked
struct _d910; // FunctionTemplate FromMaybe
struct _d911; // TemplateTypeParm S
struct _d912; // CXXMethod FromMaybe
struct _d913; // ParmVar default_value
struct _d914; // CXXDestructor ~MaybeLocal
struct _d915; // ClassTemplateSpecialization MaybeLocal
struct _d916; // CXXConstructor MaybeLocal
struct _d917; // FunctionTemplate MaybeLocal
struct _d918; // TemplateTypeParm S
struct _d919; // CXXConstructor MaybeLocal
struct _d920; // ParmVar that
struct _d921; // CXXMethod IsEmpty
struct _d922; // FunctionTemplate ToLocal
struct _d923; // TemplateTypeParm S
struct _d924; // CXXMethod ToLocal
struct _d925; // ParmVar out
struct _d926; // CXXMethod ToLocalChecked
struct _d927; // FunctionTemplate FromMaybe
struct _d928; // TemplateTypeParm S
struct _d929; // CXXMethod FromMaybe
struct _d930; // ParmVar default_value
struct _d931; // CXXDestructor ~MaybeLocal
struct _d932; // CXXConstructor MaybeLocal
struct _d933; // ParmVar 
struct _d934; // CXXConstructor MaybeLocal
struct _d935; // ParmVar 
struct _d936; // ClassTemplateSpecialization MaybeLocal
struct _d937; // ClassTemplateSpecialization MaybeLocal
struct _d938; // ClassTemplateSpecialization MaybeLocal
struct _d939; // ClassTemplateSpecialization MaybeLocal
struct _d940; // ClassTemplateSpecialization MaybeLocal
struct _d941; // ClassTemplateSpecialization MaybeLocal
struct _d942; // ClassTemplateSpecialization MaybeLocal
struct _d943; // ClassTemplateSpecialization MaybeLocal
struct _d944; // ClassTemplateSpecialization MaybeLocal
struct _d945; // ClassTemplateSpecialization MaybeLocal
struct _d946; // ClassTemplateSpecialization MaybeLocal
struct _d947; // ClassTemplateSpecialization MaybeLocal
struct _d948; // ClassTemplateSpecialization MaybeLocal
struct _d949; // ClassTemplateSpecialization MaybeLocal
struct _d950; // ClassTemplateSpecialization MaybeLocal
struct _d951; // ClassTemplateSpecialization MaybeLocal
struct _d952; // CXXConstructor MaybeLocal
struct _d953; // FunctionTemplate MaybeLocal
struct _d954; // TemplateTypeParm S
struct _d955; // CXXConstructor MaybeLocal
struct _d956; // ParmVar that
struct _d957; // CXXMethod IsEmpty
struct _d958; // FunctionTemplate ToLocal
struct _d959; // TemplateTypeParm S
struct _d960; // CXXMethod ToLocal
struct _d961; // ParmVar out
struct _d962; // CXXMethod ToLocalChecked
struct _d963; // FunctionTemplate FromMaybe
struct _d964; // TemplateTypeParm S
struct _d965; // CXXMethod FromMaybe
struct _d966; // ParmVar default_value
struct _d967; // CXXConstructor MaybeLocal
struct _d968; // ParmVar 
struct _d969; // CXXConstructor MaybeLocal
struct _d970; // ParmVar 
struct _d971; // CXXDestructor ~MaybeLocal
struct _d972; // ClassTemplateSpecialization MaybeLocal
struct _d973; // ClassTemplate Eternal
struct _d974; // TemplateTypeParm T
struct _d975; // CXXRecord Eternal
struct _d976; // ClassTemplate NonCopyablePersistentTraits
struct _d977; // TemplateTypeParm T
struct _d978; // CXXRecord NonCopyablePersistentTraits
struct _d979; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _d980; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _d981; // ClassTemplate PersistentBase
struct _d982; // TemplateTypeParm T
struct _d983; // CXXRecord PersistentBase
struct _d984; // ClassTemplateSpecialization PersistentBase
struct _d985; // CXXMethod Reset
struct _d986; // FunctionTemplate Reset
struct _d987; // TemplateTypeParm S
struct _d988; // CXXMethod Reset
struct _d989; // ParmVar isolate
struct _d990; // ParmVar other
struct _d991; // FunctionTemplate Reset
struct _d992; // TemplateTypeParm S
struct _d993; // CXXMethod Reset
struct _d994; // ParmVar isolate
struct _d995; // ParmVar other
struct _d996; // CXXMethod IsEmpty
struct _d997; // CXXMethod Empty
struct _d998; // CXXMethod Get
struct _d999; // ParmVar isolate
struct _d1000; // FunctionTemplate operator==
struct _d1001; // TemplateTypeParm S
struct _d1002; // CXXMethod operator==
struct _d1003; // ParmVar that
struct _d1004; // FunctionTemplate operator==
struct _d1005; // TemplateTypeParm S
struct _d1006; // CXXMethod operator==
struct _d1007; // ParmVar that
struct _d1008; // FunctionTemplate operator!=
struct _d1009; // TemplateTypeParm S
struct _d1010; // CXXMethod operator!=
struct _d1011; // ParmVar that
struct _d1012; // FunctionTemplate operator!=
struct _d1013; // TemplateTypeParm S
struct _d1014; // CXXMethod operator!=
struct _d1015; // ParmVar that
struct _d1016; // FunctionTemplate SetWeak
struct _d1017; // TemplateTypeParm P
struct _d1018; // CXXMethod SetWeak
struct _d1019; // Enum WeakCallbackType
struct _d1020; // ParmVar parameter
struct _d1021; // ParmVar callback
struct _d1022; // ParmVar type
struct _d1023; // CXXMethod SetWeak
struct _d1024; // FunctionTemplate ClearWeak
struct _d1025; // TemplateTypeParm P
struct _d1026; // CXXMethod ClearWeak
struct _d1027; // CXXMethod ClearWeak
struct _d1028; // CXXMethod AnnotateStrongRetainer
struct _d1029; // ParmVar label
struct _d1030; // CXXMethod IsWeak
struct _d1031; // CXXMethod SetWrapperClassId
struct _d1032; // ParmVar class_id
struct _d1033; // CXXMethod WrapperClassId
struct _d1034; // CXXConstructor PersistentBase
struct _d1035; // ParmVar other
struct _d1036; // CXXMethod operator=
struct _d1037; // ParmVar 
struct _d1038; // CXXMethod Reset
struct _d1039; // FunctionTemplate Reset
struct _d1040; // TemplateTypeParm S
struct _d1041; // CXXMethod Reset
struct _d1042; // ParmVar isolate
struct _d1043; // ParmVar other
struct _d1044; // FunctionTemplate Reset
struct _d1045; // TemplateTypeParm S
struct _d1046; // CXXMethod Reset
struct _d1047; // ParmVar isolate
struct _d1048; // ParmVar other
struct _d1049; // CXXMethod IsEmpty
struct _d1050; // CXXMethod Empty
struct _d1051; // CXXMethod Get
struct _d1052; // ParmVar isolate
struct _d1053; // FunctionTemplate operator==
struct _d1054; // TemplateTypeParm S
struct _d1055; // CXXMethod operator==
struct _d1056; // ParmVar that
struct _d1057; // FunctionTemplate operator==
struct _d1058; // TemplateTypeParm S
struct _d1059; // CXXMethod operator==
struct _d1060; // ParmVar that
struct _d1061; // FunctionTemplate operator!=
struct _d1062; // TemplateTypeParm S
struct _d1063; // CXXMethod operator!=
struct _d1064; // ParmVar that
struct _d1065; // FunctionTemplate operator!=
struct _d1066; // TemplateTypeParm S
struct _d1067; // CXXMethod operator!=
struct _d1068; // ParmVar that
struct _d1069; // FunctionTemplate SetWeak
struct _d1070; // TemplateTypeParm P
struct _d1071; // CXXMethod SetWeak
struct _d1072; // ParmVar parameter
struct _d1073; // ParmVar callback
struct _d1074; // ParmVar type
struct _d1075; // CXXMethod SetWeak
struct _d1076; // FunctionTemplate ClearWeak
struct _d1077; // TemplateTypeParm P
struct _d1078; // CXXMethod ClearWeak
struct _d1079; // CXXMethod ClearWeak
struct _d1080; // CXXMethod AnnotateStrongRetainer
struct _d1081; // ParmVar label
struct _d1082; // CXXMethod IsWeak
struct _d1083; // CXXMethod SetWrapperClassId
struct _d1084; // ParmVar class_id
struct _d1085; // CXXMethod WrapperClassId
struct _d1086; // CXXConstructor PersistentBase
struct _d1087; // ParmVar other
struct _d1088; // CXXMethod operator=
struct _d1089; // ParmVar 
struct _d1090; // ClassTemplate Persistent
struct _d1091; // TemplateTypeParm T
struct _d1092; // TemplateTypeParm M
struct _d1093; // CXXRecord Persistent
struct _d1094; // ClassTemplateSpecialization Persistent
struct _d1095; // CXXConstructor Persistent
struct _d1096; // FunctionTemplate Persistent
struct _d1097; // TemplateTypeParm S
struct _d1098; // CXXConstructor Persistent
struct _d1099; // ParmVar isolate
struct _d1100; // ParmVar that
struct _d1101; // FunctionTemplate Persistent
struct _d1102; // TemplateTypeParm S
struct _d1103; // TemplateTypeParm M2
struct _d1104; // CXXConstructor Persistent
struct _d1105; // ParmVar isolate
struct _d1106; // ParmVar that
struct _d1107; // CXXConstructor Persistent
struct _d1108; // ParmVar that
struct _d1109; // FunctionTemplate Persistent
struct _d1110; // TemplateTypeParm S
struct _d1111; // TemplateTypeParm M2
struct _d1112; // CXXConstructor Persistent
struct _d1113; // ParmVar that
struct _d1114; // CXXConstructor Persistent
struct _d1115; // ParmVar that
struct _d1116; // CXXMethod operator=
struct _d1117; // ParmVar that
struct _d1118; // FunctionTemplate operator=
struct _d1119; // TemplateTypeParm S
struct _d1120; // TemplateTypeParm M2
struct _d1121; // CXXMethod operator=
struct _d1122; // ParmVar that
struct _d1123; // CXXMethod operator=
struct _d1124; // ParmVar that
struct _d1125; // CXXDestructor ~Persistent
struct _d1126; // FunctionTemplate Cast
struct _d1127; // TemplateTypeParm S
struct _d1128; // CXXMethod Cast
struct _d1129; // ClassTemplateSpecialization Persistent
struct _d1130; // ParmVar that
struct _d1131; // FunctionTemplate As
struct _d1132; // TemplateTypeParm S
struct _d1133; // CXXMethod As
struct _d1134; // ClassTemplateSpecialization Persistent
struct _d1135; // ClassTemplate Global
struct _d1136; // TemplateTypeParm T
struct _d1137; // CXXRecord Global
struct _d1138; // ClassTemplate TracedGlobal
struct _d1139; // TemplateTypeParm T
struct _d1140; // CXXRecord TracedGlobal
struct _d1141; // ClassTemplateSpecialization TracedGlobal
struct _d1142; // CXXConstructor TracedGlobal
struct _d1143; // CXXDestructor ~TracedGlobal
struct _d1144; // FunctionTemplate TracedGlobal
struct _d1145; // TemplateTypeParm S
struct _d1146; // CXXConstructor TracedGlobal
struct _d1147; // ParmVar isolate
struct _d1148; // ParmVar that
struct _d1149; // CXXConstructor TracedGlobal
struct _d1150; // ParmVar other
struct _d1151; // FunctionTemplate operator=
struct _d1152; // TemplateTypeParm S
struct _d1153; // CXXMethod operator=
struct _d1154; // ParmVar rhs
struct _d1155; // CXXConstructor TracedGlobal
struct _d1156; // ParmVar 
struct _d1157; // CXXMethod operator=
struct _d1158; // ParmVar 
struct _d1159; // CXXMethod IsEmpty
struct _d1160; // CXXMethod Reset
struct _d1161; // FunctionTemplate Reset
struct _d1162; // TemplateTypeParm S
struct _d1163; // CXXMethod Reset
struct _d1164; // ParmVar isolate
struct _d1165; // ParmVar other
struct _d1166; // CXXMethod Get
struct _d1167; // ParmVar isolate
struct _d1168; // FunctionTemplate As
struct _d1169; // TemplateTypeParm S
struct _d1170; // CXXMethod As
struct _d1171; // FunctionTemplate operator==
struct _d1172; // TemplateTypeParm S
struct _d1173; // CXXMethod operator==
struct _d1174; // ParmVar that
struct _d1175; // FunctionTemplate operator==
struct _d1176; // TemplateTypeParm S
struct _d1177; // CXXMethod operator==
struct _d1178; // ParmVar that
struct _d1179; // FunctionTemplate operator!=
struct _d1180; // TemplateTypeParm S
struct _d1181; // CXXMethod operator!=
struct _d1182; // ParmVar that
struct _d1183; // FunctionTemplate operator!=
struct _d1184; // TemplateTypeParm S
struct _d1185; // CXXMethod operator!=
struct _d1186; // ParmVar that
struct _d1187; // CXXMethod SetWrapperClassId
struct _d1188; // ParmVar class_id
struct _d1189; // CXXMethod WrapperClassId
struct _d1190; // CXXMethod SetFinalizationCallback
struct _d1191; // ClassTemplateSpecialization WeakCallbackInfo
struct _d1192; // ParmVar parameter
struct _d1193; // ParmVar callback
struct _d1194; // ClassTemplate PersistentValueMap
struct _d1195; // TemplateTypeParm K
struct _d1196; // TemplateTypeParm V
struct _d1197; // TemplateTypeParm T
struct _d1198; // CXXRecord PersistentValueMap
struct _d1199; // ClassTemplate PersistentValueMapBase
struct _d1200; // TemplateTypeParm K
struct _d1201; // TemplateTypeParm V
struct _d1202; // TemplateTypeParm T
struct _d1203; // CXXRecord PersistentValueMapBase
struct _d1204; // ClassTemplate GlobalValueMap
struct _d1205; // TemplateTypeParm K
struct _d1206; // TemplateTypeParm V
struct _d1207; // TemplateTypeParm T
struct _d1208; // CXXRecord GlobalValueMap
struct _d1209; // ClassTemplate PersistentValueVector
struct _d1210; // TemplateTypeParm V
struct _d1211; // TemplateTypeParm T
struct _d1212; // CXXRecord PersistentValueVector
struct _d1213; // ClassTemplate WeakCallbackObject
struct _d1214; // TemplateTypeParm T
struct _d1215; // TemplateTypeParm P
struct _d1216; // CXXRecord WeakCallbackObject
struct _d1217; // ClassTemplate FunctionCallbackInfo
struct _d1218; // TemplateTypeParm T
struct _d1219; // CXXRecord FunctionCallbackInfo
struct _d1220; // ClassTemplateSpecialization FunctionCallbackInfo
struct _d1221; // ClassTemplate PropertyCallbackInfo
struct _d1222; // TemplateTypeParm T
struct _d1223; // CXXRecord PropertyCallbackInfo
struct _d1224; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1225; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1226; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1227; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1228; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1229; // CXXRecord CallHandlerHelper
struct _d1230; // CXXRecord EscapableHandleScope
struct _d1231; // ClassTemplate ReturnValue
struct _d1232; // TemplateTypeParm T
struct _d1233; // CXXRecord ReturnValue
struct _d1234; // Namespace debug
struct _d1235; // CXXRecord ConsoleCallArguments
struct _d1236; // TemplateTypeParm T
struct _d1237; // CXXRecord Local
struct _d1238; // CXXConstructor Local<T>
struct _d1239; // FunctionTemplate Local<T>
struct _d1240; // TemplateTypeParm S
struct _d1241; // CXXConstructor Local<T>
struct _d1242; // ParmVar that
struct _d1243; // CXXMethod IsEmpty
struct _d1244; // CXXMethod Clear
struct _d1245; // CXXMethod operator->
struct _d1246; // CXXMethod operator*
struct _d1247; // FunctionTemplate operator==
struct _d1248; // TemplateTypeParm S
struct _d1249; // CXXMethod operator==
struct _d1250; // ParmVar that
struct _d1251; // FunctionTemplate operator==
struct _d1252; // TemplateTypeParm S
struct _d1253; // CXXMethod operator==
struct _d1254; // ParmVar that
struct _d1255; // FunctionTemplate operator!=
struct _d1256; // TemplateTypeParm S
struct _d1257; // CXXMethod operator!=
struct _d1258; // ParmVar that
struct _d1259; // FunctionTemplate operator!=
struct _d1260; // TemplateTypeParm S
struct _d1261; // CXXMethod operator!=
struct _d1262; // ParmVar that
struct _d1263; // FunctionTemplate Cast
struct _d1264; // TemplateTypeParm S
struct _d1265; // CXXMethod Cast
struct _d1266; // ParmVar that
struct _d1267; // FunctionTemplate As
struct _d1268; // TemplateTypeParm S
struct _d1269; // CXXMethod As
struct _d1270; // CXXMethod New
struct _d1271; // ParmVar isolate
struct _d1272; // ParmVar that
struct _d1273; // CXXMethod New
struct _d1274; // ParmVar isolate
struct _d1275; // ParmVar that
struct _d1276; // CXXMethod New
struct _d1277; // ParmVar isolate
struct _d1278; // ParmVar that
struct _d1279; // TypeAliasTemplate Handle
struct _d1280; // TypeAlias Handle
struct _d1281; // TemplateTypeParm T
struct _d1282; // TemplateTypeParm T
struct _d1283; // CXXRecord MaybeLocal
struct _d1284; // CXXConstructor MaybeLocal<T>
struct _d1285; // FunctionTemplate MaybeLocal<T>
struct _d1286; // TemplateTypeParm S
struct _d1287; // CXXConstructor MaybeLocal<T>
struct _d1288; // ParmVar that
struct _d1289; // CXXMethod IsEmpty
struct _d1290; // FunctionTemplate ToLocal
struct _d1291; // TemplateTypeParm S
struct _d1292; // CXXMethod ToLocal
struct _d1293; // ParmVar out
struct _d1294; // CXXMethod ToLocalChecked
struct _d1295; // FunctionTemplate FromMaybe
struct _d1296; // TemplateTypeParm S
struct _d1297; // CXXMethod FromMaybe
struct _d1298; // ParmVar default_value
struct _d1299; // TemplateTypeParm T
struct _d1300; // CXXRecord Eternal
struct _d1301; // CXXConstructor Eternal<T>
struct _d1302; // FunctionTemplate Eternal<T>
struct _d1303; // TemplateTypeParm S
struct _d1304; // CXXConstructor Eternal<T>
struct _d1305; // ParmVar isolate
struct _d1306; // ParmVar handle
struct _d1307; // CXXMethod Get
struct _d1308; // ParmVar isolate
struct _d1309; // CXXMethod IsEmpty
struct _d1310; // FunctionTemplate Set
struct _d1311; // TemplateTypeParm S
struct _d1312; // CXXMethod Set
struct _d1313; // ParmVar isolate
struct _d1314; // ParmVar handle
struct _d1315; // Var kInternalFieldsInWeakCallback
struct _d1316; // Var kEmbedderFieldsInWeakCallback
struct _d1317; // ClassTemplate WeakCallbackInfo
struct _d1318; // TemplateTypeParm T
struct _d1319; // CXXRecord WeakCallbackInfo
struct _d1320; // CXXRecord WeakCallbackInfo
struct _d1321; // Typedef Callback
struct _d1322; // CXXConstructor WeakCallbackInfo<T>
struct _d1323; // ParmVar isolate
struct _d1324; // ParmVar parameter
struct _d1325; // ParmVar embedder_fields
struct _d1326; // ParmVar callback
struct _d1327; // CXXMethod GetIsolate
struct _d1328; // CXXMethod GetParameter
struct _d1329; // CXXMethod GetInternalField
struct _d1330; // ParmVar index
struct _d1331; // CXXMethod SetSecondPassCallback
struct _d1332; // ParmVar callback
struct _d1333; // Typedef Callback
struct _d1334; // ParmVar data
struct _d1335; // CXXConstructor WeakCallbackInfo
struct _d1336; // ParmVar isolate
struct _d1337; // ParmVar parameter
struct _d1338; // ParmVar embedder_fields
struct _d1339; // ParmVar callback
struct _d1340; // CXXMethod GetIsolate
struct _d1341; // CXXMethod GetParameter
struct _d1342; // CXXMethod GetInternalField
struct _d1343; // ParmVar index
struct _d1344; // CXXMethod SetSecondPassCallback
struct _d1345; // ParmVar callback
struct _d1346; // EnumConstant kParameter
struct _d1347; // EnumConstant kInternalFields
struct _d1348; // EnumConstant kFinalizer
struct _d1349; // TemplateTypeParm T
struct _d1350; // CXXRecord PersistentBase
struct _d1351; // CXXMethod Reset
struct _d1352; // FunctionTemplate Reset
struct _d1353; // TemplateTypeParm S
struct _d1354; // CXXMethod Reset
struct _d1355; // ParmVar isolate
struct _d1356; // ParmVar other
struct _d1357; // FunctionTemplate Reset
struct _d1358; // TemplateTypeParm S
struct _d1359; // CXXMethod Reset
struct _d1360; // ParmVar isolate
struct _d1361; // ParmVar other
struct _d1362; // CXXMethod IsEmpty
struct _d1363; // CXXMethod Empty
struct _d1364; // CXXMethod Get
struct _d1365; // ParmVar isolate
struct _d1366; // FunctionTemplate operator==
struct _d1367; // TemplateTypeParm S
struct _d1368; // CXXMethod operator==
struct _d1369; // ParmVar that
struct _d1370; // FunctionTemplate operator==
struct _d1371; // TemplateTypeParm S
struct _d1372; // CXXMethod operator==
struct _d1373; // ParmVar that
struct _d1374; // FunctionTemplate operator!=
struct _d1375; // TemplateTypeParm S
struct _d1376; // CXXMethod operator!=
struct _d1377; // ParmVar that
struct _d1378; // FunctionTemplate operator!=
struct _d1379; // TemplateTypeParm S
struct _d1380; // CXXMethod operator!=
struct _d1381; // ParmVar that
struct _d1382; // FunctionTemplate SetWeak
struct _d1383; // TemplateTypeParm P
struct _d1384; // CXXMethod SetWeak
struct _d1385; // ParmVar parameter
struct _d1386; // ParmVar callback
struct _d1387; // ParmVar type
struct _d1388; // CXXMethod SetWeak
struct _d1389; // FunctionTemplate ClearWeak
struct _d1390; // TemplateTypeParm P
struct _d1391; // CXXMethod ClearWeak
struct _d1392; // CXXMethod ClearWeak
struct _d1393; // CXXMethod AnnotateStrongRetainer
struct _d1394; // ParmVar label
struct _d1395; // CXXMethod IsWeak
struct _d1396; // CXXMethod SetWrapperClassId
struct _d1397; // ParmVar class_id
struct _d1398; // CXXMethod WrapperClassId
struct _d1399; // CXXConstructor PersistentBase<T>
struct _d1400; // ParmVar other
struct _d1401; // CXXMethod operator=
struct _d1402; // ParmVar 
struct _d1403; // TemplateTypeParm T
struct _d1404; // CXXRecord NonCopyablePersistentTraits
struct _d1405; // Typedef NonCopyablePersistent
struct _d1406; // Var kResetInDestructor
struct _d1407; // FunctionTemplate Copy
struct _d1408; // TemplateTypeParm S
struct _d1409; // TemplateTypeParm M
struct _d1410; // CXXMethod Copy
struct _d1411; // ParmVar source
struct _d1412; // ParmVar dest
struct _d1413; // FunctionTemplate Uncompilable
struct _d1414; // TemplateTypeParm O
struct _d1415; // CXXMethod Uncompilable
struct _d1416; // ClassTemplate CopyablePersistentTraits
struct _d1417; // TemplateTypeParm T
struct _d1418; // CXXRecord CopyablePersistentTraits
struct _d1419; // CXXRecord CopyablePersistentTraits
struct _d1420; // Typedef CopyablePersistent
struct _d1421; // Var kResetInDestructor
struct _d1422; // FunctionTemplate Copy
struct _d1423; // TemplateTypeParm S
struct _d1424; // TemplateTypeParm M
struct _d1425; // CXXMethod Copy
struct _d1426; // ParmVar source
struct _d1427; // ParmVar dest
struct _d1428; // ClassTemplateSpecialization CopyablePersistentTraits
struct _d1429; // TemplateTypeParm T
struct _d1430; // TemplateTypeParm M
struct _d1431; // CXXRecord Persistent
struct _d1432; // CXXConstructor Persistent<T, M>
struct _d1433; // FunctionTemplate Persistent<T, M>
struct _d1434; // TemplateTypeParm S
struct _d1435; // CXXConstructor Persistent<T, M>
struct _d1436; // ParmVar isolate
struct _d1437; // ParmVar that
struct _d1438; // FunctionTemplate Persistent<T, M>
struct _d1439; // TemplateTypeParm S
struct _d1440; // TemplateTypeParm M2
struct _d1441; // CXXConstructor Persistent<T, M>
struct _d1442; // ParmVar isolate
struct _d1443; // ParmVar that
struct _d1444; // CXXConstructor Persistent<T, M>
struct _d1445; // ParmVar that
struct _d1446; // FunctionTemplate Persistent<T, M>
struct _d1447; // TemplateTypeParm S
struct _d1448; // TemplateTypeParm M2
struct _d1449; // CXXConstructor Persistent<T, M>
struct _d1450; // ParmVar that
struct _d1451; // CXXMethod operator=
struct _d1452; // ParmVar that
struct _d1453; // FunctionTemplate operator=
struct _d1454; // TemplateTypeParm S
struct _d1455; // TemplateTypeParm M2
struct _d1456; // CXXMethod operator=
struct _d1457; // ParmVar that
struct _d1458; // CXXDestructor ~Persistent<T, M>
struct _d1459; // FunctionTemplate Cast
struct _d1460; // TemplateTypeParm S
struct _d1461; // CXXMethod Cast
struct _d1462; // ParmVar that
struct _d1463; // FunctionTemplate As
struct _d1464; // TemplateTypeParm S
struct _d1465; // CXXMethod As
struct _d1466; // TemplateTypeParm T
struct _d1467; // CXXRecord Global
struct _d1468; // CXXConstructor Global<T>
struct _d1469; // FunctionTemplate Global<T>
struct _d1470; // TemplateTypeParm S
struct _d1471; // CXXConstructor Global<T>
struct _d1472; // ParmVar isolate
struct _d1473; // ParmVar that
struct _d1474; // FunctionTemplate Global<T>
struct _d1475; // TemplateTypeParm S
struct _d1476; // CXXConstructor Global<T>
struct _d1477; // ParmVar isolate
struct _d1478; // ParmVar that
struct _d1479; // CXXConstructor Global<T>
struct _d1480; // ParmVar other
struct _d1481; // CXXDestructor ~Global<T>
struct _d1482; // FunctionTemplate operator=
struct _d1483; // TemplateTypeParm S
struct _d1484; // CXXMethod operator=
struct _d1485; // ParmVar rhs
struct _d1486; // CXXMethod Pass
struct _d1487; // Typedef MoveOnlyTypeForCPP03
struct _d1488; // CXXConstructor Global<T>
struct _d1489; // ParmVar 
struct _d1490; // CXXMethod operator=
struct _d1491; // ParmVar 
struct _d1492; // TypeAliasTemplate UniquePersistent
struct _d1493; // TypeAlias UniquePersistent
struct _d1494; // TemplateTypeParm T
struct _d1495; // TemplateTypeParm T
struct _d1496; // CXXRecord TracedGlobal
struct _d1497; // CXXConstructor TracedGlobal<T>
struct _d1498; // CXXDestructor ~TracedGlobal<T>
struct _d1499; // FunctionTemplate TracedGlobal<T>
struct _d1500; // TemplateTypeParm S
struct _d1501; // CXXConstructor TracedGlobal<T>
struct _d1502; // ParmVar isolate
struct _d1503; // ParmVar that
struct _d1504; // CXXConstructor TracedGlobal<T>
struct _d1505; // ParmVar other
struct _d1506; // FunctionTemplate operator=
struct _d1507; // TemplateTypeParm S
struct _d1508; // CXXMethod operator=
struct _d1509; // ParmVar rhs
struct _d1510; // CXXConstructor TracedGlobal<T>
struct _d1511; // ParmVar 
struct _d1512; // CXXMethod operator=
struct _d1513; // ParmVar 
struct _d1514; // CXXMethod IsEmpty
struct _d1515; // CXXMethod Reset
struct _d1516; // FunctionTemplate Reset
struct _d1517; // TemplateTypeParm S
struct _d1518; // CXXMethod Reset
struct _d1519; // ParmVar isolate
struct _d1520; // ParmVar other
struct _d1521; // CXXMethod Get
struct _d1522; // ParmVar isolate
struct _d1523; // FunctionTemplate As
struct _d1524; // TemplateTypeParm S
struct _d1525; // CXXMethod As
struct _d1526; // FunctionTemplate operator==
struct _d1527; // TemplateTypeParm S
struct _d1528; // CXXMethod operator==
struct _d1529; // ParmVar that
struct _d1530; // FunctionTemplate operator==
struct _d1531; // TemplateTypeParm S
struct _d1532; // CXXMethod operator==
struct _d1533; // ParmVar that
struct _d1534; // FunctionTemplate operator!=
struct _d1535; // TemplateTypeParm S
struct _d1536; // CXXMethod operator!=
struct _d1537; // ParmVar that
struct _d1538; // FunctionTemplate operator!=
struct _d1539; // TemplateTypeParm S
struct _d1540; // CXXMethod operator!=
struct _d1541; // ParmVar that
struct _d1542; // CXXMethod SetWrapperClassId
struct _d1543; // ParmVar class_id
struct _d1544; // CXXMethod WrapperClassId
struct _d1545; // CXXMethod SetFinalizationCallback
struct _d1546; // ParmVar parameter
struct _d1547; // ParmVar callback
struct _d1548; // CXXRecord HandleScope
struct _d1549; // CXXRecord HandleScope
struct _d1550; // CXXConstructor HandleScope
struct _d1551; // ParmVar isolate
struct _d1552; // CXXDestructor ~HandleScope
struct _d1553; // CXXMethod NumberOfHandles
struct _d1554; // ParmVar isolate
struct _d1555; // CXXMethod GetIsolate
struct _d1556; // CXXConstructor HandleScope
struct _d1557; // ParmVar 
struct _d1558; // CXXMethod operator=
struct _d1559; // ParmVar 
struct _d1560; // CXXConstructor HandleScope
struct _d1561; // CXXMethod Initialize
struct _d1562; // ParmVar isolate
struct _d1563; // CXXMethod CreateHandle
struct _d1564; // CXXRecord Isolate
struct _d1565; // ParmVar isolate
struct _d1566; // ParmVar value
struct _d1567; // CXXRecord EscapableHandleScope
struct _d1568; // CXXConstructor EscapableHandleScope
struct _d1569; // ParmVar isolate
struct _d1570; // CXXDestructor ~EscapableHandleScope
struct _d1571; // FunctionTemplate Escape
struct _d1572; // TemplateTypeParm T
struct _d1573; // CXXMethod Escape
struct _d1574; // ParmVar value
struct _d1575; // FunctionTemplate EscapeMaybe
struct _d1576; // TemplateTypeParm T
struct _d1577; // CXXMethod EscapeMaybe
struct _d1578; // ParmVar value
struct _d1579; // CXXConstructor EscapableHandleScope
struct _d1580; // ParmVar 
struct _d1581; // CXXMethod operator=
struct _d1582; // ParmVar 
struct _d1583; // CXXRecord SealHandleScope
struct _d1584; // CXXRecord SealHandleScope
struct _d1585; // CXXConstructor SealHandleScope
struct _d1586; // ParmVar isolate
struct _d1587; // CXXDestructor ~SealHandleScope
struct _d1588; // CXXConstructor SealHandleScope
struct _d1589; // ParmVar 
struct _d1590; // CXXMethod operator=
struct _d1591; // ParmVar 
struct _d1592; // CXXRecord Data
struct _d1593; // CXXRecord ScriptOrModule
struct _d1594; // CXXRecord ScriptOrModule
struct _d1595; // CXXMethod GetResourceName
struct _d1596; // CXXMethod GetHostDefinedOptions
struct _d1597; // CXXRecord PrimitiveArray
struct _d1598; // CXXMethod New
struct _d1599; // ParmVar isolate
struct _d1600; // ParmVar length
struct _d1601; // CXXMethod Length
struct _d1602; // CXXMethod Set
struct _d1603; // ParmVar isolate
struct _d1604; // ParmVar index
struct _d1605; // ParmVar item
struct _d1606; // CXXMethod Get
struct _d1607; // ParmVar isolate
struct _d1608; // ParmVar index
struct _d1609; // CXXRecord ScriptOriginOptions
struct _d1610; // CXXRecord ScriptOriginOptions
struct _d1611; // CXXConstructor ScriptOriginOptions
struct _d1612; // ParmVar is_shared_cross_origin
struct _d1613; // ParmVar is_opaque
struct _d1614; // ParmVar is_wasm
struct _d1615; // ParmVar is_module
struct _d1616; // CXXConstructor ScriptOriginOptions
struct _d1617; // ParmVar flags
struct _d1618; // CXXMethod IsSharedCrossOrigin
struct _d1619; // CXXMethod IsOpaque
struct _d1620; // CXXMethod IsWasm
struct _d1621; // CXXMethod IsModule
struct _d1622; // CXXMethod Flags
struct _d1623; // CXXConstructor ScriptOriginOptions
struct _d1624; // ParmVar 
struct _d1625; // CXXConstructor ScriptOriginOptions
struct _d1626; // ParmVar 
struct _d1627; // CXXDestructor ~ScriptOriginOptions
struct _d1628; // CXXMethod operator=
struct _d1629; // ParmVar 
struct _d1630; // CXXMethod operator=
struct _d1631; // ParmVar 
struct _d1632; // CXXRecord ScriptOrigin
struct _d1633; // CXXRecord ScriptOrigin
struct _d1634; // CXXConstructor ScriptOrigin
struct _d1635; // ParmVar resource_name
struct _d1636; // ParmVar resource_line_offset
struct _d1637; // ParmVar resource_column_offset
struct _d1638; // ParmVar resource_is_shared_cross_origin
struct _d1639; // ParmVar script_id
struct _d1640; // ParmVar source_map_url
struct _d1641; // ParmVar resource_is_opaque
struct _d1642; // ParmVar is_wasm
struct _d1643; // ParmVar is_module
struct _d1644; // ParmVar host_defined_options
struct _d1645; // CXXMethod ResourceName
struct _d1646; // CXXMethod ResourceLineOffset
struct _d1647; // CXXMethod ResourceColumnOffset
struct _d1648; // CXXMethod ScriptID
struct _d1649; // CXXMethod SourceMapUrl
struct _d1650; // CXXMethod HostDefinedOptions
struct _d1651; // CXXMethod Options
struct _d1652; // CXXConstructor ScriptOrigin
struct _d1653; // ParmVar 
struct _d1654; // CXXMethod operator=
struct _d1655; // ParmVar 
struct _d1656; // CXXConstructor ScriptOrigin
struct _d1657; // ParmVar 
struct _d1658; // CXXRecord UnboundScript
struct _d1659; // CXXMethod BindToCurrentContext
struct _d1660; // CXXMethod GetId
struct _d1661; // CXXMethod GetScriptName
struct _d1662; // CXXMethod GetSourceURL
struct _d1663; // CXXMethod GetSourceMappingURL
struct _d1664; // CXXMethod GetLineNumber
struct _d1665; // ParmVar code_pos
struct _d1666; // Var kNoScriptId
struct _d1667; // CXXRecord UnboundModuleScript
struct _d1668; // CXXRecord UnboundModuleScript
struct _d1669; // CXXRecord Location
struct _d1670; // CXXRecord Location
struct _d1671; // CXXMethod GetLineNumber
struct _d1672; // CXXMethod GetColumnNumber
struct _d1673; // CXXConstructor Location
struct _d1674; // ParmVar line_number
struct _d1675; // ParmVar column_number
struct _d1676; // CXXRecord Module
struct _d1677; // CXXRecord Module
struct _d1678; // Enum Status
struct _d1679; // EnumConstant kUninstantiated
struct _d1680; // EnumConstant kInstantiating
struct _d1681; // EnumConstant kInstantiated
struct _d1682; // EnumConstant kEvaluating
struct _d1683; // EnumConstant kEvaluated
struct _d1684; // EnumConstant kErrored
struct _d1685; // CXXMethod GetStatus
struct _d1686; // CXXMethod GetException
struct _d1687; // CXXMethod GetModuleRequestsLength
struct _d1688; // CXXMethod GetModuleRequest
struct _d1689; // ParmVar i
struct _d1690; // CXXMethod GetModuleRequestLocation
struct _d1691; // ParmVar i
struct _d1692; // CXXMethod GetIdentityHash
struct _d1693; // Typedef ResolveCallback
struct _d1694; // CXXMethod InstantiateModule
struct _d1695; // ParmVar context
struct _d1696; // ParmVar callback
struct _d1697; // CXXMethod Evaluate
struct _d1698; // ParmVar context
struct _d1699; // CXXMethod GetModuleNamespace
struct _d1700; // CXXMethod GetUnboundModuleScript
struct _d1701; // CXXRecord Script
struct _d1702; // CXXMethod Compile
struct _d1703; // ParmVar context
struct _d1704; // ParmVar source
struct _d1705; // ParmVar origin
struct _d1706; // CXXMethod Run
struct _d1707; // ParmVar context
struct _d1708; // CXXMethod GetUnboundScript
struct _d1709; // CXXRecord ScriptCompiler
struct _d1710; // CXXRecord ScriptCompiler
struct _d1711; // CXXRecord CachedData
struct _d1712; // CXXRecord CachedData
struct _d1713; // Enum BufferPolicy
struct _d1714; // EnumConstant BufferNotOwned
struct _d1715; // EnumConstant BufferOwned
struct _d1716; // CXXConstructor CachedData
struct _d1717; // CXXConstructor CachedData
struct _d1718; // ParmVar data
struct _d1719; // ParmVar length
struct _d1720; // ParmVar buffer_policy
struct _d1721; // CXXDestructor ~CachedData
struct _d1722; // Field data
struct _d1723; // Field length
struct _d1724; // Field rejected
struct _d1725; // Field buffer_policy
struct _d1726; // CXXConstructor CachedData
struct _d1727; // ParmVar 
struct _d1728; // CXXMethod operator=
struct _d1729; // ParmVar 
struct _d1730; // CXXRecord Source
struct _d1731; // CXXRecord Source
struct _d1732; // CXXConstructor Source
struct _d1733; // ParmVar source_string
struct _d1734; // ParmVar origin
struct _d1735; // ParmVar cached_data
struct _d1736; // CXXConstructor Source
struct _d1737; // ParmVar source_string
struct _d1738; // ParmVar cached_data
struct _d1739; // CXXDestructor ~Source
struct _d1740; // CXXMethod GetCachedData
struct _d1741; // CXXMethod GetResourceOptions
struct _d1742; // CXXConstructor Source
struct _d1743; // ParmVar 
struct _d1744; // CXXMethod operator=
struct _d1745; // ParmVar 
struct _d1746; // CXXRecord ExternalSourceStream
struct _d1747; // CXXRecord ExternalSourceStream
struct _d1748; // CXXDestructor ~ExternalSourceStream
struct _d1749; // CXXMethod GetMoreData
struct _d1750; // ParmVar src
struct _d1751; // CXXMethod SetBookmark
struct _d1752; // CXXMethod ResetToBookmark
struct _d1753; // CXXMethod operator=
struct _d1754; // ParmVar 
struct _d1755; // CXXRecord StreamedSource
struct _d1756; // CXXRecord StreamedSource
struct _d1757; // Enum Encoding
struct _d1758; // EnumConstant ONE_BYTE
struct _d1759; // EnumConstant TWO_BYTE
struct _d1760; // EnumConstant UTF8
struct _d1761; // CXXConstructor StreamedSource
struct _d1762; // ParmVar source_stream
struct _d1763; // ParmVar encoding
struct _d1764; // CXXConstructor StreamedSource
struct _d1765; // ClassTemplateSpecialization unique_ptr
struct _d1766; // ParmVar source_stream
struct _d1767; // ParmVar encoding
struct _d1768; // CXXDestructor ~StreamedSource
struct _d1769; // CXXMethod impl
struct _d1770; // CXXRecord ScriptStreamingData
struct _d1771; // CXXConstructor StreamedSource
struct _d1772; // ParmVar 
struct _d1773; // CXXMethod operator=
struct _d1774; // ParmVar 
struct _d1775; // CXXRecord ScriptStreamingTask
struct _d1776; // CXXRecord ScriptStreamingTask
struct _d1777; // CXXMethod Run
struct _d1778; // Enum CompileOptions
struct _d1779; // EnumConstant kNoCompileOptions
struct _d1780; // EnumConstant kConsumeCodeCache
struct _d1781; // EnumConstant kEagerCompile
struct _d1782; // Enum NoCacheReason
struct _d1783; // EnumConstant kNoCacheNoReason
struct _d1784; // EnumConstant kNoCacheBecauseCachingDisabled
struct _d1785; // EnumConstant kNoCacheBecauseNoResource
struct _d1786; // EnumConstant kNoCacheBecauseInlineScript
struct _d1787; // EnumConstant kNoCacheBecauseModule
struct _d1788; // EnumConstant kNoCacheBecauseStreamingSource
struct _d1789; // EnumConstant kNoCacheBecauseInspector
struct _d1790; // EnumConstant kNoCacheBecauseScriptTooSmall
struct _d1791; // EnumConstant kNoCacheBecauseCacheTooCold
struct _d1792; // EnumConstant kNoCacheBecauseV8Extension
struct _d1793; // EnumConstant kNoCacheBecauseExtensionModule
struct _d1794; // EnumConstant kNoCacheBecausePacScript
struct _d1795; // EnumConstant kNoCacheBecauseInDocumentWrite
struct _d1796; // EnumConstant kNoCacheBecauseResourceWithNoCacheHandler
struct _d1797; // EnumConstant kNoCacheBecauseDeferredProduceCodeCache
struct _d1798; // CXXMethod CompileUnboundScript
struct _d1799; // ParmVar isolate
struct _d1800; // ParmVar source
struct _d1801; // ParmVar options
struct _d1802; // ParmVar no_cache_reason
struct _d1803; // CXXMethod Compile
struct _d1804; // ParmVar context
struct _d1805; // ParmVar source
struct _d1806; // ParmVar options
struct _d1807; // ParmVar no_cache_reason
struct _d1808; // CXXMethod StartStreamingScript
struct _d1809; // ParmVar isolate
struct _d1810; // ParmVar source
struct _d1811; // ParmVar options
struct _d1812; // CXXMethod Compile
struct _d1813; // ParmVar context
struct _d1814; // ParmVar source
struct _d1815; // ParmVar full_source_string
struct _d1816; // ParmVar origin
struct _d1817; // CXXMethod CachedDataVersionTag
struct _d1818; // CXXMethod CompileModule
struct _d1819; // ParmVar isolate
struct _d1820; // ParmVar source
struct _d1821; // ParmVar options
struct _d1822; // ParmVar no_cache_reason
struct _d1823; // CXXMethod CompileFunctionInContext
struct _d1824; // ParmVar context
struct _d1825; // ParmVar source
struct _d1826; // ParmVar arguments_count
struct _d1827; // ParmVar arguments
struct _d1828; // ParmVar context_extension_count
struct _d1829; // ParmVar context_extensions
struct _d1830; // ParmVar options
struct _d1831; // ParmVar no_cache_reason
struct _d1832; // CXXMethod CreateCodeCache
struct _d1833; // ParmVar unbound_script
struct _d1834; // CXXMethod CreateCodeCache
struct _d1835; // ParmVar unbound_module_script
struct _d1836; // CXXMethod CreateCodeCacheForFunction
struct _d1837; // ParmVar function
struct _d1838; // CXXRecord Message
struct _d1839; // CXXRecord Message
struct _d1840; // CXXMethod Get
struct _d1841; // CXXMethod GetIsolate
struct _d1842; // CXXMethod GetSourceLine
struct _d1843; // ParmVar context
struct _d1844; // CXXMethod GetScriptOrigin
struct _d1845; // CXXMethod GetScriptResourceName
struct _d1846; // CXXMethod GetStackTrace
struct _d1847; // CXXMethod GetLineNumber
struct _d1848; // ParmVar context
struct _d1849; // CXXMethod GetStartPosition
struct _d1850; // CXXMethod GetEndPosition
struct _d1851; // CXXMethod ErrorLevel
struct _d1852; // CXXMethod GetStartColumn
struct _d1853; // CXXMethod GetStartColumn
struct _d1854; // ParmVar context
struct _d1855; // CXXMethod GetEndColumn
struct _d1856; // CXXMethod GetEndColumn
struct _d1857; // ParmVar context
struct _d1858; // CXXMethod IsSharedCrossOrigin
struct _d1859; // CXXMethod IsOpaque
struct _d1860; // CXXMethod PrintCurrentStackTrace
struct _d1861; // CXXRecord _iobuf
struct _d1862; // ParmVar isolate
struct _d1863; // ParmVar out
struct _d1864; // Var kNoLineNumberInfo
struct _d1865; // Var kNoColumnInfo
struct _d1866; // Var kNoScriptIdInfo
struct _d1867; // CXXRecord StackTrace
struct _d1868; // Enum StackTraceOptions
struct _d1869; // EnumConstant kLineNumber
struct _d1870; // EnumConstant kColumnOffset
struct _d1871; // EnumConstant kScriptName
struct _d1872; // EnumConstant kFunctionName
struct _d1873; // EnumConstant kIsEval
struct _d1874; // EnumConstant kIsConstructor
struct _d1875; // EnumConstant kScriptNameOrSourceURL
struct _d1876; // EnumConstant kScriptId
struct _d1877; // EnumConstant kExposeFramesAcrossSecurityOrigins
struct _d1878; // EnumConstant kOverview
struct _d1879; // EnumConstant kDetailed
struct _d1880; // CXXMethod GetFrame
struct _d1881; // ParmVar isolate
struct _d1882; // ParmVar index
struct _d1883; // CXXMethod GetFrameCount
struct _d1884; // CXXMethod CurrentStackTrace
struct _d1885; // ParmVar isolate
struct _d1886; // ParmVar frame_limit
struct _d1887; // ParmVar options
struct _d1888; // CXXRecord StackFrame
struct _d1889; // CXXMethod GetLineNumber
struct _d1890; // CXXMethod GetColumn
struct _d1891; // CXXMethod GetScriptId
struct _d1892; // CXXMethod GetScriptName
struct _d1893; // CXXMethod GetScriptNameOrSourceURL
struct _d1894; // CXXMethod GetFunctionName
struct _d1895; // CXXMethod IsEval
struct _d1896; // CXXMethod IsConstructor
struct _d1897; // CXXMethod IsWasm
struct _d1898; // CXXMethod IsUserJavaScript
struct _d1899; // Enum StateTag
struct _d1900; // EnumConstant JS
struct _d1901; // EnumConstant GC
struct _d1902; // EnumConstant PARSER
struct _d1903; // EnumConstant BYTECODE_COMPILER
struct _d1904; // EnumConstant COMPILER
struct _d1905; // EnumConstant OTHER
struct _d1906; // EnumConstant EXTERNAL
struct _d1907; // EnumConstant IDLE
struct _d1908; // CXXRecord RegisterState
struct _d1909; // CXXRecord RegisterState
struct _d1910; // CXXConstructor RegisterState
struct _d1911; // Field pc
struct _d1912; // Field sp
struct _d1913; // Field fp
struct _d1914; // Field lr
struct _d1915; // CXXRecord SampleInfo
struct _d1916; // CXXRecord SampleInfo
struct _d1917; // Field frames_count
struct _d1918; // Field vm_state
struct _d1919; // Field external_callback_entry
struct _d1920; // CXXRecord MemoryRange
struct _d1921; // CXXRecord MemoryRange
struct _d1922; // Field start
struct _d1923; // Field length_in_bytes
struct _d1924; // CXXRecord JSEntryStub
struct _d1925; // CXXRecord JSEntryStub
struct _d1926; // Field code
struct _d1927; // CXXRecord UnwindState
struct _d1928; // CXXRecord UnwindState
struct _d1929; // Field code_range
struct _d1930; // Field embedded_code_range
struct _d1931; // Field js_entry_stub
struct _d1932; // CXXRecord JSON
struct _d1933; // CXXRecord JSON
struct _d1934; // CXXMethod Parse
struct _d1935; // ParmVar context
struct _d1936; // ParmVar json_string
struct _d1937; // CXXMethod Stringify
struct _d1938; // ParmVar context
struct _d1939; // ParmVar json_object
struct _d1940; // ParmVar gap
struct _d1941; // CXXRecord ValueSerializer
struct _d1942; // CXXRecord ValueSerializer
struct _d1943; // CXXRecord Delegate
struct _d1944; // CXXRecord Delegate
struct _d1945; // CXXDestructor ~Delegate
struct _d1946; // CXXMethod ThrowDataCloneError
struct _d1947; // ParmVar message
struct _d1948; // CXXMethod WriteHostObject
struct _d1949; // ParmVar isolate
struct _d1950; // ParmVar object
struct _d1951; // CXXMethod GetSharedArrayBufferId
struct _d1952; // ParmVar isolate
struct _d1953; // ParmVar shared_array_buffer
struct _d1954; // CXXMethod GetWasmModuleTransferId
struct _d1955; // ParmVar isolate
struct _d1956; // ParmVar module
struct _d1957; // CXXMethod ReallocateBufferMemory
struct _d1958; // ParmVar old_buffer
struct _d1959; // ParmVar size
struct _d1960; // ParmVar actual_size
struct _d1961; // CXXMethod FreeBufferMemory
struct _d1962; // ParmVar buffer
struct _d1963; // CXXMethod operator=
struct _d1964; // ParmVar 
struct _d1965; // CXXConstructor ValueSerializer
struct _d1966; // ParmVar isolate
struct _d1967; // CXXConstructor ValueSerializer
struct _d1968; // ParmVar isolate
struct _d1969; // ParmVar delegate
struct _d1970; // CXXDestructor ~ValueSerializer
struct _d1971; // CXXMethod WriteHeader
struct _d1972; // CXXMethod WriteValue
struct _d1973; // ParmVar context
struct _d1974; // ParmVar value
struct _d1975; // CXXMethod Release
struct _d1976; // ClassTemplateSpecialization pair
struct _d1977; // CXXMethod TransferArrayBuffer
struct _d1978; // ParmVar transfer_id
struct _d1979; // ParmVar array_buffer
struct _d1980; // CXXMethod SetTreatArrayBufferViewsAsHostObjects
struct _d1981; // ParmVar mode
struct _d1982; // CXXMethod WriteUint32
struct _d1983; // ParmVar value
struct _d1984; // CXXMethod WriteUint64
struct _d1985; // ParmVar value
struct _d1986; // CXXMethod WriteDouble
struct _d1987; // ParmVar value
struct _d1988; // CXXMethod WriteRawBytes
struct _d1989; // ParmVar source
struct _d1990; // ParmVar length
struct _d1991; // CXXConstructor ValueSerializer
struct _d1992; // ParmVar 
struct _d1993; // CXXMethod operator=
struct _d1994; // ParmVar 
struct _d1995; // CXXRecord ValueDeserializer
struct _d1996; // CXXRecord ValueDeserializer
struct _d1997; // CXXRecord Delegate
struct _d1998; // CXXRecord Delegate
struct _d1999; // CXXDestructor ~Delegate
struct _d2000; // CXXMethod ReadHostObject
struct _d2001; // ParmVar isolate
struct _d2002; // CXXMethod GetWasmModuleFromId
struct _d2003; // ParmVar isolate
struct _d2004; // ParmVar transfer_id
struct _d2005; // CXXMethod GetSharedArrayBufferFromId
struct _d2006; // ParmVar isolate
struct _d2007; // ParmVar clone_id
struct _d2008; // CXXMethod operator=
struct _d2009; // ParmVar 
struct _d2010; // CXXConstructor ValueDeserializer
struct _d2011; // ParmVar isolate
struct _d2012; // ParmVar data
struct _d2013; // ParmVar size
struct _d2014; // CXXConstructor ValueDeserializer
struct _d2015; // ParmVar isolate
struct _d2016; // ParmVar data
struct _d2017; // ParmVar size
struct _d2018; // ParmVar delegate
struct _d2019; // CXXDestructor ~ValueDeserializer
struct _d2020; // CXXMethod ReadHeader
struct _d2021; // ParmVar context
struct _d2022; // CXXMethod ReadValue
struct _d2023; // ParmVar context
struct _d2024; // CXXMethod TransferArrayBuffer
struct _d2025; // ParmVar transfer_id
struct _d2026; // ParmVar array_buffer
struct _d2027; // CXXMethod TransferSharedArrayBuffer
struct _d2028; // ParmVar id
struct _d2029; // ParmVar shared_array_buffer
struct _d2030; // CXXMethod SetSupportsLegacyWireFormat
struct _d2031; // ParmVar supports_legacy_wire_format
struct _d2032; // CXXMethod SetExpectInlineWasm
struct _d2033; // ParmVar allow_inline_wasm
struct _d2034; // CXXMethod GetWireFormatVersion
struct _d2035; // CXXMethod ReadUint32
struct _d2036; // ParmVar value
struct _d2037; // CXXMethod ReadUint64
struct _d2038; // ParmVar value
struct _d2039; // CXXMethod ReadDouble
struct _d2040; // ParmVar value
struct _d2041; // CXXMethod ReadRawBytes
struct _d2042; // ParmVar length
struct _d2043; // ParmVar data
struct _d2044; // CXXConstructor ValueDeserializer
struct _d2045; // ParmVar 
struct _d2046; // CXXMethod operator=
struct _d2047; // ParmVar 
struct _d2048; // CXXRecord Value
struct _d2049; // CXXMethod IsUndefined
struct _d2050; // CXXMethod IsNull
struct _d2051; // CXXMethod IsNullOrUndefined
struct _d2052; // CXXMethod IsTrue
struct _d2053; // CXXMethod IsFalse
struct _d2054; // CXXMethod IsName
struct _d2055; // CXXMethod IsString
struct _d2056; // CXXMethod IsSymbol
struct _d2057; // CXXMethod IsFunction
struct _d2058; // CXXMethod IsArray
struct _d2059; // CXXMethod IsObject
struct _d2060; // CXXMethod IsBigInt
struct _d2061; // CXXMethod IsBoolean
struct _d2062; // CXXMethod IsNumber
struct _d2063; // CXXMethod IsExternal
struct _d2064; // CXXMethod IsInt32
struct _d2065; // CXXMethod IsUint32
struct _d2066; // CXXMethod IsDate
struct _d2067; // CXXMethod IsArgumentsObject
struct _d2068; // CXXMethod IsBigIntObject
struct _d2069; // CXXMethod IsBooleanObject
struct _d2070; // CXXMethod IsNumberObject
struct _d2071; // CXXMethod IsStringObject
struct _d2072; // CXXMethod IsSymbolObject
struct _d2073; // CXXMethod IsNativeError
struct _d2074; // CXXMethod IsRegExp
struct _d2075; // CXXMethod IsAsyncFunction
struct _d2076; // CXXMethod IsGeneratorFunction
struct _d2077; // CXXMethod IsGeneratorObject
struct _d2078; // CXXMethod IsPromise
struct _d2079; // CXXMethod IsMap
struct _d2080; // CXXMethod IsSet
struct _d2081; // CXXMethod IsMapIterator
struct _d2082; // CXXMethod IsSetIterator
struct _d2083; // CXXMethod IsWeakMap
struct _d2084; // CXXMethod IsWeakSet
struct _d2085; // CXXMethod IsArrayBuffer
struct _d2086; // CXXMethod IsArrayBufferView
struct _d2087; // CXXMethod IsTypedArray
struct _d2088; // CXXMethod IsUint8Array
struct _d2089; // CXXMethod IsUint8ClampedArray
struct _d2090; // CXXMethod IsInt8Array
struct _d2091; // CXXMethod IsUint16Array
struct _d2092; // CXXMethod IsInt16Array
struct _d2093; // CXXMethod IsUint32Array
struct _d2094; // CXXMethod IsInt32Array
struct _d2095; // CXXMethod IsFloat32Array
struct _d2096; // CXXMethod IsFloat64Array
struct _d2097; // CXXMethod IsBigInt64Array
struct _d2098; // CXXMethod IsBigUint64Array
struct _d2099; // CXXMethod IsDataView
struct _d2100; // CXXMethod IsSharedArrayBuffer
struct _d2101; // CXXMethod IsProxy
struct _d2102; // CXXMethod IsWebAssemblyCompiledModule
struct _d2103; // CXXMethod IsModuleNamespaceObject
struct _d2104; // CXXMethod ToBigInt
struct _d2105; // ParmVar context
struct _d2106; // CXXMethod ToNumber
struct _d2107; // ParmVar context
struct _d2108; // CXXMethod ToString
struct _d2109; // ParmVar context
struct _d2110; // CXXMethod ToDetailString
struct _d2111; // ParmVar context
struct _d2112; // CXXMethod ToObject
struct _d2113; // ParmVar context
struct _d2114; // CXXMethod ToInteger
struct _d2115; // ParmVar context
struct _d2116; // CXXMethod ToUint32
struct _d2117; // ParmVar context
struct _d2118; // CXXMethod ToInt32
struct _d2119; // ParmVar context
struct _d2120; // CXXMethod ToBoolean
struct _d2121; // ParmVar isolate
struct _d2122; // CXXMethod ToArrayIndex
struct _d2123; // ParmVar context
struct _d2124; // CXXMethod BooleanValue
struct _d2125; // ParmVar isolate
struct _d2126; // CXXMethod NumberValue
struct _d2127; // ParmVar context
struct _d2128; // CXXMethod IntegerValue
struct _d2129; // ParmVar context
struct _d2130; // CXXMethod Uint32Value
struct _d2131; // ParmVar context
struct _d2132; // CXXMethod Int32Value
struct _d2133; // ParmVar context
struct _d2134; // CXXMethod Equals
struct _d2135; // ParmVar context
struct _d2136; // ParmVar that
struct _d2137; // CXXMethod StrictEquals
struct _d2138; // ParmVar that
struct _d2139; // CXXMethod SameValue
struct _d2140; // ParmVar that
struct _d2141; // FunctionTemplate Cast
struct _d2142; // TemplateTypeParm T
struct _d2143; // CXXMethod Cast
struct _d2144; // ParmVar value
struct _d2145; // CXXMethod TypeOf
struct _d2146; // ParmVar 
struct _d2147; // CXXMethod InstanceOf
struct _d2148; // ParmVar context
struct _d2149; // ParmVar object
struct _d2150; // CXXRecord Primitive
struct _d2151; // CXXRecord Boolean
struct _d2152; // CXXMethod Value
struct _d2153; // CXXMethod Cast
struct _d2154; // ParmVar obj
struct _d2155; // CXXMethod New
struct _d2156; // ParmVar isolate
struct _d2157; // ParmVar value
struct _d2158; // CXXRecord Name
struct _d2159; // CXXMethod GetIdentityHash
struct _d2160; // CXXMethod Cast
struct _d2161; // ParmVar obj
struct _d2162; // Enum NewStringType
struct _d2163; // EnumConstant kNormal
struct _d2164; // EnumConstant kInternalized
struct _d2165; // CXXRecord String
struct _d2166; // Var kMaxLength
struct _d2167; // Enum Encoding
struct _d2168; // EnumConstant UNKNOWN_ENCODING
struct _d2169; // EnumConstant TWO_BYTE_ENCODING
struct _d2170; // EnumConstant ONE_BYTE_ENCODING
struct _d2171; // CXXMethod Length
struct _d2172; // CXXMethod Utf8Length
struct _d2173; // ParmVar isolate
struct _d2174; // CXXMethod IsOneByte
struct _d2175; // CXXMethod ContainsOnlyOneByte
struct _d2176; // Enum WriteOptions
struct _d2177; // EnumConstant NO_OPTIONS
struct _d2178; // EnumConstant HINT_MANY_WRITES_EXPECTED
struct _d2179; // EnumConstant NO_NULL_TERMINATION
struct _d2180; // EnumConstant PRESERVE_ONE_BYTE_NULL
struct _d2181; // EnumConstant REPLACE_INVALID_UTF8
struct _d2182; // CXXMethod Write
struct _d2183; // ParmVar isolate
struct _d2184; // ParmVar buffer
struct _d2185; // ParmVar start
struct _d2186; // ParmVar length
struct _d2187; // ParmVar options
struct _d2188; // CXXMethod WriteOneByte
struct _d2189; // ParmVar isolate
struct _d2190; // ParmVar buffer
struct _d2191; // ParmVar start
struct _d2192; // ParmVar length
struct _d2193; // ParmVar options
struct _d2194; // CXXMethod WriteUtf8
struct _d2195; // ParmVar isolate
struct _d2196; // ParmVar buffer
struct _d2197; // ParmVar length
struct _d2198; // ParmVar nchars_ref
struct _d2199; // ParmVar options
struct _d2200; // CXXMethod Empty
struct _d2201; // ParmVar isolate
struct _d2202; // CXXMethod IsExternal
struct _d2203; // CXXMethod IsExternalOneByte
struct _d2204; // CXXRecord ExternalStringResourceBase
struct _d2205; // CXXRecord ExternalStringResourceBase
struct _d2206; // CXXDestructor ~ExternalStringResourceBase
struct _d2207; // CXXMethod IsCacheable
struct _d2208; // CXXConstructor ExternalStringResourceBase
struct _d2209; // ParmVar 
struct _d2210; // CXXMethod operator=
struct _d2211; // ParmVar 
struct _d2212; // CXXConstructor ExternalStringResourceBase
struct _d2213; // CXXMethod Dispose
struct _d2214; // CXXMethod Lock
struct _d2215; // CXXMethod Unlock
struct _d2216; // CXXRecord ExternalStringResource
struct _d2217; // CXXRecord ExternalStringResource
struct _d2218; // CXXDestructor ~ExternalStringResource
struct _d2219; // CXXMethod data
struct _d2220; // CXXMethod length
struct _d2221; // CXXConstructor ExternalStringResource
struct _d2222; // CXXConstructor ExternalStringResource
struct _d2223; // ParmVar 
struct _d2224; // CXXMethod operator=
struct _d2225; // ParmVar 
struct _d2226; // CXXRecord ExternalOneByteStringResource
struct _d2227; // CXXRecord ExternalOneByteStringResource
struct _d2228; // CXXDestructor ~ExternalOneByteStringResource
struct _d2229; // CXXMethod data
struct _d2230; // CXXMethod length
struct _d2231; // CXXConstructor ExternalOneByteStringResource
struct _d2232; // CXXConstructor ExternalOneByteStringResource
struct _d2233; // ParmVar 
struct _d2234; // CXXMethod operator=
struct _d2235; // ParmVar 
struct _d2236; // CXXMethod GetExternalStringResourceBase
struct _d2237; // ParmVar encoding_out
struct _d2238; // CXXMethod GetExternalStringResource
struct _d2239; // CXXMethod GetExternalOneByteStringResource
struct _d2240; // CXXMethod Cast
struct _d2241; // ParmVar obj
struct _d2242; // CXXMethod NewFromUtf8
struct _d2243; // ParmVar isolate
struct _d2244; // ParmVar data
struct _d2245; // ParmVar type
struct _d2246; // ParmVar length
struct _d2247; // CXXMethod NewFromOneByte
struct _d2248; // ParmVar isolate
struct _d2249; // ParmVar data
struct _d2250; // ParmVar type
struct _d2251; // ParmVar length
struct _d2252; // CXXMethod NewFromTwoByte
struct _d2253; // ParmVar isolate
struct _d2254; // ParmVar data
struct _d2255; // ParmVar type
struct _d2256; // ParmVar length
struct _d2257; // CXXMethod Concat
struct _d2258; // ParmVar isolate
struct _d2259; // ParmVar left
struct _d2260; // ParmVar right
struct _d2261; // CXXMethod NewExternalTwoByte
struct _d2262; // ParmVar isolate
struct _d2263; // ParmVar resource
struct _d2264; // CXXMethod MakeExternal
struct _d2265; // ParmVar resource
struct _d2266; // CXXMethod NewExternalOneByte
struct _d2267; // ParmVar isolate
struct _d2268; // ParmVar resource
struct _d2269; // CXXMethod MakeExternal
struct _d2270; // ParmVar resource
struct _d2271; // CXXMethod CanMakeExternal
struct _d2272; // CXXMethod StringEquals
struct _d2273; // ParmVar str
struct _d2274; // CXXRecord Utf8Value
struct _d2275; // CXXRecord Utf8Value
struct _d2276; // CXXConstructor Utf8Value
struct _d2277; // ParmVar isolate
struct _d2278; // ParmVar obj
struct _d2279; // CXXDestructor ~Utf8Value
struct _d2280; // CXXMethod operator*
struct _d2281; // CXXMethod operator*
struct _d2282; // CXXMethod length
struct _d2283; // CXXConstructor Utf8Value
struct _d2284; // ParmVar 
struct _d2285; // CXXMethod operator=
struct _d2286; // ParmVar 
struct _d2287; // CXXRecord Value
struct _d2288; // CXXRecord Value
struct _d2289; // CXXConstructor Value
struct _d2290; // ParmVar isolate
struct _d2291; // ParmVar obj
struct _d2292; // CXXDestructor ~Value
struct _d2293; // CXXMethod operator*
struct _d2294; // CXXMethod operator*
struct _d2295; // CXXMethod length
struct _d2296; // CXXConstructor Value
struct _d2297; // ParmVar 
struct _d2298; // CXXMethod operator=
struct _d2299; // ParmVar 
struct _d2300; // CXXRecord Symbol
struct _d2301; // CXXMethod Name
struct _d2302; // CXXMethod New
struct _d2303; // ParmVar isolate
struct _d2304; // ParmVar name
struct _d2305; // CXXMethod For
struct _d2306; // ParmVar isolate
struct _d2307; // ParmVar name
struct _d2308; // CXXMethod ForApi
struct _d2309; // ParmVar isolate
struct _d2310; // ParmVar name
struct _d2311; // CXXMethod GetAsyncIterator
struct _d2312; // ParmVar isolate
struct _d2313; // CXXMethod GetHasInstance
struct _d2314; // ParmVar isolate
struct _d2315; // CXXMethod GetIsConcatSpreadable
struct _d2316; // ParmVar isolate
struct _d2317; // CXXMethod GetIterator
struct _d2318; // ParmVar isolate
struct _d2319; // CXXMethod GetMatch
struct _d2320; // ParmVar isolate
struct _d2321; // CXXMethod GetReplace
struct _d2322; // ParmVar isolate
struct _d2323; // CXXMethod GetSearch
struct _d2324; // ParmVar isolate
struct _d2325; // CXXMethod GetSplit
struct _d2326; // ParmVar isolate
struct _d2327; // CXXMethod GetToPrimitive
struct _d2328; // ParmVar isolate
struct _d2329; // CXXMethod GetToStringTag
struct _d2330; // ParmVar isolate
struct _d2331; // CXXMethod GetUnscopables
struct _d2332; // ParmVar isolate
struct _d2333; // CXXMethod Cast
struct _d2334; // ParmVar obj
struct _d2335; // CXXRecord Private
struct _d2336; // CXXMethod Name
struct _d2337; // CXXMethod New
struct _d2338; // ParmVar isolate
struct _d2339; // ParmVar name
struct _d2340; // CXXMethod ForApi
struct _d2341; // ParmVar isolate
struct _d2342; // ParmVar name
struct _d2343; // CXXMethod Cast
struct _d2344; // ParmVar data
struct _d2345; // CXXRecord Number
struct _d2346; // CXXMethod Value
struct _d2347; // CXXMethod New
struct _d2348; // ParmVar isolate
struct _d2349; // ParmVar value
struct _d2350; // CXXMethod Cast
struct _d2351; // ParmVar obj
struct _d2352; // CXXRecord Integer
struct _d2353; // CXXMethod New
struct _d2354; // ParmVar isolate
struct _d2355; // ParmVar value
struct _d2356; // CXXMethod NewFromUnsigned
struct _d2357; // ParmVar isolate
struct _d2358; // ParmVar value
struct _d2359; // CXXMethod Value
struct _d2360; // CXXMethod Cast
struct _d2361; // ParmVar obj
struct _d2362; // CXXRecord Int32
struct _d2363; // CXXMethod Value
struct _d2364; // CXXMethod Cast
struct _d2365; // ParmVar obj
struct _d2366; // CXXRecord Uint32
struct _d2367; // CXXMethod Value
struct _d2368; // CXXMethod Cast
struct _d2369; // ParmVar obj
struct _d2370; // CXXRecord BigInt
struct _d2371; // CXXMethod New
struct _d2372; // ParmVar isolate
struct _d2373; // ParmVar value
struct _d2374; // CXXMethod NewFromUnsigned
struct _d2375; // ParmVar isolate
struct _d2376; // ParmVar value
struct _d2377; // CXXMethod NewFromWords
struct _d2378; // ParmVar context
struct _d2379; // ParmVar sign_bit
struct _d2380; // ParmVar word_count
struct _d2381; // ParmVar words
struct _d2382; // CXXMethod Uint64Value
struct _d2383; // ParmVar lossless
struct _d2384; // CXXMethod Int64Value
struct _d2385; // ParmVar lossless
struct _d2386; // CXXMethod WordCount
struct _d2387; // CXXMethod ToWordsArray
struct _d2388; // ParmVar sign_bit
struct _d2389; // ParmVar word_count
struct _d2390; // ParmVar words
struct _d2391; // CXXMethod Cast
struct _d2392; // ParmVar obj
struct _d2393; // Enum PropertyAttribute
struct _d2394; // EnumConstant None
struct _d2395; // EnumConstant ReadOnly
struct _d2396; // EnumConstant DontEnum
struct _d2397; // EnumConstant DontDelete
struct _d2398; // Typedef AccessorGetterCallback
struct _d2399; // Typedef AccessorNameGetterCallback
struct _d2400; // Typedef AccessorSetterCallback
struct _d2401; // Typedef AccessorNameSetterCallback
struct _d2402; // Enum AccessControl
struct _d2403; // EnumConstant DEFAULT
struct _d2404; // EnumConstant ALL_CAN_READ
struct _d2405; // EnumConstant ALL_CAN_WRITE
struct _d2406; // EnumConstant PROHIBITS_OVERWRITING
struct _d2407; // Enum PropertyFilter
struct _d2408; // EnumConstant ALL_PROPERTIES
struct _d2409; // EnumConstant ONLY_WRITABLE
struct _d2410; // EnumConstant ONLY_ENUMERABLE
struct _d2411; // EnumConstant ONLY_CONFIGURABLE
struct _d2412; // EnumConstant SKIP_STRINGS
struct _d2413; // EnumConstant SKIP_SYMBOLS
struct _d2414; // Enum SideEffectType
struct _d2415; // EnumConstant kHasSideEffect
struct _d2416; // EnumConstant kHasNoSideEffect
struct _d2417; // EnumConstant kHasSideEffectToReceiver
struct _d2418; // Enum KeyCollectionMode
struct _d2419; // EnumConstant kOwnOnly
struct _d2420; // EnumConstant kIncludePrototypes
struct _d2421; // Enum IndexFilter
struct _d2422; // EnumConstant kIncludeIndices
struct _d2423; // EnumConstant kSkipIndices
struct _d2424; // Enum KeyConversionMode
struct _d2425; // EnumConstant kConvertToString
struct _d2426; // EnumConstant kKeepNumbers
struct _d2427; // Enum IntegrityLevel
struct _d2428; // EnumConstant kFrozen
struct _d2429; // EnumConstant kSealed
struct _d2430; // CXXRecord Object
struct _d2431; // CXXMethod Set
struct _d2432; // ParmVar key
struct _d2433; // ParmVar value
struct _d2434; // CXXMethod Set
struct _d2435; // ParmVar context
struct _d2436; // ParmVar key
struct _d2437; // ParmVar value
struct _d2438; // CXXMethod Set
struct _d2439; // ParmVar index
struct _d2440; // ParmVar value
struct _d2441; // CXXMethod Set
struct _d2442; // ParmVar context
struct _d2443; // ParmVar index
struct _d2444; // ParmVar value
struct _d2445; // CXXMethod CreateDataProperty
struct _d2446; // ParmVar context
struct _d2447; // ParmVar key
struct _d2448; // ParmVar value
struct _d2449; // CXXMethod CreateDataProperty
struct _d2450; // ParmVar context
struct _d2451; // ParmVar index
struct _d2452; // ParmVar value
struct _d2453; // CXXMethod DefineOwnProperty
struct _d2454; // ParmVar context
struct _d2455; // ParmVar key
struct _d2456; // ParmVar value
struct _d2457; // ParmVar attributes
struct _d2458; // CXXMethod DefineProperty
struct _d2459; // ParmVar context
struct _d2460; // ParmVar key
struct _d2461; // ParmVar descriptor
struct _d2462; // CXXMethod Get
struct _d2463; // ParmVar key
struct _d2464; // CXXMethod Get
struct _d2465; // ParmVar context
struct _d2466; // ParmVar key
struct _d2467; // CXXMethod Get
struct _d2468; // ParmVar index
struct _d2469; // CXXMethod Get
struct _d2470; // ParmVar context
struct _d2471; // ParmVar index
struct _d2472; // CXXMethod GetPropertyAttributes
struct _d2473; // ParmVar context
struct _d2474; // ParmVar key
struct _d2475; // CXXMethod GetOwnPropertyDescriptor
struct _d2476; // ParmVar context
struct _d2477; // ParmVar key
struct _d2478; // CXXMethod Has
struct _d2479; // ParmVar context
struct _d2480; // ParmVar key
struct _d2481; // CXXMethod Delete
struct _d2482; // ParmVar context
struct _d2483; // ParmVar key
struct _d2484; // CXXMethod Has
struct _d2485; // ParmVar context
struct _d2486; // ParmVar index
struct _d2487; // CXXMethod Delete
struct _d2488; // ParmVar context
struct _d2489; // ParmVar index
struct _d2490; // CXXMethod SetAccessor
struct _d2491; // ParmVar context
struct _d2492; // ParmVar name
struct _d2493; // ParmVar getter
struct _d2494; // ParmVar setter
struct _d2495; // ParmVar data
struct _d2496; // ParmVar settings
struct _d2497; // ParmVar attribute
struct _d2498; // ParmVar getter_side_effect_type
struct _d2499; // ParmVar setter_side_effect_type
struct _d2500; // CXXMethod SetAccessorProperty
struct _d2501; // ParmVar name
struct _d2502; // ParmVar getter
struct _d2503; // ParmVar setter
struct _d2504; // ParmVar attribute
struct _d2505; // ParmVar settings
struct _d2506; // CXXMethod SetNativeDataProperty
struct _d2507; // ParmVar context
struct _d2508; // ParmVar name
struct _d2509; // ParmVar getter
struct _d2510; // ParmVar setter
struct _d2511; // ParmVar data
struct _d2512; // ParmVar attributes
struct _d2513; // ParmVar getter_side_effect_type
struct _d2514; // ParmVar setter_side_effect_type
struct _d2515; // CXXMethod SetLazyDataProperty
struct _d2516; // ParmVar context
struct _d2517; // ParmVar name
struct _d2518; // ParmVar getter
struct _d2519; // ParmVar data
struct _d2520; // ParmVar attributes
struct _d2521; // ParmVar getter_side_effect_type
struct _d2522; // ParmVar setter_side_effect_type
struct _d2523; // CXXMethod HasPrivate
struct _d2524; // ParmVar context
struct _d2525; // ParmVar key
struct _d2526; // CXXMethod SetPrivate
struct _d2527; // ParmVar context
struct _d2528; // ParmVar key
struct _d2529; // ParmVar value
struct _d2530; // CXXMethod DeletePrivate
struct _d2531; // ParmVar context
struct _d2532; // ParmVar key
struct _d2533; // CXXMethod GetPrivate
struct _d2534; // ParmVar context
struct _d2535; // ParmVar key
struct _d2536; // CXXMethod GetPropertyNames
struct _d2537; // ParmVar context
struct _d2538; // CXXMethod GetPropertyNames
struct _d2539; // ParmVar context
struct _d2540; // ParmVar mode
struct _d2541; // ParmVar property_filter
struct _d2542; // ParmVar index_filter
struct _d2543; // ParmVar key_conversion
struct _d2544; // CXXMethod GetOwnPropertyNames
struct _d2545; // ParmVar context
struct _d2546; // CXXMethod GetOwnPropertyNames
struct _d2547; // ParmVar context
struct _d2548; // ParmVar filter
struct _d2549; // ParmVar key_conversion
struct _d2550; // CXXMethod GetPrototype
struct _d2551; // CXXMethod SetPrototype
struct _d2552; // ParmVar context
struct _d2553; // ParmVar prototype
struct _d2554; // CXXMethod FindInstanceInPrototypeChain
struct _d2555; // ParmVar tmpl
struct _d2556; // CXXMethod ObjectProtoToString
struct _d2557; // ParmVar context
struct _d2558; // CXXMethod GetConstructorName
struct _d2559; // CXXMethod SetIntegrityLevel
struct _d2560; // ParmVar context
struct _d2561; // ParmVar level
struct _d2562; // CXXMethod InternalFieldCount
struct _d2563; // CXXMethod InternalFieldCount
struct _d2564; // ParmVar object
struct _d2565; // CXXMethod InternalFieldCount
struct _d2566; // ParmVar object
struct _d2567; // CXXMethod GetInternalField
struct _d2568; // ParmVar index
struct _d2569; // CXXMethod SetInternalField
struct _d2570; // ParmVar index
struct _d2571; // ParmVar value
struct _d2572; // CXXMethod GetAlignedPointerFromInternalField
struct _d2573; // ParmVar index
struct _d2574; // CXXMethod GetAlignedPointerFromInternalField
struct _d2575; // ParmVar object
struct _d2576; // ParmVar index
struct _d2577; // CXXMethod GetAlignedPointerFromInternalField
struct _d2578; // ParmVar object
struct _d2579; // ParmVar index
struct _d2580; // CXXMethod SetAlignedPointerInInternalField
struct _d2581; // ParmVar index
struct _d2582; // ParmVar value
struct _d2583; // CXXMethod SetAlignedPointerInInternalFields
struct _d2584; // ParmVar argc
struct _d2585; // ParmVar indices
struct _d2586; // ParmVar values
struct _d2587; // CXXMethod HasOwnProperty
struct _d2588; // ParmVar context
struct _d2589; // ParmVar key
struct _d2590; // CXXMethod HasOwnProperty
struct _d2591; // ParmVar context
struct _d2592; // ParmVar index
struct _d2593; // CXXMethod HasRealNamedProperty
struct _d2594; // ParmVar context
struct _d2595; // ParmVar key
struct _d2596; // CXXMethod HasRealIndexedProperty
struct _d2597; // ParmVar context
struct _d2598; // ParmVar index
struct _d2599; // CXXMethod HasRealNamedCallbackProperty
struct _d2600; // ParmVar context
struct _d2601; // ParmVar key
struct _d2602; // CXXMethod GetRealNamedPropertyInPrototypeChain
struct _d2603; // ParmVar context
struct _d2604; // ParmVar key
struct _d2605; // CXXMethod GetRealNamedPropertyAttributesInPrototypeChain
struct _d2606; // ParmVar context
struct _d2607; // ParmVar key
struct _d2608; // CXXMethod GetRealNamedProperty
struct _d2609; // ParmVar context
struct _d2610; // ParmVar key
struct _d2611; // CXXMethod GetRealNamedPropertyAttributes
struct _d2612; // ParmVar context
struct _d2613; // ParmVar key
struct _d2614; // CXXMethod HasNamedLookupInterceptor
struct _d2615; // CXXMethod HasIndexedLookupInterceptor
struct _d2616; // CXXMethod GetIdentityHash
struct _d2617; // CXXMethod Clone
struct _d2618; // CXXMethod CreationContext
struct _d2619; // CXXMethod CreationContext
struct _d2620; // ParmVar object
struct _d2621; // CXXMethod IsCallable
struct _d2622; // CXXMethod IsConstructor
struct _d2623; // CXXMethod CallAsFunction
struct _d2624; // ParmVar context
struct _d2625; // ParmVar recv
struct _d2626; // ParmVar argc
struct _d2627; // ParmVar argv
struct _d2628; // CXXMethod CallAsConstructor
struct _d2629; // ParmVar context
struct _d2630; // ParmVar argc
struct _d2631; // ParmVar argv
struct _d2632; // CXXMethod GetIsolate
struct _d2633; // CXXMethod PreviewEntries
struct _d2634; // ParmVar is_key_value
struct _d2635; // CXXMethod New
struct _d2636; // ParmVar isolate
struct _d2637; // CXXMethod New
struct _d2638; // ParmVar isolate
struct _d2639; // ParmVar prototype_or_null
struct _d2640; // ParmVar names
struct _d2641; // ParmVar values
struct _d2642; // ParmVar length
struct _d2643; // CXXMethod Cast
struct _d2644; // ParmVar obj
struct _d2645; // CXXRecord Array
struct _d2646; // CXXMethod Length
struct _d2647; // CXXMethod New
struct _d2648; // ParmVar isolate
struct _d2649; // ParmVar length
struct _d2650; // CXXMethod New
struct _d2651; // ParmVar isolate
struct _d2652; // ParmVar elements
struct _d2653; // ParmVar length
struct _d2654; // CXXMethod Cast
struct _d2655; // ParmVar obj
struct _d2656; // CXXRecord Map
struct _d2657; // CXXRecord Map
struct _d2658; // CXXMethod Size
struct _d2659; // CXXMethod Clear
struct _d2660; // CXXMethod Get
struct _d2661; // ParmVar context
struct _d2662; // ParmVar key
struct _d2663; // CXXMethod Set
struct _d2664; // ParmVar context
struct _d2665; // ParmVar key
struct _d2666; // ParmVar value
struct _d2667; // CXXMethod Has
struct _d2668; // ParmVar context
struct _d2669; // ParmVar key
struct _d2670; // CXXMethod Delete
struct _d2671; // ParmVar context
struct _d2672; // ParmVar key
struct _d2673; // CXXMethod AsArray
struct _d2674; // CXXMethod New
struct _d2675; // ParmVar isolate
struct _d2676; // CXXMethod Cast
struct _d2677; // ParmVar obj
struct _d2678; // CXXRecord Set
struct _d2679; // CXXRecord Set
struct _d2680; // CXXMethod Size
struct _d2681; // CXXMethod Clear
struct _d2682; // CXXMethod Add
struct _d2683; // ParmVar context
struct _d2684; // ParmVar key
struct _d2685; // CXXMethod Has
struct _d2686; // ParmVar context
struct _d2687; // ParmVar key
struct _d2688; // CXXMethod Delete
struct _d2689; // ParmVar context
struct _d2690; // ParmVar key
struct _d2691; // CXXMethod AsArray
struct _d2692; // CXXMethod New
struct _d2693; // ParmVar isolate
struct _d2694; // CXXMethod Cast
struct _d2695; // ParmVar obj
struct _d2696; // TemplateTypeParm T
struct _d2697; // CXXRecord ReturnValue
struct _d2698; // FunctionTemplate ReturnValue<T>
struct _d2699; // TemplateTypeParm S
struct _d2700; // CXXConstructor ReturnValue<T>
struct _d2701; // ParmVar that
struct _d2702; // FunctionTemplate Set
struct _d2703; // TemplateTypeParm S
struct _d2704; // CXXMethod Set
struct _d2705; // ParmVar handle
struct _d2706; // FunctionTemplate Set
struct _d2707; // TemplateTypeParm S
struct _d2708; // CXXMethod Set
struct _d2709; // ParmVar handle
struct _d2710; // FunctionTemplate Set
struct _d2711; // TemplateTypeParm S
struct _d2712; // CXXMethod Set
struct _d2713; // ParmVar handle
struct _d2714; // CXXMethod Set
struct _d2715; // ParmVar value
struct _d2716; // CXXMethod Set
struct _d2717; // ParmVar i
struct _d2718; // CXXMethod Set
struct _d2719; // ParmVar i
struct _d2720; // CXXMethod Set
struct _d2721; // ParmVar i
struct _d2722; // CXXMethod SetNull
struct _d2723; // CXXMethod SetUndefined
struct _d2724; // CXXMethod SetEmptyString
struct _d2725; // CXXMethod GetIsolate
struct _d2726; // FunctionTemplate Set
struct _d2727; // TemplateTypeParm S
struct _d2728; // CXXMethod Set
struct _d2729; // ParmVar whatever
struct _d2730; // CXXMethod Get
struct _d2731; // TemplateTypeParm T
struct _d2732; // CXXRecord FunctionCallbackInfo
struct _d2733; // CXXMethod Length
struct _d2734; // CXXMethod operator[]
struct _d2735; // ParmVar i
struct _d2736; // CXXMethod This
struct _d2737; // CXXMethod Holder
struct _d2738; // CXXMethod NewTarget
struct _d2739; // CXXMethod IsConstructCall
struct _d2740; // CXXMethod Data
struct _d2741; // CXXMethod GetIsolate
struct _d2742; // CXXMethod GetReturnValue
struct _d2743; // Var kArgsLength
struct _d2744; // Var kHolderIndex
struct _d2745; // Var kIsolateIndex
struct _d2746; // Var kReturnValueDefaultValueIndex
struct _d2747; // Var kReturnValueIndex
struct _d2748; // Var kDataIndex
struct _d2749; // Var kNewTargetIndex
struct _d2750; // CXXConstructor FunctionCallbackInfo<T>
struct _d2751; // ParmVar implicit_args
struct _d2752; // ParmVar values
struct _d2753; // ParmVar length
struct _d2754; // Field implicit_args_
struct _d2755; // Field values_
struct _d2756; // Field length_
struct _d2757; // TemplateTypeParm T
struct _d2758; // CXXRecord PropertyCallbackInfo
struct _d2759; // CXXMethod GetIsolate
struct _d2760; // CXXMethod Data
struct _d2761; // CXXMethod This
struct _d2762; // CXXMethod Holder
struct _d2763; // CXXMethod GetReturnValue
struct _d2764; // CXXMethod ShouldThrowOnError
struct _d2765; // Var kArgsLength
struct _d2766; // Var kShouldThrowOnErrorIndex
struct _d2767; // Var kHolderIndex
struct _d2768; // Var kIsolateIndex
struct _d2769; // Var kReturnValueDefaultValueIndex
struct _d2770; // Var kReturnValueIndex
struct _d2771; // Var kDataIndex
struct _d2772; // Var kThisIndex
struct _d2773; // CXXConstructor PropertyCallbackInfo<T>
struct _d2774; // ParmVar args
struct _d2775; // Field args_
struct _d2776; // Typedef FunctionCallback
struct _d2777; // Enum ConstructorBehavior
struct _d2778; // EnumConstant kThrow
struct _d2779; // EnumConstant kAllow
struct _d2780; // CXXRecord Function
struct _d2781; // CXXMethod New
struct _d2782; // ParmVar context
struct _d2783; // ParmVar callback
struct _d2784; // ParmVar data
struct _d2785; // ParmVar length
struct _d2786; // ParmVar behavior
struct _d2787; // ParmVar side_effect_type
struct _d2788; // CXXMethod NewInstance
struct _d2789; // ParmVar context
struct _d2790; // ParmVar argc
struct _d2791; // ParmVar argv
struct _d2792; // CXXMethod NewInstance
struct _d2793; // ParmVar context
struct _d2794; // CXXMethod NewInstanceWithSideEffectType
struct _d2795; // ParmVar context
struct _d2796; // ParmVar argc
struct _d2797; // ParmVar argv
struct _d2798; // ParmVar side_effect_type
struct _d2799; // CXXMethod Call
struct _d2800; // ParmVar context
struct _d2801; // ParmVar recv
struct _d2802; // ParmVar argc
struct _d2803; // ParmVar argv
struct _d2804; // CXXMethod SetName
struct _d2805; // ParmVar name
struct _d2806; // CXXMethod GetName
struct _d2807; // CXXMethod GetInferredName
struct _d2808; // CXXMethod GetDebugName
struct _d2809; // CXXMethod GetDisplayName
struct _d2810; // CXXMethod GetScriptLineNumber
struct _d2811; // CXXMethod GetScriptColumnNumber
struct _d2812; // CXXMethod ScriptId
struct _d2813; // CXXMethod GetBoundFunction
struct _d2814; // CXXMethod GetScriptOrigin
struct _d2815; // CXXMethod Cast
struct _d2816; // ParmVar obj
struct _d2817; // Var kLineOffsetNotFound
struct _d2818; // CXXRecord Promise
struct _d2819; // Enum PromiseState
struct _d2820; // EnumConstant kPending
struct _d2821; // EnumConstant kFulfilled
struct _d2822; // EnumConstant kRejected
struct _d2823; // CXXRecord Resolver
struct _d2824; // CXXRecord Resolver
struct _d2825; // CXXMethod New
struct _d2826; // ParmVar context
struct _d2827; // CXXMethod GetPromise
struct _d2828; // CXXMethod Resolve
struct _d2829; // ParmVar context
struct _d2830; // ParmVar value
struct _d2831; // CXXMethod Reject
struct _d2832; // ParmVar context
struct _d2833; // ParmVar value
struct _d2834; // CXXMethod Cast
struct _d2835; // ParmVar obj
struct _d2836; // CXXMethod Catch
struct _d2837; // ParmVar context
struct _d2838; // ParmVar handler
struct _d2839; // CXXMethod Then
struct _d2840; // ParmVar context
struct _d2841; // ParmVar handler
struct _d2842; // CXXMethod Then
struct _d2843; // ParmVar context
struct _d2844; // ParmVar on_fulfilled
struct _d2845; // ParmVar on_rejected
struct _d2846; // CXXMethod HasHandler
struct _d2847; // CXXMethod Result
struct _d2848; // CXXMethod State
struct _d2849; // CXXMethod MarkAsHandled
struct _d2850; // CXXMethod Cast
struct _d2851; // ParmVar obj
struct _d2852; // Var kEmbedderFieldCount
struct _d2853; // CXXRecord PropertyDescriptor
struct _d2854; // CXXConstructor PropertyDescriptor
struct _d2855; // CXXConstructor PropertyDescriptor
struct _d2856; // ParmVar value
struct _d2857; // CXXConstructor PropertyDescriptor
struct _d2858; // ParmVar value
struct _d2859; // ParmVar writable
struct _d2860; // CXXConstructor PropertyDescriptor
struct _d2861; // ParmVar get
struct _d2862; // ParmVar set
struct _d2863; // CXXDestructor ~PropertyDescriptor
struct _d2864; // CXXMethod value
struct _d2865; // CXXMethod has_value
struct _d2866; // CXXMethod get
struct _d2867; // CXXMethod has_get
struct _d2868; // CXXMethod set
struct _d2869; // CXXMethod has_set
struct _d2870; // CXXMethod set_enumerable
struct _d2871; // ParmVar enumerable
struct _d2872; // CXXMethod enumerable
struct _d2873; // CXXMethod has_enumerable
struct _d2874; // CXXMethod set_configurable
struct _d2875; // ParmVar configurable
struct _d2876; // CXXMethod configurable
struct _d2877; // CXXMethod has_configurable
struct _d2878; // CXXMethod writable
struct _d2879; // CXXMethod has_writable
struct _d2880; // CXXRecord PrivateData
struct _d2881; // CXXMethod get_private
struct _d2882; // CXXConstructor PropertyDescriptor
struct _d2883; // ParmVar 
struct _d2884; // CXXMethod operator=
struct _d2885; // ParmVar 
struct _d2886; // CXXRecord Proxy
struct _d2887; // CXXMethod GetTarget
struct _d2888; // CXXMethod GetHandler
struct _d2889; // CXXMethod IsRevoked
struct _d2890; // CXXMethod Revoke
struct _d2891; // CXXMethod New
struct _d2892; // ParmVar context
struct _d2893; // ParmVar local_target
struct _d2894; // ParmVar local_handler
struct _d2895; // CXXMethod Cast
struct _d2896; // ParmVar obj
struct _d2897; // ClassTemplate MemorySpan
struct _d2898; // TemplateTypeParm T
struct _d2899; // CXXRecord MemorySpan
struct _d2900; // CXXRecord MemorySpan
struct _d2901; // CXXConstructor MemorySpan<T>
struct _d2902; // CXXConstructor MemorySpan<T>
struct _d2903; // ParmVar data
struct _d2904; // ParmVar size
struct _d2905; // CXXMethod data
struct _d2906; // CXXMethod size
struct _d2907; // ClassTemplateSpecialization MemorySpan
struct _d2908; // CXXConstructor MemorySpan
struct _d2909; // CXXConstructor MemorySpan
struct _d2910; // ParmVar data
struct _d2911; // ParmVar size
struct _d2912; // CXXMethod data
struct _d2913; // CXXMethod size
struct _d2914; // CXXConstructor MemorySpan
struct _d2915; // ParmVar 
struct _d2916; // CXXConstructor MemorySpan
struct _d2917; // ParmVar 
struct _d2918; // CXXRecord OwnedBuffer
struct _d2919; // CXXRecord OwnedBuffer
struct _d2920; // Field buffer
struct _d2921; // ClassTemplateSpecialization unique_ptr
struct _d2922; // Field size
struct _d2923; // CXXConstructor OwnedBuffer
struct _d2924; // ParmVar buffer
struct _d2925; // ParmVar size
struct _d2926; // CXXConstructor OwnedBuffer
struct _d2927; // CXXConstructor OwnedBuffer
struct _d2928; // ParmVar 
struct _d2929; // CXXConstructor OwnedBuffer
struct _d2930; // ParmVar 
struct _d2931; // CXXMethod operator=
struct _d2932; // ParmVar 
struct _d2933; // CXXDestructor ~OwnedBuffer
struct _d2934; // CXXMethod operator=
struct _d2935; // ParmVar 
struct _d2936; // CXXRecord CompiledWasmModule
struct _d2937; // CXXRecord CompiledWasmModule
struct _d2938; // CXXMethod Serialize
struct _d2939; // CXXMethod GetWireBytesRef
struct _d2940; // CXXConstructor CompiledWasmModule
struct _d2941; // ParmVar 
struct _d2942; // CXXConstructor CompiledWasmModule
struct _d2943; // ParmVar 
struct _d2944; // CXXMethod operator=
struct _d2945; // ParmVar 
struct _d2946; // CXXDestructor ~CompiledWasmModule
struct _d2947; // CXXRecord WasmModuleObject
struct _d2948; // CXXRecord TransferrableModule
struct _d2949; // CXXRecord TransferrableModule
struct _d2950; // CXXConstructor TransferrableModule
struct _d2951; // ParmVar src
struct _d2952; // CXXConstructor TransferrableModule
struct _d2953; // ParmVar src
struct _d2954; // CXXMethod operator=
struct _d2955; // ParmVar src
struct _d2956; // CXXMethod operator=
struct _d2957; // ParmVar src
struct _d2958; // CXXDestructor ~TransferrableModule
struct _d2959; // CXXMethod GetTransferrableModule
struct _d2960; // CXXMethod FromTransferrableModule
struct _d2961; // ParmVar isolate
struct _d2962; // ParmVar 
struct _d2963; // CXXMethod GetCompiledModule
struct _d2964; // CXXMethod DeserializeOrCompile
struct _d2965; // ParmVar isolate
struct _d2966; // ParmVar serialized_module
struct _d2967; // ParmVar wire_bytes
struct _d2968; // CXXMethod Cast
struct _d2969; // ParmVar obj
struct _d2970; // CXXRecord WasmStreaming
struct _d2971; // CXXRecord WasmStreaming
struct _d2972; // CXXRecord WasmStreamingImpl
struct _d2973; // CXXRecord Client
struct _d2974; // CXXRecord Client
struct _d2975; // CXXDestructor ~Client
struct _d2976; // CXXMethod OnModuleCompiled
struct _d2977; // ParmVar compiled_module
struct _d2978; // CXXMethod operator=
struct _d2979; // ParmVar 
struct _d2980; // CXXConstructor WasmStreaming
struct _d2981; // ClassTemplateSpecialization unique_ptr
struct _d2982; // ParmVar impl
struct _d2983; // CXXDestructor ~WasmStreaming
struct _d2984; // CXXMethod OnBytesReceived
struct _d2985; // ParmVar bytes
struct _d2986; // ParmVar size
struct _d2987; // CXXMethod Finish
struct _d2988; // CXXMethod Abort
struct _d2989; // ParmVar exception
struct _d2990; // CXXMethod SetCompiledModuleBytes
struct _d2991; // ParmVar bytes
struct _d2992; // ParmVar size
struct _d2993; // CXXMethod SetClient
struct _d2994; // ClassTemplateSpecialization shared_ptr
struct _d2995; // ParmVar client
struct _d2996; // CXXMethod Unpack
struct _d2997; // ClassTemplateSpecialization shared_ptr
struct _d2998; // ParmVar isolate
struct _d2999; // ParmVar value
struct _d3000; // CXXConstructor WasmStreaming
struct _d3001; // ParmVar 
struct _d3002; // CXXRecord WasmModuleObjectBuilderStreaming
struct _d3003; // CXXRecord WasmModuleObjectBuilderStreaming
struct _d3004; // CXXConstructor WasmModuleObjectBuilderStreaming
struct _d3005; // ParmVar isolate
struct _d3006; // CXXMethod OnBytesReceived
struct _d3007; // ParmVar 
struct _d3008; // ParmVar size
struct _d3009; // CXXMethod Finish
struct _d3010; // CXXMethod Abort
struct _d3011; // ParmVar exception
struct _d3012; // CXXMethod GetPromise
struct _d3013; // CXXDestructor ~WasmModuleObjectBuilderStreaming
struct _d3014; // Enum ArrayBufferCreationMode
struct _d3015; // EnumConstant kInternalized
struct _d3016; // EnumConstant kExternalized
struct _d3017; // CXXRecord ArrayBuffer
struct _d3018; // CXXRecord Allocator
struct _d3019; // CXXRecord Allocator
struct _d3020; // CXXDestructor ~Allocator
struct _d3021; // CXXMethod Allocate
struct _d3022; // ParmVar length
struct _d3023; // CXXMethod AllocateUninitialized
struct _d3024; // ParmVar length
struct _d3025; // CXXMethod Free
struct _d3026; // ParmVar data
struct _d3027; // ParmVar length
struct _d3028; // Enum AllocationMode
struct _d3029; // EnumConstant kNormal
struct _d3030; // EnumConstant kReservation
struct _d3031; // CXXMethod NewDefaultAllocator
struct _d3032; // CXXMethod operator=
struct _d3033; // ParmVar 
struct _d3034; // CXXRecord Contents
struct _d3035; // CXXRecord Contents
struct _d3036; // TypeAlias DeleterCallback
struct _d3037; // CXXConstructor Contents
struct _d3038; // CXXMethod AllocationBase
struct _d3039; // CXXMethod AllocationLength
struct _d3040; // CXXMethod AllocationMode
struct _d3041; // CXXMethod Data
struct _d3042; // CXXMethod ByteLength
struct _d3043; // CXXMethod Deleter
struct _d3044; // CXXMethod DeleterData
struct _d3045; // CXXMethod ByteLength
struct _d3046; // CXXMethod New
struct _d3047; // ParmVar isolate
struct _d3048; // ParmVar byte_length
struct _d3049; // CXXMethod New
struct _d3050; // ParmVar isolate
struct _d3051; // ParmVar data
struct _d3052; // ParmVar byte_length
struct _d3053; // ParmVar mode
struct _d3054; // CXXMethod IsExternal
struct _d3055; // CXXMethod IsDetachable
struct _d3056; // CXXMethod IsNeuterable
struct _d3057; // CXXMethod Detach
struct _d3058; // CXXMethod Neuter
struct _d3059; // CXXMethod Externalize
struct _d3060; // CXXMethod GetContents
struct _d3061; // CXXMethod Cast
struct _d3062; // ParmVar obj
struct _d3063; // Var kInternalFieldCount
struct _d3064; // Var kEmbedderFieldCount
struct _d3065; // CXXRecord ArrayBufferView
struct _d3066; // CXXRecord ArrayBufferView
struct _d3067; // CXXMethod Buffer
struct _d3068; // CXXMethod ByteOffset
struct _d3069; // CXXMethod ByteLength
struct _d3070; // CXXMethod CopyContents
struct _d3071; // ParmVar dest
struct _d3072; // ParmVar byte_length
struct _d3073; // CXXMethod HasBuffer
struct _d3074; // CXXMethod Cast
struct _d3075; // ParmVar obj
struct _d3076; // Var kInternalFieldCount
struct _d3077; // Var kEmbedderFieldCount
struct _d3078; // CXXRecord TypedArray
struct _d3079; // CXXRecord TypedArray
struct _d3080; // Var kMaxLength
struct _d3081; // CXXMethod Length
struct _d3082; // CXXMethod Cast
struct _d3083; // ParmVar obj
struct _d3084; // CXXRecord Uint8Array
struct _d3085; // CXXRecord Uint8Array
struct _d3086; // CXXMethod New
struct _d3087; // ParmVar array_buffer
struct _d3088; // ParmVar byte_offset
struct _d3089; // ParmVar length
struct _d3090; // CXXMethod New
struct _d3091; // ParmVar shared_array_buffer
struct _d3092; // ParmVar byte_offset
struct _d3093; // ParmVar length
struct _d3094; // CXXMethod Cast
struct _d3095; // ParmVar obj
struct _d3096; // CXXRecord Uint8ClampedArray
struct _d3097; // CXXRecord Uint8ClampedArray
struct _d3098; // CXXMethod New
struct _d3099; // ParmVar array_buffer
struct _d3100; // ParmVar byte_offset
struct _d3101; // ParmVar length
struct _d3102; // CXXMethod New
struct _d3103; // ParmVar shared_array_buffer
struct _d3104; // ParmVar byte_offset
struct _d3105; // ParmVar length
struct _d3106; // CXXMethod Cast
struct _d3107; // ParmVar obj
struct _d3108; // CXXRecord Int8Array
struct _d3109; // CXXRecord Int8Array
struct _d3110; // CXXMethod New
struct _d3111; // ParmVar array_buffer
struct _d3112; // ParmVar byte_offset
struct _d3113; // ParmVar length
struct _d3114; // CXXMethod New
struct _d3115; // ParmVar shared_array_buffer
struct _d3116; // ParmVar byte_offset
struct _d3117; // ParmVar length
struct _d3118; // CXXMethod Cast
struct _d3119; // ParmVar obj
struct _d3120; // CXXRecord Uint16Array
struct _d3121; // CXXRecord Uint16Array
struct _d3122; // CXXMethod New
struct _d3123; // ParmVar array_buffer
struct _d3124; // ParmVar byte_offset
struct _d3125; // ParmVar length
struct _d3126; // CXXMethod New
struct _d3127; // ParmVar shared_array_buffer
struct _d3128; // ParmVar byte_offset
struct _d3129; // ParmVar length
struct _d3130; // CXXMethod Cast
struct _d3131; // ParmVar obj
struct _d3132; // CXXRecord Int16Array
struct _d3133; // CXXRecord Int16Array
struct _d3134; // CXXMethod New
struct _d3135; // ParmVar array_buffer
struct _d3136; // ParmVar byte_offset
struct _d3137; // ParmVar length
struct _d3138; // CXXMethod New
struct _d3139; // ParmVar shared_array_buffer
struct _d3140; // ParmVar byte_offset
struct _d3141; // ParmVar length
struct _d3142; // CXXMethod Cast
struct _d3143; // ParmVar obj
struct _d3144; // CXXRecord Uint32Array
struct _d3145; // CXXRecord Uint32Array
struct _d3146; // CXXMethod New
struct _d3147; // ParmVar array_buffer
struct _d3148; // ParmVar byte_offset
struct _d3149; // ParmVar length
struct _d3150; // CXXMethod New
struct _d3151; // ParmVar shared_array_buffer
struct _d3152; // ParmVar byte_offset
struct _d3153; // ParmVar length
struct _d3154; // CXXMethod Cast
struct _d3155; // ParmVar obj
struct _d3156; // CXXRecord Int32Array
struct _d3157; // CXXRecord Int32Array
struct _d3158; // CXXMethod New
struct _d3159; // ParmVar array_buffer
struct _d3160; // ParmVar byte_offset
struct _d3161; // ParmVar length
struct _d3162; // CXXMethod New
struct _d3163; // ParmVar shared_array_buffer
struct _d3164; // ParmVar byte_offset
struct _d3165; // ParmVar length
struct _d3166; // CXXMethod Cast
struct _d3167; // ParmVar obj
struct _d3168; // CXXRecord Float32Array
struct _d3169; // CXXRecord Float32Array
struct _d3170; // CXXMethod New
struct _d3171; // ParmVar array_buffer
struct _d3172; // ParmVar byte_offset
struct _d3173; // ParmVar length
struct _d3174; // CXXMethod New
struct _d3175; // ParmVar shared_array_buffer
struct _d3176; // ParmVar byte_offset
struct _d3177; // ParmVar length
struct _d3178; // CXXMethod Cast
struct _d3179; // ParmVar obj
struct _d3180; // CXXRecord Float64Array
struct _d3181; // CXXRecord Float64Array
struct _d3182; // CXXMethod New
struct _d3183; // ParmVar array_buffer
struct _d3184; // ParmVar byte_offset
struct _d3185; // ParmVar length
struct _d3186; // CXXMethod New
struct _d3187; // ParmVar shared_array_buffer
struct _d3188; // ParmVar byte_offset
struct _d3189; // ParmVar length
struct _d3190; // CXXMethod Cast
struct _d3191; // ParmVar obj
struct _d3192; // CXXRecord BigInt64Array
struct _d3193; // CXXRecord BigInt64Array
struct _d3194; // CXXMethod New
struct _d3195; // ParmVar array_buffer
struct _d3196; // ParmVar byte_offset
struct _d3197; // ParmVar length
struct _d3198; // CXXMethod New
struct _d3199; // ParmVar shared_array_buffer
struct _d3200; // ParmVar byte_offset
struct _d3201; // ParmVar length
struct _d3202; // CXXMethod Cast
struct _d3203; // ParmVar obj
struct _d3204; // CXXRecord BigUint64Array
struct _d3205; // CXXRecord BigUint64Array
struct _d3206; // CXXMethod New
struct _d3207; // ParmVar array_buffer
struct _d3208; // ParmVar byte_offset
struct _d3209; // ParmVar length
struct _d3210; // CXXMethod New
struct _d3211; // ParmVar shared_array_buffer
struct _d3212; // ParmVar byte_offset
struct _d3213; // ParmVar length
struct _d3214; // CXXMethod Cast
struct _d3215; // ParmVar obj
struct _d3216; // CXXRecord DataView
struct _d3217; // CXXRecord DataView
struct _d3218; // CXXMethod New
struct _d3219; // ParmVar array_buffer
struct _d3220; // ParmVar byte_offset
struct _d3221; // ParmVar length
struct _d3222; // CXXMethod New
struct _d3223; // ParmVar shared_array_buffer
struct _d3224; // ParmVar byte_offset
struct _d3225; // ParmVar length
struct _d3226; // CXXMethod Cast
struct _d3227; // ParmVar obj
struct _d3228; // CXXRecord SharedArrayBuffer
struct _d3229; // CXXRecord Contents
struct _d3230; // CXXRecord Contents
struct _d3231; // TypeAlias Allocator
struct _d3232; // TypeAlias DeleterCallback
struct _d3233; // CXXConstructor Contents
struct _d3234; // CXXMethod AllocationBase
struct _d3235; // CXXMethod AllocationLength
struct _d3236; // CXXMethod AllocationMode
struct _d3237; // CXXMethod Data
struct _d3238; // CXXMethod ByteLength
struct _d3239; // CXXMethod Deleter
struct _d3240; // CXXMethod DeleterData
struct _d3241; // CXXMethod ByteLength
struct _d3242; // CXXMethod New
struct _d3243; // ParmVar isolate
struct _d3244; // ParmVar byte_length
struct _d3245; // CXXMethod New
struct _d3246; // ParmVar isolate
struct _d3247; // ParmVar data
struct _d3248; // ParmVar byte_length
struct _d3249; // ParmVar mode
struct _d3250; // CXXMethod New
struct _d3251; // ParmVar isolate
struct _d3252; // ParmVar 
struct _d3253; // ParmVar mode
struct _d3254; // CXXMethod IsExternal
struct _d3255; // CXXMethod Externalize
struct _d3256; // CXXMethod GetContents
struct _d3257; // CXXMethod Cast
struct _d3258; // ParmVar obj
struct _d3259; // Var kInternalFieldCount
struct _d3260; // CXXRecord Date
struct _d3261; // CXXMethod New
struct _d3262; // ParmVar context
struct _d3263; // ParmVar time
struct _d3264; // CXXMethod ValueOf
struct _d3265; // CXXMethod Cast
struct _d3266; // ParmVar obj
struct _d3267; // CXXRecord NumberObject
struct _d3268; // CXXMethod New
struct _d3269; // ParmVar isolate
struct _d3270; // ParmVar value
struct _d3271; // CXXMethod ValueOf
struct _d3272; // CXXMethod Cast
struct _d3273; // ParmVar obj
struct _d3274; // CXXRecord BigIntObject
struct _d3275; // CXXMethod New
struct _d3276; // ParmVar isolate
struct _d3277; // ParmVar value
struct _d3278; // CXXMethod ValueOf
struct _d3279; // CXXMethod Cast
struct _d3280; // ParmVar obj
struct _d3281; // CXXRecord BooleanObject
struct _d3282; // CXXMethod New
struct _d3283; // ParmVar isolate
struct _d3284; // ParmVar value
struct _d3285; // CXXMethod ValueOf
struct _d3286; // CXXMethod Cast
struct _d3287; // ParmVar obj
struct _d3288; // CXXRecord StringObject
struct _d3289; // CXXMethod New
struct _d3290; // ParmVar isolate
struct _d3291; // ParmVar value
struct _d3292; // CXXMethod ValueOf
struct _d3293; // CXXMethod Cast
struct _d3294; // ParmVar obj
struct _d3295; // CXXRecord SymbolObject
struct _d3296; // CXXMethod New
struct _d3297; // ParmVar isolate
struct _d3298; // ParmVar value
struct _d3299; // CXXMethod ValueOf
struct _d3300; // CXXMethod Cast
struct _d3301; // ParmVar obj
struct _d3302; // CXXRecord RegExp
struct _d3303; // CXXRecord RegExp
struct _d3304; // Enum Flags
struct _d3305; // EnumConstant kNone
struct _d3306; // EnumConstant kGlobal
struct _d3307; // EnumConstant kIgnoreCase
struct _d3308; // EnumConstant kMultiline
struct _d3309; // EnumConstant kSticky
struct _d3310; // EnumConstant kUnicode
struct _d3311; // EnumConstant kDotAll
struct _d3312; // CXXMethod New
struct _d3313; // ParmVar context
struct _d3314; // ParmVar pattern
struct _d3315; // ParmVar flags
struct _d3316; // CXXMethod GetSource
struct _d3317; // CXXMethod GetFlags
struct _d3318; // CXXMethod Cast
struct _d3319; // ParmVar obj
struct _d3320; // CXXRecord External
struct _d3321; // CXXMethod New
struct _d3322; // ParmVar isolate
struct _d3323; // ParmVar value
struct _d3324; // CXXMethod Cast
struct _d3325; // ParmVar obj
struct _d3326; // CXXMethod Value
struct _d3327; // Enum Intrinsic
struct _d3328; // EnumConstant kArrayProto_entries
struct _d3329; // EnumConstant kArrayProto_forEach
struct _d3330; // EnumConstant kArrayProto_keys
struct _d3331; // EnumConstant kArrayProto_values
struct _d3332; // EnumConstant kErrorPrototype
struct _d3333; // EnumConstant kIteratorPrototype
struct _d3334; // CXXRecord Template
struct _d3335; // CXXRecord Template
struct _d3336; // CXXMethod Set
struct _d3337; // ParmVar name
struct _d3338; // ParmVar value
struct _d3339; // ParmVar attributes
struct _d3340; // CXXMethod SetPrivate
struct _d3341; // ParmVar name
struct _d3342; // ParmVar value
struct _d3343; // ParmVar attributes
struct _d3344; // CXXMethod Set
struct _d3345; // ParmVar isolate
struct _d3346; // ParmVar name
struct _d3347; // ParmVar value
struct _d3348; // CXXMethod SetAccessorProperty
struct _d3349; // ParmVar name
struct _d3350; // ParmVar getter
struct _d3351; // ParmVar setter
struct _d3352; // ParmVar attribute
struct _d3353; // ParmVar settings
struct _d3354; // CXXMethod SetNativeDataProperty
struct _d3355; // ParmVar name
struct _d3356; // ParmVar getter
struct _d3357; // ParmVar setter
struct _d3358; // ParmVar data
struct _d3359; // ParmVar attribute
struct _d3360; // ParmVar signature
struct _d3361; // ParmVar settings
struct _d3362; // ParmVar getter_side_effect_type
struct _d3363; // ParmVar setter_side_effect_type
struct _d3364; // CXXMethod SetNativeDataProperty
struct _d3365; // ParmVar name
struct _d3366; // ParmVar getter
struct _d3367; // ParmVar setter
struct _d3368; // ParmVar data
struct _d3369; // ParmVar attribute
struct _d3370; // ParmVar signature
struct _d3371; // ParmVar settings
struct _d3372; // ParmVar getter_side_effect_type
struct _d3373; // ParmVar setter_side_effect_type
struct _d3374; // CXXMethod SetLazyDataProperty
struct _d3375; // ParmVar name
struct _d3376; // ParmVar getter
struct _d3377; // ParmVar data
struct _d3378; // ParmVar attribute
struct _d3379; // ParmVar getter_side_effect_type
struct _d3380; // ParmVar setter_side_effect_type
struct _d3381; // CXXMethod SetIntrinsicDataProperty
struct _d3382; // ParmVar name
struct _d3383; // ParmVar intrinsic
struct _d3384; // ParmVar attribute
struct _d3385; // Typedef GenericNamedPropertyGetterCallback
struct _d3386; // Typedef GenericNamedPropertySetterCallback
struct _d3387; // Typedef GenericNamedPropertyQueryCallback
struct _d3388; // Typedef GenericNamedPropertyDeleterCallback
struct _d3389; // Typedef GenericNamedPropertyEnumeratorCallback
struct _d3390; // Typedef GenericNamedPropertyDefinerCallback
struct _d3391; // Typedef GenericNamedPropertyDescriptorCallback
struct _d3392; // Typedef IndexedPropertyGetterCallback
struct _d3393; // Typedef IndexedPropertySetterCallback
struct _d3394; // Typedef IndexedPropertyQueryCallback
struct _d3395; // Typedef IndexedPropertyDeleterCallback
struct _d3396; // Typedef IndexedPropertyEnumeratorCallback
struct _d3397; // Typedef IndexedPropertyDefinerCallback
struct _d3398; // Typedef IndexedPropertyDescriptorCallback
struct _d3399; // Enum AccessType
struct _d3400; // EnumConstant ACCESS_GET
struct _d3401; // EnumConstant ACCESS_SET
struct _d3402; // EnumConstant ACCESS_HAS
struct _d3403; // EnumConstant ACCESS_DELETE
struct _d3404; // EnumConstant ACCESS_KEYS
struct _d3405; // Typedef AccessCheckCallback
struct _d3406; // CXXRecord FunctionTemplate
struct _d3407; // CXXMethod New
struct _d3408; // ParmVar isolate
struct _d3409; // ParmVar callback
struct _d3410; // ParmVar data
struct _d3411; // ParmVar signature
struct _d3412; // ParmVar length
struct _d3413; // ParmVar behavior
struct _d3414; // ParmVar side_effect_type
struct _d3415; // CXXMethod FromSnapshot
struct _d3416; // ParmVar isolate
struct _d3417; // ParmVar index
struct _d3418; // CXXMethod NewWithCache
struct _d3419; // ParmVar isolate
struct _d3420; // ParmVar callback
struct _d3421; // ParmVar cache_property
struct _d3422; // ParmVar data
struct _d3423; // ParmVar signature
struct _d3424; // ParmVar length
struct _d3425; // ParmVar side_effect_type
struct _d3426; // CXXMethod GetFunction
struct _d3427; // ParmVar context
struct _d3428; // CXXMethod NewRemoteInstance
struct _d3429; // CXXMethod SetCallHandler
struct _d3430; // ParmVar callback
struct _d3431; // ParmVar data
struct _d3432; // ParmVar side_effect_type
struct _d3433; // CXXMethod SetLength
struct _d3434; // ParmVar length
struct _d3435; // CXXMethod InstanceTemplate
struct _d3436; // CXXMethod Inherit
struct _d3437; // ParmVar parent
struct _d3438; // CXXMethod PrototypeTemplate
struct _d3439; // CXXMethod SetPrototypeProviderTemplate
struct _d3440; // ParmVar prototype_provider
struct _d3441; // CXXMethod SetClassName
struct _d3442; // ParmVar name
struct _d3443; // CXXMethod SetAcceptAnyReceiver
struct _d3444; // ParmVar value
struct _d3445; // CXXMethod ReadOnlyPrototype
struct _d3446; // CXXMethod RemovePrototype
struct _d3447; // CXXMethod HasInstance
struct _d3448; // ParmVar object
struct _d3449; // CXXMethod Cast
struct _d3450; // ParmVar data
struct _d3451; // Enum PropertyHandlerFlags
struct _d3452; // EnumConstant kNone
struct _d3453; // EnumConstant kAllCanRead
struct _d3454; // EnumConstant kNonMasking
struct _d3455; // EnumConstant kOnlyInterceptStrings
struct _d3456; // EnumConstant kHasNoSideEffect
struct _d3457; // CXXRecord NamedPropertyHandlerConfiguration
struct _d3458; // CXXRecord NamedPropertyHandlerConfiguration
struct _d3459; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3460; // ParmVar getter
struct _d3461; // ParmVar setter
struct _d3462; // ParmVar query
struct _d3463; // ParmVar deleter
struct _d3464; // ParmVar enumerator
struct _d3465; // ParmVar definer
struct _d3466; // ParmVar descriptor
struct _d3467; // ParmVar data
struct _d3468; // ParmVar flags
struct _d3469; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3470; // ParmVar getter
struct _d3471; // ParmVar setter
struct _d3472; // ParmVar query
struct _d3473; // ParmVar deleter
struct _d3474; // ParmVar enumerator
struct _d3475; // ParmVar data
struct _d3476; // ParmVar flags
struct _d3477; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3478; // ParmVar getter
struct _d3479; // ParmVar setter
struct _d3480; // ParmVar descriptor
struct _d3481; // ParmVar deleter
struct _d3482; // ParmVar enumerator
struct _d3483; // ParmVar definer
struct _d3484; // ParmVar data
struct _d3485; // ParmVar flags
struct _d3486; // Field getter
struct _d3487; // Field setter
struct _d3488; // Field query
struct _d3489; // Field deleter
struct _d3490; // Field enumerator
struct _d3491; // Field definer
struct _d3492; // Field descriptor
struct _d3493; // Field data
struct _d3494; // Field flags
struct _d3495; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3496; // ParmVar 
struct _d3497; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3498; // ParmVar 
struct _d3499; // CXXRecord IndexedPropertyHandlerConfiguration
struct _d3500; // CXXRecord IndexedPropertyHandlerConfiguration
struct _d3501; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3502; // ParmVar getter
struct _d3503; // ParmVar setter
struct _d3504; // ParmVar query
struct _d3505; // ParmVar deleter
struct _d3506; // ParmVar enumerator
struct _d3507; // ParmVar definer
struct _d3508; // ParmVar descriptor
struct _d3509; // ParmVar data
struct _d3510; // ParmVar flags
struct _d3511; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3512; // ParmVar getter
struct _d3513; // ParmVar setter
struct _d3514; // ParmVar query
struct _d3515; // ParmVar deleter
struct _d3516; // ParmVar enumerator
struct _d3517; // ParmVar data
struct _d3518; // ParmVar flags
struct _d3519; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3520; // ParmVar getter
struct _d3521; // ParmVar setter
struct _d3522; // ParmVar descriptor
struct _d3523; // ParmVar deleter
struct _d3524; // ParmVar enumerator
struct _d3525; // ParmVar definer
struct _d3526; // ParmVar data
struct _d3527; // ParmVar flags
struct _d3528; // Field getter
struct _d3529; // Field setter
struct _d3530; // Field query
struct _d3531; // Field deleter
struct _d3532; // Field enumerator
struct _d3533; // Field definer
struct _d3534; // Field descriptor
struct _d3535; // Field data
struct _d3536; // Field flags
struct _d3537; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3538; // ParmVar 
struct _d3539; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3540; // ParmVar 
struct _d3541; // CXXDestructor ~IndexedPropertyHandlerConfiguration
struct _d3542; // CXXRecord ObjectTemplate
struct _d3543; // CXXMethod New
struct _d3544; // ParmVar isolate
struct _d3545; // ParmVar constructor
struct _d3546; // CXXMethod FromSnapshot
struct _d3547; // ParmVar isolate
struct _d3548; // ParmVar index
struct _d3549; // CXXMethod NewInstance
struct _d3550; // ParmVar context
struct _d3551; // CXXMethod SetAccessor
struct _d3552; // ParmVar name
struct _d3553; // ParmVar getter
struct _d3554; // ParmVar setter
struct _d3555; // ParmVar data
struct _d3556; // ParmVar settings
struct _d3557; // ParmVar attribute
struct _d3558; // ParmVar signature
struct _d3559; // ParmVar getter_side_effect_type
struct _d3560; // ParmVar setter_side_effect_type
struct _d3561; // CXXMethod SetAccessor
struct _d3562; // ParmVar name
struct _d3563; // ParmVar getter
struct _d3564; // ParmVar setter
struct _d3565; // ParmVar data
struct _d3566; // ParmVar settings
struct _d3567; // ParmVar attribute
struct _d3568; // ParmVar signature
struct _d3569; // ParmVar getter_side_effect_type
struct _d3570; // ParmVar setter_side_effect_type
struct _d3571; // CXXMethod SetHandler
struct _d3572; // ParmVar configuration
struct _d3573; // CXXMethod SetIndexedPropertyHandler
struct _d3574; // ParmVar getter
struct _d3575; // ParmVar setter
struct _d3576; // ParmVar query
struct _d3577; // ParmVar deleter
struct _d3578; // ParmVar enumerator
struct _d3579; // ParmVar data
struct _d3580; // CXXMethod SetHandler
struct _d3581; // ParmVar configuration
struct _d3582; // CXXMethod SetCallAsFunctionHandler
struct _d3583; // ParmVar callback
struct _d3584; // ParmVar data
struct _d3585; // CXXMethod MarkAsUndetectable
struct _d3586; // CXXMethod SetAccessCheckCallback
struct _d3587; // ParmVar callback
struct _d3588; // ParmVar data
struct _d3589; // CXXMethod SetAccessCheckCallbackAndHandler
struct _d3590; // ParmVar callback
struct _d3591; // ParmVar named_handler
struct _d3592; // ParmVar indexed_handler
struct _d3593; // ParmVar data
struct _d3594; // CXXMethod InternalFieldCount
struct _d3595; // CXXMethod SetInternalFieldCount
struct _d3596; // ParmVar value
struct _d3597; // CXXMethod IsImmutableProto
struct _d3598; // CXXMethod SetImmutableProto
struct _d3599; // CXXMethod Cast
struct _d3600; // ParmVar data
struct _d3601; // CXXRecord Signature
struct _d3602; // CXXMethod New
struct _d3603; // ParmVar isolate
struct _d3604; // ParmVar receiver
struct _d3605; // CXXMethod Cast
struct _d3606; // ParmVar data
struct _d3607; // CXXRecord AccessorSignature
struct _d3608; // CXXMethod New
struct _d3609; // ParmVar isolate
struct _d3610; // ParmVar receiver
struct _d3611; // CXXMethod Cast
struct _d3612; // ParmVar data
struct _d3613; // CXXRecord Extension
struct _d3614; // CXXRecord Extension
struct _d3615; // CXXConstructor Extension
struct _d3616; // ParmVar name
struct _d3617; // ParmVar source
struct _d3618; // ParmVar dep_count
struct _d3619; // ParmVar deps
struct _d3620; // ParmVar source_length
struct _d3621; // CXXDestructor ~Extension
struct _d3622; // CXXMethod GetNativeFunctionTemplate
struct _d3623; // ParmVar isolate
struct _d3624; // ParmVar name
struct _d3625; // CXXMethod name
struct _d3626; // CXXMethod source_length
struct _d3627; // CXXMethod source
struct _d3628; // CXXMethod dependency_count
struct _d3629; // CXXMethod dependencies
struct _d3630; // CXXMethod set_auto_enable
struct _d3631; // ParmVar value
struct _d3632; // CXXMethod auto_enable
struct _d3633; // CXXConstructor Extension
struct _d3634; // ParmVar 
struct _d3635; // CXXMethod operator=
struct _d3636; // ParmVar 
struct _d3637; // Function RegisterExtension
struct _d3638; // ClassTemplateSpecialization unique_ptr
struct _d3639; // ParmVar 
struct _d3640; // Function Undefined
struct _d3641; // ParmVar isolate
struct _d3642; // Function Null
struct _d3643; // ParmVar isolate
struct _d3644; // Function True
struct _d3645; // ParmVar isolate
struct _d3646; // Function False
struct _d3647; // ParmVar isolate
struct _d3648; // CXXRecord ResourceConstraints
struct _d3649; // CXXRecord ResourceConstraints
struct _d3650; // CXXMethod ConfigureDefaultsFromHeapSize
struct _d3651; // ParmVar initial_heap_size_in_bytes
struct _d3652; // ParmVar maximum_heap_size_in_bytes
struct _d3653; // CXXMethod ConfigureDefaults
struct _d3654; // ParmVar physical_memory
struct _d3655; // ParmVar virtual_memory_limit
struct _d3656; // CXXMethod stack_limit
struct _d3657; // CXXMethod set_stack_limit
struct _d3658; // ParmVar value
struct _d3659; // CXXMethod code_range_size_in_bytes
struct _d3660; // CXXMethod set_code_range_size_in_bytes
struct _d3661; // ParmVar limit
struct _d3662; // CXXMethod max_old_generation_size_in_bytes
struct _d3663; // CXXMethod set_max_old_generation_size_in_bytes
struct _d3664; // ParmVar limit
struct _d3665; // CXXMethod max_young_generation_size_in_bytes
struct _d3666; // CXXMethod set_max_young_generation_size_in_bytes
struct _d3667; // ParmVar limit
struct _d3668; // CXXMethod initial_old_generation_size_in_bytes
struct _d3669; // CXXMethod set_initial_old_generation_size_in_bytes
struct _d3670; // ParmVar initial_size
struct _d3671; // CXXMethod initial_young_generation_size_in_bytes
struct _d3672; // CXXMethod set_initial_young_generation_size_in_bytes
struct _d3673; // ParmVar initial_size
struct _d3674; // CXXMethod code_range_size
struct _d3675; // CXXMethod set_code_range_size
struct _d3676; // ParmVar limit_in_mb
struct _d3677; // CXXMethod max_semi_space_size_in_kb
struct _d3678; // CXXMethod set_max_semi_space_size_in_kb
struct _d3679; // ParmVar limit_in_kb
struct _d3680; // CXXMethod max_old_space_size
struct _d3681; // CXXMethod set_max_old_space_size
struct _d3682; // ParmVar limit_in_mb
struct _d3683; // CXXMethod max_zone_pool_size
struct _d3684; // CXXMethod set_max_zone_pool_size
struct _d3685; // ParmVar bytes
struct _d3686; // CXXConstructor ResourceConstraints
struct _d3687; // CXXConstructor ResourceConstraints
struct _d3688; // ParmVar 
struct _d3689; // CXXConstructor ResourceConstraints
struct _d3690; // ParmVar 
struct _d3691; // Typedef FatalErrorCallback
struct _d3692; // Typedef OOMErrorCallback
struct _d3693; // Typedef DcheckErrorCallback
struct _d3694; // Typedef MessageCallback
struct _d3695; // Typedef LogEventCallback
struct _d3696; // CXXRecord Exception
struct _d3697; // CXXRecord Exception
struct _d3698; // CXXMethod RangeError
struct _d3699; // ParmVar message
struct _d3700; // CXXMethod ReferenceError
struct _d3701; // ParmVar message
struct _d3702; // CXXMethod SyntaxError
struct _d3703; // ParmVar message
struct _d3704; // CXXMethod TypeError
struct _d3705; // ParmVar message
struct _d3706; // CXXMethod Error
struct _d3707; // ParmVar message
struct _d3708; // CXXMethod CreateMessage
struct _d3709; // ParmVar isolate
struct _d3710; // ParmVar exception
struct _d3711; // CXXMethod GetStackTrace
struct _d3712; // ParmVar exception
struct _d3713; // Typedef CounterLookupCallback
struct _d3714; // Typedef CreateHistogramCallback
struct _d3715; // Typedef AddHistogramSampleCallback
struct _d3716; // Typedef BeforeCallEnteredCallback
struct _d3717; // Typedef CallCompletedCallback
struct _d3718; // Typedef HostImportModuleDynamicallyCallback
struct _d3719; // Typedef HostInitializeImportMetaObjectCallback
struct _d3720; // Typedef PrepareStackTraceCallback
struct _d3721; // Enum PromiseHookType
struct _d3722; // EnumConstant kInit
struct _d3723; // EnumConstant kResolve
struct _d3724; // EnumConstant kBefore
struct _d3725; // EnumConstant kAfter
struct _d3726; // Typedef PromiseHook
struct _d3727; // Enum PromiseRejectEvent
struct _d3728; // EnumConstant kPromiseRejectWithNoHandler
struct _d3729; // EnumConstant kPromiseHandlerAddedAfterReject
struct _d3730; // EnumConstant kPromiseRejectAfterResolved
struct _d3731; // EnumConstant kPromiseResolveAfterResolved
struct _d3732; // CXXRecord PromiseRejectMessage
struct _d3733; // CXXRecord PromiseRejectMessage
struct _d3734; // CXXConstructor PromiseRejectMessage
struct _d3735; // ParmVar promise
struct _d3736; // ParmVar event
struct _d3737; // ParmVar value
struct _d3738; // CXXMethod GetPromise
struct _d3739; // CXXMethod GetEvent
struct _d3740; // CXXMethod GetValue
struct _d3741; // Typedef PromiseRejectCallback
struct _d3742; // Typedef MicrotasksCompletedCallback
struct _d3743; // Typedef MicrotasksCompletedCallbackWithData
struct _d3744; // Typedef MicrotaskCallback
struct _d3745; // Enum MicrotasksPolicy
struct _d3746; // EnumConstant kExplicit
struct _d3747; // EnumConstant kScoped
struct _d3748; // EnumConstant kAuto
struct _d3749; // CXXRecord MicrotaskQueue
struct _d3750; // CXXMethod New
struct _d3751; // ClassTemplateSpecialization unique_ptr
struct _d3752; // ParmVar isolate
struct _d3753; // ParmVar policy
struct _d3754; // CXXDestructor ~MicrotaskQueue
struct _d3755; // CXXMethod EnqueueMicrotask
struct _d3756; // ParmVar isolate
struct _d3757; // ParmVar microtask
struct _d3758; // CXXMethod EnqueueMicrotask
struct _d3759; // ParmVar isolate
struct _d3760; // ParmVar callback
struct _d3761; // ParmVar data
struct _d3762; // CXXMethod AddMicrotasksCompletedCallback
struct _d3763; // ParmVar callback
struct _d3764; // ParmVar data
struct _d3765; // CXXMethod RemoveMicrotasksCompletedCallback
struct _d3766; // ParmVar callback
struct _d3767; // ParmVar data
struct _d3768; // CXXMethod PerformCheckpoint
struct _d3769; // ParmVar isolate
struct _d3770; // CXXMethod IsRunningMicrotasks
struct _d3771; // CXXMethod GetMicrotasksScopeDepth
struct _d3772; // CXXConstructor MicrotaskQueue
struct _d3773; // ParmVar 
struct _d3774; // CXXMethod operator=
struct _d3775; // ParmVar 
struct _d3776; // CXXRecord MicrotasksScope
struct _d3777; // CXXRecord MicrotasksScope
struct _d3778; // Enum Type
struct _d3779; // EnumConstant kRunMicrotasks
struct _d3780; // EnumConstant kDoNotRunMicrotasks
struct _d3781; // CXXConstructor MicrotasksScope
struct _d3782; // ParmVar isolate
struct _d3783; // ParmVar type
struct _d3784; // CXXConstructor MicrotasksScope
struct _d3785; // ParmVar isolate
struct _d3786; // ParmVar microtask_queue
struct _d3787; // ParmVar type
struct _d3788; // CXXDestructor ~MicrotasksScope
struct _d3789; // CXXMethod PerformCheckpoint
struct _d3790; // ParmVar isolate
struct _d3791; // CXXMethod GetCurrentDepth
struct _d3792; // ParmVar isolate
struct _d3793; // CXXMethod IsRunningMicrotasks
struct _d3794; // ParmVar isolate
struct _d3795; // CXXConstructor MicrotasksScope
struct _d3796; // ParmVar 
struct _d3797; // CXXMethod operator=
struct _d3798; // ParmVar 
struct _d3799; // Typedef FailedAccessCheckCallback
struct _d3800; // Typedef AllowCodeGenerationFromStringsCallback
struct _d3801; // Typedef ExtensionCallback
struct _d3802; // Typedef AllowWasmCodeGenerationCallback
struct _d3803; // Typedef ApiImplementationCallback
struct _d3804; // Typedef WasmStreamingCallback
struct _d3805; // Typedef WasmThreadsEnabledCallback
struct _d3806; // Enum GCType
struct _d3807; // EnumConstant kGCTypeScavenge
struct _d3808; // EnumConstant kGCTypeMarkSweepCompact
struct _d3809; // EnumConstant kGCTypeIncrementalMarking
struct _d3810; // EnumConstant kGCTypeProcessWeakCallbacks
struct _d3811; // EnumConstant kGCTypeAll
struct _d3812; // Enum GCCallbackFlags
struct _d3813; // EnumConstant kNoGCCallbackFlags
struct _d3814; // EnumConstant kGCCallbackFlagConstructRetainedObjectInfos
struct _d3815; // EnumConstant kGCCallbackFlagForced
struct _d3816; // EnumConstant kGCCallbackFlagSynchronousPhantomCallbackProcessing
struct _d3817; // EnumConstant kGCCallbackFlagCollectAllAvailableGarbage
struct _d3818; // EnumConstant kGCCallbackFlagCollectAllExternalMemory
struct _d3819; // EnumConstant kGCCallbackScheduleIdleGarbageCollection
struct _d3820; // Typedef GCCallback
struct _d3821; // Typedef InterruptCallback
struct _d3822; // Typedef NearHeapLimitCallback
struct _d3823; // CXXRecord HeapStatistics
struct _d3824; // CXXRecord HeapStatistics
struct _d3825; // CXXConstructor HeapStatistics
struct _d3826; // CXXMethod total_heap_size
struct _d3827; // CXXMethod total_heap_size_executable
struct _d3828; // CXXMethod total_physical_size
struct _d3829; // CXXMethod total_available_size
struct _d3830; // CXXMethod used_heap_size
struct _d3831; // CXXMethod heap_size_limit
struct _d3832; // CXXMethod malloced_memory
struct _d3833; // CXXMethod external_memory
struct _d3834; // CXXMethod peak_malloced_memory
struct _d3835; // CXXMethod number_of_native_contexts
struct _d3836; // CXXMethod number_of_detached_contexts
struct _d3837; // CXXMethod does_zap_garbage
struct _d3838; // CXXRecord HeapSpaceStatistics
struct _d3839; // CXXRecord HeapSpaceStatistics
struct _d3840; // CXXConstructor HeapSpaceStatistics
struct _d3841; // CXXMethod space_name
struct _d3842; // CXXMethod space_size
struct _d3843; // CXXMethod space_used_size
struct _d3844; // CXXMethod space_available_size
struct _d3845; // CXXMethod physical_space_size
struct _d3846; // CXXRecord HeapObjectStatistics
struct _d3847; // CXXRecord HeapObjectStatistics
struct _d3848; // CXXConstructor HeapObjectStatistics
struct _d3849; // CXXMethod object_type
struct _d3850; // CXXMethod object_sub_type
struct _d3851; // CXXMethod object_count
struct _d3852; // CXXMethod object_size
struct _d3853; // CXXRecord HeapCodeStatistics
struct _d3854; // CXXRecord HeapCodeStatistics
struct _d3855; // CXXConstructor HeapCodeStatistics
struct _d3856; // CXXMethod code_and_metadata_size
struct _d3857; // CXXMethod bytecode_and_metadata_size
struct _d3858; // CXXMethod external_script_source_size
struct _d3859; // CXXRecord JitCodeEvent
struct _d3860; // CXXRecord JitCodeEvent
struct _d3861; // Enum EventType
struct _d3862; // EnumConstant CODE_ADDED
struct _d3863; // EnumConstant CODE_MOVED
struct _d3864; // EnumConstant CODE_REMOVED
struct _d3865; // EnumConstant CODE_ADD_LINE_POS_INFO
struct _d3866; // EnumConstant CODE_START_LINE_INFO_RECORDING
struct _d3867; // EnumConstant CODE_END_LINE_INFO_RECORDING
struct _d3868; // Enum PositionType
struct _d3869; // EnumConstant POSITION
struct _d3870; // EnumConstant STATEMENT_POSITION
struct _d3871; // Enum CodeType
struct _d3872; // EnumConstant BYTE_CODE
struct _d3873; // EnumConstant JIT_CODE
struct _d3874; // Field type
struct _d3875; // Field code_type
struct _d3876; // Field code_start
struct _d3877; // Field code_len
struct _d3878; // Field script
struct _d3879; // Field user_data
struct _d3880; // CXXRecord name_t
struct _d3881; // CXXRecord name_t
struct _d3882; // Field str
struct _d3883; // Field len
struct _d3884; // CXXRecord line_info_t
struct _d3885; // CXXRecord line_info_t
struct _d3886; // Field offset
struct _d3887; // Field pos
struct _d3888; // Field position_type
struct _d3889; // CXXRecord 
struct _d3890; // Field name
struct _d3891; // Field line_info
struct _d3892; // Field new_code_start
struct _d3893; // Field 
struct _d3894; // IndirectField name
struct _d3895; // IndirectField line_info
struct _d3896; // IndirectField new_code_start
struct _d3897; // Field isolate
struct _d3898; // Enum RAILMode
struct _d3899; // EnumConstant PERFORMANCE_RESPONSE
struct _d3900; // EnumConstant PERFORMANCE_ANIMATION
struct _d3901; // EnumConstant PERFORMANCE_IDLE
struct _d3902; // EnumConstant PERFORMANCE_LOAD
struct _d3903; // Enum JitCodeEventOptions
struct _d3904; // EnumConstant kJitCodeEventDefault
struct _d3905; // EnumConstant kJitCodeEventEnumExisting
struct _d3906; // Typedef JitCodeEventHandler
struct _d3907; // Typedef UnhandledExceptionCallback
struct _d3908; // CXXRecord _EXCEPTION_POINTERS
struct _d3909; // CXXRecord ExternalResourceVisitor
struct _d3910; // CXXRecord ExternalResourceVisitor
struct _d3911; // CXXDestructor ~ExternalResourceVisitor
struct _d3912; // CXXMethod VisitExternalString
struct _d3913; // ParmVar string
struct _d3914; // CXXMethod operator=
struct _d3915; // ParmVar 
struct _d3916; // CXXRecord PersistentHandleVisitor
struct _d3917; // CXXRecord PersistentHandleVisitor
struct _d3918; // CXXDestructor ~PersistentHandleVisitor
struct _d3919; // CXXMethod VisitPersistentHandle
struct _d3920; // ParmVar value
struct _d3921; // ParmVar class_id
struct _d3922; // CXXMethod operator=
struct _d3923; // ParmVar 
struct _d3924; // Enum MemoryPressureLevel
struct _d3925; // EnumConstant kNone
struct _d3926; // EnumConstant kModerate
struct _d3927; // EnumConstant kCritical
struct _d3928; // CXXRecord EmbedderHeapTracer
struct _d3929; // CXXRecord EmbedderHeapTracer
struct _d3930; // Enum TraceFlags
struct _d3931; // EnumConstant kNoFlags
struct _d3932; // EnumConstant kReduceMemory
struct _d3933; // Enum EmbedderStackState
struct _d3934; // EnumConstant kUnknown
struct _d3935; // EnumConstant kNonEmpty
struct _d3936; // EnumConstant kEmpty
struct _d3937; // CXXRecord TracedGlobalHandleVisitor
struct _d3938; // CXXRecord TracedGlobalHandleVisitor
struct _d3939; // CXXDestructor ~TracedGlobalHandleVisitor
struct _d3940; // CXXMethod VisitTracedGlobalHandle
struct _d3941; // ParmVar value
struct _d3942; // CXXMethod operator=
struct _d3943; // ParmVar 
struct _d3944; // CXXRecord TraceSummary
struct _d3945; // CXXRecord TraceSummary
struct _d3946; // Field time
struct _d3947; // Field allocated_size
struct _d3948; // CXXDestructor ~EmbedderHeapTracer
struct _d3949; // CXXMethod IterateTracedGlobalHandles
struct _d3950; // ParmVar visitor
struct _d3951; // CXXMethod RegisterV8References
struct _d3952; // ClassTemplateSpecialization vector
struct _d3953; // ParmVar embedder_fields
struct _d3954; // CXXMethod RegisterEmbedderReference
struct _d3955; // ParmVar ref
struct _d3956; // CXXMethod TracePrologue
struct _d3957; // CXXMethod TracePrologue
struct _d3958; // ParmVar flags
struct _d3959; // CXXMethod AdvanceTracing
struct _d3960; // ParmVar deadline_in_ms
struct _d3961; // CXXMethod IsTracingDone
struct _d3962; // CXXMethod TraceEpilogue
struct _d3963; // CXXMethod TraceEpilogue
struct _d3964; // ParmVar trace_summary
struct _d3965; // CXXMethod EnterFinalPause
struct _d3966; // ParmVar stack_state
struct _d3967; // CXXMethod FinalizeTracing
struct _d3968; // CXXMethod IsRootForNonTracingGC
struct _d3969; // ParmVar handle
struct _d3970; // CXXMethod GarbageCollectionForTesting
struct _d3971; // ParmVar stack_state
struct _d3972; // CXXMethod IncreaseAllocatedSize
struct _d3973; // ParmVar bytes
struct _d3974; // CXXMethod DecreaseAllocatedSize
struct _d3975; // ParmVar bytes
struct _d3976; // CXXMethod isolate
struct _d3977; // Field isolate_
struct _d3978; // CXXMethod operator=
struct _d3979; // ParmVar 
struct _d3980; // CXXRecord SerializeInternalFieldsCallback
struct _d3981; // CXXRecord SerializeInternalFieldsCallback
struct _d3982; // Typedef CallbackFunction
struct _d3983; // CXXConstructor SerializeInternalFieldsCallback
struct _d3984; // ParmVar function
struct _d3985; // ParmVar data_arg
struct _d3986; // Field callback
struct _d3987; // Field data
struct _d3988; // CXXConstructor SerializeInternalFieldsCallback
struct _d3989; // ParmVar 
struct _d3990; // CXXConstructor SerializeInternalFieldsCallback
struct _d3991; // ParmVar 
struct _d3992; // CXXDestructor ~SerializeInternalFieldsCallback
struct _d3993; // Typedef SerializeEmbedderFieldsCallback
struct _d3994; // CXXRecord DeserializeInternalFieldsCallback
struct _d3995; // CXXRecord DeserializeInternalFieldsCallback
struct _d3996; // Typedef CallbackFunction
struct _d3997; // CXXConstructor DeserializeInternalFieldsCallback
struct _d3998; // ParmVar function
struct _d3999; // ParmVar data_arg
struct _d4000; // Field callback
struct _d4001; // Field data
struct _d4002; // CXXConstructor DeserializeInternalFieldsCallback
struct _d4003; // ParmVar 
struct _d4004; // CXXConstructor DeserializeInternalFieldsCallback
struct _d4005; // ParmVar 
struct _d4006; // CXXDestructor ~DeserializeInternalFieldsCallback
struct _d4007; // Typedef DeserializeEmbedderFieldsCallback
struct _d4008; // CXXRecord Isolate
struct _d4009; // CXXRecord CreateParams
struct _d4010; // CXXRecord CreateParams
struct _d4011; // CXXConstructor CreateParams
struct _d4012; // Field code_event_handler
struct _d4013; // Field constraints
struct _d4014; // Field snapshot_blob
struct _d4015; // Field counter_lookup_callback
struct _d4016; // Field create_histogram_callback
struct _d4017; // Field add_histogram_sample_callback
struct _d4018; // Field array_buffer_allocator
struct _d4019; // Field external_references
struct _d4020; // Field allow_atomics_wait
struct _d4021; // Field only_terminate_in_safe_scope
struct _d4022; // CXXRecord Scope
struct _d4023; // CXXRecord Scope
struct _d4024; // CXXConstructor Scope
struct _d4025; // ParmVar isolate
struct _d4026; // CXXDestructor ~Scope
struct _d4027; // CXXConstructor Scope
struct _d4028; // ParmVar 
struct _d4029; // CXXMethod operator=
struct _d4030; // ParmVar 
struct _d4031; // CXXRecord DisallowJavascriptExecutionScope
struct _d4032; // CXXRecord DisallowJavascriptExecutionScope
struct _d4033; // Enum OnFailure
struct _d4034; // EnumConstant CRASH_ON_FAILURE
struct _d4035; // EnumConstant THROW_ON_FAILURE
struct _d4036; // EnumConstant DUMP_ON_FAILURE
struct _d4037; // CXXConstructor DisallowJavascriptExecutionScope
struct _d4038; // ParmVar isolate
struct _d4039; // ParmVar on_failure
struct _d4040; // CXXDestructor ~DisallowJavascriptExecutionScope
struct _d4041; // CXXConstructor DisallowJavascriptExecutionScope
struct _d4042; // ParmVar 
struct _d4043; // CXXMethod operator=
struct _d4044; // ParmVar 
struct _d4045; // CXXRecord AllowJavascriptExecutionScope
struct _d4046; // CXXRecord AllowJavascriptExecutionScope
struct _d4047; // CXXConstructor AllowJavascriptExecutionScope
struct _d4048; // ParmVar isolate
struct _d4049; // CXXDestructor ~AllowJavascriptExecutionScope
struct _d4050; // CXXConstructor AllowJavascriptExecutionScope
struct _d4051; // ParmVar 
struct _d4052; // CXXMethod operator=
struct _d4053; // ParmVar 
struct _d4054; // CXXRecord SuppressMicrotaskExecutionScope
struct _d4055; // CXXRecord SuppressMicrotaskExecutionScope
struct _d4056; // CXXConstructor SuppressMicrotaskExecutionScope
struct _d4057; // ParmVar isolate
struct _d4058; // CXXConstructor SuppressMicrotaskExecutionScope
struct _d4059; // ParmVar microtask_queue
struct _d4060; // CXXDestructor ~SuppressMicrotaskExecutionScope
struct _d4061; // CXXConstructor SuppressMicrotaskExecutionScope
struct _d4062; // ParmVar 
struct _d4063; // CXXMethod operator=
struct _d4064; // ParmVar 
struct _d4065; // CXXRecord SafeForTerminationScope
struct _d4066; // CXXRecord SafeForTerminationScope
struct _d4067; // CXXConstructor SafeForTerminationScope
struct _d4068; // ParmVar isolate
struct _d4069; // CXXDestructor ~SafeForTerminationScope
struct _d4070; // CXXConstructor SafeForTerminationScope
struct _d4071; // ParmVar 
struct _d4072; // CXXMethod operator=
struct _d4073; // ParmVar 
struct _d4074; // Enum GarbageCollectionType
struct _d4075; // EnumConstant kFullGarbageCollection
struct _d4076; // EnumConstant kMinorGarbageCollection
struct _d4077; // Enum UseCounterFeature
struct _d4078; // EnumConstant kUseAsm
struct _d4079; // EnumConstant kBreakIterator
struct _d4080; // EnumConstant kLegacyConst
struct _d4081; // EnumConstant kMarkDequeOverflow
struct _d4082; // EnumConstant kStoreBufferOverflow
struct _d4083; // EnumConstant kSlotsBufferOverflow
struct _d4084; // EnumConstant kObjectObserve
struct _d4085; // EnumConstant kForcedGC
struct _d4086; // EnumConstant kSloppyMode
struct _d4087; // EnumConstant kStrictMode
struct _d4088; // EnumConstant kStrongMode
struct _d4089; // EnumConstant kRegExpPrototypeStickyGetter
struct _d4090; // EnumConstant kRegExpPrototypeToString
struct _d4091; // EnumConstant kRegExpPrototypeUnicodeGetter
struct _d4092; // EnumConstant kIntlV8Parse
struct _d4093; // EnumConstant kIntlPattern
struct _d4094; // EnumConstant kIntlResolved
struct _d4095; // EnumConstant kPromiseChain
struct _d4096; // EnumConstant kPromiseAccept
struct _d4097; // EnumConstant kPromiseDefer
struct _d4098; // EnumConstant kHtmlCommentInExternalScript
struct _d4099; // EnumConstant kHtmlComment
struct _d4100; // EnumConstant kSloppyModeBlockScopedFunctionRedefinition
struct _d4101; // EnumConstant kForInInitializer
struct _d4102; // EnumConstant kArrayProtectorDirtied
struct _d4103; // EnumConstant kArraySpeciesModified
struct _d4104; // EnumConstant kArrayPrototypeConstructorModified
struct _d4105; // EnumConstant kArrayInstanceProtoModified
struct _d4106; // EnumConstant kArrayInstanceConstructorModified
struct _d4107; // EnumConstant kLegacyFunctionDeclaration
struct _d4108; // EnumConstant kRegExpPrototypeSourceGetter
struct _d4109; // EnumConstant kRegExpPrototypeOldFlagGetter
struct _d4110; // EnumConstant kDecimalWithLeadingZeroInStrictMode
struct _d4111; // EnumConstant kLegacyDateParser
struct _d4112; // EnumConstant kDefineGetterOrSetterWouldThrow
struct _d4113; // EnumConstant kFunctionConstructorReturnedUndefined
struct _d4114; // EnumConstant kAssigmentExpressionLHSIsCallInSloppy
struct _d4115; // EnumConstant kAssigmentExpressionLHSIsCallInStrict
struct _d4116; // EnumConstant kPromiseConstructorReturnedUndefined
struct _d4117; // EnumConstant kConstructorNonUndefinedPrimitiveReturn
struct _d4118; // EnumConstant kLabeledExpressionStatement
struct _d4119; // EnumConstant kLineOrParagraphSeparatorAsLineTerminator
struct _d4120; // EnumConstant kIndexAccessor
struct _d4121; // EnumConstant kErrorCaptureStackTrace
struct _d4122; // EnumConstant kErrorPrepareStackTrace
struct _d4123; // EnumConstant kErrorStackTraceLimit
struct _d4124; // EnumConstant kWebAssemblyInstantiation
struct _d4125; // EnumConstant kDeoptimizerDisableSpeculation
struct _d4126; // EnumConstant kArrayPrototypeSortJSArrayModifiedPrototype
struct _d4127; // EnumConstant kFunctionTokenOffsetTooLongForToString
struct _d4128; // EnumConstant kWasmSharedMemory
struct _d4129; // EnumConstant kWasmThreadOpcodes
struct _d4130; // EnumConstant kAtomicsNotify
struct _d4131; // EnumConstant kAtomicsWake
struct _d4132; // EnumConstant kCollator
struct _d4133; // EnumConstant kNumberFormat
struct _d4134; // EnumConstant kDateTimeFormat
struct _d4135; // EnumConstant kPluralRules
struct _d4136; // EnumConstant kRelativeTimeFormat
struct _d4137; // EnumConstant kLocale
struct _d4138; // EnumConstant kListFormat
struct _d4139; // EnumConstant kSegmenter
struct _d4140; // EnumConstant kStringLocaleCompare
struct _d4141; // EnumConstant kStringToLocaleUpperCase
struct _d4142; // EnumConstant kStringToLocaleLowerCase
struct _d4143; // EnumConstant kNumberToLocaleString
struct _d4144; // EnumConstant kDateToLocaleString
struct _d4145; // EnumConstant kDateToLocaleDateString
struct _d4146; // EnumConstant kDateToLocaleTimeString
struct _d4147; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeSloppy
struct _d4148; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeStrict
struct _d4149; // EnumConstant kOptimizedFunctionWithOneShotBytecode
struct _d4150; // EnumConstant kRegExpMatchIsTrueishOnNonJSRegExp
struct _d4151; // EnumConstant kRegExpMatchIsFalseishOnJSRegExp
struct _d4152; // EnumConstant kDateGetTimezoneOffset
struct _d4153; // EnumConstant kStringNormalize
struct _d4154; // EnumConstant kUseCounterFeatureCount
struct _d4155; // Enum MessageErrorLevel
struct _d4156; // EnumConstant kMessageLog
struct _d4157; // EnumConstant kMessageDebug
struct _d4158; // EnumConstant kMessageInfo
struct _d4159; // EnumConstant kMessageError
struct _d4160; // EnumConstant kMessageWarning
struct _d4161; // EnumConstant kMessageAll
struct _d4162; // Typedef UseCounterCallback
struct _d4163; // CXXMethod Allocate
struct _d4164; // CXXMethod Initialize
struct _d4165; // ParmVar isolate
struct _d4166; // ParmVar params
struct _d4167; // CXXMethod New
struct _d4168; // ParmVar params
struct _d4169; // CXXMethod GetCurrent
struct _d4170; // Typedef AbortOnUncaughtExceptionCallback
struct _d4171; // CXXMethod SetAbortOnUncaughtExceptionCallback
struct _d4172; // ParmVar callback
struct _d4173; // CXXMethod SetHostImportModuleDynamicallyCallback
struct _d4174; // ParmVar callback
struct _d4175; // CXXMethod SetHostInitializeImportMetaObjectCallback
struct _d4176; // ParmVar callback
struct _d4177; // CXXMethod SetPrepareStackTraceCallback
struct _d4178; // ParmVar callback
struct _d4179; // CXXMethod MemoryPressureNotification
struct _d4180; // ParmVar level
struct _d4181; // CXXMethod Enter
struct _d4182; // CXXMethod Exit
struct _d4183; // CXXMethod Dispose
struct _d4184; // CXXMethod DumpAndResetStats
struct _d4185; // CXXMethod DiscardThreadSpecificMetadata
struct _d4186; // CXXMethod SetData
struct _d4187; // ParmVar slot
struct _d4188; // ParmVar data
struct _d4189; // CXXMethod GetData
struct _d4190; // ParmVar slot
struct _d4191; // CXXMethod GetNumberOfDataSlots
struct _d4192; // FunctionTemplate GetDataFromSnapshotOnce
struct _d4193; // TemplateTypeParm T
struct _d4194; // CXXMethod GetDataFromSnapshotOnce
struct _d4195; // ParmVar index
struct _d4196; // CXXMethod GetHeapStatistics
struct _d4197; // ParmVar heap_statistics
struct _d4198; // CXXMethod NumberOfHeapSpaces
struct _d4199; // CXXMethod GetHeapSpaceStatistics
struct _d4200; // ParmVar space_statistics
struct _d4201; // ParmVar index
struct _d4202; // CXXMethod NumberOfTrackedHeapObjectTypes
struct _d4203; // CXXMethod GetHeapObjectStatisticsAtLastGC
struct _d4204; // ParmVar object_statistics
struct _d4205; // ParmVar type_index
struct _d4206; // CXXMethod GetHeapCodeAndMetadataStatistics
struct _d4207; // ParmVar object_statistics
struct _d4208; // CXXMethod GetStackSample
struct _d4209; // ParmVar state
struct _d4210; // ParmVar frames
struct _d4211; // ParmVar frames_limit
struct _d4212; // ParmVar sample_info
struct _d4213; // CXXMethod AdjustAmountOfExternalAllocatedMemory
struct _d4214; // ParmVar change_in_bytes
struct _d4215; // CXXMethod NumberOfPhantomHandleResetsSinceLastCall
struct _d4216; // CXXMethod GetHeapProfiler
struct _d4217; // CXXMethod SetIdle
struct _d4218; // ParmVar is_idle
struct _d4219; // CXXMethod GetArrayBufferAllocator
struct _d4220; // CXXMethod InContext
struct _d4221; // CXXMethod GetCurrentContext
struct _d4222; // CXXMethod GetEnteredContext
struct _d4223; // CXXMethod GetEnteredOrMicrotaskContext
struct _d4224; // CXXMethod GetIncumbentContext
struct _d4225; // CXXMethod ThrowException
struct _d4226; // ParmVar exception
struct _d4227; // Typedef GCCallback
struct _d4228; // Typedef GCCallbackWithData
struct _d4229; // CXXMethod AddGCPrologueCallback
struct _d4230; // ParmVar callback
struct _d4231; // ParmVar data
struct _d4232; // ParmVar gc_type_filter
struct _d4233; // CXXMethod AddGCPrologueCallback
struct _d4234; // ParmVar callback
struct _d4235; // ParmVar gc_type_filter
struct _d4236; // CXXMethod RemoveGCPrologueCallback
struct _d4237; // ParmVar 
struct _d4238; // ParmVar data
struct _d4239; // CXXMethod RemoveGCPrologueCallback
struct _d4240; // ParmVar callback
struct _d4241; // CXXMethod SetEmbedderHeapTracer
struct _d4242; // ParmVar tracer
struct _d4243; // CXXMethod GetEmbedderHeapTracer
struct _d4244; // Enum AtomicsWaitEvent
struct _d4245; // EnumConstant kStartWait
struct _d4246; // EnumConstant kWokenUp
struct _d4247; // EnumConstant kTimedOut
struct _d4248; // EnumConstant kTerminatedExecution
struct _d4249; // EnumConstant kAPIStopped
struct _d4250; // EnumConstant kNotEqual
struct _d4251; // CXXRecord AtomicsWaitWakeHandle
struct _d4252; // CXXRecord AtomicsWaitWakeHandle
struct _d4253; // CXXMethod Wake
struct _d4254; // Typedef AtomicsWaitCallback
struct _d4255; // CXXMethod SetAtomicsWaitCallback
struct _d4256; // ParmVar callback
struct _d4257; // ParmVar data
struct _d4258; // CXXMethod AddGCEpilogueCallback
struct _d4259; // ParmVar callback
struct _d4260; // ParmVar data
struct _d4261; // ParmVar gc_type_filter
struct _d4262; // CXXMethod AddGCEpilogueCallback
struct _d4263; // ParmVar callback
struct _d4264; // ParmVar gc_type_filter
struct _d4265; // CXXMethod RemoveGCEpilogueCallback
struct _d4266; // ParmVar callback
struct _d4267; // ParmVar data
struct _d4268; // CXXMethod RemoveGCEpilogueCallback
struct _d4269; // ParmVar callback
struct _d4270; // Typedef GetExternallyAllocatedMemoryInBytesCallback
struct _d4271; // CXXMethod SetGetExternallyAllocatedMemoryInBytesCallback
struct _d4272; // ParmVar callback
struct _d4273; // CXXMethod TerminateExecution
struct _d4274; // CXXMethod IsExecutionTerminating
struct _d4275; // CXXMethod CancelTerminateExecution
struct _d4276; // CXXMethod RequestInterrupt
struct _d4277; // ParmVar callback
struct _d4278; // ParmVar data
struct _d4279; // CXXMethod RequestGarbageCollectionForTesting
struct _d4280; // ParmVar type
struct _d4281; // CXXMethod SetEventLogger
struct _d4282; // ParmVar that
struct _d4283; // CXXMethod AddBeforeCallEnteredCallback
struct _d4284; // ParmVar callback
struct _d4285; // CXXMethod RemoveBeforeCallEnteredCallback
struct _d4286; // ParmVar callback
struct _d4287; // CXXMethod AddCallCompletedCallback
struct _d4288; // ParmVar callback
struct _d4289; // CXXMethod RemoveCallCompletedCallback
struct _d4290; // ParmVar callback
struct _d4291; // CXXMethod SetPromiseHook
struct _d4292; // ParmVar hook
struct _d4293; // CXXMethod SetPromiseRejectCallback
struct _d4294; // ParmVar callback
struct _d4295; // CXXMethod RunMicrotasks
struct _d4296; // CXXMethod EnqueueMicrotask
struct _d4297; // ParmVar microtask
struct _d4298; // CXXMethod EnqueueMicrotask
struct _d4299; // ParmVar callback
struct _d4300; // ParmVar data
struct _d4301; // CXXMethod SetMicrotasksPolicy
struct _d4302; // ParmVar policy
struct _d4303; // CXXMethod GetMicrotasksPolicy
struct _d4304; // CXXMethod AddMicrotasksCompletedCallback
struct _d4305; // ParmVar callback
struct _d4306; // CXXMethod AddMicrotasksCompletedCallback
struct _d4307; // ParmVar callback
struct _d4308; // ParmVar data
struct _d4309; // CXXMethod RemoveMicrotasksCompletedCallback
struct _d4310; // ParmVar callback
struct _d4311; // CXXMethod RemoveMicrotasksCompletedCallback
struct _d4312; // ParmVar callback
struct _d4313; // ParmVar data
struct _d4314; // CXXMethod SetUseCounterCallback
struct _d4315; // ParmVar callback
struct _d4316; // CXXMethod SetCounterFunction
struct _d4317; // ParmVar 
struct _d4318; // CXXMethod SetCreateHistogramFunction
struct _d4319; // ParmVar 
struct _d4320; // CXXMethod SetAddHistogramSampleFunction
struct _d4321; // ParmVar 
struct _d4322; // CXXMethod IdleNotificationDeadline
struct _d4323; // ParmVar deadline_in_seconds
struct _d4324; // CXXMethod LowMemoryNotification
struct _d4325; // CXXMethod ContextDisposedNotification
struct _d4326; // ParmVar dependant_context
struct _d4327; // CXXMethod IsolateInForegroundNotification
struct _d4328; // CXXMethod IsolateInBackgroundNotification
struct _d4329; // CXXMethod EnableMemorySavingsMode
struct _d4330; // CXXMethod DisableMemorySavingsMode
struct _d4331; // CXXMethod SetRAILMode
struct _d4332; // ParmVar rail_mode
struct _d4333; // CXXMethod IncreaseHeapLimitForDebugging
struct _d4334; // CXXMethod RestoreOriginalHeapLimit
struct _d4335; // CXXMethod IsHeapLimitIncreasedForDebugging
struct _d4336; // CXXMethod SetJitCodeEventHandler
struct _d4337; // ParmVar options
struct _d4338; // ParmVar event_handler
struct _d4339; // CXXMethod SetStackLimit
struct _d4340; // ParmVar stack_limit
struct _d4341; // CXXMethod GetCodeRange
struct _d4342; // ParmVar start
struct _d4343; // ParmVar length_in_bytes
struct _d4344; // CXXMethod GetUnwindState
struct _d4345; // CXXMethod SetFatalErrorHandler
struct _d4346; // ParmVar that
struct _d4347; // CXXMethod SetOOMErrorHandler
struct _d4348; // ParmVar that
struct _d4349; // CXXMethod AddNearHeapLimitCallback
struct _d4350; // ParmVar callback
struct _d4351; // ParmVar data
struct _d4352; // CXXMethod RemoveNearHeapLimitCallback
struct _d4353; // ParmVar callback
struct _d4354; // ParmVar heap_limit
struct _d4355; // CXXMethod AutomaticallyRestoreInitialHeapLimit
struct _d4356; // ParmVar threshold_percent
struct _d4357; // CXXMethod SetAllowCodeGenerationFromStringsCallback
struct _d4358; // ParmVar callback
struct _d4359; // CXXMethod SetAllowWasmCodeGenerationCallback
struct _d4360; // ParmVar callback
struct _d4361; // CXXMethod SetWasmModuleCallback
struct _d4362; // ParmVar callback
struct _d4363; // CXXMethod SetWasmInstanceCallback
struct _d4364; // ParmVar callback
struct _d4365; // CXXMethod SetWasmStreamingCallback
struct _d4366; // ParmVar callback
struct _d4367; // CXXMethod SetWasmThreadsEnabledCallback
struct _d4368; // ParmVar callback
struct _d4369; // CXXMethod IsDead
struct _d4370; // CXXMethod AddMessageListener
struct _d4371; // ParmVar that
struct _d4372; // ParmVar data
struct _d4373; // CXXMethod AddMessageListenerWithErrorLevel
struct _d4374; // ParmVar that
struct _d4375; // ParmVar message_levels
struct _d4376; // ParmVar data
struct _d4377; // CXXMethod RemoveMessageListeners
struct _d4378; // ParmVar that
struct _d4379; // CXXMethod SetFailedAccessCheckCallbackFunction
struct _d4380; // ParmVar 
struct _d4381; // CXXMethod SetCaptureStackTraceForUncaughtExceptions
struct _d4382; // ParmVar capture
struct _d4383; // ParmVar frame_limit
struct _d4384; // ParmVar options
struct _d4385; // CXXMethod VisitExternalResources
struct _d4386; // ParmVar visitor
struct _d4387; // CXXMethod VisitHandlesWithClassIds
struct _d4388; // ParmVar visitor
struct _d4389; // CXXMethod VisitWeakHandles
struct _d4390; // ParmVar visitor
struct _d4391; // CXXMethod IsInUse
struct _d4392; // CXXMethod SetAllowAtomicsWait
struct _d4393; // ParmVar allow
struct _d4394; // Enum TimeZoneDetection
struct _d4395; // EnumConstant kSkip
struct _d4396; // EnumConstant kRedetect
struct _d4397; // CXXMethod DateTimeConfigurationChangeNotification
struct _d4398; // ParmVar time_zone_detection
struct _d4399; // CXXMethod LocaleConfigurationChangeNotification
struct _d4400; // CXXConstructor Isolate
struct _d4401; // CXXDestructor ~Isolate
struct _d4402; // CXXConstructor Isolate
struct _d4403; // ParmVar 
struct _d4404; // CXXMethod operator=
struct _d4405; // ParmVar 
struct _d4406; // CXXMethod operator new
struct _d4407; // ParmVar size
struct _d4408; // CXXMethod operator new[]
struct _d4409; // ParmVar size
struct _d4410; // CXXMethod operator delete
struct _d4411; // ParmVar 
struct _d4412; // ParmVar 
struct _d4413; // CXXMethod operator delete[]
struct _d4414; // ParmVar 
struct _d4415; // ParmVar 
struct _d4416; // CXXRecord StartupData
struct _d4417; // CXXMethod CanBeRehashed
struct _d4418; // Field data
struct _d4419; // Field raw_size
struct _d4420; // Typedef EntropySource
struct _d4421; // Typedef ReturnAddressLocationResolver
struct _d4422; // CXXRecord V8
struct _d4423; // CXXRecord V8
struct _d4424; // CXXMethod SetNativesDataBlob
struct _d4425; // ParmVar startup_blob
struct _d4426; // CXXMethod SetSnapshotDataBlob
struct _d4427; // ParmVar startup_blob
struct _d4428; // CXXMethod SetDcheckErrorHandler
struct _d4429; // ParmVar that
struct _d4430; // CXXMethod SetFlagsFromString
struct _d4431; // ParmVar str
struct _d4432; // CXXMethod SetFlagsFromString
struct _d4433; // ParmVar str
struct _d4434; // ParmVar length
struct _d4435; // CXXMethod SetFlagsFromString
struct _d4436; // ParmVar str
struct _d4437; // ParmVar length
struct _d4438; // CXXMethod SetFlagsFromCommandLine
struct _d4439; // ParmVar argc
struct _d4440; // ParmVar argv
struct _d4441; // ParmVar remove_flags
struct _d4442; // CXXMethod GetVersion
struct _d4443; // CXXMethod Initialize
struct _d4444; // CXXMethod SetEntropySource
struct _d4445; // ParmVar source
struct _d4446; // CXXMethod SetReturnAddressLocationResolver
struct _d4447; // ParmVar return_address_resolver
struct _d4448; // CXXMethod Dispose
struct _d4449; // CXXMethod InitializeICU
struct _d4450; // ParmVar icu_data_file
struct _d4451; // CXXMethod InitializeICUDefaultLocation
struct _d4452; // ParmVar exec_path
struct _d4453; // ParmVar icu_data_file
struct _d4454; // CXXMethod InitializeExternalStartupData
struct _d4455; // ParmVar directory_path
struct _d4456; // CXXMethod InitializeExternalStartupData
struct _d4457; // ParmVar natives_blob
struct _d4458; // ParmVar snapshot_blob
struct _d4459; // CXXMethod InitializePlatform
struct _d4460; // ParmVar platform
struct _d4461; // CXXMethod ShutdownPlatform
struct _d4462; // CXXMethod EnableWebAssemblyTrapHandler
struct _d4463; // ParmVar use_v8_signal_handler
struct _d4464; // CXXMethod SetUnhandledExceptionCallback
struct _d4465; // ParmVar unhandled_exception_callback
struct _d4466; // CXXRecord SnapshotCreator
struct _d4467; // CXXRecord SnapshotCreator
struct _d4468; // Enum FunctionCodeHandling
struct _d4469; // EnumConstant kClear
struct _d4470; // EnumConstant kKeep
struct _d4471; // CXXConstructor SnapshotCreator
struct _d4472; // ParmVar isolate
struct _d4473; // ParmVar external_references
struct _d4474; // ParmVar existing_blob
struct _d4475; // CXXConstructor SnapshotCreator
struct _d4476; // ParmVar external_references
struct _d4477; // ParmVar existing_blob
struct _d4478; // CXXDestructor ~SnapshotCreator
struct _d4479; // CXXMethod GetIsolate
struct _d4480; // CXXMethod SetDefaultContext
struct _d4481; // ParmVar context
struct _d4482; // ParmVar callback
struct _d4483; // CXXMethod AddContext
struct _d4484; // ParmVar context
struct _d4485; // ParmVar callback
struct _d4486; // CXXMethod AddTemplate
struct _d4487; // ParmVar template_obj
struct _d4488; // FunctionTemplate AddData
struct _d4489; // TemplateTypeParm T
struct _d4490; // CXXMethod AddData
struct _d4491; // ParmVar context
struct _d4492; // ParmVar object
struct _d4493; // FunctionTemplate AddData
struct _d4494; // TemplateTypeParm T
struct _d4495; // CXXMethod AddData
struct _d4496; // ParmVar object
struct _d4497; // CXXMethod CreateBlob
struct _d4498; // ParmVar function_code_handling
struct _d4499; // CXXConstructor SnapshotCreator
struct _d4500; // ParmVar 
struct _d4501; // CXXMethod operator=
struct _d4502; // ParmVar 
struct _d4503; // TemplateTypeParm T
struct _d4504; // CXXRecord Maybe
struct _d4505; // CXXMethod IsNothing
struct _d4506; // CXXMethod IsJust
struct _d4507; // CXXMethod ToChecked
struct _d4508; // CXXMethod Check
struct _d4509; // CXXMethod To
struct _d4510; // ParmVar out
struct _d4511; // CXXMethod FromJust
struct _d4512; // CXXMethod FromMaybe
struct _d4513; // ParmVar default_value
struct _d4514; // CXXMethod operator==
struct _d4515; // ParmVar other
struct _d4516; // CXXMethod operator!=
struct _d4517; // ParmVar other
struct _d4518; // FunctionTemplate Nothing
struct _d4519; // TemplateTypeParm T
struct _d4520; // Function Nothing
struct _d4521; // FunctionTemplate Just
struct _d4522; // TemplateTypeParm T
struct _d4523; // Function Just
struct _d4524; // ParmVar t
struct _d4525; // ClassTemplateSpecialization Maybe
struct _d4526; // CXXRecord Maybe
struct _d4527; // CXXMethod IsNothing
struct _d4528; // CXXMethod IsJust
struct _d4529; // CXXMethod operator==
struct _d4530; // ParmVar other
struct _d4531; // CXXMethod operator!=
struct _d4532; // ParmVar other
struct _d4533; // CXXConstructor Maybe
struct _d4534; // ParmVar 
struct _d4535; // CXXConstructor Maybe
struct _d4536; // ParmVar 
struct _d4537; // CXXDestructor ~Maybe
struct _d4538; // Function JustVoid
struct _d4539; // CXXRecord TryCatch
struct _d4540; // CXXRecord TryCatch
struct _d4541; // CXXConstructor TryCatch
struct _d4542; // ParmVar isolate
struct _d4543; // CXXDestructor ~TryCatch
struct _d4544; // CXXMethod HasCaught
struct _d4545; // CXXMethod CanContinue
struct _d4546; // CXXMethod HasTerminated
struct _d4547; // CXXMethod ReThrow
struct _d4548; // CXXMethod Exception
struct _d4549; // CXXMethod StackTrace
struct _d4550; // ParmVar context
struct _d4551; // CXXMethod Message
struct _d4552; // CXXMethod Reset
struct _d4553; // CXXMethod SetVerbose
struct _d4554; // ParmVar value
struct _d4555; // CXXMethod IsVerbose
struct _d4556; // CXXMethod SetCaptureMessage
struct _d4557; // ParmVar value
struct _d4558; // CXXMethod JSStackComparableAddress
struct _d4559; // ParmVar handler
struct _d4560; // CXXConstructor TryCatch
struct _d4561; // ParmVar 
struct _d4562; // CXXMethod operator=
struct _d4563; // ParmVar 
struct _d4564; // CXXRecord ExtensionConfiguration
struct _d4565; // CXXRecord ExtensionConfiguration
struct _d4566; // CXXConstructor ExtensionConfiguration
struct _d4567; // CXXConstructor ExtensionConfiguration
struct _d4568; // ParmVar name_count
struct _d4569; // ParmVar names
struct _d4570; // CXXMethod begin
struct _d4571; // CXXMethod end
struct _d4572; // CXXRecord Context
struct _d4573; // CXXMethod Global
struct _d4574; // CXXMethod DetachGlobal
struct _d4575; // CXXMethod New
struct _d4576; // ParmVar isolate
struct _d4577; // ParmVar extensions
struct _d4578; // ParmVar global_template
struct _d4579; // ParmVar global_object
struct _d4580; // ParmVar internal_fields_deserializer
struct _d4581; // ParmVar microtask_queue
struct _d4582; // CXXMethod FromSnapshot
struct _d4583; // ParmVar isolate
struct _d4584; // ParmVar context_snapshot_index
struct _d4585; // ParmVar embedder_fields_deserializer
struct _d4586; // ParmVar extensions
struct _d4587; // ParmVar global_object
struct _d4588; // ParmVar microtask_queue
struct _d4589; // CXXMethod NewRemoteContext
struct _d4590; // ParmVar isolate
struct _d4591; // ParmVar global_template
struct _d4592; // ParmVar global_object
struct _d4593; // CXXMethod SetSecurityToken
struct _d4594; // ParmVar token
struct _d4595; // CXXMethod UseDefaultSecurityToken
struct _d4596; // CXXMethod GetSecurityToken
struct _d4597; // CXXMethod Enter
struct _d4598; // CXXMethod Exit
struct _d4599; // CXXMethod GetIsolate
struct _d4600; // Enum EmbedderDataFields
struct _d4601; // EnumConstant kDebugIdIndex
struct _d4602; // CXXMethod GetNumberOfEmbedderDataFields
struct _d4603; // CXXMethod GetEmbedderData
struct _d4604; // ParmVar index
struct _d4605; // CXXMethod GetExtrasBindingObject
struct _d4606; // CXXMethod SetEmbedderData
struct _d4607; // ParmVar index
struct _d4608; // ParmVar value
struct _d4609; // CXXMethod GetAlignedPointerFromEmbedderData
struct _d4610; // ParmVar index
struct _d4611; // CXXMethod SetAlignedPointerInEmbedderData
struct _d4612; // ParmVar index
struct _d4613; // ParmVar value
struct _d4614; // CXXMethod AllowCodeGenerationFromStrings
struct _d4615; // ParmVar allow
struct _d4616; // CXXMethod IsCodeGenerationFromStringsAllowed
struct _d4617; // CXXMethod SetErrorMessageForCodeGenerationFromStrings
struct _d4618; // ParmVar message
struct _d4619; // FunctionTemplate GetDataFromSnapshotOnce
struct _d4620; // TemplateTypeParm T
struct _d4621; // CXXMethod GetDataFromSnapshotOnce
struct _d4622; // ParmVar index
struct _d4623; // Typedef AbortScriptExecutionCallback
struct _d4624; // CXXMethod SetAbortScriptExecution
struct _d4625; // ParmVar callback
struct _d4626; // CXXRecord Scope
struct _d4627; // CXXRecord Scope
struct _d4628; // CXXConstructor Scope
struct _d4629; // ParmVar context
struct _d4630; // CXXDestructor ~Scope
struct _d4631; // CXXRecord BackupIncumbentScope
struct _d4632; // CXXRecord BackupIncumbentScope
struct _d4633; // CXXConstructor BackupIncumbentScope
struct _d4634; // ParmVar backup_incumbent_context
struct _d4635; // CXXDestructor ~BackupIncumbentScope
struct _d4636; // CXXMethod JSStackComparableAddress
struct _d4637; // CXXRecord Unlocker
struct _d4638; // CXXRecord Unlocker
struct _d4639; // CXXConstructor Unlocker
struct _d4640; // ParmVar isolate
struct _d4641; // CXXDestructor ~Unlocker
struct _d4642; // CXXRecord Locker
struct _d4643; // CXXRecord Locker
struct _d4644; // CXXConstructor Locker
struct _d4645; // ParmVar isolate
struct _d4646; // CXXDestructor ~Locker
struct _d4647; // CXXMethod IsLocked
struct _d4648; // ParmVar isolate
struct _d4649; // CXXMethod IsActive
struct _d4650; // CXXConstructor Locker
struct _d4651; // ParmVar 
struct _d4652; // CXXMethod operator=
struct _d4653; // ParmVar 
struct _d4654; // CXXRecord Unwinder
struct _d4655; // CXXRecord Unwinder
struct _d4656; // CXXMethod TryUnwindV8Frames
struct _d4657; // ParmVar unwind_state
struct _d4658; // ParmVar register_state
struct _d4659; // ParmVar stack_base
struct _d4660; // CXXMethod PCIsInV8
struct _d4661; // ParmVar unwind_state
struct _d4662; // ParmVar pc
struct _d4663; // ParmVar isolate
struct _d4664; // ParmVar that
struct _d4665; // ParmVar isolate
struct _d4666; // ParmVar that
struct _d4667; // ParmVar isolate
struct _d4668; // ParmVar that
struct _d4669; // TemplateTypeParm S
struct _d4670; // ParmVar isolate
struct _d4671; // ParmVar handle
struct _d4672; // ParmVar isolate
struct _d4673; // ParmVar index
struct _d4674; // TemplateTypeParm S
struct _d4675; // ParmVar isolate
struct _d4676; // ParmVar other
struct _d4677; // TemplateTypeParm S
struct _d4678; // ParmVar isolate
struct _d4679; // ParmVar other
struct _d4680; // TemplateTypeParm P
struct _d4681; // ParmVar parameter
struct _d4682; // ParmVar callback
struct _d4683; // ParmVar type
struct _d4684; // TemplateTypeParm P
struct _d4685; // ParmVar label
struct _d4686; // ParmVar class_id
struct _d4687; // ParmVar other
struct _d4688; // TemplateTypeParm S
struct _d4689; // ParmVar rhs
struct _d4690; // TemplateTypeParm S
struct _d4691; // ParmVar isolate
struct _d4692; // ParmVar other
struct _d4693; // ParmVar other
struct _d4694; // TemplateTypeParm S
struct _d4695; // ParmVar rhs
struct _d4696; // ParmVar class_id
struct _d4697; // ParmVar parameter
struct _d4698; // ParmVar callback
struct _d4699; // TemplateTypeParm S
struct _d4700; // ParmVar handle
struct _d4701; // TemplateTypeParm S
struct _d4702; // ParmVar handle
struct _d4703; // TemplateTypeParm S
struct _d4704; // ParmVar handle
struct _d4705; // ParmVar i
struct _d4706; // ParmVar i
struct _d4707; // ParmVar i
struct _d4708; // ParmVar value
struct _d4709; // TemplateTypeParm S
struct _d4710; // ParmVar whatever
struct _d4711; // ParmVar implicit_args
struct _d4712; // ParmVar values
struct _d4713; // ParmVar length
struct _d4714; // ParmVar i
struct _d4715; // ParmVar resource_name
struct _d4716; // ParmVar resource_line_offset
struct _d4717; // ParmVar resource_column_offset
struct _d4718; // ParmVar resource_is_shared_cross_origin
struct _d4719; // ParmVar script_id
struct _d4720; // ParmVar source_map_url
struct _d4721; // ParmVar resource_is_opaque
struct _d4722; // ParmVar is_wasm
struct _d4723; // ParmVar is_module
struct _d4724; // ParmVar host_defined_options
struct _d4725; // ParmVar string
struct _d4726; // ParmVar origin
struct _d4727; // ParmVar data
struct _d4728; // ParmVar string
struct _d4729; // ParmVar data
struct _d4730; // ParmVar isolate
struct _d4731; // ParmVar value
struct _d4732; // ParmVar isolate
struct _d4733; // ParmVar name
struct _d4734; // ParmVar value
struct _d4735; // ParmVar data
struct _d4736; // ParmVar data
struct _d4737; // ParmVar data
struct _d4738; // ParmVar data
struct _d4739; // ParmVar index
struct _d4740; // ParmVar index
struct _d4741; // ParmVar value
struct _d4742; // ParmVar isolate
struct _d4743; // ParmVar encoding_out
struct _d4744; // TemplateTypeParm T
struct _d4745; // ParmVar value
struct _d4746; // ParmVar value
struct _d4747; // ParmVar value
struct _d4748; // ParmVar value
struct _d4749; // ParmVar data
struct _d4750; // ParmVar value
struct _d4751; // ParmVar value
struct _d4752; // ParmVar value
struct _d4753; // ParmVar value
struct _d4754; // ParmVar value
struct _d4755; // ParmVar value
struct _d4756; // ParmVar value
struct _d4757; // ParmVar value
struct _d4758; // ParmVar value
struct _d4759; // ParmVar value
struct _d4760; // ParmVar value
struct _d4761; // ParmVar value
struct _d4762; // ParmVar value
struct _d4763; // ParmVar value
struct _d4764; // ParmVar value
struct _d4765; // ParmVar value
struct _d4766; // ParmVar value
struct _d4767; // ParmVar value
struct _d4768; // ParmVar value
struct _d4769; // ParmVar value
struct _d4770; // ParmVar value
struct _d4771; // ParmVar value
struct _d4772; // ParmVar value
struct _d4773; // ParmVar value
struct _d4774; // ParmVar value
struct _d4775; // ParmVar value
struct _d4776; // ParmVar value
struct _d4777; // ParmVar value
struct _d4778; // ParmVar value
struct _d4779; // ParmVar value
struct _d4780; // ParmVar value
struct _d4781; // ParmVar value
struct _d4782; // ParmVar value
struct _d4783; // ParmVar value
struct _d4784; // ParmVar value
struct _d4785; // ParmVar value
struct _d4786; // ParmVar value
struct _d4787; // ParmVar value
struct _d4788; // ParmVar isolate
struct _d4789; // ParmVar isolate
struct _d4790; // ParmVar isolate
struct _d4791; // ParmVar isolate
struct _d4792; // ParmVar slot
struct _d4793; // ParmVar data
struct _d4794; // ParmVar slot
struct _d4795; // TemplateTypeParm T
struct _d4796; // ParmVar index
struct _d4797; // ParmVar change_in_bytes
struct _d4798; // ParmVar index
struct _d4799; // ParmVar index
struct _d4800; // TemplateTypeParm T
struct _d4801; // ParmVar index
struct _d4802; // TemplateTypeParm T
struct _d4803; // ParmVar context
struct _d4804; // ParmVar object
struct _d4805; // TemplateTypeParm T
struct _d4806; // ParmVar object
struct _d1: DeclName<_s1> {}; // Namespace v8
struct _d2: DeclName<_s2> {}; // CXXRecord Context
struct _d3: DeclName<_s3> {}; // CXXRecord Data
struct _d4: DeclName<_s4> {}; // CXXRecord Isolate
struct _d5: DeclName<_s5> {}; // CXXRecord AccessorSignature
struct _d6: DeclName<_s6> {}; // CXXRecord Array
struct _d7: DeclName<_s7> {}; // CXXRecord ArrayBuffer
struct _d8: DeclName<_s8> {}; // CXXRecord BigInt
struct _d9: DeclName<_s9> {}; // CXXRecord BigIntObject
struct _d10: DeclName<_s10> {}; // CXXRecord Boolean
struct _d11: DeclName<_s11> {}; // CXXRecord BooleanObject
struct _d12: DeclName<_s12> {}; // CXXRecord Date
struct _d13: DeclName<_s13> {}; // CXXRecord External
struct _d14: DeclName<_s14> {}; // CXXRecord Function
struct _d15: DeclName<_s15> {}; // CXXRecord FunctionTemplate
struct _d16: DeclName<_s16> {}; // CXXRecord HeapProfiler
struct _d17: DeclName<_s17> {}; // CXXRecord ImplementationUtilities
struct _d18: DeclName<_s18> {}; // CXXRecord Int32
struct _d19: DeclName<_s19> {}; // CXXRecord Integer
struct _d20: DeclName<_s20> {}; // ClassTemplate Maybe
struct _d21: DeclName<_s21> {}; // TemplateTypeParm T
struct _d22: DeclName<_s20> {}; // CXXRecord Maybe
struct _d23: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d24: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d25: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d26: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d27: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d28: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d29: DeclName<_s22> {}; // CXXRecord MicrotaskQueue
struct _d30: DeclName<_s23> {}; // CXXRecord Name
struct _d31: DeclName<_s24> {}; // CXXRecord Number
struct _d32: DeclName<_s25> {}; // CXXRecord NumberObject
struct _d33: DeclName<_s26> {}; // CXXRecord Object
struct _d34: DeclName<_s27> {}; // CXXRecord ObjectOperationDescriptor
struct _d35: DeclName<_s28> {}; // CXXRecord ObjectTemplate
struct _d36: DeclName<_s29> {}; // CXXRecord Platform
struct _d37: DeclName<_s30> {}; // CXXRecord Primitive
struct _d38: DeclName<_s31> {}; // CXXRecord Promise
struct _d39: DeclName<_s32> {}; // CXXRecord PropertyDescriptor
struct _d40: DeclName<_s33> {}; // CXXRecord Proxy
struct _d41: DeclName<_s34> {}; // CXXRecord RawOperationDescriptor
struct _d42: DeclName<_s35> {}; // CXXRecord Script
struct _d43: DeclName<_s36> {}; // CXXRecord SharedArrayBuffer
struct _d44: DeclName<_s37> {}; // CXXRecord Signature
struct _d45: DeclName<_s38> {}; // CXXRecord StartupData
struct _d46: DeclName<_s39> {}; // CXXRecord StackFrame
struct _d47: DeclName<_s40> {}; // CXXRecord StackTrace
struct _d48: DeclName<_s41> {}; // CXXRecord String
struct _d49: DeclName<_s42> {}; // CXXRecord StringObject
struct _d50: DeclName<_s43> {}; // CXXRecord Symbol
struct _d51: DeclName<_s44> {}; // CXXRecord SymbolObject
struct _d52: DeclName<_s45> {}; // CXXRecord PrimitiveArray
struct _d53: DeclName<_s46> {}; // CXXRecord Private
struct _d54: DeclName<_s47> {}; // CXXRecord Uint32
struct _d55: DeclName<_s48> {}; // CXXRecord Utils
struct _d56: DeclName<_s49> {}; // CXXRecord Value
struct _d57: DeclName<_s50> {}; // CXXRecord WasmModuleObject
struct _d58: DeclName<_s51> {}; // ClassTemplate Local
struct _d59: DeclName<_s21> {}; // TemplateTypeParm T
struct _d60: DeclName<_s51> {}; // CXXRecord Local
struct _d61: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d62: DeclName<_s51> {}; // CXXConstructor Local
struct _d63: DeclName<_s51> {}; // FunctionTemplate Local
struct _d64: DeclName<_s52> {}; // TemplateTypeParm S
struct _d65: DeclName<_s51> {}; // CXXConstructor Local
struct _d66: DeclName<_s53> {}; // ParmVar that
struct _d67: DeclName<_s51> {}; // CXXConstructor Local
struct _d68: DeclName<_s53> {}; // ParmVar that
struct _d69: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d70: DeclName<_s55> {}; // CXXMethod Clear
struct _d71: DeclName<_s56> {}; // CXXMethod operator->
struct _d72: DeclName<_s57> {}; // CXXMethod operator*
struct _d73: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d74: DeclName<_s52> {}; // TemplateTypeParm S
struct _d75: DeclName<_s58> {}; // CXXMethod operator==
struct _d76: DeclName<_s53> {}; // ParmVar that
struct _d77: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d78: DeclName<_s52> {}; // TemplateTypeParm S
struct _d79: DeclName<_s58> {}; // CXXMethod operator==
struct _d80: DeclName<_s53> {}; // ParmVar that
struct _d81: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d82: DeclName<_s52> {}; // TemplateTypeParm S
struct _d83: DeclName<_s59> {}; // CXXMethod operator!=
struct _d84: DeclName<_s53> {}; // ParmVar that
struct _d85: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d86: DeclName<_s52> {}; // TemplateTypeParm S
struct _d87: DeclName<_s59> {}; // CXXMethod operator!=
struct _d88: DeclName<_s53> {}; // ParmVar that
struct _d89: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d90: DeclName<_s52> {}; // TemplateTypeParm S
struct _d91: DeclName<_s60> {}; // CXXMethod Cast
struct _d92: DeclName<_s53> {}; // ParmVar that
struct _d93: DeclName<_s61> {}; // FunctionTemplate As
struct _d94: DeclName<_s52> {}; // TemplateTypeParm S
struct _d95: DeclName<_s61> {}; // CXXMethod As
struct _d96: DeclName<_s62> {}; // CXXMethod New
struct _d97: DeclName<_s63> {}; // ParmVar isolate
struct _d98: DeclName<_s53> {}; // ParmVar that
struct _d99: DeclName<_s62> {}; // CXXMethod New
struct _d100: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d101: DeclName<_s63> {}; // ParmVar isolate
struct _d102: DeclName<_s53> {}; // ParmVar that
struct _d103: DeclName<_s62> {}; // CXXMethod New
struct _d104: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d105: DeclName<_s63> {}; // ParmVar isolate
struct _d106: DeclName<_s53> {}; // ParmVar that
struct _d107: DeclName<_s51> {}; // CXXConstructor Local
struct _d109: DeclName<_s51> {}; // CXXConstructor Local
struct _d111: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d112: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d113: DeclName<_s51> {}; // CXXConstructor Local
struct _d114: DeclName<_s51> {}; // FunctionTemplate Local
struct _d115: DeclName<_s52> {}; // TemplateTypeParm S
struct _d116: DeclName<_s51> {}; // CXXConstructor Local
struct _d117: DeclName<_s53> {}; // ParmVar that
struct _d118: DeclName<_s51> {}; // CXXConstructor Local
struct _d119: DeclName<_s53> {}; // ParmVar that
struct _d120: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d121: DeclName<_s55> {}; // CXXMethod Clear
struct _d122: DeclName<_s56> {}; // CXXMethod operator->
struct _d123: DeclName<_s57> {}; // CXXMethod operator*
struct _d124: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d125: DeclName<_s52> {}; // TemplateTypeParm S
struct _d126: DeclName<_s58> {}; // CXXMethod operator==
struct _d127: DeclName<_s53> {}; // ParmVar that
struct _d128: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d129: DeclName<_s52> {}; // TemplateTypeParm S
struct _d130: DeclName<_s58> {}; // CXXMethod operator==
struct _d131: DeclName<_s53> {}; // ParmVar that
struct _d132: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d133: DeclName<_s52> {}; // TemplateTypeParm S
struct _d134: DeclName<_s59> {}; // CXXMethod operator!=
struct _d135: DeclName<_s53> {}; // ParmVar that
struct _d136: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d137: DeclName<_s52> {}; // TemplateTypeParm S
struct _d138: DeclName<_s59> {}; // CXXMethod operator!=
struct _d139: DeclName<_s53> {}; // ParmVar that
struct _d140: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d141: DeclName<_s52> {}; // TemplateTypeParm S
struct _d142: DeclName<_s60> {}; // CXXMethod Cast
struct _d143: DeclName<_s53> {}; // ParmVar that
struct _d144: DeclName<_s61> {}; // FunctionTemplate As
struct _d145: DeclName<_s52> {}; // TemplateTypeParm S
struct _d146: DeclName<_s61> {}; // CXXMethod As
struct _d147: DeclName<_s62> {}; // CXXMethod New
struct _d148: DeclName<_s63> {}; // ParmVar isolate
struct _d149: DeclName<_s53> {}; // ParmVar that
struct _d150: DeclName<_s62> {}; // CXXMethod New
struct _d151: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d152: DeclName<_s63> {}; // ParmVar isolate
struct _d153: DeclName<_s53> {}; // ParmVar that
struct _d154: DeclName<_s62> {}; // CXXMethod New
struct _d155: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d156: DeclName<_s63> {}; // ParmVar isolate
struct _d157: DeclName<_s53> {}; // ParmVar that
struct _d158: DeclName<_s51> {}; // CXXConstructor Local
struct _d160: DeclName<_s51> {}; // CXXConstructor Local
struct _d162: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d163: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d164: DeclName<_s51> {}; // CXXConstructor Local
struct _d165: DeclName<_s51> {}; // FunctionTemplate Local
struct _d166: DeclName<_s52> {}; // TemplateTypeParm S
struct _d167: DeclName<_s51> {}; // CXXConstructor Local
struct _d168: DeclName<_s53> {}; // ParmVar that
struct _d169: DeclName<_s51> {}; // CXXConstructor Local
struct _d170: DeclName<_s53> {}; // ParmVar that
struct _d171: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d172: DeclName<_s55> {}; // CXXMethod Clear
struct _d173: DeclName<_s56> {}; // CXXMethod operator->
struct _d174: DeclName<_s57> {}; // CXXMethod operator*
struct _d175: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d176: DeclName<_s52> {}; // TemplateTypeParm S
struct _d177: DeclName<_s58> {}; // CXXMethod operator==
struct _d178: DeclName<_s53> {}; // ParmVar that
struct _d179: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d180: DeclName<_s52> {}; // TemplateTypeParm S
struct _d181: DeclName<_s58> {}; // CXXMethod operator==
struct _d182: DeclName<_s53> {}; // ParmVar that
struct _d183: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d184: DeclName<_s52> {}; // TemplateTypeParm S
struct _d185: DeclName<_s59> {}; // CXXMethod operator!=
struct _d186: DeclName<_s53> {}; // ParmVar that
struct _d187: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d188: DeclName<_s52> {}; // TemplateTypeParm S
struct _d189: DeclName<_s59> {}; // CXXMethod operator!=
struct _d190: DeclName<_s53> {}; // ParmVar that
struct _d191: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d192: DeclName<_s52> {}; // TemplateTypeParm S
struct _d193: DeclName<_s60> {}; // CXXMethod Cast
struct _d194: DeclName<_s53> {}; // ParmVar that
struct _d195: DeclName<_s61> {}; // FunctionTemplate As
struct _d196: DeclName<_s52> {}; // TemplateTypeParm S
struct _d197: DeclName<_s61> {}; // CXXMethod As
struct _d198: DeclName<_s62> {}; // CXXMethod New
struct _d199: DeclName<_s63> {}; // ParmVar isolate
struct _d200: DeclName<_s53> {}; // ParmVar that
struct _d201: DeclName<_s62> {}; // CXXMethod New
struct _d202: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d203: DeclName<_s63> {}; // ParmVar isolate
struct _d204: DeclName<_s53> {}; // ParmVar that
struct _d205: DeclName<_s62> {}; // CXXMethod New
struct _d206: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d207: DeclName<_s63> {}; // ParmVar isolate
struct _d208: DeclName<_s53> {}; // ParmVar that
struct _d209: DeclName<_s51> {}; // CXXConstructor Local
struct _d211: DeclName<_s51> {}; // CXXConstructor Local
struct _d213: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d214: DeclName<_s67> {}; // CXXMethod operator=
struct _d216: DeclName<_s67> {}; // CXXMethod operator=
struct _d218: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d219: DeclName<_s51> {}; // CXXConstructor Local
struct _d220: DeclName<_s51> {}; // FunctionTemplate Local
struct _d221: DeclName<_s52> {}; // TemplateTypeParm S
struct _d222: DeclName<_s51> {}; // CXXConstructor Local
struct _d223: DeclName<_s53> {}; // ParmVar that
struct _d224: DeclName<_s51> {}; // CXXConstructor Local
struct _d225: DeclName<_s53> {}; // ParmVar that
struct _d226: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d227: DeclName<_s55> {}; // CXXMethod Clear
struct _d228: DeclName<_s56> {}; // CXXMethod operator->
struct _d229: DeclName<_s57> {}; // CXXMethod operator*
struct _d230: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d231: DeclName<_s52> {}; // TemplateTypeParm S
struct _d232: DeclName<_s58> {}; // CXXMethod operator==
struct _d233: DeclName<_s53> {}; // ParmVar that
struct _d234: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d235: DeclName<_s52> {}; // TemplateTypeParm S
struct _d236: DeclName<_s58> {}; // CXXMethod operator==
struct _d237: DeclName<_s53> {}; // ParmVar that
struct _d238: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d239: DeclName<_s52> {}; // TemplateTypeParm S
struct _d240: DeclName<_s59> {}; // CXXMethod operator!=
struct _d241: DeclName<_s53> {}; // ParmVar that
struct _d242: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d243: DeclName<_s52> {}; // TemplateTypeParm S
struct _d244: DeclName<_s59> {}; // CXXMethod operator!=
struct _d245: DeclName<_s53> {}; // ParmVar that
struct _d246: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d247: DeclName<_s52> {}; // TemplateTypeParm S
struct _d248: DeclName<_s60> {}; // CXXMethod Cast
struct _d249: DeclName<_s53> {}; // ParmVar that
struct _d250: DeclName<_s61> {}; // FunctionTemplate As
struct _d251: DeclName<_s52> {}; // TemplateTypeParm S
struct _d252: DeclName<_s61> {}; // CXXMethod As
struct _d253: DeclName<_s62> {}; // CXXMethod New
struct _d254: DeclName<_s63> {}; // ParmVar isolate
struct _d255: DeclName<_s53> {}; // ParmVar that
struct _d256: DeclName<_s62> {}; // CXXMethod New
struct _d257: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d258: DeclName<_s63> {}; // ParmVar isolate
struct _d259: DeclName<_s53> {}; // ParmVar that
struct _d260: DeclName<_s62> {}; // CXXMethod New
struct _d261: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d262: DeclName<_s63> {}; // ParmVar isolate
struct _d263: DeclName<_s53> {}; // ParmVar that
struct _d264: DeclName<_s51> {}; // CXXConstructor Local
struct _d266: DeclName<_s51> {}; // CXXConstructor Local
struct _d268: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d269: DeclName<_s67> {}; // CXXMethod operator=
struct _d271: DeclName<_s67> {}; // CXXMethod operator=
struct _d273: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d274: DeclName<_s51> {}; // CXXConstructor Local
struct _d275: DeclName<_s51> {}; // FunctionTemplate Local
struct _d276: DeclName<_s52> {}; // TemplateTypeParm S
struct _d277: DeclName<_s51> {}; // CXXConstructor Local
struct _d278: DeclName<_s53> {}; // ParmVar that
struct _d279: DeclName<_s51> {}; // CXXConstructor Local
struct _d280: DeclName<_s53> {}; // ParmVar that
struct _d281: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d282: DeclName<_s55> {}; // CXXMethod Clear
struct _d283: DeclName<_s56> {}; // CXXMethod operator->
struct _d284: DeclName<_s57> {}; // CXXMethod operator*
struct _d285: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d286: DeclName<_s52> {}; // TemplateTypeParm S
struct _d287: DeclName<_s58> {}; // CXXMethod operator==
struct _d288: DeclName<_s53> {}; // ParmVar that
struct _d289: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d290: DeclName<_s52> {}; // TemplateTypeParm S
struct _d291: DeclName<_s58> {}; // CXXMethod operator==
struct _d292: DeclName<_s53> {}; // ParmVar that
struct _d293: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d294: DeclName<_s52> {}; // TemplateTypeParm S
struct _d295: DeclName<_s59> {}; // CXXMethod operator!=
struct _d296: DeclName<_s53> {}; // ParmVar that
struct _d297: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d298: DeclName<_s52> {}; // TemplateTypeParm S
struct _d299: DeclName<_s59> {}; // CXXMethod operator!=
struct _d300: DeclName<_s53> {}; // ParmVar that
struct _d301: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d302: DeclName<_s52> {}; // TemplateTypeParm S
struct _d303: DeclName<_s60> {}; // CXXMethod Cast
struct _d304: DeclName<_s53> {}; // ParmVar that
struct _d305: DeclName<_s61> {}; // FunctionTemplate As
struct _d306: DeclName<_s52> {}; // TemplateTypeParm S
struct _d307: DeclName<_s61> {}; // CXXMethod As
struct _d308: DeclName<_s62> {}; // CXXMethod New
struct _d309: DeclName<_s63> {}; // ParmVar isolate
struct _d310: DeclName<_s53> {}; // ParmVar that
struct _d311: DeclName<_s62> {}; // CXXMethod New
struct _d312: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d313: DeclName<_s63> {}; // ParmVar isolate
struct _d314: DeclName<_s53> {}; // ParmVar that
struct _d315: DeclName<_s62> {}; // CXXMethod New
struct _d316: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d317: DeclName<_s63> {}; // ParmVar isolate
struct _d318: DeclName<_s53> {}; // ParmVar that
struct _d319: DeclName<_s51> {}; // CXXConstructor Local
struct _d321: DeclName<_s51> {}; // CXXConstructor Local
struct _d323: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d324: DeclName<_s67> {}; // CXXMethod operator=
struct _d326: DeclName<_s67> {}; // CXXMethod operator=
struct _d328: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d329: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d330: DeclName<_s51> {}; // CXXConstructor Local
struct _d331: DeclName<_s51> {}; // FunctionTemplate Local
struct _d332: DeclName<_s52> {}; // TemplateTypeParm S
struct _d333: DeclName<_s51> {}; // CXXConstructor Local
struct _d334: DeclName<_s53> {}; // ParmVar that
struct _d335: DeclName<_s51> {}; // CXXConstructor Local
struct _d336: DeclName<_s53> {}; // ParmVar that
struct _d337: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d338: DeclName<_s55> {}; // CXXMethod Clear
struct _d339: DeclName<_s56> {}; // CXXMethod operator->
struct _d340: DeclName<_s57> {}; // CXXMethod operator*
struct _d341: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d342: DeclName<_s52> {}; // TemplateTypeParm S
struct _d343: DeclName<_s58> {}; // CXXMethod operator==
struct _d344: DeclName<_s53> {}; // ParmVar that
struct _d345: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d346: DeclName<_s52> {}; // TemplateTypeParm S
struct _d347: DeclName<_s58> {}; // CXXMethod operator==
struct _d348: DeclName<_s53> {}; // ParmVar that
struct _d349: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d350: DeclName<_s52> {}; // TemplateTypeParm S
struct _d351: DeclName<_s59> {}; // CXXMethod operator!=
struct _d352: DeclName<_s53> {}; // ParmVar that
struct _d353: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d354: DeclName<_s52> {}; // TemplateTypeParm S
struct _d355: DeclName<_s59> {}; // CXXMethod operator!=
struct _d356: DeclName<_s53> {}; // ParmVar that
struct _d357: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d358: DeclName<_s52> {}; // TemplateTypeParm S
struct _d359: DeclName<_s60> {}; // CXXMethod Cast
struct _d360: DeclName<_s53> {}; // ParmVar that
struct _d361: DeclName<_s61> {}; // FunctionTemplate As
struct _d362: DeclName<_s52> {}; // TemplateTypeParm S
struct _d363: DeclName<_s61> {}; // CXXMethod As
struct _d364: DeclName<_s62> {}; // CXXMethod New
struct _d365: DeclName<_s63> {}; // ParmVar isolate
struct _d366: DeclName<_s53> {}; // ParmVar that
struct _d367: DeclName<_s62> {}; // CXXMethod New
struct _d368: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d369: DeclName<_s63> {}; // ParmVar isolate
struct _d370: DeclName<_s53> {}; // ParmVar that
struct _d371: DeclName<_s62> {}; // CXXMethod New
struct _d372: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d373: DeclName<_s63> {}; // ParmVar isolate
struct _d374: DeclName<_s53> {}; // ParmVar that
struct _d375: DeclName<_s51> {}; // CXXConstructor Local
struct _d377: DeclName<_s51> {}; // CXXConstructor Local
struct _d379: DeclName<_s67> {}; // CXXMethod operator=
struct _d381: DeclName<_s67> {}; // CXXMethod operator=
struct _d383: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d384: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d385: DeclName<_s51> {}; // CXXConstructor Local
struct _d386: DeclName<_s51> {}; // FunctionTemplate Local
struct _d387: DeclName<_s52> {}; // TemplateTypeParm S
struct _d388: DeclName<_s51> {}; // CXXConstructor Local
struct _d389: DeclName<_s53> {}; // ParmVar that
struct _d390: DeclName<_s51> {}; // CXXConstructor Local
struct _d391: DeclName<_s53> {}; // ParmVar that
struct _d392: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d393: DeclName<_s55> {}; // CXXMethod Clear
struct _d394: DeclName<_s56> {}; // CXXMethod operator->
struct _d395: DeclName<_s57> {}; // CXXMethod operator*
struct _d396: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d397: DeclName<_s52> {}; // TemplateTypeParm S
struct _d398: DeclName<_s58> {}; // CXXMethod operator==
struct _d399: DeclName<_s53> {}; // ParmVar that
struct _d400: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d401: DeclName<_s52> {}; // TemplateTypeParm S
struct _d402: DeclName<_s58> {}; // CXXMethod operator==
struct _d403: DeclName<_s53> {}; // ParmVar that
struct _d404: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d405: DeclName<_s52> {}; // TemplateTypeParm S
struct _d406: DeclName<_s59> {}; // CXXMethod operator!=
struct _d407: DeclName<_s53> {}; // ParmVar that
struct _d408: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d409: DeclName<_s52> {}; // TemplateTypeParm S
struct _d410: DeclName<_s59> {}; // CXXMethod operator!=
struct _d411: DeclName<_s53> {}; // ParmVar that
struct _d412: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d413: DeclName<_s52> {}; // TemplateTypeParm S
struct _d414: DeclName<_s60> {}; // CXXMethod Cast
struct _d415: DeclName<_s53> {}; // ParmVar that
struct _d416: DeclName<_s61> {}; // FunctionTemplate As
struct _d417: DeclName<_s52> {}; // TemplateTypeParm S
struct _d418: DeclName<_s61> {}; // CXXMethod As
struct _d419: DeclName<_s62> {}; // CXXMethod New
struct _d420: DeclName<_s63> {}; // ParmVar isolate
struct _d421: DeclName<_s53> {}; // ParmVar that
struct _d422: DeclName<_s62> {}; // CXXMethod New
struct _d423: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d424: DeclName<_s63> {}; // ParmVar isolate
struct _d425: DeclName<_s53> {}; // ParmVar that
struct _d426: DeclName<_s62> {}; // CXXMethod New
struct _d427: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d428: DeclName<_s63> {}; // ParmVar isolate
struct _d429: DeclName<_s53> {}; // ParmVar that
struct _d430: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d431: DeclName<_s51> {}; // CXXConstructor Local
struct _d433: DeclName<_s51> {}; // CXXConstructor Local
struct _d435: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d436: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d437: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d438: DeclName<_s51> {}; // CXXConstructor Local
struct _d439: DeclName<_s51> {}; // FunctionTemplate Local
struct _d440: DeclName<_s52> {}; // TemplateTypeParm S
struct _d441: DeclName<_s51> {}; // CXXConstructor Local
struct _d442: DeclName<_s53> {}; // ParmVar that
struct _d443: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d444: DeclName<_s55> {}; // CXXMethod Clear
struct _d445: DeclName<_s56> {}; // CXXMethod operator->
struct _d446: DeclName<_s68> {}; // CXXRecord UnboundScript
struct _d447: DeclName<_s57> {}; // CXXMethod operator*
struct _d448: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d449: DeclName<_s52> {}; // TemplateTypeParm S
struct _d450: DeclName<_s58> {}; // CXXMethod operator==
struct _d451: DeclName<_s53> {}; // ParmVar that
struct _d452: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d453: DeclName<_s52> {}; // TemplateTypeParm S
struct _d454: DeclName<_s58> {}; // CXXMethod operator==
struct _d455: DeclName<_s53> {}; // ParmVar that
struct _d456: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d457: DeclName<_s52> {}; // TemplateTypeParm S
struct _d458: DeclName<_s59> {}; // CXXMethod operator!=
struct _d459: DeclName<_s53> {}; // ParmVar that
struct _d460: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d461: DeclName<_s52> {}; // TemplateTypeParm S
struct _d462: DeclName<_s59> {}; // CXXMethod operator!=
struct _d463: DeclName<_s53> {}; // ParmVar that
struct _d464: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d465: DeclName<_s52> {}; // TemplateTypeParm S
struct _d466: DeclName<_s60> {}; // CXXMethod Cast
struct _d467: DeclName<_s53> {}; // ParmVar that
struct _d468: DeclName<_s61> {}; // FunctionTemplate As
struct _d469: DeclName<_s52> {}; // TemplateTypeParm S
struct _d470: DeclName<_s61> {}; // CXXMethod As
struct _d471: DeclName<_s62> {}; // CXXMethod New
struct _d472: DeclName<_s63> {}; // ParmVar isolate
struct _d473: DeclName<_s53> {}; // ParmVar that
struct _d474: DeclName<_s62> {}; // CXXMethod New
struct _d475: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d476: DeclName<_s63> {}; // ParmVar isolate
struct _d477: DeclName<_s53> {}; // ParmVar that
struct _d478: DeclName<_s62> {}; // CXXMethod New
struct _d479: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d480: DeclName<_s63> {}; // ParmVar isolate
struct _d481: DeclName<_s53> {}; // ParmVar that
struct _d482: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d483: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d484: DeclName<_s51> {}; // CXXConstructor Local
struct _d485: DeclName<_s51> {}; // FunctionTemplate Local
struct _d486: DeclName<_s52> {}; // TemplateTypeParm S
struct _d487: DeclName<_s51> {}; // CXXConstructor Local
struct _d488: DeclName<_s53> {}; // ParmVar that
struct _d489: DeclName<_s51> {}; // CXXConstructor Local
struct _d490: DeclName<_s53> {}; // ParmVar that
struct _d491: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d492: DeclName<_s55> {}; // CXXMethod Clear
struct _d493: DeclName<_s56> {}; // CXXMethod operator->
struct _d494: DeclName<_s57> {}; // CXXMethod operator*
struct _d495: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d496: DeclName<_s52> {}; // TemplateTypeParm S
struct _d497: DeclName<_s58> {}; // CXXMethod operator==
struct _d498: DeclName<_s53> {}; // ParmVar that
struct _d499: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d500: DeclName<_s52> {}; // TemplateTypeParm S
struct _d501: DeclName<_s58> {}; // CXXMethod operator==
struct _d502: DeclName<_s53> {}; // ParmVar that
struct _d503: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d504: DeclName<_s52> {}; // TemplateTypeParm S
struct _d505: DeclName<_s59> {}; // CXXMethod operator!=
struct _d506: DeclName<_s53> {}; // ParmVar that
struct _d507: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d508: DeclName<_s52> {}; // TemplateTypeParm S
struct _d509: DeclName<_s59> {}; // CXXMethod operator!=
struct _d510: DeclName<_s53> {}; // ParmVar that
struct _d511: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d512: DeclName<_s52> {}; // TemplateTypeParm S
struct _d513: DeclName<_s60> {}; // CXXMethod Cast
struct _d514: DeclName<_s53> {}; // ParmVar that
struct _d515: DeclName<_s61> {}; // FunctionTemplate As
struct _d516: DeclName<_s52> {}; // TemplateTypeParm S
struct _d517: DeclName<_s61> {}; // CXXMethod As
struct _d518: DeclName<_s62> {}; // CXXMethod New
struct _d519: DeclName<_s63> {}; // ParmVar isolate
struct _d520: DeclName<_s53> {}; // ParmVar that
struct _d521: DeclName<_s62> {}; // CXXMethod New
struct _d522: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d523: DeclName<_s63> {}; // ParmVar isolate
struct _d524: DeclName<_s53> {}; // ParmVar that
struct _d525: DeclName<_s62> {}; // CXXMethod New
struct _d526: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d527: DeclName<_s63> {}; // ParmVar isolate
struct _d528: DeclName<_s53> {}; // ParmVar that
struct _d529: DeclName<_s51> {}; // CXXConstructor Local
struct _d531: DeclName<_s51> {}; // CXXConstructor Local
struct _d533: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d534: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d535: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d536: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d537: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d538: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d539: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d540: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d541: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d542: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d543: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d544: DeclName<_s51> {}; // CXXConstructor Local
struct _d545: DeclName<_s51> {}; // FunctionTemplate Local
struct _d546: DeclName<_s52> {}; // TemplateTypeParm S
struct _d547: DeclName<_s51> {}; // CXXConstructor Local
struct _d548: DeclName<_s53> {}; // ParmVar that
struct _d549: DeclName<_s51> {}; // CXXConstructor Local
struct _d550: DeclName<_s53> {}; // ParmVar that
struct _d551: DeclName<_s51> {}; // CXXConstructor Local
struct _d552: DeclName<_s53> {}; // ParmVar that
struct _d553: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d554: DeclName<_s55> {}; // CXXMethod Clear
struct _d555: DeclName<_s56> {}; // CXXMethod operator->
struct _d556: DeclName<_s57> {}; // CXXMethod operator*
struct _d557: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d558: DeclName<_s52> {}; // TemplateTypeParm S
struct _d559: DeclName<_s58> {}; // CXXMethod operator==
struct _d560: DeclName<_s53> {}; // ParmVar that
struct _d561: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d562: DeclName<_s52> {}; // TemplateTypeParm S
struct _d563: DeclName<_s58> {}; // CXXMethod operator==
struct _d564: DeclName<_s53> {}; // ParmVar that
struct _d565: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d566: DeclName<_s52> {}; // TemplateTypeParm S
struct _d567: DeclName<_s59> {}; // CXXMethod operator!=
struct _d568: DeclName<_s53> {}; // ParmVar that
struct _d569: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d570: DeclName<_s52> {}; // TemplateTypeParm S
struct _d571: DeclName<_s59> {}; // CXXMethod operator!=
struct _d572: DeclName<_s53> {}; // ParmVar that
struct _d573: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d574: DeclName<_s52> {}; // TemplateTypeParm S
struct _d575: DeclName<_s60> {}; // CXXMethod Cast
struct _d576: DeclName<_s53> {}; // ParmVar that
struct _d577: DeclName<_s61> {}; // FunctionTemplate As
struct _d578: DeclName<_s52> {}; // TemplateTypeParm S
struct _d579: DeclName<_s61> {}; // CXXMethod As
struct _d580: DeclName<_s62> {}; // CXXMethod New
struct _d581: DeclName<_s63> {}; // ParmVar isolate
struct _d582: DeclName<_s53> {}; // ParmVar that
struct _d583: DeclName<_s62> {}; // CXXMethod New
struct _d584: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d585: DeclName<_s63> {}; // ParmVar isolate
struct _d586: DeclName<_s53> {}; // ParmVar that
struct _d587: DeclName<_s62> {}; // CXXMethod New
struct _d588: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d589: DeclName<_s63> {}; // ParmVar isolate
struct _d590: DeclName<_s53> {}; // ParmVar that
struct _d591: DeclName<_s51> {}; // CXXConstructor Local
struct _d593: DeclName<_s51> {}; // CXXConstructor Local
struct _d595: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d596: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d597: DeclName<_s51> {}; // CXXConstructor Local
struct _d598: DeclName<_s51> {}; // FunctionTemplate Local
struct _d599: DeclName<_s52> {}; // TemplateTypeParm S
struct _d600: DeclName<_s51> {}; // CXXConstructor Local
struct _d601: DeclName<_s53> {}; // ParmVar that
struct _d602: DeclName<_s51> {}; // CXXConstructor Local
struct _d603: DeclName<_s53> {}; // ParmVar that
struct _d604: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d605: DeclName<_s55> {}; // CXXMethod Clear
struct _d606: DeclName<_s56> {}; // CXXMethod operator->
struct _d607: DeclName<_s57> {}; // CXXMethod operator*
struct _d608: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d609: DeclName<_s52> {}; // TemplateTypeParm S
struct _d610: DeclName<_s58> {}; // CXXMethod operator==
struct _d611: DeclName<_s53> {}; // ParmVar that
struct _d612: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d613: DeclName<_s52> {}; // TemplateTypeParm S
struct _d614: DeclName<_s58> {}; // CXXMethod operator==
struct _d615: DeclName<_s53> {}; // ParmVar that
struct _d616: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d617: DeclName<_s52> {}; // TemplateTypeParm S
struct _d618: DeclName<_s59> {}; // CXXMethod operator!=
struct _d619: DeclName<_s53> {}; // ParmVar that
struct _d620: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d621: DeclName<_s52> {}; // TemplateTypeParm S
struct _d622: DeclName<_s59> {}; // CXXMethod operator!=
struct _d623: DeclName<_s53> {}; // ParmVar that
struct _d624: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d625: DeclName<_s52> {}; // TemplateTypeParm S
struct _d626: DeclName<_s60> {}; // CXXMethod Cast
struct _d627: DeclName<_s53> {}; // ParmVar that
struct _d628: DeclName<_s61> {}; // FunctionTemplate As
struct _d629: DeclName<_s52> {}; // TemplateTypeParm S
struct _d630: DeclName<_s61> {}; // CXXMethod As
struct _d631: DeclName<_s62> {}; // CXXMethod New
struct _d632: DeclName<_s63> {}; // ParmVar isolate
struct _d633: DeclName<_s53> {}; // ParmVar that
struct _d634: DeclName<_s62> {}; // CXXMethod New
struct _d635: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d636: DeclName<_s63> {}; // ParmVar isolate
struct _d637: DeclName<_s53> {}; // ParmVar that
struct _d638: DeclName<_s62> {}; // CXXMethod New
struct _d639: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d640: DeclName<_s63> {}; // ParmVar isolate
struct _d641: DeclName<_s53> {}; // ParmVar that
struct _d642: DeclName<_s51> {}; // CXXConstructor Local
struct _d644: DeclName<_s51> {}; // CXXConstructor Local
struct _d646: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d647: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d648: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d649: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d650: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d651: DeclName<_s51> {}; // CXXConstructor Local
struct _d652: DeclName<_s51> {}; // FunctionTemplate Local
struct _d653: DeclName<_s52> {}; // TemplateTypeParm S
struct _d654: DeclName<_s51> {}; // CXXConstructor Local
struct _d655: DeclName<_s53> {}; // ParmVar that
struct _d656: DeclName<_s51> {}; // CXXConstructor Local
struct _d657: DeclName<_s53> {}; // ParmVar that
struct _d658: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d659: DeclName<_s55> {}; // CXXMethod Clear
struct _d660: DeclName<_s56> {}; // CXXMethod operator->
struct _d661: DeclName<_s57> {}; // CXXMethod operator*
struct _d662: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d663: DeclName<_s52> {}; // TemplateTypeParm S
struct _d664: DeclName<_s58> {}; // CXXMethod operator==
struct _d665: DeclName<_s53> {}; // ParmVar that
struct _d666: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d667: DeclName<_s52> {}; // TemplateTypeParm S
struct _d668: DeclName<_s58> {}; // CXXMethod operator==
struct _d669: DeclName<_s53> {}; // ParmVar that
struct _d670: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d671: DeclName<_s52> {}; // TemplateTypeParm S
struct _d672: DeclName<_s59> {}; // CXXMethod operator!=
struct _d673: DeclName<_s53> {}; // ParmVar that
struct _d674: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d675: DeclName<_s52> {}; // TemplateTypeParm S
struct _d676: DeclName<_s59> {}; // CXXMethod operator!=
struct _d677: DeclName<_s53> {}; // ParmVar that
struct _d678: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d679: DeclName<_s52> {}; // TemplateTypeParm S
struct _d680: DeclName<_s60> {}; // CXXMethod Cast
struct _d681: DeclName<_s53> {}; // ParmVar that
struct _d682: DeclName<_s61> {}; // FunctionTemplate As
struct _d683: DeclName<_s52> {}; // TemplateTypeParm S
struct _d684: DeclName<_s61> {}; // CXXMethod As
struct _d685: DeclName<_s62> {}; // CXXMethod New
struct _d686: DeclName<_s63> {}; // ParmVar isolate
struct _d687: DeclName<_s53> {}; // ParmVar that
struct _d688: DeclName<_s62> {}; // CXXMethod New
struct _d689: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d690: DeclName<_s63> {}; // ParmVar isolate
struct _d691: DeclName<_s53> {}; // ParmVar that
struct _d692: DeclName<_s62> {}; // CXXMethod New
struct _d693: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d694: DeclName<_s63> {}; // ParmVar isolate
struct _d695: DeclName<_s53> {}; // ParmVar that
struct _d696: DeclName<_s51> {}; // CXXConstructor Local
struct _d698: DeclName<_s51> {}; // CXXConstructor Local
struct _d700: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d701: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d702: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d703: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d704: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d705: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d706: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d707: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d708: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d709: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d710: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d711: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d712: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d713: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d714: DeclName<_s51> {}; // CXXConstructor Local
struct _d715: DeclName<_s51> {}; // FunctionTemplate Local
struct _d716: DeclName<_s52> {}; // TemplateTypeParm S
struct _d717: DeclName<_s51> {}; // CXXConstructor Local
struct _d718: DeclName<_s53> {}; // ParmVar that
struct _d719: DeclName<_s51> {}; // CXXConstructor Local
struct _d720: DeclName<_s53> {}; // ParmVar that
struct _d721: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d722: DeclName<_s55> {}; // CXXMethod Clear
struct _d723: DeclName<_s56> {}; // CXXMethod operator->
struct _d724: DeclName<_s57> {}; // CXXMethod operator*
struct _d725: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d726: DeclName<_s52> {}; // TemplateTypeParm S
struct _d727: DeclName<_s58> {}; // CXXMethod operator==
struct _d728: DeclName<_s53> {}; // ParmVar that
struct _d729: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d730: DeclName<_s52> {}; // TemplateTypeParm S
struct _d731: DeclName<_s58> {}; // CXXMethod operator==
struct _d732: DeclName<_s53> {}; // ParmVar that
struct _d733: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d734: DeclName<_s52> {}; // TemplateTypeParm S
struct _d735: DeclName<_s59> {}; // CXXMethod operator!=
struct _d736: DeclName<_s53> {}; // ParmVar that
struct _d737: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d738: DeclName<_s52> {}; // TemplateTypeParm S
struct _d739: DeclName<_s59> {}; // CXXMethod operator!=
struct _d740: DeclName<_s53> {}; // ParmVar that
struct _d741: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d742: DeclName<_s52> {}; // TemplateTypeParm S
struct _d743: DeclName<_s60> {}; // CXXMethod Cast
struct _d744: DeclName<_s53> {}; // ParmVar that
struct _d745: DeclName<_s61> {}; // FunctionTemplate As
struct _d746: DeclName<_s52> {}; // TemplateTypeParm S
struct _d747: DeclName<_s61> {}; // CXXMethod As
struct _d748: DeclName<_s62> {}; // CXXMethod New
struct _d749: DeclName<_s63> {}; // ParmVar isolate
struct _d750: DeclName<_s53> {}; // ParmVar that
struct _d751: DeclName<_s62> {}; // CXXMethod New
struct _d752: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d753: DeclName<_s63> {}; // ParmVar isolate
struct _d754: DeclName<_s53> {}; // ParmVar that
struct _d755: DeclName<_s62> {}; // CXXMethod New
struct _d756: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d757: DeclName<_s63> {}; // ParmVar isolate
struct _d758: DeclName<_s53> {}; // ParmVar that
struct _d759: DeclName<_s51> {}; // CXXConstructor Local
struct _d761: DeclName<_s51> {}; // CXXConstructor Local
struct _d763: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d764: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d765: DeclName<_s51> {}; // CXXConstructor Local
struct _d766: DeclName<_s51> {}; // FunctionTemplate Local
struct _d767: DeclName<_s52> {}; // TemplateTypeParm S
struct _d768: DeclName<_s51> {}; // CXXConstructor Local
struct _d769: DeclName<_s53> {}; // ParmVar that
struct _d770: DeclName<_s51> {}; // CXXConstructor Local
struct _d771: DeclName<_s53> {}; // ParmVar that
struct _d772: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d773: DeclName<_s55> {}; // CXXMethod Clear
struct _d774: DeclName<_s56> {}; // CXXMethod operator->
struct _d775: DeclName<_s57> {}; // CXXMethod operator*
struct _d776: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d777: DeclName<_s52> {}; // TemplateTypeParm S
struct _d778: DeclName<_s58> {}; // CXXMethod operator==
struct _d779: DeclName<_s53> {}; // ParmVar that
struct _d780: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d781: DeclName<_s52> {}; // TemplateTypeParm S
struct _d782: DeclName<_s58> {}; // CXXMethod operator==
struct _d783: DeclName<_s53> {}; // ParmVar that
struct _d784: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d785: DeclName<_s52> {}; // TemplateTypeParm S
struct _d786: DeclName<_s59> {}; // CXXMethod operator!=
struct _d787: DeclName<_s53> {}; // ParmVar that
struct _d788: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d789: DeclName<_s52> {}; // TemplateTypeParm S
struct _d790: DeclName<_s59> {}; // CXXMethod operator!=
struct _d791: DeclName<_s53> {}; // ParmVar that
struct _d792: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d793: DeclName<_s52> {}; // TemplateTypeParm S
struct _d794: DeclName<_s60> {}; // CXXMethod Cast
struct _d795: DeclName<_s53> {}; // ParmVar that
struct _d796: DeclName<_s61> {}; // FunctionTemplate As
struct _d797: DeclName<_s52> {}; // TemplateTypeParm S
struct _d798: DeclName<_s61> {}; // CXXMethod As
struct _d799: DeclName<_s62> {}; // CXXMethod New
struct _d800: DeclName<_s63> {}; // ParmVar isolate
struct _d801: DeclName<_s53> {}; // ParmVar that
struct _d802: DeclName<_s62> {}; // CXXMethod New
struct _d803: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d804: DeclName<_s63> {}; // ParmVar isolate
struct _d805: DeclName<_s53> {}; // ParmVar that
struct _d806: DeclName<_s62> {}; // CXXMethod New
struct _d807: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d808: DeclName<_s63> {}; // ParmVar isolate
struct _d809: DeclName<_s53> {}; // ParmVar that
struct _d810: DeclName<_s51> {}; // CXXConstructor Local
struct _d812: DeclName<_s51> {}; // CXXConstructor Local
struct _d814: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d815: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d816: DeclName<_s51> {}; // CXXConstructor Local
struct _d817: DeclName<_s51> {}; // FunctionTemplate Local
struct _d818: DeclName<_s52> {}; // TemplateTypeParm S
struct _d819: DeclName<_s51> {}; // CXXConstructor Local
struct _d820: DeclName<_s53> {}; // ParmVar that
struct _d821: DeclName<_s51> {}; // CXXConstructor Local
struct _d822: DeclName<_s53> {}; // ParmVar that
struct _d823: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d824: DeclName<_s55> {}; // CXXMethod Clear
struct _d825: DeclName<_s56> {}; // CXXMethod operator->
struct _d826: DeclName<_s57> {}; // CXXMethod operator*
struct _d827: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d828: DeclName<_s52> {}; // TemplateTypeParm S
struct _d829: DeclName<_s58> {}; // CXXMethod operator==
struct _d830: DeclName<_s53> {}; // ParmVar that
struct _d831: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d832: DeclName<_s52> {}; // TemplateTypeParm S
struct _d833: DeclName<_s58> {}; // CXXMethod operator==
struct _d834: DeclName<_s53> {}; // ParmVar that
struct _d835: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d836: DeclName<_s52> {}; // TemplateTypeParm S
struct _d837: DeclName<_s59> {}; // CXXMethod operator!=
struct _d838: DeclName<_s53> {}; // ParmVar that
struct _d839: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d840: DeclName<_s52> {}; // TemplateTypeParm S
struct _d841: DeclName<_s59> {}; // CXXMethod operator!=
struct _d842: DeclName<_s53> {}; // ParmVar that
struct _d843: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d844: DeclName<_s52> {}; // TemplateTypeParm S
struct _d845: DeclName<_s60> {}; // CXXMethod Cast
struct _d846: DeclName<_s53> {}; // ParmVar that
struct _d847: DeclName<_s61> {}; // FunctionTemplate As
struct _d848: DeclName<_s52> {}; // TemplateTypeParm S
struct _d849: DeclName<_s61> {}; // CXXMethod As
struct _d850: DeclName<_s62> {}; // CXXMethod New
struct _d851: DeclName<_s63> {}; // ParmVar isolate
struct _d852: DeclName<_s53> {}; // ParmVar that
struct _d853: DeclName<_s62> {}; // CXXMethod New
struct _d854: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d855: DeclName<_s63> {}; // ParmVar isolate
struct _d856: DeclName<_s53> {}; // ParmVar that
struct _d857: DeclName<_s62> {}; // CXXMethod New
struct _d858: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d859: DeclName<_s63> {}; // ParmVar isolate
struct _d860: DeclName<_s53> {}; // ParmVar that
struct _d861: DeclName<_s51> {}; // CXXConstructor Local
struct _d863: DeclName<_s51> {}; // CXXConstructor Local
struct _d865: DeclName<_s66> {}; // CXXDestructor ~Local
struct _d866: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d867: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d868: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d869: DeclName<_s51> {}; // ClassTemplateSpecialization Local
struct _d870: DeclName<_s69> {}; // ClassTemplate MaybeLocal
struct _d871: DeclName<_s21> {}; // TemplateTypeParm T
struct _d872: DeclName<_s69> {}; // CXXRecord MaybeLocal
struct _d873: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d874: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d875: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d876: DeclName<_s69> {}; // FunctionTemplate MaybeLocal
struct _d877: DeclName<_s52> {}; // TemplateTypeParm S
struct _d878: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d879: DeclName<_s53> {}; // ParmVar that
struct _d880: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d881: DeclName<_s70> {}; // FunctionTemplate ToLocal
struct _d882: DeclName<_s52> {}; // TemplateTypeParm S
struct _d883: DeclName<_s70> {}; // CXXMethod ToLocal
struct _d884: DeclName<_s71> {}; // ParmVar out
struct _d885: DeclName<_s72> {}; // CXXMethod ToLocalChecked
struct _d886: DeclName<_s73> {}; // FunctionTemplate FromMaybe
struct _d887: DeclName<_s52> {}; // TemplateTypeParm S
struct _d888: DeclName<_s73> {}; // CXXMethod FromMaybe
struct _d889: DeclName<_s74> {}; // ParmVar default_value
struct _d890: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d892: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d894: DeclName<_s75> {}; // CXXDestructor ~MaybeLocal
struct _d895: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d896: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d897: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d898: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d899: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d900: DeclName<_s69> {}; // FunctionTemplate MaybeLocal
struct _d901: DeclName<_s52> {}; // TemplateTypeParm S
struct _d902: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d903: DeclName<_s53> {}; // ParmVar that
struct _d904: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d905: DeclName<_s70> {}; // FunctionTemplate ToLocal
struct _d906: DeclName<_s52> {}; // TemplateTypeParm S
struct _d907: DeclName<_s70> {}; // CXXMethod ToLocal
struct _d908: DeclName<_s71> {}; // ParmVar out
struct _d909: DeclName<_s72> {}; // CXXMethod ToLocalChecked
struct _d910: DeclName<_s73> {}; // FunctionTemplate FromMaybe
struct _d911: DeclName<_s52> {}; // TemplateTypeParm S
struct _d912: DeclName<_s73> {}; // CXXMethod FromMaybe
struct _d913: DeclName<_s74> {}; // ParmVar default_value
struct _d914: DeclName<_s75> {}; // CXXDestructor ~MaybeLocal
struct _d915: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d916: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d917: DeclName<_s69> {}; // FunctionTemplate MaybeLocal
struct _d918: DeclName<_s52> {}; // TemplateTypeParm S
struct _d919: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d920: DeclName<_s53> {}; // ParmVar that
struct _d921: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d922: DeclName<_s70> {}; // FunctionTemplate ToLocal
struct _d923: DeclName<_s52> {}; // TemplateTypeParm S
struct _d924: DeclName<_s70> {}; // CXXMethod ToLocal
struct _d925: DeclName<_s71> {}; // ParmVar out
struct _d926: DeclName<_s72> {}; // CXXMethod ToLocalChecked
struct _d927: DeclName<_s73> {}; // FunctionTemplate FromMaybe
struct _d928: DeclName<_s52> {}; // TemplateTypeParm S
struct _d929: DeclName<_s73> {}; // CXXMethod FromMaybe
struct _d930: DeclName<_s74> {}; // ParmVar default_value
struct _d931: DeclName<_s75> {}; // CXXDestructor ~MaybeLocal
struct _d932: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d934: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d936: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d937: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d938: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d939: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d940: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d941: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d942: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d943: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d944: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d945: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d946: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d947: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d948: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d949: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d950: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d951: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d952: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d953: DeclName<_s69> {}; // FunctionTemplate MaybeLocal
struct _d954: DeclName<_s52> {}; // TemplateTypeParm S
struct _d955: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d956: DeclName<_s53> {}; // ParmVar that
struct _d957: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d958: DeclName<_s70> {}; // FunctionTemplate ToLocal
struct _d959: DeclName<_s52> {}; // TemplateTypeParm S
struct _d960: DeclName<_s70> {}; // CXXMethod ToLocal
struct _d961: DeclName<_s71> {}; // ParmVar out
struct _d962: DeclName<_s72> {}; // CXXMethod ToLocalChecked
struct _d963: DeclName<_s73> {}; // FunctionTemplate FromMaybe
struct _d964: DeclName<_s52> {}; // TemplateTypeParm S
struct _d965: DeclName<_s73> {}; // CXXMethod FromMaybe
struct _d966: DeclName<_s74> {}; // ParmVar default_value
struct _d967: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d969: DeclName<_s69> {}; // CXXConstructor MaybeLocal
struct _d971: DeclName<_s75> {}; // CXXDestructor ~MaybeLocal
struct _d972: DeclName<_s69> {}; // ClassTemplateSpecialization MaybeLocal
struct _d973: DeclName<_s76> {}; // ClassTemplate Eternal
struct _d974: DeclName<_s21> {}; // TemplateTypeParm T
struct _d975: DeclName<_s76> {}; // CXXRecord Eternal
struct _d976: DeclName<_s77> {}; // ClassTemplate NonCopyablePersistentTraits
struct _d977: DeclName<_s21> {}; // TemplateTypeParm T
struct _d978: DeclName<_s77> {}; // CXXRecord NonCopyablePersistentTraits
struct _d979: DeclName<_s77> {}; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _d980: DeclName<_s77> {}; // ClassTemplateSpecialization NonCopyablePersistentTraits
struct _d981: DeclName<_s64> {}; // ClassTemplate PersistentBase
struct _d982: DeclName<_s21> {}; // TemplateTypeParm T
struct _d983: DeclName<_s64> {}; // CXXRecord PersistentBase
struct _d984: DeclName<_s64> {}; // ClassTemplateSpecialization PersistentBase
struct _d985: DeclName<_s78> {}; // CXXMethod Reset
struct _d986: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d987: DeclName<_s52> {}; // TemplateTypeParm S
struct _d988: DeclName<_s78> {}; // CXXMethod Reset
struct _d989: DeclName<_s63> {}; // ParmVar isolate
struct _d990: DeclName<_s79> {}; // ParmVar other
struct _d991: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d992: DeclName<_s52> {}; // TemplateTypeParm S
struct _d993: DeclName<_s78> {}; // CXXMethod Reset
struct _d994: DeclName<_s63> {}; // ParmVar isolate
struct _d995: DeclName<_s79> {}; // ParmVar other
struct _d996: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d997: DeclName<_s80> {}; // CXXMethod Empty
struct _d998: DeclName<_s81> {}; // CXXMethod Get
struct _d999: DeclName<_s63> {}; // ParmVar isolate
struct _d1000: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1001: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1002: DeclName<_s58> {}; // CXXMethod operator==
struct _d1003: DeclName<_s53> {}; // ParmVar that
struct _d1004: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1005: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1006: DeclName<_s58> {}; // CXXMethod operator==
struct _d1007: DeclName<_s53> {}; // ParmVar that
struct _d1008: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1009: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1010: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1011: DeclName<_s53> {}; // ParmVar that
struct _d1012: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1013: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1014: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1015: DeclName<_s53> {}; // ParmVar that
struct _d1016: DeclName<_s82> {}; // FunctionTemplate SetWeak
struct _d1017: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1018: DeclName<_s82> {}; // CXXMethod SetWeak
struct _d1019: DeclName<_s84> {}; // Enum WeakCallbackType
struct _d1020: DeclName<_s85> {}; // ParmVar parameter
struct _d1021: DeclName<_s86> {}; // ParmVar callback
struct _d1022: DeclName<_s87> {}; // ParmVar type
struct _d1023: DeclName<_s82> {}; // CXXMethod SetWeak
struct _d1024: DeclName<_s88> {}; // FunctionTemplate ClearWeak
struct _d1025: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1026: DeclName<_s88> {}; // CXXMethod ClearWeak
struct _d1027: DeclName<_s88> {}; // CXXMethod ClearWeak
struct _d1028: DeclName<_s89> {}; // CXXMethod AnnotateStrongRetainer
struct _d1029: DeclName<_s90> {}; // ParmVar label
struct _d1030: DeclName<_s91> {}; // CXXMethod IsWeak
struct _d1031: DeclName<_s92> {}; // CXXMethod SetWrapperClassId
struct _d1032: DeclName<_s93> {}; // ParmVar class_id
struct _d1033: DeclName<_s94> {}; // CXXMethod WrapperClassId
struct _d1034: DeclName<_s64> {}; // CXXConstructor PersistentBase
struct _d1035: DeclName<_s79> {}; // ParmVar other
struct _d1036: DeclName<_s67> {}; // CXXMethod operator=
struct _d1038: DeclName<_s78> {}; // CXXMethod Reset
struct _d1039: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d1040: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1041: DeclName<_s78> {}; // CXXMethod Reset
struct _d1042: DeclName<_s63> {}; // ParmVar isolate
struct _d1043: DeclName<_s79> {}; // ParmVar other
struct _d1044: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d1045: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1046: DeclName<_s78> {}; // CXXMethod Reset
struct _d1047: DeclName<_s63> {}; // ParmVar isolate
struct _d1048: DeclName<_s79> {}; // ParmVar other
struct _d1049: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1050: DeclName<_s80> {}; // CXXMethod Empty
struct _d1051: DeclName<_s81> {}; // CXXMethod Get
struct _d1052: DeclName<_s63> {}; // ParmVar isolate
struct _d1053: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1054: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1055: DeclName<_s58> {}; // CXXMethod operator==
struct _d1056: DeclName<_s53> {}; // ParmVar that
struct _d1057: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1058: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1059: DeclName<_s58> {}; // CXXMethod operator==
struct _d1060: DeclName<_s53> {}; // ParmVar that
struct _d1061: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1062: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1063: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1064: DeclName<_s53> {}; // ParmVar that
struct _d1065: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1066: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1067: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1068: DeclName<_s53> {}; // ParmVar that
struct _d1069: DeclName<_s82> {}; // FunctionTemplate SetWeak
struct _d1070: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1071: DeclName<_s82> {}; // CXXMethod SetWeak
struct _d1072: DeclName<_s85> {}; // ParmVar parameter
struct _d1073: DeclName<_s86> {}; // ParmVar callback
struct _d1074: DeclName<_s87> {}; // ParmVar type
struct _d1075: DeclName<_s82> {}; // CXXMethod SetWeak
struct _d1076: DeclName<_s88> {}; // FunctionTemplate ClearWeak
struct _d1077: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1078: DeclName<_s88> {}; // CXXMethod ClearWeak
struct _d1079: DeclName<_s88> {}; // CXXMethod ClearWeak
struct _d1080: DeclName<_s89> {}; // CXXMethod AnnotateStrongRetainer
struct _d1081: DeclName<_s90> {}; // ParmVar label
struct _d1082: DeclName<_s91> {}; // CXXMethod IsWeak
struct _d1083: DeclName<_s92> {}; // CXXMethod SetWrapperClassId
struct _d1084: DeclName<_s93> {}; // ParmVar class_id
struct _d1085: DeclName<_s94> {}; // CXXMethod WrapperClassId
struct _d1086: DeclName<_s64> {}; // CXXConstructor PersistentBase
struct _d1087: DeclName<_s79> {}; // ParmVar other
struct _d1088: DeclName<_s67> {}; // CXXMethod operator=
struct _d1090: DeclName<_s95> {}; // ClassTemplate Persistent
struct _d1091: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1092: DeclName<_s96> {}; // TemplateTypeParm M
struct _d1093: DeclName<_s95> {}; // CXXRecord Persistent
struct _d1094: DeclName<_s95> {}; // ClassTemplateSpecialization Persistent
struct _d1095: DeclName<_s95> {}; // CXXConstructor Persistent
struct _d1096: DeclName<_s95> {}; // FunctionTemplate Persistent
struct _d1097: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1098: DeclName<_s95> {}; // CXXConstructor Persistent
struct _d1099: DeclName<_s63> {}; // ParmVar isolate
struct _d1100: DeclName<_s53> {}; // ParmVar that
struct _d1101: DeclName<_s95> {}; // FunctionTemplate Persistent
struct _d1102: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1103: DeclName<_s97> {}; // TemplateTypeParm M2
struct _d1104: DeclName<_s95> {}; // CXXConstructor Persistent
struct _d1105: DeclName<_s63> {}; // ParmVar isolate
struct _d1106: DeclName<_s53> {}; // ParmVar that
struct _d1107: DeclName<_s95> {}; // CXXConstructor Persistent
struct _d1108: DeclName<_s53> {}; // ParmVar that
struct _d1109: DeclName<_s95> {}; // FunctionTemplate Persistent
struct _d1110: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1111: DeclName<_s97> {}; // TemplateTypeParm M2
struct _d1112: DeclName<_s95> {}; // CXXConstructor Persistent
struct _d1113: DeclName<_s53> {}; // ParmVar that
struct _d1114: DeclName<_s95> {}; // CXXConstructor Persistent
struct _d1115: DeclName<_s53> {}; // ParmVar that
struct _d1116: DeclName<_s67> {}; // CXXMethod operator=
struct _d1117: DeclName<_s53> {}; // ParmVar that
struct _d1118: DeclName<_s67> {}; // FunctionTemplate operator=
struct _d1119: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1120: DeclName<_s97> {}; // TemplateTypeParm M2
struct _d1121: DeclName<_s67> {}; // CXXMethod operator=
struct _d1122: DeclName<_s53> {}; // ParmVar that
struct _d1123: DeclName<_s67> {}; // CXXMethod operator=
struct _d1124: DeclName<_s53> {}; // ParmVar that
struct _d1125: DeclName<_s98> {}; // CXXDestructor ~Persistent
struct _d1126: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d1127: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1128: DeclName<_s60> {}; // CXXMethod Cast
struct _d1129: DeclName<_s95> {}; // ClassTemplateSpecialization Persistent
struct _d1130: DeclName<_s53> {}; // ParmVar that
struct _d1131: DeclName<_s61> {}; // FunctionTemplate As
struct _d1132: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1133: DeclName<_s61> {}; // CXXMethod As
struct _d1134: DeclName<_s95> {}; // ClassTemplateSpecialization Persistent
struct _d1135: DeclName<_s99> {}; // ClassTemplate Global
struct _d1136: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1137: DeclName<_s99> {}; // CXXRecord Global
struct _d1138: DeclName<_s65> {}; // ClassTemplate TracedGlobal
struct _d1139: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1140: DeclName<_s65> {}; // CXXRecord TracedGlobal
struct _d1141: DeclName<_s65> {}; // ClassTemplateSpecialization TracedGlobal
struct _d1142: DeclName<_s65> {}; // CXXConstructor TracedGlobal
struct _d1143: DeclName<_s100> {}; // CXXDestructor ~TracedGlobal
struct _d1144: DeclName<_s65> {}; // FunctionTemplate TracedGlobal
struct _d1145: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1146: DeclName<_s65> {}; // CXXConstructor TracedGlobal
struct _d1147: DeclName<_s63> {}; // ParmVar isolate
struct _d1148: DeclName<_s53> {}; // ParmVar that
struct _d1149: DeclName<_s65> {}; // CXXConstructor TracedGlobal
struct _d1150: DeclName<_s79> {}; // ParmVar other
struct _d1151: DeclName<_s67> {}; // FunctionTemplate operator=
struct _d1152: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1153: DeclName<_s67> {}; // CXXMethod operator=
struct _d1154: DeclName<_s101> {}; // ParmVar rhs
struct _d1155: DeclName<_s65> {}; // CXXConstructor TracedGlobal
struct _d1157: DeclName<_s67> {}; // CXXMethod operator=
struct _d1159: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1160: DeclName<_s78> {}; // CXXMethod Reset
struct _d1161: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d1162: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1163: DeclName<_s78> {}; // CXXMethod Reset
struct _d1164: DeclName<_s63> {}; // ParmVar isolate
struct _d1165: DeclName<_s79> {}; // ParmVar other
struct _d1166: DeclName<_s81> {}; // CXXMethod Get
struct _d1167: DeclName<_s63> {}; // ParmVar isolate
struct _d1168: DeclName<_s61> {}; // FunctionTemplate As
struct _d1169: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1170: DeclName<_s61> {}; // CXXMethod As
struct _d1171: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1172: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1173: DeclName<_s58> {}; // CXXMethod operator==
struct _d1174: DeclName<_s53> {}; // ParmVar that
struct _d1175: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1176: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1177: DeclName<_s58> {}; // CXXMethod operator==
struct _d1178: DeclName<_s53> {}; // ParmVar that
struct _d1179: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1180: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1181: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1182: DeclName<_s53> {}; // ParmVar that
struct _d1183: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1184: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1185: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1186: DeclName<_s53> {}; // ParmVar that
struct _d1187: DeclName<_s92> {}; // CXXMethod SetWrapperClassId
struct _d1188: DeclName<_s93> {}; // ParmVar class_id
struct _d1189: DeclName<_s94> {}; // CXXMethod WrapperClassId
struct _d1190: DeclName<_s102> {}; // CXXMethod SetFinalizationCallback
struct _d1191: DeclName<_s103> {}; // ClassTemplateSpecialization WeakCallbackInfo
struct _d1192: DeclName<_s85> {}; // ParmVar parameter
struct _d1193: DeclName<_s86> {}; // ParmVar callback
struct _d1194: DeclName<_s104> {}; // ClassTemplate PersistentValueMap
struct _d1195: DeclName<_s105> {}; // TemplateTypeParm K
struct _d1196: DeclName<_s106> {}; // TemplateTypeParm V
struct _d1197: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1198: DeclName<_s104> {}; // CXXRecord PersistentValueMap
struct _d1199: DeclName<_s107> {}; // ClassTemplate PersistentValueMapBase
struct _d1200: DeclName<_s105> {}; // TemplateTypeParm K
struct _d1201: DeclName<_s106> {}; // TemplateTypeParm V
struct _d1202: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1203: DeclName<_s107> {}; // CXXRecord PersistentValueMapBase
struct _d1204: DeclName<_s108> {}; // ClassTemplate GlobalValueMap
struct _d1205: DeclName<_s105> {}; // TemplateTypeParm K
struct _d1206: DeclName<_s106> {}; // TemplateTypeParm V
struct _d1207: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1208: DeclName<_s108> {}; // CXXRecord GlobalValueMap
struct _d1209: DeclName<_s109> {}; // ClassTemplate PersistentValueVector
struct _d1210: DeclName<_s106> {}; // TemplateTypeParm V
struct _d1211: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1212: DeclName<_s109> {}; // CXXRecord PersistentValueVector
struct _d1213: DeclName<_s110> {}; // ClassTemplate WeakCallbackObject
struct _d1214: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1215: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1216: DeclName<_s110> {}; // CXXRecord WeakCallbackObject
struct _d1217: DeclName<_s111> {}; // ClassTemplate FunctionCallbackInfo
struct _d1218: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1219: DeclName<_s111> {}; // CXXRecord FunctionCallbackInfo
struct _d1220: DeclName<_s111> {}; // ClassTemplateSpecialization FunctionCallbackInfo
struct _d1221: DeclName<_s112> {}; // ClassTemplate PropertyCallbackInfo
struct _d1222: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1223: DeclName<_s112> {}; // CXXRecord PropertyCallbackInfo
struct _d1224: DeclName<_s112> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1225: DeclName<_s112> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1226: DeclName<_s112> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1227: DeclName<_s112> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1228: DeclName<_s112> {}; // ClassTemplateSpecialization PropertyCallbackInfo
struct _d1229: DeclName<_s113> {}; // CXXRecord CallHandlerHelper
struct _d1230: DeclName<_s114> {}; // CXXRecord EscapableHandleScope
struct _d1231: DeclName<_s115> {}; // ClassTemplate ReturnValue
struct _d1232: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1233: DeclName<_s115> {}; // CXXRecord ReturnValue
struct _d1234: DeclName<_s116> {}; // Namespace debug
struct _d1235: DeclName<_s117> {}; // CXXRecord ConsoleCallArguments
struct _d1236: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1237: DeclName<_s51> {}; // CXXRecord Local
struct _d1238: DeclName<_s118> {}; // CXXConstructor Local<T>
struct _d1239: DeclName<_s118> {}; // FunctionTemplate Local<T>
struct _d1240: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1241: DeclName<_s118> {}; // CXXConstructor Local<T>
struct _d1242: DeclName<_s53> {}; // ParmVar that
struct _d1243: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1244: DeclName<_s55> {}; // CXXMethod Clear
struct _d1245: DeclName<_s56> {}; // CXXMethod operator->
struct _d1246: DeclName<_s57> {}; // CXXMethod operator*
struct _d1247: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1248: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1249: DeclName<_s58> {}; // CXXMethod operator==
struct _d1250: DeclName<_s53> {}; // ParmVar that
struct _d1251: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1252: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1253: DeclName<_s58> {}; // CXXMethod operator==
struct _d1254: DeclName<_s53> {}; // ParmVar that
struct _d1255: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1256: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1257: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1258: DeclName<_s53> {}; // ParmVar that
struct _d1259: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1260: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1261: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1262: DeclName<_s53> {}; // ParmVar that
struct _d1263: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d1264: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1265: DeclName<_s60> {}; // CXXMethod Cast
struct _d1266: DeclName<_s53> {}; // ParmVar that
struct _d1267: DeclName<_s61> {}; // FunctionTemplate As
struct _d1268: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1269: DeclName<_s61> {}; // CXXMethod As
struct _d1270: DeclName<_s62> {}; // CXXMethod New
struct _d1271: DeclName<_s63> {}; // ParmVar isolate
struct _d1272: DeclName<_s53> {}; // ParmVar that
struct _d1273: DeclName<_s62> {}; // CXXMethod New
struct _d1274: DeclName<_s63> {}; // ParmVar isolate
struct _d1275: DeclName<_s53> {}; // ParmVar that
struct _d1276: DeclName<_s62> {}; // CXXMethod New
struct _d1277: DeclName<_s63> {}; // ParmVar isolate
struct _d1278: DeclName<_s53> {}; // ParmVar that
struct _d1279: DeclName<_s119> {}; // TypeAliasTemplate Handle
struct _d1280: DeclName<_s119> {}; // TypeAlias Handle
struct _d1281: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1282: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1283: DeclName<_s69> {}; // CXXRecord MaybeLocal
struct _d1284: DeclName<_s120> {}; // CXXConstructor MaybeLocal<T>
struct _d1285: DeclName<_s120> {}; // FunctionTemplate MaybeLocal<T>
struct _d1286: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1287: DeclName<_s120> {}; // CXXConstructor MaybeLocal<T>
struct _d1288: DeclName<_s53> {}; // ParmVar that
struct _d1289: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1290: DeclName<_s70> {}; // FunctionTemplate ToLocal
struct _d1291: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1292: DeclName<_s70> {}; // CXXMethod ToLocal
struct _d1293: DeclName<_s71> {}; // ParmVar out
struct _d1294: DeclName<_s72> {}; // CXXMethod ToLocalChecked
struct _d1295: DeclName<_s73> {}; // FunctionTemplate FromMaybe
struct _d1296: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1297: DeclName<_s73> {}; // CXXMethod FromMaybe
struct _d1298: DeclName<_s74> {}; // ParmVar default_value
struct _d1299: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1300: DeclName<_s76> {}; // CXXRecord Eternal
struct _d1301: DeclName<_s121> {}; // CXXConstructor Eternal<T>
struct _d1302: DeclName<_s121> {}; // FunctionTemplate Eternal<T>
struct _d1303: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1304: DeclName<_s121> {}; // CXXConstructor Eternal<T>
struct _d1305: DeclName<_s63> {}; // ParmVar isolate
struct _d1306: DeclName<_s122> {}; // ParmVar handle
struct _d1307: DeclName<_s81> {}; // CXXMethod Get
struct _d1308: DeclName<_s63> {}; // ParmVar isolate
struct _d1309: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1310: DeclName<_s123> {}; // FunctionTemplate Set
struct _d1311: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1312: DeclName<_s123> {}; // CXXMethod Set
struct _d1313: DeclName<_s63> {}; // ParmVar isolate
struct _d1314: DeclName<_s122> {}; // ParmVar handle
struct _d1315: DeclName<_s124> {}; // Var kInternalFieldsInWeakCallback
struct _d1316: DeclName<_s125> {}; // Var kEmbedderFieldsInWeakCallback
struct _d1317: DeclName<_s103> {}; // ClassTemplate WeakCallbackInfo
struct _d1318: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1319: DeclName<_s103> {}; // CXXRecord WeakCallbackInfo
struct _d1320: DeclName<_s103> {}; // CXXRecord WeakCallbackInfo
struct _d1321: DeclName<_s126> {}; // Typedef Callback
struct _d1322: DeclName<_s127> {}; // CXXConstructor WeakCallbackInfo<T>
struct _d1323: DeclName<_s63> {}; // ParmVar isolate
struct _d1324: DeclName<_s85> {}; // ParmVar parameter
struct _d1325: DeclName<_s128> {}; // ParmVar embedder_fields
struct _d1326: DeclName<_s86> {}; // ParmVar callback
struct _d1327: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d1328: DeclName<_s130> {}; // CXXMethod GetParameter
struct _d1329: DeclName<_s131> {}; // CXXMethod GetInternalField
struct _d1330: DeclName<_s132> {}; // ParmVar index
struct _d1331: DeclName<_s133> {}; // CXXMethod SetSecondPassCallback
struct _d1332: DeclName<_s86> {}; // ParmVar callback
struct _d1333: DeclName<_s126> {}; // Typedef Callback
struct _d1334: DeclName<_s134> {}; // ParmVar data
struct _d1335: DeclName<_s103> {}; // CXXConstructor WeakCallbackInfo
struct _d1336: DeclName<_s63> {}; // ParmVar isolate
struct _d1337: DeclName<_s85> {}; // ParmVar parameter
struct _d1338: DeclName<_s128> {}; // ParmVar embedder_fields
struct _d1339: DeclName<_s86> {}; // ParmVar callback
struct _d1340: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d1341: DeclName<_s130> {}; // CXXMethod GetParameter
struct _d1342: DeclName<_s131> {}; // CXXMethod GetInternalField
struct _d1343: DeclName<_s132> {}; // ParmVar index
struct _d1344: DeclName<_s133> {}; // CXXMethod SetSecondPassCallback
struct _d1345: DeclName<_s86> {}; // ParmVar callback
struct _d1346: DeclName<_s135> {}; // EnumConstant kParameter
struct _d1347: DeclName<_s136> {}; // EnumConstant kInternalFields
struct _d1348: DeclName<_s137> {}; // EnumConstant kFinalizer
struct _d1349: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1350: DeclName<_s64> {}; // CXXRecord PersistentBase
struct _d1351: DeclName<_s78> {}; // CXXMethod Reset
struct _d1352: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d1353: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1354: DeclName<_s78> {}; // CXXMethod Reset
struct _d1355: DeclName<_s63> {}; // ParmVar isolate
struct _d1356: DeclName<_s79> {}; // ParmVar other
struct _d1357: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d1358: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1359: DeclName<_s78> {}; // CXXMethod Reset
struct _d1360: DeclName<_s63> {}; // ParmVar isolate
struct _d1361: DeclName<_s79> {}; // ParmVar other
struct _d1362: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1363: DeclName<_s80> {}; // CXXMethod Empty
struct _d1364: DeclName<_s81> {}; // CXXMethod Get
struct _d1365: DeclName<_s63> {}; // ParmVar isolate
struct _d1366: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1367: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1368: DeclName<_s58> {}; // CXXMethod operator==
struct _d1369: DeclName<_s53> {}; // ParmVar that
struct _d1370: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1371: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1372: DeclName<_s58> {}; // CXXMethod operator==
struct _d1373: DeclName<_s53> {}; // ParmVar that
struct _d1374: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1375: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1376: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1377: DeclName<_s53> {}; // ParmVar that
struct _d1378: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1379: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1380: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1381: DeclName<_s53> {}; // ParmVar that
struct _d1382: DeclName<_s82> {}; // FunctionTemplate SetWeak
struct _d1383: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1384: DeclName<_s82> {}; // CXXMethod SetWeak
struct _d1385: DeclName<_s85> {}; // ParmVar parameter
struct _d1386: DeclName<_s86> {}; // ParmVar callback
struct _d1387: DeclName<_s87> {}; // ParmVar type
struct _d1388: DeclName<_s82> {}; // CXXMethod SetWeak
struct _d1389: DeclName<_s88> {}; // FunctionTemplate ClearWeak
struct _d1390: DeclName<_s83> {}; // TemplateTypeParm P
struct _d1391: DeclName<_s88> {}; // CXXMethod ClearWeak
struct _d1392: DeclName<_s88> {}; // CXXMethod ClearWeak
struct _d1393: DeclName<_s89> {}; // CXXMethod AnnotateStrongRetainer
struct _d1394: DeclName<_s90> {}; // ParmVar label
struct _d1395: DeclName<_s91> {}; // CXXMethod IsWeak
struct _d1396: DeclName<_s92> {}; // CXXMethod SetWrapperClassId
struct _d1397: DeclName<_s93> {}; // ParmVar class_id
struct _d1398: DeclName<_s94> {}; // CXXMethod WrapperClassId
struct _d1399: DeclName<_s138> {}; // CXXConstructor PersistentBase<T>
struct _d1400: DeclName<_s79> {}; // ParmVar other
struct _d1401: DeclName<_s67> {}; // CXXMethod operator=
struct _d1403: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1404: DeclName<_s77> {}; // CXXRecord NonCopyablePersistentTraits
struct _d1405: DeclName<_s139> {}; // Typedef NonCopyablePersistent
struct _d1406: DeclName<_s140> {}; // Var kResetInDestructor
struct _d1407: DeclName<_s141> {}; // FunctionTemplate Copy
struct _d1408: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1409: DeclName<_s96> {}; // TemplateTypeParm M
struct _d1410: DeclName<_s141> {}; // CXXMethod Copy
struct _d1411: DeclName<_s142> {}; // ParmVar source
struct _d1412: DeclName<_s143> {}; // ParmVar dest
struct _d1413: DeclName<_s144> {}; // FunctionTemplate Uncompilable
struct _d1414: DeclName<_s145> {}; // TemplateTypeParm O
struct _d1415: DeclName<_s144> {}; // CXXMethod Uncompilable
struct _d1416: DeclName<_s146> {}; // ClassTemplate CopyablePersistentTraits
struct _d1417: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1418: DeclName<_s146> {}; // CXXRecord CopyablePersistentTraits
struct _d1419: DeclName<_s146> {}; // CXXRecord CopyablePersistentTraits
struct _d1420: DeclName<_s147> {}; // Typedef CopyablePersistent
struct _d1421: DeclName<_s140> {}; // Var kResetInDestructor
struct _d1422: DeclName<_s141> {}; // FunctionTemplate Copy
struct _d1423: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1424: DeclName<_s96> {}; // TemplateTypeParm M
struct _d1425: DeclName<_s141> {}; // CXXMethod Copy
struct _d1426: DeclName<_s142> {}; // ParmVar source
struct _d1427: DeclName<_s143> {}; // ParmVar dest
struct _d1428: DeclName<_s146> {}; // ClassTemplateSpecialization CopyablePersistentTraits
struct _d1429: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1430: DeclName<_s96> {}; // TemplateTypeParm M
struct _d1431: DeclName<_s95> {}; // CXXRecord Persistent
struct _d1432: DeclName<_s148> {}; // CXXConstructor Persistent<T, M>
struct _d1433: DeclName<_s148> {}; // FunctionTemplate Persistent<T, M>
struct _d1434: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1435: DeclName<_s148> {}; // CXXConstructor Persistent<T, M>
struct _d1436: DeclName<_s63> {}; // ParmVar isolate
struct _d1437: DeclName<_s53> {}; // ParmVar that
struct _d1438: DeclName<_s148> {}; // FunctionTemplate Persistent<T, M>
struct _d1439: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1440: DeclName<_s97> {}; // TemplateTypeParm M2
struct _d1441: DeclName<_s148> {}; // CXXConstructor Persistent<T, M>
struct _d1442: DeclName<_s63> {}; // ParmVar isolate
struct _d1443: DeclName<_s53> {}; // ParmVar that
struct _d1444: DeclName<_s148> {}; // CXXConstructor Persistent<T, M>
struct _d1445: DeclName<_s53> {}; // ParmVar that
struct _d1446: DeclName<_s148> {}; // FunctionTemplate Persistent<T, M>
struct _d1447: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1448: DeclName<_s97> {}; // TemplateTypeParm M2
struct _d1449: DeclName<_s148> {}; // CXXConstructor Persistent<T, M>
struct _d1450: DeclName<_s53> {}; // ParmVar that
struct _d1451: DeclName<_s67> {}; // CXXMethod operator=
struct _d1452: DeclName<_s53> {}; // ParmVar that
struct _d1453: DeclName<_s67> {}; // FunctionTemplate operator=
struct _d1454: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1455: DeclName<_s97> {}; // TemplateTypeParm M2
struct _d1456: DeclName<_s67> {}; // CXXMethod operator=
struct _d1457: DeclName<_s53> {}; // ParmVar that
struct _d1458: DeclName<_s149> {}; // CXXDestructor ~Persistent<T, M>
struct _d1459: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d1460: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1461: DeclName<_s60> {}; // CXXMethod Cast
struct _d1462: DeclName<_s53> {}; // ParmVar that
struct _d1463: DeclName<_s61> {}; // FunctionTemplate As
struct _d1464: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1465: DeclName<_s61> {}; // CXXMethod As
struct _d1466: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1467: DeclName<_s99> {}; // CXXRecord Global
struct _d1468: DeclName<_s150> {}; // CXXConstructor Global<T>
struct _d1469: DeclName<_s150> {}; // FunctionTemplate Global<T>
struct _d1470: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1471: DeclName<_s150> {}; // CXXConstructor Global<T>
struct _d1472: DeclName<_s63> {}; // ParmVar isolate
struct _d1473: DeclName<_s53> {}; // ParmVar that
struct _d1474: DeclName<_s150> {}; // FunctionTemplate Global<T>
struct _d1475: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1476: DeclName<_s150> {}; // CXXConstructor Global<T>
struct _d1477: DeclName<_s63> {}; // ParmVar isolate
struct _d1478: DeclName<_s53> {}; // ParmVar that
struct _d1479: DeclName<_s150> {}; // CXXConstructor Global<T>
struct _d1480: DeclName<_s79> {}; // ParmVar other
struct _d1481: DeclName<_s151> {}; // CXXDestructor ~Global<T>
struct _d1482: DeclName<_s67> {}; // FunctionTemplate operator=
struct _d1483: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1484: DeclName<_s67> {}; // CXXMethod operator=
struct _d1485: DeclName<_s101> {}; // ParmVar rhs
struct _d1486: DeclName<_s152> {}; // CXXMethod Pass
struct _d1487: DeclName<_s153> {}; // Typedef MoveOnlyTypeForCPP03
struct _d1488: DeclName<_s150> {}; // CXXConstructor Global<T>
struct _d1490: DeclName<_s67> {}; // CXXMethod operator=
struct _d1492: DeclName<_s154> {}; // TypeAliasTemplate UniquePersistent
struct _d1493: DeclName<_s154> {}; // TypeAlias UniquePersistent
struct _d1494: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1495: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1496: DeclName<_s65> {}; // CXXRecord TracedGlobal
struct _d1497: DeclName<_s155> {}; // CXXConstructor TracedGlobal<T>
struct _d1498: DeclName<_s156> {}; // CXXDestructor ~TracedGlobal<T>
struct _d1499: DeclName<_s155> {}; // FunctionTemplate TracedGlobal<T>
struct _d1500: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1501: DeclName<_s155> {}; // CXXConstructor TracedGlobal<T>
struct _d1502: DeclName<_s63> {}; // ParmVar isolate
struct _d1503: DeclName<_s53> {}; // ParmVar that
struct _d1504: DeclName<_s155> {}; // CXXConstructor TracedGlobal<T>
struct _d1505: DeclName<_s79> {}; // ParmVar other
struct _d1506: DeclName<_s67> {}; // FunctionTemplate operator=
struct _d1507: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1508: DeclName<_s67> {}; // CXXMethod operator=
struct _d1509: DeclName<_s101> {}; // ParmVar rhs
struct _d1510: DeclName<_s155> {}; // CXXConstructor TracedGlobal<T>
struct _d1512: DeclName<_s67> {}; // CXXMethod operator=
struct _d1514: DeclName<_s54> {}; // CXXMethod IsEmpty
struct _d1515: DeclName<_s78> {}; // CXXMethod Reset
struct _d1516: DeclName<_s78> {}; // FunctionTemplate Reset
struct _d1517: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1518: DeclName<_s78> {}; // CXXMethod Reset
struct _d1519: DeclName<_s63> {}; // ParmVar isolate
struct _d1520: DeclName<_s79> {}; // ParmVar other
struct _d1521: DeclName<_s81> {}; // CXXMethod Get
struct _d1522: DeclName<_s63> {}; // ParmVar isolate
struct _d1523: DeclName<_s61> {}; // FunctionTemplate As
struct _d1524: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1525: DeclName<_s61> {}; // CXXMethod As
struct _d1526: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1527: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1528: DeclName<_s58> {}; // CXXMethod operator==
struct _d1529: DeclName<_s53> {}; // ParmVar that
struct _d1530: DeclName<_s58> {}; // FunctionTemplate operator==
struct _d1531: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1532: DeclName<_s58> {}; // CXXMethod operator==
struct _d1533: DeclName<_s53> {}; // ParmVar that
struct _d1534: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1535: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1536: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1537: DeclName<_s53> {}; // ParmVar that
struct _d1538: DeclName<_s59> {}; // FunctionTemplate operator!=
struct _d1539: DeclName<_s52> {}; // TemplateTypeParm S
struct _d1540: DeclName<_s59> {}; // CXXMethod operator!=
struct _d1541: DeclName<_s53> {}; // ParmVar that
struct _d1542: DeclName<_s92> {}; // CXXMethod SetWrapperClassId
struct _d1543: DeclName<_s93> {}; // ParmVar class_id
struct _d1544: DeclName<_s94> {}; // CXXMethod WrapperClassId
struct _d1545: DeclName<_s102> {}; // CXXMethod SetFinalizationCallback
struct _d1546: DeclName<_s85> {}; // ParmVar parameter
struct _d1547: DeclName<_s86> {}; // ParmVar callback
struct _d1548: DeclName<_s157> {}; // CXXRecord HandleScope
struct _d1549: DeclName<_s157> {}; // CXXRecord HandleScope
struct _d1550: DeclName<_s157> {}; // CXXConstructor HandleScope
struct _d1551: DeclName<_s63> {}; // ParmVar isolate
struct _d1552: DeclName<_s158> {}; // CXXDestructor ~HandleScope
struct _d1553: DeclName<_s159> {}; // CXXMethod NumberOfHandles
struct _d1554: DeclName<_s63> {}; // ParmVar isolate
struct _d1555: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d1556: DeclName<_s157> {}; // CXXConstructor HandleScope
struct _d1558: DeclName<_s67> {}; // CXXMethod operator=
struct _d1560: DeclName<_s157> {}; // CXXConstructor HandleScope
struct _d1561: DeclName<_s160> {}; // CXXMethod Initialize
struct _d1562: DeclName<_s63> {}; // ParmVar isolate
struct _d1563: DeclName<_s161> {}; // CXXMethod CreateHandle
struct _d1564: DeclName<_s4> {}; // CXXRecord Isolate
struct _d1565: DeclName<_s63> {}; // ParmVar isolate
struct _d1566: DeclName<_s162> {}; // ParmVar value
struct _d1567: DeclName<_s114> {}; // CXXRecord EscapableHandleScope
struct _d1568: DeclName<_s114> {}; // CXXConstructor EscapableHandleScope
struct _d1569: DeclName<_s63> {}; // ParmVar isolate
struct _d1570: DeclName<_s163> {}; // CXXDestructor ~EscapableHandleScope
struct _d1571: DeclName<_s164> {}; // FunctionTemplate Escape
struct _d1572: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1573: DeclName<_s164> {}; // CXXMethod Escape
struct _d1574: DeclName<_s162> {}; // ParmVar value
struct _d1575: DeclName<_s165> {}; // FunctionTemplate EscapeMaybe
struct _d1576: DeclName<_s21> {}; // TemplateTypeParm T
struct _d1577: DeclName<_s165> {}; // CXXMethod EscapeMaybe
struct _d1578: DeclName<_s162> {}; // ParmVar value
struct _d1579: DeclName<_s114> {}; // CXXConstructor EscapableHandleScope
struct _d1581: DeclName<_s67> {}; // CXXMethod operator=
struct _d1583: DeclName<_s166> {}; // CXXRecord SealHandleScope
struct _d1584: DeclName<_s166> {}; // CXXRecord SealHandleScope
struct _d1585: DeclName<_s166> {}; // CXXConstructor SealHandleScope
struct _d1586: DeclName<_s63> {}; // ParmVar isolate
struct _d1587: DeclName<_s167> {}; // CXXDestructor ~SealHandleScope
struct _d1588: DeclName<_s166> {}; // CXXConstructor SealHandleScope
struct _d1590: DeclName<_s67> {}; // CXXMethod operator=
struct _d1592: DeclName<_s3> {}; // CXXRecord Data
struct _d1593: DeclName<_s168> {}; // CXXRecord ScriptOrModule
struct _d1594: DeclName<_s168> {}; // CXXRecord ScriptOrModule
struct _d1595: DeclName<_s169> {}; // CXXMethod GetResourceName
struct _d1596: DeclName<_s170> {}; // CXXMethod GetHostDefinedOptions
struct _d1597: DeclName<_s45> {}; // CXXRecord PrimitiveArray
struct _d1598: DeclName<_s62> {}; // CXXMethod New
struct _d1599: DeclName<_s63> {}; // ParmVar isolate
struct _d1600: DeclName<_s171> {}; // ParmVar length
struct _d1601: DeclName<_s172> {}; // CXXMethod Length
struct _d1602: DeclName<_s123> {}; // CXXMethod Set
struct _d1603: DeclName<_s63> {}; // ParmVar isolate
struct _d1604: DeclName<_s132> {}; // ParmVar index
struct _d1605: DeclName<_s173> {}; // ParmVar item
struct _d1606: DeclName<_s81> {}; // CXXMethod Get
struct _d1607: DeclName<_s63> {}; // ParmVar isolate
struct _d1608: DeclName<_s132> {}; // ParmVar index
struct _d1609: DeclName<_s174> {}; // CXXRecord ScriptOriginOptions
struct _d1610: DeclName<_s174> {}; // CXXRecord ScriptOriginOptions
struct _d1611: DeclName<_s174> {}; // CXXConstructor ScriptOriginOptions
struct _d1612: DeclName<_s175> {}; // ParmVar is_shared_cross_origin
struct _d1613: DeclName<_s176> {}; // ParmVar is_opaque
struct _d1614: DeclName<_s177> {}; // ParmVar is_wasm
struct _d1615: DeclName<_s178> {}; // ParmVar is_module
struct _d1616: DeclName<_s174> {}; // CXXConstructor ScriptOriginOptions
struct _d1617: DeclName<_s179> {}; // ParmVar flags
struct _d1618: DeclName<_s180> {}; // CXXMethod IsSharedCrossOrigin
struct _d1619: DeclName<_s181> {}; // CXXMethod IsOpaque
struct _d1620: DeclName<_s182> {}; // CXXMethod IsWasm
struct _d1621: DeclName<_s183> {}; // CXXMethod IsModule
struct _d1622: DeclName<_s184> {}; // CXXMethod Flags
struct _d1623: DeclName<_s174> {}; // CXXConstructor ScriptOriginOptions
struct _d1625: DeclName<_s174> {}; // CXXConstructor ScriptOriginOptions
struct _d1627: DeclName<_s185> {}; // CXXDestructor ~ScriptOriginOptions
struct _d1628: DeclName<_s67> {}; // CXXMethod operator=
struct _d1630: DeclName<_s67> {}; // CXXMethod operator=
struct _d1632: DeclName<_s186> {}; // CXXRecord ScriptOrigin
struct _d1633: DeclName<_s186> {}; // CXXRecord ScriptOrigin
struct _d1634: DeclName<_s186> {}; // CXXConstructor ScriptOrigin
struct _d1635: DeclName<_s187> {}; // ParmVar resource_name
struct _d1636: DeclName<_s188> {}; // ParmVar resource_line_offset
struct _d1637: DeclName<_s189> {}; // ParmVar resource_column_offset
struct _d1638: DeclName<_s190> {}; // ParmVar resource_is_shared_cross_origin
struct _d1639: DeclName<_s191> {}; // ParmVar script_id
struct _d1640: DeclName<_s192> {}; // ParmVar source_map_url
struct _d1641: DeclName<_s193> {}; // ParmVar resource_is_opaque
struct _d1642: DeclName<_s177> {}; // ParmVar is_wasm
struct _d1643: DeclName<_s178> {}; // ParmVar is_module
struct _d1644: DeclName<_s194> {}; // ParmVar host_defined_options
struct _d1645: DeclName<_s195> {}; // CXXMethod ResourceName
struct _d1646: DeclName<_s196> {}; // CXXMethod ResourceLineOffset
struct _d1647: DeclName<_s197> {}; // CXXMethod ResourceColumnOffset
struct _d1648: DeclName<_s198> {}; // CXXMethod ScriptID
struct _d1649: DeclName<_s199> {}; // CXXMethod SourceMapUrl
struct _d1650: DeclName<_s200> {}; // CXXMethod HostDefinedOptions
struct _d1651: DeclName<_s201> {}; // CXXMethod Options
struct _d1652: DeclName<_s186> {}; // CXXConstructor ScriptOrigin
struct _d1654: DeclName<_s67> {}; // CXXMethod operator=
struct _d1656: DeclName<_s186> {}; // CXXConstructor ScriptOrigin
struct _d1658: DeclName<_s68> {}; // CXXRecord UnboundScript
struct _d1659: DeclName<_s202> {}; // CXXMethod BindToCurrentContext
struct _d1660: DeclName<_s203> {}; // CXXMethod GetId
struct _d1661: DeclName<_s204> {}; // CXXMethod GetScriptName
struct _d1662: DeclName<_s205> {}; // CXXMethod GetSourceURL
struct _d1663: DeclName<_s206> {}; // CXXMethod GetSourceMappingURL
struct _d1664: DeclName<_s207> {}; // CXXMethod GetLineNumber
struct _d1665: DeclName<_s208> {}; // ParmVar code_pos
struct _d1666: DeclName<_s209> {}; // Var kNoScriptId
struct _d1667: DeclName<_s210> {}; // CXXRecord UnboundModuleScript
struct _d1668: DeclName<_s210> {}; // CXXRecord UnboundModuleScript
struct _d1669: DeclName<_s211> {}; // CXXRecord Location
struct _d1670: DeclName<_s211> {}; // CXXRecord Location
struct _d1671: DeclName<_s207> {}; // CXXMethod GetLineNumber
struct _d1672: DeclName<_s212> {}; // CXXMethod GetColumnNumber
struct _d1673: DeclName<_s211> {}; // CXXConstructor Location
struct _d1674: DeclName<_s213> {}; // ParmVar line_number
struct _d1675: DeclName<_s214> {}; // ParmVar column_number
struct _d1676: DeclName<_s215> {}; // CXXRecord Module
struct _d1677: DeclName<_s215> {}; // CXXRecord Module
struct _d1678: DeclName<_s216> {}; // Enum Status
struct _d1679: DeclName<_s217> {}; // EnumConstant kUninstantiated
struct _d1680: DeclName<_s218> {}; // EnumConstant kInstantiating
struct _d1681: DeclName<_s219> {}; // EnumConstant kInstantiated
struct _d1682: DeclName<_s220> {}; // EnumConstant kEvaluating
struct _d1683: DeclName<_s221> {}; // EnumConstant kEvaluated
struct _d1684: DeclName<_s222> {}; // EnumConstant kErrored
struct _d1685: DeclName<_s223> {}; // CXXMethod GetStatus
struct _d1686: DeclName<_s224> {}; // CXXMethod GetException
struct _d1687: DeclName<_s225> {}; // CXXMethod GetModuleRequestsLength
struct _d1688: DeclName<_s226> {}; // CXXMethod GetModuleRequest
struct _d1689: DeclName<_s227> {}; // ParmVar i
struct _d1690: DeclName<_s228> {}; // CXXMethod GetModuleRequestLocation
struct _d1691: DeclName<_s227> {}; // ParmVar i
struct _d1692: DeclName<_s229> {}; // CXXMethod GetIdentityHash
struct _d1693: DeclName<_s230> {}; // Typedef ResolveCallback
struct _d1694: DeclName<_s231> {}; // CXXMethod InstantiateModule
struct _d1695: DeclName<_s232> {}; // ParmVar context
struct _d1696: DeclName<_s86> {}; // ParmVar callback
struct _d1697: DeclName<_s233> {}; // CXXMethod Evaluate
struct _d1698: DeclName<_s232> {}; // ParmVar context
struct _d1699: DeclName<_s234> {}; // CXXMethod GetModuleNamespace
struct _d1700: DeclName<_s235> {}; // CXXMethod GetUnboundModuleScript
struct _d1701: DeclName<_s35> {}; // CXXRecord Script
struct _d1702: DeclName<_s236> {}; // CXXMethod Compile
struct _d1703: DeclName<_s232> {}; // ParmVar context
struct _d1704: DeclName<_s142> {}; // ParmVar source
struct _d1705: DeclName<_s237> {}; // ParmVar origin
struct _d1706: DeclName<_s238> {}; // CXXMethod Run
struct _d1707: DeclName<_s232> {}; // ParmVar context
struct _d1708: DeclName<_s239> {}; // CXXMethod GetUnboundScript
struct _d1709: DeclName<_s240> {}; // CXXRecord ScriptCompiler
struct _d1710: DeclName<_s240> {}; // CXXRecord ScriptCompiler
struct _d1711: DeclName<_s241> {}; // CXXRecord CachedData
struct _d1712: DeclName<_s241> {}; // CXXRecord CachedData
struct _d1713: DeclName<_s242> {}; // Enum BufferPolicy
struct _d1714: DeclName<_s243> {}; // EnumConstant BufferNotOwned
struct _d1715: DeclName<_s244> {}; // EnumConstant BufferOwned
struct _d1716: DeclName<_s241> {}; // CXXConstructor CachedData
struct _d1717: DeclName<_s241> {}; // CXXConstructor CachedData
struct _d1718: DeclName<_s134> {}; // ParmVar data
struct _d1719: DeclName<_s171> {}; // ParmVar length
struct _d1720: DeclName<_s245> {}; // ParmVar buffer_policy
struct _d1721: DeclName<_s246> {}; // CXXDestructor ~CachedData
struct _d1722: DeclName<_s134> {}; // Field data
struct _d1723: DeclName<_s171> {}; // Field length
struct _d1724: DeclName<_s247> {}; // Field rejected
struct _d1725: DeclName<_s245> {}; // Field buffer_policy
struct _d1726: DeclName<_s241> {}; // CXXConstructor CachedData
struct _d1728: DeclName<_s67> {}; // CXXMethod operator=
struct _d1730: DeclName<_s248> {}; // CXXRecord Source
struct _d1731: DeclName<_s248> {}; // CXXRecord Source
struct _d1732: DeclName<_s248> {}; // CXXConstructor Source
struct _d1733: DeclName<_s249> {}; // ParmVar source_string
struct _d1734: DeclName<_s237> {}; // ParmVar origin
struct _d1735: DeclName<_s250> {}; // ParmVar cached_data
struct _d1736: DeclName<_s248> {}; // CXXConstructor Source
struct _d1737: DeclName<_s249> {}; // ParmVar source_string
struct _d1738: DeclName<_s250> {}; // ParmVar cached_data
struct _d1739: DeclName<_s251> {}; // CXXDestructor ~Source
struct _d1740: DeclName<_s252> {}; // CXXMethod GetCachedData
struct _d1741: DeclName<_s253> {}; // CXXMethod GetResourceOptions
struct _d1742: DeclName<_s248> {}; // CXXConstructor Source
struct _d1744: DeclName<_s67> {}; // CXXMethod operator=
struct _d1746: DeclName<_s254> {}; // CXXRecord ExternalSourceStream
struct _d1747: DeclName<_s254> {}; // CXXRecord ExternalSourceStream
struct _d1748: DeclName<_s255> {}; // CXXDestructor ~ExternalSourceStream
struct _d1749: DeclName<_s256> {}; // CXXMethod GetMoreData
struct _d1750: DeclName<_s257> {}; // ParmVar src
struct _d1751: DeclName<_s258> {}; // CXXMethod SetBookmark
struct _d1752: DeclName<_s259> {}; // CXXMethod ResetToBookmark
struct _d1753: DeclName<_s67> {}; // CXXMethod operator=
struct _d1755: DeclName<_s260> {}; // CXXRecord StreamedSource
struct _d1756: DeclName<_s260> {}; // CXXRecord StreamedSource
struct _d1757: DeclName<_s261> {}; // Enum Encoding
struct _d1758: DeclName<_s262> {}; // EnumConstant ONE_BYTE
struct _d1759: DeclName<_s263> {}; // EnumConstant TWO_BYTE
struct _d1760: DeclName<_s264> {}; // EnumConstant UTF8
struct _d1761: DeclName<_s260> {}; // CXXConstructor StreamedSource
struct _d1762: DeclName<_s265> {}; // ParmVar source_stream
struct _d1763: DeclName<_s266> {}; // ParmVar encoding
struct _d1764: DeclName<_s260> {}; // CXXConstructor StreamedSource
struct _d1765: DeclName<_s267> {}; // ClassTemplateSpecialization unique_ptr
struct _d1766: DeclName<_s265> {}; // ParmVar source_stream
struct _d1767: DeclName<_s266> {}; // ParmVar encoding
struct _d1768: DeclName<_s268> {}; // CXXDestructor ~StreamedSource
struct _d1769: DeclName<_s269> {}; // CXXMethod impl
struct _d1770: DeclName<_s270> {}; // CXXRecord ScriptStreamingData
struct _d1771: DeclName<_s260> {}; // CXXConstructor StreamedSource
struct _d1773: DeclName<_s67> {}; // CXXMethod operator=
struct _d1775: DeclName<_s271> {}; // CXXRecord ScriptStreamingTask
struct _d1776: DeclName<_s271> {}; // CXXRecord ScriptStreamingTask
struct _d1777: DeclName<_s238> {}; // CXXMethod Run
struct _d1778: DeclName<_s272> {}; // Enum CompileOptions
struct _d1779: DeclName<_s273> {}; // EnumConstant kNoCompileOptions
struct _d1780: DeclName<_s274> {}; // EnumConstant kConsumeCodeCache
struct _d1781: DeclName<_s275> {}; // EnumConstant kEagerCompile
struct _d1782: DeclName<_s276> {}; // Enum NoCacheReason
struct _d1783: DeclName<_s277> {}; // EnumConstant kNoCacheNoReason
struct _d1784: DeclName<_s278> {}; // EnumConstant kNoCacheBecauseCachingDisabled
struct _d1785: DeclName<_s279> {}; // EnumConstant kNoCacheBecauseNoResource
struct _d1786: DeclName<_s280> {}; // EnumConstant kNoCacheBecauseInlineScript
struct _d1787: DeclName<_s281> {}; // EnumConstant kNoCacheBecauseModule
struct _d1788: DeclName<_s282> {}; // EnumConstant kNoCacheBecauseStreamingSource
struct _d1789: DeclName<_s283> {}; // EnumConstant kNoCacheBecauseInspector
struct _d1790: DeclName<_s284> {}; // EnumConstant kNoCacheBecauseScriptTooSmall
struct _d1791: DeclName<_s285> {}; // EnumConstant kNoCacheBecauseCacheTooCold
struct _d1792: DeclName<_s286> {}; // EnumConstant kNoCacheBecauseV8Extension
struct _d1793: DeclName<_s287> {}; // EnumConstant kNoCacheBecauseExtensionModule
struct _d1794: DeclName<_s288> {}; // EnumConstant kNoCacheBecausePacScript
struct _d1795: DeclName<_s289> {}; // EnumConstant kNoCacheBecauseInDocumentWrite
struct _d1796: DeclName<_s290> {}; // EnumConstant kNoCacheBecauseResourceWithNoCacheHandler
struct _d1797: DeclName<_s291> {}; // EnumConstant kNoCacheBecauseDeferredProduceCodeCache
struct _d1798: DeclName<_s292> {}; // CXXMethod CompileUnboundScript
struct _d1799: DeclName<_s63> {}; // ParmVar isolate
struct _d1800: DeclName<_s142> {}; // ParmVar source
struct _d1801: DeclName<_s293> {}; // ParmVar options
struct _d1802: DeclName<_s294> {}; // ParmVar no_cache_reason
struct _d1803: DeclName<_s236> {}; // CXXMethod Compile
struct _d1804: DeclName<_s232> {}; // ParmVar context
struct _d1805: DeclName<_s142> {}; // ParmVar source
struct _d1806: DeclName<_s293> {}; // ParmVar options
struct _d1807: DeclName<_s294> {}; // ParmVar no_cache_reason
struct _d1808: DeclName<_s295> {}; // CXXMethod StartStreamingScript
struct _d1809: DeclName<_s63> {}; // ParmVar isolate
struct _d1810: DeclName<_s142> {}; // ParmVar source
struct _d1811: DeclName<_s293> {}; // ParmVar options
struct _d1812: DeclName<_s236> {}; // CXXMethod Compile
struct _d1813: DeclName<_s232> {}; // ParmVar context
struct _d1814: DeclName<_s142> {}; // ParmVar source
struct _d1815: DeclName<_s296> {}; // ParmVar full_source_string
struct _d1816: DeclName<_s237> {}; // ParmVar origin
struct _d1817: DeclName<_s297> {}; // CXXMethod CachedDataVersionTag
struct _d1818: DeclName<_s298> {}; // CXXMethod CompileModule
struct _d1819: DeclName<_s63> {}; // ParmVar isolate
struct _d1820: DeclName<_s142> {}; // ParmVar source
struct _d1821: DeclName<_s293> {}; // ParmVar options
struct _d1822: DeclName<_s294> {}; // ParmVar no_cache_reason
struct _d1823: DeclName<_s299> {}; // CXXMethod CompileFunctionInContext
struct _d1824: DeclName<_s232> {}; // ParmVar context
struct _d1825: DeclName<_s142> {}; // ParmVar source
struct _d1826: DeclName<_s300> {}; // ParmVar arguments_count
struct _d1827: DeclName<_s301> {}; // ParmVar arguments
struct _d1828: DeclName<_s302> {}; // ParmVar context_extension_count
struct _d1829: DeclName<_s303> {}; // ParmVar context_extensions
struct _d1830: DeclName<_s293> {}; // ParmVar options
struct _d1831: DeclName<_s294> {}; // ParmVar no_cache_reason
struct _d1832: DeclName<_s304> {}; // CXXMethod CreateCodeCache
struct _d1833: DeclName<_s305> {}; // ParmVar unbound_script
struct _d1834: DeclName<_s304> {}; // CXXMethod CreateCodeCache
struct _d1835: DeclName<_s306> {}; // ParmVar unbound_module_script
struct _d1836: DeclName<_s307> {}; // CXXMethod CreateCodeCacheForFunction
struct _d1837: DeclName<_s308> {}; // ParmVar function
struct _d1838: DeclName<_s309> {}; // CXXRecord Message
struct _d1839: DeclName<_s309> {}; // CXXRecord Message
struct _d1840: DeclName<_s81> {}; // CXXMethod Get
struct _d1841: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d1842: DeclName<_s310> {}; // CXXMethod GetSourceLine
struct _d1843: DeclName<_s232> {}; // ParmVar context
struct _d1844: DeclName<_s311> {}; // CXXMethod GetScriptOrigin
struct _d1845: DeclName<_s312> {}; // CXXMethod GetScriptResourceName
struct _d1846: DeclName<_s313> {}; // CXXMethod GetStackTrace
struct _d1847: DeclName<_s207> {}; // CXXMethod GetLineNumber
struct _d1848: DeclName<_s232> {}; // ParmVar context
struct _d1849: DeclName<_s314> {}; // CXXMethod GetStartPosition
struct _d1850: DeclName<_s315> {}; // CXXMethod GetEndPosition
struct _d1851: DeclName<_s316> {}; // CXXMethod ErrorLevel
struct _d1852: DeclName<_s317> {}; // CXXMethod GetStartColumn
struct _d1853: DeclName<_s317> {}; // CXXMethod GetStartColumn
struct _d1854: DeclName<_s232> {}; // ParmVar context
struct _d1855: DeclName<_s318> {}; // CXXMethod GetEndColumn
struct _d1856: DeclName<_s318> {}; // CXXMethod GetEndColumn
struct _d1857: DeclName<_s232> {}; // ParmVar context
struct _d1858: DeclName<_s180> {}; // CXXMethod IsSharedCrossOrigin
struct _d1859: DeclName<_s181> {}; // CXXMethod IsOpaque
struct _d1860: DeclName<_s319> {}; // CXXMethod PrintCurrentStackTrace
struct _d1861: DeclName<_s320> {}; // CXXRecord _iobuf
struct _d1862: DeclName<_s63> {}; // ParmVar isolate
struct _d1863: DeclName<_s71> {}; // ParmVar out
struct _d1864: DeclName<_s321> {}; // Var kNoLineNumberInfo
struct _d1865: DeclName<_s322> {}; // Var kNoColumnInfo
struct _d1866: DeclName<_s323> {}; // Var kNoScriptIdInfo
struct _d1867: DeclName<_s40> {}; // CXXRecord StackTrace
struct _d1868: DeclName<_s324> {}; // Enum StackTraceOptions
struct _d1869: DeclName<_s325> {}; // EnumConstant kLineNumber
struct _d1870: DeclName<_s326> {}; // EnumConstant kColumnOffset
struct _d1871: DeclName<_s327> {}; // EnumConstant kScriptName
struct _d1872: DeclName<_s328> {}; // EnumConstant kFunctionName
struct _d1873: DeclName<_s329> {}; // EnumConstant kIsEval
struct _d1874: DeclName<_s330> {}; // EnumConstant kIsConstructor
struct _d1875: DeclName<_s331> {}; // EnumConstant kScriptNameOrSourceURL
struct _d1876: DeclName<_s332> {}; // EnumConstant kScriptId
struct _d1877: DeclName<_s333> {}; // EnumConstant kExposeFramesAcrossSecurityOrigins
struct _d1878: DeclName<_s334> {}; // EnumConstant kOverview
struct _d1879: DeclName<_s335> {}; // EnumConstant kDetailed
struct _d1880: DeclName<_s336> {}; // CXXMethod GetFrame
struct _d1881: DeclName<_s63> {}; // ParmVar isolate
struct _d1882: DeclName<_s132> {}; // ParmVar index
struct _d1883: DeclName<_s337> {}; // CXXMethod GetFrameCount
struct _d1884: DeclName<_s338> {}; // CXXMethod CurrentStackTrace
struct _d1885: DeclName<_s63> {}; // ParmVar isolate
struct _d1886: DeclName<_s339> {}; // ParmVar frame_limit
struct _d1887: DeclName<_s293> {}; // ParmVar options
struct _d1888: DeclName<_s39> {}; // CXXRecord StackFrame
struct _d1889: DeclName<_s207> {}; // CXXMethod GetLineNumber
struct _d1890: DeclName<_s340> {}; // CXXMethod GetColumn
struct _d1891: DeclName<_s341> {}; // CXXMethod GetScriptId
struct _d1892: DeclName<_s204> {}; // CXXMethod GetScriptName
struct _d1893: DeclName<_s342> {}; // CXXMethod GetScriptNameOrSourceURL
struct _d1894: DeclName<_s343> {}; // CXXMethod GetFunctionName
struct _d1895: DeclName<_s344> {}; // CXXMethod IsEval
struct _d1896: DeclName<_s345> {}; // CXXMethod IsConstructor
struct _d1897: DeclName<_s182> {}; // CXXMethod IsWasm
struct _d1898: DeclName<_s346> {}; // CXXMethod IsUserJavaScript
struct _d1899: DeclName<_s347> {}; // Enum StateTag
struct _d1900: DeclName<_s348> {}; // EnumConstant JS
struct _d1901: DeclName<_s349> {}; // EnumConstant GC
struct _d1902: DeclName<_s350> {}; // EnumConstant PARSER
struct _d1903: DeclName<_s351> {}; // EnumConstant BYTECODE_COMPILER
struct _d1904: DeclName<_s352> {}; // EnumConstant COMPILER
struct _d1905: DeclName<_s353> {}; // EnumConstant OTHER
struct _d1906: DeclName<_s354> {}; // EnumConstant EXTERNAL
struct _d1907: DeclName<_s355> {}; // EnumConstant IDLE
struct _d1908: DeclName<_s356> {}; // CXXRecord RegisterState
struct _d1909: DeclName<_s356> {}; // CXXRecord RegisterState
struct _d1910: DeclName<_s356> {}; // CXXConstructor RegisterState
struct _d1911: DeclName<_s357> {}; // Field pc
struct _d1912: DeclName<_s358> {}; // Field sp
struct _d1913: DeclName<_s359> {}; // Field fp
struct _d1914: DeclName<_s360> {}; // Field lr
struct _d1915: DeclName<_s361> {}; // CXXRecord SampleInfo
struct _d1916: DeclName<_s361> {}; // CXXRecord SampleInfo
struct _d1917: DeclName<_s362> {}; // Field frames_count
struct _d1918: DeclName<_s363> {}; // Field vm_state
struct _d1919: DeclName<_s364> {}; // Field external_callback_entry
struct _d1920: DeclName<_s365> {}; // CXXRecord MemoryRange
struct _d1921: DeclName<_s365> {}; // CXXRecord MemoryRange
struct _d1922: DeclName<_s366> {}; // Field start
struct _d1923: DeclName<_s367> {}; // Field length_in_bytes
struct _d1924: DeclName<_s368> {}; // CXXRecord JSEntryStub
struct _d1925: DeclName<_s368> {}; // CXXRecord JSEntryStub
struct _d1926: DeclName<_s369> {}; // Field code
struct _d1927: DeclName<_s370> {}; // CXXRecord UnwindState
struct _d1928: DeclName<_s370> {}; // CXXRecord UnwindState
struct _d1929: DeclName<_s371> {}; // Field code_range
struct _d1930: DeclName<_s372> {}; // Field embedded_code_range
struct _d1931: DeclName<_s373> {}; // Field js_entry_stub
struct _d1932: DeclName<_s374> {}; // CXXRecord JSON
struct _d1933: DeclName<_s374> {}; // CXXRecord JSON
struct _d1934: DeclName<_s375> {}; // CXXMethod Parse
struct _d1935: DeclName<_s232> {}; // ParmVar context
struct _d1936: DeclName<_s376> {}; // ParmVar json_string
struct _d1937: DeclName<_s377> {}; // CXXMethod Stringify
struct _d1938: DeclName<_s232> {}; // ParmVar context
struct _d1939: DeclName<_s378> {}; // ParmVar json_object
struct _d1940: DeclName<_s379> {}; // ParmVar gap
struct _d1941: DeclName<_s380> {}; // CXXRecord ValueSerializer
struct _d1942: DeclName<_s380> {}; // CXXRecord ValueSerializer
struct _d1943: DeclName<_s381> {}; // CXXRecord Delegate
struct _d1944: DeclName<_s381> {}; // CXXRecord Delegate
struct _d1945: DeclName<_s382> {}; // CXXDestructor ~Delegate
struct _d1946: DeclName<_s383> {}; // CXXMethod ThrowDataCloneError
struct _d1947: DeclName<_s384> {}; // ParmVar message
struct _d1948: DeclName<_s385> {}; // CXXMethod WriteHostObject
struct _d1949: DeclName<_s63> {}; // ParmVar isolate
struct _d1950: DeclName<_s386> {}; // ParmVar object
struct _d1951: DeclName<_s387> {}; // CXXMethod GetSharedArrayBufferId
struct _d1952: DeclName<_s63> {}; // ParmVar isolate
struct _d1953: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d1954: DeclName<_s389> {}; // CXXMethod GetWasmModuleTransferId
struct _d1955: DeclName<_s63> {}; // ParmVar isolate
struct _d1956: DeclName<_s390> {}; // ParmVar module
struct _d1957: DeclName<_s391> {}; // CXXMethod ReallocateBufferMemory
struct _d1958: DeclName<_s392> {}; // ParmVar old_buffer
struct _d1959: DeclName<_s393> {}; // ParmVar size
struct _d1960: DeclName<_s394> {}; // ParmVar actual_size
struct _d1961: DeclName<_s395> {}; // CXXMethod FreeBufferMemory
struct _d1962: DeclName<_s396> {}; // ParmVar buffer
struct _d1963: DeclName<_s67> {}; // CXXMethod operator=
struct _d1965: DeclName<_s380> {}; // CXXConstructor ValueSerializer
struct _d1966: DeclName<_s63> {}; // ParmVar isolate
struct _d1967: DeclName<_s380> {}; // CXXConstructor ValueSerializer
struct _d1968: DeclName<_s63> {}; // ParmVar isolate
struct _d1969: DeclName<_s397> {}; // ParmVar delegate
struct _d1970: DeclName<_s398> {}; // CXXDestructor ~ValueSerializer
struct _d1971: DeclName<_s399> {}; // CXXMethod WriteHeader
struct _d1972: DeclName<_s400> {}; // CXXMethod WriteValue
struct _d1973: DeclName<_s232> {}; // ParmVar context
struct _d1974: DeclName<_s162> {}; // ParmVar value
struct _d1975: DeclName<_s401> {}; // CXXMethod Release
struct _d1976: DeclName<_s402> {}; // ClassTemplateSpecialization pair
struct _d1977: DeclName<_s403> {}; // CXXMethod TransferArrayBuffer
struct _d1978: DeclName<_s404> {}; // ParmVar transfer_id
struct _d1979: DeclName<_s405> {}; // ParmVar array_buffer
struct _d1980: DeclName<_s406> {}; // CXXMethod SetTreatArrayBufferViewsAsHostObjects
struct _d1981: DeclName<_s407> {}; // ParmVar mode
struct _d1982: DeclName<_s408> {}; // CXXMethod WriteUint32
struct _d1983: DeclName<_s162> {}; // ParmVar value
struct _d1984: DeclName<_s409> {}; // CXXMethod WriteUint64
struct _d1985: DeclName<_s162> {}; // ParmVar value
struct _d1986: DeclName<_s410> {}; // CXXMethod WriteDouble
struct _d1987: DeclName<_s162> {}; // ParmVar value
struct _d1988: DeclName<_s411> {}; // CXXMethod WriteRawBytes
struct _d1989: DeclName<_s142> {}; // ParmVar source
struct _d1990: DeclName<_s171> {}; // ParmVar length
struct _d1991: DeclName<_s380> {}; // CXXConstructor ValueSerializer
struct _d1993: DeclName<_s67> {}; // CXXMethod operator=
struct _d1995: DeclName<_s412> {}; // CXXRecord ValueDeserializer
struct _d1996: DeclName<_s412> {}; // CXXRecord ValueDeserializer
struct _d1997: DeclName<_s381> {}; // CXXRecord Delegate
struct _d1998: DeclName<_s381> {}; // CXXRecord Delegate
struct _d1999: DeclName<_s382> {}; // CXXDestructor ~Delegate
struct _d2000: DeclName<_s413> {}; // CXXMethod ReadHostObject
struct _d2001: DeclName<_s63> {}; // ParmVar isolate
struct _d2002: DeclName<_s414> {}; // CXXMethod GetWasmModuleFromId
struct _d2003: DeclName<_s63> {}; // ParmVar isolate
struct _d2004: DeclName<_s404> {}; // ParmVar transfer_id
struct _d2005: DeclName<_s415> {}; // CXXMethod GetSharedArrayBufferFromId
struct _d2006: DeclName<_s63> {}; // ParmVar isolate
struct _d2007: DeclName<_s416> {}; // ParmVar clone_id
struct _d2008: DeclName<_s67> {}; // CXXMethod operator=
struct _d2010: DeclName<_s412> {}; // CXXConstructor ValueDeserializer
struct _d2011: DeclName<_s63> {}; // ParmVar isolate
struct _d2012: DeclName<_s134> {}; // ParmVar data
struct _d2013: DeclName<_s393> {}; // ParmVar size
struct _d2014: DeclName<_s412> {}; // CXXConstructor ValueDeserializer
struct _d2015: DeclName<_s63> {}; // ParmVar isolate
struct _d2016: DeclName<_s134> {}; // ParmVar data
struct _d2017: DeclName<_s393> {}; // ParmVar size
struct _d2018: DeclName<_s397> {}; // ParmVar delegate
struct _d2019: DeclName<_s417> {}; // CXXDestructor ~ValueDeserializer
struct _d2020: DeclName<_s418> {}; // CXXMethod ReadHeader
struct _d2021: DeclName<_s232> {}; // ParmVar context
struct _d2022: DeclName<_s419> {}; // CXXMethod ReadValue
struct _d2023: DeclName<_s232> {}; // ParmVar context
struct _d2024: DeclName<_s403> {}; // CXXMethod TransferArrayBuffer
struct _d2025: DeclName<_s404> {}; // ParmVar transfer_id
struct _d2026: DeclName<_s405> {}; // ParmVar array_buffer
struct _d2027: DeclName<_s420> {}; // CXXMethod TransferSharedArrayBuffer
struct _d2028: DeclName<_s421> {}; // ParmVar id
struct _d2029: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d2030: DeclName<_s422> {}; // CXXMethod SetSupportsLegacyWireFormat
struct _d2031: DeclName<_s423> {}; // ParmVar supports_legacy_wire_format
struct _d2032: DeclName<_s424> {}; // CXXMethod SetExpectInlineWasm
struct _d2033: DeclName<_s425> {}; // ParmVar allow_inline_wasm
struct _d2034: DeclName<_s426> {}; // CXXMethod GetWireFormatVersion
struct _d2035: DeclName<_s427> {}; // CXXMethod ReadUint32
struct _d2036: DeclName<_s162> {}; // ParmVar value
struct _d2037: DeclName<_s428> {}; // CXXMethod ReadUint64
struct _d2038: DeclName<_s162> {}; // ParmVar value
struct _d2039: DeclName<_s429> {}; // CXXMethod ReadDouble
struct _d2040: DeclName<_s162> {}; // ParmVar value
struct _d2041: DeclName<_s430> {}; // CXXMethod ReadRawBytes
struct _d2042: DeclName<_s171> {}; // ParmVar length
struct _d2043: DeclName<_s134> {}; // ParmVar data
struct _d2044: DeclName<_s412> {}; // CXXConstructor ValueDeserializer
struct _d2046: DeclName<_s67> {}; // CXXMethod operator=
struct _d2048: DeclName<_s49> {}; // CXXRecord Value
struct _d2049: DeclName<_s431> {}; // CXXMethod IsUndefined
struct _d2050: DeclName<_s432> {}; // CXXMethod IsNull
struct _d2051: DeclName<_s433> {}; // CXXMethod IsNullOrUndefined
struct _d2052: DeclName<_s434> {}; // CXXMethod IsTrue
struct _d2053: DeclName<_s435> {}; // CXXMethod IsFalse
struct _d2054: DeclName<_s436> {}; // CXXMethod IsName
struct _d2055: DeclName<_s437> {}; // CXXMethod IsString
struct _d2056: DeclName<_s438> {}; // CXXMethod IsSymbol
struct _d2057: DeclName<_s439> {}; // CXXMethod IsFunction
struct _d2058: DeclName<_s440> {}; // CXXMethod IsArray
struct _d2059: DeclName<_s441> {}; // CXXMethod IsObject
struct _d2060: DeclName<_s442> {}; // CXXMethod IsBigInt
struct _d2061: DeclName<_s443> {}; // CXXMethod IsBoolean
struct _d2062: DeclName<_s444> {}; // CXXMethod IsNumber
struct _d2063: DeclName<_s445> {}; // CXXMethod IsExternal
struct _d2064: DeclName<_s446> {}; // CXXMethod IsInt32
struct _d2065: DeclName<_s447> {}; // CXXMethod IsUint32
struct _d2066: DeclName<_s448> {}; // CXXMethod IsDate
struct _d2067: DeclName<_s449> {}; // CXXMethod IsArgumentsObject
struct _d2068: DeclName<_s450> {}; // CXXMethod IsBigIntObject
struct _d2069: DeclName<_s451> {}; // CXXMethod IsBooleanObject
struct _d2070: DeclName<_s452> {}; // CXXMethod IsNumberObject
struct _d2071: DeclName<_s453> {}; // CXXMethod IsStringObject
struct _d2072: DeclName<_s454> {}; // CXXMethod IsSymbolObject
struct _d2073: DeclName<_s455> {}; // CXXMethod IsNativeError
struct _d2074: DeclName<_s456> {}; // CXXMethod IsRegExp
struct _d2075: DeclName<_s457> {}; // CXXMethod IsAsyncFunction
struct _d2076: DeclName<_s458> {}; // CXXMethod IsGeneratorFunction
struct _d2077: DeclName<_s459> {}; // CXXMethod IsGeneratorObject
struct _d2078: DeclName<_s460> {}; // CXXMethod IsPromise
struct _d2079: DeclName<_s461> {}; // CXXMethod IsMap
struct _d2080: DeclName<_s462> {}; // CXXMethod IsSet
struct _d2081: DeclName<_s463> {}; // CXXMethod IsMapIterator
struct _d2082: DeclName<_s464> {}; // CXXMethod IsSetIterator
struct _d2083: DeclName<_s465> {}; // CXXMethod IsWeakMap
struct _d2084: DeclName<_s466> {}; // CXXMethod IsWeakSet
struct _d2085: DeclName<_s467> {}; // CXXMethod IsArrayBuffer
struct _d2086: DeclName<_s468> {}; // CXXMethod IsArrayBufferView
struct _d2087: DeclName<_s469> {}; // CXXMethod IsTypedArray
struct _d2088: DeclName<_s470> {}; // CXXMethod IsUint8Array
struct _d2089: DeclName<_s471> {}; // CXXMethod IsUint8ClampedArray
struct _d2090: DeclName<_s472> {}; // CXXMethod IsInt8Array
struct _d2091: DeclName<_s473> {}; // CXXMethod IsUint16Array
struct _d2092: DeclName<_s474> {}; // CXXMethod IsInt16Array
struct _d2093: DeclName<_s475> {}; // CXXMethod IsUint32Array
struct _d2094: DeclName<_s476> {}; // CXXMethod IsInt32Array
struct _d2095: DeclName<_s477> {}; // CXXMethod IsFloat32Array
struct _d2096: DeclName<_s478> {}; // CXXMethod IsFloat64Array
struct _d2097: DeclName<_s479> {}; // CXXMethod IsBigInt64Array
struct _d2098: DeclName<_s480> {}; // CXXMethod IsBigUint64Array
struct _d2099: DeclName<_s481> {}; // CXXMethod IsDataView
struct _d2100: DeclName<_s482> {}; // CXXMethod IsSharedArrayBuffer
struct _d2101: DeclName<_s483> {}; // CXXMethod IsProxy
struct _d2102: DeclName<_s484> {}; // CXXMethod IsWebAssemblyCompiledModule
struct _d2103: DeclName<_s485> {}; // CXXMethod IsModuleNamespaceObject
struct _d2104: DeclName<_s486> {}; // CXXMethod ToBigInt
struct _d2105: DeclName<_s232> {}; // ParmVar context
struct _d2106: DeclName<_s487> {}; // CXXMethod ToNumber
struct _d2107: DeclName<_s232> {}; // ParmVar context
struct _d2108: DeclName<_s488> {}; // CXXMethod ToString
struct _d2109: DeclName<_s232> {}; // ParmVar context
struct _d2110: DeclName<_s489> {}; // CXXMethod ToDetailString
struct _d2111: DeclName<_s232> {}; // ParmVar context
struct _d2112: DeclName<_s490> {}; // CXXMethod ToObject
struct _d2113: DeclName<_s232> {}; // ParmVar context
struct _d2114: DeclName<_s491> {}; // CXXMethod ToInteger
struct _d2115: DeclName<_s232> {}; // ParmVar context
struct _d2116: DeclName<_s492> {}; // CXXMethod ToUint32
struct _d2117: DeclName<_s232> {}; // ParmVar context
struct _d2118: DeclName<_s493> {}; // CXXMethod ToInt32
struct _d2119: DeclName<_s232> {}; // ParmVar context
struct _d2120: DeclName<_s494> {}; // CXXMethod ToBoolean
struct _d2121: DeclName<_s63> {}; // ParmVar isolate
struct _d2122: DeclName<_s495> {}; // CXXMethod ToArrayIndex
struct _d2123: DeclName<_s232> {}; // ParmVar context
struct _d2124: DeclName<_s496> {}; // CXXMethod BooleanValue
struct _d2125: DeclName<_s63> {}; // ParmVar isolate
struct _d2126: DeclName<_s497> {}; // CXXMethod NumberValue
struct _d2127: DeclName<_s232> {}; // ParmVar context
struct _d2128: DeclName<_s498> {}; // CXXMethod IntegerValue
struct _d2129: DeclName<_s232> {}; // ParmVar context
struct _d2130: DeclName<_s499> {}; // CXXMethod Uint32Value
struct _d2131: DeclName<_s232> {}; // ParmVar context
struct _d2132: DeclName<_s500> {}; // CXXMethod Int32Value
struct _d2133: DeclName<_s232> {}; // ParmVar context
struct _d2134: DeclName<_s501> {}; // CXXMethod Equals
struct _d2135: DeclName<_s232> {}; // ParmVar context
struct _d2136: DeclName<_s53> {}; // ParmVar that
struct _d2137: DeclName<_s502> {}; // CXXMethod StrictEquals
struct _d2138: DeclName<_s53> {}; // ParmVar that
struct _d2139: DeclName<_s503> {}; // CXXMethod SameValue
struct _d2140: DeclName<_s53> {}; // ParmVar that
struct _d2141: DeclName<_s60> {}; // FunctionTemplate Cast
struct _d2142: DeclName<_s21> {}; // TemplateTypeParm T
struct _d2143: DeclName<_s60> {}; // CXXMethod Cast
struct _d2144: DeclName<_s162> {}; // ParmVar value
struct _d2145: DeclName<_s504> {}; // CXXMethod TypeOf
struct _d2147: DeclName<_s505> {}; // CXXMethod InstanceOf
struct _d2148: DeclName<_s232> {}; // ParmVar context
struct _d2149: DeclName<_s386> {}; // ParmVar object
struct _d2150: DeclName<_s30> {}; // CXXRecord Primitive
struct _d2151: DeclName<_s10> {}; // CXXRecord Boolean
struct _d2152: DeclName<_s49> {}; // CXXMethod Value
struct _d2153: DeclName<_s60> {}; // CXXMethod Cast
struct _d2154: DeclName<_s506> {}; // ParmVar obj
struct _d2155: DeclName<_s62> {}; // CXXMethod New
struct _d2156: DeclName<_s63> {}; // ParmVar isolate
struct _d2157: DeclName<_s162> {}; // ParmVar value
struct _d2158: DeclName<_s23> {}; // CXXRecord Name
struct _d2159: DeclName<_s229> {}; // CXXMethod GetIdentityHash
struct _d2160: DeclName<_s60> {}; // CXXMethod Cast
struct _d2161: DeclName<_s506> {}; // ParmVar obj
struct _d2162: DeclName<_s507> {}; // Enum NewStringType
struct _d2163: DeclName<_s508> {}; // EnumConstant kNormal
struct _d2164: DeclName<_s509> {}; // EnumConstant kInternalized
struct _d2165: DeclName<_s41> {}; // CXXRecord String
struct _d2166: DeclName<_s510> {}; // Var kMaxLength
struct _d2167: DeclName<_s261> {}; // Enum Encoding
struct _d2168: DeclName<_s511> {}; // EnumConstant UNKNOWN_ENCODING
struct _d2169: DeclName<_s512> {}; // EnumConstant TWO_BYTE_ENCODING
struct _d2170: DeclName<_s513> {}; // EnumConstant ONE_BYTE_ENCODING
struct _d2171: DeclName<_s172> {}; // CXXMethod Length
struct _d2172: DeclName<_s514> {}; // CXXMethod Utf8Length
struct _d2173: DeclName<_s63> {}; // ParmVar isolate
struct _d2174: DeclName<_s515> {}; // CXXMethod IsOneByte
struct _d2175: DeclName<_s516> {}; // CXXMethod ContainsOnlyOneByte
struct _d2176: DeclName<_s517> {}; // Enum WriteOptions
struct _d2177: DeclName<_s518> {}; // EnumConstant NO_OPTIONS
struct _d2178: DeclName<_s519> {}; // EnumConstant HINT_MANY_WRITES_EXPECTED
struct _d2179: DeclName<_s520> {}; // EnumConstant NO_NULL_TERMINATION
struct _d2180: DeclName<_s521> {}; // EnumConstant PRESERVE_ONE_BYTE_NULL
struct _d2181: DeclName<_s522> {}; // EnumConstant REPLACE_INVALID_UTF8
struct _d2182: DeclName<_s523> {}; // CXXMethod Write
struct _d2183: DeclName<_s63> {}; // ParmVar isolate
struct _d2184: DeclName<_s396> {}; // ParmVar buffer
struct _d2185: DeclName<_s366> {}; // ParmVar start
struct _d2186: DeclName<_s171> {}; // ParmVar length
struct _d2187: DeclName<_s293> {}; // ParmVar options
struct _d2188: DeclName<_s524> {}; // CXXMethod WriteOneByte
struct _d2189: DeclName<_s63> {}; // ParmVar isolate
struct _d2190: DeclName<_s396> {}; // ParmVar buffer
struct _d2191: DeclName<_s366> {}; // ParmVar start
struct _d2192: DeclName<_s171> {}; // ParmVar length
struct _d2193: DeclName<_s293> {}; // ParmVar options
struct _d2194: DeclName<_s525> {}; // CXXMethod WriteUtf8
struct _d2195: DeclName<_s63> {}; // ParmVar isolate
struct _d2196: DeclName<_s396> {}; // ParmVar buffer
struct _d2197: DeclName<_s171> {}; // ParmVar length
struct _d2198: DeclName<_s526> {}; // ParmVar nchars_ref
struct _d2199: DeclName<_s293> {}; // ParmVar options
struct _d2200: DeclName<_s80> {}; // CXXMethod Empty
struct _d2201: DeclName<_s63> {}; // ParmVar isolate
struct _d2202: DeclName<_s445> {}; // CXXMethod IsExternal
struct _d2203: DeclName<_s527> {}; // CXXMethod IsExternalOneByte
struct _d2204: DeclName<_s528> {}; // CXXRecord ExternalStringResourceBase
struct _d2205: DeclName<_s528> {}; // CXXRecord ExternalStringResourceBase
struct _d2206: DeclName<_s529> {}; // CXXDestructor ~ExternalStringResourceBase
struct _d2207: DeclName<_s530> {}; // CXXMethod IsCacheable
struct _d2208: DeclName<_s528> {}; // CXXConstructor ExternalStringResourceBase
struct _d2210: DeclName<_s67> {}; // CXXMethod operator=
struct _d2212: DeclName<_s528> {}; // CXXConstructor ExternalStringResourceBase
struct _d2213: DeclName<_s531> {}; // CXXMethod Dispose
struct _d2214: DeclName<_s532> {}; // CXXMethod Lock
struct _d2215: DeclName<_s533> {}; // CXXMethod Unlock
struct _d2216: DeclName<_s534> {}; // CXXRecord ExternalStringResource
struct _d2217: DeclName<_s534> {}; // CXXRecord ExternalStringResource
struct _d2218: DeclName<_s535> {}; // CXXDestructor ~ExternalStringResource
struct _d2219: DeclName<_s134> {}; // CXXMethod data
struct _d2220: DeclName<_s171> {}; // CXXMethod length
struct _d2221: DeclName<_s534> {}; // CXXConstructor ExternalStringResource
struct _d2222: DeclName<_s534> {}; // CXXConstructor ExternalStringResource
struct _d2224: DeclName<_s67> {}; // CXXMethod operator=
struct _d2226: DeclName<_s536> {}; // CXXRecord ExternalOneByteStringResource
struct _d2227: DeclName<_s536> {}; // CXXRecord ExternalOneByteStringResource
struct _d2228: DeclName<_s537> {}; // CXXDestructor ~ExternalOneByteStringResource
struct _d2229: DeclName<_s134> {}; // CXXMethod data
struct _d2230: DeclName<_s171> {}; // CXXMethod length
struct _d2231: DeclName<_s536> {}; // CXXConstructor ExternalOneByteStringResource
struct _d2232: DeclName<_s536> {}; // CXXConstructor ExternalOneByteStringResource
struct _d2234: DeclName<_s67> {}; // CXXMethod operator=
struct _d2236: DeclName<_s538> {}; // CXXMethod GetExternalStringResourceBase
struct _d2237: DeclName<_s539> {}; // ParmVar encoding_out
struct _d2238: DeclName<_s540> {}; // CXXMethod GetExternalStringResource
struct _d2239: DeclName<_s541> {}; // CXXMethod GetExternalOneByteStringResource
struct _d2240: DeclName<_s60> {}; // CXXMethod Cast
struct _d2241: DeclName<_s506> {}; // ParmVar obj
struct _d2242: DeclName<_s542> {}; // CXXMethod NewFromUtf8
struct _d2243: DeclName<_s63> {}; // ParmVar isolate
struct _d2244: DeclName<_s134> {}; // ParmVar data
struct _d2245: DeclName<_s87> {}; // ParmVar type
struct _d2246: DeclName<_s171> {}; // ParmVar length
struct _d2247: DeclName<_s543> {}; // CXXMethod NewFromOneByte
struct _d2248: DeclName<_s63> {}; // ParmVar isolate
struct _d2249: DeclName<_s134> {}; // ParmVar data
struct _d2250: DeclName<_s87> {}; // ParmVar type
struct _d2251: DeclName<_s171> {}; // ParmVar length
struct _d2252: DeclName<_s544> {}; // CXXMethod NewFromTwoByte
struct _d2253: DeclName<_s63> {}; // ParmVar isolate
struct _d2254: DeclName<_s134> {}; // ParmVar data
struct _d2255: DeclName<_s87> {}; // ParmVar type
struct _d2256: DeclName<_s171> {}; // ParmVar length
struct _d2257: DeclName<_s545> {}; // CXXMethod Concat
struct _d2258: DeclName<_s63> {}; // ParmVar isolate
struct _d2259: DeclName<_s546> {}; // ParmVar left
struct _d2260: DeclName<_s547> {}; // ParmVar right
struct _d2261: DeclName<_s548> {}; // CXXMethod NewExternalTwoByte
struct _d2262: DeclName<_s63> {}; // ParmVar isolate
struct _d2263: DeclName<_s549> {}; // ParmVar resource
struct _d2264: DeclName<_s550> {}; // CXXMethod MakeExternal
struct _d2265: DeclName<_s549> {}; // ParmVar resource
struct _d2266: DeclName<_s551> {}; // CXXMethod NewExternalOneByte
struct _d2267: DeclName<_s63> {}; // ParmVar isolate
struct _d2268: DeclName<_s549> {}; // ParmVar resource
struct _d2269: DeclName<_s550> {}; // CXXMethod MakeExternal
struct _d2270: DeclName<_s549> {}; // ParmVar resource
struct _d2271: DeclName<_s552> {}; // CXXMethod CanMakeExternal
struct _d2272: DeclName<_s553> {}; // CXXMethod StringEquals
struct _d2273: DeclName<_s554> {}; // ParmVar str
struct _d2274: DeclName<_s555> {}; // CXXRecord Utf8Value
struct _d2275: DeclName<_s555> {}; // CXXRecord Utf8Value
struct _d2276: DeclName<_s555> {}; // CXXConstructor Utf8Value
struct _d2277: DeclName<_s63> {}; // ParmVar isolate
struct _d2278: DeclName<_s506> {}; // ParmVar obj
struct _d2279: DeclName<_s556> {}; // CXXDestructor ~Utf8Value
struct _d2280: DeclName<_s57> {}; // CXXMethod operator*
struct _d2281: DeclName<_s57> {}; // CXXMethod operator*
struct _d2282: DeclName<_s171> {}; // CXXMethod length
struct _d2283: DeclName<_s555> {}; // CXXConstructor Utf8Value
struct _d2285: DeclName<_s67> {}; // CXXMethod operator=
struct _d2287: DeclName<_s49> {}; // CXXRecord Value
struct _d2288: DeclName<_s49> {}; // CXXRecord Value
struct _d2289: DeclName<_s49> {}; // CXXConstructor Value
struct _d2290: DeclName<_s63> {}; // ParmVar isolate
struct _d2291: DeclName<_s506> {}; // ParmVar obj
struct _d2292: DeclName<_s557> {}; // CXXDestructor ~Value
struct _d2293: DeclName<_s57> {}; // CXXMethod operator*
struct _d2294: DeclName<_s57> {}; // CXXMethod operator*
struct _d2295: DeclName<_s171> {}; // CXXMethod length
struct _d2296: DeclName<_s49> {}; // CXXConstructor Value
struct _d2298: DeclName<_s67> {}; // CXXMethod operator=
struct _d2300: DeclName<_s43> {}; // CXXRecord Symbol
struct _d2301: DeclName<_s23> {}; // CXXMethod Name
struct _d2302: DeclName<_s62> {}; // CXXMethod New
struct _d2303: DeclName<_s63> {}; // ParmVar isolate
struct _d2304: DeclName<_s558> {}; // ParmVar name
struct _d2305: DeclName<_s559> {}; // CXXMethod For
struct _d2306: DeclName<_s63> {}; // ParmVar isolate
struct _d2307: DeclName<_s558> {}; // ParmVar name
struct _d2308: DeclName<_s560> {}; // CXXMethod ForApi
struct _d2309: DeclName<_s63> {}; // ParmVar isolate
struct _d2310: DeclName<_s558> {}; // ParmVar name
struct _d2311: DeclName<_s561> {}; // CXXMethod GetAsyncIterator
struct _d2312: DeclName<_s63> {}; // ParmVar isolate
struct _d2313: DeclName<_s562> {}; // CXXMethod GetHasInstance
struct _d2314: DeclName<_s63> {}; // ParmVar isolate
struct _d2315: DeclName<_s563> {}; // CXXMethod GetIsConcatSpreadable
struct _d2316: DeclName<_s63> {}; // ParmVar isolate
struct _d2317: DeclName<_s564> {}; // CXXMethod GetIterator
struct _d2318: DeclName<_s63> {}; // ParmVar isolate
struct _d2319: DeclName<_s565> {}; // CXXMethod GetMatch
struct _d2320: DeclName<_s63> {}; // ParmVar isolate
struct _d2321: DeclName<_s566> {}; // CXXMethod GetReplace
struct _d2322: DeclName<_s63> {}; // ParmVar isolate
struct _d2323: DeclName<_s567> {}; // CXXMethod GetSearch
struct _d2324: DeclName<_s63> {}; // ParmVar isolate
struct _d2325: DeclName<_s568> {}; // CXXMethod GetSplit
struct _d2326: DeclName<_s63> {}; // ParmVar isolate
struct _d2327: DeclName<_s569> {}; // CXXMethod GetToPrimitive
struct _d2328: DeclName<_s63> {}; // ParmVar isolate
struct _d2329: DeclName<_s570> {}; // CXXMethod GetToStringTag
struct _d2330: DeclName<_s63> {}; // ParmVar isolate
struct _d2331: DeclName<_s571> {}; // CXXMethod GetUnscopables
struct _d2332: DeclName<_s63> {}; // ParmVar isolate
struct _d2333: DeclName<_s60> {}; // CXXMethod Cast
struct _d2334: DeclName<_s506> {}; // ParmVar obj
struct _d2335: DeclName<_s46> {}; // CXXRecord Private
struct _d2336: DeclName<_s23> {}; // CXXMethod Name
struct _d2337: DeclName<_s62> {}; // CXXMethod New
struct _d2338: DeclName<_s63> {}; // ParmVar isolate
struct _d2339: DeclName<_s558> {}; // ParmVar name
struct _d2340: DeclName<_s560> {}; // CXXMethod ForApi
struct _d2341: DeclName<_s63> {}; // ParmVar isolate
struct _d2342: DeclName<_s558> {}; // ParmVar name
struct _d2343: DeclName<_s60> {}; // CXXMethod Cast
struct _d2344: DeclName<_s134> {}; // ParmVar data
struct _d2345: DeclName<_s24> {}; // CXXRecord Number
struct _d2346: DeclName<_s49> {}; // CXXMethod Value
struct _d2347: DeclName<_s62> {}; // CXXMethod New
struct _d2348: DeclName<_s63> {}; // ParmVar isolate
struct _d2349: DeclName<_s162> {}; // ParmVar value
struct _d2350: DeclName<_s60> {}; // CXXMethod Cast
struct _d2351: DeclName<_s506> {}; // ParmVar obj
struct _d2352: DeclName<_s19> {}; // CXXRecord Integer
struct _d2353: DeclName<_s62> {}; // CXXMethod New
struct _d2354: DeclName<_s63> {}; // ParmVar isolate
struct _d2355: DeclName<_s162> {}; // ParmVar value
struct _d2356: DeclName<_s572> {}; // CXXMethod NewFromUnsigned
struct _d2357: DeclName<_s63> {}; // ParmVar isolate
struct _d2358: DeclName<_s162> {}; // ParmVar value
struct _d2359: DeclName<_s49> {}; // CXXMethod Value
struct _d2360: DeclName<_s60> {}; // CXXMethod Cast
struct _d2361: DeclName<_s506> {}; // ParmVar obj
struct _d2362: DeclName<_s18> {}; // CXXRecord Int32
struct _d2363: DeclName<_s49> {}; // CXXMethod Value
struct _d2364: DeclName<_s60> {}; // CXXMethod Cast
struct _d2365: DeclName<_s506> {}; // ParmVar obj
struct _d2366: DeclName<_s47> {}; // CXXRecord Uint32
struct _d2367: DeclName<_s49> {}; // CXXMethod Value
struct _d2368: DeclName<_s60> {}; // CXXMethod Cast
struct _d2369: DeclName<_s506> {}; // ParmVar obj
struct _d2370: DeclName<_s8> {}; // CXXRecord BigInt
struct _d2371: DeclName<_s62> {}; // CXXMethod New
struct _d2372: DeclName<_s63> {}; // ParmVar isolate
struct _d2373: DeclName<_s162> {}; // ParmVar value
struct _d2374: DeclName<_s572> {}; // CXXMethod NewFromUnsigned
struct _d2375: DeclName<_s63> {}; // ParmVar isolate
struct _d2376: DeclName<_s162> {}; // ParmVar value
struct _d2377: DeclName<_s573> {}; // CXXMethod NewFromWords
struct _d2378: DeclName<_s232> {}; // ParmVar context
struct _d2379: DeclName<_s574> {}; // ParmVar sign_bit
struct _d2380: DeclName<_s575> {}; // ParmVar word_count
struct _d2381: DeclName<_s576> {}; // ParmVar words
struct _d2382: DeclName<_s577> {}; // CXXMethod Uint64Value
struct _d2383: DeclName<_s578> {}; // ParmVar lossless
struct _d2384: DeclName<_s579> {}; // CXXMethod Int64Value
struct _d2385: DeclName<_s578> {}; // ParmVar lossless
struct _d2386: DeclName<_s580> {}; // CXXMethod WordCount
struct _d2387: DeclName<_s581> {}; // CXXMethod ToWordsArray
struct _d2388: DeclName<_s574> {}; // ParmVar sign_bit
struct _d2389: DeclName<_s575> {}; // ParmVar word_count
struct _d2390: DeclName<_s576> {}; // ParmVar words
struct _d2391: DeclName<_s60> {}; // CXXMethod Cast
struct _d2392: DeclName<_s506> {}; // ParmVar obj
struct _d2393: DeclName<_s582> {}; // Enum PropertyAttribute
struct _d2394: DeclName<_s583> {}; // EnumConstant None
struct _d2395: DeclName<_s584> {}; // EnumConstant ReadOnly
struct _d2396: DeclName<_s585> {}; // EnumConstant DontEnum
struct _d2397: DeclName<_s586> {}; // EnumConstant DontDelete
struct _d2398: DeclName<_s587> {}; // Typedef AccessorGetterCallback
struct _d2399: DeclName<_s588> {}; // Typedef AccessorNameGetterCallback
struct _d2400: DeclName<_s589> {}; // Typedef AccessorSetterCallback
struct _d2401: DeclName<_s590> {}; // Typedef AccessorNameSetterCallback
struct _d2402: DeclName<_s591> {}; // Enum AccessControl
struct _d2403: DeclName<_s592> {}; // EnumConstant DEFAULT
struct _d2404: DeclName<_s593> {}; // EnumConstant ALL_CAN_READ
struct _d2405: DeclName<_s594> {}; // EnumConstant ALL_CAN_WRITE
struct _d2406: DeclName<_s595> {}; // EnumConstant PROHIBITS_OVERWRITING
struct _d2407: DeclName<_s596> {}; // Enum PropertyFilter
struct _d2408: DeclName<_s597> {}; // EnumConstant ALL_PROPERTIES
struct _d2409: DeclName<_s598> {}; // EnumConstant ONLY_WRITABLE
struct _d2410: DeclName<_s599> {}; // EnumConstant ONLY_ENUMERABLE
struct _d2411: DeclName<_s600> {}; // EnumConstant ONLY_CONFIGURABLE
struct _d2412: DeclName<_s601> {}; // EnumConstant SKIP_STRINGS
struct _d2413: DeclName<_s602> {}; // EnumConstant SKIP_SYMBOLS
struct _d2414: DeclName<_s603> {}; // Enum SideEffectType
struct _d2415: DeclName<_s604> {}; // EnumConstant kHasSideEffect
struct _d2416: DeclName<_s605> {}; // EnumConstant kHasNoSideEffect
struct _d2417: DeclName<_s606> {}; // EnumConstant kHasSideEffectToReceiver
struct _d2418: DeclName<_s607> {}; // Enum KeyCollectionMode
struct _d2419: DeclName<_s608> {}; // EnumConstant kOwnOnly
struct _d2420: DeclName<_s609> {}; // EnumConstant kIncludePrototypes
struct _d2421: DeclName<_s610> {}; // Enum IndexFilter
struct _d2422: DeclName<_s611> {}; // EnumConstant kIncludeIndices
struct _d2423: DeclName<_s612> {}; // EnumConstant kSkipIndices
struct _d2424: DeclName<_s613> {}; // Enum KeyConversionMode
struct _d2425: DeclName<_s614> {}; // EnumConstant kConvertToString
struct _d2426: DeclName<_s615> {}; // EnumConstant kKeepNumbers
struct _d2427: DeclName<_s616> {}; // Enum IntegrityLevel
struct _d2428: DeclName<_s617> {}; // EnumConstant kFrozen
struct _d2429: DeclName<_s618> {}; // EnumConstant kSealed
struct _d2430: DeclName<_s26> {}; // CXXRecord Object
struct _d2431: DeclName<_s123> {}; // CXXMethod Set
struct _d2432: DeclName<_s619> {}; // ParmVar key
struct _d2433: DeclName<_s162> {}; // ParmVar value
struct _d2434: DeclName<_s123> {}; // CXXMethod Set
struct _d2435: DeclName<_s232> {}; // ParmVar context
struct _d2436: DeclName<_s619> {}; // ParmVar key
struct _d2437: DeclName<_s162> {}; // ParmVar value
struct _d2438: DeclName<_s123> {}; // CXXMethod Set
struct _d2439: DeclName<_s132> {}; // ParmVar index
struct _d2440: DeclName<_s162> {}; // ParmVar value
struct _d2441: DeclName<_s123> {}; // CXXMethod Set
struct _d2442: DeclName<_s232> {}; // ParmVar context
struct _d2443: DeclName<_s132> {}; // ParmVar index
struct _d2444: DeclName<_s162> {}; // ParmVar value
struct _d2445: DeclName<_s620> {}; // CXXMethod CreateDataProperty
struct _d2446: DeclName<_s232> {}; // ParmVar context
struct _d2447: DeclName<_s619> {}; // ParmVar key
struct _d2448: DeclName<_s162> {}; // ParmVar value
struct _d2449: DeclName<_s620> {}; // CXXMethod CreateDataProperty
struct _d2450: DeclName<_s232> {}; // ParmVar context
struct _d2451: DeclName<_s132> {}; // ParmVar index
struct _d2452: DeclName<_s162> {}; // ParmVar value
struct _d2453: DeclName<_s621> {}; // CXXMethod DefineOwnProperty
struct _d2454: DeclName<_s232> {}; // ParmVar context
struct _d2455: DeclName<_s619> {}; // ParmVar key
struct _d2456: DeclName<_s162> {}; // ParmVar value
struct _d2457: DeclName<_s622> {}; // ParmVar attributes
struct _d2458: DeclName<_s623> {}; // CXXMethod DefineProperty
struct _d2459: DeclName<_s232> {}; // ParmVar context
struct _d2460: DeclName<_s619> {}; // ParmVar key
struct _d2461: DeclName<_s624> {}; // ParmVar descriptor
struct _d2462: DeclName<_s81> {}; // CXXMethod Get
struct _d2463: DeclName<_s619> {}; // ParmVar key
struct _d2464: DeclName<_s81> {}; // CXXMethod Get
struct _d2465: DeclName<_s232> {}; // ParmVar context
struct _d2466: DeclName<_s619> {}; // ParmVar key
struct _d2467: DeclName<_s81> {}; // CXXMethod Get
struct _d2468: DeclName<_s132> {}; // ParmVar index
struct _d2469: DeclName<_s81> {}; // CXXMethod Get
struct _d2470: DeclName<_s232> {}; // ParmVar context
struct _d2471: DeclName<_s132> {}; // ParmVar index
struct _d2472: DeclName<_s625> {}; // CXXMethod GetPropertyAttributes
struct _d2473: DeclName<_s232> {}; // ParmVar context
struct _d2474: DeclName<_s619> {}; // ParmVar key
struct _d2475: DeclName<_s626> {}; // CXXMethod GetOwnPropertyDescriptor
struct _d2476: DeclName<_s232> {}; // ParmVar context
struct _d2477: DeclName<_s619> {}; // ParmVar key
struct _d2478: DeclName<_s627> {}; // CXXMethod Has
struct _d2479: DeclName<_s232> {}; // ParmVar context
struct _d2480: DeclName<_s619> {}; // ParmVar key
struct _d2481: DeclName<_s628> {}; // CXXMethod Delete
struct _d2482: DeclName<_s232> {}; // ParmVar context
struct _d2483: DeclName<_s619> {}; // ParmVar key
struct _d2484: DeclName<_s627> {}; // CXXMethod Has
struct _d2485: DeclName<_s232> {}; // ParmVar context
struct _d2486: DeclName<_s132> {}; // ParmVar index
struct _d2487: DeclName<_s628> {}; // CXXMethod Delete
struct _d2488: DeclName<_s232> {}; // ParmVar context
struct _d2489: DeclName<_s132> {}; // ParmVar index
struct _d2490: DeclName<_s629> {}; // CXXMethod SetAccessor
struct _d2491: DeclName<_s232> {}; // ParmVar context
struct _d2492: DeclName<_s558> {}; // ParmVar name
struct _d2493: DeclName<_s630> {}; // ParmVar getter
struct _d2494: DeclName<_s631> {}; // ParmVar setter
struct _d2495: DeclName<_s134> {}; // ParmVar data
struct _d2496: DeclName<_s632> {}; // ParmVar settings
struct _d2497: DeclName<_s633> {}; // ParmVar attribute
struct _d2498: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d2499: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d2500: DeclName<_s636> {}; // CXXMethod SetAccessorProperty
struct _d2501: DeclName<_s558> {}; // ParmVar name
struct _d2502: DeclName<_s630> {}; // ParmVar getter
struct _d2503: DeclName<_s631> {}; // ParmVar setter
struct _d2504: DeclName<_s633> {}; // ParmVar attribute
struct _d2505: DeclName<_s632> {}; // ParmVar settings
struct _d2506: DeclName<_s637> {}; // CXXMethod SetNativeDataProperty
struct _d2507: DeclName<_s232> {}; // ParmVar context
struct _d2508: DeclName<_s558> {}; // ParmVar name
struct _d2509: DeclName<_s630> {}; // ParmVar getter
struct _d2510: DeclName<_s631> {}; // ParmVar setter
struct _d2511: DeclName<_s134> {}; // ParmVar data
struct _d2512: DeclName<_s622> {}; // ParmVar attributes
struct _d2513: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d2514: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d2515: DeclName<_s638> {}; // CXXMethod SetLazyDataProperty
struct _d2516: DeclName<_s232> {}; // ParmVar context
struct _d2517: DeclName<_s558> {}; // ParmVar name
struct _d2518: DeclName<_s630> {}; // ParmVar getter
struct _d2519: DeclName<_s134> {}; // ParmVar data
struct _d2520: DeclName<_s622> {}; // ParmVar attributes
struct _d2521: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d2522: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d2523: DeclName<_s639> {}; // CXXMethod HasPrivate
struct _d2524: DeclName<_s232> {}; // ParmVar context
struct _d2525: DeclName<_s619> {}; // ParmVar key
struct _d2526: DeclName<_s640> {}; // CXXMethod SetPrivate
struct _d2527: DeclName<_s232> {}; // ParmVar context
struct _d2528: DeclName<_s619> {}; // ParmVar key
struct _d2529: DeclName<_s162> {}; // ParmVar value
struct _d2530: DeclName<_s641> {}; // CXXMethod DeletePrivate
struct _d2531: DeclName<_s232> {}; // ParmVar context
struct _d2532: DeclName<_s619> {}; // ParmVar key
struct _d2533: DeclName<_s642> {}; // CXXMethod GetPrivate
struct _d2534: DeclName<_s232> {}; // ParmVar context
struct _d2535: DeclName<_s619> {}; // ParmVar key
struct _d2536: DeclName<_s643> {}; // CXXMethod GetPropertyNames
struct _d2537: DeclName<_s232> {}; // ParmVar context
struct _d2538: DeclName<_s643> {}; // CXXMethod GetPropertyNames
struct _d2539: DeclName<_s232> {}; // ParmVar context
struct _d2540: DeclName<_s407> {}; // ParmVar mode
struct _d2541: DeclName<_s644> {}; // ParmVar property_filter
struct _d2542: DeclName<_s645> {}; // ParmVar index_filter
struct _d2543: DeclName<_s646> {}; // ParmVar key_conversion
struct _d2544: DeclName<_s647> {}; // CXXMethod GetOwnPropertyNames
struct _d2545: DeclName<_s232> {}; // ParmVar context
struct _d2546: DeclName<_s647> {}; // CXXMethod GetOwnPropertyNames
struct _d2547: DeclName<_s232> {}; // ParmVar context
struct _d2548: DeclName<_s648> {}; // ParmVar filter
struct _d2549: DeclName<_s646> {}; // ParmVar key_conversion
struct _d2550: DeclName<_s649> {}; // CXXMethod GetPrototype
struct _d2551: DeclName<_s650> {}; // CXXMethod SetPrototype
struct _d2552: DeclName<_s232> {}; // ParmVar context
struct _d2553: DeclName<_s651> {}; // ParmVar prototype
struct _d2554: DeclName<_s652> {}; // CXXMethod FindInstanceInPrototypeChain
struct _d2555: DeclName<_s653> {}; // ParmVar tmpl
struct _d2556: DeclName<_s654> {}; // CXXMethod ObjectProtoToString
struct _d2557: DeclName<_s232> {}; // ParmVar context
struct _d2558: DeclName<_s655> {}; // CXXMethod GetConstructorName
struct _d2559: DeclName<_s656> {}; // CXXMethod SetIntegrityLevel
struct _d2560: DeclName<_s232> {}; // ParmVar context
struct _d2561: DeclName<_s657> {}; // ParmVar level
struct _d2562: DeclName<_s658> {}; // CXXMethod InternalFieldCount
struct _d2563: DeclName<_s658> {}; // CXXMethod InternalFieldCount
struct _d2564: DeclName<_s386> {}; // ParmVar object
struct _d2565: DeclName<_s658> {}; // CXXMethod InternalFieldCount
struct _d2566: DeclName<_s386> {}; // ParmVar object
struct _d2567: DeclName<_s131> {}; // CXXMethod GetInternalField
struct _d2568: DeclName<_s132> {}; // ParmVar index
struct _d2569: DeclName<_s659> {}; // CXXMethod SetInternalField
struct _d2570: DeclName<_s132> {}; // ParmVar index
struct _d2571: DeclName<_s162> {}; // ParmVar value
struct _d2572: DeclName<_s660> {}; // CXXMethod GetAlignedPointerFromInternalField
struct _d2573: DeclName<_s132> {}; // ParmVar index
struct _d2574: DeclName<_s660> {}; // CXXMethod GetAlignedPointerFromInternalField
struct _d2575: DeclName<_s386> {}; // ParmVar object
struct _d2576: DeclName<_s132> {}; // ParmVar index
struct _d2577: DeclName<_s660> {}; // CXXMethod GetAlignedPointerFromInternalField
struct _d2578: DeclName<_s386> {}; // ParmVar object
struct _d2579: DeclName<_s132> {}; // ParmVar index
struct _d2580: DeclName<_s661> {}; // CXXMethod SetAlignedPointerInInternalField
struct _d2581: DeclName<_s132> {}; // ParmVar index
struct _d2582: DeclName<_s162> {}; // ParmVar value
struct _d2583: DeclName<_s662> {}; // CXXMethod SetAlignedPointerInInternalFields
struct _d2584: DeclName<_s663> {}; // ParmVar argc
struct _d2585: DeclName<_s664> {}; // ParmVar indices
struct _d2586: DeclName<_s665> {}; // ParmVar values
struct _d2587: DeclName<_s666> {}; // CXXMethod HasOwnProperty
struct _d2588: DeclName<_s232> {}; // ParmVar context
struct _d2589: DeclName<_s619> {}; // ParmVar key
struct _d2590: DeclName<_s666> {}; // CXXMethod HasOwnProperty
struct _d2591: DeclName<_s232> {}; // ParmVar context
struct _d2592: DeclName<_s132> {}; // ParmVar index
struct _d2593: DeclName<_s667> {}; // CXXMethod HasRealNamedProperty
struct _d2594: DeclName<_s232> {}; // ParmVar context
struct _d2595: DeclName<_s619> {}; // ParmVar key
struct _d2596: DeclName<_s668> {}; // CXXMethod HasRealIndexedProperty
struct _d2597: DeclName<_s232> {}; // ParmVar context
struct _d2598: DeclName<_s132> {}; // ParmVar index
struct _d2599: DeclName<_s669> {}; // CXXMethod HasRealNamedCallbackProperty
struct _d2600: DeclName<_s232> {}; // ParmVar context
struct _d2601: DeclName<_s619> {}; // ParmVar key
struct _d2602: DeclName<_s670> {}; // CXXMethod GetRealNamedPropertyInPrototypeChain
struct _d2603: DeclName<_s232> {}; // ParmVar context
struct _d2604: DeclName<_s619> {}; // ParmVar key
struct _d2605: DeclName<_s671> {}; // CXXMethod GetRealNamedPropertyAttributesInPrototypeChain
struct _d2606: DeclName<_s232> {}; // ParmVar context
struct _d2607: DeclName<_s619> {}; // ParmVar key
struct _d2608: DeclName<_s672> {}; // CXXMethod GetRealNamedProperty
struct _d2609: DeclName<_s232> {}; // ParmVar context
struct _d2610: DeclName<_s619> {}; // ParmVar key
struct _d2611: DeclName<_s673> {}; // CXXMethod GetRealNamedPropertyAttributes
struct _d2612: DeclName<_s232> {}; // ParmVar context
struct _d2613: DeclName<_s619> {}; // ParmVar key
struct _d2614: DeclName<_s674> {}; // CXXMethod HasNamedLookupInterceptor
struct _d2615: DeclName<_s675> {}; // CXXMethod HasIndexedLookupInterceptor
struct _d2616: DeclName<_s229> {}; // CXXMethod GetIdentityHash
struct _d2617: DeclName<_s676> {}; // CXXMethod Clone
struct _d2618: DeclName<_s677> {}; // CXXMethod CreationContext
struct _d2619: DeclName<_s677> {}; // CXXMethod CreationContext
struct _d2620: DeclName<_s386> {}; // ParmVar object
struct _d2621: DeclName<_s678> {}; // CXXMethod IsCallable
struct _d2622: DeclName<_s345> {}; // CXXMethod IsConstructor
struct _d2623: DeclName<_s679> {}; // CXXMethod CallAsFunction
struct _d2624: DeclName<_s232> {}; // ParmVar context
struct _d2625: DeclName<_s680> {}; // ParmVar recv
struct _d2626: DeclName<_s663> {}; // ParmVar argc
struct _d2627: DeclName<_s681> {}; // ParmVar argv
struct _d2628: DeclName<_s682> {}; // CXXMethod CallAsConstructor
struct _d2629: DeclName<_s232> {}; // ParmVar context
struct _d2630: DeclName<_s663> {}; // ParmVar argc
struct _d2631: DeclName<_s681> {}; // ParmVar argv
struct _d2632: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d2633: DeclName<_s683> {}; // CXXMethod PreviewEntries
struct _d2634: DeclName<_s684> {}; // ParmVar is_key_value
struct _d2635: DeclName<_s62> {}; // CXXMethod New
struct _d2636: DeclName<_s63> {}; // ParmVar isolate
struct _d2637: DeclName<_s62> {}; // CXXMethod New
struct _d2638: DeclName<_s63> {}; // ParmVar isolate
struct _d2639: DeclName<_s685> {}; // ParmVar prototype_or_null
struct _d2640: DeclName<_s686> {}; // ParmVar names
struct _d2641: DeclName<_s665> {}; // ParmVar values
struct _d2642: DeclName<_s171> {}; // ParmVar length
struct _d2643: DeclName<_s60> {}; // CXXMethod Cast
struct _d2644: DeclName<_s506> {}; // ParmVar obj
struct _d2645: DeclName<_s6> {}; // CXXRecord Array
struct _d2646: DeclName<_s172> {}; // CXXMethod Length
struct _d2647: DeclName<_s62> {}; // CXXMethod New
struct _d2648: DeclName<_s63> {}; // ParmVar isolate
struct _d2649: DeclName<_s171> {}; // ParmVar length
struct _d2650: DeclName<_s62> {}; // CXXMethod New
struct _d2651: DeclName<_s63> {}; // ParmVar isolate
struct _d2652: DeclName<_s687> {}; // ParmVar elements
struct _d2653: DeclName<_s171> {}; // ParmVar length
struct _d2654: DeclName<_s60> {}; // CXXMethod Cast
struct _d2655: DeclName<_s506> {}; // ParmVar obj
struct _d2656: DeclName<_s688> {}; // CXXRecord Map
struct _d2657: DeclName<_s688> {}; // CXXRecord Map
struct _d2658: DeclName<_s689> {}; // CXXMethod Size
struct _d2659: DeclName<_s55> {}; // CXXMethod Clear
struct _d2660: DeclName<_s81> {}; // CXXMethod Get
struct _d2661: DeclName<_s232> {}; // ParmVar context
struct _d2662: DeclName<_s619> {}; // ParmVar key
struct _d2663: DeclName<_s123> {}; // CXXMethod Set
struct _d2664: DeclName<_s232> {}; // ParmVar context
struct _d2665: DeclName<_s619> {}; // ParmVar key
struct _d2666: DeclName<_s162> {}; // ParmVar value
struct _d2667: DeclName<_s627> {}; // CXXMethod Has
struct _d2668: DeclName<_s232> {}; // ParmVar context
struct _d2669: DeclName<_s619> {}; // ParmVar key
struct _d2670: DeclName<_s628> {}; // CXXMethod Delete
struct _d2671: DeclName<_s232> {}; // ParmVar context
struct _d2672: DeclName<_s619> {}; // ParmVar key
struct _d2673: DeclName<_s690> {}; // CXXMethod AsArray
struct _d2674: DeclName<_s62> {}; // CXXMethod New
struct _d2675: DeclName<_s63> {}; // ParmVar isolate
struct _d2676: DeclName<_s60> {}; // CXXMethod Cast
struct _d2677: DeclName<_s506> {}; // ParmVar obj
struct _d2678: DeclName<_s123> {}; // CXXRecord Set
struct _d2679: DeclName<_s123> {}; // CXXRecord Set
struct _d2680: DeclName<_s689> {}; // CXXMethod Size
struct _d2681: DeclName<_s55> {}; // CXXMethod Clear
struct _d2682: DeclName<_s691> {}; // CXXMethod Add
struct _d2683: DeclName<_s232> {}; // ParmVar context
struct _d2684: DeclName<_s619> {}; // ParmVar key
struct _d2685: DeclName<_s627> {}; // CXXMethod Has
struct _d2686: DeclName<_s232> {}; // ParmVar context
struct _d2687: DeclName<_s619> {}; // ParmVar key
struct _d2688: DeclName<_s628> {}; // CXXMethod Delete
struct _d2689: DeclName<_s232> {}; // ParmVar context
struct _d2690: DeclName<_s619> {}; // ParmVar key
struct _d2691: DeclName<_s690> {}; // CXXMethod AsArray
struct _d2692: DeclName<_s62> {}; // CXXMethod New
struct _d2693: DeclName<_s63> {}; // ParmVar isolate
struct _d2694: DeclName<_s60> {}; // CXXMethod Cast
struct _d2695: DeclName<_s506> {}; // ParmVar obj
struct _d2696: DeclName<_s21> {}; // TemplateTypeParm T
struct _d2697: DeclName<_s115> {}; // CXXRecord ReturnValue
struct _d2698: DeclName<_s692> {}; // FunctionTemplate ReturnValue<T>
struct _d2699: DeclName<_s52> {}; // TemplateTypeParm S
struct _d2700: DeclName<_s692> {}; // CXXConstructor ReturnValue<T>
struct _d2701: DeclName<_s53> {}; // ParmVar that
struct _d2702: DeclName<_s123> {}; // FunctionTemplate Set
struct _d2703: DeclName<_s52> {}; // TemplateTypeParm S
struct _d2704: DeclName<_s123> {}; // CXXMethod Set
struct _d2705: DeclName<_s122> {}; // ParmVar handle
struct _d2706: DeclName<_s123> {}; // FunctionTemplate Set
struct _d2707: DeclName<_s52> {}; // TemplateTypeParm S
struct _d2708: DeclName<_s123> {}; // CXXMethod Set
struct _d2709: DeclName<_s122> {}; // ParmVar handle
struct _d2710: DeclName<_s123> {}; // FunctionTemplate Set
struct _d2711: DeclName<_s52> {}; // TemplateTypeParm S
struct _d2712: DeclName<_s123> {}; // CXXMethod Set
struct _d2713: DeclName<_s122> {}; // ParmVar handle
struct _d2714: DeclName<_s123> {}; // CXXMethod Set
struct _d2715: DeclName<_s162> {}; // ParmVar value
struct _d2716: DeclName<_s123> {}; // CXXMethod Set
struct _d2717: DeclName<_s227> {}; // ParmVar i
struct _d2718: DeclName<_s123> {}; // CXXMethod Set
struct _d2719: DeclName<_s227> {}; // ParmVar i
struct _d2720: DeclName<_s123> {}; // CXXMethod Set
struct _d2721: DeclName<_s227> {}; // ParmVar i
struct _d2722: DeclName<_s693> {}; // CXXMethod SetNull
struct _d2723: DeclName<_s694> {}; // CXXMethod SetUndefined
struct _d2724: DeclName<_s695> {}; // CXXMethod SetEmptyString
struct _d2725: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d2726: DeclName<_s123> {}; // FunctionTemplate Set
struct _d2727: DeclName<_s52> {}; // TemplateTypeParm S
struct _d2728: DeclName<_s123> {}; // CXXMethod Set
struct _d2729: DeclName<_s696> {}; // ParmVar whatever
struct _d2730: DeclName<_s81> {}; // CXXMethod Get
struct _d2731: DeclName<_s21> {}; // TemplateTypeParm T
struct _d2732: DeclName<_s111> {}; // CXXRecord FunctionCallbackInfo
struct _d2733: DeclName<_s172> {}; // CXXMethod Length
struct _d2734: DeclName<_s697> {}; // CXXMethod operator[]
struct _d2735: DeclName<_s227> {}; // ParmVar i
struct _d2736: DeclName<_s698> {}; // CXXMethod This
struct _d2737: DeclName<_s699> {}; // CXXMethod Holder
struct _d2738: DeclName<_s700> {}; // CXXMethod NewTarget
struct _d2739: DeclName<_s701> {}; // CXXMethod IsConstructCall
struct _d2740: DeclName<_s3> {}; // CXXMethod Data
struct _d2741: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d2742: DeclName<_s702> {}; // CXXMethod GetReturnValue
struct _d2743: DeclName<_s703> {}; // Var kArgsLength
struct _d2744: DeclName<_s704> {}; // Var kHolderIndex
struct _d2745: DeclName<_s705> {}; // Var kIsolateIndex
struct _d2746: DeclName<_s706> {}; // Var kReturnValueDefaultValueIndex
struct _d2747: DeclName<_s707> {}; // Var kReturnValueIndex
struct _d2748: DeclName<_s708> {}; // Var kDataIndex
struct _d2749: DeclName<_s709> {}; // Var kNewTargetIndex
struct _d2750: DeclName<_s710> {}; // CXXConstructor FunctionCallbackInfo<T>
struct _d2751: DeclName<_s711> {}; // ParmVar implicit_args
struct _d2752: DeclName<_s665> {}; // ParmVar values
struct _d2753: DeclName<_s171> {}; // ParmVar length
struct _d2754: DeclName<_s712> {}; // Field implicit_args_
struct _d2755: DeclName<_s713> {}; // Field values_
struct _d2756: DeclName<_s714> {}; // Field length_
struct _d2757: DeclName<_s21> {}; // TemplateTypeParm T
struct _d2758: DeclName<_s112> {}; // CXXRecord PropertyCallbackInfo
struct _d2759: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d2760: DeclName<_s3> {}; // CXXMethod Data
struct _d2761: DeclName<_s698> {}; // CXXMethod This
struct _d2762: DeclName<_s699> {}; // CXXMethod Holder
struct _d2763: DeclName<_s702> {}; // CXXMethod GetReturnValue
struct _d2764: DeclName<_s715> {}; // CXXMethod ShouldThrowOnError
struct _d2765: DeclName<_s703> {}; // Var kArgsLength
struct _d2766: DeclName<_s716> {}; // Var kShouldThrowOnErrorIndex
struct _d2767: DeclName<_s704> {}; // Var kHolderIndex
struct _d2768: DeclName<_s705> {}; // Var kIsolateIndex
struct _d2769: DeclName<_s706> {}; // Var kReturnValueDefaultValueIndex
struct _d2770: DeclName<_s707> {}; // Var kReturnValueIndex
struct _d2771: DeclName<_s708> {}; // Var kDataIndex
struct _d2772: DeclName<_s717> {}; // Var kThisIndex
struct _d2773: DeclName<_s718> {}; // CXXConstructor PropertyCallbackInfo<T>
struct _d2774: DeclName<_s719> {}; // ParmVar args
struct _d2775: DeclName<_s720> {}; // Field args_
struct _d2776: DeclName<_s721> {}; // Typedef FunctionCallback
struct _d2777: DeclName<_s722> {}; // Enum ConstructorBehavior
struct _d2778: DeclName<_s723> {}; // EnumConstant kThrow
struct _d2779: DeclName<_s724> {}; // EnumConstant kAllow
struct _d2780: DeclName<_s14> {}; // CXXRecord Function
struct _d2781: DeclName<_s62> {}; // CXXMethod New
struct _d2782: DeclName<_s232> {}; // ParmVar context
struct _d2783: DeclName<_s86> {}; // ParmVar callback
struct _d2784: DeclName<_s134> {}; // ParmVar data
struct _d2785: DeclName<_s171> {}; // ParmVar length
struct _d2786: DeclName<_s725> {}; // ParmVar behavior
struct _d2787: DeclName<_s726> {}; // ParmVar side_effect_type
struct _d2788: DeclName<_s727> {}; // CXXMethod NewInstance
struct _d2789: DeclName<_s232> {}; // ParmVar context
struct _d2790: DeclName<_s663> {}; // ParmVar argc
struct _d2791: DeclName<_s681> {}; // ParmVar argv
struct _d2792: DeclName<_s727> {}; // CXXMethod NewInstance
struct _d2793: DeclName<_s232> {}; // ParmVar context
struct _d2794: DeclName<_s728> {}; // CXXMethod NewInstanceWithSideEffectType
struct _d2795: DeclName<_s232> {}; // ParmVar context
struct _d2796: DeclName<_s663> {}; // ParmVar argc
struct _d2797: DeclName<_s681> {}; // ParmVar argv
struct _d2798: DeclName<_s726> {}; // ParmVar side_effect_type
struct _d2799: DeclName<_s729> {}; // CXXMethod Call
struct _d2800: DeclName<_s232> {}; // ParmVar context
struct _d2801: DeclName<_s680> {}; // ParmVar recv
struct _d2802: DeclName<_s663> {}; // ParmVar argc
struct _d2803: DeclName<_s681> {}; // ParmVar argv
struct _d2804: DeclName<_s730> {}; // CXXMethod SetName
struct _d2805: DeclName<_s558> {}; // ParmVar name
struct _d2806: DeclName<_s731> {}; // CXXMethod GetName
struct _d2807: DeclName<_s732> {}; // CXXMethod GetInferredName
struct _d2808: DeclName<_s733> {}; // CXXMethod GetDebugName
struct _d2809: DeclName<_s734> {}; // CXXMethod GetDisplayName
struct _d2810: DeclName<_s735> {}; // CXXMethod GetScriptLineNumber
struct _d2811: DeclName<_s736> {}; // CXXMethod GetScriptColumnNumber
struct _d2812: DeclName<_s737> {}; // CXXMethod ScriptId
struct _d2813: DeclName<_s738> {}; // CXXMethod GetBoundFunction
struct _d2814: DeclName<_s311> {}; // CXXMethod GetScriptOrigin
struct _d2815: DeclName<_s60> {}; // CXXMethod Cast
struct _d2816: DeclName<_s506> {}; // ParmVar obj
struct _d2817: DeclName<_s739> {}; // Var kLineOffsetNotFound
struct _d2818: DeclName<_s31> {}; // CXXRecord Promise
struct _d2819: DeclName<_s740> {}; // Enum PromiseState
struct _d2820: DeclName<_s741> {}; // EnumConstant kPending
struct _d2821: DeclName<_s742> {}; // EnumConstant kFulfilled
struct _d2822: DeclName<_s743> {}; // EnumConstant kRejected
struct _d2823: DeclName<_s744> {}; // CXXRecord Resolver
struct _d2824: DeclName<_s744> {}; // CXXRecord Resolver
struct _d2825: DeclName<_s62> {}; // CXXMethod New
struct _d2826: DeclName<_s232> {}; // ParmVar context
struct _d2827: DeclName<_s745> {}; // CXXMethod GetPromise
struct _d2828: DeclName<_s746> {}; // CXXMethod Resolve
struct _d2829: DeclName<_s232> {}; // ParmVar context
struct _d2830: DeclName<_s162> {}; // ParmVar value
struct _d2831: DeclName<_s747> {}; // CXXMethod Reject
struct _d2832: DeclName<_s232> {}; // ParmVar context
struct _d2833: DeclName<_s162> {}; // ParmVar value
struct _d2834: DeclName<_s60> {}; // CXXMethod Cast
struct _d2835: DeclName<_s506> {}; // ParmVar obj
struct _d2836: DeclName<_s748> {}; // CXXMethod Catch
struct _d2837: DeclName<_s232> {}; // ParmVar context
struct _d2838: DeclName<_s749> {}; // ParmVar handler
struct _d2839: DeclName<_s750> {}; // CXXMethod Then
struct _d2840: DeclName<_s232> {}; // ParmVar context
struct _d2841: DeclName<_s749> {}; // ParmVar handler
struct _d2842: DeclName<_s750> {}; // CXXMethod Then
struct _d2843: DeclName<_s232> {}; // ParmVar context
struct _d2844: DeclName<_s751> {}; // ParmVar on_fulfilled
struct _d2845: DeclName<_s752> {}; // ParmVar on_rejected
struct _d2846: DeclName<_s753> {}; // CXXMethod HasHandler
struct _d2847: DeclName<_s754> {}; // CXXMethod Result
struct _d2848: DeclName<_s755> {}; // CXXMethod State
struct _d2849: DeclName<_s756> {}; // CXXMethod MarkAsHandled
struct _d2850: DeclName<_s60> {}; // CXXMethod Cast
struct _d2851: DeclName<_s506> {}; // ParmVar obj
struct _d2852: DeclName<_s757> {}; // Var kEmbedderFieldCount
struct _d2853: DeclName<_s32> {}; // CXXRecord PropertyDescriptor
struct _d2854: DeclName<_s32> {}; // CXXConstructor PropertyDescriptor
struct _d2855: DeclName<_s32> {}; // CXXConstructor PropertyDescriptor
struct _d2856: DeclName<_s162> {}; // ParmVar value
struct _d2857: DeclName<_s32> {}; // CXXConstructor PropertyDescriptor
struct _d2858: DeclName<_s162> {}; // ParmVar value
struct _d2859: DeclName<_s758> {}; // ParmVar writable
struct _d2860: DeclName<_s32> {}; // CXXConstructor PropertyDescriptor
struct _d2861: DeclName<_s759> {}; // ParmVar get
struct _d2862: DeclName<_s760> {}; // ParmVar set
struct _d2863: DeclName<_s761> {}; // CXXDestructor ~PropertyDescriptor
struct _d2864: DeclName<_s162> {}; // CXXMethod value
struct _d2865: DeclName<_s762> {}; // CXXMethod has_value
struct _d2866: DeclName<_s759> {}; // CXXMethod get
struct _d2867: DeclName<_s763> {}; // CXXMethod has_get
struct _d2868: DeclName<_s760> {}; // CXXMethod set
struct _d2869: DeclName<_s764> {}; // CXXMethod has_set
struct _d2870: DeclName<_s765> {}; // CXXMethod set_enumerable
struct _d2871: DeclName<_s766> {}; // ParmVar enumerable
struct _d2872: DeclName<_s766> {}; // CXXMethod enumerable
struct _d2873: DeclName<_s767> {}; // CXXMethod has_enumerable
struct _d2874: DeclName<_s768> {}; // CXXMethod set_configurable
struct _d2875: DeclName<_s769> {}; // ParmVar configurable
struct _d2876: DeclName<_s769> {}; // CXXMethod configurable
struct _d2877: DeclName<_s770> {}; // CXXMethod has_configurable
struct _d2878: DeclName<_s758> {}; // CXXMethod writable
struct _d2879: DeclName<_s771> {}; // CXXMethod has_writable
struct _d2880: DeclName<_s772> {}; // CXXRecord PrivateData
struct _d2881: DeclName<_s773> {}; // CXXMethod get_private
struct _d2882: DeclName<_s32> {}; // CXXConstructor PropertyDescriptor
struct _d2884: DeclName<_s67> {}; // CXXMethod operator=
struct _d2886: DeclName<_s33> {}; // CXXRecord Proxy
struct _d2887: DeclName<_s774> {}; // CXXMethod GetTarget
struct _d2888: DeclName<_s775> {}; // CXXMethod GetHandler
struct _d2889: DeclName<_s776> {}; // CXXMethod IsRevoked
struct _d2890: DeclName<_s777> {}; // CXXMethod Revoke
struct _d2891: DeclName<_s62> {}; // CXXMethod New
struct _d2892: DeclName<_s232> {}; // ParmVar context
struct _d2893: DeclName<_s778> {}; // ParmVar local_target
struct _d2894: DeclName<_s779> {}; // ParmVar local_handler
struct _d2895: DeclName<_s60> {}; // CXXMethod Cast
struct _d2896: DeclName<_s506> {}; // ParmVar obj
struct _d2897: DeclName<_s780> {}; // ClassTemplate MemorySpan
struct _d2898: DeclName<_s21> {}; // TemplateTypeParm T
struct _d2899: DeclName<_s780> {}; // CXXRecord MemorySpan
struct _d2900: DeclName<_s780> {}; // CXXRecord MemorySpan
struct _d2901: DeclName<_s781> {}; // CXXConstructor MemorySpan<T>
struct _d2902: DeclName<_s781> {}; // CXXConstructor MemorySpan<T>
struct _d2903: DeclName<_s134> {}; // ParmVar data
struct _d2904: DeclName<_s393> {}; // ParmVar size
struct _d2905: DeclName<_s134> {}; // CXXMethod data
struct _d2906: DeclName<_s393> {}; // CXXMethod size
struct _d2907: DeclName<_s780> {}; // ClassTemplateSpecialization MemorySpan
struct _d2908: DeclName<_s780> {}; // CXXConstructor MemorySpan
struct _d2909: DeclName<_s780> {}; // CXXConstructor MemorySpan
struct _d2910: DeclName<_s134> {}; // ParmVar data
struct _d2911: DeclName<_s393> {}; // ParmVar size
struct _d2912: DeclName<_s134> {}; // CXXMethod data
struct _d2913: DeclName<_s393> {}; // CXXMethod size
struct _d2914: DeclName<_s780> {}; // CXXConstructor MemorySpan
struct _d2916: DeclName<_s780> {}; // CXXConstructor MemorySpan
struct _d2918: DeclName<_s782> {}; // CXXRecord OwnedBuffer
struct _d2919: DeclName<_s782> {}; // CXXRecord OwnedBuffer
struct _d2920: DeclName<_s396> {}; // Field buffer
struct _d2921: DeclName<_s267> {}; // ClassTemplateSpecialization unique_ptr
struct _d2922: DeclName<_s393> {}; // Field size
struct _d2923: DeclName<_s782> {}; // CXXConstructor OwnedBuffer
struct _d2924: DeclName<_s396> {}; // ParmVar buffer
struct _d2925: DeclName<_s393> {}; // ParmVar size
struct _d2926: DeclName<_s782> {}; // CXXConstructor OwnedBuffer
struct _d2927: DeclName<_s782> {}; // CXXConstructor OwnedBuffer
struct _d2929: DeclName<_s782> {}; // CXXConstructor OwnedBuffer
struct _d2931: DeclName<_s67> {}; // CXXMethod operator=
struct _d2933: DeclName<_s783> {}; // CXXDestructor ~OwnedBuffer
struct _d2934: DeclName<_s67> {}; // CXXMethod operator=
struct _d2936: DeclName<_s784> {}; // CXXRecord CompiledWasmModule
struct _d2937: DeclName<_s784> {}; // CXXRecord CompiledWasmModule
struct _d2938: DeclName<_s785> {}; // CXXMethod Serialize
struct _d2939: DeclName<_s786> {}; // CXXMethod GetWireBytesRef
struct _d2940: DeclName<_s784> {}; // CXXConstructor CompiledWasmModule
struct _d2942: DeclName<_s784> {}; // CXXConstructor CompiledWasmModule
struct _d2944: DeclName<_s67> {}; // CXXMethod operator=
struct _d2946: DeclName<_s787> {}; // CXXDestructor ~CompiledWasmModule
struct _d2947: DeclName<_s50> {}; // CXXRecord WasmModuleObject
struct _d2948: DeclName<_s788> {}; // CXXRecord TransferrableModule
struct _d2949: DeclName<_s788> {}; // CXXRecord TransferrableModule
struct _d2950: DeclName<_s788> {}; // CXXConstructor TransferrableModule
struct _d2951: DeclName<_s257> {}; // ParmVar src
struct _d2952: DeclName<_s788> {}; // CXXConstructor TransferrableModule
struct _d2953: DeclName<_s257> {}; // ParmVar src
struct _d2954: DeclName<_s67> {}; // CXXMethod operator=
struct _d2955: DeclName<_s257> {}; // ParmVar src
struct _d2956: DeclName<_s67> {}; // CXXMethod operator=
struct _d2957: DeclName<_s257> {}; // ParmVar src
struct _d2958: DeclName<_s789> {}; // CXXDestructor ~TransferrableModule
struct _d2959: DeclName<_s790> {}; // CXXMethod GetTransferrableModule
struct _d2960: DeclName<_s791> {}; // CXXMethod FromTransferrableModule
struct _d2961: DeclName<_s63> {}; // ParmVar isolate
struct _d2963: DeclName<_s792> {}; // CXXMethod GetCompiledModule
struct _d2964: DeclName<_s793> {}; // CXXMethod DeserializeOrCompile
struct _d2965: DeclName<_s63> {}; // ParmVar isolate
struct _d2966: DeclName<_s794> {}; // ParmVar serialized_module
struct _d2967: DeclName<_s795> {}; // ParmVar wire_bytes
struct _d2968: DeclName<_s60> {}; // CXXMethod Cast
struct _d2969: DeclName<_s506> {}; // ParmVar obj
struct _d2970: DeclName<_s796> {}; // CXXRecord WasmStreaming
struct _d2971: DeclName<_s796> {}; // CXXRecord WasmStreaming
struct _d2972: DeclName<_s797> {}; // CXXRecord WasmStreamingImpl
struct _d2973: DeclName<_s798> {}; // CXXRecord Client
struct _d2974: DeclName<_s798> {}; // CXXRecord Client
struct _d2975: DeclName<_s799> {}; // CXXDestructor ~Client
struct _d2976: DeclName<_s800> {}; // CXXMethod OnModuleCompiled
struct _d2977: DeclName<_s801> {}; // ParmVar compiled_module
struct _d2978: DeclName<_s67> {}; // CXXMethod operator=
struct _d2980: DeclName<_s796> {}; // CXXConstructor WasmStreaming
struct _d2981: DeclName<_s267> {}; // ClassTemplateSpecialization unique_ptr
struct _d2982: DeclName<_s269> {}; // ParmVar impl
struct _d2983: DeclName<_s802> {}; // CXXDestructor ~WasmStreaming
struct _d2984: DeclName<_s803> {}; // CXXMethod OnBytesReceived
struct _d2985: DeclName<_s804> {}; // ParmVar bytes
struct _d2986: DeclName<_s393> {}; // ParmVar size
struct _d2987: DeclName<_s805> {}; // CXXMethod Finish
struct _d2988: DeclName<_s806> {}; // CXXMethod Abort
struct _d2989: DeclName<_s807> {}; // ParmVar exception
struct _d2990: DeclName<_s808> {}; // CXXMethod SetCompiledModuleBytes
struct _d2991: DeclName<_s804> {}; // ParmVar bytes
struct _d2992: DeclName<_s393> {}; // ParmVar size
struct _d2993: DeclName<_s809> {}; // CXXMethod SetClient
struct _d2994: DeclName<_s810> {}; // ClassTemplateSpecialization shared_ptr
struct _d2995: DeclName<_s811> {}; // ParmVar client
struct _d2996: DeclName<_s812> {}; // CXXMethod Unpack
struct _d2997: DeclName<_s810> {}; // ClassTemplateSpecialization shared_ptr
struct _d2998: DeclName<_s63> {}; // ParmVar isolate
struct _d2999: DeclName<_s162> {}; // ParmVar value
struct _d3000: DeclName<_s796> {}; // CXXConstructor WasmStreaming
struct _d3002: DeclName<_s813> {}; // CXXRecord WasmModuleObjectBuilderStreaming
struct _d3003: DeclName<_s813> {}; // CXXRecord WasmModuleObjectBuilderStreaming
struct _d3004: DeclName<_s813> {}; // CXXConstructor WasmModuleObjectBuilderStreaming
struct _d3005: DeclName<_s63> {}; // ParmVar isolate
struct _d3006: DeclName<_s803> {}; // CXXMethod OnBytesReceived
struct _d3008: DeclName<_s393> {}; // ParmVar size
struct _d3009: DeclName<_s805> {}; // CXXMethod Finish
struct _d3010: DeclName<_s806> {}; // CXXMethod Abort
struct _d3011: DeclName<_s807> {}; // ParmVar exception
struct _d3012: DeclName<_s745> {}; // CXXMethod GetPromise
struct _d3013: DeclName<_s814> {}; // CXXDestructor ~WasmModuleObjectBuilderStreaming
struct _d3014: DeclName<_s815> {}; // Enum ArrayBufferCreationMode
struct _d3015: DeclName<_s509> {}; // EnumConstant kInternalized
struct _d3016: DeclName<_s816> {}; // EnumConstant kExternalized
struct _d3017: DeclName<_s7> {}; // CXXRecord ArrayBuffer
struct _d3018: DeclName<_s817> {}; // CXXRecord Allocator
struct _d3019: DeclName<_s817> {}; // CXXRecord Allocator
struct _d3020: DeclName<_s818> {}; // CXXDestructor ~Allocator
struct _d3021: DeclName<_s819> {}; // CXXMethod Allocate
struct _d3022: DeclName<_s171> {}; // ParmVar length
struct _d3023: DeclName<_s820> {}; // CXXMethod AllocateUninitialized
struct _d3024: DeclName<_s171> {}; // ParmVar length
struct _d3025: DeclName<_s821> {}; // CXXMethod Free
struct _d3026: DeclName<_s134> {}; // ParmVar data
struct _d3027: DeclName<_s171> {}; // ParmVar length
struct _d3028: DeclName<_s822> {}; // Enum AllocationMode
struct _d3029: DeclName<_s508> {}; // EnumConstant kNormal
struct _d3030: DeclName<_s823> {}; // EnumConstant kReservation
struct _d3031: DeclName<_s824> {}; // CXXMethod NewDefaultAllocator
struct _d3032: DeclName<_s67> {}; // CXXMethod operator=
struct _d3034: DeclName<_s825> {}; // CXXRecord Contents
struct _d3035: DeclName<_s825> {}; // CXXRecord Contents
struct _d3036: DeclName<_s826> {}; // TypeAlias DeleterCallback
struct _d3037: DeclName<_s825> {}; // CXXConstructor Contents
struct _d3038: DeclName<_s827> {}; // CXXMethod AllocationBase
struct _d3039: DeclName<_s828> {}; // CXXMethod AllocationLength
struct _d3040: DeclName<_s822> {}; // CXXMethod AllocationMode
struct _d3041: DeclName<_s3> {}; // CXXMethod Data
struct _d3042: DeclName<_s829> {}; // CXXMethod ByteLength
struct _d3043: DeclName<_s830> {}; // CXXMethod Deleter
struct _d3044: DeclName<_s831> {}; // CXXMethod DeleterData
struct _d3045: DeclName<_s829> {}; // CXXMethod ByteLength
struct _d3046: DeclName<_s62> {}; // CXXMethod New
struct _d3047: DeclName<_s63> {}; // ParmVar isolate
struct _d3048: DeclName<_s832> {}; // ParmVar byte_length
struct _d3049: DeclName<_s62> {}; // CXXMethod New
struct _d3050: DeclName<_s63> {}; // ParmVar isolate
struct _d3051: DeclName<_s134> {}; // ParmVar data
struct _d3052: DeclName<_s832> {}; // ParmVar byte_length
struct _d3053: DeclName<_s407> {}; // ParmVar mode
struct _d3054: DeclName<_s445> {}; // CXXMethod IsExternal
struct _d3055: DeclName<_s833> {}; // CXXMethod IsDetachable
struct _d3056: DeclName<_s834> {}; // CXXMethod IsNeuterable
struct _d3057: DeclName<_s835> {}; // CXXMethod Detach
struct _d3058: DeclName<_s836> {}; // CXXMethod Neuter
struct _d3059: DeclName<_s837> {}; // CXXMethod Externalize
struct _d3060: DeclName<_s838> {}; // CXXMethod GetContents
struct _d3061: DeclName<_s60> {}; // CXXMethod Cast
struct _d3062: DeclName<_s506> {}; // ParmVar obj
struct _d3063: DeclName<_s839> {}; // Var kInternalFieldCount
struct _d3064: DeclName<_s757> {}; // Var kEmbedderFieldCount
struct _d3065: DeclName<_s840> {}; // CXXRecord ArrayBufferView
struct _d3066: DeclName<_s840> {}; // CXXRecord ArrayBufferView
struct _d3067: DeclName<_s841> {}; // CXXMethod Buffer
struct _d3068: DeclName<_s842> {}; // CXXMethod ByteOffset
struct _d3069: DeclName<_s829> {}; // CXXMethod ByteLength
struct _d3070: DeclName<_s843> {}; // CXXMethod CopyContents
struct _d3071: DeclName<_s143> {}; // ParmVar dest
struct _d3072: DeclName<_s832> {}; // ParmVar byte_length
struct _d3073: DeclName<_s844> {}; // CXXMethod HasBuffer
struct _d3074: DeclName<_s60> {}; // CXXMethod Cast
struct _d3075: DeclName<_s506> {}; // ParmVar obj
struct _d3076: DeclName<_s839> {}; // Var kInternalFieldCount
struct _d3077: DeclName<_s757> {}; // Var kEmbedderFieldCount
struct _d3078: DeclName<_s845> {}; // CXXRecord TypedArray
struct _d3079: DeclName<_s845> {}; // CXXRecord TypedArray
struct _d3080: DeclName<_s510> {}; // Var kMaxLength
struct _d3081: DeclName<_s172> {}; // CXXMethod Length
struct _d3082: DeclName<_s60> {}; // CXXMethod Cast
struct _d3083: DeclName<_s506> {}; // ParmVar obj
struct _d3084: DeclName<_s846> {}; // CXXRecord Uint8Array
struct _d3085: DeclName<_s846> {}; // CXXRecord Uint8Array
struct _d3086: DeclName<_s62> {}; // CXXMethod New
struct _d3087: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3088: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3089: DeclName<_s171> {}; // ParmVar length
struct _d3090: DeclName<_s62> {}; // CXXMethod New
struct _d3091: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3092: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3093: DeclName<_s171> {}; // ParmVar length
struct _d3094: DeclName<_s60> {}; // CXXMethod Cast
struct _d3095: DeclName<_s506> {}; // ParmVar obj
struct _d3096: DeclName<_s848> {}; // CXXRecord Uint8ClampedArray
struct _d3097: DeclName<_s848> {}; // CXXRecord Uint8ClampedArray
struct _d3098: DeclName<_s62> {}; // CXXMethod New
struct _d3099: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3100: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3101: DeclName<_s171> {}; // ParmVar length
struct _d3102: DeclName<_s62> {}; // CXXMethod New
struct _d3103: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3104: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3105: DeclName<_s171> {}; // ParmVar length
struct _d3106: DeclName<_s60> {}; // CXXMethod Cast
struct _d3107: DeclName<_s506> {}; // ParmVar obj
struct _d3108: DeclName<_s849> {}; // CXXRecord Int8Array
struct _d3109: DeclName<_s849> {}; // CXXRecord Int8Array
struct _d3110: DeclName<_s62> {}; // CXXMethod New
struct _d3111: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3112: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3113: DeclName<_s171> {}; // ParmVar length
struct _d3114: DeclName<_s62> {}; // CXXMethod New
struct _d3115: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3116: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3117: DeclName<_s171> {}; // ParmVar length
struct _d3118: DeclName<_s60> {}; // CXXMethod Cast
struct _d3119: DeclName<_s506> {}; // ParmVar obj
struct _d3120: DeclName<_s850> {}; // CXXRecord Uint16Array
struct _d3121: DeclName<_s850> {}; // CXXRecord Uint16Array
struct _d3122: DeclName<_s62> {}; // CXXMethod New
struct _d3123: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3124: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3125: DeclName<_s171> {}; // ParmVar length
struct _d3126: DeclName<_s62> {}; // CXXMethod New
struct _d3127: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3128: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3129: DeclName<_s171> {}; // ParmVar length
struct _d3130: DeclName<_s60> {}; // CXXMethod Cast
struct _d3131: DeclName<_s506> {}; // ParmVar obj
struct _d3132: DeclName<_s851> {}; // CXXRecord Int16Array
struct _d3133: DeclName<_s851> {}; // CXXRecord Int16Array
struct _d3134: DeclName<_s62> {}; // CXXMethod New
struct _d3135: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3136: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3137: DeclName<_s171> {}; // ParmVar length
struct _d3138: DeclName<_s62> {}; // CXXMethod New
struct _d3139: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3140: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3141: DeclName<_s171> {}; // ParmVar length
struct _d3142: DeclName<_s60> {}; // CXXMethod Cast
struct _d3143: DeclName<_s506> {}; // ParmVar obj
struct _d3144: DeclName<_s852> {}; // CXXRecord Uint32Array
struct _d3145: DeclName<_s852> {}; // CXXRecord Uint32Array
struct _d3146: DeclName<_s62> {}; // CXXMethod New
struct _d3147: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3148: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3149: DeclName<_s171> {}; // ParmVar length
struct _d3150: DeclName<_s62> {}; // CXXMethod New
struct _d3151: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3152: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3153: DeclName<_s171> {}; // ParmVar length
struct _d3154: DeclName<_s60> {}; // CXXMethod Cast
struct _d3155: DeclName<_s506> {}; // ParmVar obj
struct _d3156: DeclName<_s853> {}; // CXXRecord Int32Array
struct _d3157: DeclName<_s853> {}; // CXXRecord Int32Array
struct _d3158: DeclName<_s62> {}; // CXXMethod New
struct _d3159: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3160: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3161: DeclName<_s171> {}; // ParmVar length
struct _d3162: DeclName<_s62> {}; // CXXMethod New
struct _d3163: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3164: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3165: DeclName<_s171> {}; // ParmVar length
struct _d3166: DeclName<_s60> {}; // CXXMethod Cast
struct _d3167: DeclName<_s506> {}; // ParmVar obj
struct _d3168: DeclName<_s854> {}; // CXXRecord Float32Array
struct _d3169: DeclName<_s854> {}; // CXXRecord Float32Array
struct _d3170: DeclName<_s62> {}; // CXXMethod New
struct _d3171: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3172: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3173: DeclName<_s171> {}; // ParmVar length
struct _d3174: DeclName<_s62> {}; // CXXMethod New
struct _d3175: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3176: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3177: DeclName<_s171> {}; // ParmVar length
struct _d3178: DeclName<_s60> {}; // CXXMethod Cast
struct _d3179: DeclName<_s506> {}; // ParmVar obj
struct _d3180: DeclName<_s855> {}; // CXXRecord Float64Array
struct _d3181: DeclName<_s855> {}; // CXXRecord Float64Array
struct _d3182: DeclName<_s62> {}; // CXXMethod New
struct _d3183: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3184: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3185: DeclName<_s171> {}; // ParmVar length
struct _d3186: DeclName<_s62> {}; // CXXMethod New
struct _d3187: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3188: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3189: DeclName<_s171> {}; // ParmVar length
struct _d3190: DeclName<_s60> {}; // CXXMethod Cast
struct _d3191: DeclName<_s506> {}; // ParmVar obj
struct _d3192: DeclName<_s856> {}; // CXXRecord BigInt64Array
struct _d3193: DeclName<_s856> {}; // CXXRecord BigInt64Array
struct _d3194: DeclName<_s62> {}; // CXXMethod New
struct _d3195: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3196: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3197: DeclName<_s171> {}; // ParmVar length
struct _d3198: DeclName<_s62> {}; // CXXMethod New
struct _d3199: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3200: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3201: DeclName<_s171> {}; // ParmVar length
struct _d3202: DeclName<_s60> {}; // CXXMethod Cast
struct _d3203: DeclName<_s506> {}; // ParmVar obj
struct _d3204: DeclName<_s857> {}; // CXXRecord BigUint64Array
struct _d3205: DeclName<_s857> {}; // CXXRecord BigUint64Array
struct _d3206: DeclName<_s62> {}; // CXXMethod New
struct _d3207: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3208: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3209: DeclName<_s171> {}; // ParmVar length
struct _d3210: DeclName<_s62> {}; // CXXMethod New
struct _d3211: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3212: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3213: DeclName<_s171> {}; // ParmVar length
struct _d3214: DeclName<_s60> {}; // CXXMethod Cast
struct _d3215: DeclName<_s506> {}; // ParmVar obj
struct _d3216: DeclName<_s858> {}; // CXXRecord DataView
struct _d3217: DeclName<_s858> {}; // CXXRecord DataView
struct _d3218: DeclName<_s62> {}; // CXXMethod New
struct _d3219: DeclName<_s405> {}; // ParmVar array_buffer
struct _d3220: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3221: DeclName<_s171> {}; // ParmVar length
struct _d3222: DeclName<_s62> {}; // CXXMethod New
struct _d3223: DeclName<_s388> {}; // ParmVar shared_array_buffer
struct _d3224: DeclName<_s847> {}; // ParmVar byte_offset
struct _d3225: DeclName<_s171> {}; // ParmVar length
struct _d3226: DeclName<_s60> {}; // CXXMethod Cast
struct _d3227: DeclName<_s506> {}; // ParmVar obj
struct _d3228: DeclName<_s36> {}; // CXXRecord SharedArrayBuffer
struct _d3229: DeclName<_s825> {}; // CXXRecord Contents
struct _d3230: DeclName<_s825> {}; // CXXRecord Contents
struct _d3231: DeclName<_s817> {}; // TypeAlias Allocator
struct _d3232: DeclName<_s826> {}; // TypeAlias DeleterCallback
struct _d3233: DeclName<_s825> {}; // CXXConstructor Contents
struct _d3234: DeclName<_s827> {}; // CXXMethod AllocationBase
struct _d3235: DeclName<_s828> {}; // CXXMethod AllocationLength
struct _d3236: DeclName<_s822> {}; // CXXMethod AllocationMode
struct _d3237: DeclName<_s3> {}; // CXXMethod Data
struct _d3238: DeclName<_s829> {}; // CXXMethod ByteLength
struct _d3239: DeclName<_s830> {}; // CXXMethod Deleter
struct _d3240: DeclName<_s831> {}; // CXXMethod DeleterData
struct _d3241: DeclName<_s829> {}; // CXXMethod ByteLength
struct _d3242: DeclName<_s62> {}; // CXXMethod New
struct _d3243: DeclName<_s63> {}; // ParmVar isolate
struct _d3244: DeclName<_s832> {}; // ParmVar byte_length
struct _d3245: DeclName<_s62> {}; // CXXMethod New
struct _d3246: DeclName<_s63> {}; // ParmVar isolate
struct _d3247: DeclName<_s134> {}; // ParmVar data
struct _d3248: DeclName<_s832> {}; // ParmVar byte_length
struct _d3249: DeclName<_s407> {}; // ParmVar mode
struct _d3250: DeclName<_s62> {}; // CXXMethod New
struct _d3251: DeclName<_s63> {}; // ParmVar isolate
struct _d3253: DeclName<_s407> {}; // ParmVar mode
struct _d3254: DeclName<_s445> {}; // CXXMethod IsExternal
struct _d3255: DeclName<_s837> {}; // CXXMethod Externalize
struct _d3256: DeclName<_s838> {}; // CXXMethod GetContents
struct _d3257: DeclName<_s60> {}; // CXXMethod Cast
struct _d3258: DeclName<_s506> {}; // ParmVar obj
struct _d3259: DeclName<_s839> {}; // Var kInternalFieldCount
struct _d3260: DeclName<_s12> {}; // CXXRecord Date
struct _d3261: DeclName<_s62> {}; // CXXMethod New
struct _d3262: DeclName<_s232> {}; // ParmVar context
struct _d3263: DeclName<_s859> {}; // ParmVar time
struct _d3264: DeclName<_s860> {}; // CXXMethod ValueOf
struct _d3265: DeclName<_s60> {}; // CXXMethod Cast
struct _d3266: DeclName<_s506> {}; // ParmVar obj
struct _d3267: DeclName<_s25> {}; // CXXRecord NumberObject
struct _d3268: DeclName<_s62> {}; // CXXMethod New
struct _d3269: DeclName<_s63> {}; // ParmVar isolate
struct _d3270: DeclName<_s162> {}; // ParmVar value
struct _d3271: DeclName<_s860> {}; // CXXMethod ValueOf
struct _d3272: DeclName<_s60> {}; // CXXMethod Cast
struct _d3273: DeclName<_s506> {}; // ParmVar obj
struct _d3274: DeclName<_s9> {}; // CXXRecord BigIntObject
struct _d3275: DeclName<_s62> {}; // CXXMethod New
struct _d3276: DeclName<_s63> {}; // ParmVar isolate
struct _d3277: DeclName<_s162> {}; // ParmVar value
struct _d3278: DeclName<_s860> {}; // CXXMethod ValueOf
struct _d3279: DeclName<_s60> {}; // CXXMethod Cast
struct _d3280: DeclName<_s506> {}; // ParmVar obj
struct _d3281: DeclName<_s11> {}; // CXXRecord BooleanObject
struct _d3282: DeclName<_s62> {}; // CXXMethod New
struct _d3283: DeclName<_s63> {}; // ParmVar isolate
struct _d3284: DeclName<_s162> {}; // ParmVar value
struct _d3285: DeclName<_s860> {}; // CXXMethod ValueOf
struct _d3286: DeclName<_s60> {}; // CXXMethod Cast
struct _d3287: DeclName<_s506> {}; // ParmVar obj
struct _d3288: DeclName<_s42> {}; // CXXRecord StringObject
struct _d3289: DeclName<_s62> {}; // CXXMethod New
struct _d3290: DeclName<_s63> {}; // ParmVar isolate
struct _d3291: DeclName<_s162> {}; // ParmVar value
struct _d3292: DeclName<_s860> {}; // CXXMethod ValueOf
struct _d3293: DeclName<_s60> {}; // CXXMethod Cast
struct _d3294: DeclName<_s506> {}; // ParmVar obj
struct _d3295: DeclName<_s44> {}; // CXXRecord SymbolObject
struct _d3296: DeclName<_s62> {}; // CXXMethod New
struct _d3297: DeclName<_s63> {}; // ParmVar isolate
struct _d3298: DeclName<_s162> {}; // ParmVar value
struct _d3299: DeclName<_s860> {}; // CXXMethod ValueOf
struct _d3300: DeclName<_s60> {}; // CXXMethod Cast
struct _d3301: DeclName<_s506> {}; // ParmVar obj
struct _d3302: DeclName<_s861> {}; // CXXRecord RegExp
struct _d3303: DeclName<_s861> {}; // CXXRecord RegExp
struct _d3304: DeclName<_s184> {}; // Enum Flags
struct _d3305: DeclName<_s862> {}; // EnumConstant kNone
struct _d3306: DeclName<_s863> {}; // EnumConstant kGlobal
struct _d3307: DeclName<_s864> {}; // EnumConstant kIgnoreCase
struct _d3308: DeclName<_s865> {}; // EnumConstant kMultiline
struct _d3309: DeclName<_s866> {}; // EnumConstant kSticky
struct _d3310: DeclName<_s867> {}; // EnumConstant kUnicode
struct _d3311: DeclName<_s868> {}; // EnumConstant kDotAll
struct _d3312: DeclName<_s62> {}; // CXXMethod New
struct _d3313: DeclName<_s232> {}; // ParmVar context
struct _d3314: DeclName<_s869> {}; // ParmVar pattern
struct _d3315: DeclName<_s179> {}; // ParmVar flags
struct _d3316: DeclName<_s870> {}; // CXXMethod GetSource
struct _d3317: DeclName<_s871> {}; // CXXMethod GetFlags
struct _d3318: DeclName<_s60> {}; // CXXMethod Cast
struct _d3319: DeclName<_s506> {}; // ParmVar obj
struct _d3320: DeclName<_s13> {}; // CXXRecord External
struct _d3321: DeclName<_s62> {}; // CXXMethod New
struct _d3322: DeclName<_s63> {}; // ParmVar isolate
struct _d3323: DeclName<_s162> {}; // ParmVar value
struct _d3324: DeclName<_s60> {}; // CXXMethod Cast
struct _d3325: DeclName<_s506> {}; // ParmVar obj
struct _d3326: DeclName<_s49> {}; // CXXMethod Value
struct _d3327: DeclName<_s872> {}; // Enum Intrinsic
struct _d3328: DeclName<_s873> {}; // EnumConstant kArrayProto_entries
struct _d3329: DeclName<_s874> {}; // EnumConstant kArrayProto_forEach
struct _d3330: DeclName<_s875> {}; // EnumConstant kArrayProto_keys
struct _d3331: DeclName<_s876> {}; // EnumConstant kArrayProto_values
struct _d3332: DeclName<_s877> {}; // EnumConstant kErrorPrototype
struct _d3333: DeclName<_s878> {}; // EnumConstant kIteratorPrototype
struct _d3334: DeclName<_s879> {}; // CXXRecord Template
struct _d3335: DeclName<_s879> {}; // CXXRecord Template
struct _d3336: DeclName<_s123> {}; // CXXMethod Set
struct _d3337: DeclName<_s558> {}; // ParmVar name
struct _d3338: DeclName<_s162> {}; // ParmVar value
struct _d3339: DeclName<_s622> {}; // ParmVar attributes
struct _d3340: DeclName<_s640> {}; // CXXMethod SetPrivate
struct _d3341: DeclName<_s558> {}; // ParmVar name
struct _d3342: DeclName<_s162> {}; // ParmVar value
struct _d3343: DeclName<_s622> {}; // ParmVar attributes
struct _d3344: DeclName<_s123> {}; // CXXMethod Set
struct _d3345: DeclName<_s63> {}; // ParmVar isolate
struct _d3346: DeclName<_s558> {}; // ParmVar name
struct _d3347: DeclName<_s162> {}; // ParmVar value
struct _d3348: DeclName<_s636> {}; // CXXMethod SetAccessorProperty
struct _d3349: DeclName<_s558> {}; // ParmVar name
struct _d3350: DeclName<_s630> {}; // ParmVar getter
struct _d3351: DeclName<_s631> {}; // ParmVar setter
struct _d3352: DeclName<_s633> {}; // ParmVar attribute
struct _d3353: DeclName<_s632> {}; // ParmVar settings
struct _d3354: DeclName<_s637> {}; // CXXMethod SetNativeDataProperty
struct _d3355: DeclName<_s558> {}; // ParmVar name
struct _d3356: DeclName<_s630> {}; // ParmVar getter
struct _d3357: DeclName<_s631> {}; // ParmVar setter
struct _d3358: DeclName<_s134> {}; // ParmVar data
struct _d3359: DeclName<_s633> {}; // ParmVar attribute
struct _d3360: DeclName<_s880> {}; // ParmVar signature
struct _d3361: DeclName<_s632> {}; // ParmVar settings
struct _d3362: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d3363: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d3364: DeclName<_s637> {}; // CXXMethod SetNativeDataProperty
struct _d3365: DeclName<_s558> {}; // ParmVar name
struct _d3366: DeclName<_s630> {}; // ParmVar getter
struct _d3367: DeclName<_s631> {}; // ParmVar setter
struct _d3368: DeclName<_s134> {}; // ParmVar data
struct _d3369: DeclName<_s633> {}; // ParmVar attribute
struct _d3370: DeclName<_s880> {}; // ParmVar signature
struct _d3371: DeclName<_s632> {}; // ParmVar settings
struct _d3372: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d3373: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d3374: DeclName<_s638> {}; // CXXMethod SetLazyDataProperty
struct _d3375: DeclName<_s558> {}; // ParmVar name
struct _d3376: DeclName<_s630> {}; // ParmVar getter
struct _d3377: DeclName<_s134> {}; // ParmVar data
struct _d3378: DeclName<_s633> {}; // ParmVar attribute
struct _d3379: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d3380: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d3381: DeclName<_s881> {}; // CXXMethod SetIntrinsicDataProperty
struct _d3382: DeclName<_s558> {}; // ParmVar name
struct _d3383: DeclName<_s882> {}; // ParmVar intrinsic
struct _d3384: DeclName<_s633> {}; // ParmVar attribute
struct _d3385: DeclName<_s883> {}; // Typedef GenericNamedPropertyGetterCallback
struct _d3386: DeclName<_s884> {}; // Typedef GenericNamedPropertySetterCallback
struct _d3387: DeclName<_s885> {}; // Typedef GenericNamedPropertyQueryCallback
struct _d3388: DeclName<_s886> {}; // Typedef GenericNamedPropertyDeleterCallback
struct _d3389: DeclName<_s887> {}; // Typedef GenericNamedPropertyEnumeratorCallback
struct _d3390: DeclName<_s888> {}; // Typedef GenericNamedPropertyDefinerCallback
struct _d3391: DeclName<_s889> {}; // Typedef GenericNamedPropertyDescriptorCallback
struct _d3392: DeclName<_s890> {}; // Typedef IndexedPropertyGetterCallback
struct _d3393: DeclName<_s891> {}; // Typedef IndexedPropertySetterCallback
struct _d3394: DeclName<_s892> {}; // Typedef IndexedPropertyQueryCallback
struct _d3395: DeclName<_s893> {}; // Typedef IndexedPropertyDeleterCallback
struct _d3396: DeclName<_s894> {}; // Typedef IndexedPropertyEnumeratorCallback
struct _d3397: DeclName<_s895> {}; // Typedef IndexedPropertyDefinerCallback
struct _d3398: DeclName<_s896> {}; // Typedef IndexedPropertyDescriptorCallback
struct _d3399: DeclName<_s897> {}; // Enum AccessType
struct _d3400: DeclName<_s898> {}; // EnumConstant ACCESS_GET
struct _d3401: DeclName<_s899> {}; // EnumConstant ACCESS_SET
struct _d3402: DeclName<_s900> {}; // EnumConstant ACCESS_HAS
struct _d3403: DeclName<_s901> {}; // EnumConstant ACCESS_DELETE
struct _d3404: DeclName<_s902> {}; // EnumConstant ACCESS_KEYS
struct _d3405: DeclName<_s903> {}; // Typedef AccessCheckCallback
struct _d3406: DeclName<_s15> {}; // CXXRecord FunctionTemplate
struct _d3407: DeclName<_s62> {}; // CXXMethod New
struct _d3408: DeclName<_s63> {}; // ParmVar isolate
struct _d3409: DeclName<_s86> {}; // ParmVar callback
struct _d3410: DeclName<_s134> {}; // ParmVar data
struct _d3411: DeclName<_s880> {}; // ParmVar signature
struct _d3412: DeclName<_s171> {}; // ParmVar length
struct _d3413: DeclName<_s725> {}; // ParmVar behavior
struct _d3414: DeclName<_s726> {}; // ParmVar side_effect_type
struct _d3415: DeclName<_s904> {}; // CXXMethod FromSnapshot
struct _d3416: DeclName<_s63> {}; // ParmVar isolate
struct _d3417: DeclName<_s132> {}; // ParmVar index
struct _d3418: DeclName<_s905> {}; // CXXMethod NewWithCache
struct _d3419: DeclName<_s63> {}; // ParmVar isolate
struct _d3420: DeclName<_s86> {}; // ParmVar callback
struct _d3421: DeclName<_s906> {}; // ParmVar cache_property
struct _d3422: DeclName<_s134> {}; // ParmVar data
struct _d3423: DeclName<_s880> {}; // ParmVar signature
struct _d3424: DeclName<_s171> {}; // ParmVar length
struct _d3425: DeclName<_s726> {}; // ParmVar side_effect_type
struct _d3426: DeclName<_s907> {}; // CXXMethod GetFunction
struct _d3427: DeclName<_s232> {}; // ParmVar context
struct _d3428: DeclName<_s908> {}; // CXXMethod NewRemoteInstance
struct _d3429: DeclName<_s909> {}; // CXXMethod SetCallHandler
struct _d3430: DeclName<_s86> {}; // ParmVar callback
struct _d3431: DeclName<_s134> {}; // ParmVar data
struct _d3432: DeclName<_s726> {}; // ParmVar side_effect_type
struct _d3433: DeclName<_s910> {}; // CXXMethod SetLength
struct _d3434: DeclName<_s171> {}; // ParmVar length
struct _d3435: DeclName<_s911> {}; // CXXMethod InstanceTemplate
struct _d3436: DeclName<_s912> {}; // CXXMethod Inherit
struct _d3437: DeclName<_s913> {}; // ParmVar parent
struct _d3438: DeclName<_s914> {}; // CXXMethod PrototypeTemplate
struct _d3439: DeclName<_s915> {}; // CXXMethod SetPrototypeProviderTemplate
struct _d3440: DeclName<_s916> {}; // ParmVar prototype_provider
struct _d3441: DeclName<_s917> {}; // CXXMethod SetClassName
struct _d3442: DeclName<_s558> {}; // ParmVar name
struct _d3443: DeclName<_s918> {}; // CXXMethod SetAcceptAnyReceiver
struct _d3444: DeclName<_s162> {}; // ParmVar value
struct _d3445: DeclName<_s919> {}; // CXXMethod ReadOnlyPrototype
struct _d3446: DeclName<_s920> {}; // CXXMethod RemovePrototype
struct _d3447: DeclName<_s921> {}; // CXXMethod HasInstance
struct _d3448: DeclName<_s386> {}; // ParmVar object
struct _d3449: DeclName<_s60> {}; // CXXMethod Cast
struct _d3450: DeclName<_s134> {}; // ParmVar data
struct _d3451: DeclName<_s922> {}; // Enum PropertyHandlerFlags
struct _d3452: DeclName<_s862> {}; // EnumConstant kNone
struct _d3453: DeclName<_s923> {}; // EnumConstant kAllCanRead
struct _d3454: DeclName<_s924> {}; // EnumConstant kNonMasking
struct _d3455: DeclName<_s925> {}; // EnumConstant kOnlyInterceptStrings
struct _d3456: DeclName<_s605> {}; // EnumConstant kHasNoSideEffect
struct _d3457: DeclName<_s926> {}; // CXXRecord NamedPropertyHandlerConfiguration
struct _d3458: DeclName<_s926> {}; // CXXRecord NamedPropertyHandlerConfiguration
struct _d3459: DeclName<_s926> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3460: DeclName<_s630> {}; // ParmVar getter
struct _d3461: DeclName<_s631> {}; // ParmVar setter
struct _d3462: DeclName<_s927> {}; // ParmVar query
struct _d3463: DeclName<_s928> {}; // ParmVar deleter
struct _d3464: DeclName<_s929> {}; // ParmVar enumerator
struct _d3465: DeclName<_s930> {}; // ParmVar definer
struct _d3466: DeclName<_s624> {}; // ParmVar descriptor
struct _d3467: DeclName<_s134> {}; // ParmVar data
struct _d3468: DeclName<_s179> {}; // ParmVar flags
struct _d3469: DeclName<_s926> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3470: DeclName<_s630> {}; // ParmVar getter
struct _d3471: DeclName<_s631> {}; // ParmVar setter
struct _d3472: DeclName<_s927> {}; // ParmVar query
struct _d3473: DeclName<_s928> {}; // ParmVar deleter
struct _d3474: DeclName<_s929> {}; // ParmVar enumerator
struct _d3475: DeclName<_s134> {}; // ParmVar data
struct _d3476: DeclName<_s179> {}; // ParmVar flags
struct _d3477: DeclName<_s926> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3478: DeclName<_s630> {}; // ParmVar getter
struct _d3479: DeclName<_s631> {}; // ParmVar setter
struct _d3480: DeclName<_s624> {}; // ParmVar descriptor
struct _d3481: DeclName<_s928> {}; // ParmVar deleter
struct _d3482: DeclName<_s929> {}; // ParmVar enumerator
struct _d3483: DeclName<_s930> {}; // ParmVar definer
struct _d3484: DeclName<_s134> {}; // ParmVar data
struct _d3485: DeclName<_s179> {}; // ParmVar flags
struct _d3486: DeclName<_s630> {}; // Field getter
struct _d3487: DeclName<_s631> {}; // Field setter
struct _d3488: DeclName<_s927> {}; // Field query
struct _d3489: DeclName<_s928> {}; // Field deleter
struct _d3490: DeclName<_s929> {}; // Field enumerator
struct _d3491: DeclName<_s930> {}; // Field definer
struct _d3492: DeclName<_s624> {}; // Field descriptor
struct _d3493: DeclName<_s134> {}; // Field data
struct _d3494: DeclName<_s179> {}; // Field flags
struct _d3495: DeclName<_s926> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3497: DeclName<_s926> {}; // CXXConstructor NamedPropertyHandlerConfiguration
struct _d3499: DeclName<_s931> {}; // CXXRecord IndexedPropertyHandlerConfiguration
struct _d3500: DeclName<_s931> {}; // CXXRecord IndexedPropertyHandlerConfiguration
struct _d3501: DeclName<_s931> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3502: DeclName<_s630> {}; // ParmVar getter
struct _d3503: DeclName<_s631> {}; // ParmVar setter
struct _d3504: DeclName<_s927> {}; // ParmVar query
struct _d3505: DeclName<_s928> {}; // ParmVar deleter
struct _d3506: DeclName<_s929> {}; // ParmVar enumerator
struct _d3507: DeclName<_s930> {}; // ParmVar definer
struct _d3508: DeclName<_s624> {}; // ParmVar descriptor
struct _d3509: DeclName<_s134> {}; // ParmVar data
struct _d3510: DeclName<_s179> {}; // ParmVar flags
struct _d3511: DeclName<_s931> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3512: DeclName<_s630> {}; // ParmVar getter
struct _d3513: DeclName<_s631> {}; // ParmVar setter
struct _d3514: DeclName<_s927> {}; // ParmVar query
struct _d3515: DeclName<_s928> {}; // ParmVar deleter
struct _d3516: DeclName<_s929> {}; // ParmVar enumerator
struct _d3517: DeclName<_s134> {}; // ParmVar data
struct _d3518: DeclName<_s179> {}; // ParmVar flags
struct _d3519: DeclName<_s931> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3520: DeclName<_s630> {}; // ParmVar getter
struct _d3521: DeclName<_s631> {}; // ParmVar setter
struct _d3522: DeclName<_s624> {}; // ParmVar descriptor
struct _d3523: DeclName<_s928> {}; // ParmVar deleter
struct _d3524: DeclName<_s929> {}; // ParmVar enumerator
struct _d3525: DeclName<_s930> {}; // ParmVar definer
struct _d3526: DeclName<_s134> {}; // ParmVar data
struct _d3527: DeclName<_s179> {}; // ParmVar flags
struct _d3528: DeclName<_s630> {}; // Field getter
struct _d3529: DeclName<_s631> {}; // Field setter
struct _d3530: DeclName<_s927> {}; // Field query
struct _d3531: DeclName<_s928> {}; // Field deleter
struct _d3532: DeclName<_s929> {}; // Field enumerator
struct _d3533: DeclName<_s930> {}; // Field definer
struct _d3534: DeclName<_s624> {}; // Field descriptor
struct _d3535: DeclName<_s134> {}; // Field data
struct _d3536: DeclName<_s179> {}; // Field flags
struct _d3537: DeclName<_s931> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3539: DeclName<_s931> {}; // CXXConstructor IndexedPropertyHandlerConfiguration
struct _d3541: DeclName<_s932> {}; // CXXDestructor ~IndexedPropertyHandlerConfiguration
struct _d3542: DeclName<_s28> {}; // CXXRecord ObjectTemplate
struct _d3543: DeclName<_s62> {}; // CXXMethod New
struct _d3544: DeclName<_s63> {}; // ParmVar isolate
struct _d3545: DeclName<_s933> {}; // ParmVar constructor
struct _d3546: DeclName<_s904> {}; // CXXMethod FromSnapshot
struct _d3547: DeclName<_s63> {}; // ParmVar isolate
struct _d3548: DeclName<_s132> {}; // ParmVar index
struct _d3549: DeclName<_s727> {}; // CXXMethod NewInstance
struct _d3550: DeclName<_s232> {}; // ParmVar context
struct _d3551: DeclName<_s629> {}; // CXXMethod SetAccessor
struct _d3552: DeclName<_s558> {}; // ParmVar name
struct _d3553: DeclName<_s630> {}; // ParmVar getter
struct _d3554: DeclName<_s631> {}; // ParmVar setter
struct _d3555: DeclName<_s134> {}; // ParmVar data
struct _d3556: DeclName<_s632> {}; // ParmVar settings
struct _d3557: DeclName<_s633> {}; // ParmVar attribute
struct _d3558: DeclName<_s880> {}; // ParmVar signature
struct _d3559: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d3560: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d3561: DeclName<_s629> {}; // CXXMethod SetAccessor
struct _d3562: DeclName<_s558> {}; // ParmVar name
struct _d3563: DeclName<_s630> {}; // ParmVar getter
struct _d3564: DeclName<_s631> {}; // ParmVar setter
struct _d3565: DeclName<_s134> {}; // ParmVar data
struct _d3566: DeclName<_s632> {}; // ParmVar settings
struct _d3567: DeclName<_s633> {}; // ParmVar attribute
struct _d3568: DeclName<_s880> {}; // ParmVar signature
struct _d3569: DeclName<_s634> {}; // ParmVar getter_side_effect_type
struct _d3570: DeclName<_s635> {}; // ParmVar setter_side_effect_type
struct _d3571: DeclName<_s934> {}; // CXXMethod SetHandler
struct _d3572: DeclName<_s935> {}; // ParmVar configuration
struct _d3573: DeclName<_s936> {}; // CXXMethod SetIndexedPropertyHandler
struct _d3574: DeclName<_s630> {}; // ParmVar getter
struct _d3575: DeclName<_s631> {}; // ParmVar setter
struct _d3576: DeclName<_s927> {}; // ParmVar query
struct _d3577: DeclName<_s928> {}; // ParmVar deleter
struct _d3578: DeclName<_s929> {}; // ParmVar enumerator
struct _d3579: DeclName<_s134> {}; // ParmVar data
struct _d3580: DeclName<_s934> {}; // CXXMethod SetHandler
struct _d3581: DeclName<_s935> {}; // ParmVar configuration
struct _d3582: DeclName<_s937> {}; // CXXMethod SetCallAsFunctionHandler
struct _d3583: DeclName<_s86> {}; // ParmVar callback
struct _d3584: DeclName<_s134> {}; // ParmVar data
struct _d3585: DeclName<_s938> {}; // CXXMethod MarkAsUndetectable
struct _d3586: DeclName<_s939> {}; // CXXMethod SetAccessCheckCallback
struct _d3587: DeclName<_s86> {}; // ParmVar callback
struct _d3588: DeclName<_s134> {}; // ParmVar data
struct _d3589: DeclName<_s940> {}; // CXXMethod SetAccessCheckCallbackAndHandler
struct _d3590: DeclName<_s86> {}; // ParmVar callback
struct _d3591: DeclName<_s941> {}; // ParmVar named_handler
struct _d3592: DeclName<_s942> {}; // ParmVar indexed_handler
struct _d3593: DeclName<_s134> {}; // ParmVar data
struct _d3594: DeclName<_s658> {}; // CXXMethod InternalFieldCount
struct _d3595: DeclName<_s943> {}; // CXXMethod SetInternalFieldCount
struct _d3596: DeclName<_s162> {}; // ParmVar value
struct _d3597: DeclName<_s944> {}; // CXXMethod IsImmutableProto
struct _d3598: DeclName<_s945> {}; // CXXMethod SetImmutableProto
struct _d3599: DeclName<_s60> {}; // CXXMethod Cast
struct _d3600: DeclName<_s134> {}; // ParmVar data
struct _d3601: DeclName<_s37> {}; // CXXRecord Signature
struct _d3602: DeclName<_s62> {}; // CXXMethod New
struct _d3603: DeclName<_s63> {}; // ParmVar isolate
struct _d3604: DeclName<_s946> {}; // ParmVar receiver
struct _d3605: DeclName<_s60> {}; // CXXMethod Cast
struct _d3606: DeclName<_s134> {}; // ParmVar data
struct _d3607: DeclName<_s5> {}; // CXXRecord AccessorSignature
struct _d3608: DeclName<_s62> {}; // CXXMethod New
struct _d3609: DeclName<_s63> {}; // ParmVar isolate
struct _d3610: DeclName<_s946> {}; // ParmVar receiver
struct _d3611: DeclName<_s60> {}; // CXXMethod Cast
struct _d3612: DeclName<_s134> {}; // ParmVar data
struct _d3613: DeclName<_s947> {}; // CXXRecord Extension
struct _d3614: DeclName<_s947> {}; // CXXRecord Extension
struct _d3615: DeclName<_s947> {}; // CXXConstructor Extension
struct _d3616: DeclName<_s558> {}; // ParmVar name
struct _d3617: DeclName<_s142> {}; // ParmVar source
struct _d3618: DeclName<_s948> {}; // ParmVar dep_count
struct _d3619: DeclName<_s949> {}; // ParmVar deps
struct _d3620: DeclName<_s950> {}; // ParmVar source_length
struct _d3621: DeclName<_s951> {}; // CXXDestructor ~Extension
struct _d3622: DeclName<_s952> {}; // CXXMethod GetNativeFunctionTemplate
struct _d3623: DeclName<_s63> {}; // ParmVar isolate
struct _d3624: DeclName<_s558> {}; // ParmVar name
struct _d3625: DeclName<_s558> {}; // CXXMethod name
struct _d3626: DeclName<_s950> {}; // CXXMethod source_length
struct _d3627: DeclName<_s142> {}; // CXXMethod source
struct _d3628: DeclName<_s953> {}; // CXXMethod dependency_count
struct _d3629: DeclName<_s954> {}; // CXXMethod dependencies
struct _d3630: DeclName<_s955> {}; // CXXMethod set_auto_enable
struct _d3631: DeclName<_s162> {}; // ParmVar value
struct _d3632: DeclName<_s956> {}; // CXXMethod auto_enable
struct _d3633: DeclName<_s947> {}; // CXXConstructor Extension
struct _d3635: DeclName<_s67> {}; // CXXMethod operator=
struct _d3637: DeclName<_s957> {}; // Function RegisterExtension
struct _d3638: DeclName<_s267> {}; // ClassTemplateSpecialization unique_ptr
struct _d3640: DeclName<_s958> {}; // Function Undefined
struct _d3641: DeclName<_s63> {}; // ParmVar isolate
struct _d3642: DeclName<_s959> {}; // Function Null
struct _d3643: DeclName<_s63> {}; // ParmVar isolate
struct _d3644: DeclName<_s960> {}; // Function True
struct _d3645: DeclName<_s63> {}; // ParmVar isolate
struct _d3646: DeclName<_s961> {}; // Function False
struct _d3647: DeclName<_s63> {}; // ParmVar isolate
struct _d3648: DeclName<_s962> {}; // CXXRecord ResourceConstraints
struct _d3649: DeclName<_s962> {}; // CXXRecord ResourceConstraints
struct _d3650: DeclName<_s963> {}; // CXXMethod ConfigureDefaultsFromHeapSize
struct _d3651: DeclName<_s964> {}; // ParmVar initial_heap_size_in_bytes
struct _d3652: DeclName<_s965> {}; // ParmVar maximum_heap_size_in_bytes
struct _d3653: DeclName<_s966> {}; // CXXMethod ConfigureDefaults
struct _d3654: DeclName<_s967> {}; // ParmVar physical_memory
struct _d3655: DeclName<_s968> {}; // ParmVar virtual_memory_limit
struct _d3656: DeclName<_s969> {}; // CXXMethod stack_limit
struct _d3657: DeclName<_s970> {}; // CXXMethod set_stack_limit
struct _d3658: DeclName<_s162> {}; // ParmVar value
struct _d3659: DeclName<_s971> {}; // CXXMethod code_range_size_in_bytes
struct _d3660: DeclName<_s972> {}; // CXXMethod set_code_range_size_in_bytes
struct _d3661: DeclName<_s973> {}; // ParmVar limit
struct _d3662: DeclName<_s974> {}; // CXXMethod max_old_generation_size_in_bytes
struct _d3663: DeclName<_s975> {}; // CXXMethod set_max_old_generation_size_in_bytes
struct _d3664: DeclName<_s973> {}; // ParmVar limit
struct _d3665: DeclName<_s976> {}; // CXXMethod max_young_generation_size_in_bytes
struct _d3666: DeclName<_s977> {}; // CXXMethod set_max_young_generation_size_in_bytes
struct _d3667: DeclName<_s973> {}; // ParmVar limit
struct _d3668: DeclName<_s978> {}; // CXXMethod initial_old_generation_size_in_bytes
struct _d3669: DeclName<_s979> {}; // CXXMethod set_initial_old_generation_size_in_bytes
struct _d3670: DeclName<_s980> {}; // ParmVar initial_size
struct _d3671: DeclName<_s981> {}; // CXXMethod initial_young_generation_size_in_bytes
struct _d3672: DeclName<_s982> {}; // CXXMethod set_initial_young_generation_size_in_bytes
struct _d3673: DeclName<_s980> {}; // ParmVar initial_size
struct _d3674: DeclName<_s983> {}; // CXXMethod code_range_size
struct _d3675: DeclName<_s984> {}; // CXXMethod set_code_range_size
struct _d3676: DeclName<_s985> {}; // ParmVar limit_in_mb
struct _d3677: DeclName<_s986> {}; // CXXMethod max_semi_space_size_in_kb
struct _d3678: DeclName<_s987> {}; // CXXMethod set_max_semi_space_size_in_kb
struct _d3679: DeclName<_s988> {}; // ParmVar limit_in_kb
struct _d3680: DeclName<_s989> {}; // CXXMethod max_old_space_size
struct _d3681: DeclName<_s990> {}; // CXXMethod set_max_old_space_size
struct _d3682: DeclName<_s985> {}; // ParmVar limit_in_mb
struct _d3683: DeclName<_s991> {}; // CXXMethod max_zone_pool_size
struct _d3684: DeclName<_s992> {}; // CXXMethod set_max_zone_pool_size
struct _d3685: DeclName<_s804> {}; // ParmVar bytes
struct _d3686: DeclName<_s962> {}; // CXXConstructor ResourceConstraints
struct _d3687: DeclName<_s962> {}; // CXXConstructor ResourceConstraints
struct _d3689: DeclName<_s962> {}; // CXXConstructor ResourceConstraints
struct _d3691: DeclName<_s993> {}; // Typedef FatalErrorCallback
struct _d3692: DeclName<_s994> {}; // Typedef OOMErrorCallback
struct _d3693: DeclName<_s995> {}; // Typedef DcheckErrorCallback
struct _d3694: DeclName<_s996> {}; // Typedef MessageCallback
struct _d3695: DeclName<_s997> {}; // Typedef LogEventCallback
struct _d3696: DeclName<_s998> {}; // CXXRecord Exception
struct _d3697: DeclName<_s998> {}; // CXXRecord Exception
struct _d3698: DeclName<_s999> {}; // CXXMethod RangeError
struct _d3699: DeclName<_s384> {}; // ParmVar message
struct _d3700: DeclName<_s1000> {}; // CXXMethod ReferenceError
struct _d3701: DeclName<_s384> {}; // ParmVar message
struct _d3702: DeclName<_s1001> {}; // CXXMethod SyntaxError
struct _d3703: DeclName<_s384> {}; // ParmVar message
struct _d3704: DeclName<_s1002> {}; // CXXMethod TypeError
struct _d3705: DeclName<_s384> {}; // ParmVar message
struct _d3706: DeclName<_s1003> {}; // CXXMethod Error
struct _d3707: DeclName<_s384> {}; // ParmVar message
struct _d3708: DeclName<_s1004> {}; // CXXMethod CreateMessage
struct _d3709: DeclName<_s63> {}; // ParmVar isolate
struct _d3710: DeclName<_s807> {}; // ParmVar exception
struct _d3711: DeclName<_s313> {}; // CXXMethod GetStackTrace
struct _d3712: DeclName<_s807> {}; // ParmVar exception
struct _d3713: DeclName<_s1005> {}; // Typedef CounterLookupCallback
struct _d3714: DeclName<_s1006> {}; // Typedef CreateHistogramCallback
struct _d3715: DeclName<_s1007> {}; // Typedef AddHistogramSampleCallback
struct _d3716: DeclName<_s1008> {}; // Typedef BeforeCallEnteredCallback
struct _d3717: DeclName<_s1009> {}; // Typedef CallCompletedCallback
struct _d3718: DeclName<_s1010> {}; // Typedef HostImportModuleDynamicallyCallback
struct _d3719: DeclName<_s1011> {}; // Typedef HostInitializeImportMetaObjectCallback
struct _d3720: DeclName<_s1012> {}; // Typedef PrepareStackTraceCallback
struct _d3721: DeclName<_s1013> {}; // Enum PromiseHookType
struct _d3722: DeclName<_s1014> {}; // EnumConstant kInit
struct _d3723: DeclName<_s1015> {}; // EnumConstant kResolve
struct _d3724: DeclName<_s1016> {}; // EnumConstant kBefore
struct _d3725: DeclName<_s1017> {}; // EnumConstant kAfter
struct _d3726: DeclName<_s1018> {}; // Typedef PromiseHook
struct _d3727: DeclName<_s1019> {}; // Enum PromiseRejectEvent
struct _d3728: DeclName<_s1020> {}; // EnumConstant kPromiseRejectWithNoHandler
struct _d3729: DeclName<_s1021> {}; // EnumConstant kPromiseHandlerAddedAfterReject
struct _d3730: DeclName<_s1022> {}; // EnumConstant kPromiseRejectAfterResolved
struct _d3731: DeclName<_s1023> {}; // EnumConstant kPromiseResolveAfterResolved
struct _d3732: DeclName<_s1024> {}; // CXXRecord PromiseRejectMessage
struct _d3733: DeclName<_s1024> {}; // CXXRecord PromiseRejectMessage
struct _d3734: DeclName<_s1024> {}; // CXXConstructor PromiseRejectMessage
struct _d3735: DeclName<_s1025> {}; // ParmVar promise
struct _d3736: DeclName<_s1026> {}; // ParmVar event
struct _d3737: DeclName<_s162> {}; // ParmVar value
struct _d3738: DeclName<_s745> {}; // CXXMethod GetPromise
struct _d3739: DeclName<_s1027> {}; // CXXMethod GetEvent
struct _d3740: DeclName<_s1028> {}; // CXXMethod GetValue
struct _d3741: DeclName<_s1029> {}; // Typedef PromiseRejectCallback
struct _d3742: DeclName<_s1030> {}; // Typedef MicrotasksCompletedCallback
struct _d3743: DeclName<_s1031> {}; // Typedef MicrotasksCompletedCallbackWithData
struct _d3744: DeclName<_s1032> {}; // Typedef MicrotaskCallback
struct _d3745: DeclName<_s1033> {}; // Enum MicrotasksPolicy
struct _d3746: DeclName<_s1034> {}; // EnumConstant kExplicit
struct _d3747: DeclName<_s1035> {}; // EnumConstant kScoped
struct _d3748: DeclName<_s1036> {}; // EnumConstant kAuto
struct _d3749: DeclName<_s22> {}; // CXXRecord MicrotaskQueue
struct _d3750: DeclName<_s62> {}; // CXXMethod New
struct _d3751: DeclName<_s267> {}; // ClassTemplateSpecialization unique_ptr
struct _d3752: DeclName<_s63> {}; // ParmVar isolate
struct _d3753: DeclName<_s1037> {}; // ParmVar policy
struct _d3754: DeclName<_s1038> {}; // CXXDestructor ~MicrotaskQueue
struct _d3755: DeclName<_s1039> {}; // CXXMethod EnqueueMicrotask
struct _d3756: DeclName<_s63> {}; // ParmVar isolate
struct _d3757: DeclName<_s1040> {}; // ParmVar microtask
struct _d3758: DeclName<_s1039> {}; // CXXMethod EnqueueMicrotask
struct _d3759: DeclName<_s63> {}; // ParmVar isolate
struct _d3760: DeclName<_s86> {}; // ParmVar callback
struct _d3761: DeclName<_s134> {}; // ParmVar data
struct _d3762: DeclName<_s1041> {}; // CXXMethod AddMicrotasksCompletedCallback
struct _d3763: DeclName<_s86> {}; // ParmVar callback
struct _d3764: DeclName<_s134> {}; // ParmVar data
struct _d3765: DeclName<_s1042> {}; // CXXMethod RemoveMicrotasksCompletedCallback
struct _d3766: DeclName<_s86> {}; // ParmVar callback
struct _d3767: DeclName<_s134> {}; // ParmVar data
struct _d3768: DeclName<_s1043> {}; // CXXMethod PerformCheckpoint
struct _d3769: DeclName<_s63> {}; // ParmVar isolate
struct _d3770: DeclName<_s1044> {}; // CXXMethod IsRunningMicrotasks
struct _d3771: DeclName<_s1045> {}; // CXXMethod GetMicrotasksScopeDepth
struct _d3772: DeclName<_s22> {}; // CXXConstructor MicrotaskQueue
struct _d3774: DeclName<_s67> {}; // CXXMethod operator=
struct _d3776: DeclName<_s1046> {}; // CXXRecord MicrotasksScope
struct _d3777: DeclName<_s1046> {}; // CXXRecord MicrotasksScope
struct _d3778: DeclName<_s1047> {}; // Enum Type
struct _d3779: DeclName<_s1048> {}; // EnumConstant kRunMicrotasks
struct _d3780: DeclName<_s1049> {}; // EnumConstant kDoNotRunMicrotasks
struct _d3781: DeclName<_s1046> {}; // CXXConstructor MicrotasksScope
struct _d3782: DeclName<_s63> {}; // ParmVar isolate
struct _d3783: DeclName<_s87> {}; // ParmVar type
struct _d3784: DeclName<_s1046> {}; // CXXConstructor MicrotasksScope
struct _d3785: DeclName<_s63> {}; // ParmVar isolate
struct _d3786: DeclName<_s1050> {}; // ParmVar microtask_queue
struct _d3787: DeclName<_s87> {}; // ParmVar type
struct _d3788: DeclName<_s1051> {}; // CXXDestructor ~MicrotasksScope
struct _d3789: DeclName<_s1043> {}; // CXXMethod PerformCheckpoint
struct _d3790: DeclName<_s63> {}; // ParmVar isolate
struct _d3791: DeclName<_s1052> {}; // CXXMethod GetCurrentDepth
struct _d3792: DeclName<_s63> {}; // ParmVar isolate
struct _d3793: DeclName<_s1044> {}; // CXXMethod IsRunningMicrotasks
struct _d3794: DeclName<_s63> {}; // ParmVar isolate
struct _d3795: DeclName<_s1046> {}; // CXXConstructor MicrotasksScope
struct _d3797: DeclName<_s67> {}; // CXXMethod operator=
struct _d3799: DeclName<_s1053> {}; // Typedef FailedAccessCheckCallback
struct _d3800: DeclName<_s1054> {}; // Typedef AllowCodeGenerationFromStringsCallback
struct _d3801: DeclName<_s1055> {}; // Typedef ExtensionCallback
struct _d3802: DeclName<_s1056> {}; // Typedef AllowWasmCodeGenerationCallback
struct _d3803: DeclName<_s1057> {}; // Typedef ApiImplementationCallback
struct _d3804: DeclName<_s1058> {}; // Typedef WasmStreamingCallback
struct _d3805: DeclName<_s1059> {}; // Typedef WasmThreadsEnabledCallback
struct _d3806: DeclName<_s1060> {}; // Enum GCType
struct _d3807: DeclName<_s1061> {}; // EnumConstant kGCTypeScavenge
struct _d3808: DeclName<_s1062> {}; // EnumConstant kGCTypeMarkSweepCompact
struct _d3809: DeclName<_s1063> {}; // EnumConstant kGCTypeIncrementalMarking
struct _d3810: DeclName<_s1064> {}; // EnumConstant kGCTypeProcessWeakCallbacks
struct _d3811: DeclName<_s1065> {}; // EnumConstant kGCTypeAll
struct _d3812: DeclName<_s1066> {}; // Enum GCCallbackFlags
struct _d3813: DeclName<_s1067> {}; // EnumConstant kNoGCCallbackFlags
struct _d3814: DeclName<_s1068> {}; // EnumConstant kGCCallbackFlagConstructRetainedObjectInfos
struct _d3815: DeclName<_s1069> {}; // EnumConstant kGCCallbackFlagForced
struct _d3816: DeclName<_s1070> {}; // EnumConstant kGCCallbackFlagSynchronousPhantomCallbackProcessing
struct _d3817: DeclName<_s1071> {}; // EnumConstant kGCCallbackFlagCollectAllAvailableGarbage
struct _d3818: DeclName<_s1072> {}; // EnumConstant kGCCallbackFlagCollectAllExternalMemory
struct _d3819: DeclName<_s1073> {}; // EnumConstant kGCCallbackScheduleIdleGarbageCollection
struct _d3820: DeclName<_s1074> {}; // Typedef GCCallback
struct _d3821: DeclName<_s1075> {}; // Typedef InterruptCallback
struct _d3822: DeclName<_s1076> {}; // Typedef NearHeapLimitCallback
struct _d3823: DeclName<_s1077> {}; // CXXRecord HeapStatistics
struct _d3824: DeclName<_s1077> {}; // CXXRecord HeapStatistics
struct _d3825: DeclName<_s1077> {}; // CXXConstructor HeapStatistics
struct _d3826: DeclName<_s1078> {}; // CXXMethod total_heap_size
struct _d3827: DeclName<_s1079> {}; // CXXMethod total_heap_size_executable
struct _d3828: DeclName<_s1080> {}; // CXXMethod total_physical_size
struct _d3829: DeclName<_s1081> {}; // CXXMethod total_available_size
struct _d3830: DeclName<_s1082> {}; // CXXMethod used_heap_size
struct _d3831: DeclName<_s1083> {}; // CXXMethod heap_size_limit
struct _d3832: DeclName<_s1084> {}; // CXXMethod malloced_memory
struct _d3833: DeclName<_s1085> {}; // CXXMethod external_memory
struct _d3834: DeclName<_s1086> {}; // CXXMethod peak_malloced_memory
struct _d3835: DeclName<_s1087> {}; // CXXMethod number_of_native_contexts
struct _d3836: DeclName<_s1088> {}; // CXXMethod number_of_detached_contexts
struct _d3837: DeclName<_s1089> {}; // CXXMethod does_zap_garbage
struct _d3838: DeclName<_s1090> {}; // CXXRecord HeapSpaceStatistics
struct _d3839: DeclName<_s1090> {}; // CXXRecord HeapSpaceStatistics
struct _d3840: DeclName<_s1090> {}; // CXXConstructor HeapSpaceStatistics
struct _d3841: DeclName<_s1091> {}; // CXXMethod space_name
struct _d3842: DeclName<_s1092> {}; // CXXMethod space_size
struct _d3843: DeclName<_s1093> {}; // CXXMethod space_used_size
struct _d3844: DeclName<_s1094> {}; // CXXMethod space_available_size
struct _d3845: DeclName<_s1095> {}; // CXXMethod physical_space_size
struct _d3846: DeclName<_s1096> {}; // CXXRecord HeapObjectStatistics
struct _d3847: DeclName<_s1096> {}; // CXXRecord HeapObjectStatistics
struct _d3848: DeclName<_s1096> {}; // CXXConstructor HeapObjectStatistics
struct _d3849: DeclName<_s1097> {}; // CXXMethod object_type
struct _d3850: DeclName<_s1098> {}; // CXXMethod object_sub_type
struct _d3851: DeclName<_s1099> {}; // CXXMethod object_count
struct _d3852: DeclName<_s1100> {}; // CXXMethod object_size
struct _d3853: DeclName<_s1101> {}; // CXXRecord HeapCodeStatistics
struct _d3854: DeclName<_s1101> {}; // CXXRecord HeapCodeStatistics
struct _d3855: DeclName<_s1101> {}; // CXXConstructor HeapCodeStatistics
struct _d3856: DeclName<_s1102> {}; // CXXMethod code_and_metadata_size
struct _d3857: DeclName<_s1103> {}; // CXXMethod bytecode_and_metadata_size
struct _d3858: DeclName<_s1104> {}; // CXXMethod external_script_source_size
struct _d3859: DeclName<_s1105> {}; // CXXRecord JitCodeEvent
struct _d3860: DeclName<_s1105> {}; // CXXRecord JitCodeEvent
struct _d3861: DeclName<_s1106> {}; // Enum EventType
struct _d3862: DeclName<_s1107> {}; // EnumConstant CODE_ADDED
struct _d3863: DeclName<_s1108> {}; // EnumConstant CODE_MOVED
struct _d3864: DeclName<_s1109> {}; // EnumConstant CODE_REMOVED
struct _d3865: DeclName<_s1110> {}; // EnumConstant CODE_ADD_LINE_POS_INFO
struct _d3866: DeclName<_s1111> {}; // EnumConstant CODE_START_LINE_INFO_RECORDING
struct _d3867: DeclName<_s1112> {}; // EnumConstant CODE_END_LINE_INFO_RECORDING
struct _d3868: DeclName<_s1113> {}; // Enum PositionType
struct _d3869: DeclName<_s1114> {}; // EnumConstant POSITION
struct _d3870: DeclName<_s1115> {}; // EnumConstant STATEMENT_POSITION
struct _d3871: DeclName<_s1116> {}; // Enum CodeType
struct _d3872: DeclName<_s1117> {}; // EnumConstant BYTE_CODE
struct _d3873: DeclName<_s1118> {}; // EnumConstant JIT_CODE
struct _d3874: DeclName<_s87> {}; // Field type
struct _d3875: DeclName<_s1119> {}; // Field code_type
struct _d3876: DeclName<_s1120> {}; // Field code_start
struct _d3877: DeclName<_s1121> {}; // Field code_len
struct _d3878: DeclName<_s1122> {}; // Field script
struct _d3879: DeclName<_s1123> {}; // Field user_data
struct _d3880: DeclName<_s1124> {}; // CXXRecord name_t
struct _d3881: DeclName<_s1124> {}; // CXXRecord name_t
struct _d3882: DeclName<_s554> {}; // Field str
struct _d3883: DeclName<_s1125> {}; // Field len
struct _d3884: DeclName<_s1126> {}; // CXXRecord line_info_t
struct _d3885: DeclName<_s1126> {}; // CXXRecord line_info_t
struct _d3886: DeclName<_s1127> {}; // Field offset
struct _d3887: DeclName<_s1128> {}; // Field pos
struct _d3888: DeclName<_s1129> {}; // Field position_type
struct _d3890: DeclName<_s558> {}; // Field name
struct _d3891: DeclName<_s1130> {}; // Field line_info
struct _d3892: DeclName<_s1131> {}; // Field new_code_start
struct _d3894: DeclName<_s558> {}; // IndirectField name
struct _d3895: DeclName<_s1130> {}; // IndirectField line_info
struct _d3896: DeclName<_s1131> {}; // IndirectField new_code_start
struct _d3897: DeclName<_s63> {}; // Field isolate
struct _d3898: DeclName<_s1132> {}; // Enum RAILMode
struct _d3899: DeclName<_s1133> {}; // EnumConstant PERFORMANCE_RESPONSE
struct _d3900: DeclName<_s1134> {}; // EnumConstant PERFORMANCE_ANIMATION
struct _d3901: DeclName<_s1135> {}; // EnumConstant PERFORMANCE_IDLE
struct _d3902: DeclName<_s1136> {}; // EnumConstant PERFORMANCE_LOAD
struct _d3903: DeclName<_s1137> {}; // Enum JitCodeEventOptions
struct _d3904: DeclName<_s1138> {}; // EnumConstant kJitCodeEventDefault
struct _d3905: DeclName<_s1139> {}; // EnumConstant kJitCodeEventEnumExisting
struct _d3906: DeclName<_s1140> {}; // Typedef JitCodeEventHandler
struct _d3907: DeclName<_s1141> {}; // Typedef UnhandledExceptionCallback
struct _d3908: DeclName<_s1142> {}; // CXXRecord _EXCEPTION_POINTERS
struct _d3909: DeclName<_s1143> {}; // CXXRecord ExternalResourceVisitor
struct _d3910: DeclName<_s1143> {}; // CXXRecord ExternalResourceVisitor
struct _d3911: DeclName<_s1144> {}; // CXXDestructor ~ExternalResourceVisitor
struct _d3912: DeclName<_s1145> {}; // CXXMethod VisitExternalString
struct _d3913: DeclName<_s1146> {}; // ParmVar string
struct _d3914: DeclName<_s67> {}; // CXXMethod operator=
struct _d3916: DeclName<_s1147> {}; // CXXRecord PersistentHandleVisitor
struct _d3917: DeclName<_s1147> {}; // CXXRecord PersistentHandleVisitor
struct _d3918: DeclName<_s1148> {}; // CXXDestructor ~PersistentHandleVisitor
struct _d3919: DeclName<_s1149> {}; // CXXMethod VisitPersistentHandle
struct _d3920: DeclName<_s162> {}; // ParmVar value
struct _d3921: DeclName<_s93> {}; // ParmVar class_id
struct _d3922: DeclName<_s67> {}; // CXXMethod operator=
struct _d3924: DeclName<_s1150> {}; // Enum MemoryPressureLevel
struct _d3925: DeclName<_s862> {}; // EnumConstant kNone
struct _d3926: DeclName<_s1151> {}; // EnumConstant kModerate
struct _d3927: DeclName<_s1152> {}; // EnumConstant kCritical
struct _d3928: DeclName<_s1153> {}; // CXXRecord EmbedderHeapTracer
struct _d3929: DeclName<_s1153> {}; // CXXRecord EmbedderHeapTracer
struct _d3930: DeclName<_s1154> {}; // Enum TraceFlags
struct _d3931: DeclName<_s1155> {}; // EnumConstant kNoFlags
struct _d3932: DeclName<_s1156> {}; // EnumConstant kReduceMemory
struct _d3933: DeclName<_s1157> {}; // Enum EmbedderStackState
struct _d3934: DeclName<_s1158> {}; // EnumConstant kUnknown
struct _d3935: DeclName<_s1159> {}; // EnumConstant kNonEmpty
struct _d3936: DeclName<_s1160> {}; // EnumConstant kEmpty
struct _d3937: DeclName<_s1161> {}; // CXXRecord TracedGlobalHandleVisitor
struct _d3938: DeclName<_s1161> {}; // CXXRecord TracedGlobalHandleVisitor
struct _d3939: DeclName<_s1162> {}; // CXXDestructor ~TracedGlobalHandleVisitor
struct _d3940: DeclName<_s1163> {}; // CXXMethod VisitTracedGlobalHandle
struct _d3941: DeclName<_s162> {}; // ParmVar value
struct _d3942: DeclName<_s67> {}; // CXXMethod operator=
struct _d3944: DeclName<_s1164> {}; // CXXRecord TraceSummary
struct _d3945: DeclName<_s1164> {}; // CXXRecord TraceSummary
struct _d3946: DeclName<_s859> {}; // Field time
struct _d3947: DeclName<_s1165> {}; // Field allocated_size
struct _d3948: DeclName<_s1166> {}; // CXXDestructor ~EmbedderHeapTracer
struct _d3949: DeclName<_s1167> {}; // CXXMethod IterateTracedGlobalHandles
struct _d3950: DeclName<_s1168> {}; // ParmVar visitor
struct _d3951: DeclName<_s1169> {}; // CXXMethod RegisterV8References
struct _d3952: DeclName<_s1170> {}; // ClassTemplateSpecialization vector
struct _d3953: DeclName<_s128> {}; // ParmVar embedder_fields
struct _d3954: DeclName<_s1171> {}; // CXXMethod RegisterEmbedderReference
struct _d3955: DeclName<_s1172> {}; // ParmVar ref
struct _d3956: DeclName<_s1173> {}; // CXXMethod TracePrologue
struct _d3957: DeclName<_s1173> {}; // CXXMethod TracePrologue
struct _d3958: DeclName<_s179> {}; // ParmVar flags
struct _d3959: DeclName<_s1174> {}; // CXXMethod AdvanceTracing
struct _d3960: DeclName<_s1175> {}; // ParmVar deadline_in_ms
struct _d3961: DeclName<_s1176> {}; // CXXMethod IsTracingDone
struct _d3962: DeclName<_s1177> {}; // CXXMethod TraceEpilogue
struct _d3963: DeclName<_s1177> {}; // CXXMethod TraceEpilogue
struct _d3964: DeclName<_s1178> {}; // ParmVar trace_summary
struct _d3965: DeclName<_s1179> {}; // CXXMethod EnterFinalPause
struct _d3966: DeclName<_s1180> {}; // ParmVar stack_state
struct _d3967: DeclName<_s1181> {}; // CXXMethod FinalizeTracing
struct _d3968: DeclName<_s1182> {}; // CXXMethod IsRootForNonTracingGC
struct _d3969: DeclName<_s122> {}; // ParmVar handle
struct _d3970: DeclName<_s1183> {}; // CXXMethod GarbageCollectionForTesting
struct _d3971: DeclName<_s1180> {}; // ParmVar stack_state
struct _d3972: DeclName<_s1184> {}; // CXXMethod IncreaseAllocatedSize
struct _d3973: DeclName<_s804> {}; // ParmVar bytes
struct _d3974: DeclName<_s1185> {}; // CXXMethod DecreaseAllocatedSize
struct _d3975: DeclName<_s804> {}; // ParmVar bytes
struct _d3976: DeclName<_s63> {}; // CXXMethod isolate
struct _d3977: DeclName<_s1186> {}; // Field isolate_
struct _d3978: DeclName<_s67> {}; // CXXMethod operator=
struct _d3980: DeclName<_s1187> {}; // CXXRecord SerializeInternalFieldsCallback
struct _d3981: DeclName<_s1187> {}; // CXXRecord SerializeInternalFieldsCallback
struct _d3982: DeclName<_s1188> {}; // Typedef CallbackFunction
struct _d3983: DeclName<_s1187> {}; // CXXConstructor SerializeInternalFieldsCallback
struct _d3984: DeclName<_s308> {}; // ParmVar function
struct _d3985: DeclName<_s1189> {}; // ParmVar data_arg
struct _d3986: DeclName<_s86> {}; // Field callback
struct _d3987: DeclName<_s134> {}; // Field data
struct _d3988: DeclName<_s1187> {}; // CXXConstructor SerializeInternalFieldsCallback
struct _d3990: DeclName<_s1187> {}; // CXXConstructor SerializeInternalFieldsCallback
struct _d3992: DeclName<_s1190> {}; // CXXDestructor ~SerializeInternalFieldsCallback
struct _d3993: DeclName<_s1191> {}; // Typedef SerializeEmbedderFieldsCallback
struct _d3994: DeclName<_s1192> {}; // CXXRecord DeserializeInternalFieldsCallback
struct _d3995: DeclName<_s1192> {}; // CXXRecord DeserializeInternalFieldsCallback
struct _d3996: DeclName<_s1188> {}; // Typedef CallbackFunction
struct _d3997: DeclName<_s1192> {}; // CXXConstructor DeserializeInternalFieldsCallback
struct _d3998: DeclName<_s308> {}; // ParmVar function
struct _d3999: DeclName<_s1189> {}; // ParmVar data_arg
struct _d4000: DeclName<_s86> {}; // Field callback
struct _d4001: DeclName<_s134> {}; // Field data
struct _d4002: DeclName<_s1192> {}; // CXXConstructor DeserializeInternalFieldsCallback
struct _d4004: DeclName<_s1192> {}; // CXXConstructor DeserializeInternalFieldsCallback
struct _d4006: DeclName<_s1193> {}; // CXXDestructor ~DeserializeInternalFieldsCallback
struct _d4007: DeclName<_s1194> {}; // Typedef DeserializeEmbedderFieldsCallback
struct _d4008: DeclName<_s4> {}; // CXXRecord Isolate
struct _d4009: DeclName<_s1195> {}; // CXXRecord CreateParams
struct _d4010: DeclName<_s1195> {}; // CXXRecord CreateParams
struct _d4011: DeclName<_s1195> {}; // CXXConstructor CreateParams
struct _d4012: DeclName<_s1196> {}; // Field code_event_handler
struct _d4013: DeclName<_s1197> {}; // Field constraints
struct _d4014: DeclName<_s1198> {}; // Field snapshot_blob
struct _d4015: DeclName<_s1199> {}; // Field counter_lookup_callback
struct _d4016: DeclName<_s1200> {}; // Field create_histogram_callback
struct _d4017: DeclName<_s1201> {}; // Field add_histogram_sample_callback
struct _d4018: DeclName<_s1202> {}; // Field array_buffer_allocator
struct _d4019: DeclName<_s1203> {}; // Field external_references
struct _d4020: DeclName<_s1204> {}; // Field allow_atomics_wait
struct _d4021: DeclName<_s1205> {}; // Field only_terminate_in_safe_scope
struct _d4022: DeclName<_s1206> {}; // CXXRecord Scope
struct _d4023: DeclName<_s1206> {}; // CXXRecord Scope
struct _d4024: DeclName<_s1206> {}; // CXXConstructor Scope
struct _d4025: DeclName<_s63> {}; // ParmVar isolate
struct _d4026: DeclName<_s1207> {}; // CXXDestructor ~Scope
struct _d4027: DeclName<_s1206> {}; // CXXConstructor Scope
struct _d4029: DeclName<_s67> {}; // CXXMethod operator=
struct _d4031: DeclName<_s1208> {}; // CXXRecord DisallowJavascriptExecutionScope
struct _d4032: DeclName<_s1208> {}; // CXXRecord DisallowJavascriptExecutionScope
struct _d4033: DeclName<_s1209> {}; // Enum OnFailure
struct _d4034: DeclName<_s1210> {}; // EnumConstant CRASH_ON_FAILURE
struct _d4035: DeclName<_s1211> {}; // EnumConstant THROW_ON_FAILURE
struct _d4036: DeclName<_s1212> {}; // EnumConstant DUMP_ON_FAILURE
struct _d4037: DeclName<_s1208> {}; // CXXConstructor DisallowJavascriptExecutionScope
struct _d4038: DeclName<_s63> {}; // ParmVar isolate
struct _d4039: DeclName<_s1213> {}; // ParmVar on_failure
struct _d4040: DeclName<_s1214> {}; // CXXDestructor ~DisallowJavascriptExecutionScope
struct _d4041: DeclName<_s1208> {}; // CXXConstructor DisallowJavascriptExecutionScope
struct _d4043: DeclName<_s67> {}; // CXXMethod operator=
struct _d4045: DeclName<_s1215> {}; // CXXRecord AllowJavascriptExecutionScope
struct _d4046: DeclName<_s1215> {}; // CXXRecord AllowJavascriptExecutionScope
struct _d4047: DeclName<_s1215> {}; // CXXConstructor AllowJavascriptExecutionScope
struct _d4048: DeclName<_s63> {}; // ParmVar isolate
struct _d4049: DeclName<_s1216> {}; // CXXDestructor ~AllowJavascriptExecutionScope
struct _d4050: DeclName<_s1215> {}; // CXXConstructor AllowJavascriptExecutionScope
struct _d4052: DeclName<_s67> {}; // CXXMethod operator=
struct _d4054: DeclName<_s1217> {}; // CXXRecord SuppressMicrotaskExecutionScope
struct _d4055: DeclName<_s1217> {}; // CXXRecord SuppressMicrotaskExecutionScope
struct _d4056: DeclName<_s1217> {}; // CXXConstructor SuppressMicrotaskExecutionScope
struct _d4057: DeclName<_s63> {}; // ParmVar isolate
struct _d4058: DeclName<_s1217> {}; // CXXConstructor SuppressMicrotaskExecutionScope
struct _d4059: DeclName<_s1050> {}; // ParmVar microtask_queue
struct _d4060: DeclName<_s1218> {}; // CXXDestructor ~SuppressMicrotaskExecutionScope
struct _d4061: DeclName<_s1217> {}; // CXXConstructor SuppressMicrotaskExecutionScope
struct _d4063: DeclName<_s67> {}; // CXXMethod operator=
struct _d4065: DeclName<_s1219> {}; // CXXRecord SafeForTerminationScope
struct _d4066: DeclName<_s1219> {}; // CXXRecord SafeForTerminationScope
struct _d4067: DeclName<_s1219> {}; // CXXConstructor SafeForTerminationScope
struct _d4068: DeclName<_s63> {}; // ParmVar isolate
struct _d4069: DeclName<_s1220> {}; // CXXDestructor ~SafeForTerminationScope
struct _d4070: DeclName<_s1219> {}; // CXXConstructor SafeForTerminationScope
struct _d4072: DeclName<_s67> {}; // CXXMethod operator=
struct _d4074: DeclName<_s1221> {}; // Enum GarbageCollectionType
struct _d4075: DeclName<_s1222> {}; // EnumConstant kFullGarbageCollection
struct _d4076: DeclName<_s1223> {}; // EnumConstant kMinorGarbageCollection
struct _d4077: DeclName<_s1224> {}; // Enum UseCounterFeature
struct _d4078: DeclName<_s1225> {}; // EnumConstant kUseAsm
struct _d4079: DeclName<_s1226> {}; // EnumConstant kBreakIterator
struct _d4080: DeclName<_s1227> {}; // EnumConstant kLegacyConst
struct _d4081: DeclName<_s1228> {}; // EnumConstant kMarkDequeOverflow
struct _d4082: DeclName<_s1229> {}; // EnumConstant kStoreBufferOverflow
struct _d4083: DeclName<_s1230> {}; // EnumConstant kSlotsBufferOverflow
struct _d4084: DeclName<_s1231> {}; // EnumConstant kObjectObserve
struct _d4085: DeclName<_s1232> {}; // EnumConstant kForcedGC
struct _d4086: DeclName<_s1233> {}; // EnumConstant kSloppyMode
struct _d4087: DeclName<_s1234> {}; // EnumConstant kStrictMode
struct _d4088: DeclName<_s1235> {}; // EnumConstant kStrongMode
struct _d4089: DeclName<_s1236> {}; // EnumConstant kRegExpPrototypeStickyGetter
struct _d4090: DeclName<_s1237> {}; // EnumConstant kRegExpPrototypeToString
struct _d4091: DeclName<_s1238> {}; // EnumConstant kRegExpPrototypeUnicodeGetter
struct _d4092: DeclName<_s1239> {}; // EnumConstant kIntlV8Parse
struct _d4093: DeclName<_s1240> {}; // EnumConstant kIntlPattern
struct _d4094: DeclName<_s1241> {}; // EnumConstant kIntlResolved
struct _d4095: DeclName<_s1242> {}; // EnumConstant kPromiseChain
struct _d4096: DeclName<_s1243> {}; // EnumConstant kPromiseAccept
struct _d4097: DeclName<_s1244> {}; // EnumConstant kPromiseDefer
struct _d4098: DeclName<_s1245> {}; // EnumConstant kHtmlCommentInExternalScript
struct _d4099: DeclName<_s1246> {}; // EnumConstant kHtmlComment
struct _d4100: DeclName<_s1247> {}; // EnumConstant kSloppyModeBlockScopedFunctionRedefinition
struct _d4101: DeclName<_s1248> {}; // EnumConstant kForInInitializer
struct _d4102: DeclName<_s1249> {}; // EnumConstant kArrayProtectorDirtied
struct _d4103: DeclName<_s1250> {}; // EnumConstant kArraySpeciesModified
struct _d4104: DeclName<_s1251> {}; // EnumConstant kArrayPrototypeConstructorModified
struct _d4105: DeclName<_s1252> {}; // EnumConstant kArrayInstanceProtoModified
struct _d4106: DeclName<_s1253> {}; // EnumConstant kArrayInstanceConstructorModified
struct _d4107: DeclName<_s1254> {}; // EnumConstant kLegacyFunctionDeclaration
struct _d4108: DeclName<_s1255> {}; // EnumConstant kRegExpPrototypeSourceGetter
struct _d4109: DeclName<_s1256> {}; // EnumConstant kRegExpPrototypeOldFlagGetter
struct _d4110: DeclName<_s1257> {}; // EnumConstant kDecimalWithLeadingZeroInStrictMode
struct _d4111: DeclName<_s1258> {}; // EnumConstant kLegacyDateParser
struct _d4112: DeclName<_s1259> {}; // EnumConstant kDefineGetterOrSetterWouldThrow
struct _d4113: DeclName<_s1260> {}; // EnumConstant kFunctionConstructorReturnedUndefined
struct _d4114: DeclName<_s1261> {}; // EnumConstant kAssigmentExpressionLHSIsCallInSloppy
struct _d4115: DeclName<_s1262> {}; // EnumConstant kAssigmentExpressionLHSIsCallInStrict
struct _d4116: DeclName<_s1263> {}; // EnumConstant kPromiseConstructorReturnedUndefined
struct _d4117: DeclName<_s1264> {}; // EnumConstant kConstructorNonUndefinedPrimitiveReturn
struct _d4118: DeclName<_s1265> {}; // EnumConstant kLabeledExpressionStatement
struct _d4119: DeclName<_s1266> {}; // EnumConstant kLineOrParagraphSeparatorAsLineTerminator
struct _d4120: DeclName<_s1267> {}; // EnumConstant kIndexAccessor
struct _d4121: DeclName<_s1268> {}; // EnumConstant kErrorCaptureStackTrace
struct _d4122: DeclName<_s1269> {}; // EnumConstant kErrorPrepareStackTrace
struct _d4123: DeclName<_s1270> {}; // EnumConstant kErrorStackTraceLimit
struct _d4124: DeclName<_s1271> {}; // EnumConstant kWebAssemblyInstantiation
struct _d4125: DeclName<_s1272> {}; // EnumConstant kDeoptimizerDisableSpeculation
struct _d4126: DeclName<_s1273> {}; // EnumConstant kArrayPrototypeSortJSArrayModifiedPrototype
struct _d4127: DeclName<_s1274> {}; // EnumConstant kFunctionTokenOffsetTooLongForToString
struct _d4128: DeclName<_s1275> {}; // EnumConstant kWasmSharedMemory
struct _d4129: DeclName<_s1276> {}; // EnumConstant kWasmThreadOpcodes
struct _d4130: DeclName<_s1277> {}; // EnumConstant kAtomicsNotify
struct _d4131: DeclName<_s1278> {}; // EnumConstant kAtomicsWake
struct _d4132: DeclName<_s1279> {}; // EnumConstant kCollator
struct _d4133: DeclName<_s1280> {}; // EnumConstant kNumberFormat
struct _d4134: DeclName<_s1281> {}; // EnumConstant kDateTimeFormat
struct _d4135: DeclName<_s1282> {}; // EnumConstant kPluralRules
struct _d4136: DeclName<_s1283> {}; // EnumConstant kRelativeTimeFormat
struct _d4137: DeclName<_s1284> {}; // EnumConstant kLocale
struct _d4138: DeclName<_s1285> {}; // EnumConstant kListFormat
struct _d4139: DeclName<_s1286> {}; // EnumConstant kSegmenter
struct _d4140: DeclName<_s1287> {}; // EnumConstant kStringLocaleCompare
struct _d4141: DeclName<_s1288> {}; // EnumConstant kStringToLocaleUpperCase
struct _d4142: DeclName<_s1289> {}; // EnumConstant kStringToLocaleLowerCase
struct _d4143: DeclName<_s1290> {}; // EnumConstant kNumberToLocaleString
struct _d4144: DeclName<_s1291> {}; // EnumConstant kDateToLocaleString
struct _d4145: DeclName<_s1292> {}; // EnumConstant kDateToLocaleDateString
struct _d4146: DeclName<_s1293> {}; // EnumConstant kDateToLocaleTimeString
struct _d4147: DeclName<_s1294> {}; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeSloppy
struct _d4148: DeclName<_s1295> {}; // EnumConstant kAttemptOverrideReadOnlyOnPrototypeStrict
struct _d4149: DeclName<_s1296> {}; // EnumConstant kOptimizedFunctionWithOneShotBytecode
struct _d4150: DeclName<_s1297> {}; // EnumConstant kRegExpMatchIsTrueishOnNonJSRegExp
struct _d4151: DeclName<_s1298> {}; // EnumConstant kRegExpMatchIsFalseishOnJSRegExp
struct _d4152: DeclName<_s1299> {}; // EnumConstant kDateGetTimezoneOffset
struct _d4153: DeclName<_s1300> {}; // EnumConstant kStringNormalize
struct _d4154: DeclName<_s1301> {}; // EnumConstant kUseCounterFeatureCount
struct _d4155: DeclName<_s1302> {}; // Enum MessageErrorLevel
struct _d4156: DeclName<_s1303> {}; // EnumConstant kMessageLog
struct _d4157: DeclName<_s1304> {}; // EnumConstant kMessageDebug
struct _d4158: DeclName<_s1305> {}; // EnumConstant kMessageInfo
struct _d4159: DeclName<_s1306> {}; // EnumConstant kMessageError
struct _d4160: DeclName<_s1307> {}; // EnumConstant kMessageWarning
struct _d4161: DeclName<_s1308> {}; // EnumConstant kMessageAll
struct _d4162: DeclName<_s1309> {}; // Typedef UseCounterCallback
struct _d4163: DeclName<_s819> {}; // CXXMethod Allocate
struct _d4164: DeclName<_s160> {}; // CXXMethod Initialize
struct _d4165: DeclName<_s63> {}; // ParmVar isolate
struct _d4166: DeclName<_s1310> {}; // ParmVar params
struct _d4167: DeclName<_s62> {}; // CXXMethod New
struct _d4168: DeclName<_s1310> {}; // ParmVar params
struct _d4169: DeclName<_s1311> {}; // CXXMethod GetCurrent
struct _d4170: DeclName<_s1312> {}; // Typedef AbortOnUncaughtExceptionCallback
struct _d4171: DeclName<_s1313> {}; // CXXMethod SetAbortOnUncaughtExceptionCallback
struct _d4172: DeclName<_s86> {}; // ParmVar callback
struct _d4173: DeclName<_s1314> {}; // CXXMethod SetHostImportModuleDynamicallyCallback
struct _d4174: DeclName<_s86> {}; // ParmVar callback
struct _d4175: DeclName<_s1315> {}; // CXXMethod SetHostInitializeImportMetaObjectCallback
struct _d4176: DeclName<_s86> {}; // ParmVar callback
struct _d4177: DeclName<_s1316> {}; // CXXMethod SetPrepareStackTraceCallback
struct _d4178: DeclName<_s86> {}; // ParmVar callback
struct _d4179: DeclName<_s1317> {}; // CXXMethod MemoryPressureNotification
struct _d4180: DeclName<_s657> {}; // ParmVar level
struct _d4181: DeclName<_s1318> {}; // CXXMethod Enter
struct _d4182: DeclName<_s1319> {}; // CXXMethod Exit
struct _d4183: DeclName<_s531> {}; // CXXMethod Dispose
struct _d4184: DeclName<_s1320> {}; // CXXMethod DumpAndResetStats
struct _d4185: DeclName<_s1321> {}; // CXXMethod DiscardThreadSpecificMetadata
struct _d4186: DeclName<_s1322> {}; // CXXMethod SetData
struct _d4187: DeclName<_s1323> {}; // ParmVar slot
struct _d4188: DeclName<_s134> {}; // ParmVar data
struct _d4189: DeclName<_s1324> {}; // CXXMethod GetData
struct _d4190: DeclName<_s1323> {}; // ParmVar slot
struct _d4191: DeclName<_s1325> {}; // CXXMethod GetNumberOfDataSlots
struct _d4192: DeclName<_s1326> {}; // FunctionTemplate GetDataFromSnapshotOnce
struct _d4193: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4194: DeclName<_s1326> {}; // CXXMethod GetDataFromSnapshotOnce
struct _d4195: DeclName<_s132> {}; // ParmVar index
struct _d4196: DeclName<_s1327> {}; // CXXMethod GetHeapStatistics
struct _d4197: DeclName<_s1328> {}; // ParmVar heap_statistics
struct _d4198: DeclName<_s1329> {}; // CXXMethod NumberOfHeapSpaces
struct _d4199: DeclName<_s1330> {}; // CXXMethod GetHeapSpaceStatistics
struct _d4200: DeclName<_s1331> {}; // ParmVar space_statistics
struct _d4201: DeclName<_s132> {}; // ParmVar index
struct _d4202: DeclName<_s1332> {}; // CXXMethod NumberOfTrackedHeapObjectTypes
struct _d4203: DeclName<_s1333> {}; // CXXMethod GetHeapObjectStatisticsAtLastGC
struct _d4204: DeclName<_s1334> {}; // ParmVar object_statistics
struct _d4205: DeclName<_s1335> {}; // ParmVar type_index
struct _d4206: DeclName<_s1336> {}; // CXXMethod GetHeapCodeAndMetadataStatistics
struct _d4207: DeclName<_s1334> {}; // ParmVar object_statistics
struct _d4208: DeclName<_s1337> {}; // CXXMethod GetStackSample
struct _d4209: DeclName<_s1338> {}; // ParmVar state
struct _d4210: DeclName<_s1339> {}; // ParmVar frames
struct _d4211: DeclName<_s1340> {}; // ParmVar frames_limit
struct _d4212: DeclName<_s1341> {}; // ParmVar sample_info
struct _d4213: DeclName<_s1342> {}; // CXXMethod AdjustAmountOfExternalAllocatedMemory
struct _d4214: DeclName<_s1343> {}; // ParmVar change_in_bytes
struct _d4215: DeclName<_s1344> {}; // CXXMethod NumberOfPhantomHandleResetsSinceLastCall
struct _d4216: DeclName<_s1345> {}; // CXXMethod GetHeapProfiler
struct _d4217: DeclName<_s1346> {}; // CXXMethod SetIdle
struct _d4218: DeclName<_s1347> {}; // ParmVar is_idle
struct _d4219: DeclName<_s1348> {}; // CXXMethod GetArrayBufferAllocator
struct _d4220: DeclName<_s1349> {}; // CXXMethod InContext
struct _d4221: DeclName<_s1350> {}; // CXXMethod GetCurrentContext
struct _d4222: DeclName<_s1351> {}; // CXXMethod GetEnteredContext
struct _d4223: DeclName<_s1352> {}; // CXXMethod GetEnteredOrMicrotaskContext
struct _d4224: DeclName<_s1353> {}; // CXXMethod GetIncumbentContext
struct _d4225: DeclName<_s1354> {}; // CXXMethod ThrowException
struct _d4226: DeclName<_s807> {}; // ParmVar exception
struct _d4227: DeclName<_s1074> {}; // Typedef GCCallback
struct _d4228: DeclName<_s1355> {}; // Typedef GCCallbackWithData
struct _d4229: DeclName<_s1356> {}; // CXXMethod AddGCPrologueCallback
struct _d4230: DeclName<_s86> {}; // ParmVar callback
struct _d4231: DeclName<_s134> {}; // ParmVar data
struct _d4232: DeclName<_s1357> {}; // ParmVar gc_type_filter
struct _d4233: DeclName<_s1356> {}; // CXXMethod AddGCPrologueCallback
struct _d4234: DeclName<_s86> {}; // ParmVar callback
struct _d4235: DeclName<_s1357> {}; // ParmVar gc_type_filter
struct _d4236: DeclName<_s1358> {}; // CXXMethod RemoveGCPrologueCallback
struct _d4238: DeclName<_s134> {}; // ParmVar data
struct _d4239: DeclName<_s1358> {}; // CXXMethod RemoveGCPrologueCallback
struct _d4240: DeclName<_s86> {}; // ParmVar callback
struct _d4241: DeclName<_s1359> {}; // CXXMethod SetEmbedderHeapTracer
struct _d4242: DeclName<_s1360> {}; // ParmVar tracer
struct _d4243: DeclName<_s1361> {}; // CXXMethod GetEmbedderHeapTracer
struct _d4244: DeclName<_s1362> {}; // Enum AtomicsWaitEvent
struct _d4245: DeclName<_s1363> {}; // EnumConstant kStartWait
struct _d4246: DeclName<_s1364> {}; // EnumConstant kWokenUp
struct _d4247: DeclName<_s1365> {}; // EnumConstant kTimedOut
struct _d4248: DeclName<_s1366> {}; // EnumConstant kTerminatedExecution
struct _d4249: DeclName<_s1367> {}; // EnumConstant kAPIStopped
struct _d4250: DeclName<_s1368> {}; // EnumConstant kNotEqual
struct _d4251: DeclName<_s1369> {}; // CXXRecord AtomicsWaitWakeHandle
struct _d4252: DeclName<_s1369> {}; // CXXRecord AtomicsWaitWakeHandle
struct _d4253: DeclName<_s1370> {}; // CXXMethod Wake
struct _d4254: DeclName<_s1371> {}; // Typedef AtomicsWaitCallback
struct _d4255: DeclName<_s1372> {}; // CXXMethod SetAtomicsWaitCallback
struct _d4256: DeclName<_s86> {}; // ParmVar callback
struct _d4257: DeclName<_s134> {}; // ParmVar data
struct _d4258: DeclName<_s1373> {}; // CXXMethod AddGCEpilogueCallback
struct _d4259: DeclName<_s86> {}; // ParmVar callback
struct _d4260: DeclName<_s134> {}; // ParmVar data
struct _d4261: DeclName<_s1357> {}; // ParmVar gc_type_filter
struct _d4262: DeclName<_s1373> {}; // CXXMethod AddGCEpilogueCallback
struct _d4263: DeclName<_s86> {}; // ParmVar callback
struct _d4264: DeclName<_s1357> {}; // ParmVar gc_type_filter
struct _d4265: DeclName<_s1374> {}; // CXXMethod RemoveGCEpilogueCallback
struct _d4266: DeclName<_s86> {}; // ParmVar callback
struct _d4267: DeclName<_s134> {}; // ParmVar data
struct _d4268: DeclName<_s1374> {}; // CXXMethod RemoveGCEpilogueCallback
struct _d4269: DeclName<_s86> {}; // ParmVar callback
struct _d4270: DeclName<_s1375> {}; // Typedef GetExternallyAllocatedMemoryInBytesCallback
struct _d4271: DeclName<_s1376> {}; // CXXMethod SetGetExternallyAllocatedMemoryInBytesCallback
struct _d4272: DeclName<_s86> {}; // ParmVar callback
struct _d4273: DeclName<_s1377> {}; // CXXMethod TerminateExecution
struct _d4274: DeclName<_s1378> {}; // CXXMethod IsExecutionTerminating
struct _d4275: DeclName<_s1379> {}; // CXXMethod CancelTerminateExecution
struct _d4276: DeclName<_s1380> {}; // CXXMethod RequestInterrupt
struct _d4277: DeclName<_s86> {}; // ParmVar callback
struct _d4278: DeclName<_s134> {}; // ParmVar data
struct _d4279: DeclName<_s1381> {}; // CXXMethod RequestGarbageCollectionForTesting
struct _d4280: DeclName<_s87> {}; // ParmVar type
struct _d4281: DeclName<_s1382> {}; // CXXMethod SetEventLogger
struct _d4282: DeclName<_s53> {}; // ParmVar that
struct _d4283: DeclName<_s1383> {}; // CXXMethod AddBeforeCallEnteredCallback
struct _d4284: DeclName<_s86> {}; // ParmVar callback
struct _d4285: DeclName<_s1384> {}; // CXXMethod RemoveBeforeCallEnteredCallback
struct _d4286: DeclName<_s86> {}; // ParmVar callback
struct _d4287: DeclName<_s1385> {}; // CXXMethod AddCallCompletedCallback
struct _d4288: DeclName<_s86> {}; // ParmVar callback
struct _d4289: DeclName<_s1386> {}; // CXXMethod RemoveCallCompletedCallback
struct _d4290: DeclName<_s86> {}; // ParmVar callback
struct _d4291: DeclName<_s1387> {}; // CXXMethod SetPromiseHook
struct _d4292: DeclName<_s1388> {}; // ParmVar hook
struct _d4293: DeclName<_s1389> {}; // CXXMethod SetPromiseRejectCallback
struct _d4294: DeclName<_s86> {}; // ParmVar callback
struct _d4295: DeclName<_s1390> {}; // CXXMethod RunMicrotasks
struct _d4296: DeclName<_s1039> {}; // CXXMethod EnqueueMicrotask
struct _d4297: DeclName<_s1040> {}; // ParmVar microtask
struct _d4298: DeclName<_s1039> {}; // CXXMethod EnqueueMicrotask
struct _d4299: DeclName<_s86> {}; // ParmVar callback
struct _d4300: DeclName<_s134> {}; // ParmVar data
struct _d4301: DeclName<_s1391> {}; // CXXMethod SetMicrotasksPolicy
struct _d4302: DeclName<_s1037> {}; // ParmVar policy
struct _d4303: DeclName<_s1392> {}; // CXXMethod GetMicrotasksPolicy
struct _d4304: DeclName<_s1041> {}; // CXXMethod AddMicrotasksCompletedCallback
struct _d4305: DeclName<_s86> {}; // ParmVar callback
struct _d4306: DeclName<_s1041> {}; // CXXMethod AddMicrotasksCompletedCallback
struct _d4307: DeclName<_s86> {}; // ParmVar callback
struct _d4308: DeclName<_s134> {}; // ParmVar data
struct _d4309: DeclName<_s1042> {}; // CXXMethod RemoveMicrotasksCompletedCallback
struct _d4310: DeclName<_s86> {}; // ParmVar callback
struct _d4311: DeclName<_s1042> {}; // CXXMethod RemoveMicrotasksCompletedCallback
struct _d4312: DeclName<_s86> {}; // ParmVar callback
struct _d4313: DeclName<_s134> {}; // ParmVar data
struct _d4314: DeclName<_s1393> {}; // CXXMethod SetUseCounterCallback
struct _d4315: DeclName<_s86> {}; // ParmVar callback
struct _d4316: DeclName<_s1394> {}; // CXXMethod SetCounterFunction
struct _d4318: DeclName<_s1395> {}; // CXXMethod SetCreateHistogramFunction
struct _d4320: DeclName<_s1396> {}; // CXXMethod SetAddHistogramSampleFunction
struct _d4322: DeclName<_s1397> {}; // CXXMethod IdleNotificationDeadline
struct _d4323: DeclName<_s1398> {}; // ParmVar deadline_in_seconds
struct _d4324: DeclName<_s1399> {}; // CXXMethod LowMemoryNotification
struct _d4325: DeclName<_s1400> {}; // CXXMethod ContextDisposedNotification
struct _d4326: DeclName<_s1401> {}; // ParmVar dependant_context
struct _d4327: DeclName<_s1402> {}; // CXXMethod IsolateInForegroundNotification
struct _d4328: DeclName<_s1403> {}; // CXXMethod IsolateInBackgroundNotification
struct _d4329: DeclName<_s1404> {}; // CXXMethod EnableMemorySavingsMode
struct _d4330: DeclName<_s1405> {}; // CXXMethod DisableMemorySavingsMode
struct _d4331: DeclName<_s1406> {}; // CXXMethod SetRAILMode
struct _d4332: DeclName<_s1407> {}; // ParmVar rail_mode
struct _d4333: DeclName<_s1408> {}; // CXXMethod IncreaseHeapLimitForDebugging
struct _d4334: DeclName<_s1409> {}; // CXXMethod RestoreOriginalHeapLimit
struct _d4335: DeclName<_s1410> {}; // CXXMethod IsHeapLimitIncreasedForDebugging
struct _d4336: DeclName<_s1411> {}; // CXXMethod SetJitCodeEventHandler
struct _d4337: DeclName<_s293> {}; // ParmVar options
struct _d4338: DeclName<_s1412> {}; // ParmVar event_handler
struct _d4339: DeclName<_s1413> {}; // CXXMethod SetStackLimit
struct _d4340: DeclName<_s969> {}; // ParmVar stack_limit
struct _d4341: DeclName<_s1414> {}; // CXXMethod GetCodeRange
struct _d4342: DeclName<_s366> {}; // ParmVar start
struct _d4343: DeclName<_s367> {}; // ParmVar length_in_bytes
struct _d4344: DeclName<_s1415> {}; // CXXMethod GetUnwindState
struct _d4345: DeclName<_s1416> {}; // CXXMethod SetFatalErrorHandler
struct _d4346: DeclName<_s53> {}; // ParmVar that
struct _d4347: DeclName<_s1417> {}; // CXXMethod SetOOMErrorHandler
struct _d4348: DeclName<_s53> {}; // ParmVar that
struct _d4349: DeclName<_s1418> {}; // CXXMethod AddNearHeapLimitCallback
struct _d4350: DeclName<_s86> {}; // ParmVar callback
struct _d4351: DeclName<_s134> {}; // ParmVar data
struct _d4352: DeclName<_s1419> {}; // CXXMethod RemoveNearHeapLimitCallback
struct _d4353: DeclName<_s86> {}; // ParmVar callback
struct _d4354: DeclName<_s1420> {}; // ParmVar heap_limit
struct _d4355: DeclName<_s1421> {}; // CXXMethod AutomaticallyRestoreInitialHeapLimit
struct _d4356: DeclName<_s1422> {}; // ParmVar threshold_percent
struct _d4357: DeclName<_s1423> {}; // CXXMethod SetAllowCodeGenerationFromStringsCallback
struct _d4358: DeclName<_s86> {}; // ParmVar callback
struct _d4359: DeclName<_s1424> {}; // CXXMethod SetAllowWasmCodeGenerationCallback
struct _d4360: DeclName<_s86> {}; // ParmVar callback
struct _d4361: DeclName<_s1425> {}; // CXXMethod SetWasmModuleCallback
struct _d4362: DeclName<_s86> {}; // ParmVar callback
struct _d4363: DeclName<_s1426> {}; // CXXMethod SetWasmInstanceCallback
struct _d4364: DeclName<_s86> {}; // ParmVar callback
struct _d4365: DeclName<_s1427> {}; // CXXMethod SetWasmStreamingCallback
struct _d4366: DeclName<_s86> {}; // ParmVar callback
struct _d4367: DeclName<_s1428> {}; // CXXMethod SetWasmThreadsEnabledCallback
struct _d4368: DeclName<_s86> {}; // ParmVar callback
struct _d4369: DeclName<_s1429> {}; // CXXMethod IsDead
struct _d4370: DeclName<_s1430> {}; // CXXMethod AddMessageListener
struct _d4371: DeclName<_s53> {}; // ParmVar that
struct _d4372: DeclName<_s134> {}; // ParmVar data
struct _d4373: DeclName<_s1431> {}; // CXXMethod AddMessageListenerWithErrorLevel
struct _d4374: DeclName<_s53> {}; // ParmVar that
struct _d4375: DeclName<_s1432> {}; // ParmVar message_levels
struct _d4376: DeclName<_s134> {}; // ParmVar data
struct _d4377: DeclName<_s1433> {}; // CXXMethod RemoveMessageListeners
struct _d4378: DeclName<_s53> {}; // ParmVar that
struct _d4379: DeclName<_s1434> {}; // CXXMethod SetFailedAccessCheckCallbackFunction
struct _d4381: DeclName<_s1435> {}; // CXXMethod SetCaptureStackTraceForUncaughtExceptions
struct _d4382: DeclName<_s1436> {}; // ParmVar capture
struct _d4383: DeclName<_s339> {}; // ParmVar frame_limit
struct _d4384: DeclName<_s293> {}; // ParmVar options
struct _d4385: DeclName<_s1437> {}; // CXXMethod VisitExternalResources
struct _d4386: DeclName<_s1168> {}; // ParmVar visitor
struct _d4387: DeclName<_s1438> {}; // CXXMethod VisitHandlesWithClassIds
struct _d4388: DeclName<_s1168> {}; // ParmVar visitor
struct _d4389: DeclName<_s1439> {}; // CXXMethod VisitWeakHandles
struct _d4390: DeclName<_s1168> {}; // ParmVar visitor
struct _d4391: DeclName<_s1440> {}; // CXXMethod IsInUse
struct _d4392: DeclName<_s1441> {}; // CXXMethod SetAllowAtomicsWait
struct _d4393: DeclName<_s1442> {}; // ParmVar allow
struct _d4394: DeclName<_s1443> {}; // Enum TimeZoneDetection
struct _d4395: DeclName<_s1444> {}; // EnumConstant kSkip
struct _d4396: DeclName<_s1445> {}; // EnumConstant kRedetect
struct _d4397: DeclName<_s1446> {}; // CXXMethod DateTimeConfigurationChangeNotification
struct _d4398: DeclName<_s1447> {}; // ParmVar time_zone_detection
struct _d4399: DeclName<_s1448> {}; // CXXMethod LocaleConfigurationChangeNotification
struct _d4400: DeclName<_s4> {}; // CXXConstructor Isolate
struct _d4401: DeclName<_s1449> {}; // CXXDestructor ~Isolate
struct _d4402: DeclName<_s4> {}; // CXXConstructor Isolate
struct _d4404: DeclName<_s67> {}; // CXXMethod operator=
struct _d4406: DeclName<_s1450> {}; // CXXMethod operator new
struct _d4407: DeclName<_s393> {}; // ParmVar size
struct _d4408: DeclName<_s1451> {}; // CXXMethod operator new[]
struct _d4409: DeclName<_s393> {}; // ParmVar size
struct _d4410: DeclName<_s1452> {}; // CXXMethod operator delete
struct _d4413: DeclName<_s1453> {}; // CXXMethod operator delete[]
struct _d4416: DeclName<_s38> {}; // CXXRecord StartupData
struct _d4417: DeclName<_s1454> {}; // CXXMethod CanBeRehashed
struct _d4418: DeclName<_s134> {}; // Field data
struct _d4419: DeclName<_s1455> {}; // Field raw_size
struct _d4420: DeclName<_s1456> {}; // Typedef EntropySource
struct _d4421: DeclName<_s1457> {}; // Typedef ReturnAddressLocationResolver
struct _d4422: DeclName<_s1458> {}; // CXXRecord V8
struct _d4423: DeclName<_s1458> {}; // CXXRecord V8
struct _d4424: DeclName<_s1459> {}; // CXXMethod SetNativesDataBlob
struct _d4425: DeclName<_s1460> {}; // ParmVar startup_blob
struct _d4426: DeclName<_s1461> {}; // CXXMethod SetSnapshotDataBlob
struct _d4427: DeclName<_s1460> {}; // ParmVar startup_blob
struct _d4428: DeclName<_s1462> {}; // CXXMethod SetDcheckErrorHandler
struct _d4429: DeclName<_s53> {}; // ParmVar that
struct _d4430: DeclName<_s1463> {}; // CXXMethod SetFlagsFromString
struct _d4431: DeclName<_s554> {}; // ParmVar str
struct _d4432: DeclName<_s1463> {}; // CXXMethod SetFlagsFromString
struct _d4433: DeclName<_s554> {}; // ParmVar str
struct _d4434: DeclName<_s171> {}; // ParmVar length
struct _d4435: DeclName<_s1463> {}; // CXXMethod SetFlagsFromString
struct _d4436: DeclName<_s554> {}; // ParmVar str
struct _d4437: DeclName<_s171> {}; // ParmVar length
struct _d4438: DeclName<_s1464> {}; // CXXMethod SetFlagsFromCommandLine
struct _d4439: DeclName<_s663> {}; // ParmVar argc
struct _d4440: DeclName<_s681> {}; // ParmVar argv
struct _d4441: DeclName<_s1465> {}; // ParmVar remove_flags
struct _d4442: DeclName<_s1466> {}; // CXXMethod GetVersion
struct _d4443: DeclName<_s160> {}; // CXXMethod Initialize
struct _d4444: DeclName<_s1467> {}; // CXXMethod SetEntropySource
struct _d4445: DeclName<_s142> {}; // ParmVar source
struct _d4446: DeclName<_s1468> {}; // CXXMethod SetReturnAddressLocationResolver
struct _d4447: DeclName<_s1469> {}; // ParmVar return_address_resolver
struct _d4448: DeclName<_s531> {}; // CXXMethod Dispose
struct _d4449: DeclName<_s1470> {}; // CXXMethod InitializeICU
struct _d4450: DeclName<_s1471> {}; // ParmVar icu_data_file
struct _d4451: DeclName<_s1472> {}; // CXXMethod InitializeICUDefaultLocation
struct _d4452: DeclName<_s1473> {}; // ParmVar exec_path
struct _d4453: DeclName<_s1471> {}; // ParmVar icu_data_file
struct _d4454: DeclName<_s1474> {}; // CXXMethod InitializeExternalStartupData
struct _d4455: DeclName<_s1475> {}; // ParmVar directory_path
struct _d4456: DeclName<_s1474> {}; // CXXMethod InitializeExternalStartupData
struct _d4457: DeclName<_s1476> {}; // ParmVar natives_blob
struct _d4458: DeclName<_s1198> {}; // ParmVar snapshot_blob
struct _d4459: DeclName<_s1477> {}; // CXXMethod InitializePlatform
struct _d4460: DeclName<_s1478> {}; // ParmVar platform
struct _d4461: DeclName<_s1479> {}; // CXXMethod ShutdownPlatform
struct _d4462: DeclName<_s1480> {}; // CXXMethod EnableWebAssemblyTrapHandler
struct _d4463: DeclName<_s1481> {}; // ParmVar use_v8_signal_handler
struct _d4464: DeclName<_s1482> {}; // CXXMethod SetUnhandledExceptionCallback
struct _d4465: DeclName<_s1483> {}; // ParmVar unhandled_exception_callback
struct _d4466: DeclName<_s1484> {}; // CXXRecord SnapshotCreator
struct _d4467: DeclName<_s1484> {}; // CXXRecord SnapshotCreator
struct _d4468: DeclName<_s1485> {}; // Enum FunctionCodeHandling
struct _d4469: DeclName<_s1486> {}; // EnumConstant kClear
struct _d4470: DeclName<_s1487> {}; // EnumConstant kKeep
struct _d4471: DeclName<_s1484> {}; // CXXConstructor SnapshotCreator
struct _d4472: DeclName<_s63> {}; // ParmVar isolate
struct _d4473: DeclName<_s1203> {}; // ParmVar external_references
struct _d4474: DeclName<_s1488> {}; // ParmVar existing_blob
struct _d4475: DeclName<_s1484> {}; // CXXConstructor SnapshotCreator
struct _d4476: DeclName<_s1203> {}; // ParmVar external_references
struct _d4477: DeclName<_s1488> {}; // ParmVar existing_blob
struct _d4478: DeclName<_s1489> {}; // CXXDestructor ~SnapshotCreator
struct _d4479: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d4480: DeclName<_s1490> {}; // CXXMethod SetDefaultContext
struct _d4481: DeclName<_s232> {}; // ParmVar context
struct _d4482: DeclName<_s86> {}; // ParmVar callback
struct _d4483: DeclName<_s1491> {}; // CXXMethod AddContext
struct _d4484: DeclName<_s232> {}; // ParmVar context
struct _d4485: DeclName<_s86> {}; // ParmVar callback
struct _d4486: DeclName<_s1492> {}; // CXXMethod AddTemplate
struct _d4487: DeclName<_s1493> {}; // ParmVar template_obj
struct _d4488: DeclName<_s1494> {}; // FunctionTemplate AddData
struct _d4489: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4490: DeclName<_s1494> {}; // CXXMethod AddData
struct _d4491: DeclName<_s232> {}; // ParmVar context
struct _d4492: DeclName<_s386> {}; // ParmVar object
struct _d4493: DeclName<_s1494> {}; // FunctionTemplate AddData
struct _d4494: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4495: DeclName<_s1494> {}; // CXXMethod AddData
struct _d4496: DeclName<_s386> {}; // ParmVar object
struct _d4497: DeclName<_s1495> {}; // CXXMethod CreateBlob
struct _d4498: DeclName<_s1496> {}; // ParmVar function_code_handling
struct _d4499: DeclName<_s1484> {}; // CXXConstructor SnapshotCreator
struct _d4501: DeclName<_s67> {}; // CXXMethod operator=
struct _d4503: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4504: DeclName<_s20> {}; // CXXRecord Maybe
struct _d4505: DeclName<_s1497> {}; // CXXMethod IsNothing
struct _d4506: DeclName<_s1498> {}; // CXXMethod IsJust
struct _d4507: DeclName<_s1499> {}; // CXXMethod ToChecked
struct _d4508: DeclName<_s1500> {}; // CXXMethod Check
struct _d4509: DeclName<_s1501> {}; // CXXMethod To
struct _d4510: DeclName<_s71> {}; // ParmVar out
struct _d4511: DeclName<_s1502> {}; // CXXMethod FromJust
struct _d4512: DeclName<_s73> {}; // CXXMethod FromMaybe
struct _d4513: DeclName<_s74> {}; // ParmVar default_value
struct _d4514: DeclName<_s58> {}; // CXXMethod operator==
struct _d4515: DeclName<_s79> {}; // ParmVar other
struct _d4516: DeclName<_s59> {}; // CXXMethod operator!=
struct _d4517: DeclName<_s79> {}; // ParmVar other
struct _d4518: DeclName<_s1503> {}; // FunctionTemplate Nothing
struct _d4519: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4520: DeclName<_s1503> {}; // Function Nothing
struct _d4521: DeclName<_s1504> {}; // FunctionTemplate Just
struct _d4522: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4523: DeclName<_s1504> {}; // Function Just
struct _d4524: DeclName<_s1505> {}; // ParmVar t
struct _d4525: DeclName<_s20> {}; // ClassTemplateSpecialization Maybe
struct _d4526: DeclName<_s20> {}; // CXXRecord Maybe
struct _d4527: DeclName<_s1497> {}; // CXXMethod IsNothing
struct _d4528: DeclName<_s1498> {}; // CXXMethod IsJust
struct _d4529: DeclName<_s58> {}; // CXXMethod operator==
struct _d4530: DeclName<_s79> {}; // ParmVar other
struct _d4531: DeclName<_s59> {}; // CXXMethod operator!=
struct _d4532: DeclName<_s79> {}; // ParmVar other
struct _d4533: DeclName<_s20> {}; // CXXConstructor Maybe
struct _d4535: DeclName<_s20> {}; // CXXConstructor Maybe
struct _d4537: DeclName<_s1506> {}; // CXXDestructor ~Maybe
struct _d4538: DeclName<_s1507> {}; // Function JustVoid
struct _d4539: DeclName<_s1508> {}; // CXXRecord TryCatch
struct _d4540: DeclName<_s1508> {}; // CXXRecord TryCatch
struct _d4541: DeclName<_s1508> {}; // CXXConstructor TryCatch
struct _d4542: DeclName<_s63> {}; // ParmVar isolate
struct _d4543: DeclName<_s1509> {}; // CXXDestructor ~TryCatch
struct _d4544: DeclName<_s1510> {}; // CXXMethod HasCaught
struct _d4545: DeclName<_s1511> {}; // CXXMethod CanContinue
struct _d4546: DeclName<_s1512> {}; // CXXMethod HasTerminated
struct _d4547: DeclName<_s1513> {}; // CXXMethod ReThrow
struct _d4548: DeclName<_s998> {}; // CXXMethod Exception
struct _d4549: DeclName<_s40> {}; // CXXMethod StackTrace
struct _d4550: DeclName<_s232> {}; // ParmVar context
struct _d4551: DeclName<_s309> {}; // CXXMethod Message
struct _d4552: DeclName<_s78> {}; // CXXMethod Reset
struct _d4553: DeclName<_s1514> {}; // CXXMethod SetVerbose
struct _d4554: DeclName<_s162> {}; // ParmVar value
struct _d4555: DeclName<_s1515> {}; // CXXMethod IsVerbose
struct _d4556: DeclName<_s1516> {}; // CXXMethod SetCaptureMessage
struct _d4557: DeclName<_s162> {}; // ParmVar value
struct _d4558: DeclName<_s1517> {}; // CXXMethod JSStackComparableAddress
struct _d4559: DeclName<_s749> {}; // ParmVar handler
struct _d4560: DeclName<_s1508> {}; // CXXConstructor TryCatch
struct _d4562: DeclName<_s67> {}; // CXXMethod operator=
struct _d4564: DeclName<_s1518> {}; // CXXRecord ExtensionConfiguration
struct _d4565: DeclName<_s1518> {}; // CXXRecord ExtensionConfiguration
struct _d4566: DeclName<_s1518> {}; // CXXConstructor ExtensionConfiguration
struct _d4567: DeclName<_s1518> {}; // CXXConstructor ExtensionConfiguration
struct _d4568: DeclName<_s1519> {}; // ParmVar name_count
struct _d4569: DeclName<_s686> {}; // ParmVar names
struct _d4570: DeclName<_s1520> {}; // CXXMethod begin
struct _d4571: DeclName<_s1521> {}; // CXXMethod end
struct _d4572: DeclName<_s2> {}; // CXXRecord Context
struct _d4573: DeclName<_s99> {}; // CXXMethod Global
struct _d4574: DeclName<_s1522> {}; // CXXMethod DetachGlobal
struct _d4575: DeclName<_s62> {}; // CXXMethod New
struct _d4576: DeclName<_s63> {}; // ParmVar isolate
struct _d4577: DeclName<_s1523> {}; // ParmVar extensions
struct _d4578: DeclName<_s1524> {}; // ParmVar global_template
struct _d4579: DeclName<_s1525> {}; // ParmVar global_object
struct _d4580: DeclName<_s1526> {}; // ParmVar internal_fields_deserializer
struct _d4581: DeclName<_s1050> {}; // ParmVar microtask_queue
struct _d4582: DeclName<_s904> {}; // CXXMethod FromSnapshot
struct _d4583: DeclName<_s63> {}; // ParmVar isolate
struct _d4584: DeclName<_s1527> {}; // ParmVar context_snapshot_index
struct _d4585: DeclName<_s1528> {}; // ParmVar embedder_fields_deserializer
struct _d4586: DeclName<_s1523> {}; // ParmVar extensions
struct _d4587: DeclName<_s1525> {}; // ParmVar global_object
struct _d4588: DeclName<_s1050> {}; // ParmVar microtask_queue
struct _d4589: DeclName<_s1529> {}; // CXXMethod NewRemoteContext
struct _d4590: DeclName<_s63> {}; // ParmVar isolate
struct _d4591: DeclName<_s1524> {}; // ParmVar global_template
struct _d4592: DeclName<_s1525> {}; // ParmVar global_object
struct _d4593: DeclName<_s1530> {}; // CXXMethod SetSecurityToken
struct _d4594: DeclName<_s1531> {}; // ParmVar token
struct _d4595: DeclName<_s1532> {}; // CXXMethod UseDefaultSecurityToken
struct _d4596: DeclName<_s1533> {}; // CXXMethod GetSecurityToken
struct _d4597: DeclName<_s1318> {}; // CXXMethod Enter
struct _d4598: DeclName<_s1319> {}; // CXXMethod Exit
struct _d4599: DeclName<_s129> {}; // CXXMethod GetIsolate
struct _d4600: DeclName<_s1534> {}; // Enum EmbedderDataFields
struct _d4601: DeclName<_s1535> {}; // EnumConstant kDebugIdIndex
struct _d4602: DeclName<_s1536> {}; // CXXMethod GetNumberOfEmbedderDataFields
struct _d4603: DeclName<_s1537> {}; // CXXMethod GetEmbedderData
struct _d4604: DeclName<_s132> {}; // ParmVar index
struct _d4605: DeclName<_s1538> {}; // CXXMethod GetExtrasBindingObject
struct _d4606: DeclName<_s1539> {}; // CXXMethod SetEmbedderData
struct _d4607: DeclName<_s132> {}; // ParmVar index
struct _d4608: DeclName<_s162> {}; // ParmVar value
struct _d4609: DeclName<_s1540> {}; // CXXMethod GetAlignedPointerFromEmbedderData
struct _d4610: DeclName<_s132> {}; // ParmVar index
struct _d4611: DeclName<_s1541> {}; // CXXMethod SetAlignedPointerInEmbedderData
struct _d4612: DeclName<_s132> {}; // ParmVar index
struct _d4613: DeclName<_s162> {}; // ParmVar value
struct _d4614: DeclName<_s1542> {}; // CXXMethod AllowCodeGenerationFromStrings
struct _d4615: DeclName<_s1442> {}; // ParmVar allow
struct _d4616: DeclName<_s1543> {}; // CXXMethod IsCodeGenerationFromStringsAllowed
struct _d4617: DeclName<_s1544> {}; // CXXMethod SetErrorMessageForCodeGenerationFromStrings
struct _d4618: DeclName<_s384> {}; // ParmVar message
struct _d4619: DeclName<_s1326> {}; // FunctionTemplate GetDataFromSnapshotOnce
struct _d4620: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4621: DeclName<_s1326> {}; // CXXMethod GetDataFromSnapshotOnce
struct _d4622: DeclName<_s132> {}; // ParmVar index
struct _d4623: DeclName<_s1545> {}; // Typedef AbortScriptExecutionCallback
struct _d4624: DeclName<_s1546> {}; // CXXMethod SetAbortScriptExecution
struct _d4625: DeclName<_s86> {}; // ParmVar callback
struct _d4626: DeclName<_s1206> {}; // CXXRecord Scope
struct _d4627: DeclName<_s1206> {}; // CXXRecord Scope
struct _d4628: DeclName<_s1206> {}; // CXXConstructor Scope
struct _d4629: DeclName<_s232> {}; // ParmVar context
struct _d4630: DeclName<_s1207> {}; // CXXDestructor ~Scope
struct _d4631: DeclName<_s1547> {}; // CXXRecord BackupIncumbentScope
struct _d4632: DeclName<_s1547> {}; // CXXRecord BackupIncumbentScope
struct _d4633: DeclName<_s1547> {}; // CXXConstructor BackupIncumbentScope
struct _d4634: DeclName<_s1548> {}; // ParmVar backup_incumbent_context
struct _d4635: DeclName<_s1549> {}; // CXXDestructor ~BackupIncumbentScope
struct _d4636: DeclName<_s1517> {}; // CXXMethod JSStackComparableAddress
struct _d4637: DeclName<_s1550> {}; // CXXRecord Unlocker
struct _d4638: DeclName<_s1550> {}; // CXXRecord Unlocker
struct _d4639: DeclName<_s1550> {}; // CXXConstructor Unlocker
struct _d4640: DeclName<_s63> {}; // ParmVar isolate
struct _d4641: DeclName<_s1551> {}; // CXXDestructor ~Unlocker
struct _d4642: DeclName<_s1552> {}; // CXXRecord Locker
struct _d4643: DeclName<_s1552> {}; // CXXRecord Locker
struct _d4644: DeclName<_s1552> {}; // CXXConstructor Locker
struct _d4645: DeclName<_s63> {}; // ParmVar isolate
struct _d4646: DeclName<_s1553> {}; // CXXDestructor ~Locker
struct _d4647: DeclName<_s1554> {}; // CXXMethod IsLocked
struct _d4648: DeclName<_s63> {}; // ParmVar isolate
struct _d4649: DeclName<_s1555> {}; // CXXMethod IsActive
struct _d4650: DeclName<_s1552> {}; // CXXConstructor Locker
struct _d4652: DeclName<_s67> {}; // CXXMethod operator=
struct _d4654: DeclName<_s1556> {}; // CXXRecord Unwinder
struct _d4655: DeclName<_s1556> {}; // CXXRecord Unwinder
struct _d4656: DeclName<_s1557> {}; // CXXMethod TryUnwindV8Frames
struct _d4657: DeclName<_s1558> {}; // ParmVar unwind_state
struct _d4658: DeclName<_s1559> {}; // ParmVar register_state
struct _d4659: DeclName<_s1560> {}; // ParmVar stack_base
struct _d4660: DeclName<_s1561> {}; // CXXMethod PCIsInV8
struct _d4661: DeclName<_s1558> {}; // ParmVar unwind_state
struct _d4662: DeclName<_s357> {}; // ParmVar pc
struct _d4663: DeclName<_s63> {}; // ParmVar isolate
struct _d4664: DeclName<_s53> {}; // ParmVar that
struct _d4665: DeclName<_s63> {}; // ParmVar isolate
struct _d4666: DeclName<_s53> {}; // ParmVar that
struct _d4667: DeclName<_s63> {}; // ParmVar isolate
struct _d4668: DeclName<_s53> {}; // ParmVar that
struct _d4669: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4670: DeclName<_s63> {}; // ParmVar isolate
struct _d4671: DeclName<_s122> {}; // ParmVar handle
struct _d4672: DeclName<_s63> {}; // ParmVar isolate
struct _d4673: DeclName<_s132> {}; // ParmVar index
struct _d4674: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4675: DeclName<_s63> {}; // ParmVar isolate
struct _d4676: DeclName<_s79> {}; // ParmVar other
struct _d4677: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4678: DeclName<_s63> {}; // ParmVar isolate
struct _d4679: DeclName<_s79> {}; // ParmVar other
struct _d4680: DeclName<_s83> {}; // TemplateTypeParm P
struct _d4681: DeclName<_s85> {}; // ParmVar parameter
struct _d4682: DeclName<_s86> {}; // ParmVar callback
struct _d4683: DeclName<_s87> {}; // ParmVar type
struct _d4684: DeclName<_s83> {}; // TemplateTypeParm P
struct _d4685: DeclName<_s90> {}; // ParmVar label
struct _d4686: DeclName<_s93> {}; // ParmVar class_id
struct _d4687: DeclName<_s79> {}; // ParmVar other
struct _d4688: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4689: DeclName<_s101> {}; // ParmVar rhs
struct _d4690: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4691: DeclName<_s63> {}; // ParmVar isolate
struct _d4692: DeclName<_s79> {}; // ParmVar other
struct _d4693: DeclName<_s79> {}; // ParmVar other
struct _d4694: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4695: DeclName<_s101> {}; // ParmVar rhs
struct _d4696: DeclName<_s93> {}; // ParmVar class_id
struct _d4697: DeclName<_s85> {}; // ParmVar parameter
struct _d4698: DeclName<_s86> {}; // ParmVar callback
struct _d4699: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4700: DeclName<_s122> {}; // ParmVar handle
struct _d4701: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4702: DeclName<_s122> {}; // ParmVar handle
struct _d4703: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4704: DeclName<_s122> {}; // ParmVar handle
struct _d4705: DeclName<_s227> {}; // ParmVar i
struct _d4706: DeclName<_s227> {}; // ParmVar i
struct _d4707: DeclName<_s227> {}; // ParmVar i
struct _d4708: DeclName<_s162> {}; // ParmVar value
struct _d4709: DeclName<_s52> {}; // TemplateTypeParm S
struct _d4710: DeclName<_s696> {}; // ParmVar whatever
struct _d4711: DeclName<_s711> {}; // ParmVar implicit_args
struct _d4712: DeclName<_s665> {}; // ParmVar values
struct _d4713: DeclName<_s171> {}; // ParmVar length
struct _d4714: DeclName<_s227> {}; // ParmVar i
struct _d4715: DeclName<_s187> {}; // ParmVar resource_name
struct _d4716: DeclName<_s188> {}; // ParmVar resource_line_offset
struct _d4717: DeclName<_s189> {}; // ParmVar resource_column_offset
struct _d4718: DeclName<_s190> {}; // ParmVar resource_is_shared_cross_origin
struct _d4719: DeclName<_s191> {}; // ParmVar script_id
struct _d4720: DeclName<_s192> {}; // ParmVar source_map_url
struct _d4721: DeclName<_s193> {}; // ParmVar resource_is_opaque
struct _d4722: DeclName<_s177> {}; // ParmVar is_wasm
struct _d4723: DeclName<_s178> {}; // ParmVar is_module
struct _d4724: DeclName<_s194> {}; // ParmVar host_defined_options
struct _d4725: DeclName<_s1146> {}; // ParmVar string
struct _d4726: DeclName<_s237> {}; // ParmVar origin
struct _d4727: DeclName<_s134> {}; // ParmVar data
struct _d4728: DeclName<_s1146> {}; // ParmVar string
struct _d4729: DeclName<_s134> {}; // ParmVar data
struct _d4730: DeclName<_s63> {}; // ParmVar isolate
struct _d4731: DeclName<_s162> {}; // ParmVar value
struct _d4732: DeclName<_s63> {}; // ParmVar isolate
struct _d4733: DeclName<_s558> {}; // ParmVar name
struct _d4734: DeclName<_s162> {}; // ParmVar value
struct _d4735: DeclName<_s134> {}; // ParmVar data
struct _d4736: DeclName<_s134> {}; // ParmVar data
struct _d4737: DeclName<_s134> {}; // ParmVar data
struct _d4738: DeclName<_s134> {}; // ParmVar data
struct _d4739: DeclName<_s132> {}; // ParmVar index
struct _d4740: DeclName<_s132> {}; // ParmVar index
struct _d4741: DeclName<_s162> {}; // ParmVar value
struct _d4742: DeclName<_s63> {}; // ParmVar isolate
struct _d4743: DeclName<_s539> {}; // ParmVar encoding_out
struct _d4744: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4745: DeclName<_s162> {}; // ParmVar value
struct _d4746: DeclName<_s162> {}; // ParmVar value
struct _d4747: DeclName<_s162> {}; // ParmVar value
struct _d4748: DeclName<_s162> {}; // ParmVar value
struct _d4749: DeclName<_s134> {}; // ParmVar data
struct _d4750: DeclName<_s162> {}; // ParmVar value
struct _d4751: DeclName<_s162> {}; // ParmVar value
struct _d4752: DeclName<_s162> {}; // ParmVar value
struct _d4753: DeclName<_s162> {}; // ParmVar value
struct _d4754: DeclName<_s162> {}; // ParmVar value
struct _d4755: DeclName<_s162> {}; // ParmVar value
struct _d4756: DeclName<_s162> {}; // ParmVar value
struct _d4757: DeclName<_s162> {}; // ParmVar value
struct _d4758: DeclName<_s162> {}; // ParmVar value
struct _d4759: DeclName<_s162> {}; // ParmVar value
struct _d4760: DeclName<_s162> {}; // ParmVar value
struct _d4761: DeclName<_s162> {}; // ParmVar value
struct _d4762: DeclName<_s162> {}; // ParmVar value
struct _d4763: DeclName<_s162> {}; // ParmVar value
struct _d4764: DeclName<_s162> {}; // ParmVar value
struct _d4765: DeclName<_s162> {}; // ParmVar value
struct _d4766: DeclName<_s162> {}; // ParmVar value
struct _d4767: DeclName<_s162> {}; // ParmVar value
struct _d4768: DeclName<_s162> {}; // ParmVar value
struct _d4769: DeclName<_s162> {}; // ParmVar value
struct _d4770: DeclName<_s162> {}; // ParmVar value
struct _d4771: DeclName<_s162> {}; // ParmVar value
struct _d4772: DeclName<_s162> {}; // ParmVar value
struct _d4773: DeclName<_s162> {}; // ParmVar value
struct _d4774: DeclName<_s162> {}; // ParmVar value
struct _d4775: DeclName<_s162> {}; // ParmVar value
struct _d4776: DeclName<_s162> {}; // ParmVar value
struct _d4777: DeclName<_s162> {}; // ParmVar value
struct _d4778: DeclName<_s162> {}; // ParmVar value
struct _d4779: DeclName<_s162> {}; // ParmVar value
struct _d4780: DeclName<_s162> {}; // ParmVar value
struct _d4781: DeclName<_s162> {}; // ParmVar value
struct _d4782: DeclName<_s162> {}; // ParmVar value
struct _d4783: DeclName<_s162> {}; // ParmVar value
struct _d4784: DeclName<_s162> {}; // ParmVar value
struct _d4785: DeclName<_s162> {}; // ParmVar value
struct _d4786: DeclName<_s162> {}; // ParmVar value
struct _d4787: DeclName<_s162> {}; // ParmVar value
struct _d4788: DeclName<_s63> {}; // ParmVar isolate
struct _d4789: DeclName<_s63> {}; // ParmVar isolate
struct _d4790: DeclName<_s63> {}; // ParmVar isolate
struct _d4791: DeclName<_s63> {}; // ParmVar isolate
struct _d4792: DeclName<_s1323> {}; // ParmVar slot
struct _d4793: DeclName<_s134> {}; // ParmVar data
struct _d4794: DeclName<_s1323> {}; // ParmVar slot
struct _d4795: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4796: DeclName<_s132> {}; // ParmVar index
struct _d4797: DeclName<_s1343> {}; // ParmVar change_in_bytes
struct _d4798: DeclName<_s132> {}; // ParmVar index
struct _d4799: DeclName<_s132> {}; // ParmVar index
struct _d4800: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4801: DeclName<_s132> {}; // ParmVar index
struct _d4802: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4803: DeclName<_s232> {}; // ParmVar context
struct _d4804: DeclName<_s386> {}; // ParmVar object
struct _d4805: DeclName<_s21> {}; // TemplateTypeParm T
struct _d4806: DeclName<_s386> {}; // ParmVar object
// Done: 0
